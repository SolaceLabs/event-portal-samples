{"version":3,"file":"solclient-full.js","mappings":"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IAAI9qI,WAAW,EAAC,GAAG,IAAI,KAAK,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,KAAK,KAAK,KAAK,KAAK,GAAG,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,KAAK,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,KAAK,KAAK,GAAG,GAAG,GAAG,KAAK,KAAK,KAAK,IAAI,KAAK,GAAG,GAAG,GAAG,KAAK,KAAK,KAAK,IAAI,KAAK,GAAG,GAAG,GAAG,KAAK,KAAK,KAAK,IAAI,KAAK,GAAG,GAAG,GAAG,KAAK,KAAK,KAAK,IAAI,KAAK,GAAG,GAAG,GAAG,KAAK,KAAK,KAAK,IAAI,KAAK,KAAK,KAAK,KAAK,GAAG,GAAG,IAAI,KAAK,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,KAAK,IAAI,IAAI,KAAK,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,KAAK,IAAI,IAAI,KAAK,KAAK,KAAK,IAAI,GAAG,IAAI,IAAI,KAAK,KAAK,IAAI,GAAG,IAAI,GAAG,KAAK,IAAI,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,KAAK,IAAI,IAAI,KAAK,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,KAAK,IAAI,IAAI,KAAK,KAAK,KAAK,IAAI,GAAG,IAAI,IAAI,KAAK,KAAK,IAAI,GAAG,IAAI,GAAG,KAAK,IAAI,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,KAAK,IAAI,IAAI,KAAK,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,KAAK,IAAI,IAAI,KAAK,KAAK,KAAK,IAAI,GAAG,IAAI,IAAI,KAAK,KAAK,IAAI,GAAG,IAAI,GAAG,KAAK,IAAI,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,KAAK,IAAI,IAAI,KAAK,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,KAAK,IAAI,IAAI,KAAK,KAAK,KA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","sources":["webpack://solace/webpack/universalModuleDefinition","webpack://solace/./index.js","webpack://solace/./modules/solclient-convert/api.js","webpack://solace/./modules/solclient-convert/lib/base64.js","webpack://solace/./modules/solclient-convert/lib/bits.js","webpack://solace/./modules/solclient-convert/lib/convert.js","webpack://solace/./modules/solclient-convert/lib/hex.js","webpack://solace/./modules/solclient-convert/lib/long.js","webpack://solace/./modules/solclient-core/api-internal.js","webpack://solace/./modules/solclient-core/api.js","webpack://solace/./modules/solclient-debug/api.js","webpack://solace/./modules/solclient-debug/lib/debug.js","webpack://solace/./modules/solclient-destination/api.js","webpack://solace/./modules/solclient-destination/lib/destination-from-network.js","webpack://solace/./modules/solclient-destination/lib/destination-type.js","webpack://solace/./modules/solclient-destination/lib/destination-util.js","webpack://solace/./modules/solclient-destination/lib/destination.js","webpack://solace/./modules/solclient-destination/lib/queue.js","webpack://solace/./modules/solclient-destination/lib/subscription-info.js","webpack://solace/./modules/solclient-destination/lib/topic.js","webpack://solace/./modules/solclient-env/api.js","webpack://solace/./modules/solclient-error/api.js","webpack://solace/./modules/solclient-error/lib/error-response-subcode-mapper.js","webpack://solace/./modules/solclient-error/lib/error-subcodes.js","webpack://solace/./modules/solclient-error/lib/not-implemented-error.js","webpack://solace/./modules/solclient-error/lib/operation-error.js","webpack://solace/./modules/solclient-error/lib/request-error.js","webpack://solace/./modules/solclient-error/lib/request-event-codes.js","webpack://solace/./modules/solclient-error/lib/solace-error.js","webpack://solace/./modules/solclient-eskit/api.js","webpack://solace/./modules/solclient-eskit/lib/array-operations.js","webpack://solace/./modules/solclient-eskit/lib/assert.js","webpack://solace/./modules/solclient-eskit/lib/bidi-map.js","webpack://solace/./modules/solclient-eskit/lib/enum.js","webpack://solace/./modules/solclient-eskit/lib/iterator.js","webpack://solace/./modules/solclient-eskit/lib/lazy.js","webpack://solace/./modules/solclient-eskit/lib/make-map.js","webpack://solace/./modules/solclient-eskit/lib/mixin.js","webpack://solace/./modules/solclient-eskit/lib/resolver.js","webpack://solace/./modules/solclient-eskit/lib/set-operations.js","webpack://solace/./modules/solclient-events/api.js","webpack://solace/./modules/solclient-events/lib/event-emitter.js","webpack://solace/./modules/solclient-events/lib/timer.js","webpack://solace/./modules/solclient-factory/api.js","webpack://solace/./modules/solclient-factory/lib/profile-binding.js","webpack://solace/./modules/solclient-factory/lib/solclient-factory-profiles.js","webpack://solace/./modules/solclient-factory/lib/solclient-factory-properties.js","webpack://solace/./modules/solclient-factory/lib/solclient-factory.js","webpack://solace/./modules/solclient-flow/api.js","webpack://solace/./modules/solclient-flow/lib/flow-operation.js","webpack://solace/./modules/solclient-flow/lib/flow.js","webpack://solace/./modules/solclient-flow/lib/private-flow-event-names.js","webpack://solace/./modules/solclient-fsm/api.js","webpack://solace/./modules/solclient-fsm/lib/entry-point.js","webpack://solace/./modules/solclient-fsm/lib/event.js","webpack://solace/./modules/solclient-fsm/lib/exit-point.js","webpack://solace/./modules/solclient-fsm/lib/object.js","webpack://solace/./modules/solclient-fsm/lib/state-context.js","webpack://solace/./modules/solclient-fsm/lib/state-machine.js","webpack://solace/./modules/solclient-fsm/lib/state.js","webpack://solace/./modules/solclient-log/api.js","webpack://solace/./modules/solclient-log/lib/console-log-impl.js","webpack://solace/./modules/solclient-log/lib/global-binding.js","webpack://solace/./modules/solclient-log/lib/log-impl.js","webpack://solace/./modules/solclient-log/lib/log-levels.js","webpack://solace/./modules/solclient-message-consumer/api.js","webpack://solace/./modules/solclient-message-consumer/lib/application-acks.js","webpack://solace/./modules/solclient-message-consumer/lib/consumer-flows.js","webpack://solace/./modules/solclient-message-consumer/lib/consumer-fsm-event-names.js","webpack://solace/./modules/solclient-message-consumer/lib/consumer-fsm-event.js","webpack://solace/./modules/solclient-message-consumer/lib/consumer-fsm.js","webpack://solace/./modules/solclient-message-consumer/lib/consumer-state-names.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer-acknowledge-modes.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer-event-names.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer-event.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer-properties-validator.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer-properties.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer.js","webpack://solace/./modules/solclient-message-consumer/lib/message-dispatcher.js","webpack://solace/./modules/solclient-message-consumer/lib/queue-browser-event-names.js","webpack://solace/./modules/solclient-message-consumer/lib/queue-browser-properties.js","webpack://solace/./modules/solclient-message-consumer/lib/queue-browser.js","webpack://solace/./modules/solclient-message-consumer/lib/transport-acks.js","webpack://solace/./modules/solclient-message-publisher/api.js","webpack://solace/./modules/solclient-message-publisher/lib/message-ids.js","webpack://solace/./modules/solclient-message-publisher/lib/message-publisher-acknowledge-modes.js","webpack://solace/./modules/solclient-message-publisher/lib/message-publisher-event-names.js","webpack://solace/./modules/solclient-message-publisher/lib/message-publisher-properties-validator.js","webpack://solace/./modules/solclient-message-publisher/lib/message-publisher-properties.js","webpack://solace/./modules/solclient-message-publisher/lib/message-publisher.js","webpack://solace/./modules/solclient-message-publisher/lib/publisher-fsm-event-names.js","webpack://solace/./modules/solclient-message-publisher/lib/publisher-fsm-event.js","webpack://solace/./modules/solclient-message-publisher/lib/publisher-fsm.js","webpack://solace/./modules/solclient-message-publisher/lib/publisher-state-names.js","webpack://solace/./modules/solclient-message/api.js","webpack://solace/./modules/solclient-message/lib/message-cache-status.js","webpack://solace/./modules/solclient-message/lib/message-delivery-mode-types.js","webpack://solace/./modules/solclient-message/lib/message-dump-flags.js","webpack://solace/./modules/solclient-message/lib/message-dump-standard-provider.js","webpack://solace/./modules/solclient-message/lib/message-dump-util.js","webpack://solace/./modules/solclient-message/lib/message-types.js","webpack://solace/./modules/solclient-message/lib/message-user-cos-types.js","webpack://solace/./modules/solclient-message/lib/message.js","webpack://solace/./modules/solclient-message/lib/replication-group-message-id.js","webpack://solace/./modules/solclient-queue/api.js","webpack://solace/./modules/solclient-queue/lib/abstract-queue-descriptor.js","webpack://solace/./modules/solclient-queue/lib/queue-access-types.js","webpack://solace/./modules/solclient-queue/lib/queue-descriptor-validator.js","webpack://solace/./modules/solclient-queue/lib/queue-descriptor.js","webpack://solace/./modules/solclient-queue/lib/queue-discard-behaviors.js","webpack://solace/./modules/solclient-queue/lib/queue-permissions.js","webpack://solace/./modules/solclient-queue/lib/queue-properties-validator.js","webpack://solace/./modules/solclient-queue/lib/queue-properties.js","webpack://solace/./modules/solclient-queue/lib/queue-types.js","webpack://solace/./modules/solclient-replaystart/api.js","webpack://solace/./modules/solclient-replaystart/lib/replayStartLocation.js","webpack://solace/./modules/solclient-replaystart/lib/replayStartLocationBeginning.js","webpack://solace/./modules/solclient-replaystart/lib/replayStartLocationDate.js","webpack://solace/./modules/solclient-sdt/api.js","webpack://solace/./modules/solclient-sdt/lib/codec/api.js","webpack://solace/./modules/solclient-sdt/lib/codec/encode-header.js","webpack://solace/./modules/solclient-sdt/lib/codec/encode-integer.js","webpack://solace/./modules/solclient-sdt/lib/codec/encode-map.js","webpack://solace/./modules/solclient-sdt/lib/codec/encode-single-element.js","webpack://solace/./modules/solclient-sdt/lib/codec/encode-stream.js","webpack://solace/./modules/solclient-sdt/lib/codec/ieee754lib.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-destination.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-field-header.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-float.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-integer.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-map.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-single-element.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-stream.js","webpack://solace/./modules/solclient-sdt/lib/sdt-data-types.js","webpack://solace/./modules/solclient-sdt/lib/sdt-destination-types.js","webpack://solace/./modules/solclient-sdt/lib/sdt-field-types.js","webpack://solace/./modules/solclient-sdt/lib/sdt-field.js","webpack://solace/./modules/solclient-sdt/lib/sdt-map-container.js","webpack://solace/./modules/solclient-sdt/lib/sdt-stream-container.js","webpack://solace/./modules/solclient-sdt/lib/sdt-unsupported-value-error.js","webpack://solace/./modules/solclient-sdt/lib/sdt-value-error-subcodes.js","webpack://solace/./modules/solclient-sdt/lib/validate-sdt-field.js","webpack://solace/./modules/solclient-session/api.js","webpack://solace/./modules/solclient-session/lib/authentication-schemes.js","webpack://solace/./modules/solclient-session/lib/capability-types.js","webpack://solace/./modules/solclient-session/lib/correlated-request.js","webpack://solace/./modules/solclient-session/lib/default-capabilities.js","webpack://solace/./modules/solclient-session/lib/global-context.js","webpack://solace/./modules/solclient-session/lib/host-list-dns-filter.js","webpack://solace/./modules/solclient-session/lib/host-list.js","webpack://solace/./modules/solclient-session/lib/message-rx-cb-info.js","webpack://solace/./modules/solclient-session/lib/mutable-session-properties.js","webpack://solace/./modules/solclient-session/lib/outstanding-data-request.js","webpack://solace/./modules/solclient-session/lib/p2p-util.js","webpack://solace/./modules/solclient-session/lib/session-event-cb-info.js","webpack://solace/./modules/solclient-session/lib/session-event-codes.js","webpack://solace/./modules/solclient-session/lib/session-event-names.js","webpack://solace/./modules/solclient-session/lib/session-event.js","webpack://solace/./modules/solclient-session/lib/session-fsm-event.js","webpack://solace/./modules/solclient-session/lib/session-fsm.js","webpack://solace/./modules/solclient-session/lib/session-operations.js","webpack://solace/./modules/solclient-session/lib/session-properties-validator.js","webpack://solace/./modules/solclient-session/lib/session-properties.js","webpack://solace/./modules/solclient-session/lib/session-request-types.js","webpack://solace/./modules/solclient-session/lib/session-state-names.js","webpack://solace/./modules/solclient-session/lib/session-states.js","webpack://solace/./modules/solclient-session/lib/session.js","webpack://solace/./modules/solclient-session/lib/ssl-downgrades.js","webpack://solace/./modules/solclient-session/lib/subscription-update-timeout-messages.js","webpack://solace/./modules/solclient-smf/api.js","webpack://solace/./modules/solclient-smf/lib/codec/adprotocol.js","webpack://solace/./modules/solclient-smf/lib/codec/api.js","webpack://solace/./modules/solclient-smf/lib/codec/client-ctrl.js","webpack://solace/./modules/solclient-smf/lib/codec/content-summary-element.js","webpack://solace/./modules/solclient-smf/lib/codec/content-summary-types.js","webpack://solace/./modules/solclient-smf/lib/codec/decode.js","webpack://solace/./modules/solclient-smf/lib/codec/encode.js","webpack://solace/./modules/solclient-smf/lib/codec/param-parse.js","webpack://solace/./modules/solclient-smf/lib/codec/parse-smf.js","webpack://solace/./modules/solclient-smf/lib/codec/priority-user-cos-map.js","webpack://solace/./modules/solclient-smf/lib/codec/smp.js","webpack://solace/./modules/solclient-smf/lib/codec/transport.js","webpack://solace/./modules/solclient-smf/lib/message-objects/adprotocol-message.js","webpack://solace/./modules/solclient-smf/lib/message-objects/api.js","webpack://solace/./modules/solclient-smf/lib/message-objects/base-message.js","webpack://solace/./modules/solclient-smf/lib/message-objects/binary-meta-block.js","webpack://solace/./modules/solclient-smf/lib/message-objects/client-ctrl-message.js","webpack://solace/./modules/solclient-smf/lib/message-objects/keep-alive-message.js","webpack://solace/./modules/solclient-smf/lib/message-objects/smf-header.js","webpack://solace/./modules/solclient-smf/lib/message-objects/smf-parameter.js","webpack://solace/./modules/solclient-smf/lib/message-objects/smf-uh.js","webpack://solace/./modules/solclient-smf/lib/message-objects/smp-message.js","webpack://solace/./modules/solclient-smf/lib/message-objects/transport-smf-message.js","webpack://solace/./modules/solclient-smf/lib/smf-adprotocol-message-types.js","webpack://solace/./modules/solclient-smf/lib/smf-adprotocol-params.js","webpack://solace/./modules/solclient-smf/lib/smf-client-ctrl-message-types.js","webpack://solace/./modules/solclient-smf/lib/smf-client-ctrl-params.js","webpack://solace/./modules/solclient-smf/lib/smf-parameter-types.js","webpack://solace/./modules/solclient-smf/lib/smf-protocols.js","webpack://solace/./modules/solclient-smf/lib/smf-smp-message-type-flags.js","webpack://solace/./modules/solclient-smf/lib/smf-smp-message-types.js","webpack://solace/./modules/solclient-smf/lib/smf-transport-session-message-types.js","webpack://solace/./modules/solclient-solcache-session/api.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-cb-info.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-context.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-get-result-codes.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-get-result.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-live-data-actions.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-request-result.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-request-types.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-request.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-return-codes.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-return-subcodes.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-session-properties.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-session-subscribe-info.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-session.js","webpack://solace/./modules/solclient-stats/api.js","webpack://solace/./modules/solclient-stats/lib/stat-bymode.js","webpack://solace/./modules/solclient-stats/lib/stat-types.js","webpack://solace/./modules/solclient-stats/lib/stats.js","webpack://solace/./modules/solclient-transport/api.js","webpack://solace/./modules/solclient-transport/lib/base-smf-client.js","webpack://solace/./modules/solclient-transport/lib/buffer-queue.js","webpack://solace/./modules/solclient-transport/lib/buffer-smf-client.js","webpack://solace/./modules/solclient-transport/lib/smf-client.js","webpack://solace/./modules/solclient-transport/lib/transport-base.js","webpack://solace/./modules/solclient-transport/lib/transport-capabilities.js","webpack://solace/./modules/solclient-transport/lib/transport-client-stats.js","webpack://solace/./modules/solclient-transport/lib/transport-error.js","webpack://solace/./modules/solclient-transport/lib/transport-factory.js","webpack://solace/./modules/solclient-transport/lib/transport-protocol-handler.js","webpack://solace/./modules/solclient-transport/lib/transport-protocols.js","webpack://solace/./modules/solclient-transport/lib/transport-return-codes.js","webpack://solace/./modules/solclient-transport/lib/transport-session-event-codes.js","webpack://solace/./modules/solclient-transport/lib/transport-session-event.js","webpack://solace/./modules/solclient-transport/lib/transport-session-states.js","webpack://solace/./modules/solclient-transport/lib/tsh-state.js","webpack://solace/./modules/solclient-transport/lib/web/api.js","webpack://solace/./modules/solclient-transport/lib/web/http/api.js","webpack://solace/./modules/solclient-transport/lib/web/http/http-connection.js","webpack://solace/./modules/solclient-transport/lib/web/http/http-transport-session.js","webpack://solace/./modules/solclient-transport/lib/web/http/send-xhr.js","webpack://solace/./modules/solclient-transport/lib/web/http/xhr-factory.js","webpack://solace/./modules/solclient-transport/lib/web/state-base64.js","webpack://solace/./modules/solclient-transport/lib/web/state-binary.js","webpack://solace/./modules/solclient-transport/lib/web/state-streaming-and-binary.js","webpack://solace/./modules/solclient-transport/lib/web/state-websocket-binary.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport-capabilities.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport-events.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport-fsm.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport-session-base.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport-states.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport.js","webpack://solace/./modules/solclient-transport/lib/web/websocket-close-codes.js","webpack://solace/./modules/solclient-transport/lib/web/websocket-transport-session.js","webpack://solace/./modules/solclient-util/api.js","webpack://solace/./modules/solclient-util/lib/api-properties-validators.js","webpack://solace/./modules/solclient-util/lib/api-properties.js","webpack://solace/./modules/solclient-util/lib/array-utils.js","webpack://solace/./modules/solclient-util/lib/browser-url-polyfill.js","webpack://solace/./modules/solclient-util/lib/process.js","webpack://solace/./modules/solclient-util/lib/string-buffer.js","webpack://solace/./modules/solclient-util/lib/string-utils.js","webpack://solace/./modules/solclient-util/lib/timing-bucket.js","webpack://solace/./modules/solclient-util/lib/url.js","webpack://solace/./modules/solclient-util/lib/uuid.js","webpack://solace/./modules/solclient-util/lib/version.js","webpack://solace/./modules/solclient-validate/api.js","webpack://solace/./modules/solclient-validate/lib/base-checks.js","webpack://solace/./modules/solclient-validate/lib/check.js","webpack://solace/./modules/solclient-validate/lib/parameter.js","webpack://solace/./node_modules/base64-js/index.js","webpack://solace/./node_modules/browser-util-inspect/index.js","webpack://solace/./node_modules/buffer/index.js","webpack://solace/./node_modules/clone/clone.js","webpack://solace/./node_modules/events/events.js","webpack://solace/./node_modules/ieee754/index.js","webpack://solace/./node_modules/long/umd/index.js","webpack://solace/webpack/bootstrap","webpack://solace/webpack/runtime/global","webpack://solace/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"solace\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"solace\"] = factory();\n\telse\n\t\troot[\"solace\"] = factory();\n})(this, function() {\nreturn ","// Node entry point\n//global.BUILD_ENV = require('./define.config.js');\nmodule.exports = require('solclient-core');\n\n","const { Base64 } = require('./lib/base64');\nconst { Bits } = require('./lib/bits');\nconst { Convert } = require('./lib/convert');\nconst { Hex } = require('./lib/hex');\nconst { Long } = require('./lib/long');\n\nmodule.exports.Base64 = Base64;\nmodule.exports.Bits = Bits;\nmodule.exports.Convert = Convert;\nmodule.exports.Hex = Hex;\nmodule.exports.Long = Long;\n","// This code was written by Tyler Akins and has been placed in the\n// public domain.  It would be nice if you left this header intact.\n// Base64 code from Tyler Akins -- http://rumkin.com\n\n// It has been modified by me (Edward Funnekotter) to improve its\n// efficiency\n\n// It has been modified by me (Justin Bowes) to avoid using it whenever\n// possible in favour of browser or buffer implementations.\n\nconst KEY_STR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst ENC_LUT = [\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, 99, -1, -1, 99, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  99, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, 62, -1, -1, -1, 63,\n  52, 53, 54, 55, 56, 57, 58, 59,\n  60, 61, -1, -1, -1, 64, -1, -1,\n\n    // 64\n  -1, 0, 1, 2, 3, 4, 5, 6,\n  7, 8, 9, 10, 11, 12, 13, 14,\n  15, 16, 17, 18, 19, 20, 21, 22,\n  23, 24, 25, -1, -1, -1, -1, -1,\n  -1, 26, 27, 28, 29, 30, 31, 32,\n  33, 34, 35, 36, 37, 38, 39, 40,\n  41, 42, 43, 44, 45, 46, 47, 48,\n  49, 50, 51, -1, -1, -1, -1, -1,\n\n    // 128\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n\n    // 192\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1];\n\nclass DecodeError extends Error {\n\n}\n\nconst LegacyEncoder = {\n  /**\n   * Encodes a string in base64\n   * @param {String} input The string to encode in base64.\n   * @returns {String} base64 encoded input\n   * @private\n   */\n  base64_encode(input) {\n    let output = '';\n    let i = 0;\n    do {\n      const chr1 = input.charCodeAt(i++);\n      const chr2 = input.charCodeAt(i++);\n      const chr3 = input.charCodeAt(i++);\n\n      const enc1 = chr1 >> 2;\n      const enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n      let enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n      let enc4 = chr3 & 63;\n\n      if (isNaN(chr2)) {\n        enc3 = enc4 = 64;\n      } else if (isNaN(chr3)) {\n        enc4 = 64;\n      }\n\n      output += KEY_STR.charAt(enc1);\n      output += KEY_STR.charAt(enc2);\n      output += KEY_STR.charAt(enc3);\n      output += KEY_STR.charAt(enc4);\n    } while (i < input.length);\n\n    return output;\n  },\n\n  /**\n   * Decodes a base64 string.\n   * @param {String} input The base64 string to decode.\n   * @returns {String} binary output\n   * @private\n   */\n  base64_decode(input) {\n    let output = '';\n    let i = 0;\n\n    do {\n      while (ENC_LUT[input.charCodeAt(i)] > 64) {\n        i++;\n      }\n      const enc1 = ENC_LUT[input.charCodeAt(i++)];\n      const enc2 = ENC_LUT[input.charCodeAt(i++)];\n      const enc3 = ENC_LUT[input.charCodeAt(i++)];\n      const enc4 = ENC_LUT[input.charCodeAt(i++)];\n\n      if (enc1 < 0 || enc2 < 0 || enc3 < 0 || enc4 < 0) {\n        // Invalid character in base64 text\n        // alert(\"enc at \" + i + \": \" + enc1 + \", \" + enc2 + \", \" + enc3 + \", \" + enc4);\n        throw new DecodeError('Invalid base64 character');\n      }\n\n      const chr1 = (enc1 << 2) | (enc2 >> 4);\n      const chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n      const chr3 = ((enc3 & 3) << 6) | enc4;\n\n      output += String.fromCharCode(chr1);\n\n      if (enc3 !== 64) {\n        output += String.fromCharCode(chr2);\n      }\n      if (enc4 !== 64) {\n        output += String.fromCharCode(chr3);\n      }\n    } while (i < input.length - 3);\n\n    return output;\n  },\n};\n\nconst isNode = typeof window === 'undefined'; // !node\nconst hasBuffer = typeof Buffer !== 'undefined';\nconst hasBlob = typeof Blob !== 'undefined'; // !node, !ie9\nconst BufferEncoder = (hasBuffer && (hasBlob || isNode))\n  ? {\n    base64_encode: str => Buffer.from(str, 'binary').toString('base64'),\n    base64_decode: str => Buffer.from(str, 'base64').toString('binary'),\n  }\n  : {};\n/* eslint-env browser */\n/* eslint-disable dot-notation */\nconst WindowEncoder = (typeof window !== 'undefined')\n  ? {\n    base64_encode: window['btoa'] ? b => window['btoa'](b) : null,\n    base64_decode: window['atob'] ? a => window['atob'](a) : null,\n  }\n  : {};\n/* eslint-enable dot-notation */\n\nconst Base64 = {\n  encode: (WindowEncoder.base64_encode ||\n           BufferEncoder.base64_encode ||\n           LegacyEncoder.base64_encode),\n  decode: (WindowEncoder.base64_decode ||\n           BufferEncoder.base64_decode ||\n           LegacyEncoder.base64_decode),\n};\n\nmodule.exports.Base64 = Base64;\n","const Bits = {\n  get(val, shift, numBits) {\n    return (val >>> shift) & ((0x01 << numBits) - 1);\n  },\n\n  set(dataIn, val, shift, numBits) {\n    const curMask = (1 << numBits) - 1;\n    const shiftedVal = (val & curMask) << shift;\n    const data = dataIn & ~(curMask << shift);\n    return (data | shiftedVal);\n  },\n};\n\nmodule.exports.Bits = Bits;\n","const Long = require('long');\n\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n/**\n * @module\n * ===========================================================================\n * Convert\n *\n * This collection of functions performs all required string to number and number to string\n * conversions\n * ============================================================================\n * @private\n */\n\nconst TWO_ZEROES_STR = String.fromCharCode(0, 0);\nconst THREE_ZEROES_STR = String.fromCharCode(0, 0, 0);\nconst FOUR_ZEROES_STR = String.fromCharCode(0, 0, 0, 0);\n\nconst BYTEARRAY_CONVERT_CHUNK = 8192;\nconst UNSIGNED_LSHIFT_24 = (256 * 256 * 256);\n\nconst ARRAY_BUFFER_CONVERT_CHUNK = 32768;\n\nfunction stringToUint8Array(data) {\n  const dataLength = data.length;\n  const arrayBuf = new ArrayBuffer(dataLength);\n  const uint8Array = new Uint8Array(arrayBuf, 0, dataLength);\n  for (let i = 0; i < dataLength; i++) {\n    uint8Array[i] = data.charCodeAt(i);\n  }\n  return uint8Array;\n}\n\nfunction arrayBufferToString(ab) {\n  if (!ab) return '';\n  const len = ab.byteLength;\n  const u8 = new Uint8Array(ab);\n  if (len < ARRAY_BUFFER_CONVERT_CHUNK) {\n    return String.fromCharCode.apply(null, u8);\n  }\n\n  let k = 0;\n  let r = '';\n  while (k < len) {\n    // slice is clamped, inclusive of startIndex, exclusive of lastIndex\n    r += String.fromCharCode.apply(null, u8.subarray(k, k + ARRAY_BUFFER_CONVERT_CHUNK));\n    k += ARRAY_BUFFER_CONVERT_CHUNK;\n  }\n  return r;\n}\n\nfunction stringToArrayBuffer(str) {\n  return stringToUint8Array(str).buffer;\n}\n\nfunction int8ToStr(int8) {\n  return String.fromCharCode(int8 & 0xff);\n}\n\nfunction int16ToStr(int16) {\n  return (\n      String.fromCharCode((int16 >> 8) & 0xff) +\n      String.fromCharCode(int16 & 0xff)\n  );\n}\n\nfunction int24ToStr(int24) {\n  return (\n      String.fromCharCode((int24 >> 16) & 0xff) +\n      String.fromCharCode((int24 >> 8) & 0xff) +\n      String.fromCharCode(int24 & 0xff)\n  );\n}\n\nfunction int32ToStr(int32) {\n  // It is expected that there are a lot of small numbers\n  // being converted, so it is worth doing a few checks for\n  // efficiency (on firefox it is about 3 times quicker for small numbers\n  // to do the check - it is 2 times quicker for chrome)\n\n  if (int32 === 0) return FOUR_ZEROES_STR;\n  if (int32 > 0) {\n    if (int32 < 256) {\n      return THREE_ZEROES_STR + String.fromCharCode(int32);\n    }\n    if (int32 < 65536) {\n      return TWO_ZEROES_STR + String.fromCharCode(int32 >> 8) + String.fromCharCode(int32 & 0xff);\n    }\n  }\n\n  return (\n      String.fromCharCode((int32 >> 24) & 0xff) +\n      String.fromCharCode((int32 >> 16) & 0xff) +\n      String.fromCharCode((int32 >> 8) & 0xff) +\n      String.fromCharCode(int32 & 0xff)\n  );\n}\n\nfunction int64ToStr(int64) {\n  if (typeof int64 !== 'number') {\n    return int32ToStr(int64.high) + int32ToStr(int64.low);\n  }\n\n  // It is expected that there are a lot of small numbers\n  // being converted, so it is worth doing a few checks for\n  // efficiency (on firefox it is about 3 times quicker for small numbers\n  // to do the check - it is 2 times quicker for chrome)\n  if (int64 >= 0) {\n    if (int64 < 256) {\n      return FOUR_ZEROES_STR + THREE_ZEROES_STR + String.fromCharCode(int64);\n    }\n    if (int64 < 65536) {\n      return FOUR_ZEROES_STR + TWO_ZEROES_STR +\n        String.fromCharCode(int64 >> 8) + String.fromCharCode(int64 & 0xff);\n    }\n    if (int64 < 4294967296) {\n      return FOUR_ZEROES_STR + (String.fromCharCode((int64 >> 24) & 0xff) +\n        String.fromCharCode((int64 >> 16) & 0xff) +\n        String.fromCharCode((int64 >> 8) & 0xff) +\n        String.fromCharCode(int64 & 0xff));\n    }\n  }\n  return String.fromCharCode((int64 >> 56) & 0xFF) +\n        String.fromCharCode((int64 >> 48) & 0xFF) +\n        String.fromCharCode((int64 >> 40) & 0xFF) +\n        String.fromCharCode((int64 >> 32) & 0xFF) +\n        String.fromCharCode((int64 >> 24) & 0xff) +\n        String.fromCharCode((int64 >> 16) & 0xff) +\n        String.fromCharCode((int64 >> 8) & 0xff) +\n        String.fromCharCode(int64 & 0xff);\n}\n\nfunction byteArrayToStr(byteArray) {\n  const len = byteArray.length;\n  if (len < BYTEARRAY_CONVERT_CHUNK) {\n    return String.fromCharCode.apply(null, byteArray);\n  }\n\n  let k = 0;\n  let r = '';\n\n  while (k < len) {\n    // slice is clamped, inclusive of startIndex, exclusive of lastIndex\n    r += String.fromCharCode.apply(null, byteArray.slice(k, k + BYTEARRAY_CONVERT_CHUNK));\n    k += BYTEARRAY_CONVERT_CHUNK;\n  }\n\n  return r;\n}\n\nfunction strToByteArray(str) {\n  const result = [];\n  let i;\n  for (i = 0; i < str.length; i++) {\n    result[i] = str.charCodeAt(i);\n  }\n  return result;\n}\n\nfunction strToHexArray(str) {\n  function toHex(c) {\n    return c.charCodeAt(0).toString(16);\n  }\n  return Array.prototype.map.call(str.split(''), toHex);\n}\n\nfunction strToInt8(data) {\n  return data.charCodeAt(0) & 0xff;\n}\n\nfunction strToInt16(data) {\n  return (\n      (data.charCodeAt(0) << 8) +\n      (data.charCodeAt(1))\n  );\n}\n\nfunction strToInt24(data) {\n  return (\n      (data.charCodeAt(0) << 16) +\n      (data.charCodeAt(1) << 8) +\n      (data.charCodeAt(2))\n  );\n}\n\nfunction strToInt32(data) {\n    // SIGNED integer\n  return (\n      (data.charCodeAt(0) << 24) +\n      (data.charCodeAt(1) << 16) +\n      (data.charCodeAt(2) << 8) +\n      (data.charCodeAt(3))\n  );\n}\n\nfunction strToUInt32(data) {\n  // WARNING: you cannot use a << 24 to shift a byte into\n  // a 32-bit string, because all shifts in JS are signed\n  return (\n      (data.charCodeAt(0) * UNSIGNED_LSHIFT_24) +\n      (data.charCodeAt(1) << 16) +\n      (data.charCodeAt(2) << 8) +\n      (data.charCodeAt(3))\n  );\n}\n\nfunction strToUInt64(data) {\n  return Long.fromBits(strToUInt32(data.substr(4, 4)),\n                       strToUInt32(data.substr(0, 4)),\n                       true);\n}\n\nfunction ucs2ToUtf8(ucs2) {\n  return unescape(encodeURIComponent(ucs2));\n}\n\nfunction utf8ToUcs2(utf8) {\n  return decodeURIComponent(escape(utf8));\n}\n\nfunction anythingToBuffer(value) {\n  if (BufferImpl.isBuffer(value)) {\n    return value;\n  }\n  if (typeof value === 'string') {\n    return BufferImpl.from(value, 'latin1');\n  }\n  if (value instanceof ArrayBuffer) {\n    return BufferImpl.from(value);\n  }\n  //TypedArrays and DataView:\n  if (value.buffer instanceof ArrayBuffer &&\n    typeof value.byteLength === 'number' &&\n    typeof value.byteOffset === 'number') {\n    if (value.byteOffset === 0 && value.byteLength === value.buffer.byteLength) {\n      // \"full sice\", no actual offset: just use the raw buffer.\n      return BufferImpl.from(value.buffer);\n    }\n    return BufferImpl.from(value.buffer, value.byteOffset, value.byteLength);\n  }\n  throw new OperationError('Parameter value failed validation',\n    ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n    'Expecting Buffer/Uint8Array, also accepting string, ArrayBuffer, any TypedArray, or DataView.');\n}\n\nconst Convert = {\n  arrayBufferToString,\n  stringToArrayBuffer,\n  stringToUint8Array,\n\n  int8ToStr,\n  strToInt8,\n\n  int16ToStr,\n  strToInt16,\n\n  int24ToStr,\n  strToInt24,\n\n  int32ToStr,\n  strToInt32,\n  strToUInt32,\n\n  int64ToStr,\n  strToUInt64,\n\n  byteArrayToStr,\n  strToByteArray,\n\n  strToHexArray,\n\n  ucs2ToUtf8,\n  utf8ToUcs2,\n  anythingToBuffer,\n};\n\nmodule.exports.Convert = Convert;\n","function numToHex(n) {\n  if (typeof n !== 'number') {\n    return '';\n  }\n  const s = n.toString(16);\n  return (s.length < 2) ? `0${s}` : s;\n}\n\n\nfunction formatHexString(obj) {\n  if (typeof obj === 'number') {\n    return `0x${numToHex(obj)}`;\n  }\n\n  if (typeof obj === 'object' && Array.isArray(obj)) {\n    return obj.map(numToHex).join();\n  }\n\n  if (typeof obj === 'string') {\n    return Array.prototype.map.call(obj, (_, i) => numToHex(obj.charCodeAt(i))).join('');\n  }\n\n  return null;\n}\n\nconst Hex = {\n  formatHexString,\n};\n\nmodule.exports.Hex = Hex;\n","module.exports.Long = require('long');\n","/**\n * SolclientJS internal API for white-box integration testing\n * @private\n */\n\n/* _eslint-disable sort-requires/sort-requires */\n\nconst Convert = require('solclient-convert');\nconst Debug = require('solclient-debug');\nconst Destination = require('solclient-destination');\nconst Error = require('solclient-error');\nconst ESKit = require('solclient-eskit');\nconst Factory = require('solclient-factory');\nconst FSM = require('solclient-fsm');\nconst Log = require('solclient-log');\nconst Message = require('solclient-message');\nconst Publisher = require('solclient-message-publisher');\nconst SDT = require('solclient-sdt');\nconst Session = require('solclient-session');\nconst SMF = require('solclient-smf');\nconst SolcacheSession = require('solclient-solcache-session');\nconst TestEnv = require('solclient-env');\nconst Transport = require('solclient-transport');\nconst Util = require('solclient-util');\nconst Validate = require('solclient-validate');\n\nmodule.exports = {\n  Convert,\n  Debug,\n  Destination,\n  Error,\n  ESKit,\n  Factory,\n  FSM,\n  Log,\n  Message,\n  Publisher,\n  SDT,\n  Session,\n  SMF,\n  SolcacheSession,\n  TestEnv,\n  Transport,\n  Util,\n  Validate,\n};\n","/**\n * <h1> Overview </h1>\n *\n * This is the Solace Corporation Messaging API for JavaScript. Concepts defined in this API are\n * similar to those defined in other Solace Messaging APIs for Java, C, and .NET.\n *\n * <h1> Concepts </h1>\n *\n * Some general concepts:\n *\n * <li> All function calls are non-blocking; confirmation, if requested, is returned to the calling\n * client application in the form of callbacks. </li>\n *\n */\n\n/* _eslint-disable sort-requires/sort-requires */\n\n// -------------------------- Solclient Factory ------------------------------\n// Load me before the rest of the API as a plug-in point for modules\nconst FactoryLib = require('solclient-factory');\n// ---------------------------------------------------------------------------\n\nconst {\n  SolclientFactory,\n  SolclientFactoryProfiles,\n  SolclientFactoryProperties,\n} = FactoryLib;\n\nconst {\n  Long,\n} = require('solclient-convert');\nconst {\n  Destination,\n  DestinationType,\n  Topic,\n} = require('solclient-destination');\nconst {\n  ErrorSubcode,\n  NotImplementedError,\n  OperationError,\n  RequestError,\n  RequestEventCode,\n} = require('solclient-error');\nconst {\n  makeIterator,\n} = require('solclient-eskit');\nconst {\n  ConsoleLogImpl,\n  LogImpl,\n  LogLevel,\n} = require('solclient-log');\nconst {\n  Message,\n  MessageCacheStatus,\n  MessageDeliveryModeType,\n  MessageDumpFlag,\n  MessageType,\n  MessageUserCosType,\n  ReplicationGroupMessageId,\n} = require('solclient-message');\nconst {\n  MessageConsumer,\n  MessageConsumerAcknowledgeMode,\n  MessageConsumerEventName,\n  MessageConsumerProperties,\n  QueueBrowser,\n  QueueBrowserEventName,\n  QueueBrowserProperties,\n} = require('solclient-message-consumer');\nconst {\n  ReplayStartLocation,\n  ReplayStartLocationBeginning,\n} = require('solclient-replaystart');\nconst {\n  MessagePublisherAcknowledgeMode,\n  MessagePublisherProperties,\n} = require('solclient-message-publisher');\nconst {\n  AbstractQueueDescriptor,\n  QueueAccessType,\n  QueueDescriptor,\n  QueueDiscardBehavior,\n  QueuePermissions,\n  QueueProperties,\n  QueueType,\n} = require('solclient-queue');\nconst {\n  SDTField,\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n} = require('solclient-sdt');\nconst {\n  AuthenticationScheme,\n  CapabilityType,\n  MessageRxCBInfo,\n  MutableSessionProperty,\n  Session,\n  SessionEvent,\n  SessionEventCBInfo,\n  SessionEventCode,\n  SessionProperties,\n  SessionState,\n  SslDowngrade,\n} = require('solclient-session');\nconst {\n  CacheCBInfo,\n  CacheLiveDataAction,\n  CacheRequestResult,\n  CacheReturnCode,\n  CacheReturnSubcode,\n  CacheSession,\n  CacheSessionProperties,\n} = require('solclient-solcache-session');\nconst {\n  StatType,\n} = require('solclient-stats');\nconst {\n  TransportError,\n  TransportProtocol,\n} = require('solclient-transport');\nconst {\n  Version,\n} = require('solclient-util');\n\n// --------------------------- Internal API -- do not use --------------------\n// Load me last. I disappear in production mode\nconst _internal = require('./api-internal.js');\n// ---------------------------------------------------------------------------\n\n\n/**\n * @namespace\n * @public\n */\nconst solace = {\n  AbstractQueueDescriptor,\n  AuthenticationScheme,\n  CacheCBInfo,\n  CacheLiveDataAction,\n  CacheRequestResult,\n  CacheReturnCode,\n  CacheReturnSubcode,\n  CacheSession,\n  CacheSessionProperties,\n  CapabilityType,\n  ConsoleLogImpl,\n  Destination,\n  DestinationType,\n  ErrorSubcode,\n  LogImpl,\n  LogLevel,\n  Long,\n  Message,\n  MessageCacheStatus,\n  MessageConsumer,\n  MessageConsumerAcknowledgeMode,\n  MessageConsumerEventName,\n  MessageConsumerProperties,\n  MessageDeliveryModeType,\n  MessageDumpFlag,\n  MessagePublisherAcknowledgeMode,\n  MessagePublisherProperties,\n  MessageRxCBInfo,\n  MessageType,\n  MessageUserCosType,\n  MutableSessionProperty,\n  NotImplementedError,\n  OperationError,\n  QueueAccessType,\n  QueueBrowser,\n  QueueBrowserEventName,\n  QueueBrowserProperties,\n  QueueDescriptor,\n  QueueDiscardBehavior,\n  QueuePermissions,\n  QueueProperties,\n  QueueType,\n  ReplayStartLocation,\n  /*\n   * This should not be here ReplayStartLocationBeginning should not be a publicly exposed type.\n   * This type must remain for backwards compatibility however it was never indented for use\n   * by applications.\n   * */\n  ReplayStartLocationBeginning,\n  ReplicationGroupMessageId,\n  RequestError,\n  RequestEventCode,\n  SDTField,\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n  Session,\n  SessionEvent,\n  SessionEventCBInfo,\n  SessionEventCode,\n  SessionProperties,\n  SessionState,\n  SolclientFactory,\n  SolclientFactoryProfiles,\n  SolclientFactoryProperties,\n  SslDowngrade,\n  StatType,\n  Topic,\n  TransportError,\n  TransportProtocol,\n  Version,\n\n  makeIterator,\n\n  _internal, //\n};\n\nObject.assign(module.exports, solace);\n","const { Debug } = require('./lib/debug');\n\nmodule.exports.Debug = Debug;\n","/* eslint-disable global-require */\n// Do late binding for these debug utilities to break cyclic dependencies.\n\nconst PRINTABLE_LUT = (() => {\n  const tmp = [];\n  for (let c = 0; c < 256; ++c) {\n    tmp[c] = (c < 33 || c > 126) ? '.' : String.fromCharCode(c);\n  }\n  return tmp;\n})();\n\nconst SPACER = '   ';\nconst UNPRINTABLE = '.';\n\n\nfunction formatDumpBytes(data, showDecode, leftPadding) {\n  const { StringBuffer, StringUtils } = require('solclient-util');\n  const { isEmpty, padLeft, padRight } = StringUtils;\n\n  if (isEmpty(data)) {\n    return null;\n  }\n\n  const output = new StringBuffer();\n  const ascii = new StringBuffer();\n  const line = new StringBuffer();\n  let lineBytes = 0;\n  const asciiOffset = 54;\n\n  for (let i = 0, dataLen = data.length; i < dataLen; ++i) {\n    const ccode = data.charCodeAt(i);\n    //const ccode = dataBuf.readInt8(i);\n    line.append(padLeft(ccode.toString(16), 2, '0'), ' ');\n    ascii.append(PRINTABLE_LUT[ccode] || UNPRINTABLE);\n    lineBytes++;\n\n    if (lineBytes === 8) {\n      line.append(SPACER);\n    }\n\n    if (lineBytes === 16 || i === data.length - 1) {\n      if (leftPadding > 0) {\n        output.append(padRight('', leftPadding, ' '));\n      }\n\n      output.append(padRight(line.toString(), asciiOffset, ' '));\n\n      if (showDecode) {\n        output.append(ascii);\n      }\n\n      output.append('\\n');\n      line.clear();\n      ascii.clear();\n      lineBytes = 0;\n    }\n  }\n\n  return output.toString();\n}\n\nfunction parseSMFStream(data) {\n  const { Codec: { Decode: { decodeCompoundMessage } } } = require('solclient-smf');\n  const { LOG_WARN, LOG_ERROR } = require('solclient-log');\n\n  if (data === null) {\n    LOG_ERROR('data null in debugParseSmfStream');\n    return;\n  }\n  let pos = 0;\n  LOG_WARN(`parseSMFStream(): Starting parse, length ${data.length}`);\n  while (pos < data.length) {\n    const incomingMsg = decodeCompoundMessage(data, pos);\n    const smf = incomingMsg ? incomingMsg.smfHeader : null;\n    if (!(incomingMsg && smf)) {\n      // couldn't decode! Lost SMF framing.\n      LOG_WARN(\"parseSMFStream(): couldn't decode message.\");\n      LOG_WARN(`Position: ${pos} length: ${data.length}`);\n      return;\n    }\n\n    LOG_WARN(`>> Pos(${pos}) Protocol ${smf.smf_protocol}, Length: ${smf.messageLength}`);\n    pos += smf.messageLength;\n  }\n}\n\nconst Debug = {\n  formatDumpBytes,\n  parseSMFStream,\n};\n\nmodule.exports.Debug = Debug;\n","const { Destination } = require('./lib/destination');\nconst { DestinationFromNetwork } = require('./lib/destination-from-network');\nconst { DestinationType } = require('./lib/destination-type');\nconst { DestinationUtil } = require('./lib/destination-util');\nconst { Parameter } = require('solclient-validate');\nconst { Queue } = require('./lib/queue');\nconst { SolclientFactory } = require('solclient-factory');\nconst { Topic } = require('./lib/topic');\n\n\n/**\n * Creates a topic {@link solace.Destination} instance. When the returned Destination is set as\n * the destination of a message via {@link solace.Message#setDestination}, the message will be\n * delivered to direct subscribers or topic endpoints subscribed to the given topic.\n *\n * @param {String} topicName The topic string for the new topic.\n * @returns {solace.Destination} The newly created topic destination.\n * @method\n * @name solace.SolclientFactory.createTopicDestination\n */\nSolclientFactory.createTopicDestination = SolclientFactory.createFactory((topicName) => {\n  Parameter.isString('topicName', topicName);\n  return Topic.createFromName(topicName);\n});\n/* @deprecated @*/\nSolclientFactory.createTopic = SolclientFactory.createFactory(topicName => new Topic(topicName));\n\n/**\n * Creates a durable queue {@link solace.Destination} instance. When the returned Destination is\n * set as the destination of a message via {@link solace.Message#setDestination}, the message will\n * be delivered to the Guaranteed Message queue on the Solace Message Router of the same name.\n *\n * @since 10.0.0\n * @param {String} queueName The queueName of the queue\n * @returns {solace.Destination} The newly created queue destination.\n * @method\n * @name solace.SolclientFactory.createDurableQueueDestination\n */\nSolclientFactory.createDurableQueueDestination = SolclientFactory.createFactory((queueName) => {\n  Parameter.isString('queueName', queueName);\n  return Queue.createFromLocalName(queueName);\n});\n\nmodule.exports.Destination = Destination;\nmodule.exports.DestinationFromNetwork = DestinationFromNetwork;\nmodule.exports.DestinationType = DestinationType;\nmodule.exports.DestinationUtil = DestinationUtil;\nmodule.exports.Queue = Queue;\nmodule.exports.Topic = Topic;\n","const { DestinationType } = require('./destination-type');\nconst { DestinationUtil } = require('./destination-util');\nconst { Queue } = require('./queue');\nconst { Topic } = require('./topic');\n\nconst QUEUE_PREFIX = '#P2P/QUE/';\nconst QUEUE_PREFIX_LEN = QUEUE_PREFIX.length;\nconst TEMPORARY_QUEUE_PREFIX = '#P2P/QTMP/';\n\nfunction createDestinationFromName(networkTopicName, networkTopicBytes = undefined) {\n  if (networkTopicName === null || networkTopicName.length === 0) {\n    return null;\n  }\n\n  const spec = {\n    name:  networkTopicName,\n    bytes: networkTopicBytes || DestinationUtil.encodeBytes(networkTopicName),\n  };\n  if (networkTopicName[0] === '#') {\n    if (networkTopicName.startsWith(QUEUE_PREFIX)) {\n      const offset = QUEUE_PREFIX_LEN;\n      spec.name = networkTopicName.substr(offset);\n      spec.type = DestinationType.QUEUE;\n      spec.offset = offset;\n      return new Queue(spec);\n    } else if (networkTopicName.startsWith(TEMPORARY_QUEUE_PREFIX)) {\n      spec.name = networkTopicName;\n      spec.type = DestinationType.TEMPORARY_QUEUE;\n      spec.offset = 0;\n      return new Queue(spec);\n    }\n  }\n  return new Topic(spec);\n}\n\nfunction createDestinationFromBytes(networkTopicBytes) {\n  if (networkTopicBytes === null || networkTopicBytes.length === 0) {\n    return null;\n  }\n\n  const networkTopicName = DestinationUtil.decodeBytes(networkTopicBytes);\n  return createDestinationFromName(networkTopicName, networkTopicBytes);\n}\n\nconst DestinationFromNetwork = {\n  createDestinationFromBytes,\n  createDestinationFromName,\n};\n\nmodule.exports.DestinationFromNetwork = DestinationFromNetwork;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumerates destination types for destination objects.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst DestinationType = {\n  /**\n   * A Topic destination.\n   */\n  TOPIC:           'topic',\n  /**\n   * A queue destination.\n   */\n  QUEUE:           'queue',\n  /**\n   * A temporary queue destination.\n   */\n  TEMPORARY_QUEUE: 'temporary_queue',\n};\n\nmodule.exports.DestinationType = Enum.new(DestinationType);\n\n/* eslint-disable */\n// Manually demangle these names; bug 70131\nmodule.exports.DestinationType._setCanonical({\n  'TOPIC':           DestinationType.TOPIC,\n  'QUEUE':           DestinationType.QUEUE,\n  'TEMPORARY_QUEUE': DestinationType.TEMPORARY_QUEUE\n});\n/* eslint-enable */\n","const SolclientFactoryLib = require('solclient-factory');\nconst { Convert } = require('solclient-convert');\nconst { DestinationType } = require('./destination-type');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SubscriptionInfo } = require('./subscription-info');\nconst { UUID, StringUtils } = require('solclient-util');\n\nconst { ucs2ToUtf8, utf8ToUcs2 } = Convert;\nconst { ProfileBinding } = SolclientFactoryLib;\n\nconst { toSafeChars, stripNullTerminate } = StringUtils;\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst DESTINATION_PREFIX_FROM_TYPE = {\n  [DestinationType.QUEUE]:           '#P2P/QUE/',\n  [DestinationType.TEMPORARY_QUEUE]: '#P2P/QTMP/',\n};\n\nfunction createTemporaryName(type, vrid, name) {\n  const id = name || UUID.generateUUID();\n  switch (type) {\n    case DestinationType.TOPIC:\n      return `#P2P/TTMP/${vrid}/${id}`;\n    case DestinationType.TEMPORARY_QUEUE:\n      return `#P2P/QTMP/${vrid}/${id}`;\n    default:\n      LOG_ERROR('Unknown/invalid destination type', DestinationType.describe(type));\n  }\n  return undefined;\n}\n\nfunction createPrefix(type) {\n  return DESTINATION_PREFIX_FROM_TYPE[type] || '';\n}\n\nfunction createOperationError(type, errorStr) {\n  return new OperationError(`Invalid ${type}: ${errorStr}`, ErrorSubcode.INVALID_TOPIC_SYNTAX);\n}\n\n// This function validates topics in all code paths -- legacy code paths that relied on validating\n// topics as they were used, and newer code paths that validate Destinations on construction.  We\n// must not add validation here that could break legacy apps that used the deprecated 'new Topic'\n// interface that doesn't perform validation, and subsequently rely on validate-on-use.\n//\n// More strict checks done during Destination construction should be placed in validateAndEncode.\n// @return { error, isWildcarded }.  isWildcarded will not be defined if erorr is defined.\nfunction legacyValidate(type, bytes, name,\n                        exceptionCreator = createOperationError.bind(null, type)) {\n  let error;\n\n  /*\n    * TRB topics can contain any utf-8 character and must be <= 250 bytes\n    * in length.\n    * '*', if present in a level, must be the last character in that level.\n    * May not have empty levels.\n    */\n\n  // Check minimum length using name, since the bytes may include a destination type prefix.\n  // e.g. #P2P/QUE/ should fail on length, not empty level.\n  const nameLength = name.length;\n  if (nameLength < 1) {\n    error = exceptionCreator('Too short (must be >= 1 character).');\n    return { error };\n  }\n\n  // Check maximum length using encoded bytes, since UTF-8 is a variable length encoding.\n  const bytesLength = bytes.length;\n  if (bytesLength > 251) { // null terminator doesn't count\n    error = exceptionCreator(`Too long (encoding must be <= 250 bytes); name is ${\n                             bytesLength - 1} bytes: '${name}'`);\n    return { error };\n  }\n\n  let isWildcarded = false;\n  if (name.charAt(nameLength - 1) === '>') {\n    isWildcarded = true;\n  }\n\n  for (let i = 0; i < nameLength; ++i) {\n    switch (name.charAt(i)) {\n      case '/':\n        if (i === 0 || i === (nameLength - 1) || name.charAt(i - 1) === '/') {\n          error = exceptionCreator(`Empty level(s) in '${name}'@${i}.`);\n          return { error };\n        }\n        break;\n\n      case '*':\n        if ((i < (nameLength - 1)) && (name.charAt(i + 1) !== '/')) {\n          // must not have something other than '/' to the right\n          error = exceptionCreator(`Illegal wildcard(s) in '${name}'@${i}.`);\n          return { error };\n        }\n\n        isWildcarded = true;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  return { isWildcarded };\n}\n\nfunction encodeBytes(bytes) {\n  return ProfileBinding.value.topicUtf8Encode\n    ? `${ucs2ToUtf8(bytes)}\\u0000`\n    : `${bytes}\\u0000`;\n}\n\nfunction decodeBytes(bytes) {\n  return stripNullTerminate(ProfileBinding.value.topicUtf8Encode\n    ? utf8ToUcs2(bytes)\n    : bytes);\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @returns {Object} {bytes, offset, networkName} The result of the encoding.\n *\n * @private\n */\nfunction encode(type, name) {\n  const prefix = createPrefix(type);\n  const offset = prefix.length;\n  const networkName = prefix + name;\n  const bytes = encodeBytes(networkName);\n  return { bytes, offset, networkName };\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {Function} [exceptionCreator=createOperationError] A function to create an exception if an\n *   error is encountered.\n * @returns {Object} {bytes, error, offset, isWildcarded} The result of the encoding and any\n *      validation error\n *\n * @private\n */\nfunction validateAndEncode(type, name, exceptionCreator = createOperationError.bind(null, type)) {\n  const { bytes, offset } = encode(type, name);\n  const { error: constError, isWildcarded } = legacyValidate(type, bytes, name, exceptionCreator);\n  let error = constError;\n  let subscriptionInfo = {};\n  subscriptionInfo.isWildcarded = isWildcarded;\n\n  // If there was no 'legacy' error, perform an additional check to see if the provided name starts\n  // with a reserved prefix.  It shouldn't.  Prefixes should always be added by us by encode().\n  if (!error) {\n    Object.keys(DESTINATION_PREFIX_FROM_TYPE).some((prefixType) => {\n      const prefix = DESTINATION_PREFIX_FROM_TYPE[prefixType];\n      if (!name.startsWith(prefix)) {\n        return false; // keep processing more array elements.\n      }\n\n      error = exceptionCreator(`Reserved prefix '${prefix}' found at start of '${name}'`);\n      return true;\n    });\n  }\n\n  if (!error) {\n    // parse subscription information from destination name\n    const { error: errorConst, subInfo: subInfoConst } =\n      SubscriptionInfo.parseFromName(name, type);\n    error = errorConst;\n    subscriptionInfo = subInfoConst;\n  }\n\n  return { bytes, offset, error, isWildcarded, subscriptionInfo };\n}\n\nconst DestinationUtil = {\n  createPrefix,\n  createTemporaryName,\n  decodeBytes,\n  encode,\n  encodeBytes,\n  legacyValidate,\n  toSafeChars,\n  validateAndEncode,\n};\n\nmodule.exports.DestinationUtil = DestinationUtil;\n","const { DestinationType } = require('./destination-type');\nconst { DestinationUtil } = require('./destination-util');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instances from\n * one of the following:</b>\n * * {@link solace.SolclientFactory.createTopicDestination}\n * * {@link solace.SolclientFactory.createDurableQueueDestination}\n * * {@link solace.MessageConsumer#getDestination}\n * * {@link solace.SDTField#getValue} when {@link solace.SDTField#getType} returns\n *   {@link solace.SDTFieldType.DESTINATION}.\n *\n * Represents a message destination.\n *\n * Publishers can send messages to topics or queues, to which subscribers can subscribe or\n * bind. A Destination specifies the target of such an operation.\n * @hideconstructor\n * @memberof solace\n */\nclass Destination {\n\n  /*\n   * @constructor\n   * @param {String|solace.Destination|Object} spec The name of the destination, or, the\n   *  destination to copy. If this is a {@link solace.Destination} then all other parameters are\n   *  ignored.\n   * @param {solace.DestinationType} [type=solace.DestinationType.Topic] The type of destination\n   *  to create\n   * @deprecated since 10.0 Applications should not call this constructor.\n   *  Use the factory methods on {@link solace.SolclientFactory}.\n   **/\n  constructor(spec, type = DestinationType.TOPIC) {\n    if (typeof spec === 'object') {\n      this._name = spec.name;\n      this._type = spec.type;\n      this._bytes = spec.bytes;\n      this._offset = spec.offset;\n      if (spec.isValidated) {\n        this._isValidated = true;\n        this._isWildcarded = spec.isWildcarded;\n        this._subscriptionInfo = spec.subscriptionInfo || {};\n      } else {\n        this._isValidated = false;\n        this._subscriptionInfo = {};\n      }\n    } else {\n      this._name = spec;\n      this._type = type;\n\n      // Don't validate encoding for deprecated construction path.\n      // This path would have more restrictions now, and it allows\n      // sdkperf a path for arbitrary topic construction.\n      const result = DestinationUtil.encode(type, spec);\n      this._bytes = result.bytes;\n      this._offset = result.offset;\n      this._isValidated = false;\n      this._subscriptionInfo = {};\n    }\n  }\n\n  /**\n   * @returns {String} The destination name specified at creation time.\n   */\n  getName() {\n    return this._name;\n  }\n\n  /**\n   * @type {String}\n   * @readonly\n   */\n  get name() {\n    return this.getName();\n  }\n\n  /**\n   * @returns {solace.DestinationType} The destination type\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * @type {solace.DestinationType}\n   * @readonly\n   */\n  get type() {\n    return this.getType();\n  }\n\n  /**\n   * @returns {String} Returns the null-terminated UTF-8 encoded destination bytes.\n   *\n   * @private\n   */\n  getBytes() {\n    return this._bytes;\n  }\n  get bytes() {\n    return this.getBytes();\n  }\n\n  getOffset() {\n    return this._offset;\n  }\n  get offset() {\n    return this.getOffset();\n  }\n\n  /**\n   * This provides the legacy validation that was done post-creation and is used in some code paths\n   * on use.  It is preferred to use non-deprecated ways of creating destinations, which do\n   * validation on create instead.\n   * @throws OperationError if the destination is not valid.\n   * @private\n   */\n  validate() {\n    if (this._isValidated) {\n      if (this._error) throw this._error;\n      return;\n    }\n\n    const { error, isWildcarded } =\n      DestinationUtil.legacyValidate(this.type, this.bytes, this.name);\n    this._isValidated = true;\n    if (error) {\n      this._error = error;\n      throw error;\n    }\n    this._isWildcarded = isWildcarded;\n  }\n\n  /**\n   * This is really only useful for topics.  If a queue name contains a wildcarded construct, it is\n   * up to the router what to do -- it would either reject it or treat the wildcard as literal.  But\n   * it is included here for all destination types since we have the info.\n   * @returns {Boolean} True if the underlying name represents a wildcarded topic; false otherwise.\n   * @throws {OperationError} If the destination is not valid.\n   * @private\n   */\n  isWildcarded() {\n    this.validate();\n    return this._isWildcarded;\n  }\n\n  /**\n   * @returns {Object} subscriptionInfo object or empty object\n   * @private\n   */\n  getSubscriptionInfo() {\n    return this._subscriptionInfo || {};\n  }\n\n  /**\n   * @returns {String} A generic description of the Destination.\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  /**\n   * @param {*} other The other object for comparison\n   * @returns {Boolean} True if the passed destination is the same\n   * @private\n   */\n  equals(other) {\n    if (!(other instanceof Destination)) {\n      return false;\n    }\n    return (this.toString().valueOf() === other.toString().valueOf());\n  }\n}\n\nmodule.exports.Destination = Destination;\n","const DestinationUtilLib = require('./destination-util');\nconst { assert } = require('solclient-eskit');\nconst { Destination } = require('./destination');\nconst { DestinationType } = require('./destination-type');\n\n/**\n * @classdesc\n * Represents a Queue, which is a type of {@link solace.Destination}.\n *\n * Instances should be acquired through\n * {@link solace.SolclientFactory.createDurableQueueDestination} or by calling\n * {@link solace.MessageConsumer#getDestination} on a consumer bound to a temporary queue.\n *\n * @extends solace.Destination\n * @memberof solace\n * @private\n */\nclass Queue extends Destination {\n\n  /**\n   * @param {Object} spec The spec for this instance\n   * @private\n   */\n  constructor(spec) {\n    assert(spec.name, 'Queue name not supplied');\n    assert(spec.type === DestinationType.QUEUE\n           || spec.type === DestinationType.TEMPORARY_QUEUE, 'Queue spec.type is invalid');\n    assert(spec.bytes, 'Queue spec missing bytes');\n    assert(spec.offset !== undefined, 'Queue spec missing offset');\n    super(spec);\n  }\n\n  getOffset() {\n    return this._offset;\n  }\n  get offset() {\n    return this.getOffset();\n  }\n\n  [util_inspect_custom]() {\n    return `[Queue ${this.getName()}]`;\n  }\n\n  /**\n   * @static\n   * @param {String} queueName The name of the queue (no prefix)\n   * @returns {Queue} a Queue\n   * @private\n   */\n  static createFromLocalName(queueName) {\n    const encoding = DestinationUtilLib.DestinationUtil.validateAndEncode(\n      DestinationType.QUEUE, queueName);\n    if (encoding.error) {\n      throw encoding.error;\n    }\n    return new Queue({\n      name:             queueName,\n      type:             DestinationType.QUEUE,\n      isValidated:      true,\n      bytes:            encoding.bytes,\n      offset:           encoding.offset,\n      isWildcarded:     encoding.isWildcarded,\n      /* probably don't need this until queues get subscription attributes */\n      subscriptionInfo: encoding.subscriptionInfo,\n    });\n  }\n\n}\n\nmodule.exports.Queue = Queue;\n","const { DestinationType } = require('./destination-type');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n/**\n * determines if subscription has the #noexport/ prefix\n *\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {Number} offset The index offset into the name to parse\n * @param {solace.SubscriptionInfo} result The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, index, result} returns the parsing index and result\n *   where the result is a {solace.SubscriptionInfo} that contains information about the\n *   subscription like {Boolean} isNoExport\n * @private\n */\nfunction subscriptionParseNoExport(type, name, bytes, offset, result) {\n  const NOEXPORT_PREFIX = '#noexport/';\n  const NOEXPORT_PREFIX_LEN = NOEXPORT_PREFIX.length;\n  let index = offset;\n  let error;\n  if (name.length - index > NOEXPORT_PREFIX_LEN && !result.isNoExport) {\n    if (name.startsWith(NOEXPORT_PREFIX, index)) {\n      index += NOEXPORT_PREFIX_LEN;\n      result.isNoExport = true;\n    } else {\n      result.isNoExport = false;\n    }\n  } else {\n    result.isNoExport = false;\n  }\n  return { error, index, result };\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {Number} offset The index offset into the name to parse\n * @param {solace.SubscriptionInfo} result The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, index, result} returns the parsing index and result\n *   where the result is a {solace.SubscriptionInfo} that contains information about the\n *   subscription like {Boolean} isShared or {String} shareGroup or {Number}\n *   dispatchTopicIndex\n * @private\n */\nfunction subscriptionParseShare(type, name, bytes, offset,\n                                result, exceptionCreator) {\n  const SHARE_PREFIX = '#share/';\n  const SHARE_PREFIX_LEN = SHARE_PREFIX.length;\n  const LEVEL_DELIMETER = '/';\n  const LEVEL_DELIMETER_LEN = LEVEL_DELIMETER.length;\n  let index = offset;\n  let error;\n  let groupIndex = -1;\n  let shareGroup;\n  if (name.length - index > SHARE_PREFIX_LEN && !result.isShare) {\n    /* parse '#share/' prefix */\n    /*\n     * name starts with '#share/' prefix\n     * and has enough room for at least one character for share group\n     */\n    if (name.startsWith(SHARE_PREFIX, offset)\n        && (name.length - (index + SHARE_PREFIX_LEN)) > LEVEL_DELIMETER_LEN + 1) {\n      index += SHARE_PREFIX_LEN;\n      /* parse share group to next '/' */\n      groupIndex = index;\n      index = name.indexOf(LEVEL_DELIMETER, groupIndex);\n      if (index > 0) {\n        shareGroup = name.substring(groupIndex, index);\n        index += LEVEL_DELIMETER_LEN;\n        result.isShare = true;\n        result.shareGroup = shareGroup;\n        result.dispatchTopicIndex = index;\n      } else {\n        // error\n        error = exceptionCreator(`Illegal share Group in '${name}'@${groupIndex}.`);\n        result.isShare = true;\n      }\n    } else {\n      // not share subscription\n      result.isShare = false;\n    }\n  } else {\n    // not share subscription\n    result.isShare = false;\n  }\n  return { error, index, result };\n}\n\n/**\n * @param {Array.Function} layers The parsing functions executed from 0 to layers.length\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {solace.SubscriptionInfo} subInfo The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, result} returns the parsed information in the SubscriptionInfo\n * object and error, when error is set result's values may be partially set\n * @private\n */\nfunction subscriptionStringParse(layers, type, name, bytes, subInfo, exceptionCreator) {\n  const parseLayers = layers.length || 0;\n  let offset = 0;\n  let error;\n  let result = subInfo || {};\n  for (let i = 0; i < parseLayers; ++i) {\n    const { error: constError, index: constOffset, result: constResult } =\n      layers[i](type, name, bytes, offset, result, exceptionCreator);\n    offset = constOffset;\n    result = constResult;\n    error = constError;\n    if (error) break;\n  }\n  return { error, result };\n}\n\n// Subscription parser map by DestinationType\n// Currently only Topics have subscription information to parse, but more can be added as needed\n// The _layers attribute for the parser defines the order of parsing destination names\n// The _layers are made up of functions that can execute with the signature:\n//   { error, index, result } function funcName(type, name, bytes, result[, exceptionCreator])\n// To add more subscription information parsing add more layers to _layers of the DestinationType\nconst SUBSCRIPTION_LAYER_PARSER_FROM_TYPE = {\n  [DestinationType.TOPIC]: {\n    _layers: [subscriptionParseNoExport, subscriptionParseShare],\n    parse:   function subParse(type, name, bytes, subInfo, exceptionCreator) {\n      const { error, result } =\n        subscriptionStringParse(this._layers, type, name, bytes, subInfo, exceptionCreator);\n      return { error, result };\n    },\n  },\n};\n\nfunction createOperationError(type, errorStr) {\n  return new OperationError(`Invalid ${type}: ${errorStr}`, ErrorSubcode.INVALID_TOPIC_SYNTAX);\n}\n\n/**\n * @classdesc\n * <b> This class is not exposed. This object contains useful subscription information about\n * a {solace.Destination#name}</b>\n * @hideconstructor\n * @memberof solace\n * @private\n */\nclass SubscriptionInfo {\n  /**\n   * @constructor\n   * @param {String} name The name of the destination to be used as a subscription\n   * @private\n   */\n  constructor(name) {\n    this._name = name;\n    // set default values\n    this._isShare = false;\n    this._isNoExport = false;\n    this._dispatchTopicIndex = -1;\n    this._shareGroup = null;\n  }\n\n  /**\n   * @returns {String} The destination name specified at creation time\n   */\n  getName() {\n    return this._name;\n  }\n\n  /**\n   * @returns {String} subscription name\n   * @readonly\n   */\n  get name() {\n    return this.getName();\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#isShare\n   * @type {Boolean}\n   * @description Boolean Flag to indicate the {solace.SubscriptionInfo#name} is a shared\n   * subscription\n   * @default false\n   */\n  get isShare() {\n    return this._isShare;\n  }\n  set isShare(value) {\n    this._isShare = value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#isNoExport\n   * @type {Boolean}\n   * @description Boolean Flag to indicate the {solace.SubscriptionInfo#name} is a no export\n   * subscription\n   * @default false\n   */\n  get isNoExport() {\n    return this._isNoExport;\n  }\n  set isNoExport(value) {\n    this._isNoExport = value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#dispatchTopicIndex\n   * @type {Number}\n   * @description String index of the topic filter after subscription prefixes\n   * @default 0, the whole name as the topic filter\n   */\n  get dispatchTopicIndex() {\n    return this._dispatchTopicIndex < 0 ? 0 : this._dispatchTopicIndex;\n  }\n  set dispatchTopicIndex(value) {\n    this._dispatchTopicIndex = value < 0 ? -1 /* uninitialized*/ : value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#shareGroup\n   * @type {?String}\n   * @description The Share group of a shared subscription, should be null if\n   * {solace.SubscriptionInfo#isShare} is false\n   */\n  get shareGroup() {\n    return this.isShare ? this._shareGroup : null;\n  }\n  set shareGroup(value) {\n    if (this.isShare) {\n      this._shareGroup = value;\n    }\n  }\n\n  /**\n   * @returns {String} A generic description of the SubscriptionInfo\n   */\n  toString() {\n    return util_inspect(this);\n  }\n  /**\n   * @static\n   * @type {Object}\n   * @param {String} name The name of the destination\n   * @param {DestinationType} type The Destination type\n   * @returns {Object} the subscription infomation from the destination name\n   * @private\n   */\n  static parseFromName(name, type = DestinationType.TOPIC) {\n    let subInfo = new SubscriptionInfo(name);\n    let error = null;\n    const parser = SUBSCRIPTION_LAYER_PARSER_FROM_TYPE[type];\n    if (parser) {\n      const { error: errorConst, result: subInfoConst } =\n      parser.parse(type, name, null, subInfo, createOperationError.bind(null, type));\n      subInfo = subInfoConst;\n      error = errorConst;\n    }\n    return { error, subInfo };\n  }\n}\nmodule.exports.SubscriptionInfo = SubscriptionInfo;\n","const DestinationUtilLib = require('./destination-util');\nconst { Destination } = require('./destination');\nconst { DestinationType } = require('./destination-type');\n\n/**\n * @classdesc\n * Represents a Topic, which is a type of {@link solace.Destination}.\n *\n * @extends solace.Destination\n * @memberof solace\n * @deprecated since 10.0 Applications should not directly refer to this type.\n *  {@link solace.Destination} provides the full interface available to topic, and it can be\n *  determined whether the destination represents a topic if {@link solace.Destination#getType}\n *  returns {@link solace.DestinationType.TOPIC}.\n */\nclass Topic extends Destination {\n  /**\n   * @param {Object} spec The topic spec\n   * @private\n   */\n  constructor(spec) {\n    if (typeof spec === 'object') {\n      super({\n        type:             DestinationType.TOPIC,\n        name:             spec.name,\n        bytes:            spec.bytes,\n        offset:           spec.offset,\n        isValidated:      spec.isValidated,\n        isWildcarded:     spec.isWildcarded,\n        subscriptionInfo: spec.subscriptionInfo,\n      });\n    } else {\n      // Deprecated path -- super will do topic encode\n      super(spec, DestinationType.TOPIC);\n    }\n  }\n\n  [util_inspect_custom]() {\n    return `[Topic ${this.getName()}]`;\n  }\n\n  /**\n   * @static\n   * @param {String} topicName The name for the topic\n   * @returns {Topic} the Topic\n   * @private\n   */\n  static createFromName(topicName) {\n    const encoding = DestinationUtilLib.DestinationUtil.validateAndEncode(\n      DestinationType.TOPIC, topicName);\n    if (encoding.error) {\n      throw encoding.error;\n    }\n    return new Topic({\n      name:             topicName,\n      isValidated:      true,\n      bytes:            encoding.bytes,\n      offset:           encoding.offset,\n      isWildcarded:     encoding.isWildcarded,\n      subscriptionInfo: encoding.subscriptionInfo,\n    });\n  }\n}\n\nmodule.exports.Topic = Topic;\n","function apiEnv(envObject) {\n  if (typeof BUILD_ENV !== 'undefined' && !BUILD_ENV.TEST) {\n    throw new Error('Test environment will not override build environment');\n  }\n  global.BUILD_ENV = Object.assign({}, envObject, { TEST: true });\n  return global.BUILD_ENV;\n}\n\nif (typeof BUILD_ENV !== 'undefined' && BUILD_ENV.TEST === false) {\n  apiEnv.target = () => apiEnv();\n} else {\n  const configs = {\n    node: {\n      TARGET_NAME: 'node',\n      TARGET_NODE: true,\n    },\n    browser: {\n      TARGET_NAME:    'browser',\n      TARGET_BROWSER: true,\n    },\n    debug: {\n      MODE_NAME:    'debug',\n      MODE_DEBUG:   true,\n      MODE_RELEASE: false,\n    },\n    release: {\n      MODE_NAME:    'release',\n      MODE_DEBUG:   false,\n      MODE_RELEASE: true,\n    },\n  };\n\n  apiEnv.target = function named(...args) {\n    const objects = args.map((arg) => {\n      if (typeof arg === 'string') {\n        const obj = configs[arg];\n        if (!obj) {\n          throw new Error(`Environment ${arg} is not defined; use ${Object.keys(configs).join(', ')}`);\n        }\n        return obj;\n      } else if (arg && typeof arg === 'object') {\n        return arg;\n      }\n\n      throw new Error(`Unrecognized argument ${arg}`);\n    });\n    return apiEnv(Object.assign(...objects));\n  };\n}\nmodule.exports = apiEnv;\n","const { ErrorResponseSubcodeMapper } = require('./lib/error-response-subcode-mapper');\nconst { ErrorSubcode } = require('./lib/error-subcodes');\nconst { NotImplementedError } = require('./lib/not-implemented-error');\nconst { OperationError } = require('./lib/operation-error');\nconst { RequestError } = require('./lib/request-error');\nconst { RequestEventCode } = require('./lib/request-event-codes');\nconst { SolaceError } = require('./lib/solace-error');\n\nmodule.exports.ErrorResponseSubcodeMapper = ErrorResponseSubcodeMapper;\nmodule.exports.ErrorSubcode = ErrorSubcode;\nmodule.exports.NotImplementedError = NotImplementedError;\nmodule.exports.OperationError = OperationError;\nmodule.exports.RequestError = RequestError;\nmodule.exports.RequestEventCode = RequestEventCode;\nmodule.exports.SolaceError = SolaceError;\n","const { ErrorSubcode } = require('./error-subcodes');\nconst { makeMap } = require('solclient-eskit');\n\n/* eslint-disable max-len */\n\nconst SC = ErrorSubcode;\n\nconst ROOT_MAPPING = makeMap(\n  400, makeMap(\n    'client name parse error', SC.CLIENT_NAME_INVALID,\n    'document is too large', SC.MESSAGE_TOO_LARGE,\n    'inactivity timeout', SC.INACTIVITY_TIMEOUT,\n    'max num subscriptions exceeded', SC.SUBSCRIPTION_TOO_MANY,\n    'message too long', SC.MESSAGE_TOO_LARGE,\n    'nolocal discard', SC.NOLOCAL_DISCARD,\n    'not enough space', SC.OUT_OF_RESOURCES,\n    'subscription already exists', SC.SUBSCRIPTION_ALREADY_PRESENT,\n    'subscription attributes conflict with existing subscription', SC.SUBSCRIPTION_ATTRIBUTES_CONFLICT,\n    'subscription not found', SC.SUBSCRIPTION_NOT_FOUND,\n    'subscription parse error', SC.SUBSCRIPTION_INVALID,\n    'topic parse error', SC.INVALID_TOPIC_SYNTAX,\n    'unknown transport session identifier', SC.UNKNOWN_TRANSPORT_SESSION_ID,\n    'xml parse error', SC.XML_PARSE_ERROR,\n    'unsupported ssl downgrade value', SC.LOGIN_FAILURE\n  ),\n  401, makeMap(\n    '', SC.LOGIN_FAILURE\n  ),\n  403, makeMap(\n    'basic authentication is shutdown', SC.BASIC_AUTHENTICATION_IS_SHUTDOWN,\n    'client certificate authentication is shutdown', SC.CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN,\n    'client name already in use', SC.CLIENT_NAME_ALREADY_IN_USE,\n    'client username is shutdown', SC.CLIENT_USERNAME_IS_SHUTDOWN,\n    'dynamic clients not allowed', SC.DYNAMIC_CLIENTS_NOT_ALLOWED,\n    'invalid virtual router address', SC.INVALID_VIRTUAL_ADDRESS,\n    'forbidden', SC.CLIENT_ACL_DENIED,\n    'message vpn not allowed', SC.MESSAGE_VPN_NOT_ALLOWED,\n    'publish acl denied', SC.PUBLISH_ACL_DENIED,\n    'replication is standby', SC.REPLICATION_IS_STANDBY,\n    'selector does not match', SC.SELECTOR_DOES_NOT_MATCH,\n    'subscription acl denied', SC.SUBSCRIPTION_ACL_DENIED,\n    'subscription does not match', SC.SUBSCRIPTION_DOES_NOT_MATCH,\n    'compression is shutdown', SC.LOGIN_FAILURE,\n    'shared subscriptions not supported on topic endpoints', SC.SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED,\n    'shared subscriptions not supported on queues', SC.SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED,\n    'shared subscription permission denied', SC.SHARED_SUBSCRIPTIONS_NOT_ALLOWED\n  ),\n  404, makeMap(\n    '', SC.LOGIN_FAILURE\n  ),\n  503, makeMap(\n    'low priority msg congestion', SC.LOW_PRIORITY_MSG_CONGESTION,\n    'message vpn unavailable', SC.MESSAGE_VPN_UNAVAILABLE,\n    'replication is standby', SC.REPLICATION_IS_STANDBY,\n    'service unavailable', SC.GM_UNAVAILABLE,\n    'spool over quota', SC.SPOOL_OVER_QUOTA,\n    'subscriber delete in progress', SC.CLIENT_DELETE_IN_PROGRESS,\n    'too many clients', SC.TOO_MANY_CLIENTS,\n    'too many connections for vpn', SC.TOO_MANY_CLIENTS,\n    'max message usage exceeded', SC.MAX_MESSAGE_USAGE_EXCEEDED\n  ),\n  507, makeMap(\n    'ad not ready', SC.GM_NOT_READY\n  )\n);\n\nconst AD_MAPPING = makeMap(\n  'PARENT', ROOT_MAPPING,\n  400, makeMap(\n    'already bound', SC.ALREADY_BOUND,\n    'endpoint already exists', SC.ENDPOINT_ALREADY_EXISTS,\n    'subscription already exists', SC.SUBSCRIPTION_ALREADY_PRESENT,\n    'already exists', SC.ENDPOINT_ALREADY_EXISTS,\n    'endpoint property mismatch', SC.ENDPOINT_PROPERTY_MISMATCH,\n    'invalid durable topic endpoint name', SC.INVALID_DTE_NAME,\n    'invalid selector', SC.INVALID_SELECTOR,\n    'invalid topic name', SC.INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT,\n    'queue not found', SC.QUEUE_NOT_FOUND,\n    'quota out of range', SC.QUOTA_OUT_OF_RANGE,\n    'unknown flow name', SC.UNKNOWN_FLOW_NAME,\n    'unsubscribe not allowed', SC.UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND\n  ),\n  403, makeMap(\n    'permission not allowed', SC.PERMISSION_NOT_ALLOWED,\n    'client initiated replay not allowed on non-exclusive topic endpoint', SC.CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED,\n    'client initiated replay not allowed on non-exclusive queue', SC.CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED,\n    'client initiated replay from inactive flow not allowed', SC.CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED,\n    'client initiated replay from browser flow not allowed', SC.CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED,\n    'replay not supported on temporary topic endpoint', SC.REPLAY_TEMPORARY_NOT_SUPPORTED,\n    'replay not supported on temporary queue', SC.REPLAY_TEMPORARY_NOT_SUPPORTED,\n    'unknown start location type', SC.UNKNOWN_START_LOCATION_TYPE,\n    'mismatched endpoint error id', SC.MISMATCHED_ENDPOINT_ERROR_ID,\n    'replay start message unavailable', SC.REPLAY_START_MESSAGE_NOT_AVAILABLE\n  ),\n  503, makeMap(\n    'durable topic endpoint shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'endpoint shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'max clients exceeded for durable topic endpoint', SC.MAX_CLIENTS_FOR_TE,\n    'max clients exceeded for queue', SC.MAX_CLIENTS_FOR_QUEUE,\n    'no more non-durable queue or topic endpoint', SC.NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT,\n    'no subscription match', SC.NO_SUBSCRIPTION_MATCH,\n    'queue shutdown', SC.QUEUE_SHUTDOWN,\n    'te shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'unknown durable topic endpoint', SC.UNKNOWN_TOPIC_ENDPOINT_NAME,\n    'unknown queue', SC.UNKNOWN_QUEUE_NAME,\n    'replay disabled', SC.REPLAY_DISABLED,\n    'replay cancelled', SC.REPLAY_CANCELLED,\n    'replay message unavailable', SC.REPLAY_MESSAGE_UNAVAILABLE,\n    'replay started', SC.REPLAY_STARTED,\n    'replayed message rejected by topic endpoint', SC.REPLAY_MESSAGE_REJECTED,\n    'replayed message rejected by queue\"', SC.REPLAY_MESSAGE_REJECTED,\n    'replay log modified', SC.REPLAY_LOG_MODIFIED,\n    'mismatched endpoint error id', SC.MISMATCHED_ENDPOINT_ERROR_ID,\n    'out of replay resources', SC.OUT_OF_REPLAY_RESOURCES,\n    'topic or selector modified on durable topic endpoint', SC.TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT,\n    'replay failed', SC.REPLAY_FAILED,\n    'replay start time not available', SC.REPLAY_START_TIME_NOT_AVAILABLE,\n    'replay start message unavailable', SC.REPLAY_START_MESSAGE_NOT_AVAILABLE\n  )\n);\n\nfunction getSubcodeMappingInner(root, respErrorCode, respStr) {\n  if (respErrorCode === 200) {\n    // success response, error subcode is 0 -  transport session use 0 as OK\n    return 0;\n  }\n  const codeMap = root[respErrorCode] || {};\n  const searchKey = (respStr || '').toLowerCase();\n  const foundKey = Object.keys(codeMap)\n    .find(mapKey => mapKey === searchKey || searchKey.indexOf(mapKey) >= 0);\n\n  if (foundKey) {\n    return codeMap[foundKey];\n  }\n\n  if (codeMap['']) {\n    return codeMap[''];\n  }\n\n  /* eslint-disable dot-notation */\n  // Don't access string keys via dot properties\n  if (root['PARENT']) {\n    return getSubcodeMappingInner(root['PARENT'], respErrorCode, respStr);\n  }\n  /* eslint-enable dot-notation */\n\n  return undefined;\n}\n\nfunction getSubcodeMapping(root, respErrorCode, respStr) {\n  const result = getSubcodeMappingInner(root, respErrorCode, respStr);\n  if (result === undefined) {\n    return SC.UNKNOWN_ERROR;\n  }\n  return result;\n}\n\n/**\n * @classdesc\n * Return {ErrorSubcode} based on response code and response string\n * from the router.\n * @private\n */\nconst ErrorResponseSubcodeMapper = {\n  /**\n   * @param {Number} respErrorCode The response code (an HTTP-like integer) to use in the lookup.\n   * @param {String} respStr The response string to use in the lookup.\n   * @returns {solace.ErrorSubcode} The subcode found, or ErrorSubcode.UNKNOWN_ERROR if not found.\n   * @static\n   * @private\n   */\n  getErrorSubcode(respErrorCode, respStr) {\n    return getSubcodeMapping(ROOT_MAPPING, respErrorCode, respStr);\n  },\n\n  getADErrorSubcode(respErrorCode, respStr) {\n    return getSubcodeMapping(AD_MAPPING, respErrorCode, respStr);\n  },\n};\n\nmodule.exports.ErrorResponseSubcodeMapper = ErrorResponseSubcodeMapper;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Defines an error subcode enumeration which is returned as a property of\n * the errors/exceptions thrown by the API. The subcode provides more detailed\n * error information.\n *\n * The following subcodes can apply to error responses resulting from\n * any API method.\n * * {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}\n * * {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n * * {@link solace.ErrorSubcode.INTERNAL_ERROR}\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst ErrorSubcode = {\n  /////////////\n  // SESSION //\n  /////////////\n  /**\n   * Errors that do not have a proper subcode.\n   */\n  UNKNOWN_ERROR:                                 0xFFFFFFFF,\n  /**\n   * No error is associated with this event.\n   */\n  NO_ERROR:                                      0,\n  /**\n   * The session is already connected.\n   */\n  // SESSION_ALREADY_CONNECTED: 1,\n  /**\n   * The session is not connected.\n   */\n  SESSION_NOT_CONNECTED:                         2,\n  /**\n   * The performed session operation is invalid given the state\n   * or configuration of the session.\n   * @deprecated Use {@link solace.ErrorSubCode.INVALID_OPERATION}\n   */\n  INVALID_SESSION_OPERATION:                     3,\n  /**\n   * The performed session operation is invalid given the state\n   * or configuration of the session.\n   */\n  INVALID_OPERATION:                             3,\n  /**\n   * An API call failed due to a timeout.\n   */\n  TIMEOUT:                                       4,\n  /////////////////\n  // MESSAGE VPN //\n  /////////////////\n  /**\n   * The Message VPN name configured for the session does not exist.\n   *\n   * Causes:\n   *  * 403 Message VPN Not Allowed\n   */\n  MESSAGE_VPN_NOT_ALLOWED:                       5,\n  /**\n   * The Message VPN name set for the session (or the default VPN if none\n   * was set) is currently shutdown on the router.\n   *\n   * Causes:\n   *  * 503 Message VPN Unavailable\n   */\n  MESSAGE_VPN_UNAVAILABLE:                       6,\n  ////////////\n  // CLIENT //\n  ////////////\n  /**\n   * The username for the client is administratively shutdown\n   * on the router.\n   *\n   * Causes:\n   *  * 403 Client Username Is Shutdown\n   */\n  CLIENT_USERNAME_IS_SHUTDOWN:                   7,\n  /**\n   * The username for the session has not been set and dynamic\n   * clients are not allowed.\n   *\n   * Causes:\n   *  * 403 Dynamic Clients Not Allowed\n   */\n  DYNAMIC_CLIENTS_NOT_ALLOWED:                   8,\n  /**\n   * The session is attempting to use a client name that is\n   * in use by another client, and the router is configured to reject the\n   * new session.\n   * A client name cannot be used by multiple clients in the same Message\n   * VPN.\n   *\n   * Causes:\n   *  * 403 Client Name Already In Use\n   */\n  CLIENT_NAME_ALREADY_IN_USE:                    9,\n  /**\n   * The client name chosen has been rejected as invalid by the router.\n   *\n   * Causes:\n   *  * 400 Client Name Parse Error\n   */\n  CLIENT_NAME_INVALID:                           10,\n  /**\n   * The client login is not currently possible because a previous\n   * instance of same client was being deleted.\n   *\n   * Causes:\n   *  * 503 Subscriber Delete In Progress\n   */\n  CLIENT_DELETE_IN_PROGRESS:                     11,\n  /**\n   * The client login is not currently possible because the maximum\n   * number of active clients on router has already been reached.\n   *\n   * Causes:\n   *  * 503 Too Many Clients\n   *  * 503 Too Many Connections for VPN\n   */\n  TOO_MANY_CLIENTS:                              12,\n  /**\n   * The client could not log into the router.\n   *\n   * Causes:\n   *  * 401 error codes\n   *  * 404 error codes\n   *  * Failed to send a session setup message in the transport.\n   */\n  LOGIN_FAILURE:                                 13,\n  //////////\n  // VRID //\n  //////////\n  /**\n   * An attempt was made to connect to the wrong IP address on\n   * the router (must use CVRID if configured), or the router CVRID has\n   * changed and this was detected on reconnect.\n   *\n   * Causes:\n   *  * 403 Invalid Virtual Router Address\n   */\n  INVALID_VIRTUAL_ADDRESS:                       14,\n  /////////\n  // ACL //\n  /////////\n  /**\n   * The client login to the router was denied because the\n   * IP address/netmask combination used for the client is designated in the\n   * ACL (Access Control List) profile associated with that client.\n   *\n   * Causes:\n   *  * 403 Forbidden\n   */\n  CLIENT_ACL_DENIED:                             15,\n  /**\n   * Adding a subscription was denied because it matched a\n   * subscription that was defined as denied on the ACL (Access Control List)\n   * profile associated with the client.\n   *\n   * Causes:\n   *  * 403 Subscription ACL Denied\n   */\n  SUBSCRIPTION_ACL_DENIED:                       16,\n  /**\n   * A message could not be published because its topic matched\n   * a topic defined as denied on the ACL (Access Control List) profile\n   * associated with the client.\n   *\n   * Causes:\n   *  * 403 Publish ACL Denied\n   */\n  PUBLISH_ACL_DENIED:                            17,\n  ////////////////\n  // VALIDATION //\n  ////////////////\n  /**\n   * An API call was made with an out-of-range parameter.\n   */\n  PARAMETER_OUT_OF_RANGE:                        18,\n  /**\n   * An API call was made with a parameter combination\n   * that is not valid.\n   */\n  PARAMETER_CONFLICT:                            19,\n  /**\n   * An API call was made with a parameter of incorrect type.\n   */\n  PARAMETER_INVALID_TYPE:                        20,\n  //////////////////\n  // FATAL ERRORS //\n  //////////////////\n  /**\n   *  An API call had an internal error (not an application fault).\n   */\n  INTERNAL_ERROR:                                21,\n  /**\n   * An API call failed due to insufficient space in the transport\n   * buffer to accept more data,\n   * or due to exhaustion of the Guaranteed Messaging Window on a publisher.\n   * After an insufficient space error of either kind, the\n   * listeners on the {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}\n   * event are notified when it is possible to retry the failed operation.\n   */\n  INSUFFICIENT_SPACE:                            22,\n  /**\n   * The message router has rejected the request. All available\n   * resources of the requested type are in use.\n   *\n   * Causes:\n   *  * 400 Not Enough Space\n   */\n  OUT_OF_RESOURCES:                              23,\n  /**\n   * An API call failed due to a protocol error with the router\n   * (not an application fault).\n   */\n  PROTOCOL_ERROR:                                24,\n  /**\n   * An API call failed due to a communication error. This typically indicates the\n   * transport connection to the message router has been unexpectedly closed.\n   */\n  COMMUNICATION_ERROR:                           25,\n  ////////////////\n  // KEEP ALIVE //\n  ////////////////\n  /**\n   * The session keep-alive detected a failed session.\n   */\n  KEEP_ALIVE_FAILURE:                            26,\n  /////////////////////\n  // MESSAGE RELATED //\n  /////////////////////\n  /**\n   * An attempt was made to use a topic which is longer\n   * than the maximum that is supported.\n   */\n  // TOPIC_TOO_LARGE: 27,\n  /**\n   * A send call was made that did not have a topic in a mode\n   * where one is required (for example, client mode).\n   */\n  TOPIC_MISSING:                                 28,\n  /**\n   *  An attempt was made to send a message with a total\n   * size greater than that supported by the protocol. (???)\n   */\n  //  MAX_TOTAL_MSGSIZE_EXCEEDED: 29,\n  /**\n   * An attempt was made to send a message with user data larger\n   * than the maximum that is supported.\n   */\n  // USER_DATA_TOO_LARGE: 30,\n  /**\n   * An attempt was made to use a topic which has a syntax that\n   * is not supported.\n   *\n   * Causes:\n   *  * 400 Topic Parse Error\n   */\n  INVALID_TOPIC_SYNTAX:                          31,\n  /**\n   * The client attempted to send a message larger than that\n   * supported by the router.\n   *\n   * Causes:\n   *  * 400 Document Is Too Large\n   *  * 400 Message Too Long\n   */\n  MESSAGE_TOO_LARGE:                             32,\n  /**\n   * The router could not parse an XML message.\n   *\n   * Causes:\n   *  * 400 XML Parse Error\n   */\n  XML_PARSE_ERROR:                               33,\n  ///////////////////\n  // SUBSCRIPTIONS //\n  ///////////////////\n  /**\n   * The client attempted to add a subscription that already\n   * exists. This subcode is only returned if the session property\n   * 'IgnoreDuplicateSubscriptionError' is not enabled.\n   *\n   * Causes:\n   * 400 Subscription Already Exists)\n   */\n  SUBSCRIPTION_ALREADY_PRESENT:                  34,\n  /**\n   * The client attempted to remove a subscription which did not exist.\n   * This subcode is only returned if the session property\n   * 'IgnoreDuplicateSubscriptionError' is not enabled.\n   *\n   * Causes:\n   * 400 Subscription Not Found)\n   */\n  SUBSCRIPTION_NOT_FOUND:                        35,\n  /**\n   * The client attempted to add/remove a subscription that\n   * is not valid.\n   *\n   * Causes:\n   *  * 400 Subscription Parse Error\n   */\n  SUBSCRIPTION_INVALID:                          36,\n  /**\n   * The router rejected a subscription add or remove request\n   * for a reason not separately enumerated.\n   */\n  SUBSCRIPTION_ERROR_OTHER:                      37,\n  /**\n   * The client attempted to add a subscription that\n   * exceeded the maximum number allowed.\n   *\n   * Causes:\n   *  * 400 Max Num Subscriptions Exceeded\n   */\n  SUBSCRIPTION_TOO_MANY:                         38,\n  /**\n   *  The client attempted to add a subscription which already\n   * exists but it has different properties.\n   *\n   * Causes:\n   *  * 400 Subscription Attributes Conflict With Existing Subscription\n   */\n  SUBSCRIPTION_ATTRIBUTES_CONFLICT:              39,\n  /**\n   * The client attempted to establish a session with No Local\n   * enabled and the capability is not supported by the router.\n   */\n  NO_LOCAL_NOT_SUPPORTED:                        40,\n  ////////////////////\n  // UNKNOWN ERRORS //\n  ////////////////////\n  /**\n   * The router rejected a control message for another reason\n   * not separately enumerated.\n   */\n  // CONTROL_ERROR_OTHER: 41,\n  /**\n   * The router rejected a data message for a reason\n   * not separately enumerated.\n   */\n  DATA_ERROR_OTHER:                              42,\n  //////////////////////\n  // TRANSPORT ERRORS //\n  //////////////////////\n  /**\n   * Failed to create the HTTP connection.\n   */\n  CREATE_XHR_FAILED:                             43,\n  /**\n   * Failed to create the transport.\n   */\n  CONNECTION_ERROR:                              44,\n  /**\n   * Failed to decode the data.\n   */\n  DATA_DECODE_ERROR:                             45,\n  /**\n   * @deprecated\n   * The session was inactive for too long.\n   *\n   * Causes:\n   * * 400 Inactivity Timeout\n   */\n  INACTIVITY_TIMEOUT:                            46,\n  /**\n   * @deprecated\n   * The router does not know this session's identifier.\n   *\n   * Causes:\n   * * 400 Unknown Transport Session Identfier\n   */\n  UNKNOWN_TRANSPORT_SESSION_ID:                  47,\n  /**\n   * @deprecated This subcode is not used since 10.0.0.\n   * Guaranteed Messages (with a delivery mode other than DIRECT) are not supported.\n   */\n  AD_MESSAGING_NOT_SUPPORTED:                    48,\n  /**\n   * @deprecated\n   * Creating the WebSocket transport failed.\n   */\n  CREATE_WEBSOCKET_FAILED:                       49,\n  /**\n   * An attempt to perform an operation using a VPN that is configured to be\n   * STANDBY for replication.\n   *\n   * Causes:\n   * * 403 Replication Is Standby\n   */\n  REPLICATION_IS_STANDBY:                        50,\n  ////////////////////\n  // Authentication //\n  ////////////////////\n  /**\n   * Basic authentication is administratively shut down on the\n   * router.\n   *\n   * Causes:\n   *  * 403 Basic Authentication is Shutdown\n   */\n  BASIC_AUTHENTICATION_IS_SHUTDOWN:              51,\n  /**\n   * Client certificate authentication is administratively\n   * shut down on the router.\n   *\n   * Causes:\n   *  * 403 Client Certificate Authentication Is Shutdown\n   */\n  CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN: 52,\n  //////////////////////\n  // Guaranteed Messaging //\n  //////////////////////\n  /**\n   * Guaranteed Messaging services are not enabled on the router.\n   *\n   * Causes:\n   *  * 503 Service Unavailable\n   */\n  GM_UNAVAILABLE:                                100,\n  /**\n   * The session attempted to connect to a Guaranteed Message Publisher\n   * that does not exist on this router.\n   * All unacked messages held by the API are renumbered and redelivered. This subCode\n   * is handled internally and will not be seen by the application. After successfully\n   * renumbereing and redelivering the messages, if any messages are resent, listeners\n   * on the @{link solace.SessionEventCode#event:REPUBLISHING_UNACKED_MESSAGES} event are\n   * invoked.\n   *\n   * Causes:\n   * * 400 Unknown Flow Name\n   * @private\n   */\n  UNKNOWN_FLOW_NAME:                             111,\n  /**\n   * Already bound to the Queue or not authorized to bind to the Queue.\n   *\n   * Causes:\n   *  * 400 Already Bound\n   */\n  ALREADY_BOUND:                                 112,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Topic Endpoint with an\n   * invalid topic.\n   *\n   * Causes:\n   *  * 400 Invalid Topic Name\n   */\n  INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT:         113,\n  /**\n   * An attempt was made to bind to an unknown Queue name (for example, not\n   * configured on the router).\n   *\n   * Causes:\n   *  * 503 Unknown Queue\n   */\n  UNKNOWN_QUEUE_NAME:                            114,\n  /**\n   * An attempt was made to perform an operation on an unknown Guaranteed Messaging\n   * Topic Endpoint name (for example, not configured on router).\n   *\n   * Causes:\n   *  * 503 Unknown Durable Topic Endpoint\n   */\n  UNKNOWN_TOPIC_ENDPOINT_NAME:                   115,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Queue that has already reached\n   * its maximum number of clients.\n   *\n   * Causes:\n   *  * 503 Max clients exceeded for Queue\n   */\n  MAX_CLIENTS_FOR_QUEUE:                         116,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Topic Endpoint that has already\n   * reached its maximum number of clients.\n   *\n   * Causes:\n   *  * 503 Max clients exceeded for durable Topic Endpoint\n   */\n  MAX_CLIENTS_FOR_TE:                            117,\n  /**\n   * An unexpected unbind response was received for a Guaranteed Messaging Queue or Topic\n   * Endpoint (for example, the Queue or Topic Endpoint was deleted from the router).\n   */\n  UNEXPECTED_UNBIND:                             118,\n  /**\n   * The specified Guaranteed Messaging Queue was not found when publishing a message.\n   *\n   * Causes:\n   *  * 400 Queue Not Found\n   */\n  QUEUE_NOT_FOUND:                               119,\n  /**\n   * Message was not delivered because the Guaranteed Message spool is over its\n   * allotted space quota.\n   *\n   * Causes:\n   *  * 503 Spool Over Quota\n   */\n  SPOOL_OVER_QUOTA:                              120,\n  /**\n   * An attempt was made to operate on a shutdown Guaranteed Messaging queue.\n   *\n   * Causes:\n   *  * 503 Queue Shutdown\n   */\n  QUEUE_SHUTDOWN:                                121,\n  /**\n   * An attempt was made to operate on a shutdown Guaranteed Messaging Topic Endpoint.\n   *\n   * Causes:\n   *  * 503 Durable Topic Endpoint Shutdown\n   *  * 503 TE Shutdown\n   *  * 503 Endpoint Shutdown\n   */\n  TOPIC_ENDPOINT_SHUTDOWN:                       122,\n  /**\n   * An attempt was made to bind to a non-durable Guaranteed Messaging Queue or Topic\n   * Endpoint, and the router is out of resources.\n   *\n   * Causes:\n   *  * 503 No More Non-Durable Queue or Topic Endpoint\n   */\n  NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT:   123,\n  /**\n   * An attempt was made to create a Queue or Topic Endpoint that already exists.\n   * This subcode is only returned if\n   * {@link solace.SessionProperties.ignoreProvisionEndpointExists} was not set for the current\n   * session.\n   *\n   * Causes:\n   *  * 400 Endpoint Already Exists\n   */\n  ENDPOINT_ALREADY_EXISTS:                       124,\n  /**\n   * An attempt was made to delete or create a Queue or Topic Endpoint when the\n   * Session does not have authorization for the action. This subcode is also returned when an\n   * attempt is made to remove a message from an endpoint when the Session does not have 'consume'\n   * authorization, or when an attempt is made to add or remove a Topic subscription from a Queue\n   * when the Session does not have 'modify-topic' authorization.\n   *\n   * Causes:\n   *  * 403 Permission Not Allowed\n   */\n  PERMISSION_NOT_ALLOWED:                        125,\n  /**\n   * An attempt was made to bind to a Queue or Topic Endpoint with an invalid\n   * selector.\n   *\n   * Causes:\n   *  * 400 Invalid Selector\n   */\n  INVALID_SELECTOR:                              126,\n  /**\n   * Publishing the message was denied due to exceeding the maximum spooled message\n   * count.\n   *\n   * Causes:\n   *  * 503 Max message usage exceeded\n   */\n  MAX_MESSAGE_USAGE_EXCEEDED:                    127,\n  /**\n   * An attempt was made to create a dynamic durable endpoint, and it was found to\n   * exist with different properties.\n   *\n   * Causes:\n   *  * 400 Endpoint Property Mismatch\n   */\n  ENDPOINT_PROPERTY_MISMATCH:                    128,\n  /**\n   * The client attempted to publish an Guaranteed Messaging message to a topic that\n   * did not have any guaranteed subscription matches, or only matched a replicated topic.\n   *\n   * Causes:\n   *  * 503 No Subscription Match\n   */\n  NO_SUBSCRIPTION_MATCH:                         129,\n  /**\n   * The application attempted to acknowledge a message that arrived via a delivery\n   * mode that does not allow acknowledgements.\n   */\n  MESSAGE_DELIVERY_MODE_MISMATCH:                130,\n  /**\n   * The message was already acknowledged.\n   */\n  MESSAGE_ALREADY_ACKNOWLEDGED:                  131,\n  /**\n   * The API-supplied subscription did not match when attempting to bind to a\n   * non-exclusive durable topic endoint.\n   *\n   * Causes:\n   *  * 403 Subscription Does Not Match\n   */\n\n  SUBSCRIPTION_DOES_NOT_MATCH:                       133,\n  /**\n   * The API-supplied selector did not match when attempting to bind to a\n   * non-exclusive durable topic endpoint.\n   *\n   * Causes:\n   *  * 403 Selector Does Not Match\n   */\n  SELECTOR_DOES_NOT_MATCH:                           134,\n  /**\n   * The subscriber has provided an incorrectly formatted durable topic endpoint name.\n   *\n   * Causes:\n   *  * 400 Invalid Durable Topic Endpoint Name\n   */\n  INVALID_DTE_NAME:                                  135,\n  /**\n   * The unsubscribe request was denied by the router because the durable topic endpoint\n   * had one or more clients bound.\n   *\n   * Causes:\n   *  * 400 Unsubscribe Not Allowed, Client(s) Bound To DTE\n   */\n  UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND:             136,\n  /**\n   * An application callback threw an error back to the API. The reason property describes\n   * the error that occurred.\n   */\n  CALLBACK_ERROR:                                    137,\n  /**\n   * A published message was discarded by the router because it will not be published\n   * anywhere based on the NoLocal properties. This can be considered normal.\n   *\n   * Causes:\n   * * 400 Nolocal Discard\n   */\n  NOLOCAL_DISCARD:                                   138,\n  /**\n   * The operation is delayed because Guaranteed Messaging is not ready on the router.\n   *\n   * Causes:\n   * 507 Ad Not Ready\n   */\n  GM_NOT_READY:                                      140,\n  /**\n   * The message was rejected because one or more matching endpoints'\n   * reject-low-priority-msg-limit was exceeded.\n   *\n   * Causes:\n   * * 503 Low Priority Msg Congestion\n   */\n  LOW_PRIORITY_MSG_CONGESTION:                       141,\n  /**\n   * The specified endpoint quota was out of range.\n   *\n   * Causes:\n   * 400 Quota Out Of Range\n   */\n  QUOTA_OUT_OF_RANGE:                                142,\n  /**\n   * Unable to load the certificate from the TrustStore for a SSL\n   * secured session.\n   */\n  FAILED_LOADING_TRUSTSTORE:                         143,\n  /**\n   * The client failed to load certificate and/or private key files.\n   */\n  FAILED_LOADING_CERTIFICATE_AND_KEY:                144,\n  /**\n   * DNS resolution failed for all hostnames.\n   */\n  UNRESOLVED_HOSTS:                                  145,\n  /**\n   * Replay is not supported on the Solace Message Router\n   */\n  REPLAY_NOT_SUPPORTED:                              146,\n  /**\n   *  Replay is not enabled in the message-vpn\n   */\n  REPLAY_DISABLED:                                   147,\n  /**\n   *  The client attempted to start replay on a flow bound to a non-exclusive endpoint\n   */\n  CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED: 148,\n  /**\n   *  The client attempted to start replay on an inactive flow\n   */\n  CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED: 149,\n  /**\n   *  N/A - Browser Flows are not supported.\n   */\n  CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED:  150,\n  /**\n   *  Replay is not supported on temporary endpoints\n   */\n  REPLAY_TEMPORARY_NOT_SUPPORTED:                    151,\n  /**\n   *  The client attempted to start a replay but provided an unknown start location type.\n   */\n  UNKNOWN_START_LOCATION_TYPE:                       152,\n  /**\n   *  A replay in progress on a flow was administratively cancelled, causing the flow to be unbound\n   */\n  REPLAY_CANCELLED:                                  153,\n  /**\n   *  A replay in progress on a flow failed because messages to be replayed were trimmed\n   *  from the replay log\n   */\n  REPLAY_MESSAGE_UNAVAILABLE:                        154,\n  /**\n   *  A replay was requested but the requested start time is not available in the replay log\n   */\n  REPLAY_START_TIME_NOT_AVAILABLE:                   155,\n  /**\n   *  The Solace Message Router attempted to replay a message, but the queue/topic\n   *  endpoint rejected the message to the sender\n   */\n  REPLAY_MESSAGE_REJECTED:                           156,\n  /**\n   *  A replay in progress on a flow failed because the replay log was modified\n   */\n  REPLAY_LOG_MODIFIED:                               157,\n  /**\n   * Endpoint error ID in the bind request does not match the endpoint's error ID.\n   */\n  MISMATCHED_ENDPOINT_ERROR_ID:                      158,\n  /**\n   * A replay was requested, but the router does not have sufficient resources\n   * to fulfill the request, due to too many active replays.\n   */\n  OUT_OF_REPLAY_RESOURCES:                           159,\n\n  /**\n   * A replay was in progress on a Durable Topic Endpoint (DTE)\n   * when its topic or selector was modified, causing the replay to fail.\n   */\n  TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT: 160,\n  /**\n   *  A replay in progress on a flow failed\n   */\n  REPLAY_FAILED:                                        161,\n  /**\n   *  A replay was started on the queue or DTE, either by another client or by the router.\n   */\n  REPLAY_STARTED:                                       162,\n  /**\n   * Router does not support Compressed TLS\n   */\n  COMPRESSED_TLS_NOT_SUPPORTED:                         163,\n  /**\n   * The client attempted to add a shared subscription, but the capability is not supported\n   * by the appliance.\n   */\n  SHARED_SUBSCRIPTIONS_NOT_SUPPORTED:                   164,\n  /**\n   * The client attempted to add a shared subscription on a client that is not permitted to\n   * use shared subscriptions.\n   */\n  SHARED_SUBSCRIPTIONS_NOT_ALLOWED:                     165,\n  /**\n   * The client attempted to add a shared subscription to a queue or topic endpoint.\n   */\n  SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED:            166,\n  /**\n   * A replay was requested but the requested start message is not available in the replay log.\n   */\n  REPLAY_START_MESSAGE_NOT_AVAILABLE:                   167,\n  /**\n   * Replication Group Message Id are not comparable.\n   * Messages must be published to the same broker or HA pair for their Replicaton Group\n   * Message Id to be comparable.\n   */\n  MESSAGE_ID_NOT_COMPARABLE:                            168,\n};\n\nmodule.exports.ErrorSubcode = Enum.new(ErrorSubcode);\n","const { SolaceError } = require('./solace-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * An error thrown when calling an API that has not been implemented.\n * @hideconstructor\n * @extends {solace.SolaceError}\n *\n * @memberof solace\n */\nclass NotImplementedError extends SolaceError {\n  /*\n   * Creates an instance of NotImplementedError.\n   * @param {any} message The message to include in the error.\n   * @memberof NotImplementedError\n   */\n  constructor(message) {\n    super('NotImplementedError', message || '', NotImplementedError);\n  }\n  /**\n   * The name of the error.\n   * @name solace.NotImplementedError#name\n   * @type {String}\n   * @readonly\n   * @description 'NotImplementedError'\n   */\n}\n\nmodule.exports.NotImplementedError = NotImplementedError;\n\n","const { SolaceError } = require('./solace-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * An error thrown by the API when an operational error is encountered.\n * @memberof solace\n * @extends {solace.SolaceError}\n * @hideconstructor\n */\nclass OperationError extends SolaceError {\n\n  /*\n   * @constructor\n   * @param {String} message The message to include in the error.\n   * @param {Number} [subcode] The subcode. See {@link ErrorSubcode} for valid values\n   * @param {Object} [reason] Embedded error or exception (optional)\n   */\n  constructor(message, subcode, reason) {\n    /**\n     * The name of the error.\n     * @name solace.OperationError#name\n     * @type {String}\n     * @readonly\n     * @description 'OperationError'\n     */\n    super('OperationError', message, OperationError);\n    /**\n     * The subcode for the error. @see {@link solace.ErrorSubcode}\n     * @name solace.OperationError#subcode\n     * @type {solace.ErrorSubcode}\n     */\n    this.subcode = subcode;\n    /**\n     * The reason for the error: an embedded error object or exception.\n     * @name solace.OperationError#reason\n     * @type {Object}\n     */\n    this.reason = reason;\n  }\n\n}\n\nmodule.exports.OperationError = OperationError;\n","const { ErrorSubcode } = require('./error-subcodes');\nconst { OperationError } = require('./operation-error');\nconst { RequestEventCode } = require('./request-event-codes');\n\n\nconst SUBCODE_FROM_EC = {\n  [RequestEventCode.REQUEST_ABORTED]: ErrorSubcode.SESSION_NOT_CONNECTED,\n  [RequestEventCode.REQUEST_TIMEOUT]: ErrorSubcode.TIMEOUT,\n};\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a request failure event; request failure events are passed to the application\n * event handling callback provided when sending the request {@link solace.Session#sendRequest}\n * @memberof solace\n * @extends solace.OperationError\n * @hideconstructor\n */\nclass RequestError extends OperationError {\n  /*\n   * <b>This class is not exposed for construction by API users.</b> Instances of this object will\n   * be passed to the application in calls to the application's\n   * {@link solace.Session.requestFailedCallback}, provided when invoking\n   * {@link solace.Session.sendReqeust}.\n   * @constructor\n   * @param {String} message Information string\n   * @param {solace.RequestEventCode} eventCode The event code\n   * @param {Object} [correlationKey] Any associated correlation key\n   * @param {Object} [reason] Any additional information\n   * @private\n   */\n  constructor(message, eventCode, correlationKey, reason) {\n    super(message, SUBCODE_FROM_EC[eventCode], reason);\n    /**\n     * The name of the error.\n     * @name solace.RequestError#name\n     * @type {String}\n     * @readonly\n     * @description 'RequestError'\n     */\n    this.name = 'RequestError';\n    this._eventCode = eventCode;\n    this._correlationKey = correlationKey;\n  }\n\n  /**\n   * @type {solace.SessionEventCode}\n   * @name solace.RequestError#requestEventCode\n   * @description A code that provides more information about the error event.\n   */\n  get requestEventCode() {\n    return this._requestEventCode;\n  }\n\n  /**\n   * @deprecated Use {@link solace.RequestError#subcode}\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link ErrorSubcode}\n   */\n  get errorSubcode() {\n    return super.subcode;\n  }\n\n  [util_inspect_custom]() {\n    const superObj = super[util_inspect_custom] ? super[util_inspect_custom]() : {};\n    return Object.assign(superObj, {\n      'requestEventCode': RequestEventCode.describe(this.requestEventCode),\n      'infoStr':          this.infoStr,\n      'correlationKey':   this.correlationKey,\n    });\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n}\n\nmodule.exports.RequestError = RequestError;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An attribute of {@link solace.RequestError}. This enumeration represents the\n * different errors emitted by\n * {@link solace.Session.requestFailedCallback}\n * when a {@link solace.Session#sendRequest} fails.\n *\n * The client application receives a request error with event code\n * {@link solace.RequestEventCode.REQUEST_ABORTED}\n * when the underlying connection is successfully closed, or closed as a result\n * of a communication error.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst RequestEventCode = {\n  /**\n   * A request was aborted because the session is disconnected.\n   */\n  REQUEST_ABORTED: 8,\n  /**\n   * The event represents a timed-out request API call.\n   */\n  REQUEST_TIMEOUT: 9,\n};\n\nmodule.exports.RequestEventCode = Enum.new(RequestEventCode);\n","/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * The base class for all errors thrown by the API.\n * @hideconstructor\n * @extends {Error}\n *\n * @memberof solace\n */\nclass SolaceError extends Error {\n  constructor(type, message, constructor) {\n    super(message || '');\n    /**\n     * Error Message.\n     * @name solace.SolaceError#message\n     * @type {String}\n     */\n    this.message = message; // force set\n    /**\n     * The name of the error.\n     * @name solace.SolaceError#name\n     * @type {String}\n     */\n    this.name = type;\n\n    // ES6 error semantics are disappointing\n    // Cleaner stack capture for V8-based VMs\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, constructor);\n    } else {\n      this.stack = new Error().stack;\n    }\n  }\n\n}\n\nmodule.exports.SolaceError = SolaceError;\n","const { ArrayOperations } = require('./lib/array-operations');\nconst { assert } = require('./lib/assert');\nconst { BidiMap } = require('./lib/bidi-map');\nconst { Enum } = require('./lib/enum');\nconst { Iterator } = require('./lib/iterator');\nconst { Lazy } = require('./lib/lazy');\nconst { makeMap } = require('./lib/make-map');\nconst { Mixin } = require('./lib/mixin');\nconst { Resolver } = require('./lib/resolver');\nconst { SetOperations } = require('./lib/set-operations');\n\nmodule.exports.assert = assert;\nmodule.exports.ArrayOperations = ArrayOperations;\nmodule.exports.BidiMap = BidiMap;\nmodule.exports.Enum = Enum;\nmodule.exports.Iterator = Iterator;\nmodule.exports.Lazy = Lazy;\nmodule.exports.makeIterator = Iterator.makeIterator;\nmodule.exports.makeMap = makeMap;\nmodule.exports.Mixin = Mixin;\nmodule.exports.mixin = Mixin.mixin;\nmodule.exports.Resolver = Resolver;\nmodule.exports.resolve = Resolver.resolve;\nmodule.exports.SetOperations = SetOperations;\n","/* eslint-disable no-nested-ternary */\n\nfunction defaultComparator(a, b) {\n  const astr = String(a);\n  const bstr = String(b);\n  return astr > bstr ? 1 : (astr < bstr ? -1 : 0);\n}\n\nfunction insertOrdered(array, element, comparator = defaultComparator) {\n  const result = [...array];\n  return this.inplaceInsertOrdered(result, element, comparator);\n}\n\nfunction inplaceInsertOrdered(array, element, comparator = defaultComparator) {\n  let index = 0;\n  let min = 0;\n  let max = array.length;\n  // Optimize for empty array\n  if (max > 0) {\n    // Optimize for append\n    if (comparator(element, array[max - 1]) > 0) {\n      index = max;\n    } else {\n      // Binary search\n      index = (min + max) >> 1; // math.floor((min + max) / 2)\n      while (max > min) {\n        if (comparator(element, array[index]) < 0) {\n          max = index;\n        } else {\n          min = index + 1;\n        }\n        index = (min + max) >> 1; // math.floor((min + max) / 2)\n      }\n    }\n  }\n  array.splice(index, 0, element);\n}\n\nmodule.exports = {\n  ArrayOperations: {\n    defaultComparator,\n    insertOrdered,\n    inplaceInsertOrdered,\n  },\n};\n","let assert;\n\n/**\n * Browsers and Node share a common console.assert interface, console.assert(assertion, ...);\n * In Node, console.assert throws AssertionError if its assertion is falsy.\n * In browsers, they print to the console.\n * Extend browser behaviour to also throw.\n */\n\nif (BUILD_ENV.MODE_DEBUG) {\n  let internalAssert;\n  if (BUILD_ENV.TARGET_NODE) {\n    // _eslint-disable-next-line no-console\n    internalAssert = console.assert;\n  } else {\n    internalAssert = function browserAssert(assertion, ...args) {\n      if (!assertion) {\n        throw new Error(`Assertion error: ${typeof assertion} ${assertion} (${args.join(' ')})`);\n      }\n    };\n  }\n  // Now, wrap the assert in a catch and rethrow to give us a single place\n  // to set assert breakpoints.\n  assert = function outerAssert(...args) {\n    // eslint-disable-next-line no-useless-catch\n    try {\n      internalAssert(...args);\n    } catch (e) {\n      // if (BUILD_ENV.MODE_DEBUG) debugger;\n      throw (e);\n    }\n  };\n} else {\n  // In production mode, asserts are generally disabled.\n  assert = () => {};\n}\n\nmodule.exports.assert = assert;\n","/**\n * @private\n */\nclass BidiMap {\n  constructor(...pairs) {\n    this.forward = new Map();\n    this.reverse = new Map();\n    pairs.forEach((p) => {\n      this.setValues(p[0], p[1]);\n    });\n  }\n\n  /**\n   * Sets the key => value and value => key relationships for the supplied parameters.\n   *\n   * Method name is #set, not #put, for alignment with ES map method names.\n   * @param {*} key The key for the forward mapping (value in the reverse mapping)\n   * @param {*} value The value for the forward mapping (key in the reverse mapping)\n   */\n  setValues(key, value) {\n    this.forward.set(key, value);\n    this.reverse.set(value, key);\n  }\n\n}\n\nmodule.exports.BidiMap = BidiMap;\n","function enumName(instance, keys, value) {\n  const matches = keys.filter(k => instance[k] === value);\n  return matches.length ? matches[0] : null;\n}\n\nfunction enumValues(instance, keys) {\n  return Array.from(new Set(keys.map(k => instance[k])));\n}\n\n/**\n * The base for all enumerated types. Provides common functionality such as\n * collections of keys and values, reverse mapping, and readable descriptions. Also\n * supports overriding the canonical key-value mapping to maintain readability in\n * minified environments.\n *\n * @mixin\n * @memberof solace\n */\nclass Enum {\n\n  /**\n   * Creates an Enum with the given key-value mapping.\n   *\n   * @param {Object} values The key-value mapping to use. This mapping is set as the initial\n   * canonical key-value mapping. To override, use {@link solace.Enum#_setCanonical}.\n   */\n  constructor(values) {\n    Object.defineProperties(this, {\n      _canonical: {\n        value:        null,\n        enumerable:   false,\n        writable:     true,\n        configurable: true,\n      },\n    });\n    this._setCanonical(values);\n  }\n\n  /**\n   * Resets the canonical key value mapping for the enumeration. Using this method,\n   * you add additional sets of keys that map to the same values, and specify that\n   * these new keys take precedence for reverse mapping. Any older set of keys is made\n   * non-canonical and non-enumerable.\n   *\n   * @example\n   * const c = new Enum({ HELLO: 'world' });\n   * c._setCanonical({ MAD: 'world' });\n   * c.nameOf('world') === 'MAD'; // true\n   *\n   * @param {Object} values The new key-value mapping to add to the object and set as canonical.\n   * @param {Boolean} final Whether this enumeration should accept further reconfiguration.\n   * @private\n   */\n  _setCanonical(values, final = false) {\n    this._canonical = Object.assign({}, values);\n    Object.keys(this).forEach((key) => {\n      const descriptor = Object.getOwnPropertyDescriptor(this, key);\n      if (descriptor.value !== undefined) {\n        Object.defineProperty(this, key, {\n          enumerable:   false,\n          writable:     true,\n          configurable: true,\n          value:        descriptor.value,\n        });\n      }\n    });\n    Object.keys(values).forEach((key) => {\n      Object.defineProperty(this, key, {\n        enumerable:   true,\n        writable:     !final,\n        configurable: !final,\n        value:        values[key],\n      });\n    });\n  }\n\n  /**\n   * Create a human-readable string describing the given enumeration value. This\n   * result is informational and may vary between SDK versions.\n   *\n   * Currently, it either returns the value provided (if the associated key is\n   * the same), or a string of the form `key (value)`.\n   *\n   * @example\n   * console.log(new Enum({ ANSWER: 42 }).describe(42)); // ANSWER (42)\n   * console.log(new Enum({ ECHO: 'ECHO' })).describe('ECHO'); // ECHO\n   *\n   * @param {any} enumValue The value on which to perform reverse mapping.\n   * @param {String} [noneValue=''] The string to return if the enumeration value is\n   *    undefined or null.\n   * @param {String} [unknownValue='<unknown>'] The string to return if the enumeration\n   *    value was not found in any of the canonical keys.\n   * @returns {String} A human-readable description of the reverse mapping for the value.\n   */\n  describe(enumValue, noneValue = '<none>', unknownValue = '<unknown>') {\n    if (enumValue === null || enumValue === undefined) return noneValue;\n    const name = enumName(this._canonical,\n                          Object.keys(this._canonical || {}),\n                          enumValue)\n                 || unknownValue;\n    return name === enumValue ? name : `${name} (${enumValue})`;\n  }\n\n  /**\n   * Returns the canonical name in this enumeration for the given value. This function is\n   * designed to facilitate reflection, whereas for display\n   *\n   * @param {any} enumValue The value for which to get the enumeration key.\n   * @returns {String} The name for the given value.\n   */\n  nameOf(enumValue) {\n    return enumName(this._canonical, Object.keys(this._canonical || {}), enumValue);\n  }\n\n  /**\n   * Returns all canonical names/keys in this enumeration.\n   *\n   * @readonly\n   * @returns {Array.<String>} All canonical names in this enumeration.\n   */\n  get names() {\n    return Object.keys(this._canonical || {});\n  }\n\n  /**\n   * Returns all values assigned to canonical keys in this enumeration.\n   *\n   * @readonly\n   * @returns {Array} All values defined for enumeration keys.\n   */\n  get values() {\n    return enumValues(this._canonical, Object.keys(this._canonical || {}));\n  }\n\n  /**\n   * A property returning true to faciliate duck-typing with {solace.Enum} objects.\n   *\n   * @readonly\n   * @returns {Boolean} true This is an enumeration.\n   */\n  get isEnum() { // eslint-disable-line class-methods-use-this\n    return true;\n  }\n\n  /**\n   * Returns the name of an enuerated value given the\n   * enumeration and the value.\n   *\n   * @param {Object} instance The enumeration instance.\n   * @param {*} value The value for which to return the key name.\n   * @returns {String} The key name for the given enumeration value.\n   */\n  static nameOf(instance, value) {\n    return instance.nameOf(value);\n  }\n\n  /**\n   * Returns values defined on this enumeration for the given keys. To get the enumeration keys,\n   * use {@link Object#keys}.\n   * @param {Object} instance The enumeration on which to return values.\n   * @returns {Array} The values defined on the given enumeration.\n   **/\n  static values(instance) {\n    return instance.values();\n  }\n\n  /**\n   * Alternate construction method for enumerations.\n   *\n   * @static\n   * @param {Object} values Initial key-value mapping\n   * @returns {solace.Enum} A new enumeration instance\n   * @private\n   */\n  static new(values) {\n    return new Enum(values);\n  }\n\n  /**\n   * Constructs a private enumeration in which the values are equal to the keys.\n   *\n   * @static\n   * @param {Array.<String>} strings Key names. The values will be equal to the keys.\n   * @returns {solace.Enum} An enumeration instance of the given strings\n   * @private\n   */\n  static ofStrings(strings) {\n    const map = {};\n    strings.forEach((s) => {\n      map[s] = s;\n    });\n    return Enum.new(map);\n  }\n\n  /**\n   * Constructs an enumeration in which each key is assigned a distinct integer value.\n   * Enums created this way are subject to renumbering if keys are reordered.\n   *\n   * @static\n   * @param {Array.<String>} keys Key names. The values will be sequential from zero.\n   * @returns {solace.Enum} An enumeration instance of the given values\n   * @private\n   */\n  static ofNumbers(keys) {\n    const map = {};\n    keys.forEach((key, index) => {\n      map[key] = index;\n    });\n    return Enum.new(map);\n  }\n}\n\nmodule.exports.Enum = Enum;\n","/**\n * An object managing a traversal of an Array-like object.\n *\n * @memberof solace\n * @property {function} deref Returns the value the iterator is\n *      referencing.\n * @property {function} incr Increments the iterator's reference in the\n *      iterator's data set.\n * @property {function} end Tests whether the iterator is at the end of\n *      the data set.  This MUST return false when calling deref() or\n *      incr().\n * @private\n */\nclass Iterator {\n\n  /**\n   * Creates an iterator to forward iterate over a specific contiguous\n   * section of an array, specifically in the range [start, end)\n   * @param {Array} arr The array to iterate over\n   * @param {Number} [start=0] The first item the iterator should\n   *  dereference\n   * @param {Number} [end=arr.length] One beyond the last item in the array\n   *  that the iterator should dereference.\n   * @constructor\n   */\n  constructor(arr, start = 0, end = arr.length) {\n    /**\n     * The array being iterated.\n     * @type {Array}\n     * @private\n     */\n    this._arr = arr;\n    /**\n     * The current index of the enumeration.\n     * @private\n     * @type {Number}\n     */\n    this._index = start;\n    /**\n     * The exclusive end index, or the length, of the array.\n     * @type {Number}\n     */\n    this._end = end;\n  }\n\n  /**\n   * Returns the element at the iterator's position.\n   * @returns {Object} The array element at the current position.\n   */\n  deref() {\n    return this._arr[this._index];\n  }\n\n  /**\n   * Increments the iterator.\n   * @returns {Number} The new position of the iterator.\n   */\n  incr() {\n    return ++this._index;\n  }\n\n  /**\n   * Reports whether the iterator has completed its iteration.\n   * @returns {Boolean} True if the iterator has reached the end of the iteration.\n   */\n  end() {\n    return this._index >= this._end;\n  }\n\n  /**\n   * Creates an iterator to forward iterate over a specific contiguous\n   * section of an array, specifically in the range [start, end)\n   *\n   * @param {Array} arr The array to iterate over\n   * @param {Number} [start=0] The first item the iterator should\n   *  dereference\n   * @param {Number} [end=arr.length] One beyond the last item in the array\n   *  that the iterator should dereference.\n   * @returns {solace.Iterator} An iterator to the specified set of data.\n   */\n  static makeIterator(arr, start = 0, end = arr.length) {\n    return new Iterator(arr, start, end);\n  }\n\n}\n\n// Expose both the static constructor function and the class.\nmodule.exports.Iterator = Iterator;\n","const DEFAULT_PROPERTY_OPTIONS = {\n  enumerable: true,\n};\n\nfunction setPropertyValue(target, key, value, options = null) {\n  Object.defineProperty(\n          target,\n          key,\n          Object.assign({ value }, DEFAULT_PROPERTY_OPTIONS, options));\n}\n\n\nfunction lazyProperty(target, key, evalFn) {\n  Object.defineProperty(\n    target,\n    key,\n    Object.assign({\n      configurable: true, // Allow replacing this property with resolved value.\n      get:          () => {\n        // The getter evaluates the function provided.\n        // It replaces itself with the value it resolves.\n        const result = evalFn(target, key);\n        setPropertyValue(target, key, result);\n        return result;\n      },\n      set: (value) => {\n        setPropertyValue(target, key, value);\n      },\n    }, DEFAULT_PROPERTY_OPTIONS));\n  return target;\n}\n\nfunction lazyProperties(target, obj) {\n  Object.keys(obj).forEach((k) => {\n    lazyProperty(target, k, obj[k]);\n  });\n  return obj;\n}\n\nfunction lazyValue(evalFn) {\n  return lazyProperty({}, 'value', evalFn);\n}\n\nconst Lazy = {\n  lazyProperties,\n  lazyProperty,\n  lazyValue,\n};\n\nmodule.exports.Lazy = Lazy;\n","\n// Avoid closure compiler nonsense\nmodule.exports.makeMap = function makeMap(...keyValuePairs) {\n  const result = {};\n  for (let i = 0; i < keyValuePairs.length; i += 2) {\n    result[keyValuePairs[i]] = keyValuePairs[i + 1];\n  }\n  return result;\n};\n","const Mixin = {};\n\n  /**\n   * @param  {Object} target The class to augment\n   * @param  {Object} add The class to mix in.\n   * @returns {Object} The augmented class\n   */\nMixin.mixin = function mixin(target, add) {\n  const targetProto = target.prototype;\n  const addProto = add.prototype;\n  Object.getOwnPropertyNames(addProto).forEach((name) => {\n    if (name === 'constructor') return;\n    Object.defineProperty(targetProto, name, Object.getOwnPropertyDescriptor(addProto, name));\n  });\n  return target;\n};\n\nmodule.exports.Mixin = Mixin;\n","const { Lazy } = require('./lazy');\n\nconst { lazyProperty } = Lazy;\n\nfunction traversePath(commonSource, keySource, pathArr) {\n  return pathArr.reduce((source, value) => {\n    if (typeof value === 'string') {\n      return source[value];\n    }\n    return value;\n  }, keySource);\n}\n\n/**\n * @classdesc\n * Deferred resolution for imports. A heavyweight method of breaking circular dependencies.\n * Each specified key (see below) is resolved once by a function that lazily evaluates a\n * path.\n * <pre>\n * const resolved = new Resolver({\n *  foo: [FooLib, 'fooContainer'],        // Resolves foo from FooLib.fooContainer.foo lazily\n *  bar: ['foo'],                         // Resolves bar from previously defined foo lazily\n *  'baz,quux': [FooLib, 'bazsAndQuuxes'] // baz = FooLib.bazsAndQuuxes.baz,\n *                                        // quux = FooLib.bazsAndQuuxes.quux\n * });\n * </pre>\n * In most cases this is equivalent to using FooLib.fooContainer.foo, et cetera, directly.\n * Prefer that approach unless the dependencies are deeply hierarchical. Prefer the Resolver\n * when one-time evaluation and aliasing a path makes the code more DRY and readable.\n * @private\n */\nclass Resolver {\n  constructor(options, source) {\n    // For every key...\n    Object.keys(options).forEach((compoundKey) => {\n      // Split out key names if multiple were provided\n      compoundKey.split(',').map(k => k.trim()).forEach((key) => {\n        // Build a path array. The key name is the implicit last element.\n        const rawPath = options[compoundKey];\n        const path = typeof rawPath === 'string' ? rawPath.split('.') : rawPath;\n        const pathArr = (Array.isArray(path) ? path : [path]).concat(key);\n        // Create a defer for this key.\n        lazyProperty(this, key, () => traversePath(source, this, pathArr));\n      });\n    });\n  }\n\n  static resolve(options, source) {\n    return new Resolver(options, source);\n  }\n}\n\n\nmodule.exports.Resolver = Resolver;\n","/* eslint-disable no-restricted-syntax */\n\nfunction isSuperset(set, subset) {\n  return Array.from(subset).every(elem => set.has(elem));\n}\n\nfunction inplaceUnion(setA, setB) {\n  setB.forEach((elem) => {\n    setA.add(elem);\n  });\n  return setA;\n}\n\nfunction union(setA, setB) {\n  return inplaceUnion(new Set(setA), setB);\n}\n\nfunction inplaceIntersection(setA, setB) {\n  setA.forEach((elem) => {\n    if (!setB.has(elem)) {\n      setA.delete(elem);\n    }\n  });\n  return setA;\n}\n\nfunction intersection(setA, setB) {\n  return new Set(Array.from(setA).filter(elem => setB.has(elem)));\n}\n\nfunction inplaceDifference(setA, setB) {\n  setB.forEach((elem) => {\n    setA.delete(elem);\n  });\n  return setA;\n}\n\nfunction difference(setA, setB) {\n  return new Set(Array.from(setA).filter(elem => !setB.has(elem)));\n}\n\nmodule.exports = {\n  SetOperations: {\n    inplaceDifference,\n    inplaceIntersection,\n    inplaceUnion,\n    isSuperset,\n    difference,\n    intersection,\n    union,\n  },\n}\n;\n","const { EventEmitter } = require('./lib/event-emitter');\nconst { Timer } = require('./lib/timer');\n\nmodule.exports = {\n  EventEmitter,\n  Timer,\n};\n","const NodeEventEmitter = require('events').EventEmitter;\nconst { ArrayUtils } = require('solclient-util');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_WARN } = require('solclient-log');\n\nconst { flatten, includes } = ArrayUtils;\nconst NODE_DEFAULT_EVENTS = ['error', 'newListener', 'removeListener'];\nconst BLACKLIST_DIRECT = ['newListener', 'removeListener'];\n\nfunction buildFilter(emits) {\n  if (typeof emits === 'function') return k => includes(NODE_DEFAULT_EVENTS, k) || emits(k);\n  if (!Array.isArray(emits)) return null;\n  const emitSet = new Set(flatten(emits));\n  NODE_DEFAULT_EVENTS.forEach(el => emitSet.add(el));\n  const emitArray = Array.from(emitSet);\n  return k => includes(emitArray, k);\n}\n\nconst DISABLED_ACTIONS = {\n  ignore() {},\n  fail() {\n    throw new Error('Emitter disabled');\n  },\n};\n\nclass EventEmitter extends NodeEventEmitter {\n  /**\n   * Creates an instance of EventEmitter.\n   *\n   * An EventEmitter is an object that periodically emits events that cause function objects, known\n   * as listeners, to be called. It exposes functions to attach passed functions to named events.\n   *\n   * Typically, event names are camel-cased strings, but any valid JavaScript property key can be\n   * used.\n   *\n   * @param {?Object} options Options for the emitter\n   * @param {String} [options.direct] An event that is to be directly dispatched when possible.\n   *  Direct dispatch is a performance optimization that minimizes EventEmitter overhead. Direct\n   *  dispatch skips the safe error handling path; use _formatErrorEvent if required.\n   * @param {Array.<string>} [options.emits] Valid event names. If specified, listeners for other\n   *  events are rejected. Array can be nested, e.g. `['foo', ['bar1', 'bar2']]`\n   * @param {Boolean} [options.unsafe] Determines whether dispatch is less exception-safe.\n   *  * When `false`, if an event listener throws an error, the error is thrown all the way back\n   *    to the emitting stack frame. This makes it the emitter's responsibility to catch exceptions\n   *    in listeners. This avoids a try-catch frame and may be more performant.\n   *  * When `true`, if an event listener throws an error, and an `error` listener exists, the\n   *    exception is dispatched to that listener wrapped in an {@link solace.OperationError},\n   *    `subcode={@link solace.ErrorSubcode.CALLBACK_ERROR}`. The originating event and the error\n   *    thrown by the listener are available on `event` and `error` fields respectively.\n   *\n   *  In all cases, throwing an exception in a listener prevents the event being received by\n   *  later listeners.\n   *\n   *  This option does not affect any event selected for `options.direct`, which always uses\n   *  unsafe dispatch.\n   *\n   * @memberof solace\n   * @extends {EventEmitter}\n   * @private\n   */\n  constructor(options) {\n    super();\n    const { direct, emits, unsafe, formatEventName } = options || {};\n    this.formatEventName = formatEventName || (name => name);\n\n    // Direct mode path:\n    //  emit --> (direct emit || bareEmit).\n    const bareEmit = this.emit.bind(this);\n    this._installDirectFilter(direct, bareEmit);\n\n    // Indirect mode path:\n    //  verifier -> error handlers -> emit --> bareEmit\n    this._installErrorHandlers(unsafe);\n    this._installEmitVerifier();\n\n    this._listenerVerificationFilter = buildFilter(emits);\n    this._emits = emits;\n  }\n\n  _installDirectFilter(direct, bareEmit) {\n    if (!direct) return;\n      // Direct mode class instance modifications\n\n    if (includes(BLACKLIST_DIRECT, direct)) {\n      throw new OperationError(\n        `Cannot configure listener collection events [${BLACKLIST_DIRECT.join(', ')}] as direct`,\n        ErrorSubcode.INTERNAL_ERROR);\n    }\n\n    // The default direct emitter is the base emitter. Skip any overrides we installed.\n    this._defaultEmitDirect = (...args) => bareEmit(direct, ...args);\n\n    // Initally not direct for 0 listeners\n    this.emitDirect = this._defaultEmitDirect;\n    this._directEventName = direct;\n\n    this.on = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.on(eventName, listener);\n      this._setEmitDirect(eventName, true, listener);\n      return ret;\n    };\n\n    this.addListener = (eventName, listener) => this.on(eventName, listener);\n\n    this.once = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.once(eventName, listener);\n      this._setEmitDirect(eventName, false);\n      return ret;\n    };\n\n    this.prependListener = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.prependListener(eventName, listener);\n      this._setEmitDirect(eventName, true, listener);\n      return ret;\n    };\n\n    this.prependOnceListener = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.prependOnceListener(eventName, listener);\n      this._setEmitDirect(eventName, false);\n      return ret;\n    };\n\n    this.removeAllListeners = (eventName) => {\n      const ret = super.removeAllListeners(eventName);\n      if ((eventName === this._directEventName) || (eventName === undefined)) {\n        this.emitDirect = this._defaultEmitDirect;\n      }\n      return ret;\n    };\n\n    this.removeListener = (eventName, listener) => {\n      const ret = super.removeListener(eventName, listener);\n      if ((eventName === this._directEventName) && (this.listenerCount(eventName) === 0)) {\n        this.emitDirect = this._defaultEmitDirect;\n      }\n      return ret;\n    };\n\n    this.directListenerCount = () => this.listenerCount(this._directEventName);\n\n    this.setOnFirstDirectListener = (firstDirect) => {\n      this._onFirstDirectListener = firstDirect;\n    };\n  }\n\n  _setEmitDirect(eventName, onListener, listener) {\n    if (eventName !== this._directEventName) {\n      return;\n    }\n\n    if (onListener && (this.directListenerCount() === 1)) {\n      this.emitDirect = listener;\n    } else {\n      this.emitDirect = this._defaultEmitDirect;\n    }\n\n    if ((this.directListenerCount() === 1) && (this._onFirstDirectListener !== undefined)) {\n      this._onFirstDirectListener();\n    }\n  }\n\n  _verifyListenerEvent(event) {\n    if (!this._listenerVerificationFilter) return;\n\n    if (event === undefined || event === null) {\n      this.throwInternal(\n          new OperationError(`Emitter rejects listener for no-name event: ${event}`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n    }\n    if (!this._listenerVerificationFilter(event)) {\n      this.throwInternal(\n        new OperationError(`Emitter rejects listeners for ${event}, emits ${this._emits}`,\n                            ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n    }\n  }\n\n  _installEmitVerifier() {\n    if (BUILD_ENV.MODE_DEBUG) {\n      // Debug mode: always add assert for empty event name\n      const emitBase = this.emit.bind(this);\n      this.emit = (name, ...args) => {\n        if (name === undefined || name === null) {\n          this.throwInternal(new OperationError(`Emitter rejects no-name event: ${name}`));\n        }\n        emitBase(name, ...args);\n      };\n    }\n  }\n\n  _installErrorHandlers(unsafe) {\n    if (unsafe) {\n      // If unsafe, there's no try/catch/emit so throwInternal just throws\n      this.throwInternal = (err) => { throw err; };\n      return;\n    }\n\n    // Install try/catch/emit-as-event if not unsafe mode.\n    // Introduces throwInternal, which sets the _internalError flag restore\n    // orignal throw-to-emitter functionality in case of internal error\n\n    const emitBase = this.emit.bind(this);\n\n    this.throwInternal = function throwInternal(err) {\n      this._internalError = true;\n      throw err;\n    };\n\n    this.emit = (name, ...args) => {\n      try {\n        emitBase(name, ...args);\n      } catch (ex) {\n        if (this._internalError) {\n          this._internalError = undefined;\n          throw ex; // rethrow\n        }\n\n        const err = this.formatErrorEvent(ex, name, ...args);\n        try {\n          LOG_WARN(`Listener for '${err.info.event.formattedName}' threw exception, dispatching to 'error'`);\n          emitBase('error', err);\n        } catch (innerEx) {\n          LOG_WARN(\"Listener for 'error' threw exception:\", innerEx, '\\nOriginal exception:', ex);\n        }\n      }\n    };\n  }\n\n  get isDirect() {\n    return this.emitDirect && (this.emitDirect !== this._defaultEmitDirect);\n  }\n\n  formatErrorEvent(ex, name, ...args) {\n    const formattedName = this.formatEventName(name);\n    return Object.assign(new OperationError(\n      `Unhandled error in event handler for '${formattedName}'`,\n      ErrorSubcode.CALLBACK_ERROR,\n      `On event: ${[name, ...args]} ${ex}`\n    ), {\n      stack: ex.stack,\n      info:  {\n        event: { name, formattedName, args },\n        error: ex,\n      },\n    });\n  }\n\n  disableEmitter() {\n    this._defaultEmitDirect = DISABLED_ACTIONS.ignore;\n    // If this is a direct-enabled emitter, this will also cause emitDirect to be set to\n    // _defaultEmitDirect, which is now DISALBED_ACTIONS.ignore.\n    this.removeAllListeners();\n    this.emit = DISABLED_ACTIONS.ignore;\n    // Freeze listeners by first disabling remove, then add.\n    this.addListener('removeListener', DISABLED_ACTIONS.fail);\n    this.addListener('newListener', DISABLED_ACTIONS.fail);\n  }\n\n}\n\nmodule.exports.EventEmitter = EventEmitter;\n","/**\n * @private\n */\nclass Timer {\n  /**\n   * Creates an instance of Timer.\n   * @param {function} cancel The action to perform on cancellation\n   */\n  constructor(cancel) {\n    this.cancel = () => {\n      this.cancel = () => {}; // change to no-op\n      cancel();\n    };\n  }\n\n  /**\n   * @static\n   * @param {Number} interval The interval for the timer, in milliseconds.\n   * @param {function} onInterval The function to invoke on expiration.\n   * @param {any} [args] Any arguments to pass to the onExpire callback.\n   * @returns {Timer} A new timer object.\n   */\n  static newInterval(interval, onInterval, ...args) {\n    const timerRef = setInterval(onInterval, interval, ...args);\n    return new Timer(() => clearInterval(timerRef));\n  }\n\n  /**\n   * @static\n   * @param {Number} timeout The timeout for the timer, in milliseconds.\n   * @param {function} onExpire The function to invoke on expiration.\n   * @param {any} [args] Any arguments to pass to the onExpire callback.\n   * @returns {Timer} A new timer object.\n   */\n  static newTimeout(timeout, onExpire, ...args) {\n    const timerRef = setTimeout(onExpire, timeout, ...args);\n    return new Timer(() => clearTimeout(timerRef));\n  }\n}\n\nmodule.exports.Timer = Timer;\n","const { FactoryProfile, SolclientFactoryProfiles } = require('./lib/solclient-factory-profiles');\nconst { ProfileBinding } = require('./lib/profile-binding');\nconst { SolclientFactory } = require('./lib/solclient-factory');\nconst { SolclientFactoryProperties } = require('./lib/solclient-factory-properties');\n\nmodule.exports.FactoryProfile = FactoryProfile;\nmodule.exports.ProfileBinding = ProfileBinding;\nmodule.exports.SolclientFactoryProfiles = SolclientFactoryProfiles;\nmodule.exports.SolclientFactoryProperties = SolclientFactoryProperties;\nmodule.exports.SolclientFactory = SolclientFactory;\n\n","const { OperationError } = require('solclient-error');\n\nlet binding = null;\n\nconst ProfileBinding = {\n  get value() {\n    if (binding === null) {\n      throw new OperationError('Profile binding not initialized. Call solace.SolclientFactory.init');\n    }\n    return binding;\n  },\n  set value(value) {\n    // private, so we'll allow it for testing\n    binding = value;\n  },\n};\n\nmodule.exports.ProfileBinding = ProfileBinding;\n","// Preferred configuration for the profile system:\n\n// End user:\n//  opaque profiles, property-style access\n// API implementation:\n//  inherited properties, property-style access\n// A root, forward compatible profile\n// A legacy, backwards compatible profile\n// Feature/milestone profiles that inherit from one of these two configurations\n\n// The lowest-friction way of doing this is using prototype inheritance.\n// Also considered:\n//  getProperty() with child->parent pointers -- mixes string\n//    and property access\n//  ES6 proxies -- not universal and not shimmable\n\n// Necessary to abuse prototype inheritance for static property inheritance:\n/* eslint-disable class-methods-use-this */\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.SolclientFactoryProfiles}.</b>\n *\n * A factory profile determines the default functionality of the API. Profiles are predefined\n * combinations of capabilities that represent a mutually-consistent, valid configuration state\n * for API features.\n *\n * The factory may be initialized exactly once, with a single factory profile.\n *\n * Changing which factory profile is used by {@link solace.SolclientFactory.init} may result in\n * different default property values, validation, function signatures and implementations.\n *\n * Changing the factory profile will not change relationships between API methods. That is,\n * assuming all properties and arguments are explicitly set, an application may call the\n * API with the same values as before to cause the same result, unless explicitly noted.\n *\n * If no profile is specified, the default will provide equivalent functionality to\n * SolclientJS version 7.x. New applications are encouraged to use the\n * {@link solace.SolclientFactoryProfiles.version10_5} profile for the best compatibility with\n * other APIs (excluding 7.x JavaScript APIs).\n *\n * @memberof solace\n * @private\n */\nclass FactoryProfile {\n  /**\n   * Returns whether Guaranteed Messaging is enabled for the API. When `true`,\n   * AD publishing capability is enabled by default.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get guaranteedMessagingEnabled() { return undefined; }\n\n  /**\n   * Returns whether the API will allow Comet (long-held HTTP request) transports\n   * to be used. If this is `true`, transport protocols may fall back to HTTP\n   * if a connection cannot be established with a preferred protocol.\n   *\n   *  * NOTE: Guaranteed Messaging cannot be enabled if Comet is enabled.\n   *\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  get cometEnabled() { return undefined; }\n\n  /**\n   * Returns whether the API performs UTF-8 encoding on user strings where the SMF\n   * spec requires it.\n   *  * When this is `true`, the API will correctly interoperate with other Solace APIs that send\n   *    UTF-8 encoded topics.\n   *  * When this is `false`, the API will interoperate correctly with 7.x and earlier JavaScript\n   *    APIs, that used an arbitrary encoding for such strings.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() { return undefined; }\n\n  /**\n   * Returns whether the API returns BYTEARRAY SDT values as Strings.\n   *\n   * In older versions (before 10.5) of the API,\n   * an SDTField with type BYTEARRAY returned a String from getValue().\n   * Newer versions (since 10.5),\n   * getValue() for the same type returns an actual ByteArray, unless this property is `true`.\n   *\n   *  * When this is `true`, SDTField.getValue() returns a String for a BYTEARRAY.\n   *  * When this is `false`, SDTField.getValue() returns a ByteArray for a BYTEARRAY.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return undefined; }\n\n  [util_inspect_custom]() {\n    return {\n      'guaranteedMessagingEnabled': this.guaranteedMessagingEnabled,\n      'cometEnabled':               this.cometEnabled,\n      'topicUtf8Encode':            this.topicUtf8Encode,\n      'byteArrayAsString':          this.byteArrayAsString,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\n/**\n * The Version 7 profile for SolclientJS. This profile sets factory and session default values\n * that provide SolclientJS 7.x behaviour, and interoperability with SolclientJS 7.x clients.\n *\n * @namespace\n * @type {solace.FactoryProfile}\n * @name version7\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version7Profile extends FactoryProfile {\n  /**\n   * Returns `false`: Guaranteed Messaging is disabled by default to maintain availability of Comet\n   * HTTP transports by default.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API. Note that version 7.x SolclientJS\n   * clients cannot send or receive any messages using Guaranteed Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() { return !!BUILD_ENV.TARGET_NODE; }\n\n  /**\n   * Returns true: Comet HTTP transports are enabled for the API. The API user may, by default,\n   * select Comet HTTP transport protocol, and the API may fall back to these protocols during a\n   * connection attempt.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() { return !!BUILD_ENV.TARGET_BROWSER; }\n  /**\n   * Returns false: topic UTF-8 encoding is disabled for the API. The network encoding of topics is\n   * compatible with other SolclientJS 7.x clients, and may not be interoperable with other\n   * Solace Messaging APIs.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() { return false; }\n\n  /**\n   * Returns true: getValue() of SDTFields of type BYTEARRAY return a string,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version7.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return true; }\n}\nconst legacyInstance = new Version7Profile();\n\n/**\n * The Version 10 profile for SolclientJS. This profile sets factory and session default values\n * that provide the full capability of the API as of version 10.0, including interoperability with\n * other Solace Messaging products.\n *\n * @namespace\n * @name version10\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version10Profile extends FactoryProfile {\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API,\n   * with the result that {@link solace.MessagePublisherProperties#enabled} is `true` by default\n   * on platforms that support Guaranteed Messaging publishing.\n   *\n   * Where the {@link solace.TransportType.WS_BINARY} transport is unavailable,\n   * {@link solace.MessagePublisherProperties#enabled} is `false` by\n   * default.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled by default for the API.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() {\n    return true;\n  }\n  /**\n   * Returns `false`: Comet HTTP transports are disabled for the API. The API will not select or\n   * fall back to HTTP Comet transport protocols, which are mutually exclusive of Guaranteed\n   * Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() {\n    return false;\n  }\n  /**\n   * Returns `true`: the API will encode topics for interoperability with other Solace Messaging\n   * products. SolclientJS 7.x clients may fail to correctly decode when topic names that include\n   * multi-byte UTF-8 code points.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() {\n    return true;\n  }\n\n  /**\n   * Returns true: getValue() of SDTFields of type BYTEARRAY return a string,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version10.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return true; }\n}\n\nconst v10Instance = new Version10Profile();\n\n/**\n * The Version 10.5 profile for SolclientJS. This profile sets factory and session default values\n * that provide the full capability of the API as of version 10.5, including interoperability with\n * other Solace Messaging products.\n *\n * @namespace\n * @name version10_5\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version105Profile extends FactoryProfile {\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API,\n   * with the result that {@link solace.MessagePublisherProperties#enabled} is `true` by default\n   * on platforms that support Guaranteed Messaging publishing.\n   *\n   * Where the {@link solace.TransportType.WS_BINARY} transport is unavailable,\n   * {@link solace.MessagePublisherProperties#enabled} is `false` by\n   * default.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled by default for the API.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() {\n    return true;\n  }\n  /**\n   * Returns `false`: Comet HTTP transports are disabled for the API. The API will not select or\n   * fall back to HTTP Comet transport protocols, which are mutually exclusive of Guaranteed\n   * Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() {\n    return false;\n  }\n  /**\n   * Returns `true`: the API will encode topics for interoperability with other Solace Messaging\n   * products. SolclientJS 7.x clients may fail to correctly decode when topic names that include\n   * multi-byte UTF-8 code points.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() {\n    return true;\n  }\n\n  /**\n   * Returns false: getValue() of SDTFields of type BYTEARRAY return a Uint8Array,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return false; }\n}\n\n\nconst forwardInstance = new Version105Profile();\n\n/**\n * The collection of predefined factory profiles available for application use.\n *\n * See each member for a description of its configuration.\n *\n * @namespace\n * @memberof solace\n * @FactoryProfile\n */\nconst SolclientFactoryProfiles = {\n  _legacy:  legacyInstance,\n  _v10:     v10Instance,\n  _forward: forwardInstance,\n  _default: legacyInstance,\n\n  /**\n   * The version 7 profile for browsers. {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * The version 7 profile configures API defaults for interoperability with the\n   * SolclientJS 7.x API, and applications that use it.\n   *\n   * {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * @name version7\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  /**\n   * The version 7 profile for Node.JS. {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * A version 7 profile configures API defaults for interoperability with the\n   * SolclientJS 7.x API, and applications that use it.\n   *\n   * {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * @name version7\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  version7: legacyInstance,\n\n  /**\n   * The version 10 profile for Node.JS.\n   *\n   * The version 10 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   * It provides a backwards-compatibility mode for existing applications\n   * expecting SDTField.getValue() to return a string for BYTEARRAYs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10}\n   *\n   * @name version10\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  /**\n   * The version 10 profile for browsers.\n   *\n   * The version 10 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   * It provides a backwards-compatibility mode for existing applications\n   * expecting SDTField.getValue() to return a string for BYTEARRAYs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10}\n   *\n   * @name version10\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  version10: v10Instance,\n\n  /**\n   * The version 10.5 profile for browsers.\n   *\n   * The version 10.5 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10_5}\n   *\n   * @name version10_5\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  /**\n   * The version 10.5 profile for Node.JS.\n   *\n   * The version 10.5 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10_5}\n   *\n   * @name version10_5\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  version10_5: forwardInstance,\n\n  [util_inspect_custom]() {\n    return {\n      'version7':    this.version7,\n      'version10':   this.version10,\n      'version10_5': this.version10_5,\n    };\n  },\n\n  toString() {\n    return util_inspect(this);\n  },\n};\n\nmodule.exports.FactoryProfile = FactoryProfile;\nmodule.exports.SolclientFactoryProfiles = SolclientFactoryProfiles;\n","const { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\n\nfunction getDefaultLogLevel() {\n  // break dependency loop\n  // eslint-disable-next-line global-require\n  const { LogLevel } = require('solclient-log');\n  return LogLevel.INFO;\n}\n\n/**\n * @classdesc\n * Properties used during initialization of {@link solace.SolclientFactory}.\n *\n * @memberof solace\n */\nclass SolclientFactoryProperties extends APIProperties {\n  /**\n   * Creates an instance of SolclientFactoryProperties.\n   *\n   * @param {Object} [options] The property names and values to apply to this instance\n   * @param {solace.LogLevel} [options.logLevel]  logLevel (default={@link solace.LogLevel.INFO}\n   * @param {solace.LogImpl} [options.logger]     log implementation (default=NULL)\n   * @param {solace.SolclientFactoryProfiles} [options.profile] Javascript profile\n   *  (default={@link solace.SolclientFactoryProfiles.version7})\n   * @memberOf SolclientFactoryProperties\n   */\n  constructor(options) {\n    super({\n      logLevel: getDefaultLogLevel(),\n      logger:   null,\n    }, options);\n  }\n\n  /**\n   * The factory profile to use. The following factory profiles are available:\n   * * {@link solace.SolclientFactoryProfiles.version7}, a backwards-compatible profile\n   *      for existing solClientJS 7.x applications\n   * * {@link solace.SolclientFactoryProfiles.version10}, the recommended profile\n   *      for new applications\n   *\n   * @type {solace.SolclientFactoryProfiles}\n   */\n  get profile() {\n    return this._profile;\n  }\n  set profile(profile) {\n    this._profile = profile;\n  }\n\n  /**\n   * The logging level to use for filtering log events. Messages with a level of lesser importance\n   * than this will be filtered out and not logged.\n   * @type {solace.LogLevel}\n   */\n  get logLevel() {\n    return Check.number(this._logLevel) ? this._logLevel : getDefaultLogLevel();\n  }\n  set logLevel(val) {\n    this._logLevel = val;\n  }\n\n  /**\n   * The logging implementation to use. In the debug API, the log implementation will be called\n   * for every log statement not filtered out by the log level. If no implementation is supplied,\n   * the default implementation will be used, which logs to the global console object.\n   * @type {solace.LogImpl}\n   */\n  get logger() {\n    return this._logger || null;\n  }\n  set logger(val) {\n    this._logger = val;\n  }\n\n  [util_inspect_custom]() {\n    // break dependency loop\n    // eslint-disable-next-line global-require\n    const { LogLevel } = require('solclient-log');\n    return {\n      'logLevel': LogLevel.describe(this._logLevel),\n      'profile':  this._profile,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.SolclientFactoryProperties = SolclientFactoryProperties;\n","const {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst { FactoryProfile, SolclientFactoryProfiles } = require('./solclient-factory-profiles');\nconst { Parameter } = require('solclient-validate');\nconst { ProfileBinding } = require('./profile-binding');\nconst { SolclientFactoryProperties } = require('./solclient-factory-properties');\n\nconst factoryState = {\n  initializeCount: 0,\n  initializers:    [],\n};\n/**\n * @global\n * @name solClientJS\n * @description\n * <b>solClientJS</b> is a full functioned Solace Messaging API written entirely in JavaScript.\n * Applications using the <i>solClientJS</i> API can access all the features of a\n * Solace Message Router.\n *\n * The API is intended for use by applications written in JavaScript, targetting\n * either <b>NODE</b> or a traditional web browser.\n *\n * All classes, objects, methods of the API are encapsulated in the {@link solace} namespace.\n * The starting point for all applications is {@link solace.SolclientFactory}. This factory object\n * generates the {@link solace.Session} for connecting to the Solace Message Router.\n * {@link solace.SolclientFactory} also generates the {@link solace.Message} object\n * which enncapsulates the messages and {@link solace.Destination} the application will use\n * to send and receive data.\n * @summary The Solace Message Router Messaging API for Javascript.\n * @importTypeDefinitions import {EventEmitter} from 'events';\n * @importTypeDefinitions import {Long} from 'long';\n */\n\n/**\n * A singleton used as the main factory for the messaging APIs. The very first operation by\n * any application must be to initialize the API:\n * * {@link solace.SolclientFactory.init}\n *\n * <i>SolclientFactory</i> provides methods to construct:\n * * {@link solace.Session}\n * * {@link solace.Message}\n * * {@link solace.Destination}\n *\n * Additionally <i>SolclientFactory</i> manages the\n * logging level in the API.\n * @namespace\n * @public\n * @memberof solace\n */\nconst SolclientFactory = {\n\n  /**\n   * Adds a function to be called on factory initialization\n   * @param {function(factoryProps, factoryState)} func initializer function to be called\n   * @internal\n   */\n  addInitializer(func) {\n    factoryState.initializers.push(func);\n  },\n\n  /**\n   * @param {function} func function to wrap\n   * @returns {function} new factory method\n   * @internal\n   */\n  createFactory(func) {\n    return function factoryMethod(...args) {\n      if (factoryState.initializeCount === 0) {\n        throw new OperationError('SolclientFactory not initialized', ErrorSubcode.INVALID_OPERATION);\n      }\n      return func(...args);\n    };\n  },\n\n  /**\n   * Initialize global properties. This function must be called before any other API call is made.\n   *\n   * Note: After the first call to this method, subsequent calls have no effect.\n   *\n   * @param {solace.SolclientFactoryProperties} [factoryProps] The initialization properties for\n   *  the factory, if required.\n   * @param {solace.LogImpl} [factoryProps.logger] A logging implementation\n   * @param {solace.LogLevel}[factoryProps.logLevel] The logging level to use\n   *  for filtering log events.\n   * @param {solace.SolclientFactoryProfiles}\n   *  [factoryProps.profile=solace.SolclientFactoryProfiles.version7]\n   *     The factory profile. This class cannot be created by an API user; choose one of the static\n   *     instances from {@link solace.SolclientFactoryProfiles}.\n   * @throws {solace.OperationError} Invalid logger implementation\n   * @returns {solace.SolclientFactory} For method chaining\n   */\n  init(factoryProps) {\n    if (factoryState.initializeCount > 0) {\n      return this;\n    }\n\n    const props = new SolclientFactoryProperties(factoryProps);\n    const profile = factoryProps && factoryProps.profile || SolclientFactoryProfiles.version7;\n    Parameter.isInstanceOf('factoryProps.profile', profile, FactoryProfile);\n    ProfileBinding.value = profile;\n\n    factoryState.initializers.forEach((initializer) => {\n      initializer.call(this, props, factoryState);\n    });\n    ++factoryState.initializeCount;\n\n    if ((factoryProps !== undefined) && (factoryProps !== null)) {\n      // Factory should not depend on other packages at file scope\n      // eslint-disable-next-line global-require\n      const { LOG_DEBUG } = require('solclient-log');\n      LOG_DEBUG('Factory properties:\\n', factoryProps);\n    }\n    return this;\n  },\n\n  /**\n   * @private\n   */\n  reset() {\n    factoryState.initializeCount = 0;\n  },\n\n\n  /**\n   * @returns {Number} Count of factory initializations.\n   *    Nonzero means cannot be initialized again.\n   * @internal\n   */\n  _getInitializeCount() {\n    return factoryState.initializeCount;\n  },\n\n  /**\n   * @private\n   * @name solace.SolclientFactory.profiles\n   * @type {solace.SolclientFactoryProfiles}\n   * @readonly\n   * @description The collection of {@link solace.FactoryProfile}. See a description of\n   * each in {@link solace.SolclientFactoryProfiles}.\n   */\n  get profiles() {\n    return SolclientFactoryProfiles;\n  },\n};\n\nmodule.exports.SolclientFactory = SolclientFactory;\n","const { Flow } = require('./lib/flow');\nconst { FlowOperation } = require('./lib/flow-operation');\nconst { PrivateFlowEventName } = require('./lib/private-flow-event-names');\n\nmodule.exports.Flow = Flow;\nmodule.exports.FlowOperation = FlowOperation;\nmodule.exports.PrivateFlowEventName = PrivateFlowEventName;\n","const { Enum } = require('solclient-eskit');\n\nconst FlowOperation = {\n  CONNECT:         'FlowOperation_CONNECT',\n  DISCONNECT:      'FlowOperation_DISCONNECT',\n  START:           'FlowOperation_START',\n  STOP:            'FlowOperation_STOP',\n  DISPOSE:         'FlowOperation_DESTROY',\n  GET_STATS:       'FlowOperation_GET_STATS',\n  RESET_STATS:     'FlowOperation_RESET_STATS',\n  GET_PROPERTIES:  'FlowOperation_GET_PROPERTIES',\n  GET_DESTINATION: 'FlowOperation_GET_DESTINATION',\n};\n\nmodule.exports.FlowOperation = Enum.new(FlowOperation);\n","const {\n  ErrorSubcode,\n  NotImplementedError,\n  OperationError,\n} = require('solclient-error');\nconst { EventEmitter } = require('solclient-events');\nconst { FlowOperation } = require('./flow-operation');\nconst { LogFormatter } = require('solclient-log');\nconst { PrivateFlowEventName } = require('./private-flow-event-names');\nconst { Stats } = require('solclient-stats');\n\n// Unless flow is disposed, these operations are always allowed\nconst ALWAYS_OPS = [\n  FlowOperation.DISPOSE,\n  FlowOperation.GET_STATS,\n  FlowOperation.GET_PROPERTIES,\n  FlowOperation.RESET_STATS,\n];\n\n\n/**\n * @classdesc Flow\n * * <b>This class is not exposed for construction by API users.</b>\n * A Flow is an abstract base class. A Flow represents a guaranteed message connection to the\n * Solace Message Router. There may be many Guaranteed Message\n * Consumers on a {@link solace.Session}, each\n * instantiated as a {@link solace.MessageConsumer}.\n * @memberof solace\n * @extends {solace.EventEmitter}\n * @private\n */\nclass Flow extends EventEmitter {\n\n  /**\n   * Creates a Flow instance.\n   * @constructor Flow\n   * @param {APIProperties} flowProperties The properties object for this flow.\n   * @param {Object} sessionInterfaceFactory Function that creates session interface methods\n   * @param {Object} [emitterOptions] The options to pass to the EventEmitter constructor.\n   * @private\n   */\n  constructor(flowProperties, sessionInterfaceFactory, emitterOptions) {\n    const emitterOptionsFull = Object.assign({}, emitterOptions);\n    emitterOptionsFull.emits = (emitterOptionsFull.emits || []).concat(\n      PrivateFlowEventName.values\n    );\n    super(emitterOptionsFull);\n    const sessionInterface = sessionInterfaceFactory(this);\n    const self = this;\n    this.logger = new LogFormatter((...args) =>\n      [`[session=${sessionInterface.sessionIdHex}]`, `[flow=${self.flowIdDec}]`, ...args]);\n    this.log = this.logger.wrap(this.log, this);\n    // dispose() was called on this flow.\n    // It is not always executed immediately, leaving time for the auto-ack.\n    this._disposing = false;\n    // The flow truly was destroyed, no more delays.\n    this._disposed = false;\n    this._userDisconnected = true;\n    this._properties = flowProperties;\n    this._sessionInterface = sessionInterface;\n    this._stats = new Stats(sessionInterface);\n    this._privateEventEmitter = new EventEmitter(emitterOptionsFull);\n  }\n\n  // Private event emitter functions, hidden from the public interface.\n  _emit(type, ...args) {\n    this._privateEventEmitter.emit(type, ...args);\n    this.emit(type, ...args);\n  }\n  _on(type, listener) {\n    this._privateEventEmitter.on(type, listener);\n  }\n  _once(type, listener) {\n    this._privateEventEmitter.once(type, listener);\n  }\n  _removeListener(type, listener) {\n    this._privateEventEmitter.removeListener(type, listener);\n  }\n\n  /**\n   * Clears all statistics for this Guaranteed Message Connection. All previous Guaranteed\n   * Message Connection statistics are lost\n   * when this is called.\n   * @throws {solace.OperationError}\n   *  * if the Message Consumer is disposed. subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  clearStats() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Clearing stats');\n    this._operationCheck(FlowOperation.RESET_STATS);\n    this._stats.resetStats();\n  }\n\n  /**\n   * Establish a Guaranteed Messaging connection.\n   * The Messge Consumer may immediately begin emitting events. The application is expected to\n   * add listeners for events on this Message Consumer before calling this method.\n   */\n  connect() {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Connecting');\n    this.userDisconnected = false;\n    this._operationCheck(FlowOperation.CONNECT);\n  }\n\n  /**\n   * Disposes the Guaranteed Message connection, removing all listeners and releasing references.\n   */\n  dispose() {\n    const { LOG_TRACE, LOG_DEBUG } = this.logger;\n    // The session may dispose the publisher or consumer, so be tolerant of\n    // multiple attempts to do so.\n    if (this._disposed || this._disposing) {\n      LOG_TRACE('Ignoring #dispose on disposed Guaranteed Message connection');\n      return;\n    }\n    LOG_TRACE('Disposing');\n\n    this._operationCheck(FlowOperation.DISPOSE);\n\n    this._disposing = true;\n\n    const terminate = () => {\n      this._disposed = true;\n      this._properties = null;\n      this._userDisconnected = true;\n      this._emit(this.getDisposedEvent());\n      this.disableEmitter();\n      this._privateEventEmitter.disableEmitter();\n      LOG_DEBUG('Disposed');\n    };\n    if (this._fsm._midDispatch) {\n      // weird case, dispose was called by the user from a message callback:\n      // Guard this in a timeout\n      const terminateWithRunningFSM = () => {\n        this._fsm.terminateFsm();\n        terminate();\n      };\n      //setImmediate(() => terminateWithRunningFSM());\n      setTimeout(() => terminateWithRunningFSM(), 0);\n    } else {\n      // normal case:\n      terminate();\n    }\n  }\n\n  /**\n   * Disconnects the Message Consumer in such a way that it can be reconnected.\n   */\n  disconnect() {\n    this._operationCheck(FlowOperation.DISCONNECT);\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Disconnecting');\n    this.userDisconnected = true;\n  }\n\n  /**\n   *\n   * Begins a disconnect that is not user-initiated.\n   *\n   * Must be overridden.\n   *\n   * @private\n   * @memberof Flow\n   */\n  _disconnectSession() {\n    this._operationCheck(FlowOperation.DISCONNECT);\n  }\n\n  /**\n   * Gets the event to be returned when the Consumer or Publisher is disposed.\n   *\n   * Must be overridden.\n   *\n   * @private\n   * @memberof Flow\n   */\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Abstract method');\n  }\n\n  /**\n   * Creates and returns copy of the properties for this object.\n   * @returns {?} The properties object\n   * @internal\n   */\n  getProperties() {\n    this._operationCheck(FlowOperation.GET_PROPERTIES);\n    return this._properties.clone();\n  }\n\n  /**\n   * Returns a statistic for this Guaranteed Message connection.\n   *\n   * @param {solace.StatType} statType The statistic to return.\n   * @returns {Number} The value for the statistic.\n   */\n  getStat(statType) {\n    this._operationCheck(FlowOperation.GET_STATS);\n    return this._stats.getStat(statType);\n  }\n\n  /**\n   * @param {AdMessage} message The message to be handled by this Consumer or Publisher\n   * @private\n   */\n  handleUncorrelatedControlMessage(message) { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Guaranteed Message Connection does not implement a control message handler', message);\n  }\n\n  /**\n   * @param {StatType} statType The stat to increment\n   * @param {Number} [value] The value to add to the statistic.\n   * @private\n   */\n  incStat(statType, value) {\n    this._stats.incStat(statType, value);\n  }\n\n  /**\n   * @param {any} event The event to be handled by this objects's FSM\n   * @private\n   */\n  processFSMEvent(event) {\n    this._fsm.processEvent(event);\n  }\n\n  /**\n   * @returns {String} An inspection of this object's properties\n   * @private\n   */\n  [util_inspect_custom]() {\n    return {\n      'flowId': this.flowIdDec,\n    };\n  }\n\n  /**\n   * @returns {String} A description of this Guaranteed Message Connection\n   */\n  toString() {\n    return this[util_inspect_custom]();\n  }\n\n  /**\n   * @returns {Boolean} Whether this Publisher or Consumer can be connected.\n   * @readonly\n   * @private\n   */\n  get canAck() {\n    return !this.disposed;\n  }\n\n  /**\n   * Returns true if this Guaranteed Message Consumer was disposed.\n   */\n  get disposed() {\n    return this._disposed;\n  }\n\n  get flowIdDec() {\n    return this.flowId || '(N/A)';\n  }\n\n  /**\n   * @returns {Number} The ID for this flow\n   * @readonly\n   * @private\n   */\n  get flowId() { // eslint-disable-line class-methods-use-this\n    return new NotImplementedError('Flow does not implement ID accessor');\n  }\n\n  /**\n   * @returns {solace.Session} The owning session for this MessageConsumer.\n   * @readonly\n   */\n  get session() {\n    return this._session;\n  }\n\n  get userDisconnected() {\n    return this._userDisconnecte;\n  }\n  set userDisconnected(value) {\n    this._userDisconnected = value;\n  }\n\n  /**\n   * @param {FlowOperation} operation The operation to check\n   * @returns {Boolean} `true` if the operation is allowed.\n   * @throws {@link solace.OperationError} if the operation is not allowed.\n   * @private\n   */\n  _operationCheck(operation) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Checking operation ${FlowOperation.describe(operation)}`);\n    if (this._disposed) {\n      throw new OperationError('Operation is invalid for Message Consumer in disposed state',\n                               ErrorSubcode.INVALID_OPERATION);\n    }\n\n    // Any read-only operation is always valid unless the object was disposed\n    // (which purges properties)\n    if (ALWAYS_OPS.some(v => v === operation)) return true;\n\n    if (operation === FlowOperation.DISCONNECT && this._isDisconnected()) {\n      throw new OperationError(\n        'Operation is invalid for Message Consumer in disconnected state',\n        ErrorSubcode.INVALID_OPERATION\n      );\n    }\n\n    return undefined;\n  }\n\n  _isDisconnected() { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Flow#_isDisconnected not implemented');\n  }\n\n}\n\nmodule.exports.Flow = Flow;\n","const { Enum } = require('solclient-eskit');\n\nconst PrivateFlowEventName = {\n  BIND_WAITING: 'PrivateFlowEventName_bindWaiting',\n};\n\nmodule.exports.PrivateFlowEventName = Enum.new(PrivateFlowEventName);\n","/**\n * @module solace/fsm\n */\n\nconst { FsmEvent } = require('./lib/event');\nconst { State } = require('./lib/state');\nconst { StateMachine } = require('./lib/state-machine');\n\nmodule.exports.FsmEvent = FsmEvent;\nmodule.exports.State = State;\nmodule.exports.StateMachine = StateMachine;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\n\n/**\n * @classdesc\n * This object type represents an entryPoint for a particular FSM state.\n *\n * Note this initial implementation isn't particularly efficient, but it is\n * very simple by making use of two state objects (one just inside of and\n * one just outside of) the state the entryPoint belongs to.  If necessary, we\n * could optimize this if we wish.\n * @extends FsmObject\n * @private\n */\nclass EntryPoint extends FsmObject {\n\n  /**\n  * @constructor\n  * @param {Object} spec The object specifier used to implement the named\n  *      parameter idiom.\n  * @param {fsm.State} spec.state The state that the entryPoint belongs\n  *      to.\n  * @param {String} spec.entryPointName The name of the entryPoint.\n  * @param {fsm.StateContext~reactionCallback} spec.func The reaction\n  *      function for the entryPoint, which defines where to transition to\n  *      after state has been entered.\n  */\n  constructor(spec) {\n    super({ name: spec.entryPointName });\n\n    let innerState;\n    this.impl = this.impl || {};\n    // The outer portion of the entryPoint accepts incoming transitions before\n    // entering the entryPoint's state.  Then the entryPoint's state is\n    // entered through the use of the outerEntryPoint's initial transition.\n    this.impl.outerState = new StateLib.State({\n      name:          `${spec.state.getName()} outerEntryPoint: ${spec.entryPointName}`,\n      parentContext: spec.state.getParent(),\n    }).initial(() => spec.state.transitionTo(innerState));\n\n    // The job of the inner portion of the entryPoint is to follow a\n    // transition as specified by the application's reaction function.\n    innerState = new StateLib.State({\n      name:          `${spec.state.getName()} innerEntryPoint: ${spec.entryPointName}`,\n      parentContext: spec.state,\n    }).initial(spec.func);\n  }\n\n  /**\n   * @returns {fsm.State} The destination state for a transition to the\n   *      EntryPoint.\n   */\n  getDestState() {\n    return this.impl.outerState;\n  }\n}\n\nmodule.exports.EntryPoint = EntryPoint;\n","const { FsmObject } = require('./object');\n\nclass FsmEvent extends FsmObject {\n}\n\nmodule.exports.FsmEvent = FsmEvent;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\n\n/**\n * @classdesc\n * This object type represents an exitPoint for a particular FSM state.\n *\n * Note this initial implementation isn't particularly efficient, but it is\n * very simple by making use of two state objects (one just inside of and\n * one just outside of) the state the exitPoint belongs to.  If necessary, we\n * could optimize this if we wish.\n * @private\n */\nclass ExitPoint extends FsmObject {\n\n  /**\n  * @constructor\n  * @param {Object} spec The object specifier used to implement the named\n  *      parameter idiom.\n  * @param {fsm.State} spec.state The state that the exitPoint belongs\n  *      to.\n  * @param {String} spec.exitPointName The name of the exitPoint.\n  * @param {fsm.StateContext~reactionCallback} spec.func The reaction\n  *      function for the exitPoint, which defines where to transition to\n  *      after state has been exited.\n  */\n  constructor(spec) {\n    super({ name: spec.exitPointName });\n\n    let outerState;\n    // The inner portion of the exitPoint accepts incoming transitions before\n    // exiting the exitPoint's state.  Then the exitPoint's state is exited\n    // through the use of the innerExitPoint's initial transition.\n    this.impl.innerState = new StateLib.State({\n      name:          `${spec.state.getName()} innerExitPoint: ${spec.exitPointName}`,\n      parentContext: spec.state,\n    }).initial(() => spec.state.transitionTo(outerState));\n\n        // The job of the outer portion of the exitPoint is to follow a\n        // transition as specified by the application's reaction function.\n    outerState = new StateLib.State({\n      name:          `${spec.state.getName()} outerExitPoint: ${spec.exitPointName}`,\n      parentContext: spec.state.getParent(),\n    }).initial(spec.func);\n  }\n\n  getDestState() {\n    return this.impl.innerState;\n  }\n}\n\nmodule.exports.ExitPoint = ExitPoint;\n","const { OperationError } = require('solclient-error');\n\n/**\n * @classdesc\n * This is a base class for various FSM-related objects.\n * @private\n */\nclass FsmObject {\n\n  /**\n   * @constructor\n   * @param {Object} spec The object specifier used to implement the named\n   *      parameter idiom.\n   * @param {String} spec.name The name of the object.\n   */\n  constructor(spec) {\n    if (!spec) {\n      throw new OperationError('No spec provided');\n    }\n    if (!spec.name) {\n      throw new OperationError('No name provided for spec');\n    }\n    this.impl = {\n      name: spec.name,\n    };\n  }\n\n  /**\n   * @returns {String} A string representation of the object.\n   */\n  toString() {\n    let extraStringInfo = this.getExtraStringInfo();\n    if (extraStringInfo.length > 0) {\n      extraStringInfo = `; ${extraStringInfo}`;\n    }\n    return `{${this.constructor.name}: ${this.getName()}${extraStringInfo}}`;\n  }\n\n  /**\n   * This is overridden by classes wanting to add more data, typically in the\n   * form of 'name: value; name: value'.\n   * @returns {String} Extra string information to be included in the object's\n   *      toString() output.\n   */\n  getExtraStringInfo() { // eslint-disable-line class-methods-use-this\n    return '';\n  }\n\n  /**\n   * @returns {?String} The name passed into the object specifier.\n   */\n  getName() {\n    return this.impl.name;\n  }\n\n}\n\nmodule.exports.FsmObject = FsmObject;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\nconst { Iterator } = require('solclient-eskit');\nconst { LOG_TRACE } = require('solclient-log');\n\nconst { makeIterator } = Iterator;\n\n/**\n * React to an event.\n * @callback StateContext.reactionCallback\n * @param {FsmEvent} event The event to react to.\n * @returns {StateContext.ReactionResult} One of the many possible\n *      reaction results that can be created by one of the following methods:\n *          - {@link StateContext#transitionTo}\n *          - {@link FsmState#internalTransition}\n *          - {@link FsmState#externalTransitionTo}\n *          - {@link FsmState#terminate}\n *          - {@link FsmState#eventUnhandled}\n */\n\n\n/**\n * @classdesc\n * This abstract class can host one or more states.  Concrete examples would\n * be a state, which can host one or more inner states, or a state machine,\n * which would typically have multiple top-level states.  It also serves as a\n * context in which transitions can occur.\n * @memberof solace\n * @private\n */\nclass StateContext extends FsmObject {\n  /**\n   * @constructor\n   * @param {Object} spec Object specifier used to implement the named parameter\n   *  idiom.\n   * @param {String} spec.name The name of the context.\n   */\n  constructor(spec) {\n    super(spec);\n    this.impl = this.impl || {};\n    this.impl.logPadding = '';\n  }\n\n  /**\n   * Gets the state-machine that hosts this state context.\n   * @returns {StateMachine} The FSM that hosts this context.\n   */\n  getStateMachine() {\n    return this.impl.ancestorList[0];\n  }\n\n  /**\n   * Sets the initial reaction for the state context.\n   * @param {StateContext.reactionCallback} func The reaction callback to be\n   *      called after the state is entered as the deepest state of a\n   *      transition, or for a state machine when it is started.\n   * @returns {StateContext} The object this function was called on\n   */\n  initial(func) {\n    if (this.impl.initialReaction) {\n      this.log(`Replacing ${this} initialReaction ${this.impl.initialReaction} with ${func}`);\n    }\n    this.impl.initialReaction = func.bind(this);\n    return this;\n  }\n\n  /**\n   * This is used for 'local' transitions.  However, we extend the formal\n   * definition of local transitions here.  The formal definition is that\n   * the dest state is within the src state, and the src state is not\n   * exited.  We extend this definition to include states where the src\n   * state is within dest. In this case, a local transition means that dest\n   * will not be exited and entered and the transition will occur in the\n   * context of dest before executing dest's initial transition.  Note that\n   * this definition of local transition matches that of\n   * {@link https://en.wikipedia.org/wiki/UML_state_machine#Local_versus_external_transitions|Wikipedia}.\n   * But it does not match figure 14.34 or section 14.5.12 of the\n   * {@link http://www.omg.org/spec/UML/2.5/PDF/|Formal UML Specification v2.5}.\n   * Nevertheless, it does seem helpful to be able to express a transition\n   * that does leave the destination state vs. a transition that does not.\n   *\n   * If neither the source nor the dest states are within the other, the\n   * behaviour is the same as an external transition -- src is always exited\n   * and dest is always entered.\n   *\n   * This is included in the StateContext instead of within the State itself\n   * since this can be used by the initial reaction for a state machine.\n   *\n   * @param {State} state The state to transition to.\n   * @param {StateContext.actionCallback} [action] Optional The action to perform as\n   *      part of the transition, if desired.\n   * @returns {StateContext.ReactionResult} the result object used\n   *      internally for further processing of the event.\n   */\n  transitionTo(state, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state,\n      action,\n    });\n  }\n\n  /**\n   * Used to terminate the FSM.\n   * @param {StateContext.actionCallback} action An optional action to\n   *      take within the FSM context after all states have been exited.\n   * @returns {StateContext.ReactionResult} The reaction result for the termination.\n   */\n  terminate(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getFinalState(),\n      action,\n    });\n  }\n\n  /**\n   * A callback to execute an action as part of a transition in the\n   * appropriate context.\n   *\n   * To be used only by the FSM infrastructure or unit tests.\n   *\n   * @callback StateContext.actionCallback\n   * @param {StateContext} context The context within which the action is\n   *      executed.  When the active state changes, this is done after\n   *      states are exited and before states are entered.  It is the\n   *      deepest context that contains the last exited and first entered\n   *      state as part of the transition.\n   * @param {FsmEvent} event The event that triggered the transition.\n   * @returns {Array.<StateContext>} The context's ancestor list.\n   * @protected\n   */\n  getAncestorList() {\n    return this.impl.ancestorList;\n  }\n\n  /**\n   * Perform a debug log with appropriate padding for the context.  The padding\n   * helps to visualize the level within the hierarchical state machine.\n   * @protected\n   */\n  log(...args) {\n    LOG_TRACE(this.impl.logPadding, ...args);\n  }\n\n  /**\n   * Called when the initial transition for the context needs to be taken.\n   * @param {FsmEvent} [event] The event causing this transition; undefined for the\n   *      FSM's initial transition.\n   * @returns {StateContext.ReactionResult} the result to be processed by\n   *      the FSM infrastructure.\n   * @protected\n   */\n  onInitial(event) {\n    let result;\n\n    if (this.impl.initialReaction) {\n      this.log(`Initial: for ${this}`);\n      result = this.impl.initialReaction(event);\n      if (result.external) {\n        throw new Error(`Initial reaction for ${this} returned external transitions`);\n      }\n      return result;\n    }\n\n    if (!(this instanceof (StateLib.State))) {\n      throw new Error(`Missing initial reaction for ${this}`);\n    }\n\n    // If there is no initial reaction, then we just enter this state.\n    // Technically this is a malformed FSM if there are inner states and\n    // this state has no initial reaction.  We won't police this since it\n    // isn't easily done with the data we are otherwise maintaining (we only\n    // know about parent states, not children), and such a problem would be\n    // easily caught by testing of the FSM.\n    return this.transitionTo(this);\n  }\n\n  /**\n   * After a reaction function has been called, this function processes the\n   * returned {@link StateContext.ReactionResult}.\n   * @param {StateContext.ReactionResult} result The result of a reaction.\n   * @param {FsmEvent|undefined} e The event that triggered the reaction;\n   *      undefined if this was due to the initial reaction.\n   * @returns {State} The active state of the FSM after the ReactionResult was\n   *      processed.\n   * @protected\n   */\n  processReactionResult(result, e) {\n    let curContext = this;\n\n    if (!result.destState) {\n      return this;\n    }\n\n    const destStateIter = this.lowestCommonAncestor(result);\n\n    // exit states until we get to the LCA\n    while (curContext !== destStateIter.deref()) {\n      curContext.onExit();\n      curContext = curContext.getParent();\n    }\n\n    // perform the transition\n    if (result.action) {\n      result.action(curContext, e);\n    }\n\n    curContext.log(`Action: transition to ${result.destState} in context ${curContext}`);\n\n    // Start by incrementing the iterator so we don't enter the\n    // context, which we are already in.  Then enter remaining states\n    // in the list.\n    for (destStateIter.incr(); !destStateIter.end(); destStateIter.incr()) {\n      curContext = destStateIter.deref();\n      curContext.onEntry();\n    }\n\n    // execute the initial transition in the destState.\n    const destInitial = curContext.onInitial(e);\n    if (destInitial.destState !== curContext) {\n      return curContext.processReactionResult(destInitial, e);\n    }\n    return curContext;\n  }\n\n  /**\n   * For a given reactionResult, this function returns an iterator to the\n   * context in which to process a transition from 'self' to\n   * 'reactionResult.destState'.  Advancing the iterator provides the states\n   * that need to be entered after the transition is processed.\n   * @param {ReactionResult} reactionResult An object created with one of the\n   *                                        reaction result methods defined in\n   *                                        either a state context or a state.\n   * @returns {Iterator} The iterator where the first element is the\n   * context in which to execute the transaction, and subsequent elements are\n   * to be entered after executing the transaction.\n   * @protected\n   */\n  lowestCommonAncestor(reactionResult) {\n    const ancestorList = this.impl.ancestorList;\n    const destAncestorList = reactionResult.destState.getAncestorList();\n    let i;\n\n    // Make sure the states belong to the same state machine\n    if (ancestorList[0] !== destAncestorList[0]) {\n      throw new Error(`No common ancestor between (${this} in ${ancestorList[0]}) and (${reactionResult.destState} in ${destAncestorList[0]})`);\n    }\n\n    // Optimize case where the two states are the same.  This would be the\n    // case for internal and self-transitions.\n    if (this === reactionResult.destState) {\n      i = ancestorList.length;\n      if (reactionResult.external) {\n        // self-transition, must exit then re-enter state.  Therefore,\n        // the context is our parent.\n        --i;\n      }\n    } else {\n      for (i = 1; i < ancestorList.length; ++i) {\n        if (ancestorList[i] !== destAncestorList[i]) {\n          break;\n        }\n      }\n\n      // Check if one state is within the other state.\n      if ((i === ancestorList.length) || (i === destAncestorList.length)) {\n        // One state within the other. Check whether this is a local\n        // or an external transition.\n        if (reactionResult.external) {\n          --i;    // Need to exit/re-enter the outermost state\n        }\n      }\n    }\n\n    // Here 'i' points to the first state to be entered after executing the\n    // transition.  We make the iterator with 'i-1' so that the first element\n    // is the context within which to execute the transition.\n    return makeIterator(destAncestorList, i - 1);\n  }\n\n  setLogPadding(padding) {\n    this.impl.logPadding = padding;\n  }\n}\n\n/**\n * @classdesc\n * A ReactionResult is suitable as a return value from a reaction function\n * or an initial reaction.\n * @private\n */\nStateContext.ReactionResult = class {\n  /**\n   * The ReactionResult constructor should never be invoked by users of the\n   * infrastructure. It should only be used by various public methods of\n   * StateContext or State, which return a ReactionResult.\n   *\n   * @param {Object} spec Defined according to members described below for\n   *      events that are handled by the reaction function; undefined if the\n   *      event was not handled by the reaction function.  For initial\n   *      reactions, spec must NOT be undefined.\n   * @param {StateContext} spec.caller The state context from which\n   *      {StateContext.ReactionResult} is being constructed.\n   * @param {State} spec.destState The destination state to\n   *      transition to.\n   * @param {StateContext.actionCallback} [spec.action] The function to call in\n   *      the transition context after the appropriate states have been\n   *      exited, if desired; undefined if no action is to be performed as a\n   *      result of the transition.\n   * @param {Boolean} spec.external True if the transition is an external\n   *      transition; false or undefined otherwise.\n   * @constructor\n   */\n  constructor(spec) {\n    if (!spec || !spec.caller || !(spec.caller instanceof StateContext)) {\n      throw new Error('spec.caller is required to be a StateContext');\n    }\n\n    if (!spec.caller.getStateMachine().isRunning()) {\n      throw new Error('ReactionResult objects can only be created while processing events');\n    }\n    if (spec.destState) {\n      if (!(spec.destState instanceof StateLib.State)) {\n        throw new Error('destState must be a State object');\n      }\n      if (spec.action && (typeof (spec.action) !== 'function')) {\n        throw new Error('action must be a function');\n      }\n      this.destState = spec.destState;\n      this.action = spec.action;\n      this.external = spec.external;\n    }\n  }\n};\n\nmodule.exports.StateContext = StateContext;\n","const { LOG_ERROR } = require('solclient-log');\nconst { State } = require('./state');\nconst { StateContext } = require('./state-context');\n\n/**\n * @classdesc\n * This is a state machine that can host states.  States themselves can also\n * host inner states in a hierarchical manner.  This class also provides the\n * basic interface for manipulating the current state via processing of\n * events, and querying the current state through 'getActiveState' methods.\n *\n * @private\n * @memberof solace\n */\nclass StateMachine extends StateContext {\n  /**\n   * @constructor\n   *\n   * @param {Object} spec The object specifier for the FSM.\n   * @param {String} spec.name The name of the FSM, used in debug logs.\n   */\n  constructor(spec) {\n    if (spec.parentContext) {\n      throw new Error(`State machine cannot have parent state: ${spec.parentContext}`);\n    }\n    super(spec);\n    this.impl.ancestorList = [this];\n    this.impl.eventQueue = [];\n    this.impl.finalState = new State({ name: 'impl.final', parentContext: this });\n    this.impl.handleUncaughtException = (ev, exc) => {\n      LOG_ERROR(`Uncaught exception in ${this} while processing ${ev}: ${exc.stack}`);\n      return this.terminate();\n    };\n  }\n\n  /**\n   * This method enqueues the given function, and begins execution of queued functions if\n   * they aren't already executing.\n   * @param {Function} func The function to enqueue and execute.\n   * @returns {Boolean} `true` if the supplied function has completed; false if it was deferred.\n   */\n  process(func) {\n    const { impl } = this;\n    const { eventQueue } = impl;\n\n    eventQueue.push(func);\n    if (impl.processingEvents) {\n      return false;\n    }\n    impl.processingEvents = true;\n\n    while (eventQueue.length) {\n      const evt = eventQueue.shift();\n      evt.apply(this);\n    }\n\n    impl.processingEvents = false;\n    this._onEventCompletion();\n    return true;\n  }\n\n  /**\n   * This method starts a state machine after it has been created and states\n   * have been associated and configured any time getCurrentState() returns\n   * undefined.  This would be after initial creation and after the state\n   * machine has terminated (i.e. transitioned to the final state).\n   */\n  start() {\n    if (this.getCurrentState()) {\n      throw new Error(`Cannot start ${this.getName()}; it is already started.`);\n    }\n\n    this.process(() => {\n      const result = this.onInitial();\n\n      // A state machine's onInitial must specify a destState, the state\n      // cannot be the state machine itself, and the state must have the\n      // state machine as the top ancestor.\n      if (result.destState === undefined) {\n        throw new Error(`Missing destination state from initial transition for ${this}`);\n      }\n\n      if (result.destState === this) {\n        throw new Error(`Destination state for initial transition for ${this} cannot be the FSM.`);\n      }\n\n      const destAncestorList = result.destState.getAncestorList();\n      if (destAncestorList[0] !== this) {\n        throw new Error(`Invalid destination state (${result.destState\n          }) from initial transition for state machine (${this\n          }); destState ancestor (${destAncestorList[0]})`);\n      }\n\n      this.impl.currentState = this.processReactionResult(result);\n    });\n  }\n\n  /**\n   * Used to query whether the state machine is currently running\n   * @returns {Boolean} `true` if the state machine is processing events; false otherwise.\n   */\n  isRunning() {\n    return this.impl.processingEvents;\n  }\n\n  /**\n   * This is the main function to invoke an FSM with an event.\n   * @param {FsmEvent} evt The event to be processed by the FSM.\n   */\n  processEvent(evt) {\n    const { impl } = this;\n    if (!this.process(() => {\n      this.log(`Processing event ${evt}`);\n      let result;\n      if (impl.currentState) {\n        try {\n          result = impl.currentState.handleEvent(evt);\n          impl.currentState = impl.currentState.processReactionResult(result, evt);\n        } catch (exc) {\n          this.log(`Caught exception ${exc}, continuing`);\n          result = impl.handleUncaughtException.call(impl.currentState,\n                                                     evt,\n                                                     exc);\n          impl.currentState = impl.currentState.processReactionResult(result, evt);\n        }\n      }\n    })) {\n      // Didn't run immediately\n      this.log(`Deferring event ${evt}`);\n    }\n  }\n\n  /**\n   * Terminates the FSM by transitioning the FSM to its final state. After\n   * this returns, the FSM may be started again with @link start.  This method\n   * should only be called externally from the FSM, not from within a reaction.\n   * To terminate the FSM within a reaction, use the\n   * {@link StateContext.ReactionResult} returned by {@link State#terminate}.\n   */\n  terminateFsm() {\n    const curState = this.getCurrentState();\n    if (!curState) {\n      return;\n    }\n    if (this.impl.processingEvents) {\n      throw new Error('Cannot terminate state machine while FSM is processing ' +\n            'events. To terminate the FSM from within a reaction, return ' +\n            'State~terminate() from a reaction.');\n    }\n    this.process(() => {\n      const result = curState.terminate();\n      this.impl.currentState = curState.processReactionResult(result);\n    });\n  }\n\n  /**\n   * This should only be called from within the context of a reaction\n   * function, which is to say a function called by the FSM infrastructure\n   * that returns {@link StateContext~ReactionResult}.  The purpose of this\n   * function is to set a function to be called after the currently\n   * executing event is completely handled, which includes the execution of\n   * any events that have been or will be queued as a result of processing\n   * the current event.\n   *\n   * Typical uses of this would be to set a function that does one of:\n   * 1. Throws an exception to the caller.\n   * 2. Calls an application callback.\n   * @param {Function} postEventAction function to call when the FSM has finished\n   *  processing events.  The context (i.e. 'this') will be the FSM when it\n   *  is called.\n   */\n  setPostEventAction(postEventAction) {\n    if (!this.impl.processingEvents) {\n      throw new Error('Cannot set post event hook unless FSM is processing events.');\n    }\n    if (!postEventAction || typeof postEventAction !== 'function') {\n      // TBD: Do we need to allow clearing of the hook?  Not that\n      // I'm aware of for the known use cases.  If we want to allow\n      // it, I propose adding a 'clearPostEventAction' rather than\n      // allowing null or undefined as the argument.\n      throw new Error(`postEventAction must be a function; got (${postEventAction})`);\n    }\n    this.impl.postEventAction = postEventAction.bind(this);\n  }\n\n  /**\n   * Called by the FSM when it finishes processing events.  If a\n   * postEventAction had been set, it will be called, then cleared.\n   * @private\n   */\n  _onEventCompletion() {\n    const action = this.impl.postEventAction;\n    if (action) {\n      this.impl.postEventAction = undefined;\n      this.log('Running post event action');\n      action.apply(this);\n    }\n  }\n\n  /**\n   * Returns the innermost active state.\n   *\n   * If regions were implemented, this would return an iterator to innermost\n   * active states.\n   *\n   * @returns {StateContext} The innermost active state.\n   */\n  getCurrentState() {\n    return this.impl.currentState;\n  }\n\n  /**\n   * Gets an active state by name.  Returns undefined if the named state is\n   * not currently active.\n   *\n   * Note the returned state may not be the innermost state as returned by\n   * {@link StateMachine#getCurrentState}.  If the innermost active state is not\n   * returned, the returned state is guaranteed to contain the innermost active\n   * state.\n   *\n   * @param {String} name The name of the state to be retrieved.\n   * @returns {?StateContext} The state with the specified name, if the\n   *      state is active; undefined otherwise.  Note the returned state may not\n   *      be the innermost active state.\n   */\n  getActiveState(name) {\n    const activeStates = this.impl.currentState.getAncestorList();\n    // Don't include the first ancestor in the loop since it is the state\n    // machine itself, not a state.\n    for (let i = 1; i < activeStates.length; ++i) {\n      if (activeStates[i].getName() === name) {\n        return activeStates[i];\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Checks if the named state is currently active.\n   * @param {String} name The name of the state to be queried.\n   * @returns {Boolean} Whether or not the named state is active.\n   */\n  isStateActive(name) {\n    return this.getActiveState(name) !== undefined;\n  }\n\n  /**\n   * Allows a reaction to be registered for unhandled events in the FSM.  The\n   * default reaction is to log the unhandled event at debug and remain in the\n   * current state with no other side effects.\n   * @param {StateContext.reactionCallback} r The reaction to be invoked when an\n   *      event is unhandled by the FSM.\n   * @returns {StateMachine} This StateMachine object.\n   */\n  unhandledEventReaction(r) {\n    if (typeof r !== 'function') {\n      throw new Error(`In ${this}: unhandled event reaction must be a function; got ${r}`);\n    }\n    this.impl.handleUnhandledEvent = r.bind(this);\n    return this;\n  }\n\n  /**\n   * This allows a reaction to be registered for uncaught exceptions while\n   * processing events.  Generally, it is preferred to catch exceptions from\n   * within reaction functions.  However, this is a good way to safeguard\n   * against missed exceptions.  Usually an error should be logged here,\n   * which is the default behaviour.\n   *\n   * Also note that this is only called for either:\n   * - an exception thrown from an event reaction;\n   * - an exception thrown from a transition action\n   * If exceptions are thrown from within state entry, exit, initials, etc,\n   * this function is not invoked.  These functions may end up getting\n   * invoked from the transition taken as a result of the exception in the\n   * first place.  The generate another exception would be difficult to\n   * handle in a sensible way.  Users of this infrastructure must always\n   * catch exceptions from these functions.\n   *\n   * @param {fsm.StateContext.reactionCallback} r The reaction to be\n   *      invoked when an exception has not been caught by another of the\n   *      FSM's reactionCallbacks.  When this function is invoked, 'this'\n   *      will be the FSM's current state.\n   * @returns {StateMachine} `this`, for method chaining.\n   */\n  uncaughtExceptionReaction(r) {\n    if (typeof r !== 'function') {\n      throw new Error(`In ${this}: Uncaught exception reaction must be a function; got ${r}`);\n    }\n    this.impl.handleUncaughtException = r;\n    return this;\n  }\n\n  /**\n   * Used by the implementation to get the final state.  This should never be\n   * used by applications.  Their only need to reference this state should be\n   * indirectly via the {@link State#terminate} function.\n   * @returns {State} The FSM's final state, which is a hidden implementation\n   *      detail of the FSM.\n   * @protected\n   */\n  getFinalState() {\n    return this.impl.finalState;\n  }\n}\n\nmodule.exports.StateMachine = StateMachine;\n","const { EntryPoint } = require('./entry-point');\nconst { ExitPoint } = require('./exit-point');\nconst { StateContext } = require('./state-context');\n\n/**\n * @classdesc\n * This class represents a state in a state machine.\n * @private\n */\nclass State extends StateContext {\n  /**\n   * @constructor\n   * @param {Object} spec Object specifier used to implement the named parameter\n   *  idiom.  In addition to the properties documented here, it is also expected\n   *  to have properties required by the [StateContext base class]{@link StateContext}.\n   * @param {String} spec.name The name of the state, used in debug logs.\n   * @param {State|StateMachine} spec.parentContext One of:\n   *  - The parent state object or;\n   *  - The stateMachine object for top-level states.\n   * @param {Object} [extensions] Additional methods to add to the state.\n   */\n  constructor(spec, extensions = null) {\n    super(spec);\n\n    const parentContext = spec.parentContext;\n    Object.assign(this.impl, {\n      parentContext,\n      reactions:            {},\n      entryPoints:          {},\n      exitPoints:           {},\n      ancestorList:         [...parentContext.getAncestorList(), this],\n      handleUnhandledEvent: e => (\n        parentContext.handleEvent\n          ? parentContext.handleEvent(e)\n          : parentContext.impl.handleUnhandledEvent(e)\n      ),\n    });\n    if (parentContext) this.log = parentContext.log.bind(this);\n\n    // Extend and bind functions\n    Object.keys(extensions || {}).forEach((k) => {\n      const extension = extensions[k];\n      this[k] = typeof extension === 'function' ? extension.bind(this) : extension;\n    });\n\n    this.setLogPadding(' '.repeat(this.impl.ancestorList.length));\n  }\n\n  /**\n   * Register a reaction function for a particular event.\n   * @param {String} eventName The name of the event func is to react to.\n   * @param {StateContext.reactionCallback} func The function to call when\n   *  the state processes an event with the name eventName.  The function is\n   *  bound to this object so that this refers to this state object when it\n   *  is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  reaction(eventName, func) {\n    if (!eventName) throw new Error('No event name for reaction');\n    if (!func) throw new Error(`No reaction function for reaction ${eventName}`);\n\n    this.log(`Adding reaction to ${this} for event ${eventName}`);\n\n    if (this.impl.reactions[eventName]) {\n      this.log(`Replacing reaction ${this.impl.reactions[eventName]} with ${func}`);\n    }\n    this.impl.reactions[eventName] = func.bind(this);\n    return this;\n  }\n\n  /**\n   * Create an entryPoint for this state.\n   * @param {String} entryPointName The name of the entryPoint being created.\n   * @param {StateContext.reactionCallback} func The reaction to invoke after\n   *  the state is entered via this entryPoint\n   * @returns {State} This state object.\n   * @public\n   */\n  entryPoint(entryPointName, func) {\n    if (!entryPointName) throw new Error('No entry point name for entry point');\n    if (!func) throw new Error(`No reaction function for entry point ${entryPointName}`);\n\n    this.log(`Adding entryPoint ${entryPointName} to ${this}`);\n\n    if (this.impl.entryPoints[entryPointName]) {\n      this.log(`EntryPoint ${entryPointName} already exists in ${this}`);\n      return this;\n    }\n\n    this.impl.entryPoints[entryPointName] = new EntryPoint({\n      state: this,\n      entryPointName,\n      func,\n    });\n\n    return this;\n  }\n\n  /**\n   * Create an exitPoint for this state.\n   * @param {String} exitPointName The name of the exitPoint being created.\n   * @param {StateContext.reactionCallback} func The reaction to invoke after\n   *  the state is exited via this exitPoint.\n   * @returns {State} This state object.\n   * @public\n   */\n  exitPoint(exitPointName, func) {\n    if (!exitPointName) throw new Error('No exit point name for entry point');\n    if (!func) throw new Error(`No reaction function for exit point ${exitPointName}`);\n\n    this.log(`Adding exitPoint ${exitPointName} to ${this}`);\n\n    if (this.impl.exitPoints[exitPointName]) {\n      this.log(`ExitPoint ${exitPointName} already exists in  ${this}`);\n      return this;\n    }\n\n    this.impl.exitPoints[exitPointName] = new ExitPoint({\n      state: this,\n      exitPointName,\n      func,\n    });\n\n    return this;\n  }\n\n  /**\n   * @param {String} entryPointName The name of the entry point to be\n   *      transitioned to.\n   * @returns { StateContext } The state context to transition to when\n   *      entering via the state's entryPoint named entryPointName.\n   * @protected\n   */\n  getEntryPointDestState(entryPointName) {\n    if (this.impl.entryPoints[entryPointName] === undefined) {\n      this.log(`${this}: EntryPoint ${entryPointName} does not exist.`);\n      return this;\n    }\n\n    return this.impl.entryPoints[entryPointName].getDestState();\n  }\n\n  /**\n   * @param {String} exitPointName The name of the exit point to be\n   *      transitioned to.\n   * @returns {StateContext} The state context to transition to when\n   *      exiting via the state's exitPoint named exitPointName.\n   * @protected\n   */\n  getExitPointDestState(exitPointName) {\n    if (this.impl.exitPoints[exitPointName] === undefined) {\n      this.log(`${this}: ExitPoint ${exitPointName} does not exist.`);\n      return this;\n    }\n\n    return this.impl.exitPoints[exitPointName].getDestState();\n  }\n\n  /**\n   * Register a function to be called when the state is entered.\n   * @param {function} func The function to call when the state is entered.\n   *  The function is bound to this object so that this refers to this\n   *  state object when it is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  entry(func) {\n    if (this.impl.appEntryFunc) {\n      this.log(`Replacing entry function ${this.impl.appEntryFunc} with ${func}`);\n    }\n    this.impl.appEntryFunc = func.bind(this);\n    return this;\n  }\n\n  /**\n   * Register a function to be called when the state is exited.\n   * @param {function} func The function to call when the state is exited.\n   *  The function is bound to this object so that this refers to this\n   *  state object when it is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  exit(func) {\n    if (this.impl.appExitFunc) {\n      this.log(`Replacing exit function ${this.impl.appExitFunc} with ${func}`);\n    }\n    this.impl.appExitFunc = func.bind(this);\n    return this;\n  }\n\n  /**\n   * This is the same as [transitionTo]{@link StateContext#transitionTo},\n   * except the outermost state is exited if the source state is within the\n   * dest state or vice versa.  If one state is not within the other, this\n   * is equivalent to [transitionTo]{@link StateContext#transitionTo}.\n   * @param {State} state The state to transition to; if undefined, it is\n   *      a self-transition.\n   * @param {StateContext.actionCallback} [action] Optional The action to perform as part\n   *      of the transition, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition.\n   */\n  externalTransitionTo(state, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state,\n      action,\n      external:  true,\n    });\n  }\n\n  /**\n   * This is similar to [transitionTo]{@link StateContext#transitionTo}, except\n   * that this is a transition to a named entryPoint created on state.  If the\n   * named entryPoint does not exist, this is a malformed FSM and the behaviour\n   * is undefined.\n   * @param {State} state The state that has the named entryPoint.\n   * @param {String} entryPointName The name of the entryPoint of state.\n   * @param {StateContext.actionCallback} action The action to perform as part of\n   *      the transaction, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  transitionToEntryPoint(state, entryPointName, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state.getEntryPointDestState(entryPointName),\n      action,\n    });\n  }\n\n  /**\n   * This is similar to [transitionTo]{@link StateContext#transitionTo}, except\n   * that this is a transition to a named exitPoint created on state.  If the\n   * named exitPoint does not exist, this is a malformed FSM and the behaviour\n   * is undefined.\n   * @param {State} state The state that has the named exitPoint.\n   * @param {String} exitPointName The name of the exitPoint of state.\n   * @param {StateContext.actionCallback} [action] Optional The\n   * action to perform as part of the transaction, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  transitionToExitPoint(state, exitPointName, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state.getExitPointDestState(exitPointName),\n      action,\n    });\n  }\n\n  /**\n   * If a reaction evaluates the guard conditions for the reaction and none\n   * succeed, the eventUnhandled\n   * [ReactionResult]{@link StateContext.ReactionResult} should be\n   * returned.  This causes the FSM to continue looking for a reaction to\n   * process the event.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  eventUnhandled() {\n    return new StateContext.ReactionResult({\n      caller: this,\n    });\n  }\n\n  /**\n   * This [ReactionResult]{@link StateContext.ReactionResult} is used\n   * when an event has been handled in a state and the transition is a local\n   * transition back to itself.  Note that internal transitions never cause\n   * state exits or entries -- if the internal transition is defined in an\n   * outer state that contains the active state, then the behaviour is as if the\n   * active state has inherited the internal transition from the outer state.\n   * @param {?Function} action The action to perform in the transition.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  internalTransition(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getCurrentState(),\n      action,\n    });\n  }\n\n  /**\n   * Used to terminate the FSM.\n   * @param {StateContext.actionCallback} action An optional action to\n   *      take within the FSM context after all states have been exited.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  terminate(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getFinalState(),\n      action,\n    });\n  }\n\n\n  /**\n   * @returns {StateContext} The parent state context for this state, which\n   *      could either be an outer state, or the state machine for top-level\n   *      states.\n   * @protected\n   */\n  getParent() {\n    return this.impl.parentContext;\n  }\n\n  /**\n   * Called when a state is being entered.  Calls the app's registered entry\n   * function, if any.\n   * @protected\n   */\n  onEntry() {\n    this.log(`Entering: ${this}`);\n    if (this.impl.appEntryFunc) {\n      this.impl.appEntryFunc();\n    }\n  }\n\n  /**\n   * Called when a state is being exited.  Calls the app's registered exit\n   * function, if any.\n   * @protected\n   */\n  onExit() {\n    this.log(`Exiting: ${this}`);\n    if (this.impl.appExitFunc) {\n      this.impl.appExitFunc();\n    }\n  }\n\n  /**\n   * Called when a state is to handle an event.\n   * @param {FsmEvent} e The event to handle.\n   * @returns {ReactionResult} The result of handling the event.\n   * @protected\n   */\n  handleEvent(e) {\n    this.log(`Process: ${e}`);\n    const reaction = this.impl.reactions[e.getName()];\n    if (reaction) {\n      const result = reaction(e);\n      // All ReactionResults in which an event is considered handled\n      // have a destState defined.\n      if (!result) {\n        this.log(`Reaction returned undefined: ${e} in ${this}`);\n      }\n      if (result.destState) {\n        this.log(`Handled: ${e}`);\n        return result;\n      }\n      this.log(`Unhandled: ${e} in ${this}`);\n    } else {\n      this.log(`No reaction: ${e} in ${this}`);\n    }\n\n    return this.impl.handleUnhandledEvent(e);\n  }\n}\n\nmodule.exports.State = State;\n","const { ConsoleLogImpl } = require('./lib/console-log-impl');\nconst { GlobalBinding } = require('./lib/global-binding');\nconst { LogImpl } = require('./lib/log-impl');\nconst { LogLevel } = require('./lib/log-levels');\n\nconst { Parameter } = require('solclient-validate');\nconst { SolclientFactory } = require('solclient-factory');\n\nconst {\n  isEnumMember,\n  isFunction,\n} = Parameter;\n\nconst {\n  getImpl,\n  getLogLevel,\n  setImpl,\n  setLogLevel,\n} = GlobalBinding;\n\nconst forwarder = {};\nfunction buildLogForwarder() {\n  Object.assign(forwarder, {\n    trace(...args) {\n      const impl = getImpl();\n      if (impl && impl.trace && getLogLevel() >= LogLevel.TRACE) {\n        impl.trace.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    debug(...args) {\n      const impl = getImpl();\n      if (impl && impl.debug && getLogLevel() >= LogLevel.DEBUG) {\n        impl.debug.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    info(...args) {\n      const impl = getImpl();\n      if (impl && impl.info && getLogLevel() >= LogLevel.INFO) {\n        impl.info.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    warn(...args) {\n      const impl = getImpl();\n      if (impl && impl.warn && getLogLevel() >= LogLevel.WARN) {\n        impl.warn.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    error(...args) {\n      const impl = getImpl();\n      if (impl && impl.error && getLogLevel() >= LogLevel.ERROR) {\n        impl.error.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    fatal(...args) {\n      const impl = getImpl();\n      if (impl && impl.fatal) {\n        impl.fatal.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n  });\n}\nbuildLogForwarder(); // stripped by production build\n\nfunction addGlobalFuncs(source, target) {\n  Object.keys(forwarder).forEach((k) => {\n    target[`LOG_${k.toUpperCase()}`] = source[k];\n  });\n}\n\nclass LogFormatter {\n  constructor(formatter) {\n    this._formatter = (() => {\n      if (typeof formatter === 'function') return formatter;\n      if (typeof formatter === 'string') return function prepend(...args) { return [formatter, ...args]; };\n      if (!formatter) return function passthrough(...args) { return [...args]; };\n      return formatter;\n    })();\n    const self = this;\n    Object.keys(forwarder).forEach((key) => {\n      this[key] = function forward(...args) {\n        return forwarder[key].apply(null, self._formatter(...args));\n      };\n    });\n    addGlobalFuncs(this, this);\n  }\n\n  get formatter() {\n    return this._formatter;\n  }\n  set formatter(func) {\n    this._formatter = func;\n  }\n\n  wrap(genericFunction, targetSelf) {\n    const self = this;\n    return function genericLogWrapper(...args) {\n      return genericFunction.apply(targetSelf, self._formatter(...args));\n    };\n  }\n\n}\n\n/**\n * Gets the current log level, which was set by {@link solace.SolclientFactory.init} or a\n * subsequent call to {@link solace.SolclientFactory.setLogLevel}.\n *\n * @returns {solace.LogLevel} The current log level.\n */\nSolclientFactory.getLogLevel = () => getLogLevel();\n\n  /**\n   * This method changes the current log level from the level set when\n   * {@link solace.SolclientFactory.init} was called.\n   *\n   * @param {solace.LogLevel} newLevel The new log level to set.\n   * @throws {solace.OperationError} Invalid log level\n   */\nSolclientFactory.setLogLevel = (newLevel) => {\n  isEnumMember('logLevel', newLevel, LogLevel);\n  setLogLevel(newLevel);\n};\n\nSolclientFactory.addInitializer((props) => {\n  setLogLevel(props.logLevel);\n\n  const logger = props.logger || getImpl() || new ConsoleLogImpl();\n  // Validate that the supplied log implementation is a superset of LogImpl\n  Object.keys(new LogImpl()).forEach(key => isFunction(`logger.${key}`, logger[key]));\n\n  setImpl(logger);\n});\n\naddGlobalFuncs(forwarder, module.exports);\nmodule.exports.LogImpl = LogImpl;\nmodule.exports.LogLevel = LogLevel;\nmodule.exports.Binding = GlobalBinding;\nmodule.exports.ConsoleLogImpl = ConsoleLogImpl;\nGlobalBinding.setImpl(new ConsoleLogImpl());\nmodule.exports.LogFormatter = LogFormatter;\n","const { LogImpl } = require('./log-impl');\n\nconst STUB = () => undefined;\n\nfunction generateLogHeader(levelStr) {\n  const date = new Date();\n  const levelStrPadding = ' '.repeat(6 - levelStr.length);\n  let YY = String(date.getFullYear());\n  let MM = String(date.getMonth() + 1);\n  let DD = String(date.getDate());\n  let hh = String(date.getHours());\n  let mm = String(date.getMinutes());\n  let ss = String(date.getSeconds());\n  let ms = String(date.getMilliseconds());\n\n  YY = '0'.repeat(4 - YY.length) + YY;\n  MM = MM.length < 2 ? `0${MM}` : MM;\n  DD = DD.length < 2 ? `0${DD}` : DD;\n  hh = hh.length < 2 ? `0${hh}` : hh;\n  mm = mm.length < 2 ? `0${mm}` : mm;\n  ss = ss.length < 2 ? `0${ss}` : ss;\n  ms = ms.length < 3 ? `0${ms}` : ms;\n  ms = ms.length < 3 ? `0${ms}` : ms; // twice: pad to 3\n\n  return [`${YY}-${MM}-${DD} ${hh}:${mm}:${ss}.${ms}`, `${levelStr}${levelStrPadding}`];\n}\n\n/**\n * @classdesc\n * A log implementation that uses the global or window console.\n *\n * This is the default log implementation used by the API if no logger was\n * supplied via {@link solace.SolclientFactoryProperties}.\n *\n * @memberof solace\n * @private\n */\nclass ConsoleLogImpl extends LogImpl {\n  /**\n   * @constructor\n   * @param {Object} [consoleIn] The console to which to apply this implementation. If\n   *  not specified, uses the global or window console.\n   */\n  constructor(consoleIn) {\n    /**\n     * Logs the given arguments at TRACE level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.log\n     *  * console.debug\n     *\n     * @name solace.ConsoleLogImpl#trace\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _trace = STUB;\n\n    /**\n     * Logs the given arguments at DEBUG level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.log\n     *  * console.debug\n     *\n     * @name solace.ConsoleLogImpl#debug\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _debug = STUB;\n\n    /**\n     * Logs the given arguments at INFO level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#info\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _info = STUB;\n\n    /**\n     * Logs the given arguments at WARN level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.warn\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#warn\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _warn = STUB;\n\n\n    /**\n     * Logs the given arguments at ERROR level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#error\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _error = STUB;\n\n    /**\n     * Logs the given arguments at FATAL level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#fatal\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _fatal = STUB;\n\n    const console = consoleIn || (\n      typeof window === 'undefined'\n        /* eslint-env node */ ? global\n        /* eslint-env browser */ : window\n      ).console;\n    /* eslint-env shared-node-browser */\n\n    if (console && (console.log || console.warn)) {\n      /* eslint-disable no-console */\n      // Where console.log is supported, it is preferred over console.debug\n      // https://developer.mozilla.org/en-US/docs/DOM/console\n      // console methods in IE9 are object, not function, unfortunately\n      //\n      // Also, console.trace outputs a stack trace on some platforms.  So we\n      // use the same underlying logger as debug for trace to avoid the\n      // excessive verbosity that would result.\n      if (console.log && console.log !== undefined) {\n        _trace = Function.prototype.bind.call(console.log, console);\n        _debug = Function.prototype.bind.call(console.log, console);\n      } else if (console.debug && typeof console.debug === 'function') {\n        _trace = Function.prototype.bind.call(console.debug, console);\n        _debug = Function.prototype.bind.call(console.debug, console);\n      }\n\n      // Where console.info exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      if (console.info && console.info !== undefined) {\n        _info = Function.prototype.bind.call(console.info, console);\n      } else {\n        _info = Function.prototype.bind.call(console.log, console);\n      }\n\n      // Where console.warn exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      if (console.warn && console.warn !== undefined) {\n        _warn = Function.prototype.bind.call(console.warn, console);\n      } else {\n        _warn = Function.prototype.bind.call(console.log, console);\n      }\n\n      // Where console.error exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      //\n      // console.fatal is not present in any known console implementation. Use\n      // console.error or console.log.\n      if (console.error && console.error !== undefined) {\n        _error = Function.prototype.bind.call(console.error, console);\n        _fatal = Function.prototype.bind.call(console.error, console);\n      } else {\n        _error = Function.prototype.bind.call(console.log, console);\n        _fatal = Function.prototype.bind.call(console.log, console);\n      }\n\n      /* eslint-enable no-console */\n    } // else no console implementation was found, so the default (stub) is used for each level.\n\n    super((...args) => { _trace(...generateLogHeader('TRACE'), ...args); },\n          (...args) => { _debug(...generateLogHeader('DEBUG'), ...args); },\n          (...args) => { _info(...generateLogHeader('INFO'), ...args); },\n          (...args) => { _warn(...generateLogHeader('WARN'), ...args); },\n          (...args) => { _error(...generateLogHeader('ERROR'), ...args); },\n          (...args) => { _fatal(...generateLogHeader('FATAL'), ...args); });\n  }\n\n\n}\n\nmodule.exports.ConsoleLogImpl = ConsoleLogImpl;\n","const { LogLevel } = require('./log-levels');\n\nconst state = {\n  impl:  null,\n  level: LogLevel.INFO,\n};\n\nconst LogBinding = {};\nLogBinding.getImpl = function getImpl() {\n  return state.impl;\n};\n\nLogBinding.setImpl = function setImpl(impl) {\n  state.impl = impl;\n};\n\nLogBinding.getLogLevel = function getLogLevel() {\n  return state.level;\n};\n\nLogBinding.setLogLevel = function setLogLevel(level) {\n  state.level = level;\n};\n\nmodule.exports.GlobalBinding = LogBinding;\n","/* eslint-disable class-methods-use-this */ // declare prototype stubs\n\n/**\n * A logging callback. It must accept any valid number of arguments of any type. It must not throw.\n *\n * @callback\n * @function\n * @name solace.LogImpl.loggingCallback\n * @param {...*} args The arguments to log. Typically this is a mixture of strings and\n *  objects to be inspected. A simple implementation might call .toString() on each\n *  argument.\n */\n\n/**\n * @classdesc\n * A class that provides a binding to a log implementation. Applications that need to\n * control API logging must construct a LogImpl\n * instance, a log implementation that can be set in\n * {@link solace.SolclientFactoryProperties#logger}.\n * The binding will call the supplied log methods with the\n * parameters supplied to each.\n * @memberof solace\n */\nclass LogImpl {\n  /**\n   * @param {solace.LogImpl.loggingCallback} trace Callback for {@link solace.LogLevel.TRACE} logs.\n   * @param {solace.LogImpl.loggingCallback} debug Callback for {@link solace.LogLevel.DEBUG} logs.\n   * @param {solace.LogImpl.loggingCallback} info Callback for {@link solace.LogLevel.INFO} logs.\n   * @param {solace.LogImpl.loggingCallback} warn Callback for {@link solace.LogLevel.WARN} logs.\n   * @param {solace.LogImpl.loggingCallback} error Callback for {@link solace.LogLevel.ERROR} logs.\n   * @param {solace.LogImpl.loggingCallback} fatal Callback for {@link solace.LogLevel.FATAL} logs.\n   *\n   * @constructor\n   */\n  constructor(trace, debug, info, warn, error, fatal) {\n    Object.assign(this, {\n      trace,\n      debug,\n      info,\n      warn,\n      error,\n      fatal,\n    });\n  }\n\n  trace() {}\n  debug() {}\n  info() {}\n  warn() {}\n  error() {}\n  fatal() {}\n}\n\nmodule.exports.LogImpl = LogImpl;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents a log level enumeration.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst LogLevel = {\n  /**\n   * Fatal. Rserved for unrecoverable errors.\n   * @type {Number}\n   */\n  FATAL: 0,\n  /**\n   * Error. An internal error to the API or Solace Message Router.\n   * @type {Number}\n   */\n  ERROR: 1,\n  /**\n   * Warn. An external error which may be caused by the application passing invalid\n   * arguments or objects to the API. Often accompanied by an thrown exception.\n   * @type {Number}\n   */\n  WARN:  2,\n  /**\n   * Info. An unexpected event or occurrence that does not affect the sane\n   * operation of the SDK or application.\n   * @type {Number}\n   */\n  INFO:  3,\n  /**\n   * Debug. The highest (least) level of debug logs. Debug logs provide an overview of\n   * the API operation.\n   * @type {Number}\n   */\n  DEBUG: 4,\n  /**\n   * Trace. The loweest (most verbose) level of debug logs.\n   * @type {Number}\n   */\n  TRACE: 5,\n};\n\nmodule.exports.LogLevel = Enum.new(LogLevel);\n","const { ConsumerFlows } = require('./lib/consumer-flows');\nconst { ConsumerFSMEvent } = require('./lib/consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./lib/consumer-fsm-event-names');\nconst { MessageConsumer } = require('./lib/message-consumer');\nconst { MessageConsumerAcknowledgeMode } = require('./lib/message-consumer-acknowledge-modes');\nconst { MessageConsumerEvent } = require('./lib/message-consumer-event');\nconst { MessageConsumerEventName } = require('./lib/message-consumer-event-names');\nconst { MessageConsumerProperties } = require('./lib/message-consumer-properties');\nconst { QueueBrowser } = require('./lib/queue-browser');\nconst { QueueBrowserEventName } = require('./lib/queue-browser-event-names');\nconst { QueueBrowserProperties } = require('./lib/queue-browser-properties');\n\nmodule.exports.ConsumerFlows = ConsumerFlows;\nmodule.exports.ConsumerFSMEvent = ConsumerFSMEvent;\nmodule.exports.ConsumerFSMEventNames = ConsumerFSMEventNames;\nmodule.exports.MessageConsumer = MessageConsumer;\nmodule.exports.MessageConsumerEvent = MessageConsumerEvent;\nmodule.exports.MessageConsumerAcknowledgeMode = MessageConsumerAcknowledgeMode;\nmodule.exports.MessageConsumerEventName = MessageConsumerEventName;\nmodule.exports.MessageConsumerProperties = MessageConsumerProperties;\nmodule.exports.QueueBrowser = QueueBrowser;\nmodule.exports.QueueBrowserEventName = QueueBrowserEventName;\nmodule.exports.QueueBrowserProperties = QueueBrowserProperties;\n","const { Enum, assert } = require('solclient-eskit');\nconst { LOG_DEBUG, LOG_ERROR } = require('solclient-log');\n\n/**\n * @private\n */\nconst ApplicationAckState = Enum.new({\n  UNACKED:        'UNACKED',\n  ACKED_NOT_SENT: 'ACKED_NOT_SENT',\n  ACKED_SENT:     'ACKED_SENT',\n});\n\n// For the ring buffer update index, we have two key-value options:\n//  Map() - generally faster where supported\n//  Object - seems to automatically coerce keys to string, which is what we want in this case\n// By using Map and explicly creating a .key attribute and using it whenever possible,\n// we should get performance that is no worse than Object, which may have to perform that\n// coercion more often.\n\n/**\n * @private\n */\nclass ApplicationAck {\n  constructor(id, state) {\n    if (id) {\n      this.exists = true;\n      this.id = id;\n      this.key = id.toString();\n      this.state = state || ApplicationAckState.UNACKED;\n    } else {\n      this.exists = false;\n    }\n  }\n\n  set(id, state) {\n    this.exists = true;\n    this.id = id;\n    this.key = id.toString();\n    this.state = state || ApplicationAckState.UNACKED;\n  }\n\n  clear() {\n    this.exists = false;\n    this.id = null;\n    this.key = null;\n    this.state = null;\n  }\n}\n\n/**\n * @private\n */\nclass ApplicationAckRingBuffer {\n  /**\n   * Creates an instance of ApplicationAckRingBuffer. A standard ring buffer except that\n   * it reserves an empty entry so that an operation can occur during insert that includes\n   * both the new element and any element to be evicted. Also includes an ID-to-index map\n   * to speed updates.\n   *\n   * @param {Number} size The number of entries in the ring. Effective size is (size - 1).\n   * @memberof ApplicationAckRingBuffer\n   */\n  constructor(size) {\n    LOG_DEBUG('Creating application ack ring buffer with size ', size, ' retained size', size - 1);\n    assert(size >= 2); // one always free doesn't work with < 2 elements\n    this._size = size;\n    this._insertIndex = 0;\n    /**\n     * @property {Array.<?ApplicationAck>}\n     */\n    this._buffer = Array(size).fill(null).map(() => new ApplicationAck());\n    /**\n     * @property {Map.<String, Number>}\n     */\n    this._index = new Map();\n  }\n\n  reset() {\n    this._insertIndex = 0;\n    this._buffer.forEach((ack) => { ack.exists = false; });\n    this._index.clear();\n  }\n\n  /**\n   * @param {Long} id The id of the new entry\n   * @param {function(ApplicationAck)} beforeEvictCallback Call this before operation completes\n   * @returns {any} Return value of beforeEvictCallback\n   * @private\n   */\n  insert(id, beforeEvictCallback) {\n    assert(beforeEvictCallback);\n    assert(id);\n\n    const size = this._size;\n    const buffer = this._buffer;\n    const index = this._index;\n    const insertIndex = this._insertIndex;\n\n    /*\n     * Because of the postprocessing step, we are not re-entrant safe. It is expected\n     * that we are called from TCP -> Transport -> Session -> acceptMessage().\n     * This assert verifies that the postprocess cleanup has happened.\n     */\n    assert(!buffer[insertIndex].exists, 'Invariant not enforced (before): insert index not empty');\n\n    // First, insert.\n    const inserting = buffer[insertIndex];\n    inserting.set(id, ApplicationAckState.UNACKED);\n    if (index.has(inserting.key)) {\n      LOG_ERROR(`Duplicate ID: ${index.get(inserting.key)} insertIndex: ${insertIndex}`);\n    }\n    index.set(inserting.key, insertIndex);\n\n    const evictingIndex = (insertIndex + 1) % size;\n    const evicting = buffer[evictingIndex];\n    let result;\n    try {\n      result = beforeEvictCallback(evicting.exists ? evicting : null);\n    } finally {\n      // Always clean up to keep the RB in a consistent state.\n      // If inProgressCallback threw, this runs before the exception propagates.\n\n      // Update insert index for next operation.\n      this._insertIndex = (insertIndex + 1) % size;\n\n      if (evicting.exists) {\n        index.delete(evicting.key);\n        evicting.clear();\n      }\n    }\n\n    assert(!buffer[this._insertIndex].exists, 'Invariant not enforced (after): insert index not empty');\n    return result;\n  }\n\n  /**\n   * Returns the number of elements in this ringbuffer. Will increase to\n   * one less than the size provided to the constructor as the buffer is used.\n   *\n   * @readonly\n   * @memberof ApplicationAckRingBuffer\n   */\n  get length() {\n    return this._index.size;\n  }\n\n  /**\n   * Returns the first element in the ring buffer.\n   *\n   * This could be called from the evict callback, so insert needs to be sure\n   * that internal state is correct for that scenario.\n   *\n   * The expected case is that the first element is at insertIndex + 1, but if the\n   * buffer has not been filled yet, we will iterate the buffer and skip nonexistent\n   * elements to find it.\n   *\n   * This is a little inefficient until we have received this._size messages, but after\n   * that it is more efficient than maintaining a read pointer.\n   *\n   * @returns {?ApplicationAck} The first ack in the buffer.\n   */\n  front() {\n    if (this.length === 0) return null;\n\n    const buffer = this._buffer;\n    const insertIndex = this._insertIndex;\n    const size = this._size;\n    const firstIndex = (insertIndex + 1) % size;\n    // Cannot assert invariant here: insert is usually in progress.\n\n    // Buffer full case\n    if (buffer[firstIndex].exists) return buffer[firstIndex];\n\n    // Not yet filled case\n    // The last checked element for the iteration is the start point,\n    //  plus size, a full lap including the start index,\n    //  minus 1, to exclude the start\n    //  minus 1, to exclude the invariant null entry\n    for (let rawIndex = firstIndex, lastIndex = firstIndex + size - 1;\n         rawIndex <= lastIndex;\n         ++rawIndex) {\n      const readIndex = rawIndex % size;\n      const element = buffer[readIndex];\n      if (element.exists) {\n        return element;\n      }\n    }\n\n    // Buffer is completely empty\n    assert(this._index.size === 0, '#front() failed so buffer must be empty');\n    return null;\n  }\n\n  /**\n   * Rather than implementing the iterator protocol, which requires Symbol support,\n   * we'll implement a forEach that behaves as though this is an array.\n   *\n   * @param {function(ApplicationAppState, index, collection)} callback The iteration callback\n   */\n  forEach(callback) {\n    if (this.length === 0) return;\n\n    const buffer = this._buffer;\n    const size = this._size;\n    let index = 0;\n\n    for (let rawIndex = this._insertIndex + 1, lastIndex = this._insertIndex + size;\n         rawIndex <= lastIndex;\n         ++rawIndex) {\n      const readIndex = rawIndex % size;\n      const element = buffer[readIndex];\n      if (element.exists) {\n        callback(element, index++, this);\n      }\n    }\n\n    assert(index > 0, 'Not empty but did not dispatch');\n  }\n\n  /**\n   * @param {Long} id The ID to update\n   * @param {ApplicationAckState} state The new state for the ID\n   * @private\n   */\n  updateAckState(id, state) {\n    const key = id.toString(); assert(this._index.has(key), 'Ack key not found');\n    const buffer = this._buffer;\n    const updateIndex = this._index.get(key);\n    const existing = buffer[updateIndex]; assert(existing, 'Ack key has no entry');\n    existing.state = state;\n  }\n\n  /**\n   * @param {Long} id The ID to look up\n   * @returns {Boolean} `true` if this ID exists in the ringbuffer\n   */\n  has(id) {\n    const key = id.toString();\n    return this._index.has(key);\n  }\n}\n\nObject.assign(module.exports, {\n  ApplicationAckState,\n  ApplicationAck,\n  ApplicationAckRingBuffer,\n});\n","const { assert } = require('solclient-eskit');\nconst { MessageConsumer } = require('./message-consumer');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\n\nclass ConsumerFlows {\n  /**\n   * Defines a set of Guaranteed Messaging Flows.  There are two sets allocated, one\n   * for publishers (typically just one entry) and one for Subscribers.\n   * There is a separate set for flows in RECONNECTING state.\n   * These need special treatment during SESSION_DOWN:\n   * they need to be notified, but not waited on by the session FSM.\n   * Flows in _reconnectingFlows are not in _allFLows.\n   * @param {any} options Construction options\n   * @private\n   */\n  constructor() {\n    this._allFlows = new Set();\n    this._reconnectingFlows = new Set();\n    // Flows by id (UP)\n    this._flowsById = {};\n  }\n\n  add(flow) {\n    assert(flow instanceof MessageConsumer, 'Flow was not a consumer');\n    if (this._allFlows.has(flow)) {\n      return flow;\n    }\n\n    const flowUp = () => {\n      // Don't worry about flow collisions -- the router assigned the new flow to the same ID\n      // so it won't address the old flow. Retain the old flow in _allFlows and make sure we\n      // dispose the right flow.\n      this._flowsById[flow.flowId] = flow;\n    };\n    const flowDisposed = () => {\n      const flowId = flow.flowId;\n      this._allFlows.delete(flow);\n      this._reconnectingFlows.delete(flow);\n      const flowById = this._flowsById[flowId];\n      // If this test fails, the router reassigned the flow ID, and we were only keeping the\n      // _allFlows set reference for blanket cleanup.\n      if (flowById === flow) {\n        delete this._flowsById[flowId];\n      }\n      // Flow will be disposed and this will happen automatically\n    };\n    const flowReconnecting = () => {\n      flowDisposed();\n      this._reconnectingFlows.add(flow);\n    };\n    const flowReconnected = () => {\n      flowUp();\n      this._allFlows.add(flow);\n      this._reconnectingFlows.delete(flow);\n    };\n    const flowDown = () => {\n      this._reconnectingFlows.delete(flow);\n    };\n\n    flow._on(MessageConsumerEventName.UP, flowUp);\n    flow._on(MessageConsumerEventName.RECONNECTED, flowReconnected);\n    flow._on(MessageConsumerEventName.DISPOSED, flowDisposed);\n    flow._on(MessageConsumerEventName.RECONNECTING, flowReconnecting);\n    flow._on(MessageConsumerEventName.DOWN, flowDown);\n    flow._on(MessageConsumerEventName.DOWN_ERROR, flowDown);\n\n    this._allFlows.add(flow);\n    return flow;\n  }\n\n  get flows() {\n    return Array.from(this._allFlows);\n  }\n  get reconnectingFlows() {\n    return Array.from(this._reconnectingFlows);\n  }\n\n  getFlowById(flowId) {\n    return this._flowsById[flowId];\n  }\n\n  disposeAll() {\n    this._allFlows.forEach(flow => flow.dispose());\n  }\n\n}\n\nmodule.exports.ConsumerFlows = ConsumerFlows;\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * Events on the Consumer FSM\n * @enum {string}\n ********************************************************************************/\nconst ConsumerFSMEventNames = {\n  SESSION_UP:                 'SESSION_UP',\n  SESSION_UP_NO_AD:           'SESSION_UP_NO_AD',\n  SESSION_DOWN:               'SESSION_DOWN',\n  SESSION_DISCONNECT:         'SESSION_DISCONNECT',\n  FLOW_FAILED:                'FLOW_FAILED',\n  FLOW_UP:                    'FLOW_UP',\n  FLOW_ACTIVE_IND:            'FLOW_ACTIVE_IND',\n  FLOW_CLOSE:                 'FLOW_CLOSE',\n  FLOW_OPEN:                  'FLOW_OPEN',\n  FLOW_UNBOUND:               'FLOW_UNBOUND',\n  ACK:                        'ACK',\n  ACK_TIMEOUT:                'ACK_TIMEOUT',\n  BIND_TIMEOUT:               'BIND_TIMEOUT',\n  CREATE_TIMEOUT:             'CREATE_TIMEOUT',\n  UNBIND_TIMEOUT:             'UNBIND_TIMEOUT',\n  CAN_SEND:                   'CAN_SEND',\n  TRANSPORT_ERROR:            'TRANSPORT_ERROR',\n  DISPOSE:                    'DISPOSE',\n  VIRTUALROUTER_NAME_CHANGED: 'VIRTUALROUTER_NAME_CHANGED',\n  RECONNECT_INTERVAL_TIMEOUT: 'RECONNECT_INTERVAL_TIMEOUT',\n  BIND_RESPONSE:              'BIND_RESPONSE',\n  CREATE_FAILED:              'CREATE_FAILED',\n  CREATE_SUCCESS:             'CREATE_SUCCESS',\n};\n\nmodule.exports.ConsumerFSMEventNames = Enum.new(ConsumerFSMEventNames);\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { FsmEvent } = require('solclient-fsm');\n\n/**\n *\n * ConsumerFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the Subscriber FSM.  This extension provides members to carry information specfic to\n * the Subscriber FSM transitions.\n *\n * @extends FsmEvent\n * @private\n */\nclass ConsumerFSMEvent extends FsmEvent {\n  constructor(spec, details) {\n    super(spec);\n    this.details = details;\n  }\n}\n\nmodule.exports.ConsumerFSMEvent = ConsumerFSMEvent;\n","const SMFLib = require('solclient-smf');\nconst { ApplicationAck,\n        ApplicationAckRingBuffer,\n        ApplicationAckState } = require('./application-acks');\nconst { assert } = require('solclient-eskit');\nconst { CapabilityType } = require('solclient-session');\nconst { ConsumerFSMEvent } = require('./consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./consumer-fsm-event-names');\nconst { ConsumerStateNames } = require('./consumer-state-names');\nconst { DestinationFromNetwork,\n        DestinationType,\n        Queue,\n        Topic } = require('solclient-destination');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { LogFormatter } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { MessageDispatcher } = require('./message-dispatcher');\nconst { PrivateFlowEventName } = require('solclient-flow');\nconst { QueueAccessType,\n        QueueDescriptor,\n        QueuePermissions,\n        QueueProperties,\n        QueueType } = require('solclient-queue');\nconst { RgmidFactory } = require('solclient-message');\nconst { State, StateMachine } = require('solclient-fsm');\nconst { Stats } = require('solclient-stats');\nconst { StatType } = require('solclient-stats');\nconst { Timer } = require('solclient-events');\nconst { TransportAcks,\n        TransportAckResult } = require('./transport-acks');\n\nconst RING_BUFFER_SIZE = 512;\nconst ZERO_APP_ACK = new ApplicationAck(Long.UZERO, ApplicationAckState.ACKED_SENT);\n\nclass ConsumerFSM extends StateMachine {\n  constructor({ name, consumer, sessionInterface, properties } = {}) {\n    super({ name });\n\n    const fsm = this;\n    const formatter = function formatter(...args) {\n      return [\n        `[session=${sessionInterface.sessionIdHex}]`,\n        `[message-consumer-fsm=${consumer.flowIdDec}]`,\n        ...args,\n      ];\n    };\n    const logger = this.logger = new LogFormatter(formatter);\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n      LOG_ERROR,\n    } = logger;\n    this.log = logger.wrap(this.log, this);\n\n    const autoAck = properties.acknowledgeMode === MessageConsumerAcknowledgeMode.AUTO;\n\n    this._consumer = consumer;\n    this._sessionInterface = sessionInterface;\n\n    // Save copies of properties accessed outside the constructor\n    this._acknowledgeTimeoutInMsecs = properties.acknowledgeTimeoutInMsecs;\n    this._acknowledgeThreshold = properties.acknowledgeThreshold;\n    this._localPreferredWindowSize = properties.windowSize;\n    this._localMaxWindowSize = properties.windowSize;\n\n    this._messageDispatch = new MessageDispatcher({ emitter: consumer, autoAck, logger });\n\n    this._stats = new Stats();\n\n    this._resetRemoteConnectionState();\n    this._resetLocalConnectionState();\n\n    // Flag to delay flow dispose() for autoAck.\n    this._midDispatch = false;\n    // Save a copy to clear out on first successful bind\n    this._replayStartLocation = properties.replayStartLocation;\n\n    this._errorCausingReconnect = null;\n    //**********************************************************************************************\n    // A bit of infrastructure around post-event actions, which includes maintaining a queue of\n    // pending actions, and some logic to pre-process the actions before performing them.\n\n    // These should not be the same as any MessageConsumerEventName value or they will collide in\n    // the actionLocations object during event pre-processing.\n    const emitEventActionType = 'EMIT';\n    const startDispatchActionType = 'DISPATCH';\n    const stopDispatchActionType = 'NO_DISPATCH';\n\n    let postEventActions = [];\n    function preprocessPostEventActions(startIndex) {\n      // first pre-process post event actions.  This isn't an exhaustive search of every possible\n      // combination of event sequences, as many are practically impossible, and therefore\n      // impossible to test.  We only handle sequences that are known to be possible.  If there\n      // are other sequences that need to be considered, we can add processing for them when we\n      // know they are possible.\n      LOG_TRACE(`Pre-processing post event action list @${startIndex}`, postEventActions);\n      const actionLocations = {};\n      postEventActions.forEach((action, i, arr) => {\n        function cancelAction(firstActionName, cancellingActionName) {\n          if (actionLocations[firstActionName] === undefined) {\n            return;\n          }\n          const firstLocation = actionLocations[firstActionName];\n          LOG_TRACE(`Cancelling post event action ${firstActionName}@${firstLocation} with ${\n            cancellingActionName}@${i}`);\n          actionLocations[firstActionName] = undefined;\n          arr[firstLocation] = null;\n          arr[i] = null;\n        }\n        if ((i < startIndex) || (!action)) {\n          LOG_TRACE(`Skip n/a action@${i}, start: ${startIndex}, action:`, action);\n          return;\n        }\n        switch (action.type) {\n          case emitEventActionType:\n            switch (action.data) {\n              case MessageConsumerEventName.UP:\n              case MessageConsumerEventName.ACTIVE:\n              case MessageConsumerEventName.RECONNECTED:\n                actionLocations[action.data] = i;\n                break;\n\n              case MessageConsumerEventName.DOWN:\n              case MessageConsumerEventName.DOWN_ERROR:\n              //case MessageConsumerEventName.RECONNECTED: // I can't get this to work :-/\n                cancelAction(MessageConsumerEventName.UP, action.data);\n                break;\n\n              case MessageConsumerEventName.INACTIVE:\n                cancelAction(MessageConsumerEventName.ACTIVE, action.data);\n                break;\n\n              default:\n                LOG_ERROR(`Unexpected event in post-event action: ${action.data}`);\n                break;\n            }\n            break;\n\n          case startDispatchActionType:\n            actionLocations[action.type] = i;\n            break;\n\n          case stopDispatchActionType:\n            cancelAction(startDispatchActionType, action.type);\n            break;\n\n          default:\n            break;\n        }\n      });\n    }\n\n    function processPostEventActions() {\n      let preprocessedActions = 0;\n      let i;\n\n      // Now we've pre-processed the list, execute any remaining non-null entries.  We don't use a\n      // foreach loop since foreach won't include elements added after processing has started.  This\n      // can occur if a callback causes more postEventActions to be added.\n      LOG_TRACE('Executing post event action list', postEventActions);\n      for (i = 0; i < postEventActions.length; ++i) {\n        if (preprocessedActions < postEventActions.length) {\n          preprocessPostEventActions(i);\n          preprocessedActions = postEventActions.length;\n        }\n        const action = postEventActions[i];\n        LOG_TRACE(`Action ${i}:`, action);\n        if (!action) {\n          continue;\n        }\n        switch (action.type) {\n          case emitEventActionType:\n            if (action.error !== undefined) {\n              consumer._emit(action.data, action.error);\n            } else {\n              consumer._emit(action.data);\n            }\n            break;\n\n          case stopDispatchActionType:\n            // We don't actually do the stop here -- it is always done when this is enqueued.\n            // The reason for enqueuing this event is to that it can cencel a startDispatch, if\n            // present.\n            break;\n\n          case startDispatchActionType:\n            this.requestStartDispatchFSM();\n            break;\n\n          default:\n            LOG_ERROR(`Unhandled post event action type: ${action.type}`);\n            break;\n        }\n      }\n      postEventActions = [];\n    }\n\n    function addPostEventAction(type, data, error) {\n      let newEvent;\n      if (data !== undefined) {\n        newEvent = { type, data, error };\n      } else {\n        newEvent = { type };\n      }\n      postEventActions.push(newEvent);\n      LOG_TRACE(`Added post event action ${postEventActions.length}:`, newEvent);\n      if (postEventActions.length === 1) {\n        fsm.setPostEventAction(processPostEventActions);\n      }\n    }\n\n    const addEventToEmit = (event, error) => {\n      if (!properties.activeIndicationEnabled) {\n        if ((event === MessageConsumerEventName.INACTIVE) ||\n            (event === MessageConsumerEventName.ACTIVE)) {\n          LOG_TRACE(`Skip emitting ${event} due to disabled flow active indications`);\n          return;\n        }\n      }\n      addPostEventAction(emitEventActionType, event, error);\n    };\n    const requestStartDispatch = () => {\n      addPostEventAction(startDispatchActionType);\n    };\n    const requestStopDispatch = () => {\n      // We do the stop inline, then add a post-event action so that it can have the effect of\n      // cancelling a previous start.  It will not execute the stop when processed however since we\n      // have already done it here.\n      this.requestStopDispatchFSM();\n      addPostEventAction(stopDispatchActionType);\n    };\n\n    this._addEventToEmit = addEventToEmit;\n    this._requestStartDispatch = requestStartDispatch;\n    this._requestStopDispatch = requestStopDispatch;\n\n    // End of post-event action infrastructure\n\n    // Utility functions\n    function emitBindFailed(error) {\n      assert(error instanceof OperationError);\n      consumer._emit(MessageConsumerEventName.CONNECT_FAILED_ERROR, error);\n    }\n\n    function emitRebindFailed(error) {\n      assert(error instanceof OperationError);\n      consumer._emit(MessageConsumerEventName.DOWN_ERROR, error);\n    }\n\n    function verifyEndpointSubscription(destination) {\n      let error = null;\n      if (destination) {\n        const subInfo = destination.getSubscriptionInfo();\n        if (subInfo && (subInfo.isShare || subInfo.isNoExport) &&\n            !fsm._sessionInterface.isCapable(CapabilityType.SHARED_SUBSCRIPTIONS)) {\n          error = new OperationError('Shared Subscriptions not Supported',\n                                     ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED);\n        }\n      }\n      return error;\n    }\n    //**********************************************************************************************\n    // ChoicePoints on transitions.\n    // Not every transition is  unilateral. In some cases, particularly with session-up/flow-open\n    // we want to check the session capabilities, which will effect which transition is taken.\n    // The following choicePoints are NOT generic, they may only be used in the documented states\n    // to control the transition out of that state.\n    // ChoicePoints must return a new state (this.transitionTo())\n    //\n    // checkCapabiltiesChoicePoint - Check the session capabilities against the consumer properties.\n    // If all requested properties are supported by the session capabilties, transitionTo(BindSent).\n    // otherwise emitError and transitionTo unbound.\n    // Used in:  fsm.Unbound.AwaitFlowOpen\n    //           fsm.Unbound.AwaitSessionUp\n    //\n    function checkCapabilitiesChoicePoint(curState) {\n      let error = null;\n      if (fsm._replayStartLocation !== undefined &&\n        !fsm._sessionInterface.isCapable(CapabilityType.MESSAGE_REPLAY)) {\n        error = new OperationError('Message Replay Not Supported',\n              ErrorSubcode.REPLAY_NOT_SUPPORTED);\n      } else if (properties.topicEndpointSubscription) {\n        error = verifyEndpointSubscription(properties.topicEndpointSubscription);\n      }\n\n      if (error) {\n        // Transition to Unbound means we wait for both SessionUp and flow open, which is rare.\n        // It makes sense here though, because the next session might be capable,\n        // but this one surely isn't.\n        // (and FLOW_DOWN is emitted, so we are waiting for both.)\n        return curState.transitionTo(fsm.Unbound, () =>\n              emitBindFailed(error));\n      }\n      // OK to bind\n      if (properties.createIfMissing &&\n        properties.queueDescriptor &&\n        properties.queueDescriptor.durable) {\n        return curState.transitionTo(fsm.CreateSent);\n      }\n      return curState.transitionTo(fsm.BindSent);\n    }\n    // End of ChoicePoints\n    //*********************************************************************************************\n    // FSM config\n\n    function handleAccidentalBind(msg) {\n      // Unbind with timout-recursion using flowid.\n\n      LOG_TRACE(`handleAccidentalBind mssg: ${msg}`);\n      const correlationTag = sessionInterface.getCorrelationTag();\n      const message = SMFLib.AdProtocolMessage.getCloseMessageConsumer(msg.flowId, correlationTag);\n      sessionInterface.sendControl(message);\n      sessionInterface.enqueueRequest(\n        correlationTag,\n        () => this.handleAccidentalBind(msg),\n        properties.connectTimeoutInMsecs,\n        null,\n        null); //ignore response. Maybe log?\n    }\n\n    this.unhandledEventReaction(function onUnhandledEvent(event) {\n      switch (event.getName()) {\n        case ConsumerFSMEventNames.VIRTUALROUTER_NAME_CHANGED:\n          LOG_INFO('VirtualRouter name change: clearing all acknowledgement state');\n          fsm._resetRemoteConnectionState();\n          return this;\n        case ConsumerFSMEventNames.FLOW_UNBOUND:\n          LOG_INFO('Received unsolicited unbind. Flow may be manually reconnected.');\n          return this.transitionToUnbound(MessageConsumerEventName.DOWN_ERROR, event.details);\n        case ConsumerFSMEventNames.DISPOSE:\n          fsm._dispose();\n          return fsm.getCurrentState().terminate();\n        case ConsumerFSMEventNames.BIND_RESPONSE:\n          LOG_TRACE('Unhandled bind, assuming accidental BIND duplication');\n          handleAccidentalBind(event.details);\n          return this;\n        default:\n          LOG_TRACE(`Ignoring event ${event.getName()} in state ${this.getCurrentState().getName()}`);\n          return this;\n      }\n    });\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.Unbound, (context) => {\n        LOG_INFO(`Starting ${context.getStateMachine().getName()}`);\n      });\n    });\n\n    /*\n      We don't transition directly from Unbound to BindSent.\n      We need the following events:\n       * FLOW_OPEN\n       * SESSION_UP\n      (The session ensures we get SESSION_UP or SESSION_UP_NO_AD if we are created\n      and there is a session already up.)\n      The Unbound base state implements transitions to its wait state children:\n       * FLOW_OPEN -> AwaitSessionUp\n       * SESSION_UP -> AwaitFlowOpen\n      It also has the following transitions that pull the FSM out of its children\n      and back to itself:\n       * FLOW_CLOSE\n       * SESSION_DOWN\n      The child states can override these with internal transitions.\n     */\n    this.Unbound = new State({\n      name:          ConsumerStateNames.UNBOUND,\n      parentContext: fsm,\n    }, {\n      emitDisabledEvent() {\n        consumer._emit(MessageConsumerEventName.GM_DISABLED);\n      },\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSesssionDisconnect() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_OPEN, function onFlowOpen() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp); // Enter child state\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        if (fsm._sessionInterface.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME)) {\n          return this.transitionTo(fsm.Unbound.AwaitFlowOpen); // Enter child state\n        }\n        LOG_WARN(`Consumer is not supported by router for this client on sessionId 0x${\n                 fsm._sessionInterface.sessionIdHex}`);\n        // Act as if the child state handled this\n        return this.internalTransition(() => this.emitDisabledEvent());\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP_NO_AD, function onSessionUpNoAD() {\n        // Act as if the child state handled this\n        return this.internalTransition(() => this.emitDisabledEvent());\n      })\n      .exit(() => {\n        fsm._connectAttempts = properties.connectAttempts;\n      });\n\n    /*\n      In this state, we have received FLOW_OPEN, but no SESSION_UP.\n      SESSION_DOWN does not cancel this wait, so we must override the\n      parent and explicitly do nothing.\n    */\n    this.Unbound.AwaitSessionUp = new State({\n      name:          ConsumerStateNames.UNBOUND_AWAIT_SESSION_UP,\n      parentContext: this.Unbound,\n    }, {\n      emitBindWaiting() {\n        consumer._emit(PrivateFlowEventName.BIND_WAITING);\n      },\n    })\n      .entry(function onEntry() {\n        this.emitBindWaiting();\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.internalTransition(); // Don't exit; continue waiting\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.internalTransition(); // Don't exit; continue waiting\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        return checkCapabilitiesChoicePoint(this);\n      });\n\n    /*\n      In this state, we have received SESSION_UP but not FLOW_OPEN.\n      If we get FLOW_OPEN, attempt to bind. Any other event is handled\n      by the parent.\n     */\n    this.Unbound.AwaitFlowOpen = new State({\n      name:          ConsumerStateNames.UNBOUND_AWAIT_FLOWOPEN,\n      parentContext: this.Unbound,\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_OPEN, function onFlowOpen() {\n        return checkCapabilitiesChoicePoint(this);\n      });\n    // Factored out the extension object from the State constructor for reuse in\n    // flow auto-reconnect sister-states.\n    this.BindSentExtensions = {\n      sendBindRequest() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const transportAcks = fsm._transportAcks;\n\n        fsm._endpointEnsure();\n        const endpoint = fsm._endpoint;\n        const subscription = fsm._subscription;\n\n        const message = SMFLib.AdProtocolMessage.getOpenMessageConsumer(\n          properties.queueDescriptor,\n          properties.queueProperties,\n          endpoint,\n          subscription,\n          correlationTag,\n          properties.windowSize,\n          properties.noLocal,\n          properties.activeIndicationEnabled,\n          transportAcks.lastAcked,\n          transportAcks.lastReceived,\n          properties.browser,\n          fsm._replayStartLocation,\n          consumer.endpointErrorId);\n        sessionInterface.sendControl(message);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        this.handleBindTimeout.bind(this),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        this.handleBindResponse.bind(this));\n        LOG_TRACE('Sent consumer bind request with arguments', [\n          properties.queueDescriptor,\n          properties.queueProperties,\n          endpoint,\n          subscription,\n          correlationTag,\n          properties.windowSize,\n          properties.noLocal,\n          properties.activeIndicationEnabled,\n          transportAcks.lastAcked,\n          transportAcks.lastReceived,\n          properties.browser,\n          fsm._replayStartLocation,\n          consumer.endpointErrorId]);\n      },\n      cancelBindRequestTimer() {\n        LOG_TRACE('Cancelling bindRequestTimer.');\n        this.bindRequestTimer.cancel();\n      },\n      handleBindTimeout() {\n        LOG_INFO('Bind timeout');\n        fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.BIND_TIMEOUT }));\n      },\n      handleExpectedBind(msg) {\n        const accessTypeOrDefault = x => (x === undefined ? QueueAccessType.EXCLUSIVE : x);\n\n        const attrs = {\n          lastMsgIdAcked:       msg.getLastMsgIdAcked(),\n          flowId:               msg.getFlowId(),\n          accessType:           accessTypeOrDefault(msg.getAccessType()),\n          topicEndpointBytes:   msg.getTopicEndpointBytes(),\n          grantedPermissions:   msg.getGrantedPermissions(),\n          allOthersPermissions: msg.getAllOthersPermissions(),\n          respectsTTL:          msg.getRespectsTTL(),\n          activeFlow:           msg.getActiveFlow(),\n          wantFlowChangeNotify: msg.getWantFlowChangeNotify(),\n          discardBehavior:      msg.getQueueDiscardBehavior(),\n          deliveryCountSent:    msg.getEndpointDeliveryCountSent(),\n          endpointId:           msg.getEndpointId(),\n          maxUnackedMessages:   msg.getMaxUnackedMessages(),\n          endpointErrorId:      msg.getEndpointErrorId(),\n          spoolerUniqueId:      msg.getSpoolerUniqueId(),\n          quota:                msg.getQuota(),\n          maxMsgSize:           msg.getMaxMsgSize(),\n          maxRedelivery:        msg.getMaxRedelivery(),\n        };\n        LOG_DEBUG('BIND response attributes:', attrs);\n\n        Object.assign(consumer, {\n          accessType:           attrs.accessType,\n          queueDiscardBehavior: attrs.discardBehavior,\n          deliveryCountSent:    attrs.deliveryCountSent,\n          endpointId:           attrs.endpointId,\n          respectsTTL:          attrs.respectsTTL,\n          flowId:               attrs.flowId,\n          permissions:          attrs.grantedPermissions,\n          wantFlowChangeNotify: attrs.wantFlowChangeNotify,\n          endpointErrorId:      attrs.endpointErrorId,\n          spoolerUniqueId:      attrs.spoolerUniqueId,\n        });\n        if (fsm._sessionInterface.isCapable(CapabilityType.BR_REPLAY_ERRORID)) {\n          consumer.endpointErrorId = attrs.endpointErrorId;\n        }\n\n        if (attrs.topicEndpointBytes && attrs.topicEndpointBytes.length) {\n          attrs.endpoint = DestinationFromNetwork.createDestinationFromBytes(\n            attrs.topicEndpointBytes);\n          LOG_DEBUG('Overwriting local endpoint:', fsm._endpoint, 'with remote:', attrs.endpoint);\n          fsm._endpoint = attrs.endpoint;\n          const consumerProperties = fsm._consumer._properties;\n          consumerProperties.queueDescriptor = new QueueDescriptor({\n            name:    attrs.endpoint.name,\n            type:    consumerProperties.queueDescriptor.type,\n            durable: consumerProperties.queueDescriptor.durable,\n          });\n        }\n\n        const consumerProperties = fsm._consumer._properties;\n        consumerProperties.queueProperties = new QueueProperties({\n          respectsTTL:          attrs.respectsTTL,\n          permissions:          attrs.allOthersPermissions,\n          quotaMB:              attrs.quota,\n          maxMessageSize:       attrs.maxMsgSize,\n          discardBehavior:      attrs.discardBehavior,\n          maxMessageRedelivery: attrs.maxRedelivery,\n          accessType:           attrs.accessType,\n        });\n        if (!consumerProperties.queueProperties.permissions) {\n          consumerProperties.queueProperties.permissions = QueuePermissions.NONE;\n        }\n\n\n        Object.assign(fsm, {\n          _active:           attrs.activeFlow,\n          _remoteWindowSize: attrs.maxUnackedMessages,\n        });\n\n        if (Long.UZERO.eq(fsm._transportAcks.lastAcked)) {\n          fsm._transportAcks.lastAcked = attrs.lastMsgIdAcked || Long.UZERO;\n        } else {\n          LOG_DEBUG(`Retaining last acked/last received: ${fsm._transportAcks}`);\n        }\n        //return this.transitionTo(fsm.FlowUp);\n        //return fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_UP }));\n      },\n      handleBindResponse(msg) {\n        LOG_TRACE(`handleBindResponse called for message ${msg}`);\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.BIND) {\n          LOG_INFO(`Unexpected message type in bind response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n          return fsm.processEvent(\n            new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.FLOW_FAILED },\n              new OperationError(`Unexpected bind response: ${\n                                 SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`,\n                                 ErrorSubcode.PROTOTOCOL_ERROR)));\n        }\n\n        const header = msg.smfHeader;\n        const responseCode = header.pm_respcode;\n\n        if (responseCode === null) {\n          // Drop message and increment stats. Flow will time out\n          this._consumer.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Open-Publisher-Flow Request message on sessionId 0x${\n                    this._sessionInterface.sessionIdHex}`);\n          return undefined;\n        }\n\n        if (responseCode !== 200) {\n          const description = header.pm_respstr;\n          const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                            description);\n          LOG_INFO('Flow failed (bind):', responseCode, description, ErrorSubcode.describe(errorSubcode));\n          LOG_DEBUG('subcode:', errorSubcode);\n          return fsm.processEvent(new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.FLOW_FAILED },\n              new OperationError(description, errorSubcode, { responseCode })));\n        }\n\n        const respEvent = { name: ConsumerFSMEventNames.BIND_RESPONSE };\n        return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n      },\n    };\n    this.BindSent = new State({\n      name:          ConsumerStateNames.BIND_SENT,\n      parentContext: fsm,\n    }, this.BindSentExtensions)\n      .entry(function onEntry() {\n        fsm._connectAttempts--;\n        this.sendBindRequest();\n        this.bindRequestTimer = Timer.newTimeout(properties.connectTimeoutInMsecs,\n                                                 this.handleBindTimeout);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.DOWN));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.BIND_TIMEOUT, function onBindTimeout() {\n        LOG_TRACE(`Bind timeout, connectAttempts left: ${fsm._connectAttempts}`);\n        if (fsm._connectAttempts > 0) {\n          return this.externalTransitionTo(fsm.BindSent);\n        }\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen,\n                                 () => emitBindFailed(\n                                    new OperationError('Bind failed due to timeout',\n                                                       ErrorSubcode.TIMEOUT)));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_FAILED, function onFlowFailed(evt) {\n        // Act like a newly created flow\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitBindFailed(evt.details));\n      })\n      .reaction(ConsumerFSMEventNames.BIND_RESPONSE, function onBindResponse(event) {\n        this.handleExpectedBind(event.details);\n        //return this;\n        return this.transitionTo(fsm.FlowUp);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.FlowUp);\n      })\n      .exit(function onExit() {\n        this.cancelBindRequestTimer();\n      });\n    this.Reconnecting = new State({\n      name:          ConsumerStateNames.RECONNECTING,\n      parentContext: fsm,\n    })\n      .entry(function onEntry() {\n        LOG_TRACE('RECONNECTING onEntry: emitting RECONNECTING, resetting attempt counters');\n        LOG_TRACE(`this._errorCausingReconnect: ${this._errorCausingReconnect}`);\n        LOG_TRACE(`fsm._errorCausingReconnect: ${fsm._errorCausingReconnect}`);\n        consumer._emit(MessageConsumerEventName.RECONNECTING, fsm._errorCausingReconnect);\n        fsm._connectAttempts = properties.connectAttempts;\n        fsm.reconnectAttempts = properties.reconnectAttempts;\n      })\n      .initial(\n        function onInitial() {\n          return this.transitionTo(fsm.Reconnecting.RBindSent);\n        })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.transitionTo(fsm.Reconnecting.RAwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Reconnecting.RAwaitSessionUp);\n      });\n    this.Reconnecting.RAwaitSessionUp = new State({\n      name:          ConsumerStateNames.RECONNECTING_AWAIT_SESSION_UP,\n      parentContext: this.Reconnecting,\n    })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        fsm._connectAttempts = properties.connectAttempts;\n        return this.transitionTo(fsm.Reconnecting.RBindSent);\n      });\n    this.Reconnecting.RBindSent = new State({\n      name:          ConsumerStateNames.RECONNECTING_BIND_SENT,\n      parentContext: this.Reconnecting,\n    }, this.BindSentExtensions)\n      .entry(function onEntry() {\n        fsm._connectAttempts--;\n        this.sendBindRequest();\n        this.bindRequestTimer = Timer.newTimeout(properties.connectTimeoutInMsecs,\n                                                 this.handleBindTimeout);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        // TODO: This is probably wrong in the original state machine too:\n        // flowid is either missing or stale. Keeping it the same as there for now.\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.BIND_TIMEOUT, function onBindTimeout() {\n        LOG_TRACE(`Bind timeout during reconnect, connectAttempts left: ${fsm._connectAttempts}`);\n        if (fsm._connectAttempts > 0) {\n          return this.externalTransitionTo(fsm.Reconnecting.RBindSent);\n        }\n        // Running out of rebinds is a non rebindable failure, so break the reconect loop.\n        LOG_TRACE('Running out of rebinds is a non rebindable failure, so break the reconect loop.');\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen,\n                                 () => emitBindFailed(\n                                    new OperationError('Rebind failed due to timeout',\n                                                       ErrorSubcode.TIMEOUT)));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_FAILED, function onFlowFailed(evt) {\n        // These three reconnect-errors are \"rebindable\",\n        // anything else breaks the reconnect loop.\n        if (fsm.reconnectAttempts > 0 || fsm.reconnectAttempts === -1) {\n          if (evt && evt.details && evt.details.subcode) {\n            if (evt.details.subcode === ErrorSubcode.QUEUE_SHUTDOWN ||\n              evt.details.subcode === ErrorSubcode.TOPIC_ENDPOINT_SHUTDOWN ||\n              evt.details.subcode === ErrorSubcode.GM_UNAVAILABLE) {\n              LOG_TRACE(`ReconnectAttempts left: ${fsm.reconnectAttempts} subcode: ${evt.details.subcode}, giving it another shot.`);\n              return this.transitionTo(fsm.Reconnecting.RAwaitTimer);\n            }\n          } else {\n            LOG_DEBUG(`Hmm, no subcode in FLOW_FAILED? ${evt}`);\n          }\n        } else {\n          LOG_TRACE(`Ran out of reconnectAttempts: ${fsm.reconnectAttempts}`);\n        }\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitRebindFailed(evt.details));\n      })\n      .reaction(ConsumerFSMEventNames.BIND_RESPONSE, function onBindResponse(event) {\n        this.handleExpectedBind(event.details);\n        //return this;\n        return this.transitionTo(fsm.FlowUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.RECONNECTED));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.FlowUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.RECONNECTED));\n                                 //() => consumer._emit(MessageConsumerEventName.RECONNECTING));\n      })\n      .exit(function onExit() {\n        this.cancelBindRequestTimer();\n      });\n    this.Reconnecting.RAwaitTimer = new State({\n      name:          ConsumerStateNames.RECONNECTING_AWAIT_TIMER,\n      parentContext: this.Reconnecting,\n    }, {\n      handleReconnectIntervalTimeout() {\n        LOG_DEBUG('Reconnect interval timeout (expected)');\n        fsm.processEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.RECONNECT_INTERVAL_TIMEOUT }));\n      },\n      cancelReconnectIntervalTimer() {\n        this.reconnectIntervalTimer.cancel();\n      },\n\n    }).entry(function onEntry() {\n      if (fsm.reconnectAttempts > 0) {\n        --fsm.reconnectAttempts;\n      }\n      LOG_TRACE(`Setting up timer for ${properties.reconnectIntervalInMsecs}. reconnectAttempts left: ${fsm.reconnectAttempts}`);\n      this.reconnectIntervalTimer = Timer.newTimeout(properties.reconnectIntervalInMsecs,\n                                                     this.handleReconnectIntervalTimeout);\n    }).exit(function onExit() {\n      this.cancelReconnectIntervalTimer();\n    }).reaction(ConsumerFSMEventNames.RECONNECT_INTERVAL_TIMEOUT, function onTimeout() {\n      fsm._connectAttempts = properties.connectAttempts;\n      return this.transitionTo(fsm.Reconnecting.RBindSent);\n    })\n    ;\n\n    const flowUpFSM = this.FlowUp = new State({\n      name:          ConsumerStateNames.FLOW_UP,\n      parentContext: fsm,\n    })\n      .initial(\n        function onInitial() {\n          return this.transitionTo(fsm._active === 0\n            ? flowUpFSM.XferInactive\n            : flowUpFSM.Xfer);\n        }\n      )\n      .entry(() => {\n        fsm._replayStartLocation = undefined; //SOL-12945: only replay once.\n        // This is ugly, but I can't coerce the post event action queue to work with me:\n        // RECONNECTING should suppress UP.\n        if (!fsm._errorCausingReconnect) {\n          LOG_TRACE('Emittging UP, because there is no errorCausingReconnect');\n          fsm._addEventToEmit(MessageConsumerEventName.UP);\n        } else {\n          LOG_TRACE('Not emittging UP, because there is errorCausingReconnect');\n          fsm._errorCausingReconnect = null;\n        }\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDisconnect() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.DOWN));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        // Acks will be sent by UnbindSent\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UNBOUND, event =>\n        // Acks will be sent by UnbindSent\n        fsm.transitionToUnboundFromUp(\n          properties,\n          MessageConsumerEventName.DOWN_ERROR,\n          event.details)\n      );\n\n    flowUpFSM.Xfer = new State({\n      name:          ConsumerStateNames.FLOW_UP_XFER,\n      parentContext: flowUpFSM,\n    })\n      .entry(() => {\n        fsm._addEventToEmit(MessageConsumerEventName.ACTIVE);\n        fsm._sendAcks(true);\n        fsm._requestStartDispatch();\n      })\n      .exit(() => {\n        fsm._addEventToEmit(MessageConsumerEventName.INACTIVE);\n        fsm._requestStopDispatch();\n      })\n      // Here we send acks on disconnect.  Acks for the FLOW_CLOSE event are coupled to the sending\n      // of the unbind.\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        fsm._sendAcks(true);            // send acks, then...\n        return this.eventUnhandled();   // let the parent state handle the remaining steps.\n      });\n\n    flowUpFSM.XferInactive = new State({\n      name:          ConsumerStateNames.FLOW_UP_XFER_INACTIVE,\n      parentContext: flowUpFSM,\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_ACTIVE_IND, function onFlowActiveIndication() {\n        return this.transitionTo(flowUpFSM.Xfer);\n      });\n\n    this.UnbindSent = new State({\n      name:          ConsumerStateNames.UNBIND_SENT,\n      parentContext: fsm,\n    }, {\n\n      sendUnbindRequest() {\n        // Don't do this on entry to UNBIND, do it when the user\n        // wants to unbind\n\n        fsm._endpointClear();\n        try {\n          const correlationTag = sessionInterface.getCorrelationTag();\n          const message = SMFLib.AdProtocolMessage.getCloseMessageConsumer(consumer.flowId,\n                                                                           correlationTag);\n          sessionInterface.sendControl(message);\n          sessionInterface.enqueueRequest(\n            correlationTag,\n            () => this.handleUnbindTimeout(),\n            properties.connectTimeoutInMsecs,\n            null,\n            response => this.handleUnbindResponse(response));\n          LOG_INFO('Sent consumer unbind request with arguments',\n                   {\n                     flowId: consumer.flowId,\n                     correlationTag,\n                   });\n        } catch (e) {\n          LOG_INFO(`Exception in sendUnbindRequest while trying to send unbind request: ${e}`);\n          LOG_DEBUG(`Session (${sessionInterface.getCurrentStateName()}) assumed lost before flow unbind could be sent. Considering this flow unbound.`);\n          fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_UNBOUND }));\n        }\n      },\n\n      handleUnbindTimeout() {\n        LOG_INFO('Unbind timeout');\n        return fsm.processEvent(\n          new ConsumerFSMEvent({ name: ConsumerFSMEventNames.UNBIND_TIMEOUT })\n        );\n      },\n\n      handleUnbindResponse(msg) {\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.UNBIND) {\n          LOG_INFO(`Unexpected message type in bind response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n        }\n        const responseCode = msg.smfHeader.pm_respcode;\n        const description = msg.smfHeader.pm_respstr;\n        const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                          description);\n        consumer.endpointErrorId = msg.getEndpointErrorId();\n        LOG_INFO('Flow failed (unbind):', responseCode, description, ErrorSubcode.describe(errorSubcode));\n        return fsm.processEvent(new ConsumerFSMEvent(\n          { name: ConsumerFSMEventNames.FLOW_UNBOUND },\n          new OperationError(description, errorSubcode, responseCode)));\n      },\n\n    })\n      .entry(function onEntry() {\n        this.sendUnbindRequest();\n      })\n      .reaction(ConsumerFSMEventNames.UNBIND_TIMEOUT, function onUnbindTimeout() {\n        return this.externalTransitionTo(fsm.UnbindSent);\n      })\n      // The choice point will emit on this transition, not on exit, which is OK:\n      // we don't want to repeatedly dispatch \"unbound\" when the unbinds are timing out\n      .reaction(ConsumerFSMEventNames.FLOW_UNBOUND,\n                () => fsm.transitionToUnbound(MessageConsumerEventName.DOWN));\n\n\n    this.CreateSent = new State({\n      name:          ConsumerStateNames.CREATE_SENT,\n      parentContext: fsm,\n    }, {\n      sendCreateRequest() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const message = SMFLib.AdProtocolMessage.getCreate(\n          properties.queueDescriptor,\n          properties.queueProperties,\n          correlationTag);\n        sessionInterface.sendControl(message);\n        sessionInterface.enqueueRequest(\n          correlationTag,\n          this.handleCreateTimeout.bind(this),\n          properties.connectTimeoutInMsecs,\n          null,\n          this.handleCreateResponse.bind(this));\n      },\n      handleCreateTimeout() {\n        LOG_INFO('Create timeout');\n        fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.CREATE_TIMEOUT }));\n      },\n      handleCreateResponse(msg) {\n        LOG_TRACE(`handleCreateResponse called for message ${msg}`);\n\n\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.CREATE) {\n          LOG_INFO(`Unexpected message type in create response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n          return fsm.processEvent(\n            new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.CREATE_FAILED },\n              new OperationError(`Unexpected create response: ${\n                                 SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`,\n                                 ErrorSubcode.PROTOTOCOL_ERROR)));\n        }\n\n        const header = msg.smfHeader;\n        const responseCode = header.pm_respcode;\n\n        if (responseCode !== 200) {\n          const description = header.pm_respstr;\n          const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                            description);\n          LOG_INFO('Endpoint create failed:', responseCode, description, ErrorSubcode.describe(errorSubcode));\n          LOG_DEBUG('subcode:', errorSubcode);\n          if (errorSubcode === ErrorSubcode.ENDPOINT_ALREADY_EXISTS) {\n            LOG_TRACE('subcode recognized as ALREADY EXISTS:', errorSubcode);\n            const respEvent = { name: ConsumerFSMEventNames.CREATE_SUCCESS };\n            return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n          }\n          LOG_TRACE('subcode not recognized as ALREADY EXISTS:', errorSubcode);\n          return fsm.processEvent(new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.CREATE_FAILED },\n              new OperationError(description, errorSubcode, { responseCode })));\n        }\n\n        const respEvent = { name: ConsumerFSMEventNames.CREATE_SUCCESS };\n        return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n      },\n    }\n    )\n      .entry(function onEntry() {\n        //send create request\n        this.sendCreateRequest();\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_TIMEOUT, function onCreateTimeout() {\n        LOG_DEBUG('Create timeout, just moving on to bind and hoping for the best.');\n        return this.externalTransitionTo(fsm.BindSent);\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_SUCCESS, function onCreateSuccess() {\n        return this.externalTransitionTo(fsm.BindSent);\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_FAILED, function onCreateFailed(evt) {\n        // \"queue exists\" should be noticed in the response handler and emit CREATE_SUCCESS.:\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitBindFailed(evt.details));\n      });\n  }\n\n  /**\n   *\n   * @param {solace.Message} message The message being accepted by the flow.\n   * @returns {Boolean} True if the message was accepted.\n   * @private\n   */\n  acceptMessage(message) {\n    const { LOG_TRACE, LOG_DEBUG } = this.logger;\n    const messageID = message.getGuaranteedMessageId();\n    const idstr = messageID.toString();\n    const consumer = this._consumer;\n\n    if (!this._fsmDispatch) {\n      // We're disconnecting. Drop the message.\n      LOG_TRACE('Dropping message because this flow cannot acknowledge it');\n      consumer.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n      return false;\n    }\n    //Booby trap getDeliveryCount() on the message if the flow doesn't support it:\n    if (!consumer.deliveryCountSent) {\n      message.setDeliveryCount(-1);\n    }\n    // SMF flow suid can be updated via data message if there is a\n    // header parameter containing the suid. All subsequent data messages\n    // without suid must have the stored Flow suid set on data message.\n    //\n    // Update flow with message suid if and only if there was an initialized\n    // suid from the flow bind response.\n    // There is a legacy router case where suid are passed opaquely through the\n    // network of brokers on the message. In the case where a suid is present\n    // on a message without a suid on the bind response this indicates the suid\n    // is not an update to subsequent messages suid values. As the current broker\n    // connected does not support suid generation or assignment.\n    //\n    // Note a spooler unique id is only set if the message SMF\n    // contained the SpoolerUniqueId header parameter.\n    // See decode for details.\n    const messageSuid = message._getSpoolerUniqueId();\n    if (RgmidFactory.INVALID_SUID.eq(messageSuid)) {\n      // set the message suid value to stored consumer suid value\n      message._setSpoolerUniqueId(consumer.spoolerUniqueId);\n    } else if (consumer.spoolerUniqueId !== undefined\n        && !RgmidFactory.INVALID_SUID.eq(consumer.spoolerUniqueId)) {\n      // otherwise update the consumer with new suid value if consumer suid was initialized\n      const consumerSuidStr = consumer.spoolerUniqueId.toString();\n      const msgSuidStr = messageSuid.toString();\n      LOG_DEBUG('Updating Consumer message spoolerUniqueId from ', consumerSuidStr,\n                ' to ', msgSuidStr);\n      consumer.spoolerUniqueId = messageSuid;\n    } else if ((consumer.spoolerUniqueId === undefined\n        || RgmidFactory.INVALID_SUID.eq(consumer.spoolerUniqueId))\n        && !RgmidFactory.INVALID_SUID.eq(messageSuid)) {\n      // clear the message spooler unique id on flows without initial spooler\n      // unique id as rmid is not supported\n      message._setSpoolerUniqueId(RgmidFactory.INVALID_SUID);\n    }\n\n    const transportAcks = this._transportAcks;\n    const ackResult = transportAcks.tryReceive(messageID,\n                                               message.getGuaranteedPreviousMessageId());\n    const transportAckRequired = transportAcks.acksPending > this.maxPendingAcks;\n    switch (ackResult) {\n      case TransportAckResult.OK:\n        break; // carry on\n      case TransportAckResult.DUPLICATE:\n        consumer.incStat(StatType.RX_DISCARD_DUPLICATE);\n        // Two options here: could check membership in the ringbuffer,\n        // or could check whether the ID is less than ringbuffer.front().\n        // Untested assumption: arithmetic comparison on boxed Long at front()\n        // is more computationally expensive than native Map() lookup.\n        if (!this._applicationAcks.has(messageID) &&\n            !this._oldUnacked.has(idstr)) {\n          LOG_TRACE('Will application ack unknown duplicate ID', idstr);\n          this._sendAck([[messageID, messageID]]);\n        } else if (transportAckRequired) {\n          this._sendAcks(transportAckRequired);\n        } else {\n          // if we are receiving dups we should make sure we send\n          // and ack in case we don't receive any non duplicates\n          // and we don't receive enough duplicates to exceed\n          // maxPendingAcks.  Eventually we would but only after\n          // the  router retransmitted many times.\n          this._setTransportAckTimer();\n        }\n        return false;\n      case TransportAckResult.OUT_OF_ORDER:\n        consumer.incStat(StatType.RX_DISCARD_OUT_OF_ORDER);\n        return false;\n      default:\n        assert(false, 'Unhandled transport ack result', ackResult);\n        return false;\n    }\n\n    return this._applicationAcks.insert(messageID, (evicting) => {\n      let applicationAckRequired = false;\n      if (evicting) {\n        switch (evicting.state) {\n          case ApplicationAckState.UNACKED:\n            this._oldUnacked.add(evicting.key);\n            break;\n          case ApplicationAckState.ACKED_NOT_SENT:\n            applicationAckRequired = true;\n            break;\n          case ApplicationAckState.ACKED_SENT:\n            // OK to evict\n            break;\n          default:\n            assert(false,\n                   'Unhandled application ack state',\n                   ApplicationAckState.describe(evicting.state));\n        }\n      }\n\n      this._midDispatch = true;\n      this._messageDispatch.push(message);\n      this._midDispatch = false;\n\n      if (transportAckRequired || applicationAckRequired) {\n        LOG_TRACE('Need to send acks:',\n                  'transport', transportAckRequired,\n                  'application', applicationAckRequired);\n        this._sendAcks(transportAckRequired);\n      } else {\n        this._setTransportAckTimer();\n      }\n\n      return true;\n    });\n  }\n\n  applicationAck(messageId) {\n    const { LOG_TRACE } = this.logger;\n\n    const idstr = messageId.toString();\n    this._consumer.incStat(StatType.RX_ACKED);\n\n    // Was the message old, and demoted to _oldUnacked?\n    if (this._oldUnacked.delete(idstr)) { // True if idstr was member\n      // It was old. Ack immediatesly.\n      LOG_TRACE('Application acking old message immediately');\n      this._sendAck([[messageId, messageId]]);\n      return;\n    }\n\n    // We can't regress the ack_state this way; message.acknowledge() throws if called\n    // more than once.\n    this._applicationAcks.updateAckState(messageId, ApplicationAckState.ACKED_NOT_SENT);\n    this._setTransportAckTimer();\n  }\n\n  getDestination() {\n    this._endpointEnsure();\n    return this._destination;\n  }\n\n  isDisconnected() {\n    if (!this.getCurrentState()) return true;\n    return (\n      this.getActiveState(ConsumerStateNames.UNBOUND) ||\n      this.getActiveState(ConsumerStateNames.UNBOUND_AWAITING_FLOWOPEN)\n    );\n  }\n\n  requestStartDispatchUser() {\n    this._userDispatch = true;\n    this.applyStartDispatch();\n  }\n\n  requestStartDispatchFSM() {\n    this._fsmDispatch = true;\n    this.applyStartDispatch();\n  }\n\n  applyStartDispatch() {\n    if (this._userDispatch && this._fsmDispatch) {\n      this.log(`Starting message dispatch (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n      this._messageDispatch.start();\n      this._localMaxWindowSize = this._localPreferredWindowSize;\n      this._sendAcks(true);\n    } else {\n      this.log(`Not starting message dispatch (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    }\n  }\n\n  transitionToUnbound(eventName, error) {\n    const consumer = this._consumer;\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Flow down, user disconnected?', consumer.userDisconnected);\n\n    return this.transitionTo(this.Unbound.AwaitFlowOpen, () =>\n      this._addEventToEmit(eventName, error));\n  }\n\n  transitionToUnboundFromUp(properties, eventName, error) {\n    const consumer = this._consumer;\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Choice point for FLOW_UNBOUND in FlowUp state.');\n    // Always clear duplicate filter state on \"Replay started\"\n    // (no way to maintain it and drop the replayed messages as duplicates)\n    if (error && error instanceof OperationError && error.subcode) {\n      if (error.subcode === ErrorSubcode.REPLAY_STARTED) {\n        // \"this\" is the fsm.\n        this._transportAcks.reset();\n        this._applicationAcks.reset();\n      }\n    }\n    if (consumer.endpointErrorId &&\n      this._sessionInterface.isCapable(CapabilityType.MESSAGE_REPLAY)) {\n      LOG_TRACE(`Acking unsolicited unbind with endpointErrorId ${consumer.endpointErrorId}`);\n      const unbindAck = SMFLib.AdProtocolMessage.getUnbindAck(consumer._flowId,\n                                                              consumer.endpointErrorId,\n                                                              this._transportAcks.lastAcked);\n      this._sessionInterface.sendControl(unbindAck); // Must succeed or throw\n    }\n    if (properties.reconnectAttempts === -1 || properties.reconnectAttempts > 0) {\n      if (error && error instanceof OperationError && error.subcode) {\n        if (error.subcode === ErrorSubcode.REPLAY_STARTED ||\n          error.subcode === ErrorSubcode.GM_UNAVAILABLE) {\n          LOG_TRACE(`Saving errorCausingReconnect: ${error}`);\n          this._errorCausingReconnect = error;\n          // Reconnecting state emits the RECONNECTING event.\n          return this.transitionTo(this.Reconnecting);\n        }\n      }\n    } //else: flow reconnect feature disabled, or not applicable.\n    return this.transitionTo(this.Unbound.AwaitFlowOpen, () =>\n      this._addEventToEmit(eventName, error));\n  }\n\n  requestStopDispatchUser() {\n    this._userDispatch = false;\n    this.log(`Stop dispatch user (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    this._messageDispatch.stop();\n  }\n\n  requestStopDispatchFSM() {\n    this._fsmDispatch = false;\n    this.log(`Stop dispatch FSM (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    this._sendAcks(true);\n  }\n\n  _clearTransportAckTimer() {\n    if (!this._transportAckTimer) return;\n\n    clearTimeout(this._transportAckTimer);\n    this._transportAckTimer = null;\n  }\n\n  _dispose() {\n    this._clearTransportAckTimer();\n    this._endpointClear();\n    this._destination = undefined;\n    this._unacked = null;\n    this._messageDispatch = null;\n    this._transportAcks = null;\n    this._consumer = null;\n    this._sessionInterface = null;\n  }\n\n  _endpointClear() {\n    this._endpoint = undefined;\n    this._subscription = undefined;\n  }\n\n  _endpointEnsure() {\n    if (this._endpoint) {\n      // The endpoint, destination and any possible topic subscription are generated\n      // at the same time. Use the presence of the endpoint to determine whether\n      // any of this has already been done.\n      return;\n    }\n\n    const sessionInterface = this._sessionInterface;\n    const properties = this._consumer._properties;\n    const { queueDescriptor } = properties;\n\n    let destination;\n    let endpoint;\n    let subscription;\n    if (queueDescriptor.type === QueueType.QUEUE) {\n      // The publish destination needs a prefix. Create a destination from\n      // the descriptor, then derive the endpoint name from that.\n      destination = sessionInterface.createDestinationFromDescriptor(queueDescriptor);\n\n      // The bind target is the queue name encoded as though a topic -- no prefix\n      // Use the offset information to build a bind target\n      endpoint = new Queue({\n        name:   destination.name,\n        type:   DestinationType.QUEUE,\n        offset: 0,\n        bytes:  destination.bytes.substr(destination.offset),\n      });\n\n      subscription = undefined;\n    } else {\n      // QueueType.TOPIC_ENDPOINT\n      endpoint = queueDescriptor.name\n        ? sessionInterface.createDestinationFromDescriptor(queueDescriptor)\n        : new Topic({ name: '\\0?', offset: 0, bytes: '\\0' });\n      subscription = properties.topicEndpointSubscription ||\n        sessionInterface.createTemporaryDestination(DestinationType.TOPIC);\n      destination = subscription;\n    }\n\n    // Using Object.assign to enforce the invariant that these three properties are set together\n    // or not at all.\n    Object.assign(this, {\n      _destination:  destination,\n      _endpoint:     endpoint,\n      _subscription: subscription,\n    });\n\n    // Update the properties object (if TTMP, we may modify it again)\n    properties.queueDescriptor = new QueueDescriptor({\n      name:    endpoint.name,\n      type:    queueDescriptor.type,\n      durable: queueDescriptor.durable,\n    });\n  }\n\n  _resetLocalConnectionState() {\n    Object.assign(this, {\n      _remoteWindowSize: 0,\n      _active:           undefined,\n      _fsmDispatch:      false,\n      _userDispatch:     true, // User flow is initially started\n    });\n  }\n\n  _resetRemoteConnectionState() {\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Initializing transport acks');\n    this._transportAcks = new TransportAcks();\n\n    LOG_TRACE('Initializing application acks');\n    this._applicationAcks = new ApplicationAckRingBuffer(RING_BUFFER_SIZE);\n    this._oldUnacked = new Set();\n\n    LOG_TRACE('Initializing endpointErrorId');\n    this._consumer.endpointErrorId = undefined;\n  }\n\n  /**\n   * Sends a single ack.\n   *\n   * @param {Array.<ackpair>} applicationAcks The application ack ranges to send\n   * @memberof ConsumerFSM\n   * @private\n   */\n  _sendAck(applicationAcks) {\n    const transportAck = SMFLib.AdProtocolMessage.getAck(\n      this._consumer.flowId,\n      this._transportAcks.lastReceived,\n      this.windowSize,\n      applicationAcks);\n    this._sessionInterface.sendControl(transportAck); // Must succeed or throw\n  }\n\n  /**\n   * Adds the current ack ranges to an accumulator. Call this for each applicationAck.\n   * When a range ends (we receive an unacked), or we are explictly flushing\n   * (applicationAck === null), we convert the accumulator to acks, send them, update state,\n   * and reset accumulators.\n   *\n   * This should be called at least once with the last invocation having ackRange = null.\n   * This invokes the flush path, which is necessary if any ranges were in progress,\n   * and this is the only path that repects the forceTransportAck flag.\n   *\n   * @param {Object} acksPendingState State associated with this activity\n   * @param {ApplicationAck} applicationAck The ack to process for ack ranges.\n   *    If `null`, any pending acks are flushed and a transport ack is sent, if\n   *    required.\n   * @private\n   */\n  _addAckToRanges(acksPendingState, applicationAck = null) {\n    const currentRange = acksPendingState.currentRange;\n    const ackRanges = acksPendingState.ackRanges;\n\n    if (applicationAck && applicationAck.state !== ApplicationAckState.UNACKED) {\n      currentRange.push(applicationAck);\n      return; // Wait for end of range or flush\n    }\n\n    // We received an UNACKED or a null ack (flush). Complete this range.\n    if (currentRange.length) {\n      ackRanges.push(currentRange);\n    }\n\n    // If we're flushing or we've hit the protocol limit for ranges in a single ack,\n    // we send ack messages, update ack states and clear the accumulator.\n    // This condition will be true at least once (must flush at the end).\n    if (applicationAck === null ||\n        ackRanges.length === SMFLib.AdProtocolMessage.MAX_CLIENT_ACK_RANGES) {\n      // Reduce each range to a first and last ID.\n      const bareRanges = ackRanges.map(range => [range[0].id, range[range.length - 1].id]);\n\n      if (bareRanges.length || acksPendingState.forceTransportAck) {\n        // We send the ranges. This could throw.\n        const { LOG_TRACE } = this.logger;\n        this._sendAck(bareRanges);\n        // Warning: this log statement reduces debug performance by 25%!\n        LOG_TRACE(\n          'Sent ack: ',\n          `Transport ack: ${this._transportAcks.lastReceived}`,\n          `Application acks: ${bareRanges.length\n            ? bareRanges.map(g => `[${g[0]}..${g[1]}]`)\n            : '[]'}`\n        );\n        // If the intent was to force a transport ack, that condition is fulfilled.\n        this._transportAcks.setAcked();\n        acksPendingState.forceTransportAck = false;\n      }\n\n      // Since the range send succeeded, update the ack states.\n      ackRanges.forEach((ackRange) => {\n        ackRange.forEach((ack) => {\n          if (ack.state !== ApplicationAckState.ACKED_SENT) {\n            try {\n              this._applicationAcks.updateAckState(ack.id,\n                                                   ApplicationAckState.ACKED_SENT);\n            } catch (e) {\n              const { LOG_ERROR } = this.logger;\n              LOG_ERROR(`Marking ack ${ack.id} as sent failed: ${e}`);\n            }\n          }\n        });\n      });\n\n      // Clear the main accumulator since it has hit the wire.\n      acksPendingState.ackRanges = [];\n    }\n    // Clear the accumulator for this range.\n    acksPendingState.currentRange = [];\n  }\n\n  /**\n   * Sends acknowledgements, along with a window update for this flow.\n   *\n   * @param {Boolean} forceTransportAck `true` sends transport ack even if no acks pending\n   * @private\n   */\n  _sendAcks(forceTransportAck = false) {\n    this._clearTransportAckTimer();\n\n    const applicationAcks = this._applicationAcks;\n    const transportAcks = this._transportAcks;\n\n    // This state is temporary and shared with the ack generating function.\n    const acksPendingState = {\n      forceTransportAck: forceTransportAck || (transportAcks.acksPending > 0),\n      ackRanges:         [],\n      currentRange:      [],\n    };\n\n    // If the first ringbuffer ack state is acked and there are no unacked before this,\n    // we can create an ack range that includes zero.\n    // If the first ringbuffer ack state is unacked, we can say nothing about the\n    // range before the first acked ID in the ringbuffer.\n    const front = this._applicationAcks.front();\n    if (this._oldUnacked.size === 0 && front && front.state !== ApplicationAckState.UNACKED) {\n      // State is acked_sent so we don't try to update the ring buffer.\n      this._addAckToRanges(acksPendingState, ZERO_APP_ACK);\n      // We know that front will be added to this range by the iteration.\n    }\n\n    // Build ack ranges using the accumulator\n    applicationAcks.forEach(ack => this._addAckToRanges(acksPendingState, ack));\n    // Flush the last pending ack range.\n    this._addAckToRanges(acksPendingState);\n\n    // On successful exit, we've sent and cleared all accumulators, and we've sent\n    // a transport ack if we were supposed to do that.\n    assert(acksPendingState.forceTransportAck === false);\n    assert(acksPendingState.currentRange.length === 0);\n    assert(acksPendingState.ackRanges.length === 0);\n  }\n\n  _setTransportAckTimer() {\n    if (this._transportAckTimer) return;\n    if (this._consumer.disposed) return;\n    this._transportAckTimer = setTimeout(\n      () => this._sendAcks(true),\n      this._acknowledgeTimeoutInMsecs\n    );\n  }\n\n  get maxWindowSize() {\n    return Math.min(this._localMaxWindowSize,\n                    this._remoteWindowSize || Number.POSITIVE_INFINITY);\n  }\n\n  get windowSize() {\n    return this.maxWindowSize - this._messageDispatch.length;\n  }\n\n  get maxPendingAcks() {\n    return this.windowSize * this._acknowledgeThreshold / 100.0;\n  }\n\n}\n\nmodule.exports.ConsumerFSM = ConsumerFSM;\n","const { Enum } = require('solclient-eskit');\n\nconst ConsumerStateNames = {\n  UNBOUND:                       'UNBOUND',\n  UNBOUND_AWAIT_SESSION_UP:      'UNBOUND_AWAIT_SESSION_UP',\n  UNBOUND_AWAIT_FLOWOPEN:        'UNBOUND_AWAIT_FLOWOPEN',\n  UNBOUND_AWAIT_ANY:             'UNBOUND_AWAIT_ANY',\n  BIND_SENT:                     'BIND_SENT',\n  FLOW_UP:                       'FLOW_UP',\n  FLOW_UP_XFER:                  'FLOW_UP_XFER',\n  FLOW_UP_XFER_INACTIVE:         'FLOW_UP_XFER_INACTIVE',\n  UNBIND_SENT:                   'UNBIND_SENT',\n  RECONNECTING:                  'RECONNECTING',\n  RECONNECTING_BIND_SENT:        'RECONNECTING_BIND_SENT',\n  RECONNECTING_AWAIT_SESSION_UP: 'RECONNECTING_AWAIT_SESSION_UP',\n  RECONNECTING_AWAIT_TIMER:      'RECONNECTING_AWAIT_TIMER',\n  CREATE_SENT:                   'CREATE_SENT',\n};\n\nmodule.exports.ConsumerStateNames = Enum.new(ConsumerStateNames);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of consumer acknowledgement modes. The corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#acknowledgeMode}\n * configures how acknowledgments are generated for received Guaranteed messages.\n *\n * When received messages are acknowledged they are removed from the Guaranteed\n * Message storage on the Solace Message Router. Message Consumer acknowledgements,\n * <b>only</b> remove messages from the Solace Message Router.\n *\n * In particular, withholding Message Consumer Acknowledgemnts does not stop\n * message delivery. For Message Consumer flow control see\n * {@link solace.MessageConsumer.stop}/{@link solace.MessageConsumer.start}. Message Consumer\n * flow control may also be imlpemented by removing the\n * {@link solace.MessageConsumerEventName#event:MESSAGE} listener.\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst MessageConsumerAcknowledgeMode = {\n  /**\n   * The API automatically acknowledges any message that was delivered to all\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} listeners with no exception thrown\n   * on any of them.\n   */\n  AUTO:   'AUTO',\n  /**\n   * The API acknowledges a message only when the application calls\n   * {@link solace.Message#acknowledge}.\n   */\n  CLIENT: 'CLIENT',\n};\n\nmodule.exports.MessageConsumerAcknowledgeMode = Enum.new(MessageConsumerAcknowledgeMode);\n","const { Enum } = require('solclient-eskit');\n/**\n * An enumeration of message consumer event names. A {@link solace.MessageConsumer} will emit\n * these events as part of its lifecycle.  Applications, having created a MessageConsumer can\n * choose to listen to all of the events described here, or any subset of these events. For Example:\n * <pre>\n *   <code>\n *     mc = solace.Session.createMessageConsumer(...);\n *     mc.on(solace.MessageConsumerEventName.CONNECT_FAILED_ERROR,\n *           function connectFailedErrorEventCb(error) {\n *             // error can be used as an OperationError object\n *           });\n *   </code>\n * </pre>\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst MessageConsumerEventName = {\n  /**\n   * The message consumer is established.\n   * @event solace.MessageConsumerEventName#UP\n   */\n  UP:                   'MessageConsumerEventName_up',\n  /**\n   * The message consumer is successfully disconnected.\n   * The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#DOWN\n   */\n  DOWN:                 'MessageConsumerEventName_down',\n /**\n   * The message consumer has become active.\n   *\n   * @event solace.MessageConsumerEventName#ACTIVE\n   */\n  ACTIVE:               'MessageConsumerEventName_active',\n  /**\n   * The message consumer has become inactive.\n   *\n   * @event solace.MessageConsumerEventName#INACTIVE\n   */\n  INACTIVE:             'MessageConsumerEventName_inactive',\n  /**\n   * The message consumer was established and then disconnected by the router,\n   * likely due to operator intervention. The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#DOWN_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  DOWN_ERROR:           'MessageConsumerEventName_downError',\n  /**\n   * The message consumer was established and then disconnected by the router,\n   * likely due to operator intervention, but flow auto reconnect is active.\n   * The message consumer is disabled, but actively reconnecting.\n   * Expect a RECONNECTED or DOWN_ERROR on success of failure. respectively.\n   * See also MessageConsumerProperties.reconnectAttempts and reconnectIntervalInMsecs.\n   *\n   * @event solace.MessageConsumerEventName#RECONNECTING\n   * @param {solace.OperationError} error Details of the error that triggered the reconnect.\n   */\n  RECONNECTING:         'MessageConsumerEventName_reconnecting',\n  /**\n   * The message consumer successfully auto-reconnected.\n   *\n   * @event solace.MessageConsumerEventName#RECONNECTED\n   */\n  RECONNECTED:          'MessageConsumerEventName_reconnected',\n  /**\n   * The message consumer attempted to connect but was unsuccessful.\n   * The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  CONNECT_FAILED_ERROR: 'MessageConsumerEventName_connectFailedError',\n  /**\n   * The message consumer will not connect because the current session is incompatible\n   * with Guaranteed Messaging. The message consumer is disabled until a compatible session\n   * is available.\n   *\n   * @event solace.MessageConsumerEventName#GM_DISABLED\n   */\n  GM_DISABLED:          'MessageConsumerEventName_GMDisabled',\n  /**\n   * The message consumer is being disposed. No further events will be emitted.\n   *\n   * @event solace.MessageConsumerEventName#DISPOSED\n   */\n  DISPOSED:             'MessageConsumerEventName_disposed',\n  /**\n   * A message was received on the message consumer.\n   *\n   * If the application throws an exception in this listener, and the consumer was configured\n   * to automatically acknowledge messages\n   * (see {@link solace.MessageConsumerProperties#acknowledgeMode}),\n   * the API will not acknowledge the message, since it\n   * may not have been successfully processed by the application. Such a message must be\n   * acknowledged manually. If the application did not retain a reference to the message, it\n   * may be redelivered by calling {@link solace.MessageConsumer#disconnect} followed by\n   * {@link solace.MessageConsumer#connect} depending on the configuration of the queue.\n   *\n   * When there is no listener for <i>MESSAGE</i> on a MessageConsumer, messages are queued\n   * internally until a listener is added.\n   *\n   * @event solace.MessageConsumerEventName#MESSAGE\n   * @param {solace.Message} message The received message being delivered in this event.\n   */\n  MESSAGE:              'MessageConsumerEventName_message',\n  /**\n   * The subscribe or unsubscribe operation succeeded on the queue.\n   * @event solace.MessageConsumerEventName#SUBSCRIPTION_OK\n   * @param {solace.MessageConsumerEvent} event The details related\n   * to the successful subscription update.\n   */\n  SUBSCRIPTION_OK:      'MessageConsumerEventName_ok',\n  /**\n   * The Solace Message Router rejected a queue subscription (add or remove).\n   * @event solace.MessageConsumerEventName#SUBSCRIPTION_ERROR\n   * @param {solace.MessageConsumerEvent} error The details related\n   * to the failed subscription update.\n   */\n  SUBSCRIPTION_ERROR:   'MessageConsumerEventName_error',\n\n};\n\nmodule.exports.MessageConsumerEventName = Enum.new(MessageConsumerEventName);\n","const { ErrorSubcode } = require('solclient-error');\n\n\n/**\n * Message consumer event objects. A {@link solace.MessageConsumer} will emit\n * these events related to queue subscription management:\n * MessageConsumerEventName.SUBSCRIPTION_OK and\n * MessageConsumerEventName.SUBSCRIPTION_ERROR.\n *\n * Similar to SessionEvent.\n * Also compatible with RequestError.\n *\n * @memberof solace\n */\nclass MessageConsumerEvent {\n  /**\n   * @constructor\n   * @param {String} messageConsumerEventName one of the MessageConsumerEventNames.\n   * @param {String} infoStr Information string\n   * @param {Number} [responseCode] Any associated router response code\n   * @param {solace.ErrorSubcode} [errorSubcode] Any associated error subcode\n   * @param {Object} [correlationKey] Any associated correlation key\n   * @param {String} [reason] Any additional information\n   * @private\n   */\n  constructor(\n    messageConsumerEventName,\n    infoStr,\n    responseCode = undefined,\n    errorSubcode = 0,\n    correlationKey = undefined,\n    reason = undefined) {\n    this._messageConsumerEventName = messageConsumerEventName;\n    this._infoStr = infoStr;\n    this._responseCode = responseCode;\n    this._errorSubcode = errorSubcode;\n    this._correlationKey = correlationKey; // optional\n    this._reason = reason; // optional\n  }\n\n  /**\n   * @type {String}\n   * @description the appropriate MessageConsumerEventName\n   *\n   *   MessageConsumerEventName.SUBSCRIPTION_OK or\n   *   MessageConsumerEventName.SUBSCRIPTION_ERROR.\n   */\n  get messageConsumerEventName() {\n    return this._messageConsumerEventName;\n  }\n\n  /**\n   * @type {String}\n   * @description the appropriate MessageConsumerEventName\n   *\n   *   MessageConsumerEventName.SUBSCRIPTION_OK or\n   *   MessageConsumerEventName.SUBSCRIPTION_ERROR.\n   */\n  get name() {\n    return this._messageConsumerEventName;\n  }\n\n  /**\n   * @type {String}\n   * @description if applicable, an information string returned by the Solace Message Router.\n   */\n  get infoStr() {\n    return this._infoStr;\n  }\n\n  /**\n   * @type {?Number}\n   * @description if applicable, a response code returned by the Solace Message Router.\n   */\n  get responseCode() {\n    return this._responseCode;\n  }\n\n  /**\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n   * same as subcode.\n   */\n  get errorSubcode() {\n    return this._errorSubcode;\n  }\n\n  /**\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n   * Same as errorSubcode.\n   */\n  get subcode() {\n    return this._errorSubcode;\n  }\n\n  /**\n   * @type {?Object}\n   * @description A user-specified object\n   * made available in the response or confirmation event by including it as a\n   * parameter in the orignal API call.  If the user did not specify a\n   * correlationKey, it will be <code>null</code>.\n   */\n  get correlationKey() {\n    return this._correlationKey;\n  }\n\n  /**\n   * @type {?String}\n   * @description Additional information if it is applicable.\n   *\n   * In case of subscribe or publish events, it constains the topic.\n   */\n  get reason() {\n    return this._reason;\n  }\n  /**\n   * @param {Object} value The reason info object\n   * @internal\n   */\n  set reason(value) {\n    this._reason = value;\n  }\n\n  /**\n   * @type {?solace.SessionEventCode}\n   * @description Only here for compatibility with the RequestError exception class.\n   * Always returns undefined for a MessageConsumerEvent.\n   */\n  // eslint-disable-next-line class-methods-use-this\n  get requestEventCode() {\n    return undefined;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'messageConsumerEventName': this.messageConsumerEventName,\n      'infoStr':                  this.infoStr,\n      'responseCode':             this.responseCode,\n      'errorSubcode':             ErrorSubcode.describe(this.errorSubcode),\n      'correlationKey':           this.correlationKey ? this.correlationKey.toString() : null,\n      'reason':                   this.reason ? this.reason : null,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.MessageConsumerEvent = MessageConsumerEvent;\n","const {\n  AbstractQueueDescriptor,\n  QueueDescriptor,\n  QueueDescriptorValidator,\n  QueueProperties,\n  QueuePropertiesValidator,\n  QueueType,\n} = require('solclient-queue');\nconst { APIPropertiesValidators } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { OperationError, ErrorSubcode } = require('solclient-error');\nconst { ReplayStartLocation } = require('solclient-replaystart');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valInstance,\n  valIsMember,\n  valNumber,\n  valRange,\n  valTopicStringOrEmpty,\n} = APIPropertiesValidators;\n\nfunction valTopicEndpointSubscription(typeDesc, instance) {\n  if (instance.queueDescriptor.getType() === QueueType.TOPIC_ENDPOINT) {\n    if (instance.queueDescriptor.isDurable() && !instance.createIfMissing) {\n      if (!instance.topicEndpointSubscription) {\n        throw new OperationError('topicEndpointSubscription must be set when queueDescriptor ' +\n                                'refers to a durable topic endpoint and not allowed to create.',\n                                ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    }\n  } else if (instance.topicEndpointSubscription) {\n    // is QueueType.QUEUE\n    throw new OperationError('topicEndpointSubscription is set, but queueDescriptor ' +\n                              'refers to a queue that is not of type QueueType.TOPIC_ENDPOINT',\n                              ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nconst MessageConsumerPropertiesValidator = {\n  validate(prefix, instance, rawProperties) {\n    if (Object.prototype.hasOwnProperty.call(rawProperties, 'transportAcknowledgeTimeoutInMsecs') &&\n        Object.prototype.hasOwnProperty.call(rawProperties, 'acknowledgeTimeoutInMsecs')) {\n      throw new OperationError(`${prefix} validation: transportAcknowledgeTimeoutInMsecs and acknowledgeTimeoutInMsecs are mutually exclusive`,\n                                ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n    if (Object.prototype.hasOwnProperty.call(rawProperties, 'transportAcknowledgeThresholdPercentage') &&\n        Object.prototype.hasOwnProperty.call(rawProperties, 'acknowledgeThreshold')) {\n      throw new OperationError(`${prefix} validation: transportAcknowledgeThresholdPercentage and acknowledgeThreshold are mutually exclusive`,\n          ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n\n    const v = validateInstance.bind(null, prefix, instance);\n    if (!(instance.queueDescriptor instanceof AbstractQueueDescriptor ||\n          instance.queueDescriptor instanceof QueueDescriptor)) {\n      throw new OperationError(`${prefix} validation: queue descriptor must be ` +\n                                'an AbstractQueueDescriptor or a QueueDescriptor',\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    QueueDescriptorValidator.validate(instance.queueDescriptor);\n\n    if (instance.queueProperties) {\n      if (instance.queueDescriptor.durable && !instance.createIfMissing) {\n        throw new OperationError(`${prefix} validation: queueProperties cannot be set unless ` +\n          'queueDescriptor refers to a temporary queue, or createIfMissing is set.',\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      v('queueProperties', [valInstance, QueueProperties, 'QueueProperties']);\n      QueuePropertiesValidator.validate(instance.queueProperties);\n      if (!instance.queueDescriptor.durable &&\n        Check.something(instance.queueProperties.accessType)) {\n        throw new OperationError(`${prefix} validation: queueProperties cannot specify accessType ` +\n                                 'in creation of a temporary queue',\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    }\n\n    // Validate TE subscription\n\n    if (instance.queueDescriptor.type === QueueType.TOPIC_ENDPOINT) {\n      // QueueType.TOPIC_ENDPOINT\n      if (instance.queueDescriptor.durable &&\n        !instance.createIfMissing &&\n        !instance.topicEndpointSubscription) {\n        throw new OperationError(`${prefix} validation: topicEndpointSubscription must be set for durable ` +\n          'topic endpoints unless creation is allowed.',\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    } else if (instance.topicEndpointSubscription) {\n      throw new OperationError(`${prefix} validation: topicEndpointSubscription cannot be set unless ` +\n        'descriptor.type is TOPIC_ENDPOINT',\n        ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n    v('connectAttempts', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('topicEndpointSubscription', [valTopicEndpointSubscription], [valTopicStringOrEmpty]);\n\n    v('acknowledgeMode', [valIsMember, MessageConsumerAcknowledgeMode, 'MessageConsumerAcknowledgeMode']);\n    v('transportAcknowledgeTimeoutInMsecs', [valNumber], [valRange, 20, 1500]);\n    v('transportAcknowledgeThresholdPercentage', [valNumber], [valRange, 1, 75]);\n\n    v('activeIndicationEnabled', [valBoolean]);\n    v('noLocal', [valBoolean]);\n    v('windowSize', [valNumber], [valRange, 1, 255]);\n    v('reconnectIntervalInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n\n    if (instance.activeIndicationEnabled &&\n      instance.queueDescriptor.type !== QueueType.QUEUE) {\n      throw new OperationError(\n        `${prefix} validation: activeIndicationEnabled may only be true for ` +\n        'QUEUE destinations',\n        ErrorSubcode.PARAMETER_CONFLICT\n      );\n    }\n    if (instance.replayStartLocation &&\n      !(instance.replayStartLocation instanceof ReplayStartLocation)) {\n      throw new OperationError(`${prefix} validation: replayStartLocation must be ` +\n        'an instance of ReplayStartLocation',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n};\n\nmodule.exports.MessageConsumerPropertiesValidator = MessageConsumerPropertiesValidator;\n","const QueueLib = require('solclient-queue');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { Topic } = require('solclient-destination');\n\nconst DEFAULTS = {\n  queueDescriptor:                         undefined,\n  queueProperties:                         undefined,\n  connectTimeoutInMsecs:                   10000,\n  connectAttempts:                         3,\n  topicEndpointSubscription:               undefined,\n  // selector: undefined,\n  acknowledgeMode:                         MessageConsumerAcknowledgeMode.AUTO,\n  transportAcknowledgeTimeoutInMsecs:      1000,\n  transportAcknowledgeThresholdPercentage: 60,\n  activeIndicationEnabled:                 false,\n  noLocal:                                 false,\n  windowSize:                              255,\n  _browser:                                false,\n  replayStartLocation:                     undefined,\n  reconnectAttempts:                       -1,\n  reconnectIntervalInMsecs:                3000,\n  createIfMissing:                         false,\n};\n\n/**\n * @classdesc\n * Defines the properties for a {@link solace.MessageConsumer}.\n *\n * @memberof solace\n */\nclass MessageConsumerProperties extends APIProperties {\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Defines the queue from which to consume.\n   *  * For durable queues and durable topic endpoints, this must be a\n   *    {@link solace.QueueDescriptor} unless\n   *    {@link solace.MessageConsumerProperties#createIfMissing} is set.\n   *  * When an {@link solace.AbstractQueueDescriptor} is used, the name is generated when\n   *    the {@link solace.MessageConsumer} is connected. The generated descriptor can be queried\n   *    from the consumer after it has successfully connected by calling\n   *    {@link solace.MessageConsumer#getProperties}.\n   * @type {solace.QueueDescriptor}\n   */\n  get queueDescriptor() {\n    return Check.something(this._queueDescriptor)\n      ? this._queueDescriptor\n      : DEFAULTS.queueDescriptor;\n  }\n  set queueDescriptor(value) {\n    if (value instanceof QueueLib.AbstractQueueDescriptor) {\n      this._queueDescriptor = value;\n    } else if (value) {\n      this._queueDescriptor = value.name\n        ? new QueueLib.QueueDescriptor(value)\n        : new QueueLib.AbstractQueueDescriptor(value);\n    } else {\n      this._queueDescriptor = value;\n    }\n  }\n\n  /**\n   * Gets the properties of the remote queue.\n   *  * For temporary queues and temporary topic endpoints,\n   *    or if {@link solace.MessageConsumerProperties#createIfMissing} is true,\n   *    these properties define the endpoint that is created.\n   *  * For durable queues, these must be unset on consumer creation\n   *    unless {@link solace.MessageConsumerProperties#createIfMissing} is set.\n   *    The values will be populated\n   *    after the queue is connected and can be retrieved by calling\n   *    {@link solace.MessageConsumer#getProperties}.\n   * @type {solace.QueueProperties}\n   */\n  get queueProperties() {\n    return Check.something(this._queueProperties)\n      ? this._queueProperties\n      : DEFAULTS.queueProperties;\n  }\n  set queueProperties(value) {\n    if (value) {\n      this._queueProperties = new QueueLib.QueueProperties(value);\n    } else {\n      this._queueProperties = value;\n    }\n  }\n\n  // ------------ Properties controlling connection of the consumer ----------------\n  /**\n   * The bind timeout in milliseconds when creating a connection to the Solace Message Router.\n   *  * The valid range is >= 50.\n   * @type {Number}\n   * @default 10000\n   */\n  get connectTimeoutInMsecs() {\n    return Check.something(this._bindTimeoutInMsecs)\n      ? this._bindTimeoutInMsecs\n      : DEFAULTS.connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(value) {\n    this._bindTimeoutInMsecs = value;\n  }\n\n  /**\n   * Gets and sets the maximum number of bind attempts when creating a connection to the\n   * Solace Message Router.\n   *  * The valid range is >= 1.\n   * @type {Number}\n   * @default 3\n   */\n  get connectAttempts() {\n    return Check.something(this._connectAttempts)\n      ? this._connectAttempts\n      : DEFAULTS.connectAttempts;\n  }\n  set connectAttempts(val) {\n    this._connectAttempts = val;\n  }\n\n  // ------------ Properties applied to the queue when connecting ----------------\n\n  /**\n   * This must be undefined if the type of the\n   * {@link solace.MessageConsumerProperties#queueDescriptor} is not\n   * {@link solace.QueueType.TOPIC_ENDPOINT}.\n   *\n   * If {@link solace.MessageConsumerProperties#queueDescriptor} is\n   * not durable, or {@link solace.MessageConsumerProperties#createIfMissing} is true,\n   * this may be left undefined to generate the topic endpoint's\n   * destination. When generated, the destination can be obtained from\n   * the {@link solace.MessageConsumer} after it is connected by calling\n   * {@link solace.MessageConsumer#getDestination}.\n   *\n   * @type {solace.Destination}\n   * @default undefined\n   */\n  get topicEndpointSubscription() {\n    return this._topicEndpointSubscription;\n  }\n  set topicEndpointSubscription(val) {\n    // Avoid instanceof check failing on Node 4?\n    if (typeof val === 'string') {\n      this._topicEndpointSubscription = Topic.createFromName(val);\n    } else {\n      this._topicEndpointSubscription = val;\n    }\n  }\n\n  // ----------- Properties controlling an established connection to a queue --------------\n\n  /**\n   * The Application Acknowledgement mode for the Message Consumer.\n   *\n   * When the acknowledgement mode is {@link solace.MessageConsumerAcknowledgeMode.CLIENT},\n   * a message is Application Acknowledged when the application calls\n   * {@link solace.Message#acknowledge} on that message.\n   *\n   * When the acknowledge mode is {@link solace.MessageConsumerAcknowledgeMode.AUTO}, a message is\n   * Application Acknowledged by the API after all\n   * {@link solace.MessageConsumerEventName#event:MESSAGE}\n   * listeners are called and none throw an exception. If a message handler throws, the message\n   * can still be acknowledged by calling {@link solace.Message#acknowledge}, but this would not be\n   * a recommended practice.\n   *\n   * When received messages are Application Acknowledged they are removed from the Guaranteed\n   * Message storage on the Solace Message Router. Message Consumer Application Acknowledged,\n   * <b>only</b> remove messages from the Solace Message Router.\n   *\n   * In particular, withholding Message Consumer Acknowledgemnts does not stop\n   * message delivery. For Message Consumer flow control (aka transport acknowledgemeent) see\n   * {@link solace.MessageConsumer#stop}/{@link solace.MessageConsumer#start}. Message Consumer\n   * flow control may also be imlpemented by removing the\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} listener.\n   *\n   * Flow control and transport acknowledgements characteristics are defined by\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeThresholdPercentage} and\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeTimeoutInMsecs}\n   *\n   * @type {solace.MessageConsumerAcknowledgeMode}\n   * @default solace.MessageConsumerAcknowledgeMode.AUTO\n   */\n  get acknowledgeMode() {\n    return Check.something(this._acknowledgeMode)\n      ? this._acknowledgeMode\n      : DEFAULTS.acknowledgeMode;\n  }\n  set acknowledgeMode(value) {\n    this._acknowledgeMode = value;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging.\n   * When the {@link solace.MessageConsumerProperties#transportAcknowledgeTimeoutInMsecs}\n   * is not exceeded, acknowledgements will be returned to the router at intervals not\n   * less than this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   * @deprecated\n   */\n  get acknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set acknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   * @deprecated\n   */\n  get acknowledgeThreshold() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set acknowledgeThreshold(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging.\n   * When the {@link solace.MessageConsumerProperties.transportAcknowledgeTimeoutInMsecs}\n   * is not exceeded, acknowledgements will be returned to the router at intervals not less than\n   * this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   */\n  get transportAcknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set transportAcknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   */\n  get transportAcknowledgeThresholdPercentage() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set transportAcknowledgeThresholdPercentage(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n  /**\n   * @description When enabled, a Guaranteed Messaging Consumer requests Active and Inactive\n   * events from the router and emits them to interested listeners.\n   * @type {Boolean}\n   * @default false\n   * @see {@link solace.MessageConsumerEventName.ACTIVE}\n   * @see {@link solace.MessageConsumerEventName.INACTIVE}\n   */\n  get activeIndicationEnabled() {\n    return Check.something(this._activeIndicationEnabled)\n      ? this._activeIndicationEnabled\n      : DEFAULTS.activeIndicationEnabled;\n  }\n  set activeIndicationEnabled(newValue) {\n    this._activeIndicationEnabled = newValue;\n  }\n\n  /**\n   * When enabled, a Guaranteed Messaging Consumer does not receive messages published\n   * in the same Session, even if the endpoint contains a subscription that matches the published\n   * message.\n   * @type {Boolean}\n   * @default false\n   */\n  get noLocal() {\n    return Check.something(this._noLocal)\n      ? this._noLocal\n      : DEFAULTS.noLocal;\n  }\n  set noLocal(newValue) {\n    this._noLocal = newValue;\n  }\n\n  /**\n   * The window size for Guaranteed Message delivery.  This is the maximum number of messages that\n   * will be prefetched from the Solace Messaging Router and queued internally by the API while\n   * waiting for the application to accept delivery of the messages.\n   *   * The valid range is 1 <= windowSize <= 255.\n   * @type {Number}\n   * @default 255\n   */\n  get windowSize() {\n    return Check.something(this._windowSize)\n      ? this._windowSize :\n      DEFAULTS.windowSize;\n  }\n  set windowSize(val) {\n    this._windowSize = val;\n  }\n\n  /**\n   * When enabled, a Guaranteed Messaging Consumer will connect as a queue browser\n   * @type {Boolean}\n   * @default false\n   * @private\n   * @internal\n   */\n  get browser() {\n    return Check.something(this._browser)\n      ? this._browser :\n      DEFAULTS._browser;\n  }\n  set browser(newValue) {\n    this._browser = newValue;\n  }\n  /**\n   * When a Flow is created, the application may request replay of messages from the replay log,\n   * even messages that have been previously delivered and removed the from topic endpoint or queue.\n   * The default is undefined, and indicates that no replay is requested.\n   *\n   * When defined the replay start location must be a {@link solace.ReplayStartLocation} object\n   * as returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationBeginning} or\n   * {@link solace.SolClientFactory.createReplayStartLocationDate}.\n   *\n   * The {@link solace.ReplayStartLocation} returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationBeginning}\n   * indicate that all messages available should be replayed.\n   *\n   * The replay start location returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationDate}\n   * indicates that all messages logged since a given date must be retrieved.\n   * @type {solace.ReplayStartLocation}\n   * @default undefined.\n   */\n  get replayStartLocation() {\n    return Check.something(this._replayStartLocation)\n      ? this._replayStartLocation :\n        DEFAULTS.replayStartLocation;\n  }\n  set replayStartLocation(newValue) {\n    this._replayStartLocation = newValue;\n  }\n\n  /**\n   * When a connected flow receives an unsolicited unbind event with subcode\n   * REPLAY_STARTED or GM_UNAVAILABLE, the SDK can reconnect the flow automatically.\n   * This property controls the flow auto reconnect feature:\n   * 0: Disable flow auto reconnect for this consumer flow.\n   * -1: Enable flow auto reconnect for this consumer flow, infiinite retries (default)\n   * <n, positive number>: Enable flow auto reconnect for this consumer flow, n retries.\n   *\n   * When the flow auto rebind is enabled, DOWN_ERRORs with REPLAY_STARTED and GM_UNAVAILABLE\n   * are handled internally, and not (immediately) emitted to the application.\n   * A RECONNECTING event (with the same subcode) is emitted instead,\n   * ideally followed by a RECONNECTED event when the reconnect succeedes.\n   * In case of REPLAY_STARTED, the window of message IDs and acknowledgements are reset\n   * to allow replay packets to be passed to the application without marking them as duplicates.\n   * In case of GM_UNAVAILABLE, flow state is preserved.\n   *\n   * If reconnecting fails after exhausting the number of retries, a DOWN_ERROR is emitted\n   * with the details of the last retry.\n   *\n   *\n   * @type {Number}\n   * @default -1\n   */\n  get reconnectAttempts() {\n    return Check.something(this._reconnectAttempts)\n      ? this._reconnectAttempts :\n        DEFAULTS.reconnectAttempts;\n  }\n  set reconnectAttempts(newValue) {\n    this._reconnectAttempts = newValue;\n  }\n\n  /**\n   * Time to wait between flow auto reconnect attempts, in milliseconds.\n   * See {@link solace.MessageConsumerProperties.reconnectAttempts}\n   * Defaults to 3 seconds (3000)\n   *  * The valid range is >= 50.\n   *\n   * @type {Number}\n   * @default 3000\n   */\n  get reconnectIntervalInMsecs() {\n    return Check.something(this._reconnectIntervalInMsecs)\n      ? this._reconnectIntervalInMsecs :\n        DEFAULTS.reconnectIntervalInMsecs;\n  }\n  set reconnectIntervalInMsecs(newValue) {\n    this._reconnectIntervalInMsecs = newValue;\n  }\n\n  /**\n   * If the endpoint is durable, it won't be auto-created unless this flag is set.\n   * This flag has no effect for temporary endpoints, those are always created if missing.\n   * This flag has no effect for existing endpoints.\n   *\n   * Off by default for backwards compatibility.\n   *\n   * @type {Boolean}\n   * @default false\n   *\n   */\n  get createIfMissing() {\n    return Check.something(this._createIfMissing)\n      ? this._createIfMissing :\n        DEFAULTS.createIfMissing;\n  }\n\n  set createIfMissing(newValue) {\n    this._createIfMissing = newValue;\n  }\n\n}\nmodule.exports.MessageConsumerProperties = MessageConsumerProperties;\n","const SMFLib = require('solclient-smf');\nconst { CapabilityType } = require('solclient-session');\nconst { ConsumerFSM } = require('./consumer-fsm');\nconst { ConsumerFSMEvent } = require('./consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./consumer-fsm-event-names');\nconst { ErrorResponseSubcodeMapper,\n  ErrorSubcode,\n  OperationError } = require('solclient-error');\nconst { Flow, FlowOperation } = require('solclient-flow');\nconst { MessageConsumerEvent } = require('./message-consumer-event');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { MessageConsumerProperties } = require('./message-consumer-properties');\nconst { MessageConsumerPropertiesValidator } = require('./message-consumer-properties-validator');\nconst { Queue, Topic } = require('solclient-destination');\nconst { QueueAccessType, QueuePermissions, QueueDiscardBehavior } = require('solclient-queue');\n\n\nfunction formatEventName(eventName) {\n  return `MessageConsumerEventName.${MessageConsumerEventName.describe(eventName)}`;\n}\n\nlet localCounter = 0;\nfunction getConsumerLocalName() {\n  return `ConsumerFSM ${localCounter++}`;\n}\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * A Message Consumer is created by calling {@link solace.Session#createMessageConsumer}.\n *\n * A MessageConsumer controls Guaranteed Message delivery to this client.\n *\n * Consumer characteristics and behavior are defined by {@link solace.MessageConsumerProperties}.\n * The properties can also be supplied as a simple key-value {Object}. The queue descriptor,\n * {@link solace.MessageConsumerProperties#queueDescriptor} must be specified to identify the\n * Guaranteed Message Queue or Guaranteed Message Topic Endpoint on the Solace Message Router.\n *\n * The MessageConsumer object is an EventEmitter, and will emit events to which the\n * application may choose to subscribe, such as the connection to the Solace Message Router\n * going up or down.\n *\n * If a registered listener for an emitted event throws an exception, this is caught and emitted as\n * an 'error'.\n *\n * @fires solace.MessageConsumerEventName#ACTIVE\n * @fires solace.MessageConsumerEventName#CONNECT_FAILED_ERROR\n * @fires solace.MessageConsumerEventName#DISPOSED\n * @fires solace.MessageConsumerEventName#DOWN\n * @fires solace.MessageConsumerEventName#DOWN_ERROR\n * @fires solace.MessageConsumerEventName#GM_DISABLED\n * @fires solace.MessageConsumerEventName#INACTIVE\n * @fires solace.MessageConsumerEventName#MESSAGE\n * @fires solace.MessageConsumerEventName#UP\n * @fires solace.MessageConsumerEventName#SUBSCRIPTION_OK\n * @fires solace.MessageConsumerEventName#SUBSCRIPTION_ERROR\n *\n *\n * @hideconstructor\n * @extends solace.Flow\n * @memberof solace\n */\nclass MessageConsumer extends Flow {\n  constructor({ properties, sessionInterfaceFactory } = {}) {\n    const applyProperties = new MessageConsumerProperties(properties);\n    MessageConsumerPropertiesValidator.validate(applyProperties.browser ?\n      'QueueBrowserProperties' : 'MessageConsumerProperties',\n                                                applyProperties, properties);\n    super(applyProperties, sessionInterfaceFactory, {\n      direct: MessageConsumerEventName.MESSAGE,\n      emits:  MessageConsumerEventName.values,\n      formatEventName,\n    });\n\n    const superFormatter = this.logger.formatter;\n    this.logger.formatter = (...args) => superFormatter('[message-consumer]', ...args);\n\n    this._active = undefined;\n    this._fsm = this._makeFSM();\n    this.endpointErrorId = undefined;\n\n    this._on(MessageConsumerEventName.ACTIVE, () => this._onFlowActive(true));\n    this._on(MessageConsumerEventName.INACTIVE, () => this._onFlowActive(false));\n    this._on(MessageConsumerEventName.DOWN_ERROR, this._onFlowDisconnected.bind(this));\n    this._on(MessageConsumerEventName.UP, this._onFlowUp.bind(this));\n    this._fsm.start(); // Subscriber flows self-manage, so they start immediately\n  }\n\n  _makeFSM() {\n    const properties = this._properties;\n    const name = `${getConsumerLocalName()}`;\n    return new ConsumerFSM({\n      name,\n      consumer:         this,\n      sessionInterface: this._sessionInterface,\n      properties,\n    });\n  }\n\n  /**\n   * Begins delivery of messages to this consumer. This method opens the protocol window\n   * to the Solace Message Router so further messages can be received.\n   *\n   * A newly created consumer is in started state.\n   *\n   * If the consumer was already started, this method has no effect.\n   *\n   * A consumer is stopped by calling {@link solace.MessageConsumer.stop}\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disposed.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  start() {\n    this._operationCheck(FlowOperation.START);\n    this._fsm.requestStartDispatchUser();\n  }\n\n  /**\n   * Stops messages from being delivered to this consumer from the Solace Message Router.\n   * Messages may continue to be prefetched by the API and queued internally\n   * until {@link solace.MessageConsumer#start} is called.\n   *\n   * If the consumer was already stopped, this method has no effect.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  stop() {\n    this._operationCheck(FlowOperation.STOP);\n    this._fsm.requestStopDispatchUser();\n  }\n\n  /**\n   * Connects the consumer immediately. The application should add event listeners (see\n   * {@link solace.MessageConsumerEventName}). If there is no listener added for\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} then up to a window\n   * {@link solace.MessageConsumerProperties.windowSize} of messages can be queued internally.\n   * to the {@link solace.MessageConsumer} before calling this method.\n   *\n   * @throws {solace.OperationError}\n   *  * if consumer is not supported by router for this client.\n   *  subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   *\n   */\n  connect() {\n    if ((this._sessionInterface.getCapability(CapabilityType.GUARANTEED_MESSAGE_CONSUME)\n        !== null) &&\n        (!this._sessionInterface.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME))) {\n      throw new OperationError('Consumer is not supported by router for this client',\n              ErrorSubcode.INVALID_OPERATION, null);\n    }\n    super.connect();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_OPEN }));\n  }\n\n  /**\n   * Initiates an orderly disconnection of the Message Consumer. The API will send any pending\n   * client acknowledgements on the Message Consumer, then send an unbind request.\n   * Any messages subsequently\n   * received are discarded silently. When the unbind message is acknowledged, the application\n   * receives a {@link solace.MessageConsumerEventName#event:DOWN} event if it has set a listener\n   * for that event.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  disconnect() {\n    super.disconnect();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_CLOSE }));\n  }\n\n  /**\n   * Returns the destination that should be used to publish messages that this consumer\n   * will receive.\n   * * For topic endpoints, this is the topic to which the topic endpoint is subscribed.\n   * * For queues, this is the associated queue destination.\n   *\n   * The destination returned can\n   * be used to set the ReplyTo field in a message, or otherwise communicated\n   * to partners that need to send messages to this Message Consumer. This is especially useful\n   * for temporary endpoints (Queues and Topic Endpoints), as the destination\n   * is unknown before the endpoint is created.\n   *\n   * This method will succeed after {@link solace.MessageConsumerEventName#event:UP} for temporaries\n   * with generated destinations.\n   *\n   * @throws {solace.OperationError}\n   * * if the {@link solace.MessageConsumer} is disconnected and the destination is temporary.\n   *\n   * @returns {solace.Destination} The publishing destination that delivers to this consumer.\n   */\n  getDestination() {\n    const destination = this._fsm.getDestination();\n    if (destination instanceof Queue) {\n      return new Queue(destination);\n    }\n    return new Topic(destination);\n  }\n\n  // Application has disconnected the session, we must continue to orderly shut down\n  // unbinding Message Consumers,\n  // but Message Consumers that are up merely treat this as a 'down' event and\n  // transition to awaitingSessionUp\n  _disconnectSession() {\n    super._disconnectSession();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DISCONNECT }));\n  }\n\n  _operationCheck(operation) {\n    super._operationCheck(operation);\n    switch (operation) {\n      case FlowOperation.GET_DESTINATION:\n        if (this._isDisconnected()) {\n          throw new OperationError('Cannot get destination of a disconnected flow',\n                                   ErrorSubcode.INVALID_OPERATION);\n        }\n        break;\n      default:\n    }\n  }\n\n  // ----\n\n  /**\n   * @param {any} messageId The message ID to ack\n   * @internal\n   */\n  applicationAck(messageId) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Adding application ack for ${messageId}`);\n    this._fsm.applicationAck(messageId);\n  }\n\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    return MessageConsumerEventName.DISPOSED;\n  }\n\n  /**\n   * @param {solace.Message} message The data message to handle\n   * @internal\n   */\n  handleDataMessage(message) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Handling data message');\n    message.setMessageConsumer(this);\n    this._fsm.acceptMessage(message);\n  }\n\n  /**\n   * @override\n   * @param {solace.AdProtocolMessage} message The control message to handle\n   * @internal\n   */\n  handleUncorrelatedControlMessage(message) {\n    const { LOG_INFO, LOG_DEBUG, LOG_TRACE } = this.logger;\n    LOG_INFO('Handling uncorrelated control message');\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.UNBIND: {\n        const responseCode = message.smfHeader.pm_respcode;\n        const description = message.smfHeader.pm_respstr;\n        const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                          description);\n        LOG_TRACE(`Handling uncorrelated UNBIND. endpointErrorId: ${message.getEndpointErrorId()}`);\n        if (message.getEndpointErrorId() !== undefined) {\n          this.endpointErrorId = message.getEndpointErrorId();\n        }\n        this.processFSMEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.FLOW_UNBOUND,\n        },\n          new OperationError(description, errorSubcode, responseCode)\n        ));\n      }\n        break;\n      case SMFAdProtocolMessageType.FLOWCHANGEUPDATE:\n        this.processFSMEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.FLOW_ACTIVE_IND,\n        }, {\n          active: message.getActiveFlow(),\n        }));\n        break;\n      default:\n        LOG_DEBUG('Dropping unhandled AD control message: ',\n                  SMFAdProtocolMessageType.describe(msgType));\n    }\n  }\n\n  /**\n   * Creates and returns copy of the properties for this MessageConsumer.\n   *\n   * If the object was constructed using an {@link solace.AbstractQueueDescriptor},\n   * and the queue descriptor was subsequently connected to an endpoint, the\n   * `MessageConsumerProperties` returned will include a {@link solace.QueueDescriptor}\n   * that contains the resolved name.\n   *\n   * A new copy of the properties object is returned each time this property is accessed.\n   * The returned object cannot be polled for mutations such as the one described above.\n   *\n   * @returns {solace.MessageConsumerProperties} The properties associated with this object.\n   */\n  getProperties() {\n    return super.getProperties();\n  }\n\n  /**\n   * Resets the router state contained in the consumer, e.g. on VRN change\n   *\n   * @memberof MessageConsumer\n   * @internal\n   */\n  onVRNChanged() {\n    this.processFSMEvent(new ConsumerFSMEvent({\n      name: ConsumerFSMEventNames.VIRTUALROUTER_NAME_CHANGED,\n    }));\n  }\n\n  /**\n   * After the MessageConsumer has connected to an endpoint\n   * ({@link solace.MessageConsumerEventName#UP}), accesstype represents\n   *  the access type for the endpoint to which this Message Consumer is bound.\n   * @name solace.MessageConsumer.accessType\n   * @type {solace.QueueAccessType}\n   */\n  get accessType() {\n    return this._accessType;\n  }\n  /**\n   * @param {solace.QueueAccessType} value The value to set\n   * @internal\n   */\n  set accessType(value) {\n    this._accessType = value;\n  }\n\n  /**\n   * Whether the consumer is active. If active indications for the consumer are not\n   * enabled, this will return undefined.\n   * @type {?Boolean}\n   * @internal\n   */\n  get active() {\n    return this._active;\n  }\n  /**\n   * @param {Boolean} value The value to set\n   * @internal\n   */\n  set active(value) {\n    if (value !== this._active) {\n      this._emit(value ? MessageConsumerEventName.ACTIVE : MessageConsumerEventName.INACTIVE);\n    }\n    this._active = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}, queueDiscardBehavior represents\n   * the discard behavior flags for the endpoint to which this Message Consumer is bound.\n   * @name solace.MessageConsumer.queueDiscardBehaviour\n   * @type {solace.QueueDiscardBehavior}\n   */\n  get queueDiscardBehavior() {\n    return this._queueDiscardBehavior;\n  }\n  /**\n   * @param {solace.QueueDiscardBehavior} value The value to set\n   * @internal\n   */\n  set queueDiscardBehavior(value) {\n    this._queueDiscardBehavior = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}\n   * respectsTTL is `true` when the endpoint respects Time To Live on messages\n   * and 'false' otherwise.\n   * @name solace.MessageConsumer.respectsTTL\n   * @type {Boolean}\n   */\n  get respectsTTL() {\n    return this._respectsTTL;\n  }\n  /**\n   * @param {Boolean} value The value to set\n   * @internal\n   */\n  set respectsTTL(value) {\n    this._respectsTTL = value;\n  }\n\n  /**\n   * Gets the flow ID for this consumer. This number will change between reconnects\n   * and is purely informational.\n   * @type {Long}\n   * @internal\n   */\n  get flowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The value to set\n   * @internal\n   */\n  set flowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}, this property represents\n   * permissions granted by the router to this user on this Message Consumer\n   * @name solace.MessageConsumer.permissions\n   * @type {solace.QueuePermissions}\n   */\n  get permissions() {\n    return this._permissions || 0;\n  }\n  /**\n   * @param {Number} value The value to set\n   * @internal\n   */\n  set permissions(value) {\n    this._permissions = value;\n  }\n\n  _onFlowActive(isActive) {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG(`Flow (flowId = ${this._flowId}) became ${isActive ? 'active' : 'inactive'}`);\n    this._active = isActive;\n  }\n\n  _onFlowDisconnected(error) {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`${this} disconnected: ${error}.message`);\n  }\n\n  _disposeFSM() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Disposing FSM');\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.DISPOSE }));\n  }\n\n  _onFlowUp() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`Flow is up: flowId = ${this._flowId}`);\n  }\n\n  [util_inspect_custom]() {\n    return Object.assign(super[util_inspect_custom](), {\n      'destination':          this._destination,\n      'accessType':           QueueAccessType.describe(this.accessType),\n      'permissions':          QueuePermissions.describe(this.permissions),\n      'respectsTTL':          this.respectsTTL,\n      'active':               this.wantFlowChangeNotify ? this.active : '(indications disabled)',\n      'wantFlowChangeNotify': this.wantFlowChangeNotify,\n      'queueDiscardBehavior': QueueDiscardBehavior.describe(this.queueDiscardBehavior),\n      'maxWindowSize':        this._fsm.maxWindowSize,\n    });\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n  _isDisconnected() {\n    return this._fsm.isDisconnected();\n  }\n\n  /**\n   * Subscribe the queue to a topic, always requesting confirmation from the router.\n   *\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_OK} is generated when subscription is\n   * added successfully; otherwise, session event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR} is generated.\n   *\n   * When the application receives the event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.MessageConsumerEvent#reason}.\n   * The returned string is in the format of \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to add.\n   * @param {Object} correlationKey If specified, this value is\n   *                                echoed in the messageConsumer event within\n   *                                {@link MessageConsumerEvent}.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected,\n   *   or the consumer is inactive, down, disconnected, or disposed.\n   *   Or if the consumer is bound to a topic endpoint instead of a queue.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  addSubscription(topic, correlationKey, requestTimeout) {\n    const callback = (success, subCode, respCode, respText) => {\n      if (success) {\n        const event = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_OK, event);\n      } else {\n        const error = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_ERROR,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_ERROR, error);\n      }\n    };\n\n    this._sessionInterface.updateQueueSubscription(\n      topic,\n      this._fsm.getDestination(),\n      true,\n      this,\n      callback,\n      requestTimeout);\n  }\n  /**\n   * Unsubscribe the queue from a topic, requesting confirmation from the router.\n   *\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_OK} is generated when subscription is\n   * removed successfully; otherwise, session event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR} is generated.\n   *\n   * When the application receives the message consumer event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.MessageConsumerEvent#reason}. The returned\n   * string is in the format \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to remove.\n   * @param {Object} correlationKey If <code>null</code> or undefined, a Correlation Key is not set\n   *                                in the confirmation session event.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected,\n   *   or the consumer is inactive, down, disconnected, or disposed.\n   *   Or if the consumer is bound to a topic endpoint instead of a queue.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  removeSubscription(topic, correlationKey, requestTimeout) {\n    const callback = (success, subCode, respCode, respText) => {\n      if (success) {\n        const event = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_OK, event);\n      } else {\n        const error = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_ERROR,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_ERROR, error);\n      }\n    };\n\n    this._sessionInterface.updateQueueSubscription(\n      topic,\n      this._fsm.getDestination(),\n      false,\n      this,\n      callback,\n      requestTimeout);\n  }\n}\n\nmodule.exports.MessageConsumer = MessageConsumer;\n","const { MessageConsumerEventName } = require('./message-consumer-event-names');\n\nfunction formatEventName(x) {\n  return `MessageConsumerEventName.${MessageConsumerEventName.describe(x)}`;\n}\n\nclass MessageDispatcher {\n  constructor({ emitter, autoAck, logger } = {}) {\n    Object.assign(this, {\n      emitter,\n      queue:    [],\n      dispatch: true,\n      formatEventName,\n      logger,\n    });\n    this._dispatchOne = autoAck ? this._dispatchOneAutoAck : this._dispatchOneBare;\n    this.emitter.setOnFirstDirectListener(this._onFirstMessageListener.bind(this));\n    // Although a listener may not be available, we set it to true so that we detect a transition to\n    // false when we attempt to dispatch the first message, which will generate a log that\n    // dispatching is stopped due to a missing listener.\n    this._availableListener = true;\n  }\n\n  start() {\n    this.dispatch = true;\n    this._flush();\n  }\n\n  stop() {\n    this.dispatch = false;\n  }\n\n  get length() {\n    return this.queue.length;\n  }\n\n  push(message) {\n    const { LOG_TRACE } = this.logger;\n    this.queue.push(message);\n\n    if (this.dispatch) {\n      this._flush();\n    } else {\n      LOG_TRACE(`Dispatch disabled, message ${message.getGuaranteedMessageId()} queued locally`);\n    }\n  }\n\n  _onFirstMessageListener() {\n    const { LOG_DEBUG } = this.logger;\n    if (!this._availableListener) {\n      LOG_DEBUG(`Message listener available for dispatcher, ${this.queue.length} messages queued`);\n      LOG_DEBUG(`Dispatcher started and connected: ${this.dispatch ? 'true' : 'false'}`);\n      this._availableListener = true;\n    }\n    this._flush();\n  }\n\n  _flush() {\n    const { LOG_DEBUG } = this.logger;\n    // Check whether dispatch enabled for every element,\n    // to handle when #stop is called from a message handler\n    while (this.queue.length && this.dispatch && (this.emitter.directListenerCount() > 0)) {\n      this._dispatchOne(this.queue.shift());\n    }\n\n    if (this.queue.length && this.dispatch &&\n        (this.emitter.directListenerCount() === 0) && this._availableListener) {\n      LOG_DEBUG('Message dispatching stopped: No message listener registered');\n      this._availableListener = false;\n    }\n  }\n\n  _dispatchOneAutoAck(message) {\n    const { LOG_WARN } = this.logger;\n    // Set the current outbound message, dispatch it, and clear the current outbound message\n    let caught = null;\n\n    // Auto-ack unless the receiver throws.\n    caught = this._dispatchOneBare(message);\n    // Outside of exception block because we want to throw normally from message.acknowledge()\n    if (caught) {\n      LOG_WARN(`Suppressing message acknowledgement for message ${message.getGuaranteedMessageId()\n               } because client threw exception from listener`, caught);\n    } else {\n      // Did the user manually ack for some reason?\n      if (message.isAcknowledged) {\n        LOG_WARN(`Consumer configured to auto-acknowledge messages, but message ${\n                 message.getGuaranteedMessageId()} was application acknowledged`);\n        return;\n      }\n      message.acknowledge(); // No, so ack the message\n    }\n  }\n\n  _dispatchOneBare(message) {\n    const { LOG_WARN } = this.logger;\n    let caught;\n    // Requires the emitter's direct option to be MessageConsumerEventName.MESSAGE\n    if (this.listenerCount === 0) {\n      LOG_WARN(`No listeners to dispatch message ${message.getGuaranteedMessageId()}`);\n    }\n    // Since _dispatchOneBare uses emitDirect, this behaviour is not affected by the presence\n    // of an 'error' handler.\n    try {\n      this.emitter.emitDirect(message);\n    } catch (ex) {\n      // User code threw an exception\n      caught = this.emitter.formatErrorEvent(ex, MessageConsumerEventName.MESSAGE, message);\n      // Also propagating to the common error handler\n      this.emitter.emit('error', caught);\n    }\n    return caught;\n  }\n\n}\n\nmodule.exports = { MessageDispatcher };\n","const { Enum } = require('solclient-eskit');\n/**\n * An enumeration of queue browser event names. A {@link solace.QueueBrowser} will emit\n * these events as part of its lifecycle.  Applications, having created a QueueBrowser can\n * choose to listen to all of the events described here, or any subset of these events. For Example:\n * <pre>\n *   <code>\n *     qb = solace.Session.createQueueBrowser(...);\n *     qb.on(solace.QueueBrowserEventName.CONNECT_FAILED_ERROR,\n *           function connectFailedErrorEventCb(error) {\n *             // details is an OperationError object\n *           });\n *   </code>\n * </pre>\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst QueueBrowserEventName = {\n  /**\n   * The queue browser is established.\n   * @event solace.QueueBrowserEventName#UP\n   */\n  UP:                   'QueueBrowserEventName_up',\n  /**\n   * The queue browser is successfully disconnected.\n   * The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#DOWN\n   */\n  DOWN:                 'QueueBrowserEventName_down',\n /**\n   * The queue browser was established and then disconnected by the router,\n   * likely due to operator intervention. The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#DOWN_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  DOWN_ERROR:           'QueueBrowserEventName_downError',\n  /**\n   * The queue browser attempted to connect but was unsuccessful.\n   * The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  CONNECT_FAILED_ERROR: 'QueueBrowserEventName_connectFailedError',\n  /**\n   * The queue browser will not connect because the current session is incompatible\n   * with Guaranteed Messaging. The queue browser is disabled until a compatible session\n   * is available.\n   *\n   * @event solace.QueueBrowserEventName#GM_DISABLED\n   */\n  GM_DISABLED:          'QueueBrowserEventName_GMDisabled',\n  /**\n   * The queue browser is being disposed. No further events will be emitted.\n   *\n   * @event solace.QueueBrowserEventName#DISPOSED\n   */\n  DISPOSED:             'QueueBrowserEventName_disposed',\n  /**\n   * A message was received on the queue browser.\n   *\n   * If the application did not retain a reference to the message, it\n   * may be redelivered by calling {@link solace.QueueBrowser#disconnect} followed by\n   * {@link solace.QueueBrowser#connect} depending on the configuration of the queue.\n   *\n   * When there is no listener for <i>MESSAGE</i> on a QueueBrowser, messages are queued\n   * internally until a listener is added.\n   *\n   * @event solace.QueueBrowserEventName#MESSAGE\n   * @param {solace.Message} message The received message being delivered in this event.\n   */\n  MESSAGE:              'QueueBrowserEventName_message',\n};\n\nmodule.exports.QueueBrowserEventName = Enum.new(QueueBrowserEventName);\n","const QueueLib = require('solclient-queue');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\n\nconst DEFAULTS = {\n  queueDescriptor:                         undefined,\n  connectTimeoutInMsecs:                   10000,\n  connectAttempts:                         3,\n  windowSize:                              255,\n  transportAcknowledgeTimeoutInMsecs:      1000,\n  transportAcknowledgeThresholdPercentage: 60,\n};\n\n/**\n * @classdesc\n * Defines the properties for a {@link solace.QueueBrowser}.\n *\n * @memberof solace\n */\nclass QueueBrowserProperties extends APIProperties {\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Defines the queue from which to consume.\n   *  * For durable queues and durable topic endpoints, this must be a\n   *    {@link solace.QueueDescriptor}.\n   * @type {solace.QueueDescriptor}\n   */\n  get queueDescriptor() {\n    return Check.something(this._queueDescriptor)\n      ? this._queueDescriptor\n      : DEFAULTS.queueDescriptor;\n  }\n  set queueDescriptor(value) {\n    if (value) {\n      this._queueDescriptor = new QueueLib.QueueDescriptor(value);\n    } else {\n      this._queueDescriptor = value;\n    }\n  }\n\n  // ------------ Properties controlling connection of the consumer ----------------\n  /**\n   * The bind timeout in milliseconds when creating a connection to the Solace Message Router.\n   *  * The valid range is >= 50.\n   * @type {Number}\n   * @default 10000\n   */\n  get connectTimeoutInMsecs() {\n    return Check.something(this._bindTimeoutInMsecs)\n      ? this._bindTimeoutInMsecs\n      : DEFAULTS.connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(value) {\n    this._bindTimeoutInMsecs = value;\n  }\n\n  /**\n   * Gets and sets the maximum number of bind attempts when creating a connection to the\n   * Solace Message Router.\n   *  * The valid range is >= 1.\n   * @type {Number}\n   * @default 3\n   */\n  get connectAttempts() {\n    return Check.something(this._connectAttempts)\n      ? this._connectAttempts\n      : DEFAULTS.connectAttempts;\n  }\n  set connectAttempts(val) {\n    this._connectAttempts = val;\n  }\n\n  // ----------- Properties controlling an established connection to a queue --------------\n  /**\n   * The window size for Guaranteed Message delivery.  This is the maximum number of messages that\n   * will be prefetched from the Solace Messaging Router and queued internally by the API while\n   * waiting for the application to accept delivery of the messages.\n   *   * The valid range is 1 <= windowSize <= 255.\n   * @type {Number}\n   * @default 255\n   */\n  get windowSize() {\n    return Check.something(this._windowSize)\n      ? this._windowSize :\n      DEFAULTS.windowSize;\n  }\n  set windowSize(val) {\n    this._windowSize = val;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging in milliseconds.\n   * When the {@link solace.QueueBrowserProperties.transportAcknowledgeTimeoutInMsecs} is not\n   * exceeded, acknowledgements will be returned to the router at intervals not less than\n   * this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   */\n  get transportAcknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set transportAcknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   */\n  get transportAcknowledgeThresholdPercentage() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set transportAcknowledgeThresholdPercentage(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n}\n\nmodule.exports.QueueBrowserProperties = QueueBrowserProperties;\n","const { EventEmitter } = require('solclient-events');\nconst { LogFormatter } = require('solclient-log');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { QueueBrowserEventName } = require('./queue-browser-event-names');\n\nfunction formatEventName(eventName) {\n  return `QueueBrowserEventName.${QueueBrowserEventName.describe(eventName)}`;\n}\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * A Queue Browser is created by calling {@link solace.Session#createQueueBrowser}.\n *\n * A Queue Browser allows client applications to look at messages spooled on Endpoints\n * without removing them. Messages are browsed from oldest to newest.\n * After being browsed, messages are still available for consumption over normal flows.\n * However, it is possible to selectively remove messages from the persistent store of an Endpoint.\n * In this case, these removed messages will no longer be available for consumption.\n\n * Note: If browsing a queue with an active consumer, no guarantee is made that the browser will\n * receive all messages published to the queue. The consumer can receive and acknowledge messages\n * before they are delivered to the browser.\n *\n * One typical application is to use Browsers to allow message bus administrators to remove “stuck”\n * Guaranteed messages from an Endpoint without having to modify or disrupt existing applications.\n * A message can get stuck if:\n *\n *  1) It has been received by an application, but for some reason, that application has failed to\n *     acknowledge it.\n *  2) All active message selectors have failed to match this particular message and therefore the\n *     message bus has not delivered it to any client yet. The current release only supports\n *     browsing Endpoints of type Queue.\n *\n * Note that the delivery restrictions imposed by the queue’s Access type\n * (exclusive or non-exclusive), do not apply when browsing messages with a Browser.\n *\n * Browser characteristics and behavior are defined by {@link solace.QueueBrowserProperties}.\n * The properties can also be supplied as a simple key-value {Object}. The queue descriptor,\n * {@link solace.QueueBrowserProperties#queueDescriptor} must be specified to identify the\n * Guaranteed Message Queue on the Solace Message Router.\n *\n * The Browser is an EventEmitter, and will emit events to which the application may choose to\n * subscribe, such as the connection to the Solace Message Router going up or down.\n *\n * If a registered listener for an emitted event throws an exception, this is caught and emitted as\n * an 'error'.\n *\n * @fires solace.QueueBrowserEventName#CONNECT_FAILED_ERROR\n * @fires solace.QueueBrowserEventName#DISPOSED\n * @fires solace.QueueBrowserEventName#DOWN\n * @fires solace.QueueBrowserEventName#DOWN_ERROR\n * @fires solace.QueueBrowserEventName#GM_DISABLED\n * @fires solace.QueueBrowserEventName#MESSAGE\n * @fires solace.QueueBrowserEventName#UP\n *\n * @hideconstructor\n * @memberof solace\n */\nclass QueueBrowser extends EventEmitter {\n  constructor(messageConsumer) {\n    super({\n      direct: QueueBrowserEventName.MESSAGE,\n      emits:  QueueBrowserEventName.values,\n      formatEventName,\n    });\n\n    this._messageConsumer = messageConsumer;\n    this.logger = new LogFormatter((...args) =>\n      ['[queue-browser]', ...args]);\n\n    this._setupEventListers();\n  }\n\n  _setupEventListers() {\n    // Listen to message consumer events, redispatch as queue browser events\n    this._messageConsumer.on(MessageConsumerEventName.UP, this._onConsumerUp.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.CONNECT_FAILED_ERROR,\n                             this._onConsumerConnectFailed.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DOWN, this._onConsumerDown.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DOWN_ERROR,\n                             this._onConsumerDownError.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.MESSAGE, this._onConsumerMessage.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DISPOSED,\n                             this._onConsumerDisposed.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.GM_DISABLED,\n                             this._onConsumerGMDisabled.bind(this));\n  }\n\n  _onConsumerMessage(event) {\n    this.emit(QueueBrowserEventName.MESSAGE, event);\n  }\n\n  _onConsumerUp(event) {\n    this.emit(QueueBrowserEventName.UP, event);\n  }\n\n  _onConsumerConnectFailed(event) {\n    this.emit(QueueBrowserEventName.CONNECT_FAILED_ERROR, event);\n  }\n\n  _onConsumerDown(event) {\n    this.emit(QueueBrowserEventName.DOWN, event);\n  }\n\n  _onConsumerDownError(event) {\n    this.emit(QueueBrowserEventName.DOWN_ERROR, event);\n  }\n\n  _onConsumerDisposed(event) {\n    this.emit(QueueBrowserEventName.DISPOSED, event);\n  }\n\n  _onConsumerGMDisabled(event) {\n    this.emit(QueueBrowserEventName.GM_DISABLED, event);\n  }\n\n  /**\n   * Connects the queue browser immediately. The application should add event listeners (see\n   * {@link solace.QueueBrowserEventName}). If there is no listener added for\n   * {@link solace.QueueBrowserEventName#event:MESSAGE} then up to a window\n   * {@link solace.QueueBrowserProperties.windowSize} of messages can be queued internally.\n   * before calling this method.\n   *\n   * @throws {solace.OperationError}\n   *  * if consumer is not supported by router for this client.\n   *  subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   *\n   */\n  connect() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Connecting the queue browser\\'s message consumer');\n      this._messageConsumer.connect();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Initiates an orderly disconnection of the queue browser. The API will send an unbind request.\n   * Any messages subsequently received are discarded silently.\n   * When the unbind message is acknowledged, the application\n   * receives a {@link solace.QueueBrowserEventName#event:DOWN} event if it has set a listener\n   * for that event.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  disconnect() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n\n    try {\n      LOG_DEBUG('Disconnecting the queue browser\\'s message consumer');\n      this._messageConsumer.disconnect();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Begins delivery of messages to this queue browser. This method opens the protocol window\n   * to the Solace Message Router so further messages can be received.\n   *\n   * A newly created queue browser is in started state.\n   *\n   * If the queue browser was already started, this method has no effect.\n   *\n   * A consumer is stopped by calling {@link solace.QueueBrowser.stop}\n   *\n   * @throws {solace.OperationError}\n   * * if the Queue BrowserMessage Consumer is disposed.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  start() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Starting the queue browser\\'s message consumer');\n      this._messageConsumer.start();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Stops messages from being delivered to this queue browser from the Solace Message Router.\n   * Messages may continue to be prefetched by the API and queued internally\n   * until {@link solace.QueueBrowser#start} is called.\n   *\n   * If the queue browser was already stopped, this method has no effect.\n   *\n   * @throws {solace.OperationError}\n   * * if the Queue Browser is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  stop() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Stopping the queue browser\\'s message consumer');\n      this._messageConsumer.stop();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Removes a message from the queue by acknowledging it.\n   *\n   * The {@link solace.QueueBrowser} does not automatically acknowledge messages.\n   * once they have been received.\n   *\n   * The API does not send acknowledgments immediately. It stores the state for\n   * acknowledged messages internally and acknowledges messages, in bulk, when a\n   * threshold or timer is reached.\n   *\n   * @param {Message} message The message to remove\n   */\n  removeMessageFromQueue(message) {\n    // ack the message to delete it\n    this._messageConsumer.applicationAck(message._guaranteedMsgId);\n    message._acked = true;\n  }\n\n}\n\nmodule.exports.QueueBrowser = QueueBrowser;\n","const { Enum } = require('solclient-eskit');\nconst { LOG_TRACE,\n        LOG_DEBUG } = require('solclient-log');\nconst { Long } = require('solclient-convert');\n\nconst TransportAckResult = Enum.new({\n  OK:           0,\n  DUPLICATE:    1,\n  OUT_OF_ORDER: 2,\n});\n\nclass TransportAcks {\n  constructor(id = 0) {\n    const base = typeof id === 'number' ? Long.fromNumber(id, true) : Long.fromValue(id);\n    this.lastAcked = base;\n    this._acksPending = 0;\n  }\n\n  reset() {\n    this._acksPending = 0;\n    this.lastAcked = Long.ZERO;\n  }\n\n  tryReceive(messageID, prevMessageID) {\n    if (this._lastReceived.lt(prevMessageID)) {\n      LOG_DEBUG(`Rejecting out of order message: ${prevMessageID} (last received: ${this._lastReceived})`);\n      return TransportAckResult.OUT_OF_ORDER;\n    }\n    if (this._lastReceived.gte(messageID)) {\n      LOG_DEBUG(`Rejecting duplicate message: ${messageID} (last received: ${this._lastReceived})`);\n      // duplicate messages indicate the router is retransmitting because it expects a transport ack\n      this._acksPending++;\n      return TransportAckResult.DUPLICATE;\n    }\n    LOG_TRACE(`Accepting message: ${messageID}`);\n    this._lastReceived = messageID;\n    this._acksPending++;\n    return TransportAckResult.OK;\n  }\n\n  setAcked() {\n    this._lastAcked = Long.fromValue(this._lastReceived);\n    this._acksPending = 0;\n  }\n\n  get acksPending() {\n    return this._acksPending;\n  }\n\n  get lastAcked() {\n    return this._lastAcked;\n  }\n\n  /**\n   * Resets the beginning of the ack sequence to the given value.\n   * @param {Long} value The value to set as last acknowledged ID.\n   */\n  set lastAcked(value) {\n    LOG_TRACE('Setting last acked:', value.toString());\n    Object.assign(this, {\n      _lastAcked:    Long.fromValue(value),\n      _lastReceived: Long.fromValue(value),\n    });\n  }\n\n  get lastReceived() {\n    return this._lastReceived;\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports = {\n  TransportAcks,\n  TransportAckResult,\n};\n","const { MessagePublisher } = require('./lib/message-publisher');\nconst { MessagePublisherAcknowledgeMode } = require('./lib/message-publisher-acknowledge-modes');\nconst { MessagePublisherEventName } = require('./lib/message-publisher-event-names');\nconst { MessagePublisherProperties } = require('./lib/message-publisher-properties');\nconst { MessagePublisherPropertiesValidator } = require('./lib/message-publisher-properties-validator');\nconst { PublisherFSMEvent } = require('./lib/publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./lib/publisher-fsm-event-names');\n\nmodule.exports.MessagePublisherAcknowledgeMode = MessagePublisherAcknowledgeMode;\nmodule.exports.MessagePublisher = MessagePublisher;\nmodule.exports.MessagePublisherProperties = MessagePublisherProperties;\nmodule.exports.PublisherFSMEvent = PublisherFSMEvent;\nmodule.exports.PublisherFSMEventNames = PublisherFSMEventNames;\nmodule.exports.MessagePublisherPropertiesValidator = MessagePublisherPropertiesValidator;\nmodule.exports.MessagePublisherEventName = MessagePublisherEventName;\n","const { Long } = require('solclient-convert');\n\nconst DEFAULTS = {\n  _lastAcked: Long.fromNumber(0, true),\n  _lastSent:  Long.fromNumber(0, true),\n  _next:      Long.fromNumber(1, true),\n};\n\nconst longToString = v => v.toString(10);\n\nclass MessageIds {\n  constructor(attrs) {\n    Object.assign(this, DEFAULTS, attrs);\n  }\n\n  get lastAcked() {\n    return this._lastAcked;\n  }\n  set lastAcked(value) {\n    this._lastAcked = Long.fromValue(value);\n  }\n\n  get lastSent() {\n    return this._lastSent;\n  }\n  setLastSent(id) {\n    this._lastSent = Long.fromValue(id);\n    this._next = this._lastSent.add(1);\n  }\n\n  get next() {\n    return this._next;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'lastAcked': longToString(this.lastAcked),\n      'lastSent':  longToString(this.lastSent),\n      'next':      longToString(this.next),\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.MessageIds = MessageIds;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents authentication scheme enumeration.\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst MessagePublisherAcknowledgeMode = {\n  /**\n   * @description Applications receive an acknowledgement for every\n   * message.\n   * @type {String}\n   */\n  PER_MESSAGE: 'PER_MESSAGE',\n  /**\n   * @description Applications receive a windowed acknowledgement that\n   * acknowledges the returned correlation identifier and every message sent prior.\n   * @type {String}\n   */\n  WINDOWED:    'WINDOWED',\n};\n\nmodule.exports.MessagePublisherAcknowledgeMode = Enum.new(MessagePublisherAcknowledgeMode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * The publisher currently isn't exposed, and its events are dispatched\n * via the Session. These events are therefore private. They should\n * be moved to MessageConsumerEventName when they are made public.\n * @private\n */\nconst MessagePublisherEventName = Enum.new({\n  ACKNOWLEDGED_MESSAGE:      'MessagePublisherEventName_acknowledgedMessage',\n  CONNECT_FAILED_ERROR:      'MessagePublisherEventName_connectFailedError',\n  CAN_SEND:                  'MessagePublisherEventName_canSend',\n  DISPOSED:                  'MessagePublisherEventName_disposed',\n  DOWN:                      'MessagePublisherEventName_down',\n  FLOW_NAME_CHANGED:         'MessagePublisherEventName_flowNameChanged',\n  GUARANTEED_MESSAGING_DOWN: 'MessagePublisherEventName_guaranteedMessagingDown',\n  REJECTED_MESSAGE:          'MessagePublisherEventName_rejectedMessage',\n  DISCONNECT_FAILED_ERROR:   'MessagePublisherEventName_disconnectFailedError',\n  UP:                        'MessagePublisherEventName_up',\n  TRANSPORT_FULL:            'MessagePublisherEventName_transportFull',\n});\n\nmodule.exports.MessagePublisherEventName = MessagePublisherEventName;\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valNumber,\n  valRange,\n} = APIPropertiesValidators;\n\n\nconst MessagePublisherPropertiesValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'MessagePublisherProperties', instance);\n    v('enabled', [valBoolean]);\n    v('windowSize', [valNumber], [valRange, 1, 255]);\n    v('acknowledgeTimeoutInMsecs', [valNumber], [valRange, 20, 60000]);\n    v('acknowledgeMode', [valIsMember, MessagePublisherAcknowledgeMode, 'MessagePublisherAcknowledgeMode']);\n    v('connectRetryCount', [valNumber], [valRange, 0, Number.MAX_VALUE]);\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n  },\n};\n\nmodule.exports.MessagePublisherPropertiesValidator = MessagePublisherPropertiesValidator;\n","const SolclientFactoryLib = require('solclient-factory');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\nconst { TransportCapabilities } = require('solclient-transport');\n\nfunction defaultEnablePublisher() {\n  const { ProfileBinding } = SolclientFactoryLib;\n  const binding = ProfileBinding.value;\n  const globallyEnabled = binding.guaranteedMessagingEnabled;\n  const webSocketAvailable = TransportCapabilities.web.webSocket();\n  return globallyEnabled && webSocketAvailable;\n}\n\nfunction getDefaults() {\n  return {\n    enabled:                   defaultEnablePublisher(),\n    windowSize:                50,\n    acknowledgeTimeoutInMsecs: 2000,\n    acknowledgeMode:           MessagePublisherAcknowledgeMode.PER_MESSAGE,\n    connectRetryCount:         3,\n    connectTimeoutInMsecs:     5000,\n  };\n}\n\n/**\n * @classdesc\n * Properties that define the configuration for a guaranteed message publisher.\n *\n * @memberof solace\n */\nclass MessagePublisherProperties extends APIProperties {\n  /**\n   * @constructor\n   * @param {Object} options Properties to apply to the newly constructed object.\n   */\n  constructor(options) {\n    super(getDefaults(), options || {});\n  }\n  /**\n   * @name solace.MessagePublisherProperties#enabled\n   * @type {Boolean}\n   * @description When enabled, a Guaranteed Messaging Publisher\n   * is automatically created when a session is connected.\n   *\n   * The default value is the same as the value provided to\n   * {@link solace.SolclientFactory.init},\n   * in the profile, {@link solace.SolclientFactoryProperties#profile},\n   * in the field {@link solace.FactoryProfile#guaranteedMessagingEnabled}.\n   */\n  get enabled() {\n    return this._enabled;\n  }\n  set enabled(newValue) {\n    this._enabled = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#windowSize\n   * @default 50\n   * @type {Number}\n   * @description  Maximum number of messages that can be published\n   * without acknowledgment.\n   *  * The valid range is 1 <= value <= 255\n   */\n  get windowSize() {\n    return Check.defined(this._windowSize)\n      ? this._windowSize\n      : getDefaults().windowSize;\n  }\n  set windowSize(newValue) {\n    this._windowSize = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#acknowledgeTimeoutInMsecs\n   * @type {Number}\n   * @default 2000\n   * @description  The time to wait for an acknowledgement,\n   * in milliseconds, before retransmitting unacknowledged\n   * messages.\n   *  * The valid range is 20 <= value <= 60000.\n   */\n  get acknowledgeTimeoutInMsecs() {\n    return Check.defined(this._acknowledgeTimeoutInMsecs)\n      ? this._acknowledgeTimeoutInMsecs\n      : getDefaults().acknowledgeTimeoutInMsecs;\n  }\n  set acknowledgeTimeoutInMsecs(newValue) {\n    this._acknowledgeTimeoutInMsecs = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#acknowledgeMode\n   * @type {solace.MessagePublisherAcknowledgeMode}\n   * @default {@link solace.MessagePublisherAcknowledgeMode.PER_MESSAGE}\n   * @description  The message-router sends windowed acknowledgements\n   * which the API converts to per-message acknowledgement by default. If\n   * acknowledgeMode is Windowed, then the API will simply pass through\n   * the message-router acknowledgements.\n   */\n  get acknowledgeMode() {\n    return this._acknowledgeMode || MessagePublisherAcknowledgeMode.PER_MESSAGE;\n  }\n  set acknowledgeMode(newValue) {\n    this._acknowledgeMode = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#connectRetryCount\n   * @type {Number}\n   * @default 3\n   * @description The number of times to retry a bind (aka open-flow) request\n   * before deciding the the Guaranteed Message Publisher cannot be started.\n   *  * The valid range 0 <= value.\n   * @private\n   */\n  get connectRetryCount() {\n    return Check.defined(this._connectRetryCount)\n      ? this._connectRetryCount\n      : getDefaults().connectRetryCount;\n  }\n  set connectRetryCount(newValue) {\n    this._connectRetryCount = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @default 5000\n   * @description  The time to wait for an bind response,\n   * in milliseconds, before retransmitting the bind request.\n   *  * The valid range is 50 <= value</li>\n   * @private\n   */\n  get connectTimeoutInMsecs() {\n    return Check.defined(this._connectTimeoutInMsecs)\n      ? this._connectTimeoutInMsecs\n      : getDefaults().connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(newValue) {\n    this._connectTimeoutInMsecs = newValue;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      enabled:                   this.enabled,\n      windowSize:                this.windowSize,\n      acknowledgeTimeoutInMsecs: this.acknowledgeTimeoutInMsecs,\n      acknowledgeMode:           MessagePublisherAcknowledgeMode.describe(this.acknowledgeMode),\n      connectRetryCount:         this.connectRetryCount,\n      connectTimeoutInMsecs:     this.connectTimeoutInMsecs,\n    };\n  }\n}\n\nmodule.exports.MessagePublisherProperties = MessagePublisherProperties;\n","const SMFLib = require('solclient-smf');\nconst { Flow, PrivateFlowEventName } = require('solclient-flow');\nconst { LogFormatter } = require('solclient-log');\nconst { MessagePublisherEventName } = require('./message-publisher-event-names');\nconst { MessagePublisherProperties } = require('./message-publisher-properties');\nconst { PublisherFSM } = require('./publisher-fsm');\nconst { PublisherFSMEvent } = require('./publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./publisher-fsm-event-names');\n\nconst { LOG_WARN } = new LogFormatter();\n\nclass MessagePublisher extends Flow {\n  /**\n   * Represents a Guaranteed Message Publisher.  This object must be used to publish\n   * Guaranteed Messages on a session.\n   *\n   * Publishers are created on sessions.  In this implementation the session functions are provided\n   * by the sessionFSM.  Publishers require the session to provide\n   * basic communications functions:\n   *  * send - send a message to the transport\n   *  * getCorrelationTag - return a unique transport correlation tag\n   *  * enqueueOutstandingCorrelatedReq - enqueue a callback for a received message\n   *    on a correlation tag\n   *\n   * @constructor\n   * @param {Object} properties Expected schema is\n   *  {@link solace.MessagePublisherProperties}\n   * @param {Object} sessionInterfaceFactory The session for the Guaranteed Message Publisher\n   * @private\n   */\n  constructor({ properties, sessionInterfaceFactory } = {}) {\n    const applyProperties = new MessagePublisherProperties(properties);\n    super(applyProperties, sessionInterfaceFactory, {\n      direct: MessagePublisherEventName.ACKNOWLEDGED_MESSAGE,\n      emits:  MessagePublisherEventName.values, // super adds MessageConsumerEventName\n    });\n    this._fsm = this._makeFSM();\n    const logger = new LogFormatter();\n    logger.formatter = function formatter(...args) {\n      return [\n        '[message-publisher]',\n        ...args,\n      ];\n    };\n    this.log = logger.wrap(this.log, this);\n\n    // Doesn't emit anything unless started; won't start unless bindWaiting\n    this._bindWaiting = true;\n\n    this.on(PrivateFlowEventName.BIND_WAITING, this._onBindWaiting.bind(this));\n    this.on(MessagePublisherEventName.CONNECT_FAILED_ERROR, this._onBindFailed.bind(this));\n    this.on(MessagePublisherEventName.DOWN, this._onDown.bind(this));\n    this.on(MessagePublisherEventName.UP, this._onUp.bind(this));\n  }\n\n  _onBindFailed() {\n    this._bindWaiting = false;\n  }\n\n  _onBindWaiting() {\n    this._bindWaiting = true;\n  }\n\n  _onDown() {\n    this._bindWaiting = false;\n  }\n\n  _onUp() {\n    this._bindWaiting = false;\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  _makeFSM() {\n    return new PublisherFSM({\n      publisher:        this,\n      name:             'PublisherFSM',\n      sessionInterface: this._sessionInterface,\n      properties:       this._properties,\n    });\n  }\n\n  /**\n   * @returns {Long} The flow ID of this flow\n   */\n  get flowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The flow ID for this flow\n   * @private\n   */\n  set flowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * @returns {String} The publisher name set for this flow\n   */\n  get name() {\n    return this._flowName;\n  }\n  /**\n   * @param {String} value The name to set on this flow\n   * @private\n   */\n  set name(value) {\n    this._flowName = value;\n  }\n\n  /**\n   * @returns {Number} The publisher ID set on this flow\n   */\n  get publisherId() {\n    return this._publisherId;\n  }\n  /**\n   * @param {Number} value The publisher ID to set on this flow\n   */\n  set publisherId(value) {\n    this._publisherId = value;\n  }\n\n  /**\n   * @readonly\n   * @returns {solace.MessagePublisherProperties} A clone of the publisher's properties.\n   */\n  get properties() {\n    return this._properties.clone();\n  }\n\n  /**\n   *\n   * @override\n   * @memberof MessagePublisher\n   */\n  connect() {\n    super.connect();\n    if (!this._fsm.getCurrentState()) {\n      this._fsm.start();\n    }\n  }\n\n  /**\n   * Application has disconnected the session, so\n   * disconnects the Guaranteed Message Publisher.\n   * @private\n   */\n  _disconnectSession() {\n    super._disconnectSession();\n    this.processFSMEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_CLOSE }));\n  }\n\n  /**\n   * @returns {solace.MessagePublisherEventName} The name of the disposed event for this flow\n   * @private\n   */\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    return MessagePublisherEventName.DISPOSED;\n  }\n\n  /**\n   * Handles an incoming ACK for the given message ID.\n   * @param {Long} id The message id for acknowledgement.\n   * @private\n   */\n  handleAck(id) {\n    this.processFSMEvent(new PublisherFSMEvent(\n      { name: PublisherFSMEventNames.ACK },\n      { ack: id }\n    ));\n  }\n\n  /**\n   * Handles an incoming NACK for the given message ID.\n   * @param {Long} id The message id for acknowledgement.\n   * @param {AdCtrlMessage} ctrlMessage The NACK message\n   * @private\n   */\n  handleNack(id, ctrlMessage) {\n    this.processFSMEvent(new PublisherFSMEvent(\n      { name: PublisherFSMEventNames.ACK },\n      { nack: id, ctrlMessage }\n    ));\n  }\n\n  /**\n   * @override\n   */\n  handleUncorrelatedControlMessage(message) {\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.CLIENTACK:\n        {\n          const id = message.getLastMsgIdAcked();\n          if (message.smfHeader.pm_respcode > 299) {\n            this.handleNack(id, message);\n          } else {\n            this.handleAck(id);\n          }\n          break;\n        }\n      case SMFAdProtocolMessageType.CLIENTNACK:\n        {\n          const id = message.getLastMsgIdAcked();\n          this.handleNack(id, message);\n          break;\n        }\n      case SMFAdProtocolMessageType.CLOSEPUBFLOW:\n        this.processFSMEvent(new PublisherFSMEvent(\n          { name: PublisherFSMEventNames.FLOW_UNBOUND })\n        );\n        break;\n      default:\n        LOG_WARN(`Dropping unhandled AD control message for ${this}`,\n                 SMFAdProtocolMessageType.describe(msgType));\n    }\n  }\n\n  /**\n   * Prepares an AD message for publishing on this flow.\n   * @param {Message} dataMsg The message to be prepared for publishing.\n   * @returns {TransportReturnCode} transport level returnCode\n   * @private\n   */\n  prepareAdMessageAndSend(dataMsg) {\n    return this._fsm.prepareAdMessageAndSend(dataMsg);\n  }\n\n  isBindWaiting() {\n    return this._bindWaiting;\n  }\n\n  /**\n   * @returns {String} Formatted inspector output\n   * @private\n   */\n  [util_inspect_custom]() {\n    return Object.assign(super[util_inspect_custom](), {\n      'name':        this.name,\n      'publisherId': this.publisherId,\n    });\n  }\n\n  /**\n   * @override\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  /**\n   * Disposes the FSM associated with this flow.\n   *\n   * @private\n   */\n  _disposeFSM() {\n    this.processFSMEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.DISPOSE }));\n  }\n\n  _isDisconnected() {\n    return this._fsm.isDisconnected();\n  }\n\n}\n\nmodule.exports.MessagePublisher = MessagePublisher;\n","const { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * Events on the Publisher FSM\n * @enum {string}\n ********************************************************************************/\nconst PublisherFSMEventNames = {\n  SESSION_UP:       'PublisherSessionUp',\n  SESSION_UP_NO_AD: 'PublisherSessionUpNoAD',\n  SESSION_DOWN:     'PublisherSessionDown',\n  FLOW_FAILED:      'MessagePublisherFailed',\n  FLOW_UP:          'MessagePublisherUp',\n  FLOW_CLOSE:       'MessagePublisherClose',\n  FLOW_UNBOUND:     'MessagePublisherUnbound',\n  TRANSPORT_FULL:   'PublisherTransportFull',\n  ACK:              'PublisherAck',\n  ACK_TIMEOUT:      'PublisherAckTimeout',\n  BIND_TIMEOUT:     'PublisherBindTimeout',\n  UNBIND_TIMEOUT:   'PublisherUnbindTimeout',\n  CAN_SEND:         'PublisherCanSend',\n  TRANSPORT_ERROR:  'PublisherTransportError',\n  RESEND_COMPLETE:  'PublisherResendComplete',\n  DISPOSE:          'PublisherDispose',\n};\n\nmodule.exports.PublisherFSMEventNames = Enum.new(PublisherFSMEventNames);\n","const { FsmEvent } = require('solclient-fsm');\n\n/**\n *\n * PublisherFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the SessionFSM.  This extension provides members to carry information specfic to\n * the SessionFSM transitions.\n * @extends {FsmEvent}\n * @private\n */\nclass PublisherFSMEvent extends FsmEvent {\n  /**\n   * @constructor\n   * @param {Object} spec The specification for this event\n   * @param {?Object} details The details to assign to this event object\n   * @param {Message|BaseMessage} smfmessage The message associated with this event\n   */\n  constructor(spec, details, smfmessage) {\n    super(spec);\n    Object.assign(this, details);\n    Object.assign(this, smfmessage);\n  }\n  getEventText() {\n    return this._eventText;\n  }\n}\n\nmodule.exports.PublisherFSMEvent = PublisherFSMEvent;\n","const SMFLib = require('solclient-smf');\n// No idea why the usual import idiom does not work.\n//const { CapabilityType } = require('solclient-session');\nconst SolclientSession = require('solclient-session');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { LogFormatter } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageIds } = require('./message-ids');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\nconst { MessagePublisherEventName } = require('./message-publisher-event-names');\nconst { PrivateFlowEventName } = require('solclient-flow');\nconst { PublisherFSMEvent } = require('./publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./publisher-fsm-event-names');\nconst { PublisherStateNames } = require('./publisher-state-names');\nconst { State, StateMachine } = require('solclient-fsm');\nconst { StatType } = require('solclient-stats');\nconst { TransportReturnCode } = require('solclient-transport');\n\nconst ConnectReason = {\n  INIT:     0, // never connected: message renumbering required\n  RESUME:   1, // connected before\n  FAILOVER: 2, // after a DR failover: message renumbering and message republish event required\n};\n\nclass PublisherFSM extends StateMachine {\n  constructor({ publisher, name, sessionInterface, properties } = {}) {\n    super({ name });\n    /** @type {MessagePublisher} */\n    const fsm = this;\n    const currentState = () => {\n      const state = fsm.getCurrentState();\n      return state ? state.getName() : '<not running>';\n    };\n    this.logger = new LogFormatter((...args) => [\n      `[session=${sessionInterface.sessionIdHex}]`,\n      `[message-publisher-fsm=${publisher.flowIdDec}]`,\n      `[${currentState()}]`,\n      ...args,\n    ]);\n    this.log = this.logger.wrap(this.log, this);\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n    } = this.logger;\n\n    Object.assign(this, {\n      _publisher:                 publisher,\n      _acknowledgeMode:           properties.acknowledgeMode,\n      _acknowledgeTimeoutInMsecs: properties.acknowledgeTimeoutInMsecs,\n      _sessionInterface:          sessionInterface,\n      _windowSize:                properties.windowSize,\n      _stateEvents:               [],\n    });\n    // The publisher is not even constructed when publisherProperties.enabled is false\n    // so we could just set _guaranteedEnabled to true, but lets be thorough as at\n    // some point we may want to have sendADMessage() be responsible for throwing all\n    // errors. As it is, when publisher properties enabled is false, the session-fsm\n    // throws an error and when the message-spool is shutdown (close-flow received) the\n    // publisher-fsm thtows and error.\n    this._guaranteedEnabled = properties.enabled;\n    this._sendWindow = properties.windowSize;\n    this._resetConnectedInfo();\n    this._notifiedWindowClosed = false;\n    // We need a boolean to track the transport flow\n    // controlled state. prepareAdMessageAndSend is called by the\n    // session to prepare a message for publish and we\n    // need to return whether or not we are flow controlled\n    // without invoking the FSM or calling methods on the\n    // FSM.\n    // We consider all down states and all resending states equal\n    // to flow-controlled as in all states me must queue the message\n    // to the unacked list and not attempt to send directly.\n    // This is strictly a performance issue.\n    this._transportFlowControlled = true;\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.PublisherUnbound,\n                               (context) => {\n                                 LOG_TRACE(`Starting ${context.getStateMachine().getName()}`);\n                               }\n      );\n    });\n\n    fsm.unhandledEventReaction(function onUnhandledEvent(event) {\n      switch (event.getName()) {\n        case PublisherFSMEventNames.FLOW_UNBOUND:\n          // the router has closed the flow, likely due to operator\n          // shutdown on the message spool. Throw on any attempt\n          // to publish\n          this._guaranteedEnabled = false;\n          this._publisher.emit(MessagePublisherEventName.GUARANTEED_MESSAGING_DOWN);\n          return this.transitionTo(\n            fsm.PublisherUnbound,\n            (context) => {\n              LOG_TRACE(`Received close publisher for ${context.getStateMachine().getName()}`);\n            });\n        case PublisherFSMEventNames.DISPOSE:\n          LOG_TRACE('Received dispose request');\n          break;\n        case PublisherFSMEventNames.TRANSPORT_FULL:\n          LOG_TRACE('Received TRANSPORT_FULL');\n          break;\n        case PublisherFSMEventNames.CAN_SEND:\n          // This is ok because the session just sends the publisher CAN_SEND whenever received\n          // from transport, even if the publisher is not in use, or hasn't caused the flow control\n          LOG_TRACE('Received CAN_SEND when not flow controlled');\n          break;\n        default:\n          LOG_TRACE(`Ignoring event ${event.getName()}`);\n      }\n      return this;\n    });\n\n    fsm.PublisherUnbound = new State({\n      name:          PublisherStateNames.UNBOUND,\n      parentContext: fsm,\n    }, {\n      emitDownAndBindWaiting() {\n        LOG_TRACE('Emit down and bind waiting');\n        publisher.emit(MessagePublisherEventName.DOWN);\n        publisher.emit(PrivateFlowEventName.BIND_WAITING);\n      },\n    })\n      .entry(function onEntry() {\n        this.emitDownAndBindWaiting();\n        fsm._connectRetryCount = properties.connectRetryCount;\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UNBOUND, function onFlowUnbind() {\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.SESSION_UP, function onSessionUp() {\n        return this.transitionTo(fsm.PublisherOpenFlowSent);\n      });\n\n    fsm.PublisherOpenFlowSent = new State({\n      name:          PublisherStateNames.OPENFLOWSENT,\n      parentContext: fsm,\n    }, {\n      emitOpenFlowFailedError(details) {\n        publisher.emit(MessagePublisherEventName.CONNECT_FAILED_ERROR, details);\n      },\n      /**\n       * @param {AdProtocolMessage} adpMsg An OPENFLOW response.\n       * @description Handle an incoming Guaranteed Messaging Protocol Message.\n       * @returns {?} The result of processing an event, or null if no event was dispatched.\n       * @private\n       */\n      handleOpenFlowResponse(adpMsg) {\n        const smfRespHeader = adpMsg.smfHeader;\n        const respCode = smfRespHeader.pm_respcode;\n        /*\n         * Assured Control Protocol messages are received on publisher and consumer flows. The\n         * message types for each are unique, so we can determine whether it is a publisher or\n         * consumer by message type.  A specific publisher or consumer is found by the flowId, or\n         * by the correlation tag in the case of OPEN-FLOW (publisher) or BIND (consumer) responses.\n         */\n        if (adpMsg.msgType !== SMFLib.SMFAdProtocolMessageType.OPENPUBFLOW) {\n          return fsm.processEvent(new PublisherFSMEvent(\n              { name: PublisherFSMEventNames.FLOW_FAILED },\n              {\n                returnCode:  respCode,\n                description: `Unexpected response: ${SMFLib.SMFAdProtocolMessageType.describe(adpMsg.msgType)}`,\n              }\n          ));\n        }\n\n        /*\n         * The response code will indicate whether we create a PUB_FLOW_UP (200 OK) event\n         * or a PUB_FLOW_FAIL (any other response) event, or treat this as an invalid\n         * message (received a OPEN-PUB-FLOW request).\n         */\n\n        if (respCode === null) {\n          // Drop message and increment stats\n          publisher.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Open-Publisher-Flow Request message on sessionId 0x${\n                    sessionInterface.sessionIdHex}`);\n          return null;\n        }\n\n        if (respCode !== 200) {\n          const respStr = smfRespHeader.pm_respstr;\n          const mappedSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(respCode, respStr);\n          return fsm.processEvent(new PublisherFSMEvent(\n            { name: PublisherFSMEventNames.FLOW_FAILED },\n            {\n              subcode:     mappedSubcode,\n              returnCode:  respCode,\n              description: respStr,\n            })\n          );\n        }\n\n        LOG_TRACE('Handling OPENPUBFLOW message');\n\n        // typical response: { lastmsgidacked window flowid flowname publisher_id }\n\n        const lastMsgIDAcked = adpMsg.getLastMsgIdAcked();\n        const window = adpMsg.getWindow();\n        const flowId = adpMsg.getFlowId();\n        const flowName = adpMsg.getFlowName();\n        const publisherId = adpMsg.getPublisherId();\n\n        LOG_DEBUG(`OPENPUBFLOW response attributes: lastMsgIDAcked=${lastMsgIDAcked} window=${window} flowId=${flowId} flowName=${flowName} publisherId=${publisherId}`);\n\n        LOG_TRACE(`Local before handling response: ${fsm._messageIds}`);\n\n        if (window === undefined) {\n          return fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  { description: 'Window parameter not found' })\n          );\n        }\n        if (window > this._windowSize) {\n          return fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  { description: 'Invalid window negotiation' })\n          );\n        }\n        // reduce sendWindow by the size of unAckedList but do not reduce below zero\n        fsm._sendWindow = window - fsm._unackedList.length;\n        if (fsm._sendWindow < 0) fsm._sendWindow = 0;\n\n        // update publisher info before renumbering\n        Object.assign(fsm._publisher, {\n          name: flowName,\n          flowId,\n          publisherId,\n        });\n        // we may have been disabled by a previous closeFlow messsage, now that\n        // we know hte message spool is enabled again, set _guaranteedEnabled back\n        // to true\n        fsm._guaranteedEnabled = true;\n\n        if ((fsm._connectReason === ConnectReason.INIT) ||\n          (fsm._connectReason === ConnectReason.FAILOVER)) {\n          // reset 'lastSent' before renumbering\n          fsm._messageIds.setLastSent(lastMsgIDAcked);\n\n          LOG_DEBUG(`Renumbering unacked/unsent messages: fsm._messageIds=${fsm._messageIds}, lastMsgIDAcked=${lastMsgIDAcked}, type=${fsm._connectReason}`);\n          if (fsm._connectReason === ConnectReason.FAILOVER) {\n            publisher.emit(MessagePublisherEventName.FLOW_NAME_CHANGED, {\n              messages: [...fsm._unackedList],\n              count:    fsm._unackedList.length,\n            });\n          }\n          fsm._connectReason = ConnectReason.RESUME;\n          fsm._unackedList.forEach((message) => {\n            const oldId = message.getGuaranteedMessageId();\n            fsm._renumber(message);\n            LOG_TRACE(`Renumbering message ID: from ${oldId} to ${message.getGuaranteedMessageId()}`);\n            fsm._messageIds.setLastSent(message.getGuaranteedMessageId());\n          });\n        } else {\n          fsm._unackedList.forEach((message) => {\n            message.setFlowId(flowId);\n            message.setPublisherId(publisher.publisherId);\n            LOG_TRACE(`Set FlowId to ${flowId} in msg# ${message.getGuaranteedMessageId()}`);\n          });\n        }\n        // Either way, make sure none of the messages is above the size limit:\n        const payloadSizeLimit = fsm._sessionInterface.getCapability(SolclientSession.CapabilityType.MAX_GUARANTEED_MSG_SIZE).getValue();\n        fsm._unackedList.forEach((message) => {\n          if (payloadSizeLimit < message._memoized_payload.length) {\n            LOG_WARN(`Message size ${message._memoized_payload.length} above broker limit ${payloadSizeLimit}`);\n          }\n        });\n\n\n        if (fsm._unackedList.length) {\n          fsm._handleAck(lastMsgIDAcked, false, adpMsg, true);\n          // the starting point for retransmitting.  If lastMsgIdAcked doesn't\n          // ack anything this does not get updates, causing us to possible send\n          // messages out of order, or not start sending at all\n          fsm._firstUnackedToSend = fsm._unackedList[0];\n        } else {\n          fsm._messageIds.lastAcked = Long.fromValue(lastMsgIDAcked);\n        }\n        LOG_TRACE(`Local after applying lastMsgIDAcked: ${fsm._messageIds}`);\n\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_UP }));\n      },\n      /**\n       * @returns {?} The result of processing an BIND_TIMEOUT event\n       * @private\n       */\n      handleOpenFlowTimeout() {\n        LOG_INFO('Open publisher connection timeout');\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.BIND_TIMEOUT }));\n      },\n      handleUnknownFlowName() {\n        LOG_INFO('Flow name unknown, republish required');\n        // Don't send the FLOW_NAME_CHANGED message yet -- it specifically indicates\n        // that duplicate messages should be expected. Wait until the flow is successfully\n        // connected and messages are being renumbered.\n        fsm._resetConnectedInfo(true);\n        return this.externalTransitionTo(fsm.PublisherOpenFlowSent);\n      },\n      /**\n       * Send a Publisher Open Flow Request.\n       * @private\n       */\n      sendOpenFlow() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        LOG_TRACE(`sendOpenFlow correlationTag: ${correlationTag}`);\n        const openPubFlowMsg = SMFLib.AdProtocolMessage.getOpenMessagePublisher(\n          fsm._messageIds.lastAcked,\n          fsm._messageIds.lastSent,\n          properties.windowSize,\n          fsm._publisher._flowName,\n          correlationTag\n        );\n        LOG_TRACE('sendOpenFlow openPubFlowMsg constituents:');\n        LOG_TRACE(`fsm._messageIds.lastAcked:${fsm._messageIds.lastAcked} fsm._messageIds.lastSent:${fsm._messageIds.lastSent} properties.windowSize:${properties.windowSize} fsm._publisher._flowName:${fsm._publisher._flowName} `);\n        sessionInterface.sendControl(openPubFlowMsg);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        () => this.handleOpenFlowTimeout(),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        rxMsgObj => this.handleOpenFlowResponse(rxMsgObj));\n        LOG_TRACE('Sent open publisher connection');\n      },\n    })\n      .entry(function onEntry() {\n        try {\n          this.sendOpenFlow();\n        } catch (e) {\n          LOG_WARN(`Exception during bind attempt: ${e}`);\n          fsm.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.SESSION_DOWN }));\n        }\n      })\n      .reaction(PublisherFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(fsm.PublisherCloseFlowSent);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.PublisherUp);\n      })\n      .reaction(PublisherFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.BIND_TIMEOUT, function onOpenFlowTimeout() {\n        if (fsm._connectRetryCount > 0) {\n          fsm._connectRetryCount--;\n          return this.externalTransitionTo(fsm.PublisherOpenFlowSent);\n        }\n        this.emitOpenFlowFailedError({\n          subcode:     ErrorSubcode.TIMEOUT,\n          description: 'Open publisher connection failed due to timeout',\n        });\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_FAILED, function onFlowFailed(pEvent) {\n        const { subcode, returnCode, description } = pEvent;\n        LOG_TRACE(`FLOW_FAILED in PublisherOpenFlowSent state: subcode: ${subcode}, returnCode: ${returnCode}, description: ${description}`);\n        switch (pEvent.subcode) {\n          case ErrorSubcode.UNKNOWN_FLOW_NAME:\n            // DR or long HA failover\n            return this.handleUnknownFlowName();\n          // case ErrorSubcode.GM_NOT_READY: Fail the session\n          default:\n            this.emitOpenFlowFailedError({\n              event: pEvent,\n              subcode,\n              returnCode,\n              description,\n            });\n            // Otherwise, the flow is invalid\n            fsm._resetConnectedInfo();\n        }\n        return this.transitionTo(fsm.PublisherUnbound);\n      });\n\n    fsm.PublisherCloseFlowSent = new State({\n      name:          PublisherStateNames.CLOSEFLOWSENT,\n      parentContext: fsm,\n    }, {\n      handleCloseFlowResponse(response) {\n        const smfRespHeader = response.smfHeader;\n        const respCode = smfRespHeader.pm_respcode;\n\n        if (response.msgType !== SMFLib.SMFAdProtocolMessageType.CLOSEPUBFLOW) {\n          return fsm.processEvent(new PublisherFSMEvent(\n            { name: PublisherFSMEventNames.FLOW_FAILED },\n            {\n              returnCode:  respCode,\n              description: `Unexpected response: ${SMFLib.SMFAdProtocolMessageType.describe(response.msgType)}`,\n            }));\n        }\n\n        if (respCode === null) {\n          // Drop message  and increment stats\n          publisher.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Close-Publisher-Flow Request message on sessionId 0x${\n                    sessionInterface.sessionIdHex}`);\n          return null;\n        }\n\n        if (respCode !== 200) {\n          fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  {\n                                    returnCode:  respCode,\n                                    description: smfRespHeader.pm_respstr,\n                                  }));\n        }\n\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_UNBOUND }));\n      },\n\n      handleCloseFlowTimeout() {\n        LOG_INFO('Close publisher connection timeout.');\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.UNBIND_TIMEOUT }));\n      },\n\n      sendCloseFlow() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const closePubFlowMsg = SMFLib.AdProtocolMessage.getCloseMessagePublisher(\n          fsm._publisher.flowId,\n          correlationTag\n        );\n        sessionInterface.sendControl(closePubFlowMsg);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        () => this.handleCloseFlowTimeout(),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        rxMsgObj => this.handleCloseFlowResponse(rxMsgObj));\n        LOG_TRACE('Sent close publisher connection');\n      },\n    })\n      .entry(function onEntry() {\n        this.sendCloseFlow();\n        return this;\n      })\n      .reaction(PublisherFSMEventNames.ACK, function onAck(event) {\n        fsm._handleAckEvent(event);\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UNBOUND, function onFlowUnbound() {\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_FAILED, function onCloseFlowFailed(/*pEvent*/) {\n        this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.UNBIND_TIMEOUT, function onCloseFlowTimeout() {\n        return this.transitionTo(fsm.PublisherCloseFlowSent);\n      });\n\n    fsm.PublisherUp = new State({\n      name:          PublisherStateNames.UP,\n      parentContext: fsm,\n    }, {\n      emitFlowUp() {\n        publisher.emit(MessagePublisherEventName.UP);\n      },\n    })\n      .initial(function initial() {\n        return this.transitionTo(\n          fsm._unackedList.length\n            ? fsm.PublisherRetransmitting\n            : fsm.PublisherDataXfer\n        );\n      })\n      .entry(function onEntry() {\n        // The state isn't changed on entry, so don't emit yet.\n        LOG_DEBUG('Flow is UP');\n        fsm._scheduleStateEvents(fsm.PublisherUp, () => this.emitFlowUp());\n        return this;\n      })\n      .reaction(PublisherFSMEventNames.ACK, function onAck(event) {\n        LOG_DEBUG('Ack received');\n        fsm._handleAckEvent(event);\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.ACK_TIMEOUT, function onAckTimeout() {\n        // the starting point when we get the CAN_SEND\n        fsm._firstUnackedToSend = fsm._unackedList[0];\n        return this.transitionTo(fsm.PublisherRetransmitting);\n      })\n        .reaction(PublisherFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n          return this.transitionTo(fsm.PublisherCloseFlowSent);\n        })\n        .reaction(PublisherFSMEventNames.SESSION_DOWN, function onSessionDown() {\n          return this.transitionTo(fsm.PublisherUnbound);\n        })\n        .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onWindowClosed() {\n          return this.internalTransition();\n        });\n\n    fsm.PublisherDataXfer = new State({\n      name:          PublisherStateNames.DATA_XFER,\n      parentContext: fsm.PublisherUp,\n    })\n      .entry(() => {\n        // publisher is up and capable of sending GM messages directly from the application\n        fsm._transportFlowControlled = false;\n        fsm._scheduleStateEvents(fsm.PublisherDataXfer, () => fsm._maybeEmitCanSend());\n      })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        return this.transitionTo(fsm.PublisherFlowControlled);\n      })\n      .exit(() => {\n        // publisher cannot send messages to transport and must queue in unAckedList until\n        // re-entering PublisherDataXfer\n        // set a FSM boolean that is checked in prepareADMessageAndSend() we\n        // need to avoid FSM interactions on the fast path so resort to\n        // this boolean.\n        fsm._transportFlowControlled = true;\n      });\n\n    fsm.PublisherFlowControlled = new State({\n      name:          PublisherStateNames.FLOW_CONTROLLED,\n      parentContext: fsm.PublisherUp,\n    })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        // Unusual event, as only the FSM can send messages when we're in flow-controlled state\n        LOG_INFO('Attempt to send while flow controlled');\n        // Fall out and do the action for PublisherUp\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.CAN_SEND, function onCanSend() {\n        //\n        // start sending from tune unAcked list.\n        return this.transitionTo(fsm.PublisherRetransmitting);\n      });\n\n    fsm.PublisherRetransmitting = new State({\n      name:          PublisherStateNames.RETRANSMITTING,\n      parentContext: fsm.PublisherUp,\n    }, {\n      retransmit() {\n        try {\n          fsm._resendFromUnacked();\n        } catch (ex) {\n          // Resend failed:\n          if (ex instanceof OperationError && ex.subcode === ErrorSubcode.INSUFFICIENT_SPACE) {\n            LOG_DEBUG('Publisher resendFromUnacked blocked due to insufficient space, wait for CAN_SEND');\n            fsm.processEvent(\n              new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n          } else {\n            // send failed.  Fail the publisher\n            LOG_INFO(`Publisher resendFromUnacked failed: ${ex}`);\n            fsm.processEvent(\n              new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED }));\n          }\n        }\n      },\n    })\n      .entry(function onEntry() {\n        this.retransmit();\n      })\n      .reaction(PublisherFSMEventNames.RESEND_COMPLETE, function onResendComplete() {\n        return this.transitionTo(fsm.PublisherDataXfer);\n      })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        // Transport flow controlled while resending/recovering from flow control. Go\n        // to flow controlled state and wait for CAN_SEND\n        LOG_DEBUG(`Transport full while retransmitting, unacked remaining: ${fsm._unackedList.length}`);\n        // Fall out and do the action for PublisherUp\n        return this.transitionTo(fsm.PublisherFlowControlled);\n      });\n  }\n\n  isDisconnected() {\n    if (!this.getCurrentState()) return true;\n    return !!this.getActiveState(PublisherStateNames.UNBOUND);\n  }\n\n  /**\n\n   * Prepare and send a Guaranteed Message. This method updates FSM variables including\n   * lastSendMessage.\n   *\n   * @private\n   * @param {Message} dataMsg The message to prepare\n   * @returns {TransportReturnCode} return the status from the transport send\n   */\n  prepareAdMessageAndSend(dataMsg) {\n    if (!this._guaranteedEnabled) {\n      throw new OperationError('Session does not provide Guaranteed Message Publish capability',\n        ErrorSubcode.GM_UNAVAILABLE,\n        'close flow received from message-router');\n    }\n    if (this._sendWindow <= 0) {\n      this._publisher.incStat(StatType.TX_WINDOW_CLOSED);\n      this._notifiedWindowClosed = true;\n      throw new OperationError(\n        'Guaranteed Message Window Closed',\n        ErrorSubcode.INSUFFICIENT_SPACE\n      );\n    }\n\n\n    const unackedList = this._unackedList;\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n    } = this.logger;\n\n    if (dataMsg._payload_is_memoized) {\n      dataMsg._payload_is_memoized = false;\n      dataMsg._memoized_csumm = undefined;\n      dataMsg._memoized_payload = undefined;\n    }\n    const dupMsg = dataMsg.clone();\n    const payloadSize = SMFLib.Codec.Encode.adaptMessageToSmf_payloadMemoize(dupMsg);\n    var payloadSizeLimit = 0;\n    try {\n      payloadSizeLimit = this._sessionInterface.getCapability(SolclientSession.CapabilityType.MAX_GUARANTEED_MSG_SIZE).getValue();\n      LOG_TRACE(`Payload size limit: ${payloadSizeLimit}`);\n    } catch (e) {\n      LOG_INFO('Can\\'t pre-check payload size, broker not connected yet?');\n      LOG_TRACE(e.stack);\n    }\n    if ((0 < payloadSizeLimit) && (payloadSize > payloadSizeLimit)) {\n      throw new OperationError(\n        `Encoded payload size (${payloadSize}) exceeds broker size limit (MAX_GUARANTEED_MSG_SIZE, ${payloadSizeLimit})`,\n        ErrorSubcode.MESSAGE_TOO_LARGE\n      );\n    }\n\n    --this._sendWindow;\n    this._renumber(dupMsg);\n    this._cloneNumbers(dupMsg, dataMsg);\n\n    unackedList.push(dupMsg);\n    // Update the messgeIds, lastSend/next values only on a successful send or enqueue,\n    // from this point on we will return OK from this send method.\n    const msgId = dupMsg.getGuaranteedMessageId();\n    this._messageIds.setLastSent(msgId);\n    LOG_TRACE(`Prepare and send AD message ID = ${msgId}, \n      unackedListSize = ${unackedList.length}, sendWindow = ${this._sendWindow}`);\n    // Note that the transport sender can be flow controlled at the transport\n    // level, which means the message should not be sent. So simply return\n    // We also consider set-up/down-states as _transportFlowControlled. We must be up\n    // and not retransmitting to\n    // send directly from application space.\n    if (this._transportFlowControlled) {\n      // we may receive acknowledgements while transport flow controlled which can\n      // cause our firstUnAckedToSend to become undefined, if this is the first message\n      // queued in that case, set firstUnAckedToSend\n      if (this._firstUnackedToSend === undefined) {\n        this._firstUnackedToSend = dupMsg;\n      }\n      return TransportReturnCode.OK;\n    }\n    // We use the session sendToTransport directly which may throw or  otherwise\n    // return an error. If so, catch the eror and remove the message from the unackedlist\n    // before rethrowing the error.\n    let returnCode;\n    try {\n      returnCode = this._sessionInterface.sendToTransport(dupMsg);\n      if (returnCode !== TransportReturnCode.OK) {\n        if (returnCode === TransportReturnCode.NO_SPACE) {\n          returnCode = TransportReturnCode.OK;\n          this._firstUnackedToSend = dupMsg;  // the starting point when we get the CAN_SEND\n          this.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n        } else {\n          //\n          LOG_DEBUG(`prepareAdMessageAndSend: saw returnCode = ${returnCode}`);\n        }\n      } else {\n        // The message has successfully been sent once. Set the redelivered flag in case we need to\n        // resend it later.\n        dupMsg.setRedelivered(true);\n      }\n      // TBD: Should we start AckTimer when flow controlled?\n      this._startAckTimer();\n    } catch (ex) {\n      if (ex instanceof OperationError) {\n        LOG_DEBUG(`prepareAdMessageAndSend: caught OperationError: ${ErrorSubcode.describe(ex.subcode)} - ${ex.message}`);\n        // OperationErrors are encoding or other errors caused by the field contents the\n        // application has set on the message.  So we throw the error back at the\n        // application after undoing the queueing operations.\n        unackedList.pop();\n        this._messageIds.setLastSent(dupMsg.getGuaranteedPreviousMessageId());\n        ++this._sendWindow;\n        throw (ex);\n      } else {\n        LOG_DEBUG(`prepareAdMessageAndSend: caught ${ex.message}`);\n        throw ex;\n      }\n    }\n    return TransportReturnCode.OK;\n  }\n\n  _handleAckEvent(event) {\n    this._publisher.incStat(StatType.TX_ACKS_RXED);\n    this._handleAck(event.ack || event.nack, !!event.nack, event.ctrlMessage);\n  }\n\n  _handleAck(id, nack, ctrlMessage = undefined, openFlow = false) {\n    const {\n      _messageIds: messageIds,\n      _unackedList: unackedList,\n    } = this;\n    const { LOG_DEBUG, LOG_INFO } = this.logger;\n\n    if (messageIds.lastAcked.gte(id)) {\n      if (openFlow) {\n        LOG_DEBUG(`Implicit acks up to date: remote ack for ${id}, local ids ${this._messageIds}`);\n      } else {\n        LOG_INFO(`Dropping ack: remote ack for ${id}, local ids ${this._messageIds}`);\n      }\n      return;\n    }\n\n    const reportAcked = [];\n\n    // Assumption: the unacked message list is in increasing order of message ID.\n    // The assured message ID should be automatically generated, immutable and\n    // monotonically increasing.\n\n    // While the acked ID is greater than an element at the beginning of the unacked list...\n    while (unackedList.length &&\n           id.gte(unackedList[0].getGuaranteedMessageId())) {\n      // That unacked message is now acked. Shift it off and append to list of acked.\n      reportAcked.push(unackedList.shift());\n    }\n\n    // if we have removed the firstUnacked, reset it to the beginning of the list\n    if (unackedList.indexOf(this._firstUnackedToSend) === -1) {\n      this._firstUnackedToSend = unackedList[0];\n    }\n\n\n    // Recover some window space from the acked IDs.\n    this._sendWindow += reportAcked.length;\n    LOG_DEBUG('Send window size is now', this._sendWindow);\n\n\n    // The last acked ID is now the one we received.\n    // Don't let an exception in event dispatching prevent this from being set -- do it now.\n    messageIds.lastAcked = id;\n\n    // If we're NACKing, it's only the last message.\n    const reportNacked = nack ? reportAcked.pop() : null;\n\n    // Any ACKs?\n    // reportAcked is constant from here on\n    const numAcked = reportAcked.length;\n    if (numAcked) {\n      if (this._acknowledgeMode === MessagePublisherAcknowledgeMode.PER_MESSAGE) {\n        LOG_DEBUG(`Ack received: lastAckedMsgId=${id}, numAckedMsgs=${numAcked}, numUnackedMsgs=${unackedList.length}`);\n        for (let i = 0; i < numAcked; ++i) {\n          this._publisher.emit(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, reportAcked[i]);\n        }\n      } else {\n        const lastAckedMessage = reportAcked[numAcked - 1];\n        LOG_DEBUG(`Acking single message with ID ${lastAckedMessage.getGuaranteedMessageId()} from router ack on ${id}`);\n        this._publisher.emit(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, lastAckedMessage);\n      }\n    }\n\n    // Terminating NACK?\n    if (reportNacked) {\n      LOG_DEBUG(`Nacking single message with ID ${reportNacked.getGuaranteedMessageId()} from router ack on ${id}`);\n      this._publisher.emit(MessagePublisherEventName.REJECTED_MESSAGE, reportNacked, ctrlMessage);\n    }\n\n    LOG_DEBUG('Unacked messages remaining: ', unackedList.length);\n\n    if (unackedList.length) {\n      // There are more messages to be acked. Reset the ack timer.\n      this._resetAckTimer();\n    } else {\n      this._clearAckTimer();\n    }\n    //\n    // send can-send to applicatino if necessary.\n    this._maybeEmitCanSend();\n  }\n\n  _maybeEmitCanSend() {\n    const { LOG_TRACE } = this.logger;\n    if (!this._notifiedWindowClosed) return;\n    if (this._sendWindow === 0) {\n      // Should log this since it is called AFTER the state change\n      LOG_TRACE('Suppressing CAN_SEND with zero window available');\n      return;\n    }\n    this._notifiedWindowClosed = false; // Set before emitting in case we re-enter\n    this._publisher.emit(MessagePublisherEventName.CAN_SEND);\n  }\n\n  _resendFromUnacked() {\n    const { LOG_ERROR, LOG_INFO, LOG_DEBUG } = this.logger;\n    // We choose to start the ack timer after the message resend. The resend could\n    // take longer than the ack timeout in poor conditions.\n    //\n    // If any message is successfully resent, we need to restart the ack timer,\n    // even if we are throwing.\n    const list = this._unackedList;\n    let resendIndex = list.indexOf(this._firstUnackedToSend);\n    if (resendIndex === -1) {\n      // first Unacked may be null if all have been resent alreadygrunt -\n      // in which case the list  should be empty\n      if (this._firstUnackedToSend) {\n        LOG_ERROR(`Could not find first Unacked Messages in unacked message list: msgId = ${this._firstUnackedToSend.getGuaranteedMessageId}`);\n      }\n      if (list.length === 0) {\n        // Nothing to resend: return to DataXfer\n        LOG_DEBUG(`Nothing to resend: ${this._messageIds.toString()}`);\n        this.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.RESEND_COMPLETE })\n        );\n      }\n      return;\n    }\n    LOG_DEBUG(`Resending unacked messages from ${resendIndex} to ${list.length - 1}: `,\n              list.map(m => m.getGuaranteedMessageId().toString()));\n    while (resendIndex < list.length) {\n      if (list[resendIndex].getPublisherId() !== this._publisher.publisherId) {\n        LOG_ERROR(`Resending on invalid publisherId '${list[resendIndex].getPublisherId()}'when it should be '${this._publisher.publisherId}'`);\n      }\n      const returnCode = this._sessionInterface.sendData(list[resendIndex]);\n      if (returnCode === TransportReturnCode.NO_SPACE) {\n        // the starting point when we get the CAN_SEND from the transport\n        this._firstUnackedToSend = list[resendIndex];\n        LOG_INFO('Publisher sendMessage blocked due to insufficient space, wait for CAN_SEND');\n        this.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n        return;\n      }\n      if (returnCode !== TransportReturnCode.OK) {\n        // session-FSM is already processing the error\n        return;\n      }\n      // The message has successfullly been sent once. Set the redelivered flag in case we need to\n      // resend it later\n      list[resendIndex].setRedelivered(true);\n      resendIndex++;\n      this._startAckTimer();\n    }\n    // Resend successful: return to DataXfer\n    LOG_DEBUG(`Resend complete: ${this._messageIds.toString()}`);\n    this.processEvent(\n      new PublisherFSMEvent({ name: PublisherFSMEventNames.RESEND_COMPLETE })\n    );\n  }\n\n  _resetConnectedInfo(failover = false) {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Resetting connected flow info');\n\n    if (this._ackTimer) this._clearAckTimer();\n\n    Object.assign(this, {\n      _messageIds: new MessageIds(),\n    });\n\n    Object.assign(this._publisher, {\n      publisherId: undefined,\n      flowId:      undefined,\n      flowName:    null,\n    });\n\n    if (failover) {\n      this._connectReason = ConnectReason.FAILOVER;\n    } else {\n      // Full reset\n      this._unackedList = [];\n      this._connectReason = ConnectReason.INIT;\n    }\n  }\n\n  _clearAckTimer() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Clear ack timer ${this._ackTimer ? this._ackTimer : 'undefined or null or zero'}`);\n    if (!this._ackTimer) return;\n    clearTimeout(this._ackTimer);\n    this._ackTimer = null;\n  }\n\n  _emitStateEvents() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Emitting deferred state events');\n    while (this._stateEvents.length) {\n      const pair = this._stateEvents.shift();\n      const state = pair[0];\n      const event = pair[1];\n      // If the state requesting this event is still active...\n      if (this.getActiveState(state.getName())) {\n        // then do its action\n        event.apply(state);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  _handleAckTimeout() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Ack Timeout');\n    this._ackTimer = null;\n    this._publisher.incStat(StatType.TX_ACK_TIMEOUT);\n    this.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.ACK_TIMEOUT }));\n  }\n\n  /**\n   * If the remote flow changes, any remote state applied to the unacked messages needs to\n   * be reapplied.\n   *\n   * @param {solace.Message} message The message to renumber.\n   * @private\n   */\n  _renumber(message) {\n    const messageIds = this._messageIds;\n    const current = messageIds.next;\n    message.setGuaranteedPreviousMessageId(messageIds.lastSent);\n    message.setGuaranteedMessageId(current);\n\n    const publisher = this._publisher;\n    message.setFlowId(publisher.flowId);\n    message.setPublisherId(publisher.publisherId);\n  }\n\n  _cloneNumbers(fromMsg, toMsg) {\n    toMsg.setGuaranteedPreviousMessageId(fromMsg.getGuaranteedPreviousMessageId());\n    toMsg.setGuaranteedMessageId(fromMsg.getGuaranteedMessageId());\n    toMsg.setFlowId(fromMsg.getFlowId());\n    toMsg.setPublisherId(fromMsg.getPublisherId());\n  }\n\n  _resetAckTimer() {\n    this._clearAckTimer();\n    this._startAckTimer();\n  }\n\n  _scheduleStateEvents(state, event) {\n    this._stateEvents.push([state, event]);\n    this._setPostEventAction(() => this._emitStateEvents(), 'Emit state events');\n  }\n\n  _setPostEventAction(action, desc = 'No action') {\n    const { LOG_DEBUG, LOG_WARN } = this.logger;\n    if (this._postEventAction && this._postEventAction.desc === desc) {\n      LOG_DEBUG('Keeping same post event action');\n      return;\n    }\n\n    if (this._postEventAction && this._postEventAction.desc) {\n      LOG_WARN(`Replacing post event action ${this._postEventAction.desc} with ${desc}`);\n    }\n    this._postEventAction = { action: action || (() => {}), desc };\n    this.setPostEventAction(() => {\n      this._postEventAction.action();\n      this._postEventAction = null;\n    });\n  }\n\n  /**\n   * @private\n   */\n  _startAckTimer() {\n    // const { LOG_TRACE } = this.logger;\n    // LOG_TRACE(`Start ack timer ${this._ackTimer ? this._ackTimer : 'undefined or null or zero'\n    //           }: ${this._acknowledgeTimeoutInMsecs} ms`);\n    if (this._ackTimer) return;\n    this._ackTimer = setTimeout(() => this._handleAckTimeout(),\n                                this._acknowledgeTimeoutInMsecs);\n  }\n\n}\n\nmodule.exports.PublisherFSM = PublisherFSM;\n","const { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * @enum {string}\n * State names on the Publisher FSM\n ********************************************************************************/\nconst PublisherStateNames = {\n  UNBOUND:         'PublisherUnbound',\n  OPENFLOWSENT:    'PublisherOpenFlowSent',\n  UP:              'PublisherUp',\n  FAILED:          'PublisherFailed',\n  CLOSEFLOWSENT:   'PublisherCloseFlowSent',\n  DATA_XFER:       'PublisherDataXfer',\n  FLOW_CONTROLLED: 'MessagePublisherFlowControlled',\n  RETRANSMITTING:  'PublisherRetransmitting',\n};\n\nmodule.exports.PublisherStateNames = Enum.new(PublisherStateNames);\n","const {\n  ReplicationGroupMessageId,\n  RgmidFactory,\n} = require('./lib/replication-group-message-id');\nconst { Message } = require('./lib/message');\nconst { MessageCacheStatus } = require('./lib/message-cache-status');\nconst { MessageDeliveryModeType } = require('./lib/message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./lib/message-dump-flags');\nconst { MessageDumpStandardProvider } = require('./lib/message-dump-standard-provider');\nconst { MessageDumpUtil } = require('./lib/message-dump-util');\nconst { MessageType } = require('./lib/message-types');\nconst { MessageUserCosType } = require('./lib/message-user-cos-types');\nconst { SolclientFactory } = require('solclient-factory');\n\n/**\n * Creates a {@link solace.Message} instance.\n * @returns {solace.Message} a new message instance.\n * @method\n * @name solace.SolclientFactory.createMessage\n */\nSolclientFactory.createMessage = SolclientFactory.createFactory(() => new Message());\n\n/**\n * Creates a {@link solace.ReplicationGroupMessageId} instance from string.\n * A ReplicationGroupMessageId is also a {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that only messages spooled\n * in the replay log since the message after the given ReplicationGroupMesageId\n * should be replayed.\n * @param {string} id a serialized ReplicationGroupMessageId had previously been returned\n *   from {@link solace.ReplicationGroupMessageId.toString}.\n * @returns {solace.ReplicationGroupMessageId} a new ReplicationGroupMessageId instance\n * @method\n * @name solace.SolclientFactory.createReplicationGroupMessageId\n * @throws {solace.OperationError}\n * * if parameter is not a string.\n *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n * * if incorrect format is detected.\n *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n */\nSolclientFactory.createReplicationGroupMessageId = SolclientFactory.createFactory(id =>\n  RgmidFactory.fromString(id));\n\nmodule.exports.Message = Message;\nmodule.exports.MessageCacheStatus = MessageCacheStatus;\nmodule.exports.MessageDeliveryModeType = MessageDeliveryModeType;\nmodule.exports.MessageDumpFlag = MessageDumpFlag;\nmodule.exports.MessageDumpStandardProvider = MessageDumpStandardProvider;\nmodule.exports.MessageDumpUtil = MessageDumpUtil;\nmodule.exports.MessageType = MessageType;\nmodule.exports.MessageUserCosType = MessageUserCosType;\nmodule.exports.ReplicationGroupMessageId = ReplicationGroupMessageId;\nmodule.exports.RgmidFactory = RgmidFactory;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An attribue of a {@link solace.Message}. Applications receive messages due to subscriptions on\n * topics, or consumers connected to durable objects.  The MessageCacheStatus of such messages is:\n * {@link solace.MessageCacheStatus.LIVE}.\n *\n * Message are also delivered to an application\n * as a result of a cache request (see {@link solace.CacheSession#sendCacheRequest}) which\n * have a MessageCacheStatus that is {@link solace.MessageCacheStatus.CACHED} or\n * {@link solace.MessageCacheStatus.SUSPECT}.\n *\n * The MessageCacheStatus is retrieved with {@link solace.Message#getCacheStatus}.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageCacheStatus = {\n  /**\n   * The message is live.\n   * @type {Number}\n   */\n  LIVE:    0,\n  /**\n   * The message was retrieveed from a solCache Instance.\n   * @type {Number}\n   */\n  CACHED:  1,\n  /**\n   * The message was retrieved from a suspect solCache Instance.\n   * @type {Number}\n   */\n  SUSPECT: 2,\n\n};\n\nmodule.exports.MessageCacheStatus = Enum.new(MessageCacheStatus);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message delivery modes.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageDeliveryModeType = {\n  /**\n   * This mode provides at-most-once message delivery. Direct messages have\n   * the following characteristics:\n   *   * They are not retained for clients that are not connected to a Solace Message Router.\n   *   * They can be discarded when congestion or system failures are encountered.\n   *   * They can be reordered in the event of network topology changes.\n   *\n   * Direct messages are most appropriate for messaging applications that require very\n   * high-rate or very low-latency message transmission. Direct Messaging enables\n   * applications to efficiently publish messages to a large number of clients\n   * with matching subscriptions.\n   */\n  DIRECT:         0,\n  /**\n   * A Persistent delivery mode is used for Guaranteed Messaging, and this delivery mode\n   * is most appropriate for applications that require persistent storage of the messages\n   * they send or intend to receive. Persistent messages have the following characteristics:\n   *\n   *  * They cannot be discarded or lost (once they are acknowledged by the Solace Message Router).\n   *  * They cannot be reordered in the event of network topology changes.\n   *  * They cannot be delivered more than once to a single client (unless the redelivered\n   *    message flag is applied).\n   *  * When they match subscriptions on durable endpoints, they are retained for a client\n   *    when that client is not connected.\n   *\n   * Persistent messages are most appropriate for applications that require persistent storage\n   * of the messages they send or intend to receive.\n   */\n  PERSISTENT:     1,\n  /**\n   * This mode is functionally the same as Persistent. It exists to facilitate interaction\n   * with JMS applications. In most situations where you want to use Guaranteed Messaging,\n   * it is recommended that you use {@link solace.MessageDeliveryModeType.PERSISTENT}.\n   */\n  NON_PERSISTENT: 2,\n};\n\nmodule.exports.MessageDeliveryModeType = Enum.new(MessageDeliveryModeType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message dump formats. It controls\n * the output of {@link solace.Message#dump}.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageDumpFlag = {\n  /**\n   * Display only the length of the binary attachment, XML content and user property maps.\n   */\n  MSGDUMP_BRIEF: 0,\n  /**\n   * Display the entire message contents.\n   */\n  MSGDUMP_FULL:  1,\n};\n\nmodule.exports.MessageDumpFlag = Enum.new(MessageDumpFlag);\n","const DebugLib = require('solclient-debug');\nconst MessageDumpUtilLib = require('./message-dump-util');\nconst { Destination } = require('solclient-destination');\nconst { LOG_ERROR } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageCacheStatus } = require('./message-cache-status');\nconst { MessageDeliveryModeType } = require('./message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { MessageUserCosType } = require('./message-user-cos-types');\nconst { SDTMapContainer, SDTFieldType } = require('solclient-sdt');\nconst { StringUtils } = require('solclient-util');\n\n\nconst MessageDumpStandardProvider = {\n\n  fpDestination(message/* , flags*/) {\n    const dest = message.getDestination();\n    if (dest !== null && dest instanceof Destination) {\n      return ['Destination', true, dest.toString(), null];\n    }\n    return ['Destination', false, '', null];\n  },\n\n  fpSenderId(message/* , flags*/) {\n    return ['SenderId', (message.getSenderId() !== undefined && message.getSenderId() !== null), message.getSenderId(), null];\n  },\n\n  fpAppmsgType(message/* , flags*/) {\n    return ['AppMessageType', (message.getApplicationMessageType() !== undefined && message.getApplicationMessageType() !== null),\n      message.getApplicationMessageType(), null];\n  },\n\n  fpAppMsgId(message/* , flags*/) {\n    return ['AppMessageID', (message.getApplicationMessageId() !== undefined && message.getApplicationMessageId() !== null),\n      message.getApplicationMessageId(), null];\n  },\n\n  fpSequenceNumber(message/* , flags*/) {\n    const sequenceNum = message.getSequenceNumber();\n    if (typeof sequenceNum === 'number') {\n      return ['SequenceNumber', true, sequenceNum, null];\n    }\n    return ['SequenceNumber', false, '', null];\n  },\n\n  fpTopicSequenceNumber(message/*, flags */) {\n    const topicSeqNo = message.getTopicSequenceNumber();\n    if (Long.isLong(topicSeqNo)) {\n      return ['TopicSequenceNumber', true, topicSeqNo.toString(), null];\n    }\n    return ['TopicequenceNumber', false, '', null];\n  },\n\n  fpCorrelationId(message/* , flags*/) {\n    return ['CorrelationId', (message.getCorrelationId() !== undefined && message.getCorrelationId() !== null),\n      message.getCorrelationId(), null];\n  },\n\n  fpHttpContentType(/*message*/ /*, flags*/) {\n    return ['HTTP Content Type', false, undefined, null];\n  },\n\n  fpHttpContentEncoding(/*message*/ /*, flags*/) {\n    return ['HTTP Content Encoding', false, undefined, null];\n  },\n\n  fpSendTimestamp(message/* , flags*/) {\n    const timestamp = message.getSenderTimestamp();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['SendTimestamp', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['SendTimestamp', false, '', null];\n  },\n\n  fpRcvTimestamp(message/* , flags*/) {\n    const timestamp = message.getReceiverTimestamp();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['RcvTimestamp', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['RcvTimestamp', false, '', null];\n  },\n\n  fpClassOfService(message/* , flags*/) {\n    const cos = message.getUserCos();\n    if (typeof cos === 'number') {\n      return ['Class Of Service', true, MessageUserCosType.nameOf(message.getUserCos()), null];\n    }\n    return ['Class Of Service', false, '', null];\n  },\n\n//  fpPriority(message/* , flags*/) {\n//    const prio = message.getPriority() !== undefined ? message.getPriority() : 'undefined';\n//    return ['Message Priority', true, prio, null];\n//  },\n\n  fpDeliveryMode(message/* , flags*/) {\n    const mode = message.getDeliveryMode();\n    if (typeof mode === 'number') {\n      return ['DeliveryMode', true, MessageDeliveryModeType.nameOf(message.getDeliveryMode()), null];\n    }\n    return ['DeliveryMode', false, '', null];\n  },\n\n  fpGuaranteedMsgId(message/*, flags*/) {\n    const msgId = message.getGuaranteedMessageId();\n    if (Long.isLong(msgId)) {\n      return ['Message Id', true, msgId.toString(10), null];\n    }\n    return ['Message Id', false, '', null];\n  },\n\n  fpReplicationGroupMessageId(message/* , flags*/) {\n    const rgmid = message.getReplicationGroupMessageId();\n    if (rgmid === undefined) {\n      return ['Replication Group Message Id', false, '', null];\n    }\n    return ['Replication Group Message Id', true, rgmid.toString(), null];\n  },\n\n  fpTimeToLive(message/* , flags */) {\n    const timeToLive = message.getTimeToLive();\n    if (typeof timeToLive === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      const d = new Date();\n      return ['TimeToLive', true,\n        `${timeToLive} (${mdu.formatDate(d.getTime() + timeToLive)})`, null];\n    }\n    return ['TimeToLive', false, '', null];\n  },\n\n  fpExpiration(message/*, flags*/) {\n    const timestamp = message.getGMExpiration();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['Expiration', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['Expiration', false, '', null];\n  },\n\n  fpMessageDMQEligible(message/* , flags*/) {\n    return ['DMQ Eligible', message.isDMQEligible(), '', null];\n  },\n\n  fpMessageRedelivered(message/* , flags*/) {\n    return ['Message Re-delivered', message.isRedelivered(), '', null];\n  },\n\n  fpMessageDeliveryCount(message/* , flags*/) {\n    //TODO: exception handling!\n    try {\n      return ['Message Delivery Count', true, message.getDeliveryCount(), null];\n    } catch (e) {\n      return ['Message Delivery Count', false, '', null];\n    }\n  },\n\n  fpDiscardIndication(message/* , flags*/) {\n    return ['Discard Indication', message.isDiscardIndication(), '', null];\n  },\n\n  fpAckImmediately(message/* , flags*/) {\n    return ['ACK Immediately', message.isAcknowledgeImmediately(), '', null];\n  },\n\n  fpElidingEligible(message/* , flags*/) {\n    return ['Eliding Eligible', message.isElidingEligible(), '', null];\n  },\n\n  fpReplyMessage(message/* , flags*/) {\n    return ['Reply Message', message.isReplyMessage(), '', null];\n  },\n\n  fpReplyTo(message/* , flags*/) {\n    const replyTo = message.getReplyTo();\n    if (replyTo !== null && replyTo instanceof Destination) {\n      return ['ReplyTo', true, replyTo.toString(), null];\n    }\n    return ['ReplyTo', false, '', null];\n  },\n\n  fpDeliverToOne(message/* , flags*/) {\n    return ['Deliver To One', message.isDeliverToOne(), '', null];\n  },\n\n  fpCacheMessage(message/* , flags*/) {\n    return ['Message from cache', message.getCacheStatus() !== MessageCacheStatus.LIVE, '', null];\n  },\n\n  fpCacheRequestId(message/*, flags */) {\n    const cacheRequestId = message.getCacheRequestId();\n    if (Long.isLong(cacheRequestId)) {\n      return ['Cache Request Id', true, cacheRequestId.toString, null];\n    }\n    return ['Cache Request Id', false, '', null];\n  },\n\n  fpUserPropertyMap(message, flags) {\n    const propMap = message.getUserPropertyMap();\n    if (propMap !== null && propMap instanceof SDTMapContainer) {\n      const value = `${propMap.getKeys().length} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          const mdu = MessageDumpUtilLib.MessageDumpUtil;\n          detailValue = mdu.printMap(propMap, 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['User Property Map', true, value, detailValue];\n    }\n    return ['User Property Map', false, '', null];\n  },\n\n  fpCorrelationTag(message/*, flags*/) {\n    const strValue = message.getCorrelationKey();\n    return ['Correlation Tag Pointer', (strValue !== undefined && strValue !== null),\n      strValue, null];\n  },\n\n  fpUserData(message/* , flags*/) {\n    if (StringUtils.notEmpty(message.getUserData())) {\n      return ['User Data', true, `len=${message.getUserData().length}`,\n        DebugLib.Debug.formatDumpBytes(message.getUserData(), true, 2)];\n    }\n    return ['User Data', false, '', null];\n  },\n\n  fpSdtStream(message, flags) {\n    const sdtFieldValue = message.getSdtContainer();\n    if (sdtFieldValue !== null && sdtFieldValue.getType() === SDTFieldType.STREAM) {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      const value = `${mdu.countItems(sdtFieldValue.getValue())} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          detailValue = mdu.printStream(sdtFieldValue.getValue(), 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['SDT Stream', true, value, detailValue];\n    }\n    return ['SDT Stream', false, '', null];\n  },\n\n  fpSdtMap(message, flags) {\n    const sdtFieldValue = message.getSdtContainer();\n    if (sdtFieldValue !== null && sdtFieldValue.getType() === SDTFieldType.MAP) {\n      const value = `${sdtFieldValue.getValue().getKeys().length} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          const mdu = MessageDumpUtilLib.MessageDumpUtil;\n          detailValue = mdu.printMap(sdtFieldValue.getValue(), 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['SDT Map', true, value, detailValue];\n    }\n    return ['SDT Map', false, '', null];\n  },\n\n  fpBinaryAttachment(message, flags) {\n    if (!message._binaryAttachment || message._binaryAttachment.length < 1) {\n      return ['Binary Attachment', false, '', null];\n    }\n    const att = message._binaryAttachment.toString('latin1');\n    const value = `len=${att.length}`;\n    let detailValue = null;\n    if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n      detailValue = DebugLib.Debug.formatDumpBytes(att, true, 2);\n    }\n    return ['Binary Attachment', true, value, detailValue];\n  },\n\n  fpXmlContent(message, flags) {\n    const xml = message.getXmlContent();\n    if (StringUtils.notEmpty(xml)) {\n      const value = `len=${xml.length}`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        detailValue = DebugLib.Debug.formatDumpBytes(xml, true, 2);\n      }\n      return ['XML', true, value, detailValue];\n    }\n    return ['XML', false, '', null];\n  },\n\n  fpXmlMetadata(message, flags) {\n    const xmlMetadata = message.getXmlMetadata();\n    if (StringUtils.notEmpty(xmlMetadata)) {\n      const value = `len=${xmlMetadata.length}`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        detailValue = DebugLib.Debug.formatDumpBytes(xmlMetadata, true, 2);\n      }\n      return ['XML Metadata', true, value, detailValue];\n    }\n    return ['XML Metadata', false, '', null];\n  },\n};\n\nmodule.exports.MessageDumpStandardProvider = MessageDumpStandardProvider;\n","const DebugLib = require('solclient-debug');\nconst MessageDumpStandardProviderLib = require('./message-dump-standard-provider');\nconst {\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n} = require('solclient-sdt');\nconst { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { StringBuffer, StringUtils } = require('solclient-util');\n\nconst MessageDumpState = {\n  get dumpProviders() {\n    const providers = MessageDumpStandardProviderLib.MessageDumpStandardProvider;\n    return Object.keys(providers).map(k => providers[k]);\n  },\n};\n\nconst MessageDumpUtil = {\n  getOutOfRangeValue(rawData) {\n    if (typeof rawData === 'string') {\n      return `<out of range>\\n${DebugLib.Debug.formatDumpBytes(rawData)}`;\n    }\n    return `<out of range>\\n${DebugLib.Debug.formatDumpBytes(rawData.toString('latin1'))}`;\n  },\n\n  getValue(sdtField) {\n    let value = null;\n    try {\n      value = sdtField.getValue();\n      return value;\n    } catch (e) {\n      if (e instanceof SDTUnsupportedValueError) {\n        if (e.getSubcode() === SDTValueErrorSubcode.VALUE_OUTSIDE_SUPPORTED_RANGE) {\n          return this.getOutOfRangeValue(e.getSourceData());\n        }\n      } else if (e instanceof OperationError && e.subcode === ErrorSubcode.PARAMETER_INVALID_TYPE) {\n        return '<invalid type>';\n      }\n      throw e;\n    }\n  },\n\n  printMap(sdtMap, indent) {\n    if (Check.nothing(sdtMap) || !(sdtMap instanceof SDTMapContainer)) {\n      return null;\n    }\n    const lines = [];\n    const strIndent = StringUtils.padRight('', indent, ' ');\n    const keys = sdtMap.getKeys().sort();\n    keys.forEach((key) => {\n      const sdtFieldValue = sdtMap.getField(key);\n      const type = sdtFieldValue.getType();\n      const value = this.getValue(sdtFieldValue);\n      let strValue;\n      switch (type) {\n        case SDTFieldType.MAP:\n          strValue = `\\n${this.printMap(value, indent + 2)}`;\n          break;\n        case SDTFieldType.STREAM:\n          strValue = `\\n${this.printStream(value, indent + 2)}`;\n          break;\n        case SDTFieldType.BYTEARRAY:\n          strValue = DebugLib.Debug.formatDumpBytes(value.toString('latin1'), false, 0);\n          if (strValue !== null && strValue.substr(-1) === '\\n') {\n            strValue = strValue.substring(0, strValue.length - 1);\n          }\n          break;\n        default:\n          strValue = (value !== null) ? value.toString() : null;\n      }\n      lines.push(`${strIndent}Key '${key}' (${SDTFieldType.nameOf(type)}): ${strValue}`);\n    });\n    return lines.join('\\n');\n  },\n\n  printStream(sdtStream, indent) {\n    if (Check.nothing(sdtStream) || !(sdtStream instanceof SDTStreamContainer)) {\n      return null;\n    }\n    sdtStream.rewind();\n    const lines = [];\n    const strIndent = StringUtils.padRight('', indent, ' ');\n    while (sdtStream.hasNext()) {\n      const sdtFieldValue = sdtStream.getNext();\n      const type = sdtFieldValue.getType();\n      const value = this.getValue(sdtFieldValue);\n\n      let strValue;\n      switch (type) {\n        case SDTFieldType.MAP:\n          strValue = `\\n${this.printMap(value, indent + 2)}`;\n          break;\n        case SDTFieldType.STREAM:\n          strValue = `\\n${this.printStream(value, indent + 2)}`;\n          break;\n        case SDTFieldType.BYTEARRAY:\n          strValue = DebugLib.Debug.formatDumpBytes(value.toString('latin1'), false, 0);\n          if (strValue !== null && strValue.substr(-1) === '\\n') {\n            strValue = strValue.substring(0, strValue.length - 1);\n          }\n          break;\n        case SDTFieldType.DESTINATION:\n          strValue = value.toString();\n          break;\n        default:\n          strValue = (value !== null) ? value.toString() : null;\n      }\n      lines.push(`${strIndent}(${SDTFieldType.nameOf(type)}): ${strValue}`);\n    }\n    sdtStream.rewind();\n    return lines.join('\\n');\n  },\n\n  countItems(sdtStream) {\n    if (Check.nothing(sdtStream) || (!(sdtStream instanceof SDTStreamContainer))) {\n      return 0;\n    }\n    sdtStream.rewind();\n    let count = 0;\n    while (sdtStream.hasNext()) {\n      sdtStream.getNext();\n      count++;\n    }\n    sdtStream.rewind();\n    return count;\n  },\n\n  formatDate(timeStamp) {\n    return new Date(timeStamp).toString();\n  },\n\n  dump(message, flags, separator, colPadding) {\n    const sb = new StringBuffer();\n    let theSeparator = '\\n';\n    let needSeparator = false;\n    let theColPadding = 40;\n    if (separator !== undefined && separator !== null && typeof separator === 'string') {\n      theSeparator = separator;\n    }\n    if (colPadding !== undefined && colPadding !== null && typeof colPadding === 'number') {\n      theColPadding = colPadding;\n    }\n\n    MessageDumpState.dumpProviders.forEach((provider, index) => {\n      const [key, isPresent, value, detailValue] = provider(message, flags);\n      if (!isPresent) {\n        return;\n      }\n      if (needSeparator) {\n        sb.append(theSeparator);\n      }\n\n      if (value === null || value.length === 0) {\n        // If we have no VALUE field, this is probably a boolean flag\n        // and we just end up displaying the key and a newline.\n        sb.append(key);\n      } else {\n        sb.append(StringUtils.padRight(`${key}:`, theColPadding, ' '));\n        sb.append(value);\n      }\n\n      if (detailValue !== null && (flags & MessageDumpFlag.MSGDUMP_FULL)) {\n        sb.append('\\n');\n        if (detailValue.indexOf('  ') !== 0) {\n          sb.append('  ');\n        }\n        sb.append(detailValue);\n        if (detailValue.substr(-1) !== '\\n' && index < (MessageDumpState.dumpProviders.length - 1)) {\n          sb.append('\\n');\n        }\n      }\n      needSeparator = true;\n    });\n    return sb.toString();\n  },\n};\n\nmodule.exports.MessageDumpUtil = MessageDumpUtil;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message payload types\n * (see {@link solace.Message#getBinaryAttachment})\n *\n * A message may contain unstructured byte data, or a structured container.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageType = {\n  /**\n   * Binary message (unstructured bytes stored in the binary attachment message part).\n   * @type {Number}\n   */\n  BINARY: 0,\n  /**\n   * Structured map message.\n   * @type {Number}\n   */\n  MAP:    1,\n  /**\n   * Structured stream message.\n   * @type {Number}\n   */\n  STREAM: 2,\n  /**\n   * Structured text message.\n   * @type {Number}\n   */\n  TEXT:   3,\n};\n\nmodule.exports.MessageType = Enum.new(MessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of user Class of Service (COS) levels. The COS is set\n * on a Message with {@link solace.Message#setUserCos}\n * The Class of Service has different semantics for direct and guaranteed messages.\n *\n * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n * class of service selects the weighted round-robin delivery queue when the\n * message is forwarded to a consumer.  {@link solace.MessageUserCosType.COS1} are the\n * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n *\n * For messages published as guaranteed messages\n * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n * {@link solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n * with {@link solace.MessageUserCosType.COS1} can be rejected by the Solace Message Router if\n * that message would cause any queue or topic-endpoint to exceed its configured\n * low-priority-max-msg-count.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageUserCosType = {\n  /**\n   * Direct Messages: Lowest priority, use Solace Message Router client D-1 queues for delivery.\n   *\n   * Guaranteed Messages: Messages can be rejected if the message would cause any\n   * queue or topic-endpoint to exceed its configured <i>low-priority-max-msg-count</i>.\n   * @type {Number}\n   */\n  COS1: 0,\n  /**\n   * Direct Messages: Medium priority, use Solace Message Router client D-2 queues for delivery.\n   *\n   * Guaranteed Messages: N/A (same as COS3)\n   * @type {Number}\n   */\n  COS2: 1,\n  /**\n   * Direct Messages: Highest priority, use Solace Message Router client D-3 queues for delivery.\n   *\n   * Guaranteed Messages: Messages are not rejected for exceeding <i>low-priority-max-msg-count</i>.\n   * Messages may still be rejected for other reasons such as Queue 'Spool Over Quota'.\n   * @type {Number}\n   */\n  COS3: 2,\n};\n\nmodule.exports.MessageUserCosType = Enum.new(MessageUserCosType);\n","const clone = require('clone');\nconst SolclientFactoryLib = require('solclient-factory');\nconst { Codec: SDTCodec } = require('solclient-sdt');\nconst { Convert } = require('solclient-convert');\nconst { Destination } = require('solclient-destination');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_DEBUG } = require('solclient-log');\nconst { MessageCacheStatus } = require('./message-cache-status');\nconst { MessageDeliveryModeType } = require('./message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { MessageDumpUtil } = require('./message-dump-util');\nconst { MessageType } = require('./message-types');\nconst { MessageUserCosType } = require('./message-user-cos-types');\nconst { Parameter } = require('solclient-validate');\nconst { RgmidFactory } = require('./replication-group-message-id');\nconst { SDTField, SDTFieldType, SDTMapContainer, SDTUnsupportedValueError } = require('solclient-sdt');\n\nconst { ProfileBinding } = SolclientFactoryLib;\n\nconst {\n  utf8ToUcs2,\n  anythingToBuffer,\n} = Convert;\nconst {\n  isBoolean,\n  isEnumMember,\n  isInstanceOf,\n  isInstanceOfOrNothing,\n  isNumberOrNothing,\n  isStringOrNothing,\n} = Parameter;\n\n// When a message is cloned for sending,\n// * We assume that it may NOT include circular references.\n//   These are also unsupported in the encoder.\n// * We assume that all properties to be cloned are enumerable.\n//   This has significant (~10% AD send rate) performance impact.\n\nconst MESSAGE_CLONE_OPTIONS = { circular: false, includeNonEnumerable: false };\n\n/**\n * Function called on construct/reset. Sets the initial values for fields that have them.\n * @param {Message} message The message to initialize\n * @internal\n */\nfunction initMessage(message) {\n  message._deliveryMode = MessageDeliveryModeType.DIRECT;\n  message._userCos = MessageUserCosType.COS1;\n  message._cacheStatus = MessageCacheStatus.LIVE;\n  message._spoolerUniqueId = undefined;\n  /* message._spoolerMessageId does not to be set to undefined\n   * message._spoolerMessageId should only be set when\n   * message._spoolerUniqueId is set to a value\n   * other than undefined or RgmidFactory.INVALID_SUID\n   */\n  message._priority = undefined;\n  message._deliveryCount = -1; //Makes the accessor throw, never returned to user.\n}\n\n/**\n * Function called on reset only. Clears every field in the message. Call #initMessage\n * to set initial values.\n * @param {Message} message The message to clear\n * @internal\n */\nfunction clearMessage(message) {\n  const fields = Object.keys(message);\n  fields.forEach(f => delete message[f]);\n}\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.SolclientFactory.createMessage}</b>\n * <p>\n * A message is a container that can be used to store and send messages to and from the\n * Solace Message Router.\n *\n * Applications manage the lifecycle of a message; a message is created by calling\n * {@link solace.SolclientFactory.createMessage} and is freed by dereferencing it.\n *\n * API operations that cache or mutate messages always take a copy. A message may\n * be created, mutated by the API user, and sent multiple times.\n *\n * The Message Object provides methods to manipulate the common Solace\n * message header fields that are optionally sent in the binary metadata\n * portion of the Solace message.\n *\n * Applications can also use the structured data API {@link solace.Message#setSdtContainer}\n * to add containers (maps or streams) and their fields to the binary payload or\n * to the User Property map contained within the binary metadata.\n *\n * This does not prevent applications from ignoring these\n * methods and sending payload in the binary payload as an opaque binary field for\n * end-to-end communications\n *\n * @memberof solace\n */\nclass Message {\n\n  /**\n   * @constructor\n   * @hideconstructor\n   **/\n  constructor() {\n    initMessage(this);\n  }\n\n  /**\n   * Gets the payload type ({@link solace.MessageType}) of the message. A message has a\n   * structured payload if one was attached via {@link solace.Message#setSdtContainer} otherwise\n   * if the payload is attached via {@link Message@setBinaryAttachment} then it\n   * is unstructured ({@link solace.MessageType#BINARY})\n   *\n   * @returns {solace.MessageType} The structured payload type.\n   * @default {solace.MessageType.BINARY}\n   */\n  getType() {\n    return this._messageType || MessageType.BINARY; // This is OK; BINARY === 0.\n  }\n\n  /**\n   * Sets the application-provided message ID.\n   * @param {?String} value The new value for the application-provided message ID.\n   */\n  setApplicationMessageId(value) {\n    this._applicationMessageId = isStringOrNothing('applicationMessageId', value);\n  }\n\n  /**\n   * Gets the application-provided message ID.\n   * @returns {?String} The application provided message ID.\n   */\n  getApplicationMessageId() {\n    return this._applicationMessageId;\n  }\n\n  /**\n   * Sets the application message type. This value is used by applications\n   * only, and is passed through the API and Solace Message Router untouched.\n   * @param {?String} value The application message type.\n   */\n  setApplicationMessageType(value) {\n    this._applicationMessageType = isStringOrNothing('applicationMessageType', value);\n  }\n\n  /**\n   * Gets the application message type. This value is used by applications\n   * only, and is passed through the API and Solace Message Router untouched.\n   * @returns {?String} The application message type.\n   */\n  getApplicationMessageType() {\n    return this._applicationMessageType;\n  }\n\n  /**\n   * Gets the binary attachment part of the message.\n   *\n   * Backward compatibility note: Using the version10 factory profile or older,\n   * the binary attachment is returned as a 'latin1' String:\n   * Each character has a code in the range * 0-255\n   * representing the value of a single received byte at that position.\n   *\n   * @returns {?Uint8Array} A TypedArray view of the binary attachment.\n   */\n  getBinaryAttachment() {\n    if (this._binaryAttachment && ProfileBinding.value.byteArrayAsString) {\n      return this._binaryAttachment.toString('latin1');\n    }\n    return this._binaryAttachment;\n  }\n\n  /**\n   * Sets the binary attachment part of the message.\n   *\n   * The binary attachment is conceptually an array of bytes.\n   * When this method is used, the message payload type is {@link solace.MessageType#BINARY}\n   * See {@link solace.Message#getType}.\n   *\n   * Applications may set the binary attachment to NULL or undefined to\n   * remove the binary attachment and create a message with no payload.\n   *\n   * The following types are accepted:\n   *   Buffer (the nodeJS native type or equivalent)\n   *   ArrayBuffer,\n   *   Any DataView or TypedArray,\n   *   'latin1' String for backwards compatibility:\n   *     each character has a code in the range 0-255\n   *     representing exactly one byte in the attachment.\n   *\n   * @param {?Uint8Array} value Sets the binary attachment part of the message.\n   */\n  setBinaryAttachment(value) {\n    if (value) {\n      this._messageType = MessageType.BINARY;\n    }\n    this._setBinaryAttachment(anythingToBuffer(value));\n  }\n  _setBinaryAttachment(value) {\n    this._binaryAttachment = value;\n  }\n\n  /**\n   * Given a Message containing a cached message, return the cache Request Id that\n   * the application set in the call to {@link solace.CacheSession#sendCacheRequest}.\n   *\n   * @returns {?Number} The request ID of the cache request associated with this message.\n   */\n  getCacheRequestId() {\n    return this._cacheRequestId;\n  }\n\n  /**\n   * @private\n   * @param {Number} cacheRequestID The cache request ID associated with this message\n   */\n  _setCacheRequestID(cacheRequestID) {\n    this._cacheRequestId = cacheRequestID;\n  }\n\n  /**\n   * Gets the correlation ID.  The message Correlation Id\n   * is carried in the Solace message headers unmodified by the API and\n   * the Solace Message Router. This field may be used for peer-to-peer\n   * message synchronization and is commonly used for correlating\n   * a request to a reply. See {@link solace.Session#sendRequest}.\n   * @returns {?String} The correlation ID associated with the message.\n   */\n  getCorrelationId() {\n    return this._correlationId;\n  }\n\n  /**\n   * Sets the correlation ID. The message Correlation Id\n   * is carried in the Solace message headers unmodified by the API and\n   * the Solace Message Router. This field may be used for peer-to-peer\n   * message synchronization and is commonly used for correlating\n   * a request to a reply. See {@link solace.Session#sendRequest}.\n   * @param {?String} value The correlation ID to associate with the message.\n   */\n  setCorrelationId(value) {\n    this._correlationId = isStringOrNothing('correlationId', value);\n  }\n\n  /**\n   * Gets the correlation Key. A correlation key is used to correlate\n   * a message with its acknowledgement or rejection. The correlation key is an object that is\n   * passed back to the client during the router acknowledgement or rejection.\n   *\n   * The correlation key is a local reference\n   * used by applications generating Guaranteed messages. Messages that are\n   * sent in either {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT} mode may set the correlation key.\n   * @returns {?Object} The correlation Key associated with the message,\n   * or <code>null</code>, if unset.\n   */\n  getCorrelationKey() {\n    return this._correlationKey || null;\n  }\n\n  /**\n   * Sets the correlation Key. A correlation key is used to correlate\n   * a message with its acknowledgement or rejection. The correlation key is an object that is\n   * passed back to the client during the router acknowledgement or rejection.\n   *\n   * The correlation key is a local reference\n   * used by applications generating Guaranteed Messages. Messages that are\n   * sent in either {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT} mode may set the correlation key. If this\n   * method is used, the correlation information is returned\n   * when the {@link solace.SessionEventCode#event:ACKNOWLEDGED_MESSAGE} event\n   * is later received for an acknowledged message or when the\n   * {@link solace.SessionEventCode#event:REJECTED_MESSAGE_ERROR} is received for a rejected\n   * message.\n   *\n   * The API only maintains a reference to the passed object.  If the application requires the\n   * contents are unmodified for proper correlation, then it is the application's responsibility\n   * to ensure the contents of the object are not modified.\n   *\n   * Important: <b>The Correlation Key is not included in the\n   * transmitted message and is only used with the local API</b>\n   * @param {Object} value The correlation Key to associate with the message.\n   */\n  setCorrelationKey(value) {\n    this._correlationKey = value;\n  }\n\n  /**\n   * Gets whether the message is configured for delivering to one client only.\n   * @returns {Boolean} indicates whether the message is configured for\n   * delivering to one client only.\n   * @deprecated use Shared Subscriptions instead.\n   */\n  isDeliverToOne() {\n    return this._deliverToOne || false;\n  }\n\n  /**\n   * Sets whether the message is configured for delivering to one client only.\n   * @param {Boolean} value whether the message is configured for delivering to one client only.\n   * @deprecated use Shared Subscriptions instead.\n   */\n  setDeliverToOne(value) {\n    this._setDeliverToOne(this._deliverToOne = isBoolean('deliverToOne', value));\n  }\n  _setDeliverToOne(value) {\n    this._deliverToOne = value;\n  }\n\n  /**\n   * Gets the delivery mode of the message.\n   * @returns {solace.MessageDeliveryModeType} representing the delivery mode of the message.\n   */\n  getDeliveryMode() {\n    return this._deliveryMode;\n  }\n\n  /**\n   * Sets the delivery mode of the message.\n   * @param {solace.MessageDeliveryModeType} value The message delivery mode.\n   */\n  setDeliveryMode(value) {\n    this._setDeliveryMode(isEnumMember('deliveryMode', value, MessageDeliveryModeType));\n  }\n  _setDeliveryMode(value) {\n    this._deliveryMode = value;\n  }\n\n  /**\n   * Gets the destination to which the message was published.\n   * @returns {?Destination} The destination to which a message was published.\n   */\n  getDestination() {\n    return this._destination;\n  }\n\n  /**\n   * Sets the destination ({@link solace.DestinationType#Topic} or\n   * {@link solace.DestinationType#Queue}) to publish the message to.\n   * @param {Destination} value The destination to publish the message to.\n   */\n  setDestination(value) {\n    this._setDestination(isInstanceOf('destination', value, Destination));\n  }\n  _setDestination(value) {\n    this._destination = value;\n  }\n\n  /**\n   * Indicates whether one or more messages have been discarded prior\n   * to the current message. This indicates congestion discards only and\n   * is not affected by message eliding.\n   * @returns {Boolean} Returns true if one or more messages have been\n   * discarded prior to the current message; otherwise, it returns false.\n   */\n  isDiscardIndication() {\n    return this._discardIndication || false;\n  }\n\n  /**\n   * @private\n   * @param {Boolean} value The new value for discard indication\n   */\n  setDiscardIndication(value) {\n    this._setDiscardIndication(isBoolean('discardIndication', value));\n  }\n  _setDiscardIndication(value) {\n    this._discardIndication = value;\n  }\n\n  /**\n   * Returns whether the message is eligible for eliding.\n   * <p>\n   * Message eliding enables filtering of data to avoid transmitting\n   * every single update to a subscribing client.\n   * <p>\n   * This property does not indicate whether the message was elided.\n   *\n   * @returns {Boolean} indicates whether the message is eligible for eliding.\n   */\n  isElidingEligible() {\n    return this._elidingEligible || false;\n  }\n\n  /**\n   * Sets whether the message is eligible for eliding.\n   * <p>\n   * Message eliding enables filtering of data to avoid transmitting\n   * every single update to a subscribing client.\n   * <p>\n   * This property does not indicate whether the message was elided.\n   *\n   * @param {Boolean} value sets whether the message is eligible for eliding.\n   */\n  setElidingEligible(value) {\n    this._setElidingEligible(isBoolean('setElidingEligible', value));\n  }\n  _setElidingEligible(value) {\n    this._elidingEligible = value;\n  }\n\n  /// ---------------------------------------------------------\n  // * Internal use only methods on the message, for fields set by the internal\n  // * publisher\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {Number} The publisher ID\n   * @private\n   */\n  getPublisherId() {\n    return this._publisherId;\n  }\n  /**\n   * @param {Number} value  The publisher ID to set\n   * @private\n   */\n  setPublisherId(value) {\n    this._publisherId = value;\n  }\n\n  /**\n   * @returns {Number} The publisher message ID\n   * @private\n   */\n  getPublisherMessageId() {\n    return this._publisherMsgId;\n  }\n  /**\n   * @param {Number} value The publisher message ID to set\n   * @private\n   */\n  setPublisherMessageId(value) {\n    this._publisherMsgId = value;\n  }\n\n  /// -------------------------------------------------------------\n  // * User-settable properties for publishing\n  /// -------------------------------------------------------------\n\n  /**\n   * @returns {Number} The Guaranteed Message TTL, in milliseconds.\n   */\n  getTimeToLive() {\n    return this._timeToLive;\n  }\n  /**\n   * @param {Number} value The Guaranteed Message TTL to set, in milliseconds.\n   *\n   * The time to live is the number of milliseconds the message may be stored on the\n   * Solace Message Router before the message is discarded or moved to a Dead Message\n   * Queue. See {@link solace.Message.setDMQEligible}.\n   *\n   * Setting the Time To Live to zero disables TTL for the message.\n   *\n   * This property is only valid for Guaranteed messages (Persistent and Non-Persistent).\n   * It has no effect when used in conjunction with other message types unless the message\n   * is promoted by the appliance to a Guaranteed message.\n   *\n   * The maxium allowed time to live is 3.1536E11 (315360000000) which is\n   * approximately 10 years.\n   */\n  setTimeToLive(value) {\n    const MAX_MESSAGE_TTL_MS = (10 * 365 * 24 * 60 * 60 * 1000); // approximately 10 years\n\n    // Allow parser and initializer to set timeToLive to undefined\n    if (value === null || value === undefined) {\n      this._timeToLive = value;\n      return;\n    }\n    if (typeof value !== 'number' || isNaN(value)) {\n      throw new OperationError('Invalid type for time to live',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (value < 0 || value > MAX_MESSAGE_TTL_MS) {\n      throw new OperationError('Invalid time to live value',\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._timeToLive = value;\n  }\n\n  /**\n   * @returns {?Number} The Guaranteed Message expiration value.\n   * The expiration time is the UTC time\n   * (that is, the number of milliseconds from midnight January 1, 1970 UTC) when the\n   * message is to expire.\n   */\n  getGMExpiration() {\n    return this._expiration;\n  }\n  /**\n   * Set the expiration time field. The expiration time is the UTC time\n   * (that is, the number of milliseconds from midnight January 1, 1970 UTC) when the\n   * message is to expire. The expiration time is carried in the message when set to\n   * a non-zero value. Expiration time is not included when this value is set to zero or\n   * undefined\n   *\n   * The message expiration time is carried to clients that receive the message\n   * unmodified and does not effect the life cycle of the message. Use\n   * {@link solace.Message#setTimeToLive} to enforce message expiry in the network.\n   *\n   * @param {?Number} value The new Guaranteed Message expiration value\n   */\n  setGMExpiration(value) {\n    this._expiration = isNumberOrNothing('GMExpiration', value);\n  }\n\n  /**\n   * @returns {Boolean} Whether this message is Guaranteed Message DMQ eligible\n   */\n  isDMQEligible() {\n    return this._dmqEligible || false;\n  }\n  /**\n   * @param {Boolean} value The new value for Guaranteed Message DMQ (Dead Message Queue) Eligible.\n   * When this property is set, when the message expires in the network\n   * the message is saved on a appliance dead message queue. Otherwise the expired message is\n   * discarded. See {@link solace.Message#setTimeToLive}.\n   * @default false\n   */\n  setDMQEligible(value) {\n    this._setDMQEligible(isBoolean('DMQEligible', value));\n  }\n  _setDMQEligible(value) {\n    this._dmqEligible = value;\n  }\n\n  /// ---------------------------------------------------------\n  // * Internal use only methods on the message, for fields set by the consumer flow\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {Long} The ID of the flow that received this message\n   * @private\n   */\n  getFlowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The flow ID that received this message\n   * @private\n   */\n  setFlowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * @returns {Long} The Guaranteed Message prevMsgId\n   * @private\n   */\n  getGuaranteedPreviousMessageId() {\n    return this._guaranteedPrevMsgId;\n  }\n  /**\n   * @param {Long} value The Guaranteed Message prevMsgId to set\n   * @private\n   */\n  setGuaranteedPreviousMessageId(value) {\n    this._guaranteedPrevMsgId = value;\n  }\n\n  /**\n   * @param {Long} value Spooler unique id value\n   * @private\n   */\n  _setSpoolerUniqueId(value) {\n    this._spoolerUniqueId = value;\n  }\n\n  /**\n   * @returns {?Long} value of Spooler unique id\n   * @private\n   */\n  _getSpoolerUniqueId() {\n    // This can be set via the smf header or by the message consumer\n    // using _setSpoolerUniqueId.\n    // The message consumer check if a data message has a suid set\n    // the updates the consumer stored value for suid from the message value.\n    // If the message does not have a suid the message consumer sets the suid\n    // of the message using _setSpoolerUniqueId.\n    // See consumer-fsm.acceptMessage for details.\n    if (this._spoolerUniqueId === undefined) {\n      return RgmidFactory.INVALID_SUID;\n    }\n    return this._spoolerUniqueId;\n  }\n\n  /// ---------------------------------------------------------\n  // * Properties set by the Message Consumer\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {?solace.MessageConsumer} The associated Message Consumer, if received by a consumer\n   */\n  getMessageConsumer() {\n    return this._consumer;\n  }\n  /**\n   * @param {solace.MessageConsumer} value The Message Consumer to associate with this message\n   * @private\n   */\n  setMessageConsumer(value) {\n    this._consumer = value;\n  }\n\n  /**\n   * This message ID is NOT a universal unique identifier for the message.\n   * There is no use for this message ID in an application.\n   * Internally this message ID is used when a message is acknowledged\n   * calling Message.acknowledge().\n   * No other meaning should be inferred from the value of this message ID.\n   * @returns {?Long} A field in the message structure intended for internal use.\n   * @deprecated There is no useful purpose for this method. Do not use it.\n   */\n  getGuaranteedMessageId() {\n    return this._guaranteedMsgId;\n  }\n  /**\n   * @param {Long} value The Guaranteed Message msgId to set\n   * @private\n   */\n  setGuaranteedMessageId(value) {\n    this._guaranteedMsgId = value;\n  }\n\n  /**\n   * @param {Long} value Spooler message id value, this can be the mateAckId or the AckId\n   * @private\n   */\n  _setSpoolerMessageId(value) {\n    this._spoolerMessageId = value;\n  }\n\n  /**\n   * Returns the Replication Group Message Id\n   * @returns {?solace.ReplicationGroupMessageId} The replication group message id\n   *  assigned by the router.\n   */\n  getReplicationGroupMessageId() {\n    if (this._spoolerUniqueId === undefined\n       || RgmidFactory.INVALID_SUID.eq(this._spoolerUniqueId)) {\n      return undefined;\n    }\n    /* use this._spoolerMessageId if possible otherwise use this._guaranteedMsgId */\n    const smid = this._spoolerMessageId || this._guaranteedMsgId;\n    /* Note smid as this._guaranteedMsgId must have a value\n     * if this._spoolerUniqueId is not RgmidFactory.INVALID_SUID */\n    return RgmidFactory.from({ suid: this._spoolerUniqueId, msgid: smid });\n  }\n\n  /**\n   * Returns the Topic Sequence Number.  If there is no topic sequence number\n   * undefined is returned.\n   * @returns {?Long} The Topic Sequence number assigned to this message by the Message Router.\n   */\n  getTopicSequenceNumber() {\n    return this._topicSequenceNumber;\n  }\n\n  /**\n   * @param {Long} topicSeqNo The Topic Sequence Number to set\n   * @private\n   */\n  setTopicSequenceNumber(topicSeqNo) {\n    this._topicSequenceNumber = topicSeqNo;\n  }\n\n  /**\n   * Returns the delivery count.\n   * @returns {?Number} The delivery count reported by the broker.\n   */\n\n  getDeliveryCount() {\n    if (this._deliveryCount === -1) {\n      throw new OperationError('Endpoint does not report delivery count.',\n        ErrorSubcode.INVALID_OPERATION);\n    } // else\n    return this._deliveryCount;\n  }\n\n  /**\n   * @param {Number} deliveryCount on this message.\n   * @private\n   */\n  setDeliveryCount(deliveryCount) {\n    this._deliveryCount = deliveryCount;\n  }\n\n  /**\n   * Acknowledges this message.\n   *\n   * If the {@link solace.MessageConsumer} on which this message was received is configured to use\n   * {@link solace.MessageConsumerAckMode.CLIENT}, then when a message is received by an\n   * application, the application must call this method to explicitly acknowledge reception of the\n   * message. This frees local and router resources associated with an unacknowledged message.\n   *\n   * The API does not send acknowledgments immediately. It stores the state for\n   * acknowledged messages internally and acknowledges messages, in bulk, when a\n   * threshold or timer is reached.\n   *\n   * @throws {@link solace.OperationError}\n   *  * if this message was not received via Guaranteed Message;\n   *    subcode: {@link solace.ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH}\n   *  * if the associated {@link solace.Session} is not connected;\n   *    subcode: {@link solace.ErrorSubcode.SESSION_NOT_CONNECTED}\n   *  * if the associated {@link solace.MessageConsumer} is not connectedl\n   *    subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  acknowledge() {\n    if (this._consumer.getProperties().browser) {\n      throw new OperationError('Messages delivered to a Queue Browser can only be deleted by calling QueueBrowser.removeMessageFromQueue()',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    if (this._acked) {\n      throw new OperationError('Message can only be acknowledged once',\n        ErrorSubcode.MESSAGE_ALREADY_ACKNOWLEDGED);\n    }\n    if (this._deliveryMode === MessageDeliveryModeType.DIRECT) {\n      throw new OperationError('Cannot acknowledge a DIRECT message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer) {\n      throw new OperationError('Cannot acknowledge a locally-created message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer._sessionInterface.canAck) {\n      throw new OperationError('Cannot acknowledge using associated session',\n        ErrorSubcode.SESSION_NOT_CONNECTED);\n    }\n    if (!this._consumer.canAck) {\n      throw new OperationError('Cannot acknowledge using associated Message Consumer',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    this._consumer.applicationAck(this._guaranteedMsgId);\n    this._acked = true;\n  }\n\n  /**\n   * Returns whether acknowledge() has been called on this message.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n  get isAcknowledged() {\n    return this._acked || false;\n  }\n\n  /**\n   * Test if the Acknowledge Immediately message property is set or not.\n   * When the Acknowledge Immediately property is set to true on an outgoing\n   * Guaranteed Message,\n   * it indicates that the Solace Message Router should Acknowledge this message\n   * immediately upon receipt.\n   *\n   * This property, when set by a publisher, may or may not be removed by the\n   * Solace Message Router prior to delivery to a consumer, so message consumers\n   * must not expect the property value indicates how the message was\n   * originally published\n   * @returns {Boolean} Whether this message was set to acknowledge immediately.\n   */\n  isAcknowledgeImmediately() {\n    return this._ackImmediately || false;\n  }\n  /**\n   * Set the optional Acknoweledge Immediately message property.\n   * When the Acknowledge Immediately property is set to true on an outgoing Guaranteed Message,\n   * it indicates that the Solace Message Router should acknoweledge this message\n   * immediately upon receipt. By default the property is set to false on newly created messages.\n   *\n   * This property, when set by a publisher, may or may not be removed by the appliance\n   * prior to delivery to a consumer, so message consumers must not expect the property value\n   * indicates how the message was originally published. Therefore if a received message\n   * is forwarded by the application, the Acknowledge Immediately property should be\n   * explicitly set to the desired value (true or false).\n   *\n   * Setting this property on an outgoing direct message has no effect.\n   *\n   * @param {Boolean} value Whether to acknowledge this message immediately.\n   */\n  setAcknowledgeImmediately(value) {\n    this._setAcknowledgeImmediately(isBoolean('acknowledgeImmediately', value));\n  }\n  _setAcknowledgeImmediately(value) {\n    this._ackImmediately = value;\n  }\n\n  /**\n   * Gets the cache status of this message.\n   *\n   * @returns {?solace.MessageCacheStatus} The cache status of this message. The status\n   * will be MessageCacheStatus.LIVE unless the message was returned in a\n   * reply to a cache request.\n   */\n  getCacheStatus() {\n    return this._cacheStatus;\n  }\n\n  /**\n   * @param {solace.MessageCacheStatus} cacheStatus The new cache status for this message\n   * @private\n   */\n  _setCacheStatus(cacheStatus) {\n    this._cacheStatus = cacheStatus;\n  }\n\n  /**\n   * Returns whether the message's reply field is set, indicating\n   * that this message is a reply to a previous request. See {@link solace.Session#sendRequest}.\n   * @returns {Boolean} Indicates the state of the reply field.\n   */\n  isReplyMessage() {\n    return this._replyMessage || false;\n  }\n\n  /**\n   * Indicates whether the message has been marked as redelivered by the Solace Message Router.\n   * @returns {Boolean} Indicates whether the redelivered flag is set.\n   */\n  isRedelivered() {\n    return this._redelivered || false;\n  }\n  /**\n   * @param {Boolean} value The redelivered flag\n   * @private\n   */\n  setRedelivered(value) {\n    this._redelivered = value;\n  }\n\n  /**\n   * Sets the <i>reply</i> field of the message.\n   * @param {Boolean} value Sets whether to flag the message as a reply.\n   */\n  setAsReplyMessage(value) {\n    this._replyMessage = isBoolean('asReplyMessage', value);\n  }\n\n  /**\n   * Gets the receive timestamp (in milliseconds, from midnight, January 1, 1970 UTC).\n   * @returns {?Number} The receive timestamp, if set.\n   */\n  getReceiverTimestamp() {\n    return this._receiverTimestamp;\n  }\n\n  /**\n   * Gets the replyTo destination\n   * @returns {?solace.Destination} The value of the replyTo destination, if set.\n   */\n  getReplyTo() {\n    return this._replyTo;\n  }\n\n  /**\n   * Sets the replyTo destination\n   * @param {solace.Destination} value The replyTo destination.\n   */\n  setReplyTo(value) {\n    this._replyTo = isInstanceOfOrNothing('replyTo', value, Destination);\n  }\n\n  /**\n   * Returns the Sender's ID.\n   * @returns {?String} The Sender's ID, if set.\n   */\n  getSenderId() {\n    return this._senderId;\n  }\n\n  /**\n   * Sets the Sender ID for the message\n   * @param {String} value The Sender ID for the message.\n   */\n  setSenderId(value) {\n    this._senderId = isStringOrNothing('senderId', value);\n  }\n\n  /**\n   * Gets the send timestamp (in milliseconds, from midnight, January 1,\n   * 1970 UTC).\n   * @returns {?Number} The send timestamp, if set.\n   */\n  getSenderTimestamp() {\n    return this._senderTimestamp;\n  }\n\n  /**\n   * Sets the send timestamp (in milliseconds, from midnight, January 1,\n   * 1970 UTC). This field can be generated automatically during message\n   * publishing, but it will not be generated if previously set to a non-null value by this method.\n   * See {@link solace.SessionProperties#generateSendTimestamps}.\n   *\n   * An application that publishes the same {@link solace.Messsage} multiple times and\n   * also wants generted timestamps on each messages, should set the sender timestamp\n   * to undefined after each call to {@link solace.Session#send}.\n   * @param {?Number} value The value to set as the send timestamp.\n   */\n  setSenderTimestamp(value) {\n    this._senderTimestamp = isNumberOrNothing('senderTimestamp', value);\n  }\n\n  /**\n   * Gets the sequence number.\n   * <p>\n   * This is an application-defined field,\n   * see <code>{@link solace.Message#setSequenceNumber}()</code>.\n   * @returns {?Number} The sequence number, if set\n   * @throws {@link solace.SDTUnsupportedValueError} in case the sequence number is out of range.\n   */\n  getSequenceNumber() {\n    if (this._sequenceNumberError) {\n      throw this._sequenceNumberError;\n    }\n    return this._sequenceNumber;\n  }\n\n  /**\n   * Sets the application-defined sequence number. If the sequence number\n   * is not set, or set to undefined, and {@link solace.SessionProperties#generateSequenceNumber}\n   * is true, then a sequence number is automatically generated for each sent message.\n   * @param {?Number} value The sequence number.\n   */\n  setSequenceNumber(value) {\n    if (value instanceof SDTUnsupportedValueError) {\n      this._sequenceNumberError = value;\n    } else {\n      this._sequenceNumber = isNumberOrNothing('sequenceNumber', value);\n      this._sequenceNumberError = undefined;\n      //TODO: this is probably wrong. Shouldn't it be cleared if value === undefined?\n      this._autoSequenceNumber = false;\n    }\n  }\n\n  /**\n   * Gets the Class of Service (CoS) value for the message.\n   * The Class of Service has different semantics for direct and guaranteed messages.\n   *\n   * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * class of service selects the weighted round-robin delivery queue when the\n   * message is forwarded to a consumer.  {@link solace.MessageUserCosType.COS1} are the\n   * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n   *\n   * For messages published as guaranteed messages\n   * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n   * with {@link solace.MessageUserCosType.COS1} can be rejected by the Solace Message Router if\n   * that message would cause any queue or topic-endpoint to exceed its configured\n   * low-priority-max-msg-count.\n   *\n   * @returns {solace.MessageUserCosType} The COS value.\n   */\n  getUserCos() {\n    return this._userCos;\n  }\n\n  /**\n   * Gets the Message Priority Parameter (JMS Priority) value for the message.\n   * Numerical values between 0 and 255 are valid return values,\n   * undefined means the parameter is not present.\n   *\n   * If destination queues and topic endpoints for this message\n   * are configured to respect message priority,\n   * the values 0 through 9 can be used to affect the priority\n   * of delivery to consumers of those queues or topic endpoints.\n   * For the purposes of prioritized message delivery,\n   * values larger than 9 are treated the same as 9.\n   *\n   * @returns {?Number} The Message Priority Parameter value.\n   */\n  getPriority() {\n    return this._priority;\n  }\n\n  /**\n   * Sets the Class of Service (CoS) value for the message.\n   *\n   * The Class of Service has different semantics for direct and guaranteed messages.\n   *\n   * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * class of service selects the weighted round-robin delivery queue when the\n   * message is forwarded to a consumer.  {@link solace.MessageUserCosType#COS1} are the\n   * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n   *\n   * For messages published as guaranteed messages\n   * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n   * with {@link solace.MessageUserCosType#COS1} can be rejected by the Solace Message Router if\n   * that message would cause any queue or topic-endpoint to exceed its configured\n   * low-priority-max-msg-count.\n   *\n   * @param {solace.MessageUserCosType} value The COS value.\n   * @default {solace.MessageUserCosType#COS1}\n   */\n  setUserCos(value) {\n    this._setUserCos(isEnumMember('userCos', value, MessageUserCosType));\n  }\n  _setUserCos(value) {\n    this._userCos = value;\n  }\n\n  /**\n   * Sets the Message Priority Parameter (JMS Priority) value for the message.\n   * Numerical values between 0 and 255 are accepted,\n   * use undefined to unset.\n   *\n   * If destination queues and topic endpoints for this message\n   * are configured to respect message priority,\n   * the values 0 through 9 can be used to affect the priority\n   * of delivery to consumers of those queues or topic endpoints.\n   * For the purposes of prioritized message delivery, values larger than 9\n   * are treated the same as 9.\n   *\n   * @param {?Number} value The priority value.\n   */\n  setPriority(value) {\n    if (value === undefined || value === null) {\n      this._setPriority(undefined);\n      return;\n    }\n    if (typeof value !== 'number' || isNaN(value)) {\n      throw new OperationError('Invalid type for message priority',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (value < 0 || value > 255) {\n      throw new OperationError('Invalid priority value',\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._setPriority(value);\n  }\n\n  _setPriority(value) {\n    this._priority = value;\n  }\n\n  /**\n   * Gets the user data part of the message.\n   * @returns {String} The user data part of the message, if set.\n   */\n  getUserData() {\n    return this._userData;\n  }\n\n  /**\n   * Sets the user data part of the message.\n   * @param {String} value The user data part of the message.\n   */\n  setUserData(value) {\n    this._setUserData(isStringOrNothing('userData', value));\n  }\n  _setUserData(value) {\n    this._userData = value;\n  }\n\n  /**\n   * Gets the XML content part of the message.\n   * Notice that the content is encoded as UTF-8 characters,\n   * it needs to be decoded as JavaScript surrogate pair: decodeURIComponent(escape(value))\n   * @returns {?String} The XML content part of the message, if set.\n   */\n  getXmlContent() {\n    return this._xmlContent;\n  }\n\n  /**\n   * Gets the XML content part of the message decoded from UTF-8 encoding of the characters.\n   * @returns {?String} The XML content part of the message. Returns <code>null</code> if not\n   * present.\n   */\n  getXmlContentDecoded() {\n    return this._xmlContent ? utf8ToUcs2(this._xmlContent) : this._xmlContent;\n  }\n\n  /**\n   * Sets the XML content part of the message.\n   * The content is encoded by replacing each instance of certain characters\n   * by one, two, three, or four escape sequences representing the\n   * UTF-8 encoding of the character.\n   * @param {String} value The XML content part of the message.\n   */\n  setXmlContent(value) {\n    const setValue = isStringOrNothing('xmlContent', value);\n    this._xmlContent = setValue ? unescape(encodeURIComponent(setValue)) : setValue;\n  }\n\n  /**\n   * Internal set for the XML content part of the message.\n   * @param {String} value The XML content part of the message.\n   * @private\n   */\n  _setXmlContentInternal(value) {\n    this._xmlContent = isStringOrNothing('xmlContentInternal', value);\n  }\n\n  /**\n   * Sets the message's XML metadata section.\n   * @param {String} value The XML metadata.\n   */\n  setXmlMetadata(value) {\n    this._setXmlMetadata(isStringOrNothing('xmlMetadata', value));\n  }\n  _setXmlMetadata(value) {\n    this._xmlMetadata = value;\n  }\n\n  /**\n   * Gets the message's XML metadata section.\n   * @returns {?String} The XML metadata, if set.\n   */\n  getXmlMetadata() {\n    return this._xmlMetadata;\n  }\n\n  /**\n   * @private\n   */\n  get binaryMetadataChunk() {\n    return this._binaryMetaChunk || null;\n  }\n  /**\n   * @param {?String} meta The meta chunk to set\n   * @private\n   */\n  set binaryMetadataChunk(meta) {\n    this._binaryMetaChunk = meta;\n  }\n\n  /**\n   * @private\n   */\n  get smfHeader() {\n    return this._smfHeader;\n  }\n  /**\n   * @param {SMFHeader} val The SMF header to set\n   * @private\n   */\n  set smfHeader(val) {\n    this._smfHeader = val;\n  }\n\n  /**\n   * @private\n   */\n  get hasAutoSequenceNumber() {\n    return this._autoSequenceNumber || false;\n  }\n  /**\n   * @param {Boolean} value Value to set\n   * @private\n   */\n  set hasAutoSequenceNumber(value) {\n    this._autoSequenceNumber = value;\n  }\n\n  /**\n   * @private\n   */\n  get hasAutoSenderTimestamp() {\n    return this._autoSenderTimestamp || false;\n  }\n  /**\n   * @param {Number} value Value to set\n   * @private\n   */\n  set hasAutoSenderTimestamp(value) {\n    this._autoSenderTimestamp = value;\n  }\n\n  /**\n   * Gets the user property map carried in the message binary metadata.\n   *\n   * @returns {?solace.SDTMapContainer} The user properties map, if set.\n   */\n  getUserPropertyMap() {\n    return this._userPropertyMap;\n  }\n\n  /**\n   * Allows users to specify their own user properties to be carried\n   * in the message binary metadata separate from the payload.\n   * @param {?SDTMapContainer} value The user property map.\n   */\n  setUserPropertyMap(value) {\n    this._userPropertyMap = isInstanceOfOrNothing('userPropertyMap', value, SDTMapContainer);\n  }\n\n  /**\n   * Makes this message a strutured data message by assigning it a\n   * structured data type (SDT) container payload (such as a\n   * {@link solace.SDTMapContainer}, {@link solace.SDTStreamContainer}\n   * or a {@link solace.SDTFieldType.String}, which is transported in the binary attachment field.\n   *\n   * Assigning a SDT container updates the message's Type property to\n   * the appropriate value.\n   *\n   * The container argument must be a {@link solace.SDTField} with a type\n   * of {@link solace.SDTFieldType.MAP}, {@link solace.SDTFieldType.STREAM},\n   * or {@link solace.SDTFieldType.STRING}.\n   *\n   * @param {?solace.SDTField} container The SDTField container to send in this message.\n   */\n  setSdtContainer(container) {\n    const structuredContainer = isInstanceOfOrNothing('sdtContainer', container, SDTField);\n    if (structuredContainer === null || structuredContainer === undefined) {\n      // clear\n      this._structuredContainer = null;\n      this.setBinaryAttachment(null);\n      return;\n    }\n\n    this._setBinaryAttachment(null);\n    const sdtType = structuredContainer.getType();\n    switch (sdtType) {\n      case SDTFieldType.MAP:\n        this._messageType = MessageType.MAP;\n        break;\n      case SDTFieldType.STREAM:\n        this._messageType = MessageType.STREAM;\n        break;\n      case SDTFieldType.STRING:\n        this._messageType = MessageType.TEXT;\n        break;\n      default:\n        throw new OperationError('Invalid parameter: expected SDTField Type of ' +\n          'MAP, STREAM, or STRING.',\n          ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    this._structuredContainer = structuredContainer;\n  }\n\n  /**\n   * Gets the message's structured data container, if this is a structured data message.\n   *\n   * @returns {SDTField|null} A field with a payload of {String}, {@link SDTMapContainer},\n   * or {@link SDTStreamContainer} if one was set in the message; otherwise, null.\n   */\n  getSdtContainer() {\n    const msgType = this.getType();\n    const binaryAttachment = this._binaryAttachment;\n    const binaryAttachmentLength = binaryAttachment ? binaryAttachment.length : 0;\n\n    if (msgType === MessageType.BINARY) {\n      LOG_DEBUG(`getSdtContainer returned null, reason: msgType=${msgType}`);\n      return null;\n    }\n\n    // MAP, STREAM or TEXT\n    // Use cached structured container if available\n    if (typeof this._structuredContainer !== 'undefined') {\n      return this._structuredContainer;\n    }\n\n    if (binaryAttachmentLength === 0) {\n      LOG_DEBUG(`getSdtContainer returned null, reason: len=${binaryAttachmentLength}`);\n      this._structuredContainer = null;\n    } else {\n      // Last resort: Decode binary attachment.\n      // Cache structured container for later access\n      this._structuredContainer = SDTCodec.parseSingleElement(binaryAttachment, 0);\n    }\n\n\n    return this._structuredContainer;\n  }\n\n  /**\n   * Produces a human-readable dump of the message's properties and\n   * contents. Applications must not parse the output, as its format is\n   * not a defined part of the API and subject to change.\n   *\n   * <p>\n   * Output can be controlled by the <code>flags</code> parameter. The values are:\n   * <ul>\n   * <li>{@link MessageDumpFlag.MSGDUMP_BRIEF} Display only the length of the\n   *                          binary attachment, xml attachment, and user property map\n   * <li>{@link MessageDumpFlag.MSGDUMP_FULL} Display the entire message.\n   * </ul>\n   * </p>\n   *\n   * @param {Number} [flags]  Optional flags controlling the output, such as whether\n   *                          to include verbose (binary dump) information\n   * @returns {String} A string representation of the message.\n   */\n  dump(flags = MessageDumpFlag.MSGDUMP_FULL) {\n    const validFlags = isEnumMember('flags', flags, MessageDumpFlag);\n    return MessageDumpUtil.dump(this, validFlags);\n  }\n\n  /**\n   * Clones the message\n   * @returns {Message} A clone of this message\n   * @private\n   */\n  clone() {\n    return clone(this, MESSAGE_CLONE_OPTIONS);\n  }\n\n  /**\n   * Releases all memory associated with this message. All values are reinitialized\n   * to defaults. The message is no longer associated with any session or consumer.\n   */\n  reset() {\n    clearMessage(this);\n    initMessage(this);\n  }\n}\n\nmodule.exports.Message = Message;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Long } = require('solclient-convert');\nconst { Parameter } = require('solclient-validate');\nconst { ReplayStartLocation, ReplayStartType } = require('solclient-replaystart');\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\nconst RMID_VERSION_1_PREFIX = 'rmid1:';\n/* prefix length + 3 '-' + 16 bytes of hex (32) */\nconst RMID_LEN = RMID_VERSION_1_PREFIX.length + 3 + 16 * 2; // 41\n/* regex for testing if data component of the rmid string parsing is valid */\nconst validRmidHexRegex = /^[0-9a-fA-F]{32}$/g;\nconst INVALID_SUID = Long.UZERO;\n\nconst {\n  isString,\n  isValue,\n  isInstanceOf,\n} = Parameter;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n *  {@link solace.SolclientFactory.createReplicationGroupMessageId} or from\n *  {@link solace.Message.getReplicationGroupMessageId}</b>\n * <p>\n * ReplicationGroupMessageId specifies a Replication Group Message ID.\n * Can be used to specify a {@link solace.ReplayStartLocation} for the message after this id.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}.\n *\n * @extends solace.ReplayStartLocation\n * @memberof solace\n * @hideconstructor\n */\nclass ReplicationGroupMessageId extends ReplayStartLocation {\n  /**\n   *@param {Long} spoolerUniqueId spooler id component of rgmid\n   *@param {Long} effectiveMessageId message id component of rgmid\n   *@private\n   */\n  constructor(spoolerUniqueId, effectiveMessageId) {\n    super({\n      _replayStartValue: {\n        suid:      spoolerUniqueId,\n        messageId: effectiveMessageId,\n      },\n      _type: ReplayStartType.RGMID,\n    });\n    /**\n     * _suid {Long} spoolerUniqueId component of the replication group message id\n     *              this should be unique to the replaication group\n     * @private\n     */\n    this._suid = spoolerUniqueId;\n    /**\n     * _messageId {Long} effectiveMessageId component of the replication group message id\n     *              this should be unique to the message in the replication group\n     * @private\n     */\n    this._messageId = effectiveMessageId;\n  }\n  /**\n   * Compares with other ReplicationGroupMessageId\n   * @param {ReplicationGroupMessageId} otherReplicationGroupMessageId the other id to compare\n   * @returns {Number} 0 if the ReplicationGroupMessageId is equal to the other\n   *   ReplicationGroupMessageId.\n   *   < 0 if the ReplicationGroupMessageId is less than the other ReplicationGroupMessageId.\n   *   \\> 0 if the ReplicationGroupMessageId is greater than the other ReplicationGroupMessageId.\n   * @throws {solace.OperationError}\n   * * if the otherReplicationGroupMessageId is not a ReplicationGroupMessageId type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the otherReplicationGroupMessageId is not comparable as it is from different origins\n   *   and can not be compared.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_ID_NOT_COMPARABLE}.\n   */\n  compare(otherReplicationGroupMessageId) {\n    isInstanceOf('otherReplicationGroupMessageId', otherReplicationGroupMessageId, ReplicationGroupMessageId);\n    const oId = otherReplicationGroupMessageId;\n    if (!this._suid.equals(oId._suid)) {\n      const message = 'Unable to compare Replication Group Message ID from different origins';\n      throw new OperationError(`Parameter otherReplicationGroupMessageId[${oId.toString()\n        }] failed validation`,\n        ErrorSubcode.MESSAGE_ID_NOT_COMPARABLE, message);\n    }\n    if (this._messageId.gt(oId._messageId)) {\n      return 1;\n    } else if (this._messageId.lt(oId._messageId)) {\n      return -1;\n    }\n    return 0;\n  }\n  [util_inspect_custom]() {\n    return `[Replication Group Message Id: ${this.toString()}]`;\n  }\n  /**\n   * @override\n   * @description\n   * The ReplicationGroupMessageId toString() method returns a string that can later be passed to\n   * {@link solace.SolclientFactory.createReplicationGroupMessageId} to create a\n   * ReplicationGroupMessageId object.\n   * @returns {String} serialized string of the ReplicationGroupMessageId\n   */\n  toString() {\n    const idBuffer = BufferImpl.from(this._suid.toBytesBE().concat(this._messageId.toBytesBE()));\n    const hexString = idBuffer.toString('hex');\n    const sep = '-';\n    return `${RMID_VERSION_1_PREFIX}${hexString.substring(0, 5)}${sep\n    }${hexString.substring(5, 16)}${sep}${hexString.substring(16, 24)}${sep\n    }${hexString.substring(24, 32)}`;\n  }\n}\n\n/**\n * factory method for creating Replication Group Message Ids\n * @param {Object} spec object specification for building\n * @returns {ReplicationGroupMessageId} id instance for spec.\n * @private\n */\nfunction createReplicationGroupMessageId(spec) {\n  /* later this can be enhanced for other implementations of rgmids */\n  return new ReplicationGroupMessageId(spec.suid, spec.msgid);\n}\n\nfunction fromString(rgmidStr) {\n  /* check parameter type */\n  isString('id', rgmidStr);\n  /* validate rmid string to represent 128 bits of id data\n   * must be of format:\n   * rmid1:ttttt-rrrrrrrrrrr-mmmmmmmm-llllllll\n   *\n   * Where:\n   *\n   * * rmid1: This indicates it is a Replication Group Message ID (allows for some sanity\n   *    checking that the bytes to follow are in fact a Replication Group Message ID).\n   *    The '1' is a version to differentiate from a new type of Replication Group Message ID\n   *    that may be introduced later.\n   * * ttttt: Timestamp portion of SUID, 20 bits.\n   * * rrrrrrrrrrr: Random portion of SUID, 44 bits.\n   * * mmmmmmmm: Most significant 32-bits of ack message ID.\n   * * llllllll: Least significant 32-bits of ack message ID.\n   */\n  isValue('id', rgmidStr.length, RMID_LEN, ErrorSubcode.PARAMETER_OUT_OF_RANGE, `length expected: ${RMID_LEN} but is ${rgmidStr.length}`);\n  if (!rgmidStr.startsWith(RMID_VERSION_1_PREFIX)) {\n    /* raise invalid format error */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, does not start with ${RMID_VERSION_1_PREFIX}`);\n  }\n  const rmidBufs = rgmidStr.substring(RMID_VERSION_1_PREFIX.length).split('-');\n  if (rmidBufs.length !== 4 ||\n      rmidBufs[0].length !== 5 ||\n      rmidBufs[1].length !== 11 ||\n      rmidBufs[2].length !== 8 ||\n      rmidBufs[3].length !== 8) {\n    /* raise invalid format error */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, does not have valid separation of components`);\n  }\n  /* convert rmid data string (hex) to bytes\n   * note use Buffer to read hex string to bytes as Long.from(str, 16) uses inaccurate\n   *  calculation and loses precision, while Buffer.from(str, 'hex') does not.\n   * Browser BufferImpl is dependent on parseInt reading the string text 2 characters\n   *  at a time letting a hex string chuck of [0-9][notHex], eg '9G', is parsed as a\n   *  value 9 not NaN leading to a \"valid\" read. This means data integrity is lost\n   *  on browser buffer parsing of hex. An independent string check is required to avoid this.\n   */\n  /* valid rmid component concatenated are hex only string with 32 character length */\n  const rmidHex = rmidBufs.join('').trim();\n  /* validRmidHexRegex uses the global flag and must be reset to advance the global regex\n   * lastIndex.\n   * reset regex\n   */\n  validRmidHexRegex.test('');\n  if (!validRmidHexRegex.test(rmidHex)) {\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, invalid data string value`);\n  }\n  /* convert hex string to bytes */\n  let rmidBuffer;\n  try {\n    rmidBuffer = BufferImpl.from(rmidHex, 'hex');\n  } catch (ex) {\n    /* error parsing hex string into buffer */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, failed to read data, cause: ${ex.message}`);\n  }\n  /* validate read data len is expected for 128 bits of data */\n  const buflen = rmidBuffer ? rmidBuffer.length : 0;\n  if (buflen !== 16) {\n    /* error occured during read */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, failed to read data from id expected length of 16 got ${buflen}`);\n  }\n  /* extract components into long storage */\n  const suid = Long.fromBits(rmidBuffer.readUInt32BE(4), rmidBuffer.readUInt32BE(0), true);\n  if (suid.eq(INVALID_SUID)) {\n    /* invalid suid detected raise out of range parameter OperationError */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, has invalid origin`);\n  }\n  const msgid = Long.fromBits(rmidBuffer.readUInt32BE(12), rmidBuffer.readUInt32BE(8), true);\n  /* return created id object with Long values */\n  return createReplicationGroupMessageId({ suid, msgid });\n}\n\nconst RgmidFactory = {};\nRgmidFactory.fromString = fromString;\nRgmidFactory.from = createReplicationGroupMessageId;\nRgmidFactory.INVALID_SUID = INVALID_SUID;\n\nmodule.exports.ReplicationGroupMessageId = ReplicationGroupMessageId;\nmodule.exports.RgmidFactory = RgmidFactory;\n","const { AbstractQueueDescriptor } = require('./lib/abstract-queue-descriptor');\nconst { QueueAccessType } = require('./lib/queue-access-types');\nconst { QueueDescriptor } = require('./lib/queue-descriptor');\nconst { QueueDescriptorValidator } = require('./lib/queue-descriptor-validator');\nconst { QueueDiscardBehavior } = require('./lib/queue-discard-behaviors');\nconst { QueuePermissions } = require('./lib/queue-permissions');\nconst { QueueProperties } = require('./lib/queue-properties');\nconst { QueuePropertiesValidator } = require('./lib/queue-properties-validator');\nconst { QueueType } = require('./lib/queue-types');\n\nmodule.exports.AbstractQueueDescriptor = AbstractQueueDescriptor;\nmodule.exports.QueueAccessType = QueueAccessType;\nmodule.exports.QueueDescriptor = QueueDescriptor;\nmodule.exports.QueueDescriptorValidator = QueueDescriptorValidator;\nmodule.exports.QueueDiscardBehavior = QueueDiscardBehavior;\nmodule.exports.QueuePermissions = QueuePermissions;\nmodule.exports.QueueProperties = QueueProperties;\nmodule.exports.QueuePropertiesValidator = QueuePropertiesValidator;\nmodule.exports.QueueType = QueueType;\n","const { APIProperties } = require('solclient-util');\nconst { DestinationType } = require('solclient-destination');\nconst { OperationError, ErrorSubcode } = require('solclient-error');\nconst { QueueType } = require('./queue-types');\n\nconst DEFAULTS = {\n  durable: true,\n  type:    undefined,\n};\n\nconst TYPE_DESCRIPTION = {\n  [QueueType.QUEUE]:          'queue',\n  [QueueType.TOPIC_ENDPOINT]: 'topic endpoint',\n};\n\nconst DESINATION_TYPE_TO_DESCRIPTOR_TYPE = {\n  [DestinationType.TOPIC]:           null,\n  [DestinationType.QUEUE]:           QueueType.QUEUE,\n  [DestinationType.TEMPORARY_QUEUE]: QueueType.QUEUE,\n};\n\nfunction maybeAdaptFromDestination(spec) {\n  if (spec && spec.name && spec.type && DestinationType.values.includes(spec.type)) {\n    const targetType = DESINATION_TYPE_TO_DESCRIPTOR_TYPE[spec.type];\n    if (!targetType) {\n      throw new OperationError(`Cannot create a descriptor from a ${\n                               DestinationType.describe(spec.type)} destination`,\n                               ErrorSubcode.PARAMETER_CONFLICT);\n    }\n    return {\n      name:    spec.name,\n      type:    QueueType.QUEUE,\n      durable: spec.type !== DestinationType.TEMPORARY_QUEUE,\n    };\n  }\n  return spec;\n}\n\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * <p>\n * This is a base class for {@link solace.QueueDescriptor}. API users should access the\n * methods described here through a {@link solace.QueueDescriptor}.\n * @memberof solace\n * @hideconstructor\n */\nclass AbstractQueueDescriptor extends APIProperties {\n  /*\n   * @param {Object|solace.AbstractQueueDescriptor} queueSpec A specification for this descriptor.\n   * @param {solace.QueueType} queueSpec.type The type of queue for this specification.\n   * @param {Boolean} [queueSpec.durable=true] Whether this spec refers to a durable queue.\n   * @constructor\n   */\n  constructor(queueSpec) { // eslint-disable-line no-useless-constructor\n    super(DEFAULTS, maybeAdaptFromDestination(queueSpec));\n  }\n\n  /**\n   * Gets the queue type to which this descriptor refers.\n   * @returns {solace.QueueType} The queue type that this object describes\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * @type {solace.QueueType}\n   * @description The Queue Type.\n   */\n  get type() {\n    return this.getType();\n  }\n  set type(value) {\n    this._type = value;\n  }\n\n  /**\n   * Gets whether this descriptor refers to a durable queue.\n   *\n   * @returns {Boolean} `true` if this describes a durable queue\n   */\n  isDurable() { // eslint-disable-line class-methods-use-this\n    return this._durable;\n  }\n  /**\n   * @type {Boolean}\n   * @description True if this descriptor refers to a durable queue.\n   */\n  get durable() {\n    return this.isDurable();\n  }\n  set durable(value) {\n    this._durable = value;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'type':    this.type,\n      'durable': this.durable,\n    };\n  }\n\n  /**\n   * An informational summary of this object, subject to change.\n   * @returns {String} A summary of this object.\n   */\n  toString() {\n    return `${!this.isDurable() ? 'non' : ''}-durable ` +\n           `${TYPE_DESCRIPTION[this.getType()]}`;\n  }\n\n}\n\nmodule.exports.AbstractQueueDescriptor = AbstractQueueDescriptor;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents the possible endpoint access types. The corresponding endpoint property is\n * {@link solace.QueueProperties#accessType}.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueAccessType = {\n  /**\n   * @description An exclusive endpoint. The first client to bind\n   * receives the stored messages on the Endpoint.\n   * @type {String}\n   */\n  EXCLUSIVE:    'EXCLUSIVE',\n  /**\n   * @description A non-exclusive (shared) Queue. Each client to bind\n   * receives messages in a round robin fashion.\n   * @type {String}\n   */\n  NONEXCLUSIVE: 'NONEXCLUSIVE',\n};\n\nmodule.exports.QueueAccessType = Enum.new(QueueAccessType);\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { QueueDescriptor } = require('./queue-descriptor');\nconst { QueueType } = require('./queue-types');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valTopicString,\n} = APIPropertiesValidators;\n\n\nconst QueueDescriptorValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'QueueDescriptor', instance);\n    if (instance instanceof QueueDescriptor) {\n      v('name', [valTopicString]);\n    } // else is abstract; don't check name\n    v('type', [valIsMember, QueueType, 'QueueType']);\n    v('durable', [valBoolean]);\n  },\n};\n\nmodule.exports.QueueDescriptorValidator = QueueDescriptorValidator;\n","const { AbstractQueueDescriptor } = require('./abstract-queue-descriptor');\nconst { Destination } = require('solclient-destination');\n\nconst DEFAULTS = {\n  name:    undefined,\n  durable: true,\n};\n\n/**\n * This class identifies a queue or topic endpoint on the message router.\n *\n * Operations that make use of queue descriptors include\n *  * {@link solace.Session#createMessageConsumer}\n *  * {@link solace.Session#dteUnsubscribe}\n *\n * @classdesc QueueDescriptor\n * @extends {AbstractQueueDescriptor}\n * @memberof solace\n */\nclass QueueDescriptor extends AbstractQueueDescriptor {\n\n  /**\n   * Creates an instance of {@link solace.QueueDescriptor}.\n   *\n   * @param {Object|solace.QueueDescriptor} queueSpec A specification for this descriptor.\n   * @param {String} queueSpec.name The remote name to which this specification refers.\n   * @param {solace.QueueType} queueSpec.type The type of queue for this specification.\n   * @param {Boolean} [queueSpec.durable=true] `true` if this refers to a durable queue.\n   */\n  constructor(queueSpec) {\n    super(queueSpec instanceof Destination\n            ? { name: queueSpec.name, type: queueSpec.type } // synthesize durable later\n            : Object.assign({ }, DEFAULTS, queueSpec));\n  }\n\n  /**\n   * Gets/sets the remote name to which this descriptor refers.\n   * @returns {String} The name of the queue.\n   */\n  getName() {\n    return this._name;\n  }\n  get name() {\n    return this.getName();\n  }\n  set name(value) {\n    this._name = value;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'name':    this.name,\n      'type':    this.type,\n      'durable': this.durable,\n    };\n  }\n\n  /**\n   * An informational summary of this object, subject to change.\n   * @returns {String} A summary of this object.\n   */\n  toString() {\n    return `${super.toString()} '${this.getName()}'`;\n  }\n\n  /**\n   * @static\n   * @param {any} spec The descriptor spec\n   * @returns {QueueDescriptor|AbstractQueueDescriptor} A new descriptor for the spec\n   * @private\n   */\n  static createFromSpec(spec) {\n    if (spec.name) return new QueueDescriptor(spec);\n    return AbstractQueueDescriptor(spec);\n  }\n}\n\nmodule.exports.QueueDescriptor = QueueDescriptor;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumerates the behavior options when a message cannot be added to an endpoint\n * (for example, the maximum quota {@link solace.QueueProperties#quotaMB} was exceeded).\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueDiscardBehavior = {\n  /**\n   * @description Send the publisher a message reject notification.\n   * @type {String}\n   */\n  NOTIFY_SENDER_ON:  'NOTIFY_SENDER_ON',\n  /**\n   * @description Discard the message and acknowledge it.\n   * @type {String}\n   */\n  NOTIFY_SENDER_OFF: 'NOTIFY_SENDER_OFF',\n};\n\nmodule.exports.QueueDiscardBehavior = Enum.new(QueueDiscardBehavior);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents the permissions applicable to a queue.\n *\n * The corresponding endpoint property is\n * {@link solace.QueueProperties#permissions}.\n *\n * The access controls:\n *  * the permissions for all other users of the queue, this only applies to\n *  non-durable queues {@link solace.QueueProperties#permissions};\n *  * for the current Message Consumer  on a queue or endpoint,\n *    {@link solace.MessageConsumer.permissions}\n *\n * For example, creating a temporary topic endpoint with MODIFY_TOPIC will allow\n * other users to modify the topic subscribed to that endpoint.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueuePermissions = {\n  /**\n   * @description No client other than the queue's owner may access the endpoint.\n   */\n  NONE:         'NONE',\n  /**\n   * @description Client may read messages but not consume them.\n   * @type {String}\n   */\n  READ_ONLY:    'READ_ONLY',\n  /**\n   * @description  Client may read and consume messages.\n   * @type {String}\n   */\n  CONSUME:      'CONSUME',\n  /**\n   * @description Client may read and consume messages, and modify topic(s) associated with the\n   * queue.\n   * @type {String}\n   */\n  MODIFY_TOPIC: 'MODIFY_TOPIC',\n  /**\n   * @description Client may read and consume messages, modify topic(s) associated with the\n   * queue, and delete the queue.\n   * @type {String}\n   */\n  DELETE:       'DELETE',\n};\n\nmodule.exports.QueuePermissions = Enum.new(QueuePermissions);\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { QueueAccessType } = require('./queue-access-types');\nconst { QueueDiscardBehavior } = require('./queue-discard-behaviors');\nconst { QueuePermissions } = require('./queue-permissions');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valNumber,\n  valRange,\n} = APIPropertiesValidators;\n\n\nconst QueuePropertiesValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'QueueProperties', instance);\n    if (instance.permissions !== undefined && instance.permissions !== null) {\n      v('permissions', [valIsMember, QueuePermissions, 'QueuePermissions']);\n    }\n    if (instance.accessType !== undefined && instance.accessType !== null) {\n      v('accessType', [valIsMember, QueueAccessType, 'QueueAccessType']);\n    }\n    if (instance.quotaMB !== undefined && instance.quotaMB !== null) {\n      v('quotaMB', [valNumber], [valRange, 0, Number.POSITIVE_INFINITY]);\n    }\n    if (instance.maxMessageSize !== undefined && instance.maxMessageSize !== null) {\n      v('maxMessageSize', [valNumber], [valRange, 0, Number.POSITIVE_INFINITY]);\n    }\n    if (instance.respectsTTL !== undefined && instance.respectsTTL !== null) {\n      v('respectsTTL', [valBoolean]);\n    }\n    if (instance.discardBehavior !== undefined && instance.discardBehavior !== null) {\n      v('discardBehavior', [valIsMember, QueueDiscardBehavior, 'QueueDiscardBehavior']);\n    }\n    if (instance.maxMessageRedelivery !== undefined && instance.maxMessageRedelivery !== null) {\n      v('maxMessageRedelivery', [valNumber], [valRange, 0, 255]);\n    }\n  },\n};\n\nmodule.exports.QueuePropertiesValidator = QueuePropertiesValidator;\n","const { APIProperties } = require('solclient-util');\nconst { QueueAccessType } = require('./queue-access-types');\nconst { QueueDiscardBehavior } = require('./queue-discard-behaviors');\nconst { QueuePermissions } = require('./queue-permissions');\n\nconst DEFAULTS = {\n  permissions:          undefined,\n  accessType:           undefined,\n  quotaMB:              undefined,\n  maxMessageSize:       undefined,\n  respectsTTL:          undefined,\n  discardBehavior:      undefined,\n  maxMessageRedelivery: undefined,\n};\n\n/**\n * @classdesc\n * Represents a queue properties object. May be passed in to\n * {@link solace.Session#createMessageConsumer} when creating a\n * {@link solace.MessageConsumer} object.  Upon creation of a queue, undefined queue\n * properties are set to default values chosen by the router.\n *\n * @memberof solace\n */\nclass QueueProperties extends APIProperties {\n\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Gets/sets permissions for this queue.\n   *\n   * When creating a temporary queue, these are the permissions that apply\n   * to all other users; the user creating the temporary queue is always\n   * granted DELETE permissions.\n   *\n   * @type {solace.QueuePermissions}\n   * @default undefined\n   */\n  get permissions() {\n    return this._permissions;\n  }\n  set permissions(newValue) {\n    this._permissions = newValue;\n  }\n\n  /**\n   * Gets/sets the access type for this queue.\n   *\n   * This parameter must NOT be set when creating a temporary queue via\n   * {@link solace.Session#createMessageConsumer}. Such a queue has its\n   * access type determined by the remote message router.\n   *\n   * @type {solace.QueueAccessType}\n   * @default undefined\n   */\n  get accessType() {\n    return this._accessType || DEFAULTS.accessType;\n  }\n  set accessType(newValue) {\n    this._accessType = newValue;\n  }\n\n  /**\n   * Gets/sets the quota, in megabytes, for this queue.\n   *  * The allowed values are (0 <= quotaMB) || undefined.\n   *  * A value of 0 configures the queue to act as a Last-Value-Queue (LVQ), where the router\n   *    enforces a Queue depth of one, and only the most current message is spooled by the\n   *    queue. When a new message is received, the current queued message is first\n   *    automatically deleted from the queue, then the new message is spooled.\n   * @type {?Number}\n   * @default undefined\n   */\n  get quotaMB() {\n    return this._quotaMB;\n  }\n  set quotaMB(newValue) {\n    this._quotaMB = newValue;\n  }\n\n  /**\n   * Gets/sets the maximum message size, in bytes, for any single message spooled on this queue.\n   * @type {Number}\n   * @default undefined\n   */\n  get maxMessageSize() {\n    return this._maxMessageSize;\n  }\n  set maxMessageSize(newValue) {\n    this._maxMessageSize = newValue;\n  }\n\n  /**\n   * Gets/sets whether this queue respects Time To Live on messages.\n   * @type {Boolean}\n   * @default false\n   */\n  get respectsTTL() {\n    return this._respectsTTL;\n  }\n  set respectsTTL(newValue) {\n    this._respectsTTL = newValue;\n  }\n\n  /**\n   * Gets/sets the discard behavior for this queue.\n   * @type {solace.QueueDiscardBehavior}\n   * @default {solace.QueueDiscardBehavior.NOTIFY_SENDER_OFF}\n   */\n  get discardBehavior() {\n    return this._discardBehavior;\n  }\n  set discardBehavior(newValue) {\n    this._discardBehavior = newValue;\n  }\n\n  /**\n   * Gets/sets the maximum number of times to attempt message redelivery for this queue.\n   *  * The valid range is 0 <= maxMessageRedelivery <= 255\n   *  * A value of 0 means retry forever.\n   * @type {Number}\n   * @default undefined\n   */\n  get maxMessageRedelivery() {\n    return this._maxMessageRedelivery;\n  }\n  set maxMessageRedelivery(newValue) {\n    this._maxMessageRedelivery = newValue;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'permissions':     QueuePermissions.describe(this.permissions),\n      'accessType':      QueueAccessType.describe(this.accessType),\n      'quotaMB':         this.quotaMB,\n      'maxMessageSize':  this.maxMessageSize,\n      'respectsTTL':     this.respectsTTL,\n      'discardBehavior': this.discardBehavior\n                            ? QueueDiscardBehavior.describe(this.discardBehavior)\n                            : 'undefined',\n      'maxMessageRedelivery': this.maxMessageRedelivery,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.QueueProperties = QueueProperties;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Specifies the type of remote resource to which an\n * {@link solace.AbstractQueueDescriptor} refers.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueType = {\n  /**\n   * @description The queue descriptor refers to a queue endpoint.\n   * @type {String}\n   */\n  QUEUE:          'QUEUE',\n  /**\n   * @description The queue descriptor refers to a topic endpoint.\n   * @type {String}\n   */\n  TOPIC_ENDPOINT: 'TOPIC_ENDPOINT',\n};\n\nmodule.exports.QueueType = Enum.new(QueueType);\n","const { Parameter } = require('solclient-validate');\nconst { ReplayStartLocation, ReplayStartType } = require('./lib/replayStartLocation');\nconst { ReplayStartLocationBeginning } = require('./lib/replayStartLocationBeginning');\nconst { ReplayStartLocationDate } = require('./lib/replayStartLocationDate');\nconst { SolclientFactory } = require('solclient-factory');\n\n\nmodule.exports.ReplayStartLocation = ReplayStartLocation;\nmodule.exports.ReplayStartLocationBeginning = ReplayStartLocationBeginning;\nmodule.exports.ReplayStartLocationDate = ReplayStartLocationDate;\nmodule.exports.ReplayStartType = ReplayStartType;\n\n/**\n * Creates a ReplayStartLocation {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that all messages available\n * in the replay log should be retrieved.\n *\n *\n * @returns {solace.ReplayStartLocation} The newly created ReplayStartLocation\n * @method\n * @name solace.SolclientFactory.createReplayStartLocationBeginning\n */\nSolclientFactory.createReplayStartLocationBeginning = SolclientFactory.createFactory(() =>\n  new ReplayStartLocationBeginning()\n);\n/**\n * Creates a ReplayStartLocation {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that only messages spooled\n * in the replay log since the given Date should be retrieved.\n *\n * @param {Date} dateTime The Date object the represents the date and time of the replay\n * start location.  dateTime is always converted to UTC time if not already a UTC time.\n * @returns {solace.ReplayStartLocation} The newly created ReplayStartLocation\n * @method\n * @name solace.SolclientFactory.createReplayStartLocationDate\n */\nSolclientFactory.createReplayStartLocationDate = SolclientFactory.createFactory(dateTime =>\n  ReplayStartLocationDate.createReplayStartLocationDate(Parameter.isInstanceOf('date', dateTime, Date))\n);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration for smf replay start location value type\n *@private\n */\nconst ReplayStartType = Enum.new({\n  // the value of the Enum is the value of the smf type\n  BEGINNING: 0x00,\n  DATE:      0x01,\n  RGMID:     0x02,\n});\n\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from one of the following:</b>\n * * {@link solace.SolclientFactory.createReplayStartLocationBeginning}\n * * {@link solace.SolclientFactory.createReplayStartLocationDate}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n * The single member variable, _replayStartTime is undefined in ReplayStartLocationBeginning and\n * contains the elapsed time in milliseconds since the epoch in ReplayStartLocationDate\n *\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocation {\n  /**\n   * @constructor\n   * @param {SObject} spec The ReplayStartLocation spec\n   * Use the factory methods on {@link solace.SolclientFactory}.\n   * @private\n   */\n  constructor(spec) {\n    Object.assign(this, spec);\n    if (this._type === undefined) {\n      // use default replay start location type when not specified\n      this._type = ReplayStartType.BEGINNING;\n    }\n  }\n  /**\n   * @returns {String} A generic description of the Destination.\n   */\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.ReplayStartLocation = ReplayStartLocation;\nmodule.exports.ReplayStartType = ReplayStartType;\n","const { ReplayStartLocation, ReplayStartType } = require('./replayStartLocation');\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from the following:</b>\n *  * {@link solace.SolclientFactory.createReplayStartLocationBeginning}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n *\n * @extends {ReplayStartLocation}\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocationBeginning extends ReplayStartLocation {\n  /**\n   * @private\n   */\n  constructor() {\n    super({\n      _type: ReplayStartType.BEGINNING,\n    });\n  }\n  static [util_inspect_custom]() {\n    return 'BEGINNING';\n  }\n}\n\nmodule.exports.ReplayStartLocationBeginning = ReplayStartLocationBeginning;\n","const { ReplayStartLocation, ReplayStartType } = require('./replayStartLocation');\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from the following:</b>\n *  * {@link solace.SolclientFactory.createReplayStartLocationDate}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n *\n * @extends ReplayStartLocation\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocationDate extends ReplayStartLocation {\n  /**\n   * @param {Object} spec The topic spec\n   * @private\n   */\n  constructor(spec) {\n    super({\n      _replayStartValue: spec.getTime(),\n      _type:             ReplayStartType.DATE,\n    });\n  }\n  [util_inspect_custom]() {\n    return `[Epoch Time: ${this._replayStartValue}]`;\n  }\n  /**\n   * @static\n   * @param {Date} dateTime The Date for the replay start location\n   * @returns {ReplayStartLocation} the ReplayStartLocation\n   * @private\n   */\n  static createReplayStartLocationDate(dateTime) {\n    return new ReplayStartLocationDate(dateTime);\n  }\n}\n\nmodule.exports.ReplayStartLocationDate = ReplayStartLocationDate;\n","const { Codec } = require('./lib/codec');\nconst { SDTDestType } = require('./lib/sdt-destination-types');\nconst { SDTField } = require('./lib/sdt-field');\nconst { SDTFieldType } = require('./lib/sdt-field-types');\nconst { SDTMapContainer } = require('./lib/sdt-map-container');\nconst { SDTStreamContainer } = require('./lib/sdt-stream-container');\nconst { SDTUnsupportedValueError } = require('./lib/sdt-unsupported-value-error');\nconst { SDTValueErrorSubcode } = require('./lib/sdt-value-error-subcodes');\n\nmodule.exports.Codec = Codec;\nmodule.exports.SDTDestType = SDTDestType;\nmodule.exports.SDTField = SDTField;\nmodule.exports.SDTFieldType = SDTFieldType;\nmodule.exports.SDTMapContainer = SDTMapContainer;\nmodule.exports.SDTStreamContainer = SDTStreamContainer;\nmodule.exports.SDTUnsupportedValueError = SDTUnsupportedValueError;\nmodule.exports.SDTValueErrorSubcode = SDTValueErrorSubcode;\n","const { EncodeSingleElement } = require('./encode-single-element');\nconst { IEEE754LIB } = require('./ieee754lib');\nconst { ParseSingleElement, StringToBuffer } = require('./parse-single-element');\n\nconst { encodeSingleElement } = EncodeSingleElement;\nconst { parseSingleElement } = ParseSingleElement;\nconst { stringToBuffer } = StringToBuffer;\n\nconst Codec = {\n  encodeSingleElement,\n  parseSingleElement,\n  stringToBuffer,\n  IEEE754LIB,\n};\n\nmodule.exports.Codec = Codec;\n","const { Convert } = require('solclient-convert');\nconst { SDTDataTypes } = require('../sdt-data-types');\n\nconst EncodeHeader = {};\nEncodeHeader.encodeHeader = function encodeHeader(tag, valueLen) {\n  // Tag in first 6 bits, then (lenbytes-1) in 2 bits\n  let byte0 = (tag << 2) & 0xFF;\n  let strSdtLen = null;\n\n  if (tag === SDTDataTypes.Map || tag === SDTDataTypes.Stream) {\n    // force 4 bytes\n    strSdtLen = Convert.int32ToStr(valueLen + 5);\n    byte0 |= 3; // 4 length bytes\n  } else if (valueLen + 2 <= 255) {\n    strSdtLen = Convert.int8ToStr(valueLen + 2);\n    byte0 |= 0; // 1 length byte\n  } else if (valueLen + 3 <= 65535) {\n    strSdtLen = Convert.int16ToStr(valueLen + 3);\n    byte0 |= 1; // 2 length bytes\n  } else {\n    strSdtLen = Convert.int32ToStr(valueLen + 5);\n    byte0 |= 3; // 4 length bytes\n  }\n  const ret = Convert.int8ToStr(byte0) + strSdtLen;\n  return ret;\n};\n\nmodule.exports.EncodeHeader = EncodeHeader;\n","\nconst EncodeInteger = {};\n\nEncodeInteger.int48ToStr = function int48ToStr(vIn) {\n  let v = vIn;\n  const bytes = [];\n  for (let i = 0; i < 6; i++) {\n    const byteI = (v % 256);\n    v = Math.floor(v / 256);\n    bytes.push(String.fromCharCode(byteI));\n  }\n  bytes.reverse();\n  return bytes.join('');\n};\n\nmodule.exports.EncodeInteger = EncodeInteger;\n","const EncodeSingleElementLib = require('./encode-single-element');\nconst UtilLib = require('solclient-util');\nconst { EncodeHeader } = require('./encode-header');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTMapContainer } = require('../sdt-map-container');\n\nconst { encodeHeader } = EncodeHeader;\n\nconst EncodeMap = {\n  /**\n   * Encodes an SDT map.\n   * @param  {Object} sdtmap The map to parse\n   * @returns {String}        The map in binary string format\n   */\n  encodeMap(sdtmap) {\n    const buf = [];\n    if (!(sdtmap instanceof SDTMapContainer)) {\n      return null; // skip!\n    }\n    const keys = sdtmap.getKeys();\n    let sdtfield = null;\n    let strKeyField = null;\n    let strKeyName = null;\n    let i;\n    for (i = 0; i < keys.length; i++) {\n      sdtfield = sdtmap.getField(keys[i]);\n      if (sdtfield) {\n        // === KEY ===\n        strKeyName = UtilLib.StringUtils.nullTerminate(keys[i]);\n        strKeyField = encodeHeader(SDTDataTypes.String, strKeyName.length);\n        strKeyField += strKeyName;\n        buf.push(strKeyField);\n\n        // === VALUE ===\n        EncodeSingleElementLib.EncodeSingleElement.encodeSingleElementToBuf(sdtfield, buf);\n      }\n    } // end iter over keys\n    return buf.join('');\n  },\n};\n\nmodule.exports.EncodeMap = EncodeMap;\n","const DestinationLib = require('solclient-destination');\nconst { Convert } = require('solclient-convert');\nconst { EncodeHeader } = require('./encode-header');\nconst { EncodeInteger } = require('./encode-integer');\nconst { EncodeMap } = require('./encode-map');\nconst { EncodeStream } = require('./encode-stream');\nconst { IEEE754LIB } = require('./ieee754lib');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTDestType } = require('../sdt-destination-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { StringUtils } = require('solclient-util');\n\nconst { encodeHeader } = EncodeHeader;\nconst { int48ToStr } = EncodeInteger;\nconst { encodeMap } = EncodeMap;\nconst { encodeStream } = EncodeStream;\n\nconst { nullTerminate } = StringUtils;\n\nconst C_2_48 = Math.pow(2, 48);\n\n// UCS-2 --> UTF-8 conversion\nfunction strencode(data) {\n  return unescape(encodeURIComponent(data));\n}\n\n// Encode an SDTField into provided buffer buf\nfunction encodeSingleElementToBuf(sdtfield, buf) {\n  if (!(sdtfield instanceof SDTField)) {\n    return false;\n  }\n  // we write the header at the end, once we know the size\n  const value = sdtfield.getValue();\n  let fieldVal = null;\n  let tag = 0; // SMF TAG\n  switch (sdtfield.getType()) {\n    case SDTFieldType.BOOL:\n      tag = SDTDataTypes.Boolean;\n      fieldVal = Convert.int8ToStr(value ? 1 : 0);\n      break;\n    case SDTFieldType.UINT8:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int8ToStr(value);\n      break;\n    case SDTFieldType.INT8:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int8ToStr(value);\n      break;\n    case SDTFieldType.UINT16:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int16ToStr(value);\n      break;\n    case SDTFieldType.INT16:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int16ToStr(value);\n      break;\n    case SDTFieldType.UINT32:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int32ToStr(value);\n      break;\n    case SDTFieldType.INT32:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int32ToStr(value);\n      break;\n    case SDTFieldType.UINT64:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = String.fromCharCode(0) + String.fromCharCode(0) + int48ToStr(value);\n      break;\n    case SDTFieldType.INT64:\n      tag = SDTDataTypes.Integer;\n      if (value >= 0) {\n        fieldVal = String.fromCharCode(0) + String.fromCharCode(0) + int48ToStr(value);\n      } else {\n        fieldVal = (String.fromCharCode(0xFF) +\n                    String.fromCharCode(0xFF) +\n                    int48ToStr(C_2_48 + value));\n      }\n      break;\n    case SDTFieldType.WCHAR:\n      tag = SDTDataTypes.Char;\n      fieldVal = Convert.int16ToStr(value.charCodeAt(0));\n      break;\n    case SDTFieldType.STRING:\n      tag = SDTDataTypes.String;\n      fieldVal = nullTerminate(strencode(value));\n      break;\n    case SDTFieldType.BYTEARRAY:\n      tag = SDTDataTypes.ByteArray;\n      fieldVal = value.toString('latin1');\n      break;\n    case SDTFieldType.FLOATTYPE:\n      tag = SDTDataTypes.Float;\n      fieldVal = IEEE754LIB.toIEEE754Single(value);\n      break;\n    case SDTFieldType.DOUBLETYPE:\n      tag = SDTDataTypes.Float;\n      fieldVal = IEEE754LIB.toIEEE754Double(value);\n      break;\n    case SDTFieldType.MAP:\n      tag = SDTDataTypes.Map;\n      fieldVal = encodeMap(value);\n      break;\n    case SDTFieldType.STREAM:\n      tag = SDTDataTypes.Stream;\n      fieldVal = encodeStream(value);\n      break;\n    case SDTFieldType.DESTINATION:\n      tag = SDTDataTypes.Destination;\n      if (value instanceof DestinationLib.Destination) {\n        fieldVal = Convert.int8ToStr(SDTDestType[value.getType()])\n          + value.getBytes();\n      }\n      break;\n    case SDTFieldType.NULLTYPE:\n      tag = SDTDataTypes.Null;\n      fieldVal = '';\n      break;\n    case SDTFieldType.UNKNOWN:\n      fieldVal = null;\n      break;\n    default:\n  }\n  if (fieldVal !== null) {\n    const hdr = encodeHeader(tag, fieldVal.length);\n    buf.push(hdr);\n    buf.push(fieldVal);\n    return true;\n  }\n\n  return false;\n}\n\nfunction encodeSingleElement(sdtfield) {\n  const buf = [];\n  encodeSingleElementToBuf(sdtfield, buf);\n  return buf.join('');\n}\n\nconst EncodeSingleElement = {\n  encodeSingleElement,\n  encodeSingleElementToBuf,\n};\n\nmodule.exports.EncodeSingleElement = EncodeSingleElement;\n","const EncodeSingleElementLib = require('./encode-single-element');\nconst { SDTStreamContainer } = require('../sdt-stream-container');\n\nconst EncodeStream = {};\nEncodeStream.encodeStream = function encodeStream(sdtstream) {\n  const buf = [];\n  if (!(sdtstream instanceof SDTStreamContainer)) {\n    return null; // skip!\n  }\n  let sdtfield = null;\n  while (sdtstream.hasNext()) {\n    sdtfield = sdtstream.getNext();\n    if (sdtfield) {\n      EncodeSingleElementLib.EncodeSingleElement.encodeSingleElementToBuf(sdtfield, buf);\n    }\n  } // end iter over stream entries\n  return buf.join('');\n};\n\nmodule.exports.EncodeStream = EncodeStream;\n","const IEEE754LIB = {\n  /**\n   * @preserve\n   * The MIT License\n   *\n   * Copyright (c) 2010 Alan Gutierrez\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\n   * of this software and associated documentation files (the \"Software\"), to deal\n   * in the Software without restriction, including without limitation the rights\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall be included in\n   * all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   * THE SOFTWARE.\n   */\n\n  toIEEE754(vIn, ebits, fbits) {\n    let v = vIn;\n    const bias = (1 << (ebits - 1)) - 1;\n\n    // Compute sign, exponent, fraction\n    let s;\n    let e;\n    let f;\n    if (isNaN(v)) {\n      e = (1 << bias) - 1;\n      f = 1;\n      s = 0;\n    } else if (v === Infinity || v === -Infinity) {\n      e = (1 << bias) - 1;\n      f = 0;\n      s = (v < 0) ? 1 : 0;\n    } else if (v === 0) {\n      e = 0;\n      f = 0;\n      s = (1 / v === -Infinity) ? 1 : 0;\n    } else {\n      s = v < 0;\n      v = Math.abs(v);\n\n      if (v >= Math.pow(2, 1 - bias)) {\n        const ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n        e = ln + bias;\n        f = (v * Math.pow(2, fbits - ln)) - Math.pow(2, fbits);\n      } else {\n        e = 0;\n        f = v / Math.pow(2, 1 - bias - fbits);\n      }\n    }\n\n    // Pack sign, exponent, fraction\n    const bits = [];\n    for (let i = fbits; i; i -= 1) {\n      bits.push(f % 2 ? 1 : 0);\n      f = Math.floor(f / 2);\n    }\n    for (let i = ebits; i; i -= 1) {\n      bits.push(e % 2 ? 1 : 0);\n      e = Math.floor(e / 2);\n    }\n    bits.push(s ? 1 : 0);\n    bits.reverse();\n    let str = bits.join('');\n\n    // Bits to bytes\n    const bytes = [];\n    while (str.length) {\n      bytes.push(parseInt(str.substring(0, 8), 2));\n      str = str.substring(8);\n    }\n    return bytes;\n  },\n\n  fromIEEE754(bytes, ebits, fbits) {\n    // Bytes to bits\n    const bits = [];\n    for (let i = bytes.length; i; i -= 1) {\n      let byteI = bytes[i - 1];\n      for (let j = 8; j; j -= 1) {\n        bits.push(byteI % 2 ? 1 : 0);\n        byteI >>= 1;\n      }\n    }\n    bits.reverse();\n    const str = bits.join('');\n\n    // Unpack sign, exponent, fraction\n    const bias = (1 << (ebits - 1)) - 1;\n    const s = parseInt(str.substring(0, 1), 2) ? -1 : 1;\n    const e = parseInt(str.substring(1, 1 + ebits), 2);\n    const f = parseInt(str.substring(1 + ebits), 2);\n\n    // Produce number\n    if (e === (1 << ebits) - 1) {\n      return f !== 0 ? NaN : s * Infinity;\n    }\n    if (e > 0) {\n      return s * Math.pow(2, e - bias) * (1 + f / Math.pow(2, fbits));\n    }\n    if (f !== 0) {\n      return s * Math.pow(2, -(bias - 1)) * (f / Math.pow(2, fbits));\n    }\n    return 0;\n  },\n  strToByteArr(str) {\n    const bytes = [];\n    for (let i = 0; i < str.length; i++) { bytes.push(str.charCodeAt(i) & 0xFF); }\n    return bytes;\n  },\n  byteArrToStr(bytes) {\n    const str = [];\n    for (let i = 0; i < bytes.length; i++) { str.push(String.fromCharCode(bytes[i] & 0xFF)); }\n    return str.join('');\n  },\n  fromIEEE754Double(b) { return this.fromIEEE754(this.strToByteArr(b), 11, 52); },\n  toIEEE754Double(v) { return this.byteArrToStr(this.toIEEE754(v, 11, 52)); },\n  fromIEEE754Single(b) { return this.fromIEEE754(this.strToByteArr(b), 8, 23); },\n  toIEEE754Single(v) { return this.byteArrToStr(this.toIEEE754(v, 8, 23)); },\n};\n\nmodule.exports.IEEE754LIB = IEEE754LIB;\n","const { DestinationFromNetwork, DestinationType, Queue } = require('solclient-destination');\nconst { LOG_DEBUG, LOG_INFO } = require('solclient-log');\nconst { SDTDestType } = require('../sdt-destination-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { Topic } = require('solclient-destination');\n\nconst ParseDestination = {};\nParseDestination.parseDestination = function parseDestination(dataBuf, pos, len) {\n  const destType = dataBuf.readUInt8(pos);\n  const destBytes = dataBuf.toString('latin1', pos + 1, pos + len);\n  // first try to create a destination from the string, this handles strings with\n  // the preamble ('#P2P/QUE' or '#P2P/TQUE').\n  let destination = DestinationFromNetwork.createDestinationFromBytes(destBytes);\n  if (SDTDestType[destination.type] !== destType) {\n    // SDT destination type does not match the string format. This means either:\n    //    * that the string contains a queue preamble and the type is topic,\n    //      so just make it a topic\n    //    * that the type is queue and the string does not have the preamble, which means we\n    //      should construct a queue.\n    if (SDTDestType[DestinationType.QUEUE] === destType) {\n      destination = Queue.createFromLocalName(destBytes); //createFromLocal has issue with buffer\n    } else if (SDTDestType[DestinationType.TOPIC] === destType) {\n      LOG_DEBUG(`Found and allowed SDT field with  destination type ${destType} when decoding ${destBytes} to ${destination.type}`);\n      //\n      // override the format and set destType as specified in the SMF (i.e. TOPIC)\n      destination = new Topic(destBytes);\n    } else {\n      LOG_INFO(`Drop SDT field with invalid destination type ${destType} when decoding ${destBytes} to ${destination.type}`);\n      return null;\n    }\n  }\n  return SDTField.create(SDTFieldType.DESTINATION, destination);\n};\n\nmodule.exports.ParseDestination = ParseDestination;\n","const { ParseInteger } = require('./parse-integer');\n\nconst { autoDecodeVarLengthNumber } = ParseInteger;\n\nconst ParseFieldHeader = {};\n// Parse the header part of an SDT field.\n// Returns [TYPE, DECLARED_LENGTH, VALUE_DATA_LENGTH, CONSUMED_BYTES]\nParseFieldHeader.parseFieldHeader = function parseFieldHeader(dataBuf, offset) {\n  let pos = offset;\n  const onebyte = dataBuf.readUInt8(pos);\n  const elemType = (onebyte & 0xFC) >> 2;\n  const lenBytes = (onebyte & 0x03) + 1;\n  pos++;\n  const elemLen = autoDecodeVarLengthNumber(dataBuf, pos, lenBytes);\n  pos += lenBytes;\n  const elemValLen = elemLen - (1 + lenBytes);\n  return [elemType, elemLen, elemValLen, pos - offset];\n};\n\nmodule.exports.ParseFieldHeader = ParseFieldHeader;\n","const { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\n\nconst ParseFloat = {};\nParseFloat.parseFloatField = function parseFloatField(buf, pos, len) {\n  switch (len) {\n    case 4:\n      return SDTField.create(SDTFieldType.FLOATTYPE, buf.readFloatBE(pos));\n    case 8:\n      return SDTField.create(SDTFieldType.DOUBLETYPE, buf.readDoubleBE(pos));\n    default:\n      return SDTField.create(SDTFieldType.UNKNOWN, buf.toString('latin1', pos, pos + len));\n  }\n};\n\nmodule.exports.ParseFloat = ParseFloat;\n","const Long = require('long');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTUnsupportedValueError } = require('../sdt-unsupported-value-error');\nconst { SDTValueErrorSubcode } = require('../sdt-value-error-subcodes');\n\nconst { create: createField } = SDTField;\n\nconst ParseInteger = {};\n\n// Util: decode 1, 2, 3, 4 byte UINT.\nParseInteger.autoDecodeVarLengthNumber = function autoDecodeVarLengthNumber(dataBuf, pos, len) {\n  if ([1, 2, 3, 4].includes(len)) {\n    return dataBuf.readUIntBE(pos, len);\n  }\n  return false;\n};\n\n// Parse an integer SDT Field: [U]INT 8, 16, 32, 64.\nParseInteger.parseIntegerField = function parseIntegerField(isSigned, dataBuf, pos, len) {\n  let val = 0;\n\n  switch (len) {\n    case 1:\n      if (isSigned) {\n        val = dataBuf.readInt8(pos);\n        return createField(SDTFieldType.INT8, val);\n      } // else unsigned:\n      val = dataBuf.readUInt8(pos);\n      return createField(SDTFieldType.UINT8, val);\n\n    case 2:\n      if (isSigned) {\n        val = dataBuf.readInt16BE(pos);\n        return createField(SDTFieldType.INT16, val);\n      } // else signed:\n      val = dataBuf.readUInt16BE(pos);\n      return createField(SDTFieldType.UINT16, val);\n\n    case 4:\n      if (isSigned) {\n        val = dataBuf.readInt32BE(pos);\n        return createField(SDTFieldType.INT32, val);\n      } // else signed:\n      val = dataBuf.readUInt32BE(pos);\n      return createField(SDTFieldType.UINT32, val);\n\n    case 8:\n      {\n        let error = null;\n        const longValue =\n          Long.fromBits(dataBuf.readUInt32BE(pos + 4), dataBuf.readUInt32BE(pos), !isSigned);\n        if (longValue.getNumBitsAbs() > 48) {\n          error = new SDTUnsupportedValueError('Value is not supported',\n            SDTValueErrorSubcode.VALUE_OUTSIDE_SUPPORTED_RANGE,\n            dataBuf.toString('latin1', pos, len));\n        }\n        val = longValue.toNumber();\n        const field = createField(isSigned ? SDTFieldType.INT64 : SDTFieldType.UINT64, val);\n        if (error) {\n          field.setError(error);\n        }\n\n        return field;\n      }\n\n    default:\n      return null;\n  }\n};\n\nmodule.exports.ParseInteger = ParseInteger;\n","const ParseSingleElementLib = require('./parse-single-element');\nconst { LOG_ERROR } = require('solclient-log');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTMapContainer } = require('../sdt-map-container');\n\nconst ParseMap = {};\nParseMap.parseMapAt = function parseMapAt(dataBuf, offset, datalen) {\n  const mapObj = new SDTMapContainer();\n  let pos = offset;\n  while (pos < offset + datalen) {\n    // === key field ===\n    const keyFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    pos += keyFieldHeader[3]; // consumed bytes\n    // pos now points to start of string\n    if (keyFieldHeader[0] !== SDTDataTypes.String) {\n      // Fail!\n      LOG_ERROR(\"Error parsing SDTMAP, expected to find a string field as map key, and didn't\");\n      LOG_ERROR(`Type of key: ${keyFieldHeader[0]}`);\n      return SDTField.create(SDTFieldType.MAP, null);\n    }\n    const keyString = dataBuf.toString('latin1', pos, pos + keyFieldHeader[2] - 1);\n    pos += keyFieldHeader[2];\n\n    // === value field ===\n    // pos now points to start of next value\n    const valueFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    const valueField = ParseSingleElementLib.ParseSingleElement.parseSingleElement(dataBuf, pos);\n    pos += valueFieldHeader[1]; // declared field length\n    if (valueField) {\n      mapObj.addField(keyString, valueField);\n    }\n  }\n  return SDTField.create(SDTFieldType.MAP, mapObj);\n};\n\nmodule.exports.ParseMap = ParseMap;\n","const { Convert } = require('solclient-convert');\nconst { LOG_DEBUG } = require('solclient-log');\nconst { ParseDestination } = require('./parse-destination');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { ParseFloat } = require('./parse-float');\nconst { ParseInteger } = require('./parse-integer');\nconst { ParseMap } = require('./parse-map');\nconst { ParseStream } = require('./parse-stream');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\n\nconst {\n  utf8ToUcs2,\n} = Convert;\nconst { parseFieldHeader } = ParseFieldHeader;\nconst { parseFloatField } = ParseFloat;\nconst { parseIntegerField } = ParseInteger;\nconst { parseMapAt } = ParseMap;\nconst { parseStreamAt } = ParseStream;\nconst { parseDestination } = ParseDestination;\n\nconst ParseSingleElement = {\n  // Parse single SDT element, returns SDTField\n  parseSingleElement(dataBuf, offset) {\n    const fieldHeader = parseFieldHeader(dataBuf, offset);\n    if (!fieldHeader) {\n      LOG_DEBUG(`parseSingleElement return false, fieldHeader=${fieldHeader}`);\n      return null;\n    }\n\n    const pos = offset + fieldHeader[3];\n\n    // For use inside switch\n    const elemValLen = fieldHeader[2];\n\n    switch (fieldHeader[0]) {\n      case SDTDataTypes.Null:\n        return SDTField.create(SDTFieldType.NULLTYPE, null);\n      case SDTDataTypes.Boolean:\n        return SDTField.create(SDTFieldType.BOOL, dataBuf.readUInt8(pos) !== 0);\n      case SDTDataTypes.Integer:\n        return parseIntegerField(true, dataBuf, pos, elemValLen);\n      case SDTDataTypes.UnsignedInteger:\n        return parseIntegerField(false, dataBuf, pos, elemValLen);\n      case SDTDataTypes.Float:\n        return parseFloatField(dataBuf, pos, elemValLen);\n      case SDTDataTypes.Char:\n        return SDTField.create(SDTFieldType.WCHAR,\n                               String.fromCharCode(dataBuf.readUInt16BE(pos)));\n      case SDTDataTypes.ByteArray:\n        return SDTField.create(SDTFieldType.BYTEARRAY,\n                               dataBuf.slice(pos, pos + elemValLen));\n      case SDTDataTypes.String:\n        // strip last byte (null-terminator)\n        return SDTField.create(SDTFieldType.STRING,\n                               utf8ToUcs2(dataBuf.toString('latin1', pos, pos + elemValLen - 1)));\n      case SDTDataTypes.Destination:\n        return parseDestination(dataBuf, pos, elemValLen);\n      case SDTDataTypes.SMFMessage:\n        return SDTField.create(SDTFieldType.SMF_MESSAGE, dataBuf.slice(pos, pos + elemValLen));\n      case SDTDataTypes.Map:\n        return parseMapAt(dataBuf, pos, elemValLen);\n      case SDTDataTypes.Stream:\n        return parseStreamAt(dataBuf, pos, elemValLen);\n      default:\n        // removed toString conversion as a test\n        return SDTField.create(SDTFieldType.UNKNOWN,\n                               dataBuf.toString('latin1', pos, pos + elemValLen));\n    }\n  },\n};\n\nconst StringToBuffer = {\n  stringToBuffer(str) {\n    const BufferImpl = require('buffer').Buffer;\n    return BufferImpl.from(str, 'latin1');\n  },\n};\n\nmodule.exports.ParseSingleElement = ParseSingleElement;\nmodule.exports.StringToBuffer = StringToBuffer;\n","const ParseSingleElementLib = require('./parse-single-element');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTStreamContainer } = require('../sdt-stream-container');\n\nconst ParseStream = {};\nParseStream.parseStreamAt = function parseStreamAt(dataBuf, offset, datalen) {\n  const streamObj = new SDTStreamContainer();\n  let pos = offset;\n  while (pos < offset + datalen) {\n    const valueFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    const valueField = ParseSingleElementLib.ParseSingleElement.parseSingleElement(dataBuf, pos);\n    pos += valueFieldHeader[1]; // declared field length\n    if (valueField) {\n      streamObj.addField(valueField);\n    }\n  }\n  return SDTField.create(SDTFieldType.STREAM, streamObj);\n};\n\nmodule.exports.ParseStream = ParseStream;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SDTDataTypes = {\n  Null:            0x00,\n  Boolean:         0x01,\n  Integer:         0x02,\n  UnsignedInteger: 0x03,\n  Float:           0x04,\n  Char:            0x05,\n  ByteArray:       0x06,\n  String:          0x07,\n  Destination:     0x08,\n  SMFMessage:      0x09,\n  Map:             0x0A,\n  Stream:          0x0B,\n};\n\nmodule.exports.SDTDataTypes = Enum.new(SDTDataTypes);\n","const { DestinationType } = require('solclient-destination');\nconst { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of all SDT data types.\n * @enum {number}\n * @namespace\n * @memberof solace\n * @private\n */\nconst SDTDestType = {\n  [DestinationType.TOPIC]:           0x00,\n  [DestinationType.QUEUE]:           0x01,\n  [DestinationType.TEMPORARY_QUEUE]: 0x01,\n};\n\nmodule.exports.SDTDestType = Enum.new(SDTDestType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of all SDT data types.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SDTFieldType = {\n  /**\n   * @type {Number}\n   * @description Maps to a boolean.\n   */\n  BOOL:        0,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT8:       1,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  INT8:        2,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT16:      3,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  INT16:       4,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT32:      5,\n  /**\n   *@type {Number}\n   * @description Maps to a number.\n   */\n  INT32:       6,\n  /**\n   * @type {Number}\n   * @description Maps to a number. <br>\n   * <strong>Warning:</strong> Supports 48-bit integers (range: 0 to 2<sup>48</sup>-1).\n   * When decoding, only the lower 48 bits are considered significant.\n   */\n  UINT64:      7,\n  /**\n   * @type {Number}\n   * @description Maps to a number. <br>\n   * <strong>Warning:</strong> Supports 48-bit integers + sign (range: -(2<sup>48</sup>-1) to\n   * 2<sup>48</sup>-1). When decoding, only the lower 48 bits are considered significant.\n   */\n  INT64:       8,\n  /**\n   * @type {Number}\n   * @description A single character; maps to a string.\n   */\n  WCHAR:       9,\n  /**\n   * @type {Number}\n   * @description Maps to a string.\n   */\n  STRING:      10,\n  /**\n   * @type {Number}\n   * @description Maps to a Uint8Array.\n   *\n   * Backward compatibility note:\n   * Using the version_10 factory profile or older, the getValue() method of a BYTEARRAY sdtField\n   * returns the byte array in 'latin1' String representation.\n   * Later profiles return a Uint8Array (in the form of a nodeJS Buffer instance in fact)\n   *\n   * When creating a field of type BYTEARRAY, the following datatypes are all accepted as value:\n   *   Buffer (the nodeJS native type or equivalent)\n   *   ArrayBuffer,\n   *   Any DataView or TypedArray,\n   *   'latin1' String for backwards compatibility:\n   *     each character has a code in the range 0-255\n   *     representing exactly one byte in the attachment.\n   */\n  BYTEARRAY:   11,\n  /**\n   * @type {Number}\n   * @description Single-precision float; maps to a number.\n   */\n  FLOATTYPE:   12,\n  /**\n   * @type {Number}\n   * @description Double-precision float; maps to a number.\n   */\n  DOUBLETYPE:  13,\n  /**\n   * @type {Number}\n   * @description Maps to {@link SDTMapContainer}.\n   */\n  MAP:         14,\n  /**\n   * @type {Number}\n   * @description Maps to {@link SDTStreamContainer}.\n   */\n  STREAM:      15,\n  /**\n   * @type {Number}\n   * @description Maps to {@link Destination}.\n   */\n  DESTINATION: 16,\n  /**\n   * @type {Number}\n   * @description Maps to <code>null</code>.\n   */\n  NULLTYPE:    17,\n  /**\n   * @type {Number}\n   * @description Maps to an unknown type.\n   */\n  UNKNOWN:     18,\n  /**\n   * @type {Number}\n   * @description Maps to an encoded SMF message.\n   */\n  SMF_MESSAGE: 19,\n};\n\nmodule.exports.SDTFieldType = Enum.new(SDTFieldType);\n","const SolclientFactoryLib = require('solclient-factory');\nconst { Convert } = require('solclient-convert');\nconst { SDTFieldType } = require('./sdt-field-types');\nconst { validateSdtField } = require('./validate-sdt-field');\n\nconst { anythingToBuffer } = Convert;\nconst { ProfileBinding } = SolclientFactoryLib;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a SDT (Structured Data Type) field. To create an instance of an <code>SDTField</code>,\n * call {@link solace.SDTField.create}.\n *\n * SDTField objects are used in Solace Containers ({@link solace.SDTMapContainer}\n * and {@link solace.SDTStreamContainer}). The <b>deprecated</b> usage of\n * {@link solace.SDTMapContainer#addField} and {@link solace.SDTStreamContainer#addField}\n * take a SDTField object as an argument. The preferred usage is to pass a\n * {@link solace.SDTFieldType} and value as arguments.\n *\n * SDTField objectts must be used as an argument to {@link solace.Message#setSdtContainer}.\n * The only valid SDTField objects for {@link solace.Message#setSdtContainer} are:\n * * {@link solace.SDTFieldType.STREAM}\n * * {@link solace.SDTFieldType.MAP}\n * * {@link solace.SDTFieldType.STRING}\n * @hideconstructor\n * @memberof solace\n */\nclass SDTField {\n\n  /*\n   * @constructor\n   * @param {SDTFieldType} [type=SDTFieldType.NULLTYPE] The field type to construct\n   * @param {*} value The value to be encapsulated\n   * @throws {solace.OperationError} if value does not match type\n   * @private\n   */\n  constructor(type = SDTFieldType.NULLTYPE, value = null) {\n    const err = validateSdtField(type, value);\n    if (err !== null) {\n      throw (err);\n    }\n    this._type = type;\n    if (type === SDTFieldType.BYTEARRAY) {\n      this._value = anythingToBuffer(value);\n    } else {\n      this._value = value;\n    }\n    this._error = undefined;\n  }\n\n  /**\n   * Gets the type of field represented.\n   * @returns {solace.SDTFieldType} The type of field represented.\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * Gets the field value.\n   * @returns {*} Field value (as one of the supported data types).\n   * @throws {solace.SDTUnsupportedValueError} if value found in the field\n   * is not in range supported by the platform/runtime.\n   */\n  getValue() {\n    if (this._error !== undefined) {\n      throw (this._error);\n    }\n    return this.getValueNoThrow();\n  }\n\n  /**\n   * Gets the field value or error object.\n   * @returns {*} Field value (as one of the supported data types) or\n   * {solace.SDTUnsupportedValueError} if value found in the field\n   * is not in range supported by the platform/runtime.\n   * @private\n   */\n  getValueNoThrow() {\n    if (this._error !== undefined) {\n      return this._error;\n    }\n    if (this._type === SDTFieldType.BYTEARRAY && ProfileBinding.value.byteArrayAsString) {\n      return this._value.toString('latin1');\n    }\n    return this._value;\n  }\n\n  /**\n   * Sets an error on the object to be thrown on getValue().\n   * Used only by parse-integer, as it is possible to receive\n   * 64 bit integers that cannot be represented in a javaScript number.\n   * JavaScript numbers are floats and can only hold a 48 bit integer.\n   * @private\n   * @param {solace.SDTUnsupportedValueError} err error object.\n   */\n  setError(err) {\n    this._error = err;\n  }\n\n  toString() {\n    return `[SDTField type:${this._type} value:${this._value}]`;\n  }\n\n  /**\n   * Create a new SDTField instance representing a Value of a given Type.\n   *\n   * @param {solace.SDTFieldType} type The type of field represented.\n   * @param {*} value The corresponding value to store in the field.\n   * @returns {solace.SDTField} The new SDT field with the given type and value\n   * @throws {solace.OperationError} if value does not match type\n   * @static\n   */\n  static create(type, value) {\n    return new SDTField(type, value);\n  }\n\n}\n\nmodule.exports.SDTField = SDTField;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { SDTField } = require('./sdt-field');\n\n/**\n * @classdesc\n * Defines a Structured Data Type (SDT) map container.\n * @memberof solace\n */\nclass SDTMapContainer {\n  /**\n   * @constructor\n   */\n  constructor() {\n    this._map = []; // key-value mappings (keys are strings)\n  }\n\n  /**\n   * Get the list of keys in this map, in unspecified order.\n   * @returns {Array.<String>} Array of defined keys in the map.\n   */\n  getKeys() {\n    return Object.keys(this._map);\n  }\n\n  /**\n   * Return the SDTField with the given key.\n   * @param {String} key The key to look up.\n   * @returns {solace.SDTField} The field referenced by key.\n   */\n  getField(key) {\n    return this._map[key];\n  }\n\n  /**\n   * Delete an SDTField with the given key.\n   * @param {String} key The field key to delete.\n   */\n  deleteField(key) {\n    delete this._map[key];\n  }\n\n  /**\n   * Adds a field to this map. If a key:value mapping already exists for this key, it is replaced.\n   * <p>\n   * @deprecated If <code>typeOrField</code> is a {@link solace.SDTField} instance,\n   * it is added to the map.\n   *\n   * The preferred usage is to pass a {@link solace.SDTFieldType}, then the API will create a\n   * SDTField of this type using <code>value</code> before adding it to the map.\n   *\n   * @param {String} key The key by which to store the given value.\n   * @param {solace.SDTField|solace.SDTFieldType} typeOrField A SDTField instance or SDTFieldType.\n   * @param {*} [value] The value to wrap as an SDTField.\n   * @throws {solace.OperationError} if value does not match type\n   * @throws {solace.SDTUnsupportedValueError} if value is not in range\n   *  supported by the platform/runtime\n   */\n  addField(key, typeOrField, value = undefined) {\n    if (typeOrField instanceof SDTField) {\n      this._map[key] = typeOrField;\n      return;\n    } else if (typeof value !== 'undefined') {\n      this._map[key] = SDTField.create(typeOrField, value);\n      return;\n    }\n    throw new OperationError('Invalid parameters to addField: expected SDTField, or type and value',\n      ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nmodule.exports.SDTMapContainer = SDTMapContainer;\n","const SDTFieldLib = require('./sdt-field');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n/**\n * @classdesc\n * Defines a Structured Data Type (SDT) stream container. A stream is an iterable collection of\n * {@link solace.SDTField}s.\n * @memberof solace\n */\nclass SDTStreamContainer {\n  /**\n   * @constructor\n   */\n  constructor() {\n    this._stream = [];\n    this._writable = true;\n    this._readPt = 0;\n  }\n\n  /**\n   * Returns true if the stream has at least one more {@link solace.SDTField}\n   * at the current position.\n   * @returns {Boolean} true, if there is an available field at the read pointer; false, otherwise.\n   */\n  hasNext() {\n    return (this._stream.length > this._readPt);\n  }\n\n  /**\n   * Returns the next field in the stream and advances the read pointer.\n   * If the end of the stream is reached, it returns undefined.\n   * @returns {solace.SDTField} The next field in the stream.\n   */\n  getNext() {\n    return (this._readPt < this._stream.length) ? this._stream[this._readPt++] : undefined;\n  }\n\n  /**\n   * Rewinds the read pointer to the beginning of the stream. Normally when {@link hasNext}\n   * returns false, a client application must call rewind() to reiterate over the stream's fields.\n   * @throws {@link solace.OperationError} if the stream cannot be rewound.\n   */\n  rewind() {\n    this._readPt = 0;\n  }\n\n  /**\n   * Appends a SDTField to the stream.\n   * <p>\n   * If <code>field</code> is a {@link solace.SDTField}, this field is appended to the stream.\n   * <br>\n   * If <code>field</code> is a {@link solace.SDTFieldType},\n   * then the API will create a SDTField of this\n   * type with a value of <code>optValue</code> and append this new SDTField to\n   * the stream.\n   *\n   * @param {solace.SDTField|solace.SDTFieldType} field The field to append to the stream.\n   * @param {*} [optValue] The value to wrap as an SDTField.\n   */\n  /**\n   * Appends a field to this stream.\n   * <p>\n   * @deprecated If <code>typeOrField</code> is a {@link solace.SDTField} instance,\n   * it is appended to the stream.\n   *\n   * The preferred usage is to pass a {@link solace.SDTFieldType}, then the API will create a\n   * SDTField of this type using <code>value</code> and append this new SDTField\n   * to the stream.\n   *\n   * @param {solace.SDTField|solace.SDTFieldType} typeOrField A SDTField instance or SDTFieldType.\n   * @param {*} [value] The value to wrap as an SDTField.\n   * @throws {@link solace.OperationError} if value does not match type\n   * @throws {@link solace.SDTUnsupportedValueError} if value is not in range\n   *  supported by the platform/runtime\n   */\n  addField(typeOrField, value = undefined) {\n    if (!this._writable) return;\n\n    if (typeOrField instanceof SDTFieldLib.SDTField) {\n      this._stream.push(typeOrField);\n      return;\n    }\n\n    if (typeof value !== 'undefined') {\n      this._stream.push(SDTFieldLib.SDTField.create(typeOrField, value));\n      return;\n    }\n\n    throw new OperationError('Invalid parameters to addField: expected SDTField, or type and value',\n      ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nmodule.exports.SDTStreamContainer = SDTStreamContainer;\n","const DebugLib = require('solclient-debug');\nconst { SolaceError } = require('solclient-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a SDT unsupported value error.  An SDT field was assigned a value that is within\n * the type range for the given SDT type, but is not supported on this platform/runtime.\n * This occurs when a received {@link solace.SDTContainerMap} or {@link solace.SDTContainerStream}\n * contains a field with a value that can not represented in the local architecture.\n * Possible causes include:\n * * receive 64 bit integer that cannot be represented accurately in a javaScript number. JavaScript\n *   numbers are floats and can only hold a 48 bit integer without loss of precission. Any integer\n *   greater than 281474976710655 or less than -281474976710655 will cause this exception.\n * @hideconstructor\n * @extends solace.SolaceError\n * @memberof solace\n */\nclass SDTUnsupportedValueError extends SolaceError {\n  /*\n   * @constructor\n   * @param {String} message The message associated with this error\n   * @param {SDTValueErrorSubcode} subcode The subcode associated with this error\n   * @param {Object} sourceData The original representation of the value\n   */\n  constructor(message, subcode, sourceData) {\n    /**\n     * The name of the error.\n     * @name solace.SDTUnsupportedValueError#name\n     * @type {String}\n     * @readonly\n     * @description 'SDTUnsupportedValue'\n     */\n    super('SDTUnsupportedValue', message);\n    /**\n     * The subcode for the error. see {@link solace.SDTValueErrorSubcode}\n     * @name solace.SDTUnsupportedValueError#subcode\n     * @type {solace.SDTValueErrorSubcode}\n     */\n    this.subcode = subcode;\n    this.sourceData = sourceData || '';\n  }\n\n  inspect() {\n    return super.inspect({\n      subcode:    null,\n      sourceData: v => DebugLib.Debug.formatDumpBytes(v, false, 0),\n    });\n  }\n\n  getSubcode() {\n    return this.subcode;\n  }\n\n  getSourceData() {\n    return this.sourceData;\n  }\n}\n\n\nmodule.exports.SDTUnsupportedValueError = SDTUnsupportedValueError;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of {@link solace.SDTUnsuportedValueError} causes.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SDTValueErrorSubcode = {\n  /**\n   * @type {Number}\n   * @description\n   * The value for this field may be valid on other platforms, but is outside the\n   * range that is supported on this platform for the given type.\n   */\n  VALUE_OUTSIDE_SUPPORTED_RANGE: 1,\n};\n\nmodule.exports.SDTValueErrorSubcode = Enum.new(SDTValueErrorSubcode);\n","const DestinationLib = require('solclient-destination');\nconst SDTMapContainerLib = require('./sdt-map-container');\nconst SDTStreamContainerLib = require('./sdt-stream-container');\nconst ValidateLib = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { SDTFieldType } = require('./sdt-field-types');\n\nconst baseTypes = (() => {\n  const result = [];\n  result[SDTFieldType.BOOL] = 'boolean';\n  result[SDTFieldType.UINT8] = 'number';\n  result[SDTFieldType.INT8] = 'number';\n  result[SDTFieldType.UINT16] = 'number';\n  result[SDTFieldType.INT16] = 'number';\n  result[SDTFieldType.UINT32] = 'number';\n  result[SDTFieldType.INT32] = 'number';\n  result[SDTFieldType.UINT64] = 'number';\n  result[SDTFieldType.INT64] = 'number';\n  result[SDTFieldType.WCHAR] = 'string';\n  result[SDTFieldType.STRING] = 'string';\n  result[SDTFieldType.BYTEARRAY] = 'object'; // Uint8Array\n  result[SDTFieldType.FLOATTYPE] = 'number';\n  result[SDTFieldType.DOUBLETYPE] = 'number';\n  return result;\n})();\n\nfunction failInvalidParameter(valueType) {\n  return new OperationError(\n            `Invalid SDT type:value combination, expected value type ${valueType}`,\n            ErrorSubcode.PARAMETER_INVALID_TYPE);\n}\n\nfunction validateSdtField(type, value) {\n  if (baseTypes[type]) {\n    if ((baseTypes[type] === 'boolean' && typeof value !== 'boolean') ||\n            (baseTypes[type] === 'number' && typeof value !== 'number') ||\n            (baseTypes[type] === 'string' && typeof value !== 'string')) {\n      return failInvalidParameter(baseTypes[type]);\n    }\n  }\n  if (type === SDTFieldType.MAP &&\n      !ValidateLib.Check.instanceOf(value, SDTMapContainerLib.SDTMapContainer)) {\n    return failInvalidParameter('SDTMapContainer');\n  }\n  if (type === SDTFieldType.STREAM &&\n      !ValidateLib.Check.instanceOf(value, SDTStreamContainerLib.SDTStreamContainer)) {\n    return failInvalidParameter('SDTStreamContainer');\n  }\n  if (type === SDTFieldType.DESTINATION &&\n      !ValidateLib.Check.instanceOf(value, DestinationLib.Destination)) {\n    return failInvalidParameter('Destination');\n  }\n  return null;\n}\n\nmodule.exports.validateSdtField = validateSdtField;\n","const { AuthenticationScheme } = require('./lib/authentication-schemes');\nconst { CapabilityType, ClientCapabilityType } = require('./lib/capability-types');\nconst { MessageRxCBInfo } = require('./lib/message-rx-cb-info');\nconst { MutableSessionProperty } = require('./lib/mutable-session-properties');\nconst { Session } = require('./lib/session');\nconst { SessionEvent } = require('./lib/session-event');\nconst { SessionEventCBInfo } = require('./lib/session-event-cb-info');\nconst { SessionEventCode } = require('./lib/session-event-codes');\nconst { SessionEventName } = require('./lib/session-event-names');\nconst { SessionProperties } = require('./lib/session-properties');\nconst { SessionState } = require('./lib/session-states');\n\nconst { SolclientFactory } = require('solclient-factory');\nconst { SslDowngrade } = require('./lib/ssl-downgrades');\n\n/**\n * Creates a session instance.\n * @param {solace.SessionProperties} sessionProperties Properties to configure the session.\n * @param {solace.MessageRxCBInfo} [messageCallbackInfo] <b>Deprecated:</b>\n *    Callback method for messages.  Instead applications should receive message events via\n *    `session.on(solace.SessionEventCode.MESSAGE, (message) => { ... });`\n * @param {solace.SessionEventCBInfo} [eventCallbackInfo] <b>Deprecated:</b> Callback method for\n *    events on the <i>Session</i>. Instaead applications should receive session events via\n *    `session.on(solace.SessionEventCode.<code>, (event) => { ... });`\n * @returns {solace.Session} The newly-created session.\n * @throws {solace.OperationError} if the parameters have an invalid type or value.\n *                          Subcode: {@link ErrorSubcode.PARAMETER_INVALID_TYPE}.\n * @method\n * @name solace.SolclientFactory.createSession\n */\nSolclientFactory.createSession = SolclientFactory.createFactory(\n  (sessionProperties, messageCallbackInfo, eventCallbackInfo) =>\n    new Session(sessionProperties, messageCallbackInfo, eventCallbackInfo));\n\nmodule.exports.AuthenticationScheme = AuthenticationScheme;\nmodule.exports.CapabilityType = CapabilityType;\nmodule.exports.ClientCapabilityType = ClientCapabilityType;\nmodule.exports.MessageRxCBInfo = MessageRxCBInfo;\nmodule.exports.MutableSessionProperty = MutableSessionProperty;\nmodule.exports.Session = Session;\nmodule.exports.SessionEventCBInfo = SessionEventCBInfo;\nmodule.exports.SessionEventCode = SessionEventCode;\nmodule.exports.SessionEvent = SessionEvent;\nmodule.exports.SessionEventName = SessionEventName;\nmodule.exports.SessionProperties = SessionProperties;\nmodule.exports.SessionState = SessionState;\nmodule.exports.SslDowngrade = SslDowngrade;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents authentication schemes that can be used. The corresponding session\n * property is {@link solace.SessionProperties#authenticationScheme}.\n *\n * @readonly\n * @enum {String}\n * @memberof solace\n * @namespace\n */\nconst AuthenticationScheme = {\n  /**\n   * @description Username/Password based authentication scheme.\n   * @type {String}\n   */\n  BASIC:                       'AuthenticationScheme_basic',\n  /**\n   * @name solace.AuthenticationScheme.CLIENT_CERTIFICATE\n   * @default AuthenticationScheme_clientCertificate\n   * @description Client-side certificate based authentication scheme.\n   * @see {@link solace.SessionProperties#sslPfx}\n   * @see {@link solace.SessionProperties#sslPfxPassword}\n   * @see {@link solace.SessionProperties#sslPrivateKey}\n   * @see {@link solace.SessionProperties#sslPrivateKeyPassword}\n   * @see {@link solace.SessionProperties#sslCertificate}\n   * @type {String}\n   * @target node\n   */\n  /**\n   * @description Client-side certificate based authentication scheme.  The certificate and\n   *   private key are provided by the browser.\n   * @type {String}\n   * @target browser\n   */\n  CLIENT_CERTIFICATE:          'AuthenticationScheme_clientCertificate',\n  /**\n   * @deprecated Use {@link solace.AuthenticationScheme.BASIC} instead.\n   * @type {String}\n   */\n  AUTHENTICATION_SCHEME_BASIC: 'AuthenticationScheme_basic',\n\n  /**\n   * @deprecated Use {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} instead.\n   * @type {String}\n   */\n  AUTHENTICATION_SCHEME_CLIENT_CERTIFICATE: 'AuthenticationScheme_clientCertificate',\n\n  /**\n   * @default AuthenticationScheme_oauth2\n   * @description Oauth2 authentication scheme.\n   * @see {@link solace.SessionProperties#accessToken}\n   * @see {@link solace.SessionProperties#idToken}\n   * @see {@link solace.SessionProperties#issuerIdentifier}\n   * @type {String}\n   */\n  OAUTH2: 'AuthenticationScheme_oauth2',\n};\n\nmodule.exports.AuthenticationScheme = Enum.new(AuthenticationScheme);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of peer capabilities.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CapabilityType = {\n  /**\n   * Peer's software load version. Type: string.\n   */\n  PEER_SOFTWARE_VERSION:        0,\n  /**\n   * Peer's software release date. Type: string.\n   */\n  PEER_SOFTWARE_DATE:           1,\n  /**\n   * Peer's platform. Type: string.\n   */\n  PEER_PLATFORM:                2,\n  /**\n   * Speed (in Mbps) of the port the client connects to. Type: number.\n   */\n  PEER_PORT_SPEED:              3,\n  /**\n   * Type of the port the client has connected to (currently 0: Ethernet). Type: number.\n   */\n  PEER_PORT_TYPE:               4,\n  /**\n   * Maximum size of a Direct message (in bytes), including all optional message headers and data.\n   * Type: number.\n   */\n  MAX_DIRECT_MSG_SIZE:          5,\n  /**\n   * Peer's router name. Type: string.\n   *\n   * This property is useful when sending SEMP requests to a peer's SEMP topic, which may be\n   * constructed as `#P2P/routername/#client/SEMP`.\n   */\n  PEER_ROUTER_NAME:             6,\n  /**\n   * Peer supports message eliding. Type: boolean.\n   */\n  MESSAGE_ELIDING:              7,\n  /**\n   * Peer supports NoLocal option (client may avoid receiving messages published by itself).\n   */\n  NO_LOCAL:                     8,\n  /**\n   * Peer supports Guaranteed Message Consumer connections for receiving guaranteed messages.\n   */\n  GUARANTEED_MESSAGE_CONSUME:   9,\n  /**\n   * Peer supports temporary endpoints.\n   */\n  TEMPORARY_ENDPOINT:           10,\n  /**\n   * Peer supports Guaranteed Message Publisher connections for sedning guaranteed messages.\n   */\n  GUARANTEED_MESSAGE_PUBLISH:   11,\n  /**\n   * Peer supports Guaranteed Messages Browser connections for receiving guaranteed messages\n   */\n  GUARANTEED_MESSAGE_BROWSE:    12,\n  /**\n   * Peer supports creating/modify/disposing endpoints.\n   */\n  ENDPOINT_MGMT:                13,\n  /**\n   * Peer supports selectors on Guaranteed Message Consumers.\n   */\n  SELECTOR:                     14,\n  /**\n   * Maximum size of a Direct message (in bytes), including all optional message headers and data.\n   * Type: number.\n   */\n  MAX_GUARANTEED_MSG_SIZE:      15,\n  /**\n   * Peer supports Guaranteed Messaging Consumer state change updates. Type: boolean\n   */\n  ACTIVE_CONSUMER_INDICATION:   16,\n  /**\n   * Peer accepts compressed (DEFLATE) data. Type: boolean.\n   */\n  COMPRESSION:                  17,\n  /**\n   * Peer supports Guaranteed Messaging cut-through. Type: boolean\n   */\n  CUT_THROUGH:                  18,\n  /**\n   * Peer supports provisioned queue and topic-endpoint discard behavior. Type: boolean\n   */\n  ENDPOINT_DISCARD_BEHAVIOR:    19,\n  /**\n   * Peer supports Guaranteed Messaging message TTL and Dead-Message Queues. Type: boolean\n   */\n  ENDPOINT_MESSAGE_TTL:         20,\n  /**\n   * Peer accepts JNDI queries. Type: boolean.\n   */\n  JNDI:                         21,\n  /**\n   * Peer supports per topic sequence numbering for Guaranteed Messaging messages. Type: boolean\n   */\n  PER_TOPIC_SEQUENCE_NUMBERING: 22,\n  /**\n   * Peer supports QueueSubscriptionAdd for managing subscriptions on queue endpoints.\n   * Type: boolean\n   */\n  QUEUE_SUBSCRIPTIONS:          23,\n  /**\n   * Peer supports add/remove subscriptions for a specified clientName. Type: boolean\n   */\n  SUBSCRIPTION_MANAGER:         24,\n  /**\n   * Peer supports transacted sessions. Type: boolean.\n   */\n  TRANSACTED_SESSION:           25,\n  /**\n   * Peer support Message Replay. Type: boolean.\n   */\n  MESSAGE_REPLAY:               26,\n  /**\n   * Peer supports TLS downgrade to compression (encrypted and plaintext) Type: boolean\n   */\n  COMPRESSED_SSL:               27,\n  /**\n   * The peer can support \\#share and \\#noexport subscriptions\n   * Type: Boolean\n   */\n  SHARED_SUBSCRIPTIONS:         28,\n  /**\n   * The EndpointErrorId in replay bind responses can be trusted.\n   */\n  BR_REPLAY_ERRORID:            29,\n};\n\n/**\n * Represents an enumeration of client capabilities.\n * These are sent in the ClientCtrl login messages.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst ClientCapabilityType = {\n  /**\n   * Client implements acknowledgements to router unsolicited unbinds.\n   * Always true.\n   */\n  UNBIND_ACK: 0,\n  /**\n   * Indicates whether a client will process an EndpointErrorId in a BindResponse message.\n   * Always true\n   */\n  BR_ERRORID: 1,\n};\nmodule.exports.CapabilityType = Enum.new(CapabilityType);\nmodule.exports.ClientCapabilityType = Enum.new(ClientCapabilityType);\n","class CorrelatedRequest {\n  /**\n   * Creates an instance of CorrelatedRequest.\n   * @param {String} correlationTag The associated tag\n   * @param {?} timer The opaque timer handle\n   * @param {String} correlationKey The associated key\n   * @param {function} respRecvdCallback The associated callback\n   * @memberof CorrelatedRequest\n   * @private\n   */\n  constructor(correlationTag, timer, correlationKey, respRecvdCallback) {\n    this.correlationTag = correlationTag;\n    this.timer = timer;\n    this.correlationKey = correlationKey;\n    this.respRecvdCallback = respRecvdCallback;\n  }\n}\n\nmodule.exports.CorrelatedRequest = CorrelatedRequest;\n","const { CapabilityType } = require('./capability-types');\n\nmodule.exports.DefaultCapabilities = {\n  createDefaultCapabilities(sessionProperties) {\n    const defaultCapabilities = {\n      [CapabilityType.GUARANTEED_MESSAGE_CONSUME]: true,\n      [CapabilityType.GUARANTEED_MESSAGE_PUBLISH]: true,\n      [CapabilityType.SHARED_SUBSCRIPTIONS]:       true,\n      // The others are set TRUE by CCSMP, but not relevant for us yet\n      // [CapabilityType.TEMPORARY_ENDPOINT]:   true,\n      // [CapabilityType.GUARANTEED_MESSAGE_BROWSE]:         true,\n      // [CapabilityType.ENDPOINT_MGMT]:        true,\n      // [CapabilityType.SELECTOR]:             true,\n      // [CapabilityType.COMPRESSION]:          true,\n      // [CapabilityType.CUT_THROUGH]:          true,\n      // [CapabilityType.QUEUE_SUBSCRIPTIONS]:  true,\n      // [CapabilityType.SUBSCRIPTION_MANAGER]: true,\n      [CapabilityType.MAX_GUARANTEED_MSG_SIZE]: sessionProperties.assumedMaxAdSize,\n    };\n    return defaultCapabilities;\n  },\n};\n","const { Process } = require('solclient-util');\n\nconst C_2_32 = Math.pow(2, 32);\n\nfunction leftPad(str, len) {\n  if (len > str.length) {\n    return '0'.repeat(len - str.length) + str;\n  }\n  return str;\n}\n\nfunction generateRandomId() {\n  const rand = (Math.random() * C_2_32).toFixed(0);\n  return leftPad(rand.toString(), 10);\n}\n\n/**\n * @private\n */\nconst GlobalContext = {\n\n  sessionCounter: 0,\n  idCounter:      0,\n\n  RandId: generateRandomId(),\n\n  NextSessionCounter() {\n    const count = ++this.sessionCounter;\n    return leftPad(count.toString(), 4);\n  },\n\n  NextId() {\n    return ++this.idCounter;\n  },\n\n  GenerateClientName() {\n    const { product, platform } = Process;\n    const result = `${product}/${platform}/${this.RandId}/${this.NextSessionCounter()}`;\n    return result;\n  },\n\n  GenerateUserIdentification() {\n    const { product, platform } = Process;\n    return `${product}/${platform}/${this.RandId}`;\n  },\n\n  GenerateClientDescription() {\n    return `solclientjs/${Process.description}`.substring(0, 254);\n  },\n};\n\nmodule.exports.GlobalContext = GlobalContext;\n","const { LOG_TRACE } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\n\nlet hostListDNSFilter;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-env node */\n  /* eslint-disable global-require */\n  const dns = require('dns');\n  /* eslint-enable global-require */\n\n  // util.promisify is Node 8. This converts an (err, result) callback to a promise.\n  // The purpose is to allow us to use Promise.all, which deals with waiting until\n  // all promises are resolved, and returning the results in correctly ordered array.\n  const dnsLookupPromise = (url, options) => new Promise((resolve) => {\n    const host = parseURL(url).hostname;\n    LOG_TRACE('looking up', url, '=>', host);\n    dns.lookup(host, options, (error, result) => {\n      LOG_TRACE('DNS result', error, result);\n      return error === null\n        ? resolve({ url, host, address: result, resolved: true })\n        : resolve(\n          { url,\n            host,\n            resolved: true,\n            error:    {\n              code:     error['code'], // eslint-disable-line dot-notation\n              errno:    error['errno'], // eslint-disable-line dot-notation\n              hostname: error['hostname'], // eslint-disable-line dot-notation\n              syscall:  error['syscall'], // eslint-disable-line dot-notation\n            },\n          });\n    });\n  });\n\n  /**\n   * Resolution calls back with an array of the following:\n   * `{ url: 'http://example.com/foo', host: 'example.com', address: '10.0.0.1', resolved: true }`\n   * or, on error\n   * `{ url: 'http://example.com/foo', host: 'example.com', resolved: true, error: {\n   *    code: 'ENOTFOUND', errno: 'ENOTFOUND', syscall: 'getaddrinfo'\n   *  } }`\n   *\n   * If resolution could not be performed, because of platform limitations, the callback receives\n   * the following:\n   * `{ url: 'http://example.com/foo', host: 'example.com', address: 'example.com', resolved: false }`\n   *\n   * Even if no DNS lookup is performed, the function can still fail if an invalid URL is provided.\n   *\n   * The function always calls back asynchronously.\n   *\n   * @param {Array.<String>} urls Array of URLs to resolve\n   * @param {function} cb A function called back with results as described above\n   * @private\n   */\n  hostListDNSFilter = function hostListDNSFilterNode(urls, cb) {\n    const promises = urls.map(url => dnsLookupPromise(\n      url,\n      { 'verbatim': true }\n    ));\n    // Call back (null, [{host:, address:}, ...]) if all successful\n    // Call back (err, undefined) fast if any error\n    Promise.all(promises).then(resolved => cb(null, resolved)).catch(err => cb(err));\n  };\n} else {\n  /* eslint-env browser */\n  // Create an always-async callback that allows all hosts.\n  //hostListDNSFilter = (urls, cb) => setImmediate(() => {\n  hostListDNSFilter = (urls, cb) => setTimeout(() => {\n    try {\n      const result = urls.map((url) => {\n        const host = parseURL(url).host;\n        return { url, host, address: host, resolved: false };\n      });\n      return cb(null, result);\n    } catch (e) {\n      return cb(e);\n    }\n  }, 0);\n}\n\nmodule.exports.hostListDNSFilter = hostListDNSFilter;\n","const { assert } = require('solclient-eskit');\nconst { hostListDNSFilter } = require('./host-list-dns-filter');\nconst { LogFormatter } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\n\nfunction parseURLs(rawURLs) {\n  if (Array.isArray(rawURLs)) {\n    return rawURLs.map(rawURL => parseURL(rawURL));\n  }\n  return parseURLs(rawURLs.split(/[,;]/));\n}\n\n/*\n *   \"When using a host list, each time the API works through the host list without establishing\n *    a connection is considered an connect retry.\"\n *   SESSION_CONNECT_RETRIES: \"When using a host list, this property defines how many times to\n *    try to connect or reconnect to a single host before moving to the next host in the list.\"\n *   Details: http://docs.solace.com/Solace-Messaging-APIs/Configuring-Connection-T.htm\n*/\n\n// In general:\n// * set initial state to invalid so that we begin needing a transition.\n// * preincrement all try counts on transition.\n// Specifics:\n// * Select try count for entire list based on whether we were connected.\n// * Try count per host is the same for both connect and reconnect.\n// * When the host changes, the waitTime is 0.\n// * Overriding the above, when the host pointer wraps to 0, the waitTime is nonzero.\n\nclass HostInfo {\n  constructor(props = { url: null, waitTime: 0 }) {\n    Object.assign(this, props);\n  }\n}\n\n/**\n * @private\n */\nclass HostList {\n  constructor({\n    url,\n    connectRetries,\n    reconnectRetries,\n    connectRetriesPerHost,\n    reconnectRetryWaitInMsecs,\n  } = {}) {\n    Object.assign(this, {\n      hosts: parseURLs(url).map(e => e.href),\n\n      // How many times will we traverse the host list without success?\n      // Try to connect one more than the 'retryCount' because we always try once.\n      connectTryCount: (connectRetries === -1\n        ? Number.POSITIVE_INFINITY\n        : connectRetries + 1\n      ),\n\n      // How many times will we traverse the host list after success?\n      reconnectTryCount: (reconnectRetries === -1\n        ? Number.POSITIVE_INFINITY\n        : reconnectRetries\n      ),\n\n      // A value of –1 in the next assignements means retry forever - \"null\" will mean that\n      // try to connect one more than the 'retryCount' because we always try once.\n      connectTryCountPerHost: (connectRetriesPerHost === -1\n        ? Number.POSITIVE_INFINITY\n        : connectRetriesPerHost + 1\n      ),\n\n      // How long do we wait before reattempting the same host or wrapping around the list?\n      reconnectRetryWaitInMsecs,\n\n      // Mutating operations affect only this.\n      _mutableState: {},\n\n      logger: new LogFormatter('[host-list]'),\n    });\n\n    assert(this.hosts.length >= 1);\n    assert(this.connectTryCount >= 1);\n    assert(this.reconnectTryCount >= 0);\n    assert(this.connectTryCountPerHost >= 1);\n  }\n\n  /**\n   * Call before first getNextHost() to validate that at least one URL contains a reachable\n   * hostname.\n   * @param {function(Error)} callback The callback to invoke when DNS resolution completes\n   */\n  resolveHosts(callback) {\n    const { LOG_TRACE, LOG_WARN } = this.logger;\n    hostListDNSFilter(this.hosts, (err, resolved) => {\n      // Exit immediately if the filter threw.\n      if (err) return callback(err);\n      assert(resolved.length === this.hosts.length, 'Resolve did not return a result for all hosts');\n\n      LOG_TRACE('Resolve result', resolved);\n      let succeeded = 0;\n      resolved.forEach((result) => {\n        if (result.address) {\n          ++succeeded;\n        }\n        if (!result.resolved) {\n          // Only log if the lookup was actually performed\n          return;\n        }\n        if (result.address) {\n          LOG_TRACE('DNS resolve OK:    ', result.address, 'for', result.url);\n        } else {\n          LOG_WARN('DNS resolve FAILED:', result.error.code,\n                   `${result.error.syscall}('${result.error.hostname}')`, 'for', result.url);\n        }\n      });\n      return callback(succeeded === 0 ? 'All hosts failed DNS resolution' : null);\n    });\n  }\n\n  /**\n   * @param {Object} state Properties for host selection logic\n   * @memberof HostList\n   */\n  reset(state = { wasConnected: false, disconnected: false }) {\n    // On reset, we always return to the beginning of the host list.\n    // This facilitates DR recovery by returning to the primary router.\n    // Set an invalid initial state that will trigger our first try.\n    Object.assign(this._mutableState, {\n      wasConnected: state.wasConnected,\n      disconnected: state.disconnected,\n      hostPointer:  0,\n      hostTries:    0,\n      listTries:    1,\n      exhausted:    false,\n      lastHostInfo: new HostInfo(),\n    });\n  }\n\n  /**\n   * !returns {HostInfo} Connection information for the next host.\n   * @returns {String} The URL for the next host\n   * @memberof HostList\n   */\n  getNextHost() {\n    const { LOG_TRACE } = this.logger;\n\n    const state = this._mutableState;\n    const wasConnected = state.wasConnected;\n    const lastHostInfo = state.lastHostInfo;\n\n    assert(lastHostInfo, 'Next host request with no prior host info -- did you call reset()?');\n    // Using a try/finally as a \"goto end\" to always log final state. Exceptions not expected\n    // here, although if an assertion fails, the finally log should be helpful.\n    try {\n      // If this was passed into reset, the session is telling us to enforce no more hosts.\n      if (state.disconnected) {\n        LOG_TRACE('Host list set to disconnected, providing null next host');\n        return null;\n      }\n\n      // If exhausted, this function has returned a null url already.\n      assert(!state.exhausted, 'Next host request after host list exhausted');\n\n      // Pull immutable properties from the instance\n      const properties = Object.assign({\n        hosts:        this.hosts,\n        hostTriesMax: this.connectTryCountPerHost,\n        listTriesMax: wasConnected ? this.reconnectTryCount : this.connectTryCount,\n      });\n\n      LOG_TRACE('Getting next host\\n', 'properties', properties, '\\nstate', state);\n      LOG_TRACE('Last host', lastHostInfo);\n\n      // Initial state was valid. This is a host try. Increment.\n      ++state.hostTries;\n      if (state.hostTries > properties.hostTriesMax) {\n        // Increment host pointer, possibly putting it out of bounds.\n        LOG_TRACE(`Exhausted ${state.hostTries} host tries for host ${lastHostInfo.url}.`);\n        ++state.hostPointer;\n        // If the host pointer is out of bounds, we are beginning a new list try.\n        // It was either set out of bounds deliberately by reset() or it was\n        // incremented out of bounds above.\n        if (state.hostPointer >= properties.hosts.length) {\n          // This is a new list try.\n          ++state.listTries;\n          if (state.listTries > properties.listTriesMax) {\n            // Beginning this list try has exceeded our inclusive max. The host list is\n            // exhausted.\n            LOG_TRACE(`Exhausted host list at ${properties.listTriesMax} traversals.`);\n            state.exhausted = true;\n          } else {\n            // Resetting the host pointer to begin this list try.\n            LOG_TRACE(`Host list try (${state.listTries}/${properties.listTriesMax})`);\n            state.hostPointer = 0;\n            state.hostTries = 1; // this is the first try for this host\n          }\n        } else {\n          state.hostTries = 1; // this is the first try for this host\n        }\n      } else {\n        // Continue with this host.\n        LOG_TRACE(`Host try (${state.hostTries}/${properties.hostTriesMax})`);\n      }\n\n      if (state.exhausted) {\n        LOG_TRACE('All hosts exhausted');\n        return null;\n      }\n\n      // Beyond this point, expect a valid host to be returned.\n\n      const url = properties.hosts[state.hostPointer];\n      assert(url, `No host at the host pointer! ${properties.hosts}[${state.hostPointer}]`);\n\n      // Wait time conditions:\n      // 1. On a new list (invalid lastHostInfo), zero waitTime.\n      const isNewList = lastHostInfo.url === null;\n      // 2a. On a new host, zero waitTime...\n      const isNewHost = lastHostInfo.url !== url;\n      // 2b. ...unless we are just restarting the list.\n      const didJustFinishList = lastHostInfo.url !== url && state.hostPointer === 0;\n      // (2b negates 2a for a new list)\n\n      const waitTime = (isNewList || (isNewHost && !didJustFinishList))\n        ? 0\n        : this.reconnectRetryWaitInMsecs;\n\n      // Session FSM was intended to use all of these, but handles its own events presently\n      // and expects waitTime to be a property of the list that mutates per host, so that is\n      // what is done.\n      const hostInfo = new HostInfo({\n        url,\n        waitTime,\n      });\n\n      // Set last host for next time, and return\n      LOG_TRACE('Returning host from', hostInfo);\n      state.lastHostInfo = hostInfo;\n      return hostInfo.url;\n    } finally {\n      LOG_TRACE('Final list state\\n', state);\n    }\n  }\n\n  get connectWaitTimeInMsecs() {\n    assert(this._mutableState.lastHostInfo.url, 'Getting connectWaitTimeInMsecs having never called getNextHostInfo');\n    return this._mutableState.lastHostInfo.waitTime;\n  }\n\n  currentHostToString() {\n    const state = this._mutableState;\n    const wasConnected = state.wasConnected;\n    // Pull immutable properties from the instance\n    const properties = Object.assign({\n      hosts:        this.hosts,\n      hostTriesMax: this.connectTryCountPerHost,\n      listTriesMax: wasConnected ? this.reconnectTryCount : this.connectTryCount,\n    });\n    // host pointer is zero based index into the host list\n    // so translate it to a human readable index\n    const hostNumber = state.hostPointer + 1;\n    return `host '${state.lastHostInfo.url}' (host ${hostNumber} of ${properties.hosts.length})(host connection attempt ${state.hostTries} of ${properties.hostTriesMax})(total ${wasConnected ? 'reconnection' : 'connection'} attempt ${state.listTries} of ${properties.listTriesMax})`;\n  }\n}\n\nmodule.exports.HostList = HostList;\n","/**\n * @classdesc\n *\n * Encapsulates the session's message receive callback function and\n * an optional user-specified object.\n *\n * This class is passed to {@link solace.SolclientFactory.createSession} when creating a session.\n * @deprecated The {@link solace.Session} is an <b>EventEmitter</b>.\n * Use <tt>sessionObject.on({@link solace.SessionEventCode.MESSAGE})</tt> instead.\n *\n * @memberof solace\n */\nclass MessageRxCBInfo {\n\n  /**\n   * Creates an instance of MessageRxCBInfo.\n   *\n   * @param {function(Session, Message, Object)} messageRxCBFunction\n   *          Invoked by the API when a message is received\n   *          over the session. The prototype of this function is the\n   *          following: ({@link solace.Session},\n   *                      {@link solace.Message},\n   *                      {Object})\n   * @param {Object} userObject\n   *          An optional user-specified object passed on every message receive callback.\n   *\n   * @memberof solace\n   */\n  constructor(messageRxCBFunction, userObject) {\n    /**\n     * @type {function(Session, Message, Object)}\n     * @description The prototype of this function is the\n     * following: ({@link solace.Session}, {@link solace.Message}, userObject {Object})\n     */\n    this.messageRxCBFunction = messageRxCBFunction;\n\n    /**\n     * @type {Object}\n     * @description user-specified object\n     */\n    this.userObject = userObject;\n  }\n}\n\nmodule.exports.MessageRxCBInfo = MessageRxCBInfo;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of session properties that can be modified by\n * {@link solace.Session.updateProperty} after the {@link solace.Session} is originally\n * created.\n *\n * These correspond to session properties in {@link solace.SessionProperties}.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MutableSessionProperty = {\n  /**\n   * Client name: {@link solace.SessionProperties#clientName}\n   * @type {Number}\n   */\n  CLIENT_NAME:        1,\n  /**\n   * Application description: {@link solace.SessionProperties#applicationDescription}\n   * @type {Number}\n   */\n  CLIENT_DESCRIPTION: 2,\n};\n\nmodule.exports.MutableSessionProperty = Enum.new(MutableSessionProperty);\n","/**\n * @private\n */\nclass OutstandingDataRequest {\n  constructor(correlationId, timer, replyReceivedCBFunction, reqFailedCBFunction, userObject) {\n    this.correlationId = correlationId;\n    this.timer = timer;\n    this.replyReceivedCBFunction = replyReceivedCBFunction;\n    this.reqFailedCBFunction = reqFailedCBFunction;\n    this.userObject = userObject;\n  }\n}\n\nmodule.exports.OutstandingDataRequest = OutstandingDataRequest;\n","const P2PUtil = {\n  getP2PInboxTopic(base) {\n    return (`${base}/_`);\n  },\n  getP2PTopicSubscription(base) {\n    return (`${base}/>`);\n  },\n};\n\nmodule.exports.P2PUtil = P2PUtil;\n","/**\n * @classdesc\n * Encapsulates the session's event callback function and an optional user-specified object.\n *\n * This class is passed to {@link solace.SolclientFactory.createSession} when creating a session.\n * @deprecated The {@link solace.Session} is an <b>EventEmitter</b>.  Register event handlers\n * against {@link solace.SessionEventCode} events instead.\n *\n * @memberof solace\n */\n\nclass SessionEventCBInfo {\n\n  /**\n   * Creates an instance of SessionEventCBInfo.\n   *\n   * @param {function(Session, SessionEvent, Object, Object)} sessionEventCBFunction\n   *  invoked by the Messaging API when a session event occurs. The prototype\n   *  of this function is the following: ({@link solace.Session},\n   *                                      {@link solace.SessionEvent},\n   *                                      {Object}})\n   * @param {Object} userObject An optional user-specified object passed on\n   * every session event callback.\n   */\n  constructor(sessionEventCBFunction, userObject) {\n    /**\n     * @type {Object}\n     * @description user-specified object\n     */\n    this.userObject = userObject;\n\n    /**\n     * @type {function}\n     * @description The prototype of this function is the\n     * following:\n     * ({@link solace.Session}, {@link solace.SessionEvent},\n     * userObject {Object}, RFUObject {Object})\n     */\n    this.sessionEventCBFunction = sessionEventCBFunction;\n  }\n}\n\nmodule.exports.SessionEventCBInfo = SessionEventCBInfo;\n","const { Enum } = require('solclient-eskit');\n\n\n/**\n * @callback solace.SessionEventCodes.sessionEvent\n * @function\n * @this {solace.Session} The message consumer for the event\n * @param {solace.SessionEvent|solace.OperationError} event The event. If the event is an\n *  error, the event will be an instance of {@link solace.OperationError} but will also be\n *  interface-compatible with {@link solace.SessionEvent}.\n */\n\n\n/**\n * An attribute of {@link SessionEvent}. This enumeration represents the\n * different events emitted by {@link Session} through the session event\n * callback.\n *\n * When a session is no longer in a usable state, the API tears down the underlying\n * connection and notifies the application with one of the following session events:\n *  * {@link solace.SessionEventCode#event:DOWN_ERROR}\n *  * {@link solace.SessionEventCode#event:CONNECT_FAILED_ERROR}\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SessionEventCode = {\n  /**\n   * The Session is ready to send/receive messages and perform control operations.\n   *\n   * At this point the transport session is up, the Session has logged in, and the\n   * P2PInbox subscription is added.\n   *\n   * The session is established.\n   * @event solace.SessionEventCode#UP_NOTICE\n   */\n  UP_NOTICE:                         0,\n  /**\n   * The session was established and then went down.\n   * @event solace.SessionEventCode#DOWN_ERROR\n   * @param {solace.OperationError} error The details related to the session failure.\n   */\n  DOWN_ERROR:                        1,\n  /**\n   * The session attempted to connect but was unsuccessful.\n   * @event solace.SessionEventCode#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error The details related to the failed connection attempt.\n   */\n  CONNECT_FAILED_ERROR:              2,\n  /**\n   * The Solace Message Router rejected a published message.\n   * @event solace.SessionEventCode#REJECTED_MESSAGE_ERROR\n   * @param {solace.RequestError} error The details related to the rejected message.\n   */\n  REJECTED_MESSAGE_ERROR:            4,\n  /**\n   * The Solace Message Router rejected a subscription (add or remove).\n   * @event solace.SessionEventCode#SUBSCRIPTION_ERROR\n   * @param {solace.RequestError} error The details related to the failed subscription update.\n   */\n  SUBSCRIPTION_ERROR:                5,\n  /**\n   * The subscribe or unsubscribe operation succeeded.\n   * @event solace.SessionEventCode#SUBSCRIPTION_OK\n   * @param {solace.SessionEvent} event The details related to the successful subscription update.\n   */\n  SUBSCRIPTION_OK:                   6,\n  /**\n   * The Solace Message Router's Virtual Router Name changed during a reconnect operation.\n   * @event solace.SessionEventCode#VIRTUALROUTER_NAME_CHANGED\n   * @param {solace.SessionEvent} event Information related to the event.\n   */\n  VIRTUALROUTER_NAME_CHANGED:        7,\n  /**\n   * @deprecated\n   * A request was aborted because the session is being disconnected.\n   * Use {@link solace.RequestFailEvent} instead.\n   */\n  REQUEST_ABORTED:                   8,\n  /**\n   * @deprecated\n   * The event represents a timed-out request API call.\n   * Use {@link solace.RequestFailEvent} instead.\n   */\n  REQUEST_TIMEOUT:                   9,\n  /**\n   * The event represents a successful update of a mutable session property.\n   * @event solace.SessionEventCode#PROPERTY_UPDATE_OK\n   * @param {solace.SessionEvent} event Information related to the successful property update.\n   */\n  PROPERTY_UPDATE_OK:                10,\n  /**\n   * The event represents a failed update of a mutable session property.\n   * @event solace.SessionEventCode#PROPERTY_UPDATE_ERROR\n   * @param {solace.RequestError} error The details related to the failed property update.\n   */\n  PROPERTY_UPDATE_ERROR:             11,\n  /**\n   * The session transport can accept data again.  This event will occur after an\n   * {@link solace.OperationError} is thrown from an API call with a subcode of\n   * {@link solace.ErrorSubcode.INSUFFICIENT_SPACE} to indicate the operation can be retried.\n   * This event is used both after session-level transport buffer exhaustion,\n   * and Guaranteed Messaging Window exhaustion.\n   * @event solace.SessionEventCode#CAN_ACCEPT_DATA\n   */\n  CAN_ACCEPT_DATA:                   13,\n  /**\n   * The session connect operation failed, or the session that was once up,\n   * is now disconnected.\n   * @event solace.SessionEventCode#DISCONNECTED\n   */\n  DISCONNECTED:                      14,\n  /**\n   * The session has gone down, and an automatic reconnection attempt is in progress.\n   * @event solace.SessionEventCode#RECONNECTING_NOTICE\n   * @param {solace.SessionEvent} event The details related to the cause of the connection\n   *    interruption.\n   */\n  RECONNECTING_NOTICE:               22,\n  /**\n   * The automatic reconnect of the Session was successful, and the session is established again.\n   * @event solace.SessionEventCode#RECONNECTED_NOTICE\n   * @param {solace.SessionEvent} event The details related to the re-establishment of the\n   *    connection.\n   */\n  RECONNECTED_NOTICE:                23,\n  /**\n   * The session has automatically recovered after the Guaranteed Message publisher\n   * failed to reconnect.\n   * Messages sent but not acknowledged are being renumbered and retransmitted.\n   * Some messages may be duplicated in the system.\n   * @event solace.SessionEventCode#REPUBLISHING_UNACKED_MESSAGES\n   * @param {solace.SessionEvent} event The details related to the republishing of messages on the\n   *    session.  {@link solace.SessionEvent#infoStr} will indicate the number of messages being\n   *    republished, which is an upper bound on the number of messages that could be duplicated due\n   *    to this action.\n   */\n  REPUBLISHING_UNACKED_MESSAGES:     24,\n  /**\n   * A message was acknowledged by the router.\n   * @event solace.SessionEventCode#ACKNOWLEDGED_MESSAGE\n   * @param {solace.SessionEvent} event Allows the acknowledgement to be correlated to the sent\n   *    message.\n   */\n  ACKNOWLEDGED_MESSAGE:              25,\n  /**\n   * Unsubscribing the topic from the Durable Topic Endpoint succeeded.\n   * @event solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_OK\n   */\n  UNSUBSCRIBE_TE_TOPIC_OK:           26,\n  /**\n   * Unsubscribing the topic from the Durable Topic Endpoint failed.\n   * @event solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_ERROR\n   * @param {solace.OperationError} error The details related to the failed attempt to remove the\n   *    subscription from a topic endpoint.\n   */\n  UNSUBSCRIBE_TE_TOPIC_ERROR:        27,\n  /**\n   * A Direct message was received on the session. This event code is only used\n   * on the <b>EventEmitter</b> session interface.  If using the deprecated callback interface,\n   * messages are received via the callback provided in {@link solace.MessageRxCBInfo}.\n   * @event solace.SessionEventCode#MESSAGE\n   * @param {solace.Message} message The message received on the session.\n   */\n  MESSAGE:                           28,\n  /**\n   * Guaranteed Messaging Publisher has been closed by the Solace\n   * message router. This usually indicates an operator has disabled the\n   * message spool.\n   * @event solace.SessionEventCode#GUARANTEED_MESSAGE_PUBLISHER_DOWN\n   * @param {solace.OperationError} error Information related to the error.\n   */\n  GUARANTEED_MESSAGE_PUBLISHER_DOWN: 29,\n};\n\nmodule.exports.SessionEventCode = Enum.new(SessionEventCode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionEventName = {\n  CONNECT:                       'SessionConnect',\n  DISCONNECT:                    'SessionDisconnect',\n  DISPOSE:                       'SessionDispose',\n  CONNECT_TIMEOUT:               'SessionConnectTimeout',\n  CONNECT_WAIT_TIMEOUT:          'SessionConnectWaitTimeout',\n  DOWNGRADE_TIMEOUT:             'SessionDowngradeTimeout',\n  TRANSPORT_UP:                  'SessionTransportUp',\n  TRANSPORT_DESTROYED:           'SessionTransportDestroyed',\n  TRANSPORT_CAN_ACCEPT_DATA:     'SessionTransportCanAcceptData',\n  TRANSPORT_PARSE_ERROR:         'SessionTransportParseError',\n  TRANSPORT_PROTOCOL_SMP:        'SessionSMPMessage',\n  TRANSPORT_PROTOCOL_CLIENTCTRL: 'SessionClientCtrlMessage',\n  EXCEPTION:                     'SessionException',\n  SUBSCRIBE_TIMEOUT:             'SessionSubscribeTimeout',\n  CREATE_SUBSCRIBER:             'SessionCreateSubscriber',\n  FLOW_UP:                       'SessionFlowUp',\n  FLOW_FAILED:                   'SessionFlowFailed',\n  SEND_ERROR:                    'SessionSendError',\n  FLOWS_DISCONNECTED:            'SessionFlowsDisconnected',\n  TRANSPORT_FLUSHED:             'SessionTransportFlushed',\n  DNS_RESOLUTION_COMPLETE:       'SessionDNSResolutionComplete',\n  TRANSPORT_CHANGE_DONE:         'SessionTransportChangeDone',\n};\n\nmodule.exports.SessionEventName = Enum.new(SessionEventName);\n","const { ErrorSubcode,\n        OperationError,\n        RequestError,\n        RequestEventCode } = require('solclient-error');\nconst { SessionEventCode } = require('./session-event-codes');\n\nfunction buildType(Superclass) {\n  /**\n   * @classdesc\n   * Represents a session event; events are passed to the application-provided\n   * event handling callback provided when creating the session.\n   * @memberof solace\n   * @hideconstructor\n   */\n  class SessionEvent extends Superclass {\n    /**\n     * @constructor\n     * @param {Array} superclassArgs Args to pass to super\n     * @param {solace.SessionEventCode} sessionEventCode The event code\n     * @param {String} infoStr Information string\n     * @param {Number} [responseCode] Any associated router response code\n     * @param {solace.ErrorSubcode} [errorSubcode] Any associated error subcode\n     * @param {Object} [correlationKey] Any associated correlation key\n     * @param {String} [reason] Any additional information\n     * @private\n     */\n    constructor(superclassArgs,\n                sessionEventCode,\n                infoStr,\n                responseCode = undefined,\n                errorSubcode = 0,\n                correlationKey = undefined,\n                reason = undefined) {\n      super(...superclassArgs);\n      this._sessionEventCode = sessionEventCode;\n      this._infoStr = infoStr;\n      this._responseCode = responseCode;\n      this._errorSubcode = errorSubcode;\n      this._correlationKey = correlationKey; // optional\n      this._reason = reason; // optional\n    }\n\n    /**\n     * @type {solace.SessionEventCode}\n     * @description Further qualifies the session event.\n     */\n    get sessionEventCode() {\n      return this._sessionEventCode;\n    }\n\n    /**\n     * @type {String}\n     * @description if applicable, an information string returned by the Solace Message Router.\n     */\n    get infoStr() {\n      return this._infoStr;\n    }\n\n    /**\n     * @type {?Number}\n     * @description if applicable, a response code returned by the Solace Message Router.\n     */\n    get responseCode() {\n      return this._responseCode;\n    }\n\n    /**\n     * @type {?solace.ErrorSubcode}\n     * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n     */\n    get errorSubcode() {\n      // _eslint-disable-next-line quote-property\n      return this.subcode || this._errorSubcode;\n    }\n\n    /**\n     * @deprecated Use {@link solace.SessionEvent#errorSubcode} instead.\n     * @readonly\n     */\n    // coverity[identifier_typo]\n    get errorSubCode() {\n      return this.errorSubcode;\n    }\n\n    /**\n     * @type {?Object}\n     * @description A user-specified object\n     * made available in the response or confirmation event by including it as a\n     * parameter in the orignal API call.  If the user did not specify a\n     * correlationKey, it will be <code>null</code>.\n     */\n    get correlationKey() {\n      return this._correlationKey;\n    }\n\n    /**\n     * @type {?String}\n     * @description Additional information if it is applicable.\n     * In case of subscribe or publish errors, it constains the topic.\n     */\n    get reason() {\n      return this._reason;\n    }\n    /**\n     * @param {Object} value The reason info object\n     * @internal\n     */\n    set reason(value) {\n      this._reason = value;\n    }\n\n    [util_inspect_custom]() {\n      // Is this supposed to invoke the custom inspect function of the superclass if it exists?\n      return Object.assign(super[util_inspect_custom] || {}, {\n        'sessionEventCode': SessionEventCode.describe(this.sessionEventCode),\n        'infoStr':          this.infoStr,\n        'responseCode':     this.responseCode,\n        'errorSubcode':     ErrorSubcode.describe(this.errorSubcode),\n        'correlationKey':   this.correlationKey ? this.correlationKey.toString() : null,\n        'reason':           this.reason ? this.reason : null,\n      });\n    }\n\n    toString() {\n      return util_inspect(this);\n    }\n  }\n\n  return SessionEvent;\n}\n\nconst SUPERCLASS_FOR_SESSION_EVENT = {\n  [SessionEventCode.CONNECT_FAILED_ERROR]:              OperationError,\n  [SessionEventCode.DOWN_ERROR]:                        OperationError,\n  [SessionEventCode.GUARANTEED_MESSAGE_PUBLISHER_DOWN]: OperationError,\n  [SessionEventCode.PROPERTY_UPDATE_ERROR]:             RequestError,\n  [SessionEventCode.REJECTED_MESSAGE_ERROR]:            RequestError,\n  [SessionEventCode.SUBSCRIPTION_ERROR]:                RequestError,\n  [SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR]:        OperationError,\n  [RequestEventCode.REQUEST_ABORTED]:                   RequestError,\n  [RequestEventCode.REQUEST_TIMEOUT]:                   RequestError,\n};\n\nconst SUPERCLASS_ARGS = new Map()\n  .set(Object, () => [])\n  .set(OperationError, (sec, infoStr, rc, subcode, ck, reason) => [infoStr, subcode, reason])\n  .set(RequestError, (sec, infoStr, rc, subcode, ck, reason) => [infoStr, sec, ck, reason]);\n\nconst TYPE_CACHE = new Map();\n\nfunction build(sessionEventCode,\n               infoStr,\n               responseCode = undefined,\n               errorSubcode = 0,\n               correlationKey = undefined,\n               reason = undefined) {\n  const Superclass = SUPERCLASS_FOR_SESSION_EVENT[sessionEventCode] || Object;\n  const SessionEvent = (() => {\n    let result = TYPE_CACHE.get(Superclass);\n    if (result) return result;\n    result = buildType(Superclass);\n    TYPE_CACHE.set(Superclass, result);\n    return result;\n  })();\n  const superclassArgsBuilder = (SUPERCLASS_ARGS.get(Superclass) || (() => []));\n  const superclassArgs = superclassArgsBuilder(sessionEventCode,\n                                               infoStr,\n                                               responseCode,\n                                               errorSubcode,\n                                               correlationKey,\n                                               reason);\n  return new SessionEvent(superclassArgs,\n                          sessionEventCode,\n                          infoStr,\n                          responseCode,\n                          errorSubcode,\n                          correlationKey,\n                          reason);\n}\n\n// Expose a type\nconst SessionEvent = buildType(Object);\nSessionEvent.build = build;\n\nmodule.exports.SessionEvent = SessionEvent;\n","const { ErrorSubcode } = require('solclient-error');\nconst { FsmEvent } = require('solclient-fsm');\nconst { Hex } = require('solclient-convert');\n\nconst { formatHexString } = Hex;\n/**\n * SessionFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the SessionFSM.  This extension provides members to carry information specfic to\n * the SessionFSM transitions.\n * @extends FsmEvent\n * @private\n */\nclass SessionFSMEvent extends FsmEvent {\n  constructor(spec, fields) {\n    super(spec);\n    /**\n     * @type {String}\n     * @description Information String for the {SessionEvent}\n     */\n    this.eventText = null;\n    /**\n     * @type {ErrorSubcode}\n     * @description The Solace ErrorSubcode for any generated {SessionEvent}\n     */\n    this.errorSubcode = null;\n    /**\n     * @type {String}\n     * @description The reason string to be included in any generated {SessionEvent}\n     */\n    this.eventReason = null;\n    /**\n     * @type {TransportSMFMessage}\n     * @description A decoded SMF message received from the transport. May be\n     * either a {ClientCtrlMessage} or a {SMPMessage}\n     */\n    this.smfMsg = null;\n    /**\n     * @type {Object}\n     * @description The Transport SessionId retrieved from a {TransportSessionEvent}\n     */\n    this.sessionId = null;\n    /**\n     * @type {Object}\n     * @description The Publisher or Consumer object associated with a GM event.\n     */\n    this.guaranteedFlowObject = null;\n\n    Object.assign(this, fields);\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'eventText':    this.eventText,\n      'eventReason':  this.eventReason,\n      'errorSubcode': ErrorSubcode.describe(this.errorSubcode),\n      'sessionId':    this.sessionId && formatHexString(this.sessionId) || 'N/A',\n    };\n  }\n\n  getExtraStringInfo() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.SessionFSMEvent = SessionFSMEvent;\n","const ConsumerLib = require('solclient-message-consumer');\nconst PublisherLib = require('solclient-message-publisher');\nconst SMFLib = require('solclient-smf');\nconst SolclientFactoryLib = require('solclient-factory');\nconst TransportLib = require('solclient-transport');\n\nconst { assert } = require('solclient-eskit');\nconst { CapabilityType } = require('./capability-types');\nconst { Check } = require('solclient-validate');\nconst { CorrelatedRequest } = require('./correlated-request');\nconst { Destination } = require('solclient-destination');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { FsmEvent,\n        State,\n        StateMachine } = require('solclient-fsm');\nconst { Hex } = require('solclient-convert');\nconst { LogFormatter } = require('solclient-log');\nconst { Message,\n        MessageDeliveryModeType } = require('solclient-message');\nconst { P2PUtil } = require('./p2p-util');\nconst { SessionEvent } = require('./session-event');\nconst { SessionEventCode } = require('./session-event-codes');\nconst { SessionEventName } = require('./session-event-names');\nconst { SessionFSMEvent } = require('./session-fsm-event');\nconst { SessionRequestType } = require('./session-request-types');\nconst { SessionStateName } = require('./session-state-names');\nconst { SslDowngrade } = require('./ssl-downgrades');\nconst { StatType,\n        StatsByMode } = require('solclient-stats');\nconst { StringUtils } = require('solclient-util');\nconst { SubscriptionUpdateTimeoutMessages } = require('./subscription-update-timeout-messages');\n\nconst { formatHexString } = Hex;\nconst { stripNullTerminate } = StringUtils;\nconst { STAT_TX_BYMODE_BYTES,\n        STAT_TX_BYMODE_MSGS,\n        STAT_RX_BYMODE_BYTES,\n        STAT_RX_BYMODE_MSGS,\n        STAT_TX_BYMODE_REDELIVERED,\n        STAT_TX_BYMODE_BYTES_REDELIVERED } = StatsByMode;\n\n/**\n * @param {SessionProperties} sessionProperties The shared reference to the properties of the\n *  owning session\n * @param {Session} session The session owning this FSM\n * @extends StateMachine\n * @private\n */\nclass SessionFSM extends StateMachine {\n  constructor(sessionProperties, session, stats, hosts) {\n    super({ name: 'SessionFSM' });\n    const fsm = this;\n    const logFormatter = function logFormatter(...args) {\n      return [\n        `[session-fsm=${fsm.sessionIdHex || '(N/A)'}]`,\n        `[${fsm.getCurrentStateName()}]`,\n        ...args,\n      ];\n    };\n    const logger = this.logger = new LogFormatter(logFormatter);\n    const { LOG_TRACE, LOG_DEBUG, LOG_INFO } = logger;\n    this.log = logger.wrap(this.log, this);\n    this._sessionProperties = sessionProperties;\n    this._session = session;\n    this._sessionStatistics = stats;\n    this._hosts = hosts;\n    this._consumers = new ConsumerLib.ConsumerFlows();\n    // This is a function that generates this interface. It takes the flow as a construction\n    // parameter, and for some methods, produces a partial application using that flow.\n\n    this._flowInterfaceFactory = flow => ({\n      getCorrelationTag:               this.getCorrelationTag.bind(this),\n      incStat:                         this.incStat.bind(this),\n      sendData:                        message => this.send(message, flow, false),\n      sendToTransport:                 message => this.sendToTransport(message, flow, false),\n      sendControl:                     message => this.send(message, flow, true),\n      enqueueRequest:                  this.enqueueOutstandingCorrelatedReq.bind(this),\n      createDestinationFromDescriptor: session.createDestinationFromDescriptor.bind(session),\n      createTemporaryDestination:      session.createTemporaryDestination.bind(session),\n      isCapable:                       session.isCapable.bind(session),\n      getCapability:                   session.getCapability.bind(session),\n      getCurrentStateName:             this.getCurrentStateName.bind(this),\n      updateQueueSubscription:         session.updateQueueSubscription.bind(session),\n\n      get sessionIdHex() {\n        return fsm.sessionIdHex;\n      },\n      get canAck() {\n        return session.canAck;\n      },\n    });\n\n    // Keeping track of transport backpressure (but not AD window exhaustion),\n    // so we can relieve it on transport reconnect:\n    this._userBackpressured = false;\n\n    this.clearCurrentError();\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.SessionDisconnected,\n                               context => context.getStateMachine().reset());\n    });\n\n    /**\n     * Handles events in the unhandledEventHandler callback\n     * @param {SessionFSMEvent} sEvent\n     * @private\n     */\n    this.unhandledEventReaction(function onUnhandledEvent(sEvent) {\n      const curState = fsm.getCurrentState();\n      switch (sEvent.getName()) {\n        case SessionEventName.CREATE_SUBSCRIBER:\n          // CREATE_SUBSCRIBER is only handled in CONNECTED state.\n          // In all other states we just add the consumer to our\n          // list of unbound consumers that need to be bound when\n          // the session up occurs.\n          assert(fsm._consumers, 'collection has lifetime of FSM instance');\n          fsm._consumers.add(sEvent.guaranteedFlowObject);\n          return this;\n        case SessionEventName.DISPOSE:\n          LOG_DEBUG('Handling DISPOSE');\n          return curState.terminate(() => fsm.disposeInternal());\n        case SessionEventName.FLOW_UP:\n          LOG_DEBUG(`Ignoring FLOW_UP event from ${sEvent.guaranteedFlowObject}`);\n          return this;\n        default:\n          LOG_TRACE(`Ignoring event ${sEvent.getName()} in state ${fsm.getCurrentStateName()}`);\n          return this;\n      }\n    });\n\n    this.SessionConnecting = new State({\n      name:          SessionStateName.CONNECTING,\n      parentContext: fsm,\n    }, {\n      //\n      //  handleTransportDestroyed is called in response to TRANSPORT_DESTROYED\n      //  event and if transport create throws an exception. In both case there is\n      //  no underlying transport and the FSM must move on to the next host.\n      handleTransportDestroyed() {\n        fsm._currentHost = fsm._hosts.getNextHost();\n        if (fsm._currentHost === null) {\n          return this.transitionToExitPoint(fsm.SessionConnecting, 'ErrorExit');\n        }\n\n        const { connectWaitTimeInMsecs } = fsm._hosts;\n        LOG_TRACE(`Wait time for this host is ${connectWaitTimeInMsecs}`);\n        if (connectWaitTimeInMsecs > 0 && !fsm._connectWaitTimer) {\n          fsm._connectWaitTimer = setTimeout(() => {\n            fsm._connectWaitTimer = null;\n            fsm.processEvent(new SessionFSMEvent({ name: SessionEventName.CONNECT_WAIT_TIMEOUT }));\n          }, connectWaitTimeInMsecs);\n          return this.transitionTo(fsm.WaitingForInterConnectTimeout);\n        }\n        return this.transitionTo(fsm.WaitingForTransport);\n      },\n    })\n      .entry(() => {\n        fsm.setConnectTimer();\n      })\n      .entryPoint('DisconnectTransport', function onDisconnectTransport() {\n        fsm._hosts.reset({ wasConnected: undefined, disconnected: true });\n        //\n        // Set the error event, as we have reset the\n        // host list with disconnected:true, we always take the\n        // errorExit path to DISCONNECTED state after this entryPoint.\n        //\n        fsm._connectFailEvent = SessionEventCode.DISCONNECTED;\n        fsm._connectSuccessEvent = SessionEventCode.DISCONNECTED;\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .entryPoint('ReconnectTransport', function onReconnectTransport() {\n        //\n        // Set the error event, this is only used\n        // if we take the errorExit path\n        //\n        fsm._connectFailEvent = SessionEventCode.DOWN_ERROR;\n        fsm._connectSuccessEvent = SessionEventCode.RECONNECTED_NOTICE;\n        // Should we try to reconnect?\n        const disconnected = fsm._sessionProperties._reconnectRetries === 0;\n        fsm._hosts.reset({ wasConnected: true, disconnected });\n        if (!disconnected) {\n          // workaround to make sure session state is changed to connecting when\n          // application gets the session event\n          // positional parameters for SessionEvent constructor\n          // make sure we get the args and err setup now as by the time\n          // the postEventAction runs currentError will be reset.\n          const err = fsm._currentError || {};\n          const args = [err.eventText,    // infoString\n            err.responseCode,             // responseCode\n            err.errorSubcode,             // errorSubcode\n            undefined,                    // correlationKey ... N/A\n            err.eventReason];             // eventReason\n          fsm.setPostEventAction(() => {\n            fsm.setConnectTimer();\n            fsm.emitSessionEvent(SessionEvent.build(SessionEventCode.RECONNECTING_NOTICE, ...args));\n          });\n        }\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .initial(() => {\n        fsm.clearCurrentError();\n        //\n        // Set the error event this is only used\n        // if we take the errorExit path\n        //\n        fsm._connectFailEvent = SessionEventCode.CONNECT_FAILED_ERROR;\n        fsm._connectSuccessEvent = SessionEventCode.UP_NOTICE;\n\n        // Perform host resolution (guaranteed async; replaces a postEventAction)\n        // Do not perform host list operations until this completes (moved to callback)\n        fsm._hosts.resolveHosts((err) => {\n          if (!fsm._hosts) {\n            LOG_TRACE('Ignoring host filter fail because session was disposed');\n            return null;\n          }\n          if (err) {\n            LOG_TRACE('DNS filter failed:', err);\n            fsm.setCurrentError({\n              errorSubcode: ErrorSubcode.UNRESOLVED_HOSTS,\n              eventText:    err,\n            });\n            fsm._hosts.reset({ disconnected: true });\n            return this.processEvent(new SessionFSMEvent({ name: SessionEventName.EXCEPTION }));\n          }\n\n          // Now that the host list has been scanned, we can reset and get next host\n          fsm._hosts.reset({ wasConnected: false });\n          fsm._currentHost = fsm._hosts.getNextHost();\n          return this.processEvent(new SessionFSMEvent(\n            { name: SessionEventName.DNS_RESOLUTION_COMPLETE }\n          ));\n        });\n        return this.transitionTo(fsm.WaitingForDNS);\n      })\n      .reaction(SessionEventName.DNS_RESOLUTION_COMPLETE, function onDNSComplete() {\n        return this.transitionTo(fsm.WaitingForTransport);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* event */) {\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      })\n      .reaction(SessionEventName.CONNECT_TIMEOUT, function onConnectTimeout(/* event */) {\n        fsm.setCurrentError({\n          errorSubcode: ErrorSubcode.TIMEOUT,\n          eventText:    'Connect timeout',\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.SEND_ERROR, function onSendError(sessionEvent) {\n        LOG_INFO(`SEND_ERROR reached SessionConnecting. ${sessionEvent}`);\n        fsm.setCurrentError(sessionEvent);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(errEvent) {\n        fsm.setCurrentError(errEvent);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sessionEvent) {\n        fsm.setCurrentError(sessionEvent);\n        LOG_INFO('TRANSPORT_DESTROYED event');\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .exit(() => {\n        fsm.clearConnectTimer();\n        if (fsm._connectWaitTimer) {\n          clearTimeout(fsm._connectWaitTimer);\n          fsm._connectWaitTimer = null;\n        }\n      })\n      .exitPoint('ConnectedExit', (/* event */) => {\n        // Normal exit to TransportUp.\n        // We need to notify the application they are connected. Use postEventAction to make sure\n        // session state has already changed to TransportUp when application gets the callback.\n        // Use _connectSuccessEvent to send RECONNECTED vs UP depending on entry point.\n        // The text included in the event is currently different for\n        // connect vs reconnect. We should store with as part of _connectSuccessEvent in\n        // the entry point.\n        fsm.setPostEventAction(() => {\n          fsm.emitSessionEvent(SessionEvent.build(fsm._connectSuccessEvent,\n                                                  `'${fsm._hosts.currentHostToString()}'`,\n                                                  200, 0, null, null));\n          if (fsm._userBackpressured) {\n            const sessionEvent = SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                                                    '', null, 0, null, '');\n            fsm.emitSessionEvent(sessionEvent);\n            fsm._userBackpressured = false;\n          }\n        });\n        // Clear current error as we have successfully connected or\n        // reconnected.\n        fsm.clearCurrentError();\n        return this.transitionTo(fsm.SessionTransportUp);\n      })\n      .exitPoint('ErrorExit', function onExit(/* event */) {\n        // Notify the application they are disconnected. Use postEventAction to make sure session\n        // state has already changed to disconnected when application gets the callback.\n        fsm.setPostEventAction(() => {\n          const err = fsm._currentError || {};\n          // positional parameters for SessionEvent constructor\n          const args = [err.eventText,    // infoString\n            err.responseCode,             // responseCode\n            err.errorSubcode,             // errorSubcode\n            undefined,                    // correlationKey ... N/A\n            err.eventReason];             // eventReason\n          fsm.emitSessionEvent(SessionEvent.build(fsm._connectFailEvent, ...args));\n        });\n        return this.transitionTo(fsm.SessionDisconnected);\n      });\n\n    this.WaitingForDNS = new State({\n      name:          SessionStateName.WAITING_FOR_DNS,\n      parentContext: fsm.SessionConnecting,\n    });\n\n    this.DestroyingTransport = new State({\n      name:          SessionStateName.DESTROYING_TRANSPORT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        LOG_INFO('Connecting, disposing transport');\n        fsm.destroyTransportSession('Disconnecting session', 0);\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sessionEvent) {\n        fsm.setCurrentError(sessionEvent);\n        return fsm.SessionConnecting.handleTransportDestroyed.call(this);\n      });\n\n    this.WaitingForInterConnectTimeout = new State({\n      name:          SessionStateName.WAITING_FOR_INTERCONNECT_TIMEOUT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .reaction(SessionEventName.CONNECT_WAIT_TIMEOUT, function onConnectWaitTimeout(/*event*/) {\n        return this.transitionTo(fsm.WaitingForTransport);\n      });\n\n    this.WaitingForTransport = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .initial(() => {\n        const errorMessage = 'Cannot establish transport session: creation failed';\n        fsm.setConnectTimer();\n        fsm.clearCurrentError();\n        try {\n          fsm.initTransport();\n        } catch (e) {\n          this.setCurrentError({\n            eventText:    e.message === errorMessage ? errorMessage : `${errorMessage}: ${e.message}`,\n            errorSubcode: e.subcode || ErrorSubcode.INTERNAL_ERROR,\n            eventReason:  e });\n          return fsm.SessionConnecting.handleTransportDestroyed.call(this);\n        }\n        return this.transitionTo(fsm.WaitingForTransportUp);\n      });\n\n    this.WaitingForTransportUp = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT_UP,\n      parentContext: this.WaitingForTransport,\n    })\n      // This way the code is run only on actual state entry,\n      // not on null transitions (staying in this state)\n      .entry(() => { this._justEntered = true; })\n      .initial(() => {\n        if (!this._justEntered) { return this; }\n        this._justEntered = false;\n        const errorMessage = 'Cannot establish transport session: connection failed';\n        try {\n          const returnCode = fsm._transport.connect();\n          if (returnCode !== TransportLib.TransportReturnCode.OK) {\n            throw new OperationError(\n              errorMessage,\n              ErrorSubcode.CONNECTION_ERROR,\n              TransportLib.TransportReturnCode.describe(returnCode)\n            );\n          }\n          LOG_INFO(`Attempting to connect session '${fsm.sessionId}' to ${fsm._hosts.currentHostToString()}`);\n        } catch (e) {\n          this.setCurrentError({\n            eventText:    e.message === errorMessage ? errorMessage : `${errorMessage}: ${e.message}`,\n            errorSubcode: e.subcode || ErrorSubcode.INTERNAL_ERROR,\n            eventReason:  e });\n          return fsm.SessionConnecting.handleTransportDestroyed.call(this);\n        }\n        return this;\n      })\n      .reaction(SessionEventName.SEND_ERROR, function doNothing(sEvent) {\n        LOG_INFO(`SEND_ERROR while waiting for transport up, doing nothing. ${sEvent}`);\n        return this.internalTransition(null);\n      }\n      )\n      .reaction(SessionEventName.TRANSPORT_UP, function onTransportUp(sEvent) {\n        fsm.sessionId = sEvent.sessionId || '';\n        const returnCode = fsm.sendClientCtrlLogin();\n        if (returnCode === TransportLib.TransportReturnCode.OK) {\n          return this.transitionTo(fsm.WaitingForLogin);\n        }\n        const err = {\n          eventText:    'Failed to send Client Control Login',\n          errorSubcode: ErrorSubcode.LOGIN_FAILURE,\n          responseCode: 400,\n        };\n        fsm.setCurrentError(err);\n        return this.transitionTo(fsm.DestroyingTransport);\n      });\n\n    this.WaitingForLogin = new State({\n      name:          SessionStateName.WAITING_FOR_LOGIN,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        fsm.setClientCtrlTimer();\n      })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_CLIENTCTRL, function onClientCtrl(sEvent) {\n        const clientCtrlMsg = sEvent.smfMsg;\n        const response = clientCtrlMsg.getResponse();\n        const respCode = response.responseCode;\n        const err = {\n          responseCode: respCode,\n        };\n        fsm._responseCode = respCode;\n        if (respCode === 200) {\n          if (!fsm.checkNoLocal(clientCtrlMsg)) {\n            Object.assign(err, {\n              eventText:    'No Local is not supported by the Solace Message Router',\n              errorSubcode: ErrorSubcode.NO_LOCAL_NOT_SUPPORTED,\n            });\n          } else if (!fsm.checkCompressedSsl(clientCtrlMsg)) {\n            Object.assign(err, {\n              eventText:    'Compressed TLS is not supported by the Solace Message Router',\n              errorSubcode: ErrorSubcode.COMPRESSED_TLS_NOT_SUPPORTED,\n            });\n          } else { // Happy path\n            fsm.updateReadonlySessionProps(clientCtrlMsg);\n            return this.transitionTo(fsm.WaitForTransportChange);\n          }\n        } else {\n          const rawSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode,\n                                                                        response.responseString);\n          const subcode = (rawSubcode === ErrorSubcode.UNKNOWN_ERROR) ?\n            ErrorSubcode.LOGIN_FAILURE : rawSubcode;\n          LOG_INFO(`Login failed. Subcode: ${subcode} respCode: ${respCode} ` +\n            `respString: ${response.responseString}`);\n          Object.assign(err, {\n            eventText:    response.responseString,\n            errorSubcode: subcode,\n          });\n        }\n        LOG_TRACE('ClientCtrl error', err);\n        fsm.setCurrentError(err);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.DOWNGRADE_TIMEOUT, function onDowngradeTimeout(/* event */) {\n        if (!fsm._transport.requestDowngrade || fsm._transport.requestDowngrade('ClientCtrl timeout', ErrorSubcode.TIMEOUT) === false) {\n          fsm.setCurrentError({\n            eventText:    'ClientCtrl timeout',\n            errorSubcode: ErrorSubcode.TIMEOUT,\n          });\n          return this.transitionTo(fsm.DestroyingTransport);\n        }\n        // Don't recreate the transport, just try to connect it\n        LOG_TRACE('Downgrade accepted, returning to WaitingForTransportUp');\n        return this.transitionTo(fsm.WaitingForTransportUp);\n      })\n      .exit(() => {\n        fsm.clearClientCtrlTimer();\n      });\n\n    // This is an intermediate state after a successful login.\n    // It gives time to the transport factory (more like a dealership at this point)\n    // to enable compression and/or shut down tls.\n    // The factory may return a new transport immediately,\n    // in which case there is no need to stay in this state.\n    // Or it may return null, and pass the new transport to the callback later.\n    // No messages can be sent while waiting for the callback.\n    this.WaitForTransportChange = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT_CHANGE,\n      parentContext: fsm.SessionConnecting,\n    })\n      .initial(function onInitial() {\n        // Operates on the FSM, must be bound to it.\n        const callback = function onTransportChange(newTransport) {\n          this._transport = newTransport;\n          this.processEvent(new SessionFSMEvent(\n                            { name: SessionEventName.TRANSPORT_CHANGE_DONE }\n          ));\n        };\n        const rc = fsm.updateTransportCompression(callback.bind(fsm));\n        if (rc === null) {\n          // Factory needs time, stay in this state.\n          return this;\n        }\n        fsm._transport = rc;\n        return this.transitionTo(fsm.ReapplyingSubscriptions);\n      })\n      .reaction(SessionEventName.TRANSPORT_CHANGE_DONE, function onTransportChangeDone() {\n        return this.transitionTo(fsm.ReapplyingSubscriptions);\n      });\n\n    this.ReapplyingSubscriptions = new State({\n      name:          SessionStateName.REAPPLYING_SUBSCRIPTIONS,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        LOG_INFO('ReapplyingSubscriptions: entry');\n        fsm.copySubscriptionCacheKeys();\n      })\n      .initial(function onInitial() {\n        if (fsm.reapplySubscriptions() === true) {\n          // all subscriptions applied and waiting for a subscription confirm\n          return this.transitionTo(fsm.WaitForSubConfirm);\n        }\n        // flow controlled while reapplying\n        return this.transitionTo(fsm.WaitForCanAcceptData);\n      })\n      .reaction(SessionEventName.SUBSCRIBE_TIMEOUT, function onSubscribeTimeout() {\n        const respText = 'Subscription timeout while reapplying';\n        const subcode = ErrorSubcode.TIMEOUT;\n        fsm.setCurrentError({\n          eventText:    respText,\n          errorSubcode: subcode,\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .exit(function onExit() {\n        fsm.clearSubscriptionCacheKeys();\n        return this;\n      });\n\n    this.WaitForSubConfirm = new State({\n      name:          SessionStateName.WAITING_FOR_SUBCONFIRM,\n      parentContext: fsm.ReapplyingSubscriptions,\n    })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        // process rxMsgObj\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n        if (respCode !== 200) {\n          const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n          LOG_INFO(`Waiting for subscription confirmation, got ${respCode} (${errorSubcode}) ` +\n                    `'${respText}' on subscription ${subscriptionStr}`);\n          fsm.setCurrentError({\n            eventText:    respText,\n            responseCode: respCode,\n            errorSubcode,\n          });\n          return this.transitionTo(fsm.DestroyTransport);\n        }\n\n        if (fsm._session.canConnectPublisher &&\n            fsm._defaultPublisher &&\n            fsm._defaultPublisher.isBindWaiting()) {\n          return this.transitionTo(fsm.WaitingForMessagePublisher);\n        }\n        return this.transitionToExitPoint(fsm.SessionConnecting, 'ConnectedExit');\n      });\n\n    this.WaitForCanAcceptData = new State({\n      name:          SessionStateName.WAITING_FOR_CAN_ACCEPT_DATA,\n      parentContext: fsm.ReapplyingSubscriptions,\n    })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        // process rxMsgObj\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n        // We are not expecting a SMP response as we have not sent a request-confirm\n        // so this is almost assuredly an error response to a subscription add\n        // check respCode anyway.  if its '200 OK' just ignore it.\n        if (respCode !== 200) {\n          const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n          LOG_DEBUG(`Waiting for can accept data, got ${respCode} (subcode ${errorSubcode}) ` +\n            `'${respText}' on subscription ${subscriptionStr}`);\n          fsm.setCurrentError({\n            eventText:    respText,\n            responseCode: respCode,\n            errorSubcode,\n          });\n          return this.transitionTo(fsm.DestroyingTransport);\n        }\n        // unexpected 200 OK repsonse, log it and continue\n        LOG_INFO(`Unexpected 200 OK response to subscription add for ${subscriptionStr}`);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_CAN_ACCEPT_DATA, function onTransportCanAcceptData() {\n        if (fsm.reapplySubscriptions() === true) {\n          // all subscriptions applied and waiting for a subscription confirm\n          return this.transitionTo(fsm.WaitForSubConfirm);\n        }\n        // flow controlled while reapplying\n        return this.internalTransition(null);\n      });\n\n    this.WaitingForMessagePublisher = new State({\n      name:          SessionStateName.WAITING_FOR_PUBFLOW,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        // Inform the publisher that the session is up and the flow establishment can begin.\n        fsm._defaultPublisher.connect();\n        fsm.sendPublisherSessionUpEvent(fsm._defaultPublisher);\n      })\n      .reaction(SessionEventName.FLOW_UP, function onEvent() {\n        LOG_TRACE(`Flow up ${this}`);\n        if (!fsm._defaultPublisher.isBindWaiting()) {\n          LOG_TRACE('Publisher up');\n          return this.transitionToExitPoint(fsm.SessionConnecting, 'ConnectedExit');\n        }\n        LOG_TRACE('Waiting for more publishers');\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.FLOW_FAILED, function onEvent(sEvent) {\n        fsm.setCurrentError({\n          eventText:    `Guaranteed Message Publisher Failed: ${sEvent.eventText}`,\n          errorSubcode: ErrorSubcode.LOGIN_FAILURE,\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      });\n\n    this.SessionTransportUp = new State({\n      name:          SessionStateName.TRANSPORT_UP,\n      parentContext: fsm,\n    })\n      .entry(function onEntry() {\n        return this;\n      })\n      .initial(function onInitial() {\n        if (fsm._session.canConnectConsumer) {\n          // Inform the subscribers that the session is up and the flow establishment can begin.\n          fsm._consumers.flows.forEach(consumer => fsm.sendConsumerSessionUpEvent(consumer));\n          // Reconnecting flows need session state notification too.\n          fsm._consumers.reconnectingFlows.forEach(\n            consumer => fsm.sendConsumerSessionUpEvent(consumer));\n        }\n        return this.transitionTo(fsm.FullyConnected);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        return this.transitionTo(fsm.SessionDisconnecting);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(sEvent) {\n        fsm.setCurrentError(sEvent);\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.SEND_ERROR, function onSendError(sEvent) {\n        fsm.setCurrentError(sEvent);\n        fsm.cleanupSession();\n        LOG_TRACE('Reconnecting transport after SEND_ERROR (not fully connected)');\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sEvent) {\n        fsm.setCurrentError(sEvent);\n        LOG_INFO('Received unsolicited TRANSPORT_DESTROYED event while transport is up');\n        LOG_TRACE(`TRANSPORT_DESTROYED details: ${sEvent}`);\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n\n        fsm.handleSubscriptionUpdateError(respCode, respText, subscriptionStr, undefined, false);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_CAN_ACCEPT_DATA, function onCanAcceptData(sEvent) {\n        // Notify client for republishing\n        const sessionEvent = SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                                                '', null, 0, null, sEvent.toString());\n        fsm.emitSessionEvent(sessionEvent);\n        fsm._userBackpressured = false;\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.CREATE_SUBSCRIBER, function onCreateSubscriber(sEvent) {\n        // Inform the consumer that the session is up and the flow establishment can begin.\n        const consumer = fsm._consumers.add(sEvent.guaranteedFlowObject);\n        fsm.sendConsumerSessionUpEvent(consumer);\n        return this;\n      })\n      .exit(function onExit() {\n        fsm.clearKeepAlive();\n        return this;\n      });\n\n    this.FullyConnected = new State({\n      name:          SessionStateName.FULLY_CONNECTED,\n      parentContext: fsm.SessionTransportUp,\n    })\n      .entry(() => {\n        fsm._connectFailEvent = SessionEventCode.DOWN_ERROR;\n        fsm.scheduleKeepAlive();\n      });\n\n    this.SessionDisconnected = new State({\n      name:          SessionStateName.DISCONNECTED,\n      parentContext: fsm,\n    })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        fsm.setPostEventAction(() => {\n          fsm.emitSessionEvent(SessionEvent.build(SessionEventCode.DISCONNECTED));\n        });\n\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.CONNECT, function onConnect(/* sEvent */) {\n        return this.transitionTo(fsm.SessionConnecting);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(/* sEvent */) {\n        // do nothing\n        return this.internalTransition(null);\n      });\n    this.SessionDisconnecting = new State({\n      name:          SessionStateName.DISCONNECTING,\n      parentContext: fsm,\n    })\n      .initial(() => {\n        LOG_INFO(`Disconnecting session ${fsm}`);\n        return this.transitionTo(fsm.DisconnectingFlows);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(errEvent) {\n        //\n        // As we are in disconnecting state we have initiated the\n        // disconnect and need to preserve the error subcode that\n        // we set before destroying the transport. The transport, having\n        // no error, will usually return a subcode of zero here.\n        //\n        // This only changes the eventCode, not the subcode. Other properties\n        // are preserved.\n        //\n        fsm.setCurrentError({ errEvent });\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(/* sEvent */) {\n        LOG_INFO('Received unsolicited TRANSPORT_DESTROYED while disconnecting transport');\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      });\n\n    this.DisconnectingFlows = new State({\n      name:          SessionStateName.DISCONNECTING_FLOWS,\n      parentContext: fsm.SessionDisconnecting,\n    }, {\n      // Get all flows to disconnect. This will need to be called at least once.\n      gatherPendingFlows() {\n        const { MessageConsumerEventName } = ConsumerLib;\n\n        // Don't re-enter synchronously to look for new flows.\n        // Flows disconnect synchronously when they are already disconnected.\n        // If this is the case, they throw; they do not emit an event.\n        // If a consumer flow is up, it will immediately emit a BIND_WAITING event and we\n        // handle that.\n        // Since we know that flow#_disconnectSession neither creates a new flow\n        // nor calls a user callback that could do so, we need not look for new\n        // flows that were created.\n        assert(!this.isGathering);\n        this.isGathering = true;\n\n        const adaptedListenForDestroy = (flow, installfn, downEvents) => {\n          assert(flow, 'Trying to listen to undefined flow');\n          // If we already know about this flow, skip it.\n          if (this.known.has(flow)) return;\n          LOG_TRACE(`Adding pending flow ${flow}`);\n          this.known.add(flow);\n          this.pending.add(flow);\n          const onFlowDown = () => {\n            LOG_TRACE(`Removing flow from pending ${flow}`);\n            downEvents.forEach(event => flow._removeListener(event, onFlowDown));\n            this.pending.delete(flow);\n            if (!this.isGathering) this.checkPendingFlows();\n          };\n          downEvents.forEach(event => installfn.call(flow, event, onFlowDown));\n          try {\n            flow._disconnectSession(); // Session has been disconnected by user\n          } catch (ex) {\n             // Synchronously down\n            LOG_TRACE('Flow disconnect threw');\n            LOG_TRACE(ex);\n            onFlowDown();\n          }\n        };\n\n        // See SOL-13556: sending CloseFlow makes it impossible to recover the flow.\n        // This was the code that sent CloseFlow. I'm leaving it here temporarily\n        // in case we want a clean shutdown that waits for acks.\n        /*\n        const { MessagePublisherEventName } = PublisherLib;\n        if (fsm._defaultPublisher) {\n          adaptedListenForDestroy(fsm._defaultPublisher,\n                                  fsm._defaultPublisher.once,\n                                  [MessagePublisherEventName.DOWN]);\n        }\n        */\n        if (fsm._consumers) {\n          fsm._consumers.flows.forEach((flow) => {\n            adaptedListenForDestroy(flow,\n                                    flow._once,\n                                    [\n                                      MessageConsumerEventName.DOWN,\n                                      MessageConsumerEventName.DOWN_ERROR,\n                                    ]);\n          });\n        }\n\n        this.isGathering = false;\n      },\n      // This function is called whenever a flow comes down, whether sync or async.\n      // The body is wrapped in a basic debounce: if we are re-entering (synchronously),\n      // no new flows will be added.\n      checkPendingFlows() {\n        LOG_TRACE('Waiting for disconnects on', this.pending);\n        if (this.pending.size === 0) {\n          // We are out of pending flows, but look for new flows that were just added\n          this.gatherPendingFlows();\n          // Were any flows just added?\n          if (this.pending.size === 0) {\n            this.proceed();\n          }\n        }\n      },\n      proceed() {\n        // All done!\n        // Clear flow sets so they can be disposed\n        this.known = null;\n        this.pending = null;\n        LOG_INFO('All flows disconnected');\n        fsm.processEvent(new FsmEvent({ name: SessionEventName.FLOWS_DISCONNECTED }));\n      },\n    })\n      .entry(function onEntry() {\n        this.known = new Set();\n        this.pending = new Set();\n        this.checkPendingFlows();\n      })\n      .reaction(SessionEventName.FLOWS_DISCONNECTED, function onFlowsDisconnected() {\n        return this.transitionTo(fsm.FlushingTransport);\n      });\n\n    this.FlushingTransport = new State({\n      name:          SessionStateName.FLUSHING_TRANSPORT,\n      parentContext: fsm.SessionDisconnecting,\n    }, {\n      flushTransport() {\n        fsm.cleanupSession();\n        fsm.flushTransportSession(() => this.onTransportFlushed());\n        this.sessionId = null;\n      },\n      onTransportFlushed() {\n        fsm.processEvent(new FsmEvent({ name: SessionEventName.TRANSPORT_FLUSHED }));\n      },\n    })\n      .entry(function onEntry() {\n        LOG_INFO('Flushing transport');\n        this.flushTransport();\n      })\n      .reaction(SessionEventName.TRANSPORT_FLUSHED, function onTransportFlushed() {\n        LOG_INFO('Handle Transport Flushed');\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      });\n  }\n\n  /**\n   * @param {Destination} destination The topic to add\n   * @private\n   */\n  addToSubscriptionCache(destination) {\n    if (Check.nothing(destination) || !this._subscriptionCache) {\n      return;\n    }\n\n    const { LOG_DEBUG } = this.logger;\n    const key = destination.name;\n    if (this._subscriptionCache[key] === null ||\n        this._subscriptionCache[key] === undefined) {\n      LOG_DEBUG(`Cache subscription ${key}`);\n      this._subscriptionCache[key] = destination;\n      LOG_DEBUG('Increment cache count');\n      this._subscriptionCacheCount++;\n    } else {\n      LOG_DEBUG(`Cache subscription ${key}`);\n      this._subscriptionCache[key] = destination;\n    }\n  }\n\n  /**\n   * @param {String} correlationTag The tag of the request to cancel\n   * @returns {CorrelatedRequest} The cancelled request\n   * @private\n   */\n  cancelOutstandingCorrelatedReq(correlationTag) {\n    if (Check.nothing(correlationTag) || !this._correlatedReqs) {\n      return null;\n    }\n    const req = this._correlatedReqs[correlationTag];\n    if (req === null || req === undefined) {\n      return null;\n    }\n\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    LOG_DEBUG(`Cancel outstanding ctrl request correlationTag=${correlationTag\n      }`);\n    if (req.timer) {\n      clearTimeout(req.timer);\n      req.timer = null;\n    }\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`, e);\n    }\n    return req;\n  }\n\n\n  /**\n   * @private\n   */\n  cleanupSession() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Clean up session');\n\n    const {\n      ConsumerFSMEvent,\n      ConsumerFSMEventNames,\n    } = ConsumerLib;\n\n    if (this._correlatedReqs) {\n      Object.keys(this._correlatedReqs).forEach(key =>\n        this.cancelOutstandingCorrelatedReq(key));\n    }\n\n    this.clearConnectTimer();\n    this.clearClientCtrlTimer();\n    this.clearKeepAlive();\n    this._consumers.flows.forEach((consumer) => {\n      consumer.processFSMEvent(\n        new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DOWN })\n      );\n    });\n    // Reconnecting flows need session state notification too.\n    this._consumers.reconnectingFlows.forEach((consumer) => {\n      consumer.processFSMEvent(\n        new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DOWN })\n      );\n    });\n    if (this._defaultPublisher) {\n      this._defaultPublisher.processFSMEvent(\n        new PublisherLib.PublisherFSMEvent({\n          name: PublisherLib.PublisherFSMEventNames.SESSION_DOWN,\n        })\n      );\n    }\n    this._session.cleanupSession();\n  }\n\n  /**\n   * @private\n   */\n  clearClientCtrlTimer() {\n    if (!this._clientCtrlTimer) {\n      return;\n    }\n\n    clearTimeout(this._clientCtrlTimer);\n    this._clientCtrlTimer = null;\n  }\n\n\n  /**\n   * @private\n   */\n  clearConnectTimer() {\n    if (!this._connectTimer) {\n      return;\n    }\n\n    clearTimeout(this._connectTimer);\n    this._connectTimer = undefined;\n  }\n\n  /**\n   * Cancel keep alive task\n   * @private\n   */\n  clearKeepAlive() {\n    const { LOG_INFO } = this.logger;\n\n    if (this._keepAliveTimer) {\n      LOG_INFO('Cancel keepalive timer');\n      clearInterval(this._keepAliveTimer);\n      this._keepAliveTimer = null;\n    }\n\n    this.resetKeepAliveCounter();\n  }\n\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to parse\n   * @returns {Boolean} true if No Local is supported by the router\n   * @private\n   */\n  checkNoLocal(clientCtrlMsg) {\n    let noLocalSupported = true;\n    if (this._sessionProperties.noLocal === true) {\n      const caps = clientCtrlMsg.getRouterCapabilities();\n      if (!caps) {\n        noLocalSupported = false;\n      } else {\n        // Guard for undefined OR non-boolean capability\n        noLocalSupported = (typeof caps[CapabilityType.NO_LOCAL] === 'boolean') ? caps[CapabilityType.NO_LOCAL] : false;\n      }\n    }\n    return noLocalSupported;\n  }\n\n  /**\n   * Check against an odd router version which OKs logins with TLS downgrade to compression,\n   * but does not actually support it, and just downgrades to plain text instead.\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to parse\n   * @returns {Boolean} false if router should have rejected login for unsupported compressed TLS.\n   * @private\n   */\n  checkCompressedSsl(clientCtrlMsg) {\n    const { LOG_TRACE } = this.logger;\n    if (this._compressedTLS) {\n      const caps = clientCtrlMsg.getRouterCapabilities();\n      if (!caps || typeof caps[CapabilityType.COMPRESSED_SSL] !== 'boolean') {\n        LOG_TRACE('Compressed SSL capability missing.');\n        return false;\n      }\n      return caps[CapabilityType.COMPRESSED_SSL] === true;\n    }\n    return true;\n  }\n\n  /**\n   * Check destination against router capablilities\n   * @param {Destination} destination to verify\n   * @returns {?solace.OperationError} error for caller to throw otherwise null\n   * @private\n   */\n  checkSessionDestinationCapability(destination) {\n    let error = null;\n    if (destination && destination.getType()) {\n      if (destination.getSubscriptionInfo()\n          && (destination.getSubscriptionInfo().isShare\n              || destination.getSubscriptionInfo().isNoExport)\n          && !this._session.isCapable(CapabilityType.SHARED_SUBSCRIPTIONS)) {\n        error = new OperationError(\n          'Shared subscriptions are not allowed by router for this client',\n          ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED,\n          null);\n      }\n    }\n    return error;\n  }\n\n  /**\n   * Clears the current error exit information for the FSM.\n   */\n  clearCurrentError() {\n    this._currentError = null;\n  }\n\n  /**\n   * @private\n   */\n  clearSubscriptionCacheKeys() {\n    this._subscriptionCacheKeys = null;\n  }\n\n  /**\n   * @private\n   */\n  copySubscriptionCacheKeys() {\n    // reapply subscriptions if applicable\n    this.clearSubscriptionCacheKeys();\n    this._subscriptionCacheKeys = Object.keys(this._subscriptionCache || {});\n\n    // Add the P2P Inbox subscription, so the subscriptionCache always has\n    // at least one subscription.\n    const p2pTopic = P2PUtil.getP2PTopicSubscription(this._sessionProperties.p2pInboxBase);\n    this._subscriptionCacheKeys.push(p2pTopic);\n  }\n\n  createMessagePublisher() {\n    const { LOG_DEBUG } = this.logger;\n    if (!this._sessionProperties.publisherProperties.enabled) {\n      LOG_DEBUG('Publisher is disabled');\n      return;\n    }\n\n    const {\n      MessagePublisher,\n      MessagePublisherEventName,\n    } = PublisherLib;\n    const publisher = new MessagePublisher({\n      properties:              this._sessionProperties.publisherProperties,\n      sessionInterfaceFactory: this._flowInterfaceFactory,\n    });\n    publisher.on(\n      MessagePublisherEventName.UP,\n      () => this.processEvent(new SessionFSMEvent(\n        { name: SessionEventName.FLOW_UP },\n        { guaranteedFlowObject: publisher })));\n    publisher.on(\n      MessagePublisherEventName.CONNECT_FAILED_ERROR,\n      event => this.processEvent(\n        new SessionFSMEvent(\n          { name: SessionEventName.FLOW_FAILED },\n          {\n            guaranteedFlowObject: publisher,\n            event,\n            eventText:            event.description,\n          })));\n\n    publisher.on(MessagePublisherEventName.REJECTED_MESSAGE, (message, ctrlMessage) => {\n      const header = ctrlMessage.smfHeader;\n      const respCode = header.pm_respcode;\n      const respText = header.pm_respstr;\n      const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(respCode, respText);\n      const event = SessionEvent.build(SessionEventCode.REJECTED_MESSAGE_ERROR,\n                                       respText,\n                                       respCode,\n                                       errorSubcode,\n                                       message.getCorrelationKey());\n      event['message'] = message; // eslint-disable-line dot-notation\n      this.emitSessionEvent(event);\n    });\n    publisher.on(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, (message) => {\n      const event = SessionEvent.build(SessionEventCode.ACKNOWLEDGED_MESSAGE,\n                                       'Message(s) acknowledged',\n                                       undefined,\n                                       0,\n                                       message.getCorrelationKey());\n      event['message'] = message; // eslint-disable-line dot-notation\n      this.emitSessionEvent(event);\n    });\n    publisher.on(MessagePublisherEventName.FLOW_NAME_CHANGED, (data) => {\n      const { messages, count } = data;\n      if (count > 0) {\n        const event = SessionEvent.build(SessionEventCode.REPUBLISHING_UNACKED_MESSAGES,\n                                         `Republishing ${count} messages due to ` +\n          'Guaranteed Message Publisher failed to reconnect');\n        event['messages'] = messages; // eslint-disable-line dot-notation\n        event['count'] = count; // eslint-disable-line dot-notation\n        this.emitSessionEvent(event);\n      }\n    });\n    publisher.on(MessagePublisherEventName.CAN_SEND, () => {\n      this.emitSessionEvent(\n        SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                           `${publisher} window is now open and can send`));\n    });\n    publisher.on(MessagePublisherEventName.GUARANTEED_MESSAGING_DOWN, () => {\n      this.emitSessionEvent(\n        SessionEvent.build(\n          SessionEventCode.GUARANTEED_MESSAGE_PUBLISHER_DOWN,\n          'Guaranteed Message Publishing shut down'));\n    });\n    this._defaultPublisher = publisher;\n  }\n\n  sendConsumerSessionUpEvent(consumer) {\n    const {\n      ConsumerFSMEvent,\n      ConsumerFSMEventNames,\n    } = ConsumerLib;\n    const isAD = this._session.canConnectConsumer;\n    const event = new ConsumerFSMEvent({\n      name: isAD\n        ? ConsumerFSMEventNames.SESSION_UP\n        : ConsumerFSMEventNames.SESSION_UP_NO_AD,\n    });\n    event.guaranteedFlowObject = consumer;\n    consumer.processFSMEvent(event);\n  }\n\n  sendPublisherSessionUpEvent(publisher) {\n    const isAD = this._session.canConnectPublisher;\n    const event = new PublisherLib.PublisherFSMEvent({\n      name: isAD\n        ? PublisherLib.PublisherFSMEventNames.SESSION_UP\n        : PublisherLib.PublisherFSMEventNames.SESSION_UP_NO_AD,\n    });\n    event.guaranteedFlowObject = publisher;\n    publisher.processFSMEvent(event);\n  }\n\n  /**\n   * Creates a Guaranteed Messaging Subscriber.\n   *\n   * @param {Object|MessageConsumerProperties} properties Properties for the flow.\n   *  Expected fields: {@link solace.MessageConsumerProperties}\n   * @returns {solace.MessageConsumer} The newly constructed consumer\n   * @private\n   */\n  createMessageConsumer(properties) {\n    const { MessageConsumer } = ConsumerLib;\n    const consumer = new MessageConsumer({\n      properties,\n      sessionInterfaceFactory: this._flowInterfaceFactory,\n    });\n    // use the conusmer properties instead of properties to ensure the topicEndpointSubscription\n    // has a Topic object\n    const conusmerProperties = consumer.getProperties();\n    if (conusmerProperties.topicEndpointSubscription) {\n      //check topic supported\n      const error =\n          this.checkSessionDestinationCapability(conusmerProperties.topicEndpointSubscription);\n      if (error) {\n        throw error;\n      }\n    }\n    const info = { guaranteedFlowObject: consumer };\n    // Will be added to the guaranteed flow collection by dispatching\n    this.processEvent(\n      new SessionFSMEvent({ name: SessionEventName.CREATE_SUBSCRIBER }, info)\n    );\n    return consumer;\n  }\n\n/**\n   * Creates a Queue Browser.\n   *\n   * @param {Object|QueueBrowserProperties} properties Properties for the queue browser.\n   *  Expected fields: {@link solace.QueueBrowserProperties}\n   * @returns {solace.QueueBrowser} The newly constructed queue browser\n   * @private\n   */\n  createQueueBrowser(properties) {\n    const { MessageConsumerAcknowledgeMode, QueueBrowser } = ConsumerLib;\n    const { LOG_DEBUG } = this.logger;\n\n    LOG_DEBUG(`Creating queue browser with properties:  ${properties}`);\n\n    const consumerProperties = {};\n    consumerProperties.queueDescriptor = properties.queueDescriptor;\n    consumerProperties.acknowledgeMode = MessageConsumerAcknowledgeMode.CLIENT;\n    consumerProperties.browser = true;\n\n    // Optional properties\n    if (Object.prototype.hasOwnProperty.call(properties, 'connectTimeoutInMsecs')) {\n      consumerProperties.connectTimeoutInMsecs = properties.connectTimeoutInMsecs;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'connectAttempts')) {\n      consumerProperties.connectAttempts = properties.connectAttempts;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'windowSize')) {\n      consumerProperties.windowSize = properties.windowSize;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'transportAcknowledgeTimeoutInMsecs')) {\n      consumerProperties.transportAcknowledgeTimeoutInMsecs =\n        properties.transportAcknowledgeTimeoutInMsecs;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'transportAcknowledgeThresholdPercentage')) {\n      consumerProperties.transportAcknowledgeThresholdPercentage =\n        properties.transportAcknowledgeThresholdPercentage;\n    }\n\n    const consumer = this.createMessageConsumer(consumerProperties);\n    const browser = new QueueBrowser(consumer);\n    return browser;\n  }\n\n  /**\n   * @param {String} msg The status message for the operation\n   * @param {Subcode} subcode The subcode reason for the operation\n   * @private\n   */\n  destroyTransportSession(msg, subcode) {\n    if (Check.nothing(this._transport)) {\n      // Just send the event\n      this.processEvent(\n        new SessionFSMEvent({ name: SessionEventName.TRANSPORT_DESTROYED })\n      );\n      return;\n    }\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    LOG_INFO('Destroy transport session');\n\n    const returnCode = this._transport.destroy(msg, subcode);\n    this._smfClient = null;\n\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      LOG_ERROR(`Failed to destroy transport session, return code: ${\n        TransportLib.TransportReturnCode.describe(returnCode)}`);\n    }\n  }\n\n\n  /**\n   * Release all resources associated with the session.\n   * @private\n   */\n  disposeInternal() {\n    if (this._disposed) {\n      return;\n    }\n\n    const operations = {\n      'transport': () => {\n        this.destroyTransportSession('Disposing', 0);\n        this._transport = null;\n        this._smfClient = null;\n      },\n      'session': () => {\n        this.cleanupSession();\n        this._session = null;\n        this._sessionProperties = null;\n        this._correlatedReqs = null;\n        this._flowInterfaceFactory = null;\n      },\n      'statistics': () => {\n        if (this._sessionStatistics) {\n          this._sessionStatistics.resetStats();\n          this._sessionStatistics = null;\n        }\n        this._kaStats = null;\n      },\n      'subscription cache': () => {\n        if (this._subscriptionCache) {\n          Object.keys(this._subscriptionCache).forEach(\n            key => this.removeFromSubscriptionCache(key)\n          );\n          this._subscriptionCache = null;\n        }\n        this.clearSubscriptionCacheKeys();\n        this._subscriptionCacheCount = 0;\n      },\n      'MessagePublishers': () => {\n        if (this._defaultPublisher) {\n          this._defaultPublisher.dispose();\n          this._defaultPublisher = null;\n        }\n      },\n      'MessageConsumers': () => {\n        this._consumers.disposeAll();\n        this._consumers = null;\n      },\n      'host list': () => {\n        this._currentHost = null;\n        this._hosts = null;\n      },\n    };\n\n    Object.keys(operations).forEach((operationKey) => {\n      const { LOG_TRACE, LOG_INFO } = this.logger;\n      const operation = operations[operationKey];\n      try {\n        LOG_TRACE(`Dispose: ${operationKey}`);\n        operation();\n        LOG_TRACE(`Dispose: ${operationKey} succeeded`);\n      } catch (ex) {\n        LOG_INFO(`Dispose: ${operationKey} failed:`, ex, '...continuing');\n      }\n    });\n    this._disposed = true;\n  }\n\n  emitSessionEvent(event) {\n    // Don't log here; callee does it\n    this._session.sendEvent(event);\n  }\n\n  /**\n   * @param {Number} correlationTag The correlation tag\n   * @param {function} reqTimeoutCb The timeout callback\n   * @param {Number} reqTimeout The timeout in milliseconds\n   * @param {Object} correlationKey The correlation key\n   * @param {function} respRecvCallback The success callback\n   * @private\n   */\n  enqueueOutstandingCorrelatedReq(correlationTag,\n                                  reqTimeoutCb,\n                                  reqTimeout,\n                                  correlationKey,\n                                  respRecvCallback) {\n    if (Check.nothing(correlationTag)) {\n      return;\n    }\n\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`Enqueue outstanding ctrl request correlationTag=${correlationTag}`);\n    let timer = null;\n    if (reqTimeoutCb) {\n      timer = setTimeout(reqTimeoutCb, reqTimeout || this._sessionProperties.readTimeoutInMsecs);\n    }\n\n    const outstandingReq = new CorrelatedRequest(correlationTag,\n      timer,\n      correlationKey,\n      respRecvCallback);\n    this._correlatedReqs[correlationTag] = outstandingReq;\n  }\n\n  /**\n   * @param {String} errorEventText Description of the error\n   * @param {ErrorSubcode} errorSubcode Subcode for the error\n   * @param {String} [eventReason] The reason for the error\n   * @returns {undefined}\n   * @memberof SessionFSM\n   * @private\n   */\n  errorInFsm(errorEventText, errorSubcode, eventReason = null) {\n    const { LOG_INFO } = this.logger;\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.EXCEPTION });\n    LOG_INFO(`Handling error in FSM: ${errorEventText} ${eventReason && eventReason.stack}`);\n    this.setCurrentError({\n      eventText: errorEventText,\n      errorSubcode,\n      eventReason,\n    });\n    return this.processEvent(sEvent);\n  }\n\n  flushTransportSession(callback) {\n    if (this._transport) {\n      this._transport.flush(callback);\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * @returns {Number} The next correlation tag\n   * @private\n   */\n  getCorrelationTag() {\n    return this._smfClient.nextCorrelationTag();\n  }\n\n  /**\n   * Get current state name\n   * @returns {String} The name of the current state, or SessionStateName.DISPOSED if the\n   *  FSM is terminated\n   * @private\n   */\n  getCurrentStateName() {\n    const currentState = this.getCurrentState();\n\n    if (!currentState) return null;\n    if (currentState === this.getFinalState()) return SessionStateName.DISPOSED;\n    return this.getCurrentState().getName();\n  }\n\n  /**\n   * Returns the value of a given {@link StatType}.\n   *\n   * @param {StatType} statType The statistic to query.\n   * @returns {?Number} The value for the given stat, if available\n   * @private\n   */\n  getStat(statType) {\n    if (this._sessionStatistics === undefined) {\n      return undefined;\n    }\n    //\n    // TX_TOTAL_DATA_MSGS and TX_TOTAL_DATA_BYTES are summary counters\n    // These stats are calculated as the sum of DIRECT/PERSISTENT/NONPERSISTENT\n    // counters.  This is by design since day one.  As such they do not include\n    // the count of redelivered messages/bytes as TX_PERSISTENT_MSGS and TX_NONPERSISTENT_MSGS\n    // only includes the counts of messages successfully delivered. This is not consistent\n    // with receive stats but it is what it is. This definition is consistent with the other\n    // existing APIs (CCSMP and JCSMP).\n    //\n    if (statType === StatType.TX_TOTAL_DATA_MSGS) {\n      return this._sessionStatistics.getStat(StatType.TX_DIRECT_MSGS) +\n        this._sessionStatistics.getStat(StatType.TX_PERSISTENT_MSGS) +\n        this._sessionStatistics.getStat(StatType.TX_NONPERSISTENT_MSGS);\n    } else if (statType === StatType.TX_TOTAL_DATA_BYTES) {\n      return this._sessionStatistics.getStat(StatType.TX_DIRECT_BYTES) +\n        this._sessionStatistics.getStat(StatType.TX_PERSISTENT_BYTES) +\n        this._sessionStatistics.getStat(StatType.TX_NONPERSISTENT_BYTES);\n    }\n    return this._sessionStatistics.getStat(statType);\n  }\n\n  /**\n   * Gets a transport session information string.\n   * This string is informative only, and applications should not attempt to parse it.\n   *\n   * @returns {String} The current status of the transport\n   */\n  getTransportInfo() {\n    if (Check.nothing(this._transport)) {\n      return 'Not connected.';\n    }\n    return this._transport.getInfoStr();\n  }\n\n  /**\n   * Handle an AD CTRL message given the message, its header, and the previously-identified\n   * candidate flow, which is used if the message has no correlation tag.\n   *\n   * @param {AdProtocolMessage} message The message to handle\n   * @param {SMFHeader} header The header of the message\n   * @returns {SessionFSM} This FSM.\n   * @private\n   */\n  handleADCtrlMessage(message, header) {\n    const flowId = message.getFlowId();\n    const respText = header.pm_respstr;\n    const correlationTag = header.pm_corrtag;\n    const { LOG_INFO, LOG_DEBUG, LOG_WARN } = this.logger;\n\n    if (correlationTag) {\n      // Correlation tag is non-null\n      // Session handles correlated request-reply\n      this.updateRxStats(message);\n\n      LOG_INFO(`Handle SMF response for correlationTag ${correlationTag}`);\n      // find matching correlationTag to cancel timer\n      const cancelledRequest = this.cancelOutstandingCorrelatedReq(correlationTag);\n      if (Check.nothing(cancelledRequest)) {\n        return this.errorInFsm(`Cannot find matching request for response: ${respText}`,\n                               ErrorSubcode.INTERNAL_ERROR);\n      }\n\n      if (cancelledRequest.respRecvdCallback) {\n        // call callback referenced by cancelledRequest\n        // login or update property\n        cancelledRequest.respRecvdCallback(message, cancelledRequest);\n        return this;\n      }\n\n      LOG_DEBUG(`Dropping ADCTRL message due to mismatched correlation tag ${correlationTag}`);\n      this.incStat(StatType.RX_REPLY_MSG_DISCARD);\n      return this;\n    }\n\n    // Unsolicited control message\n    let flow;\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.CLIENTACK:\n      case SMFAdProtocolMessageType.CLIENTNACK:\n      case SMFAdProtocolMessageType.CLOSEPUBFLOW:\n        if (this._defaultPublisher.flowId === flowId) {\n          flow = this._defaultPublisher;\n        } // else drop.\n        break;\n      default:\n        flow = this._consumers.getFlowById(flowId);\n    }\n\n    if (flow && !flow.disposed) {\n      // Found a matching flow\n      this.updateRxStats(message, flow);\n      flow.handleUncorrelatedControlMessage(message);\n      return this;\n    }\n\n    // No matching flow\n    const response = message.getResponse();\n    const rc = response ? `\"${response.responseCode} ${response.responseString}\" ` : '';\n    LOG_WARN(\n      `Dropping ADCTRL.${SMFLib.SMFAdProtocolMessageType.describe(message.msgType)\n      } ${rc}for unknown flow ${flowId}`\n    );\n    this.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n\n    return this;\n  }\n\n  /**\n   * @param {solace.Message} message The AD data message to handle\n   * @param {SMFHeader} header The header for the message\n   * @returns {MessageConsumer} The flow that handled the message, or `null`\n   * @private\n   */\n  handleADTrMessage(message, header) {\n    const { LOG_DEBUG } = this.logger;\n    const flowId = header.pm_ad_flowid;\n    // Get a flow from that ID if possible.\n    const flow = this._consumers.getFlowById(flowId);\n    if (!flow || flow.disposed) {\n      LOG_DEBUG('Dropped incoming AD message for ' +\n                `${flow ? 'disposed' : 'unknown'} flow ID ${flowId}`);\n      this.updateRxStats(message, this._sessionStatistics);\n      this.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n      return null;\n    }\n    this.updateRxStats(message, flow);\n    flow.handleDataMessage(message);\n    return flow;\n  }\n\n  /**\n   * @param {String} correlationTag The correlation tag for the timed out subscription request\n   * @param {String} [timeoutMsg] The reason for the timeout\n   * @private\n   */\n  handleApiSubscriptionTimeout(correlationTag, timeoutMsg) {\n    // remove request from queue\n    if (this._correlatedReqs[correlationTag] === undefined ||\n        this._correlatedReqs[correlationTag] === null) {\n      return;\n    }\n\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    LOG_INFO(`${timeoutMsg || 'Subscription timeout'} for correlationTag=${correlationTag}`);\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}, exception: ${e.message}`);\n    }\n  }\n\n  /**\n   * @param {ClientCtrlMessage} message The message to handle\n   * @param {SMFHeader} header The header from the message\n   * @returns {undefined}\n   * @private\n   */\n  handleClientCtrlMessage(message, header) {\n    let correlationTag;\n    const { LOG_INFO } = this.logger;\n    this.updateRxStats(message);\n    if (message.msgType === SMFLib.SMFClientCtrlMessageType.LOGIN) {\n      // Currently, login requests don't use a correlation tag.\n      // Using here a fake internal one to match the request.\n      correlationTag = TransportLib.SMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG;\n      LOG_INFO('Handle SMF response for ClientCTRL Login');\n    } else {\n      correlationTag = header.pm_corrtag;\n      LOG_INFO(`Handle SMF response for correlationTag ${correlationTag}`);\n    }\n    // find matching correlationTag to cancel timer\n    const cancelledRequest = this.cancelOutstandingCorrelatedReq(correlationTag);\n    if (Check.nothing(cancelledRequest)) {\n      const respText = header.pm_respstr;\n      return this.errorInFsm(`Cannot find matching request for response: ${respText}`,\n                             ErrorSubcode.INTERNAL_ERROR);\n    } else if (cancelledRequest.respRecvdCallback) {\n      // call callback referenced by cancelledRequest\n      // login or update property\n      return cancelledRequest.respRecvdCallback(message);\n    }\n\n    LOG_INFO(`Dropping ClientCtrl message due to mismatched correlation tag ${correlationTag}`);\n    return this.incStat(StatType.RX_REPLY_MSG_DISCARD);\n  }\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to handle\n   * @private\n   */\n  handleClientCtrlResponse(clientCtrlMsg) {\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_PROTOCOL_CLIENTCTRL });\n    sEvent.smfMsg = clientCtrlMsg;\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * @private\n   */\n  handleClientCtrlTimeout() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('ClientCtrl timeout for session');\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.DOWNGRADE_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n\n  /**\n   * @private\n   */\n  handleConnectTimeout() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Connection timeout. Disconnecting');\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.CONNECT_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * Handle control request timeout\n   * @param {String} correlationTag The correlation tag for the timed out operation\n   * @param {String} timeoutMsg The message associated with the timeout\n   * @private\n   */\n  handleUpdatePropertyTimeout(correlationTag, timeoutMsg) {\n    const { LOG_ERROR } = this.logger;\n    // remove request from queue\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}, exception: ${e.message}`);\n    }\n\n    // notify client\n    const sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                            timeoutMsg,\n                                            null,\n                                            ErrorSubcode.TIMEOUT,\n                                            null,\n                                            null);\n    this.sendEvent(sessionEvent);\n  }\n\n  /**\n   * @param {SMFHeader} header The header from the rejected message\n   * @private\n   */\n  handleRejectedTrMessage(header) {\n    // It is trmsg response. For direct message, it must be a failure response\n    const respCode = header.pm_respcode;\n    // Strip a trailing null character.\n    const topicNameRaw = header.pm_tr_topicname_bytes;\n    const topicName = topicNameRaw ? topicNameRaw.replace(/\\0/g, '') : '';\n    const respText = header.pm_respstr;\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n    this.emitSessionEvent(SessionEvent.build(\n      SessionEventCode.REJECTED_MESSAGE_ERROR,\n      respText,\n      respCode,\n      errorSubcode,\n      null, //correlation key\n      `Topic: ${topicName}`)\n    );\n  }\n\n  /**\n   * @param {solace.Message} message The SMF message to handle\n   * @returns {undefined}\n   * @private\n   */\n  handleSMFMessage(message) {\n    try {\n      // Stats for this message might affect both the session and the flow. Need to\n      // determine where the message is handled before handling stats.\n      // Some ADCTRL messages have no flow ID but only a correlation tag.\n      // These are OPENFLOW and we count them as handled by the session.\n\n      const header = message.smfHeader;\n\n      if (header.discardMessage) {\n        // UH==2 on an unknown parameter\n        if (this._sessionStatistics) {\n          this._sessionStatistics.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n        }\n        // do nothing.\n        return null;\n      }\n\n      // Each message type handler must call this.updateRxStats(message, target).\n      // The direct/TRmsg path includes the call here in the switch.\n      switch (header.smf_protocol) {\n        case SMFLib.SMFProtocol.TRMSG:\n          if (header.smf_adf) {\n            return this.handleADTrMessage(message, header);\n          }\n          this.updateRxStats(message, this._sessionStatistics);\n          return header.pm_respcode === 0\n            ? this._session.handleDataMessage(message)\n            : this.handleRejectedTrMessage(header);\n\n        case SMFLib.SMFProtocol.ADCTRL:\n          return this.handleADCtrlMessage(message, header);\n\n        case SMFLib.SMFProtocol.CLIENTCTRL:\n          return this.handleClientCtrlMessage(message, header);\n\n        case SMFLib.SMFProtocol.SMP:\n          return this.handleSMPMessage(message, header);\n\n        case SMFLib.SMFProtocol.KEEPALIVE:\n        case SMFLib.SMFProtocol.KEEPALIVEV2:\n          // do nothing\n          return null;\n\n        default:\n          return this.handleUnknownProtocolMessage(message, header);\n      }\n    } catch (e) {\n      const { LOG_ERROR } = this.logger;\n      LOG_ERROR(`Exception in handleSMFMessage, exception: ${e.stack}`);\n      return this.errorInFsm(`Exception in handleSMFMessage: ${e.message}`,\n                             e.subcode || ErrorSubcode.INTERNAL_ERROR,\n                             e);\n    }\n  }\n\n  /**\n   * @param {TransportError} transportError The SMF parsing error passed from the transport\n   * @returns {undefined}\n   * @private\n   */\n  handleSMFParseError(transportError) {\n    // fatal connection error\n\n    // notify client\n    return this.errorInFsm(transportError,\n                           ErrorSubcode.PROTOCOL_ERROR);\n  }\n\n  handleSMPMessage(message, header) {\n    this.updateRxStats(message);\n\n    // find matching correlationTag to cancel timer\n    const cancelledRequest = this.cancelOutstandingCorrelatedReq(header.pm_corrtag || '');\n    /*\n     * If we find the correlationTag and it has a callback associated with it\n     * then call that callback.  It is likely calling back straight to the application\n     * due to a call to session.subscribe() or session.unsubscribe() or\n     * session.updateProperty().\n     * Otherwise just send a TRANSPORT_PROTOCOL_SMP event to the FSM.\n     */\n    if (Check.nothing(cancelledRequest) || Check.nothing(cancelledRequest.respRecvdCallback)) {\n      /*\n       * correlation tag not found, probably an error response to a subscription\n       * request that did not request-confirm,  or it could be one of the\n       * FSM generated subscriptions and the callback is the anonymous function\n       * in state WaitingForSubConfirmm\n       */\n      const sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_PROTOCOL_SMP });\n      sEvent.smfMsg = message;\n      return this.processEvent(sEvent);\n    }\n\n    // calling through the callback, this should  be a callback in the _session for\n    // applicated generated subscribe/unsubscribe/updateProperty(clientName)\n    return cancelledRequest.respRecvdCallback(message, cancelledRequest);\n  }\n\n  /**\n   * @param {Number} respCode The router response code\n   * @param {String} respText The router response text\n   * @param {String} subscriptionStr The subscription cache key\n   * @param {CorrelatedRequest} request The associated request\n   * @param {Boolean} confirm Whether the user wanted confirmation for the request\n   * @private\n   */\n  handleSubscriptionUpdateError(respCode, respText, subscriptionStr, request, confirm) {\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n\n    //\n    // if it is a not-found or already-present error, it does not affect our subscription\n    // cache, otherwise remove it from the cache.\n    //\n    if (!(errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT ||\n      errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND)) {\n      // remove from cache\n      this.removeFromSubscriptionCache(subscriptionStr);\n    }\n\n    //\n    // notify the client\n    //\n    this._session.handleSubscriptionUpdateError(respCode,\n                                                respText,\n                                                subscriptionStr,\n                                                request,\n                                                confirm);\n  }\n\n  /**\n   * @param {String} correlationTag The correlation tag for the timed out request\n   * @private\n   */\n  handleSubscriptionTimeout(correlationTag) {\n    // remove request from queue\n    const { LOG_ERROR } = this.logger;\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`, e);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.SUBSCRIBE_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * @param {TransportSessionEvent} transportEvent The event to handle\n   * @returns {undefined}\n   * @private\n   */\n  handleTransportEvent(transportEvent) {\n    const { LOG_INFO, LOG_WARN } = this.logger;\n    const infoStr = transportEvent.getInfoStr() || '';\n    LOG_INFO(`Receive transport event: ${transportEvent}`);\n\n    let sEvent;\n\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportLib.TransportSessionEventCode.UP_NOTICE:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_UP });\n        sEvent.sessionId = transportEvent.getSessionId();\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.DESTROYED_NOTICE:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_DESTROYED });\n        sEvent.sessionId = transportEvent.getSessionId();\n        sEvent.eventText = infoStr;\n        sEvent.errorSubcode = transportEvent.getSubcode();\n        sEvent.eventReason = transportEvent;\n        this._smfClient = null; // calling reset does nothing useful here\n        this._transport = null; // transport has been destroyed\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.CAN_ACCEPT_DATA:\n        //\n        // unblock the publisher too\n        this.GuaranteedFlowControlledRelief();\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_CAN_ACCEPT_DATA });\n        sEvent.sessionId = transportEvent.getSessionId();\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.SEND_ERROR:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.SEND_ERROR });\n        sEvent.sessionId = transportEvent.getSessionId();\n        sEvent.eventText = transportEvent.getInfoStr();\n        sEvent.errorSubcode = transportEvent.getSubcode();\n        sEvent.eventReason = transportEvent;\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.DATA_DECODE_ERROR:\n      case TransportLib.TransportSessionEventCode.PARSE_FAILURE:\n        // fatal connection error\n        return this.errorInFsm(transportEvent.getInfoStr(),\n                               transportEvent.getSubcode());\n      default:\n        LOG_WARN('Received unknown transport session event', transportEvent);\n    }\n\n    return true;\n  }\n\n  /**\n   * @param {BaseMessage|Message} message The message to handle\n   * @param {SMFHeader} [header] The SMF header from the message, if available\n   * @returns {undefined}\n   * @private\n   */\n  handleUnknownProtocolMessage(message, header) {\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    // unknown protocol\n    this.updateRxStats(message);\n    if (header && header.smf_protocol === SMFLib.SMFProtocol.TSESSION) {\n      // change state\n      LOG_ERROR(`Received transport session message instead of SMF message, protocol 0x${\n        formatHexString(header.smf_protocol)}`);\n      LOG_ERROR(`Transport MessageType=${message.messageType}, target sessionId=${\n        formatHexString(message.sessionId)}`);\n      // notify client\n      return this.errorInFsm('Received message with unknown protocol',\n                             ErrorSubcode.PARSE_FAILURE);\n    }\n\n    // Drop message of unknown protocol and increment stats\n    if (this._sessionStatistics) {\n      this._sessionStatistics.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n    }\n    LOG_INFO(`Drop message with unknown protocol 0x${formatHexString(header.smf_protocol)}`);\n    return null;\n  }\n\n\n  /**\n   * Increments a session statistic\n   *\n   * @param {StatType} statType The key to increment\n   * @param {?Number} value The amount to increment the value by\n   * @returns {?Number} The new value for the statistic\n   * @private\n   */\n  incStat(statType, value) {\n    return this._sessionStatistics ? this._sessionStatistics.incStat(statType, value) : undefined;\n  }\n\n  /**\n   * @private\n   */\n  initTransport() {\n    const { LOG_INFO } = this.logger;\n    const host = this._currentHost;\n    LOG_INFO(`Creating transport session ${host}`);\n    this._kaStats = { lastMsgWritten: 0, lastBytesWritten: 0 };\n\n    this._smfClient = new TransportLib.SMFClient(\n      rxData => this.handleSMFMessage(rxData),\n      rxError => this.handleSMFParseError(rxError),\n      this\n    );\n\n    this._transport = TransportLib.TransportFactory.createTransport(\n      host,\n      transportEvent => this.handleTransportEvent(transportEvent),\n      this._smfClient,\n      this._sessionProperties.clone(),\n      () => this.sessionIdHex\n    );\n    this.injectTransportInterceptor(this._transportInterceptor);\n  }\n\n  /**\n   * Installs a transport interceptor for the current and any future transports.\n   *\n   * The object methods .installed(instance) and .removed(instance) will be called if present, with\n   * the transport instance as a parameter.\n   *\n   * To stop using transport interceptors, supply a null interceptor argument.\n   *\n   * @param {Object} interceptor An object given access to the internals of the transport instance.\n   * @private\n   */\n  injectTransportInterceptor(interceptor) {\n    this._transportInterceptor = interceptor;\n    if (this._transport) {\n      this._transport.setInterceptor(interceptor);\n    }\n  }\n\n  /**\n   * Call from keep alive scheduled task\n   * @returns {undefined}\n   * @private\n   */\n  keepAliveTimeout() {\n    const { LOG_TRACE, LOG_DEBUG, LOG_INFO } = this.logger;\n    LOG_TRACE('KeepAlive timeout');\n\n    // session is in connected state but hasn't received keep alive response\n    // Less than or equal to because this is the number of *already sent* KAs\n    if (this._keepAliveCounter >= this._sessionProperties.keepAliveIntervalsLimit) {\n      LOG_INFO(`Exceed maximum keep alive intervals limit ${\n                this._sessionProperties.keepAliveIntervalsLimit}`);\n      // stop timers\n      LOG_DEBUG('Stop keep alive timer');\n      if (this._keepAliveTimer) {\n        clearInterval(this._keepAliveTimer);\n      }\n\n      // change session state\n      return this.errorInFsm('Exceed maximum keep alive intervals limit',\n                             ErrorSubcode.KEEP_ALIVE_FAILURE);\n    }\n\n    LOG_TRACE('About to send keep alive');\n\n    const clientStats = this._transport.getClientStats();\n    const prestatMsgWritten = clientStats.msgWritten;\n    const prestatBytesWritten = clientStats.bytesWritten;\n\n    const kaMsg = new SMFLib.KeepAliveMessage();\n    const returnCode = this.send(kaMsg, null, true);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      /*\n       * TransportReturnCode.NO_SPACE is not possible.\n       * Send is called with the forceAllowEnqueue parameter.\n       * So whatever error is returned is fatal\n       */\n      return this.errorInFsm('Cannot send keep alive message',\n                             ErrorSubcode.KEEP_ALIVE_FAILURE);\n    }\n\n    // We need to avoid incrementing the KA counter if we're in the process of\n    // sending a huge message and we've had no opportunity to write a KA message.\n    // Detection: last KA's snapshot of messages written is unchanged, but number of bytes\n    // written has gone up.\n    if (this._kaStats.lastMsgWritten === prestatMsgWritten &&\n      this._kaStats.lastBytesWritten < prestatBytesWritten) {\n      LOG_DEBUG('Keep alive sent',\n                'Not incrementing keep alive counter due to large message send',\n                `KA count = ${this._keepAliveCounter}`\n      );\n    } else {\n      this._keepAliveCounter++;\n      LOG_TRACE(`Last message written: ${this._kaStats.lastMsgWritten}`);\n      LOG_TRACE(`Last bytes written: ${this._kaStats.lastBytesWritten}`);\n      LOG_TRACE(`Keep alive sent, increment keep alive counter, keep alive count = ${\n        this._keepAliveCounter}`);\n    }\n    this._kaStats.lastBytesWritten = clientStats.bytesWritten;\n    this._kaStats.lastMsgWritten = clientStats.msgWritten;\n\n    return true;\n  }\n\n  /**\n   * Prepares a message for sending and then invoke the transport\n   * send method. For guaranteed messages, pass the transport send\n   * method to the publisher so it can be invoked from there and errors\n   * handled within the publisher FSM.\n   * @param {BaseMessage} message The message to prepare.\n   * @private\n   */\n  prepareAndSendMessage(message) {\n    if (message instanceof Message) {\n      let returnCode;\n      // Delegate message preparation where appropriate\n      const deliveryMode = message.getDeliveryMode();\n      switch (deliveryMode) {\n\n        case MessageDeliveryModeType.DIRECT:\n          if (!this._transport) return;\n          message._payload_is_memoized = false;\n          message._memoized_csumm = null;\n          message._memoized_payload = null;\n          returnCode = this.sendToTransport(message);\n          break;\n\n        case MessageDeliveryModeType.PERSISTENT:\n        case MessageDeliveryModeType.NON_PERSISTENT:\n          if (!this._defaultPublisher) {\n            const reason = this._session.adLocallyDisabled\n                ? 'locally disabled'\n                : 'remotely unsupported';\n            throw new OperationError('Session does not provide Guaranteed Message Publish capability',\n                                       ErrorSubcode.GM_UNAVAILABLE,\n                                       reason);\n          } else {\n            if (this._gmSendDisallowed) this._gmSendDisallowed(); // throws if present\n            returnCode = this._defaultPublisher.prepareAdMessageAndSend(message);\n          }\n          break;\n\n        default: {\n          const { LOG_ERROR } = this.logger;\n          LOG_ERROR('Unhandled message delivery mode', MessageDeliveryModeType.describe(deliveryMode));\n        }\n      }\n\n      if (returnCode !== TransportLib.TransportReturnCode.OK) {\n        if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n          // Must be DIRECT message because the Publisher handles NO_SPACE returnCode\n          // internally\n          this._userBackpressured = true;\n          throw new OperationError('Cannot send message - no space in transport',\n            ErrorSubcode.INSUFFICIENT_SPACE,\n            TransportLib.TransportReturnCode.describe(returnCode));\n        }\n\n        // This is a fatal session error\n        this.setCurrentError(new OperationError('Cannot send message',\n            ErrorSubcode.INVALID_OPERATION,\n            TransportLib.TransportReturnCode.describe(returnCode)));\n        this.processEvent(new SessionFSMEvent({ name: SessionEventName.EXCEPTION }));\n      }\n    }\n  }\n\n  GuaranteedFlowControlledRelief() {\n    if (this._defaultPublisher) {\n      this._defaultPublisher.processFSMEvent(\n        new PublisherLib.PublisherFSMEvent({\n          name: PublisherLib.PublisherFSMEventNames.CAN_SEND }));\n    }\n  }\n  /**\n   * Reapply subscriptions.\n   * @returns {Boolean} True if all subscriptions were reapplied. False if WOULD_BLOCK.\n   * @private\n   */\n  reapplySubscriptions() {\n    const { LOG_INFO, LOG_DEBUG } = this.logger;\n    const { SolclientFactory: { createTopicDestination } } = SolclientFactoryLib;\n    LOG_INFO(`Reapplying subscriptions, count=${this._subscriptionCacheKeys.length}`);\n    // add subscriptions and ask for confirm on last one\n\n    if (!this._subscriptionCacheKeys) {\n      // Nothing to do\n      return true;\n    }\n\n    try {\n      while (this._subscriptionCacheKeys.length) {\n        //\n        // The key is the the topic string (topic.getName()).\n        // sendSubscribe() requires a destination, so we encode it here.\n        //\n        // on entry to reapplySubscriptions we added the P2P topic to\n        // subscriptionCacheKeys but there is no corresponding entry in\n        // _subscriptionCache so we no longer use the key to index that actual\n        // cache.\n        // If it becomes necesary to pass the Topic object to sendSubscribe in a\n        // a future enhancement (perhaps to remember flags like request-confirm) then\n        // this logic here needs to be revisisted.\n        const key = this._subscriptionCacheKeys.shift();\n        const requestConfirmation = this._subscriptionCacheKeys.length === 0;\n        const topicDestination = createTopicDestination(key);\n        const rc = this.sendSubscribe(topicDestination,\n                                      requestConfirmation,\n                                      null,\n                                      this._sessionProperties.readTimeoutInMsecs,\n                                      null);\n        if (rc !== TransportLib.TransportReturnCode.OK) {\n          this.errorInFsm(\n            `Error occurred sending subscription: ${TransportLib.TransportReturnCode.describe(rc)}`,\n            ErrorSubcode.INTERNAL_ERROR\n          );\n        }\n      }\n    } catch (e) {\n      if (e instanceof OperationError && e.subcode === ErrorSubcode.INSUFFICIENT_SPACE) {\n        LOG_DEBUG('Apply subscriptions blocked due to insufficient space, wait for can accept data event');\n        return false;\n      }\n      this.errorInFsm(`Unexpected expection occurred while reapplying subscriptions: ${e}`,\n                      e.subcode || ErrorSubcode.INTERNAL_ERROR,\n                      e);\n    }\n    return true;    // sent all subscriptions\n  }\n\n\n  /**\n   * @param {Destination} topic The topic to remove from the subscription cache\n   * @returns {?Destination} The value in the subscription cache at that key\n   * @private\n   */\n  removeFromSubscriptionCache(topic) {\n    if (Check.nothing(topic) || !this._subscriptionCache) {\n      return null;\n    }\n\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    const key = (topic instanceof Destination) ? topic.name : topic;\n    LOG_DEBUG(`Remove subscription ${key}`);\n    const sub = this._subscriptionCache[key];\n    if (sub === undefined || sub === null) {\n      return null;\n    }\n\n    try {\n      const result = delete this._subscriptionCache[key];\n      if (!result) {\n        LOG_ERROR(`Cannot remove subscription ${key}`);\n      } else {\n        this._subscriptionCacheCount--;\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot remove subscription ${key}`, e);\n    }\n    return sub;\n  }\n\n\n  /**\n   * Reset the FSM state and release all objects. This method is called once from\n   * SessionFSM.onInitial\n   * @private\n   */\n  reset() {\n    this.resetStats();\n\n    /**\n     * The following fields are disposed when disconnect is called\n     * and recreated when connect is called again.\n     */\n    this.sessionId = null;\n\n    // Need to reschedule keepAliveTimer when some other write operation happens\n    this._keepAliveTimer = null;\n    this.resetKeepAliveCounter();\n    this._correlatedReqs = {};\n\n    this._disposed = false;\n\n    this._smfClient = null;\n    this._kaStats = { lastMsgWritten: 0, lastBytesWritten: 0 };\n\n    /**\n     * The following fields are destroyed when dispose is called\n     * and cannot be reinitialized.\n     */\n    this._subscriptionCache = null;\n    this._subscriptionCacheKeys = null;\n    this._subscriptionCacheCount = 0;\n    if (this._sessionProperties.reapplySubscriptions) {\n      this._subscriptionCache = {};\n    }\n\n    // When negotiating the initial transport, we can fail and transparently reconnect.\n    // this.resetTransportProtocolHandler();\n    // this._lastKnownGoodTransport = null;\n\n    // event and error information\n    this._eventCode = null;\n    this._responseCode = null;\n    this.eventText = null;\n    this.errorSubcode = null;\n    this.eventReason = null;\n  }\n\n  /**\n   * @private\n   */\n  resetKeepAliveCounter() {\n    // Reset the KA counter. Called by the SMFClient on each SMF chunk received (whether full\n    // message or not).\n    this._keepAliveCounter = 0;\n  }\n\n  /**\n   * @returns {?} The result of calling resetStats().\n   * @private\n   */\n  resetStats() {\n    return this._sessionStatistics ? this._sessionStatistics.resetStats() : undefined;\n  }\n\n\n  /**\n   * Schedule keep alive task\n   * @private\n   */\n  scheduleKeepAlive() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    const { keepAliveIntervalInMsecs } = this._sessionProperties;\n    if (keepAliveIntervalInMsecs === 0) {\n      // Keepalives disabled\n      return;\n    }\n\n    if (this._keepAliveTimer) {\n      clearInterval(this._keepAliveTimer);\n    }\n\n    this._keepAliveTimer = setInterval(() => {\n      try {\n        this.keepAliveTimeout();\n      } catch (e) {\n        LOG_ERROR('Error occurred in keepAliveTimeout', e);\n      }\n    }, keepAliveIntervalInMsecs);\n\n    LOG_DEBUG(`Create Keepalive timer with interval: ${keepAliveIntervalInMsecs}ms`);\n  }\n\n  /**\n   * Provide a method for the session object to use to send\n   * messages to the transport.  This method is only used internally by\n   * the FSM.  The session send() API should invoke sendToTransport() directly\n   * so errors are thrown back to the application.\n   *\n   * @param {solace.Message} message The message to send\n   * @param {Object} [statTarget=this._sessionStatistics] The sender of this message, for stats.\n   * @param {Boolean} [forceAllowEnqueue=false] Set to true to force enqueueing of control messages\n   *\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  send(message, statTarget = this._sessionStatistics, forceAllowEnqueue = false) {\n    try {\n      return this.sendToTransport(message, statTarget, forceAllowEnqueue);\n    } catch (ex) {\n      const { LOG_TRACE } = this.logger;\n      // The send operation threw (or we threw locally), which is always a SessionException.\n      LOG_TRACE(`Error sending message: ${ex.message}: ${ex.stack}`);\n      this.errorInFsm(`Send operation failed: ${ex.message}`,\n                      ex.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    return TransportLib.TransportReturnCode.CONNECTION_ERROR;\n  }\n\n  /**\n   * Provide a method for the session object to use to send\n   * messages to the transport.\n   *\n   * @param {solace.Message} message The message to send\n   * @param {Object} [statTarget=this._sessionStatistics] The sender of this message, for stats.\n   * @param {Boolean} [forceAllowEnqueue=false] Set to true to force enqueueing of control messages\n   *\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendToTransport(message, statTarget = this._sessionStatistics, forceAllowEnqueue = false) {\n    let returnCode = TransportLib.TransportReturnCode.CONNECTION_ERROR;\n\n    if (!this._transport) {\n      throw new OperationError('Transport has been destroyed', ErrorSubcode.INTERNAL_ERROR);\n    }\n    const content = SMFLib.Codec.Encode.encodeCompoundMessage(message);\n    returnCode = this._transport.send(content, forceAllowEnqueue);\n    switch (returnCode) {\n      case TransportLib.TransportReturnCode.OK:\n        this.updateTxStats(message, statTarget);\n        break;\n      case TransportLib.TransportReturnCode.NO_SPACE:\n        if (!forceAllowEnqueue) {\n          // This is allowed.\n          break;\n        }\n      // Else fall through\n      default:\n        throw new OperationError(`Transport returned ${TransportLib.TransportReturnCode.describe(returnCode)}`,\n          ErrorSubcode.INTERNAL_ERROR);\n    }\n\n    return returnCode;\n  }\n\n\n  /**\n   * Initiates the ClientCtrl handshake, called from transportSessionEvent callback\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendClientCtrlLogin() {\n    const { LOG_INFO, LOG_DEBUG, LOG_TRACE } = this.logger;\n\n    this._compressedTLS =\n      ((this._sessionProperties.compressionLevel > 0) &&\n        (this._currentHost.match(/tcps:/i) !== null));\n    this._plaintextTLS =\n      ((this._currentHost.match(/tcps:/i) !== null) &&\n        (this._sessionProperties.sslConnectionDowngradeTo === SslDowngrade.PLAINTEXT));\n    LOG_TRACE(`sendClientLogin plaintextTLS: ${this._plaintextTLS} _compressedTLS: ${this._compressedTLS}`);\n\n    // Don't use the correlation tag. For Login only, the router won't return it.\n    const clientCtrlMsg = SMFLib.ClientCtrlMessage.getLogin(this._sessionProperties,\n                                                            this._compressedTLS,\n                                                            this._plaintextTLS);\n    const returnCode = this.send(clientCtrlMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      this._responseCode = null;\n      this.eventReason = null;\n      // notify client\n      if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n        this.eventText = 'Cannot send client control - no space in transport';\n        this.errorSubcode = ErrorSubcode.INSUFFICIENT_SPACE;\n      } else {\n        LOG_INFO(`Cannot send client ctrl, return code\n          ${TransportLib.TransportReturnCode.describe(returnCode)}`);\n        this.eventText = 'Cannot send client ctrl';\n        this.errorSubcode = ErrorSubcode.INVALID_OPERATION;\n      }\n    } else {\n      // enqueue outstanding request, use a fake correlation tag for Login only\n      const correlationTag = TransportLib.SMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG;\n      LOG_INFO(`Using internally correlationTag=${correlationTag} for tracking ClientCTRL Login`);\n      this.enqueueOutstandingCorrelatedReq(correlationTag,\n                                           null,\n                                           null,\n                                           null,\n                                           rxMsgObj => this.handleClientCtrlResponse(rxMsgObj));\n\n      LOG_DEBUG('Sent client ctrl');\n    }\n    return returnCode;\n  }\n\n  /**\n   *\n   * Internal method for sending subscriptions from SessionConnecting state (reapply or P2P-inbox)\n   *\n   * @param {Destination} topic The topic to subscribe\n   * @param {Boolean} requestConfirmation If true, expect a reply on success also\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout for the request\n   * @param {function} respRecvdCallback The callback on reply received\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendSubscribe(topic, requestConfirmation, correlationKey, requestTimeout, respRecvdCallback) {\n    const { LOG_INFO, LOG_DEBUG } = this.logger;\n    assert(topic instanceof Destination, 'sendSubscribe requires a Destination, not a string');\n    LOG_DEBUG('Sending subscribe: ', topic, requestConfirmation, correlationKey);\n    const correlationTag = this.getCorrelationTag();\n    const smpMsg = SMFLib.SMPMessage.getSubscriptionMessage(correlationTag,\n                                                            topic,\n                                                            true, // set add == true\n                                                            requestConfirmation);\n    assert(smpMsg.encodedUtf8Subscription, 'Encoded SMP message was invalid');\n    const returnCode = this.send(smpMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      LOG_INFO('Subscribe failed', TransportLib.TransportReturnCode.describe(returnCode));\n      return returnCode;\n    }\n    if (requestConfirmation) {\n      this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        () => this.handleSubscriptionTimeout(correlationTag),\n        requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n        correlationKey,\n        respRecvdCallback);\n    }\n    return returnCode;\n  }\n\n  /**\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property key to change\n   * @param {?} newValue The new value for the property\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout for the request\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendUpdateProperty(mutableSessionProperty,\n                     newValue,\n                     correlationKey,\n                     requestTimeout,\n                     respRecvdCallback) {\n    const correlationTag = this._smfClient.nextCorrelationTag();\n    const smpMsg = SMFLib.ClientCtrlMessage.getUpdate(mutableSessionProperty,\n                                                      newValue,\n                                                      correlationTag);\n\n    const returnCode = this.send(smpMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      return returnCode;\n    }\n\n    this.enqueueOutstandingCorrelatedReq(\n      correlationTag,\n      () => this.handleUpdatePropertyTimeout(correlationTag),\n      requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n      correlationKey,\n      respRecvdCallback);\n    return returnCode;\n  }\n\n  /**\n   * @private\n   */\n  setClientCtrlTimer() {\n    this.clearClientCtrlTimer();\n\n    this._clientCtrlTimer = setTimeout(() => this.handleClientCtrlTimeout(),\n                                       this._sessionProperties.transportDowngradeTimeoutInMsecs);\n  }\n\n  /**\n   * @private\n   */\n  setConnectTimer() {\n    this.clearConnectTimer();\n    // The hosts lists provides the wait time for inter-host timeouts.\n    // This timeout is for the entire list.\n    this._connectTimer = setTimeout(() => this.handleConnectTimeout(),\n                                    this._sessionProperties.connectTimeoutInMsecs);\n  }\n\n  /**\n   * Sets the error exit information for the FSM.\n   *\n   * This applies key-value pairs from properties to the current error object,\n   * but does not allow overwriting and does not allow assignment of null or undefined values.\n   *\n   * Only the following fields are relevant, any other fields transferred to currentError by this\n   * method are eventually ignored:\n   *    * eventText\n   *    * responseCode\n   *    * errorSubcode\n   *    * eventReason\n   *\n   * See SessionConnecting exitPoint 'errorExit'. This is the only place the information in\n   * currentError is extracted.\n   *\n   * Could be implemented as `\n   * this._currentError = Object.assign({}, filter(properties), this._currentError)\n   * `\n   * where `filter` is a key-value filter that works as described above.\n   *\n   * @param {Object} source An object with properties to be applied\n   */\n  setCurrentError(source) {\n    const target = this._currentError || {};\n    const { LOG_TRACE } = this.logger;\n    Object.keys(source).forEach((key) => {\n      if (source[key] === null || source[key] === undefined) return false;\n      if (target[key] !== null && target[key] !== undefined) {\n        LOG_TRACE(`Attempt to overwrite property {key=${key}, current value=${target[key]}, incoming value=${source[key]}}`);\n        return false;\n      }\n      target[key] = source[key];\n      return true;\n    });\n    this._currentError = target;\n  }\n\n\n  /**\n   * Send a subscribe or unsubscribe request on behalf of the API.\n   * @param {Destination} subject The target for the update\n   * @param {Boolean} requestConfirmation Request a success message if true\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout in milliseconds\n   * @param {SessionRequestType} requestType The request type\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  subscriptionUpdate(subject,\n                     requestConfirmation,\n                     correlationKey,\n                     requestTimeout,\n                     requestType,\n                     respRecvdCallback) {\n    //check topic supported\n    const error = this.checkSessionDestinationCapability(subject);\n    if (error) {\n      throw error;\n    }\n    const timeoutMsg =\n      SubscriptionUpdateTimeoutMessages[requestType] ||\n      SubscriptionUpdateTimeoutMessages.default;\n    const isSMP = (requestType !== SessionRequestType.REMOVE_DTE_SUBSCRIPTION);\n    const add = (requestType === SessionRequestType.ADD_SUBSCRIPTION ||\n      requestType === SessionRequestType.ADD_P2PINBOX);\n    const correlationTag = this.getCorrelationTag();\n\n    const generateMessage = isSMP\n      ? SMFLib.SMPMessage.getSubscriptionMessage\n      : SMFLib.AdProtocolMessage.getDTEUnsubscribeMessage;\n    const msg = generateMessage(correlationTag,\n                                subject,\n                                add,\n                                requestConfirmation);\n    const returnCode = this.send(msg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      return returnCode;\n    }\n\n    if (requestConfirmation) {\n      this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        () => this.handleApiSubscriptionTimeout(correlationTag,\n                                                timeoutMsg),\n        requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n        correlationKey,\n        respRecvdCallback);\n    }\n    if (requestType === SessionRequestType.ADD_SUBSCRIPTION &&\n      this._sessionProperties.reapplySubscriptions) {\n      this.addToSubscriptionCache(subject);\n    } else if (requestType === SessionRequestType.REMOVE_SUBSCRIPTION &&\n      this._sessionProperties.reapplySubscriptions) {\n      this.removeFromSubscriptionCache(subject);\n    }\n    return returnCode;\n  }\n\n  /**\n   * Send a queue subscribe or unsubscribe request.\n   * @param {Destination} subject The target for the update\n   * @param {Destination} queue The queue where the subscription is added/removed\n   * @param {Number} requestTimeout The timeout in milliseconds\n   * @param {Boolean} add (if true) or remove (if false).\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  queueSubscriptionUpdate(subject,\n                          queue,\n                          requestTimeout,\n                          add,\n                          respRecvdCallback) {\n    const timeoutMsg =\n      add ? SubscriptionUpdateTimeoutMessages[SessionRequestType.ADD_SUBSCRIPTION] :\n      SubscriptionUpdateTimeoutMessages[SessionRequestType.REMOVE_SUBSCRIPTION];\n    const correlationTag = this.getCorrelationTag();\n\n    const msg = SMFLib.SMPMessage.getQueueSubscriptionMessage(\n      correlationTag,\n      subject,\n      queue,\n      add);\n    const returnCode = this.send(msg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      //TODO: act on this.\n      // (throw.)\n      return returnCode;\n    }\n\n    this.enqueueOutstandingCorrelatedReq(\n      correlationTag,\n      () => {\n        const origReq = this._correlatedReqs[correlationTag];\n        //TODO maybe just use the cancel method instead (which returns the original request)\n        this.handleApiSubscriptionTimeout(correlationTag,\n                                          timeoutMsg);\n        respRecvdCallback(null, origReq);\n      },\n      requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n      null, // no need for session machinery to track flow correlationKey.\n      respRecvdCallback);\n    return returnCode;\n  }\n\n  /**\n   * @param {BaseMessage|Message} smfMessage The message received\n   * @param {Stats} [target] The statistics target to update, default is session stats\n   * @private\n   */\n  updateRxStats(smfMessage, target = this._sessionStatistics) {\n    if (!target) {\n      return;\n    }\n    const smfHeader = smfMessage.smfHeader;\n    if (!smfHeader) {\n      return;\n    }\n    const deliveryMode = smfHeader.pm_deliverymode || 0;\n    const msgStatKey = STAT_RX_BYMODE_MSGS[deliveryMode];\n    const bytesStatKey = STAT_RX_BYMODE_BYTES[deliveryMode];\n    const msgLength = smfHeader.messageLength;\n\n    switch (smfHeader.smf_protocol) {\n      case SMFLib.SMFProtocol.TRMSG:\n        if (smfHeader.pm_respcode === 0) {\n          target.incStat(StatType.RX_TOTAL_DATA_MSGS);\n          target.incStat(msgStatKey);\n          target.incStat(StatType.RX_TOTAL_DATA_BYTES, msgLength);\n          target.incStat(bytesStatKey, msgLength);\n          if (smfHeader.smf_di) {\n            target.incStat(StatType.RX_DISCARD_MSG_INDICATION);\n          }\n        }\n        break;\n      case SMFLib.SMFProtocol.CLIENTCTRL:\n      case SMFLib.SMFProtocol.SMP:\n      case SMFLib.SMFProtocol.KEEPALIVE:\n      case SMFLib.SMFProtocol.KEEPALIVEV2:\n      case SMFLib.SMFProtocol.ADCTRL:\n        target.incStat(StatType.RX_CONTROL_MSGS);\n        target.incStat(StatType.RX_CONTROL_BYTES, msgLength);\n        break;\n      default:\n    }\n  }\n\n  /**\n  * @param {BaseMessage|Message} smfMessage The message sent\n  * @param {Stats} [target] The statistics target to update, default is session stats\n  * @private\n  */\n  updateTxStats(smfMessage, target = this._sessionStatistics) {\n    if (!target) {\n      return;\n    }\n    if (smfMessage.getReplyTo !== undefined && smfMessage.getReplyTo()) {\n      // update stats\n      target.incStat(StatType.TX_REQUEST_SENT);\n    }\n    const smfHeader = smfMessage.smfHeader;\n    if (!smfHeader) {\n      return;\n    }\n\n    const deliveryMode = smfHeader.pm_deliverymode || 0;\n    let msgStatKey = STAT_TX_BYMODE_MSGS[deliveryMode];\n    let bytesStatKey = STAT_TX_BYMODE_BYTES[deliveryMode];\n    //\n    // If this is a Guaranteed Message we may need to further refine the stats by the redelivered\n    // status\n    if (deliveryMode !== MessageDeliveryModeType.DIRECT) {\n      if (smfMessage.isRedelivered()) {\n        msgStatKey = STAT_TX_BYMODE_REDELIVERED[deliveryMode];\n        bytesStatKey = STAT_TX_BYMODE_BYTES_REDELIVERED[deliveryMode];\n      }\n    }\n    const msgLength = smfHeader.messageLength;\n\n    switch (smfHeader.smf_protocol) {\n      case SMFLib.SMFProtocol.TRMSG:\n        target.incStat(msgStatKey);\n        target.incStat(bytesStatKey, msgLength);\n        break;\n      case SMFLib.SMFProtocol.CLIENTCTRL:\n      case SMFLib.SMFProtocol.SMP:\n      case SMFLib.SMFProtocol.KEEPALIVE:\n      case SMFLib.SMFProtocol.KEEPALIVEV2:\n      case SMFLib.SMFProtocol.ADCTRL:\n        target.incStat(StatType.TX_CONTROL_MSGS);\n        target.incStat(StatType.TX_CONTROL_BYTES, msgLength);\n        break;\n      default:\n    }\n  }\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlRespMsg The client control message with props\n   * @private\n   */\n  updateReadonlySessionProps(clientCtrlRespMsg) {\n    const props = this._sessionProperties; // Modify session properties in place\n\n    props._setVpnNameInUse(clientCtrlRespMsg.getVpnNameInUseValue() || '');\n    const oldVirtualRouterName = props.virtualRouterName;\n    const newVirtualRouterName = clientCtrlRespMsg.getVridInUseValue() || '';\n    props._setVirtualRouterName(newVirtualRouterName);\n    if (oldVirtualRouterName !== '' && oldVirtualRouterName !== newVirtualRouterName) {\n      this.handleVirtualRouterNameChange(oldVirtualRouterName, newVirtualRouterName);\n    }\n\n    // The Solace Message Router login response should always contain a P2P topic for this client\n    // name. If it doesn't that's an error (and we store \"\").\n    props._setP2pInboxBase(clientCtrlRespMsg.getP2PTopicValue() || '');\n    props._setP2pInboxInUse(P2PUtil.getP2PInboxTopic(props.p2pInboxBase));\n    this._session.updateCapabilities(clientCtrlRespMsg.getRouterCapabilities());\n\n    // Create and cache a guard for GM sending.\n    const gmCap = this._session._getCapability(CapabilityType.GUARANTEED_MESSAGE_PUBLISH);\n    this._gmSendDisallowed = (typeof gmCap === 'boolean' && !gmCap)\n      ? () => {\n        throw new OperationError(\n        'Sending guaranteed message is not allowed by router for this client',\n        ErrorSubcode.INVALID_OPERATION,\n        null);\n      }\n      : null;\n  }\n\n  handleVirtualRouterNameChange(oldName, newName) {\n    if (this._consumers) {\n      this._consumers.flows.forEach(consumer => consumer.onVRNChanged());\n      this._consumers.reconnectingFlows.forEach(consumer => consumer.onVRNChanged());\n    }\n    this.emitSessionEvent(\n      SessionEvent.build(SessionEventCode.VIRTUALROUTER_NAME_CHANGED,\n                         `Virtual router name is changed from ${oldName} to ${newName}`,\n                         null,\n                         0,\n                         null,\n                         null));\n  }\n\n  /**\n   * @returns {String} The session's ID in hexadecimal format\n   * @private\n   */\n  get sessionIdHex() {\n    return this.sessionId && formatHexString(this.sessionId) || 'N/A';\n  }\n\n  updateTransportCompression(callback) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('updateTransportCompression called. ' +\n      `plaintextTLS: ${this._plaintextTLS} _compressedTLS: ${this._compressedTLS}`);\n    if (this._plaintextTLS) {\n      TransportLib.TransportFactory.severTls(this._transport, this._compressedTLS, callback);\n      return null;\n    }\n    if (this._compressedTLS) {\n      const newTransport = TransportLib.TransportFactory.startCompression(this._transport);\n      return newTransport;\n    }\n    // nothing to do.\n    return this._transport;\n  }\n}\n\nmodule.exports.SessionFSM = SessionFSM;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionOperation = {\n  CONNECT:         'CONNECT',\n  DISCONNECT:      'DISCONNECT',\n  CTRL:            'CTRL',\n  SEND:            'SEND',\n  QUERY_OPERATION: 'QUERY_OPERATION',\n};\n\nmodule.exports.SessionOperation = Enum.new(SessionOperation);\n","const PublisherLib = require('solclient-message-publisher');\nconst SessionPropertiesLib = require('./session-properties');\nconst SMFLib = require('solclient-smf');\nconst { APIPropertiesValidators, parseURL } = require('solclient-util');\nconst { AuthenticationScheme } = require('./authentication-schemes');\nconst { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_WARN, LOG_INFO } = require('solclient-log');\nconst { SslDowngrade } = require('./ssl-downgrades');\nconst { TransportProtocol } = require('solclient-transport');\n\nconst {\n  validateInstance,\n  valArrayIsMember,\n  valArrayOfString,\n  valBoolean,\n  valLength,\n  valNotEmpty,\n  valNumber,\n  valRange,\n  valString,\n  valStringOrArray,\n} = APIPropertiesValidators;\n\nconst ALLOWED_PROTOCOLS = ['http:', 'https:', 'ws:', 'wss:', 'tcp:', 'tcps:'];\n\nfunction valClientName(typeDesc, instance, name) {\n  // valString and valLength(160) have already been called.\n  const error =\n    SMFLib.ClientCtrlMessage.validateClientName(\n      instance[name],\n      errorMessage =>\n        new OperationError(`${typeDesc} validation: Property '${name}': ${errorMessage}`,\n                           ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n  if (error) {\n    throw error;\n  }\n}\n\nfunction valIsMember(typeDesc, instance, key, enumInstance, enumName, allowNull) {\n  const val = instance[key];\n  if (allowNull && val === null) return;\n  if (typeof (val) !== 'undefined' && !enumInstance.values.some(v => v === val)) {\n    throw new OperationError(`${typeDesc} validation: Property '${key\n                             }' must be a member of ${enumName}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n  }\n}\n\nfunction valSslExcludedProtocols(typeDesc, instance, name) {\n  const val = instance[name];\n  if (Check.array(val)) {\n    if (val.length > 0) {\n      const supported = SessionPropertiesLib.SessionProperties.SUPPORTED_SSL_PROTOCOLS;\n      val.forEach((protocol) => {\n        const prtcl = protocol.toLowerCase();\n        if (supported.indexOf(prtcl) < 0) {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                                   }' contains unsupported protocol: ${protocol}`,\n                                    ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      });\n    }\n  }\n}\n\nfunction valSslCipherSuites(typeDesc, instance, name) {\n  const val = instance[name];\n  if (val && Check.string(val) && !Check.empty(val)) {\n    const ciphers = val.split(',');\n    const supported = SessionPropertiesLib.SessionProperties.SUPPORTED_CIPHER_SUITES;\n    ciphers.forEach((cipher) => {\n      if (supported.indexOf(cipher.trim()) < 0) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                        }' contains unsupported cipher suite: '${cipher}'`,\n                        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n    });\n  }\n}\n\n// maximum number of common names is 16\nfunction valSslTrustedCommonNameList(typeDesc, instance, name) {\n  const val = instance[name];\n  if (Check.something(val) && Check.array(val) && val.length > 16) {\n    throw new OperationError(`${typeDesc} validation: Property '${name\n                }' length exceeds limit of 16`,\n                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n}\n\nfunction valUrlList(typeDesc, instance, name) {\n  const val = instance[name];\n  const valArray = typeof val === 'string' ? val.split(',') : val;\n  if (!Check.array(valArray)) {\n    throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' not an array or comma-delimited string`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n  }\n  valArray.forEach((el) => {\n    let url = null;\n    try {\n      url = parseURL(el);\n    } catch (ex) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' contained an invalid URL: ${el}`,\n                                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (!Check.included(url.protocol, ALLOWED_PROTOCOLS)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' contained a URL'${url.href\n                                }' with an invalid protocol: '${url.protocol}'`,\n                                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  });\n}\n\nfunction isHttpTransport(transportProtocol) {\n  return (transportProtocol && (\n          transportProtocol === TransportProtocol.HTTP_BINARY_STREAMING ||\n          transportProtocol === TransportProtocol.HTTP_BINARY ||\n          transportProtocol === TransportProtocol.HTTP_BASE64));\n}\n\nfunction validatePropsSupportedByTransport(transportProtocol, nonHttpPropsSet) {\n  if (nonHttpPropsSet.length > 0 && isHttpTransport(transportProtocol)) {\n    const propNames = nonHttpPropsSet.length <= 5 ? nonHttpPropsSet : nonHttpPropsSet.slice(0, 5);\n    throw new OperationError(`SessionProperties validation: properties that are not supported by transport protocol ${\n                    transportProtocol} have been set: ${propNames}`, ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n}\n\nfunction matchUrl(instance, name, regex, all) {\n  const val = instance[name];\n  if (val instanceof Array) {\n    // host list is used, iterate to find at least one entry\n    const arrayLength = val.length;\n    for (let i = 0; i < arrayLength; i++) {\n      const currententry = val[i];\n      if (!all) {\n        if (Check.string(currententry) && currententry.match(regex)) {\n          return true;\n        }\n      } else if (all) {\n        if (!Check.string(currententry) || !currententry.match(regex)) {\n          return false;\n        }\n      }\n    }\n    if (!all) {\n      return false;\n    } else if (all) {\n      return true;\n    }\n  }\n  return (Check.string(val) && val.match(regex));\n}\n\nfunction useSsl(instance, name, all) {\n  return matchUrl(instance, name, /^(https|wss|tcps):/i, all);\n}\n\nconst SessionPropertiesValidator = {\n  validate(props) {\n    // Validation rules: same as JCSMP\n    const v = validateInstance.bind(null, 'SessionProperties', props);\n    v('url', [valNotEmpty], [valStringOrArray], [valUrlList]);\n    v('userName', [valString], [valLength, 189]);\n    v('password', [valString], [valLength, 128]);\n    v('clientName', [valString], [valLength, 160], [valClientName]);\n    v('applicationDescription', [valString], [valLength, 254]);\n    v('vpnName', [valString], [valLength, 32]);\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('connectRetriesPerHost', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('connectRetries', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('reconnectRetries', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('reconnectRetryWaitInMsecs', [valNumber], [valRange, 0, 60000]);\n    v('readTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('sendBufferMaxSize', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('maxWebPayload', [valNumber], [valRange, 100, Number.MAX_VALUE]);\n    if (BUILD_ENV.TARGET_BROWSER) {\n      v('bufferedAmountQueryIntervalInMsecs', [valNumber], [valRange, 4, Number.MAX_VALUE]);\n    }\n    v('generateSendTimestamps', [valBoolean]);\n    v('generateReceiveTimestamps', [valBoolean]);\n    v('includeSenderId', [valBoolean]);\n    v('keepAliveIntervalInMsecs', [valNumber], [valRange, 0, Number.MAX_VALUE]);\n    v('keepAliveIntervalsLimit', [valNumber], [valRange, 3, Number.MAX_VALUE]);\n    v('generateSequenceNumber', [valBoolean]);\n    v('subscriberLocalPriority', [valNumber], [valRange, 1, 4]);\n    v('subscriberNetworkPriority', [valNumber], [valRange, 1, 4]);\n    v('ignoreDuplicateSubscriptionError', [valBoolean]);\n    v('ignoreSubscriptionNotFoundError', [valBoolean]);\n    v('reapplySubscriptions', [valBoolean]);\n    v('noLocal', [valBoolean]);\n    v('transportDowngradeTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('idToken', [valString]);\n    v('accessToken', [valString]);\n\n    if (props.transportProtocol && props.webTransportProtocolList) {\n      throw new OperationError(\"SessionProperties validation: Property 'transportProtocol' and \" +\n                               \"'webTransportProtocolList' cannot be set at the same time\",\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (props.webTransportProtocolList !== null && props.webTransportProtocolList !== undefined) {\n      if (!Array.isArray(props.webTransportProtocolList)) {\n        throw new OperationError(\"Property 'webTransportProtocolList' must be an array if set\",\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (props.webTransportProtocolList.length === 0) {\n        throw new OperationError(\"Property 'webTransportProtocolList' must be non-empty if set\",\n                                 ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n    }\n\n    v('authenticationScheme', [valIsMember, AuthenticationScheme, 'AuthenticationScheme', false]);\n    const useClientCert = props.authenticationScheme === AuthenticationScheme.CLIENT_CERTIFICATE;\n    if (!useSsl(props, 'url', true) && useClientCert) {\n      throw new OperationError(\"SessionProperties validation: Property 'authenticationScheme' cannot be set to client certificate \" +\n                               'for unsecured sessions', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (Check.equal(props.authenticationScheme, AuthenticationScheme.OAUTH2)) {\n      if (!useSsl(props, 'url', true)) {\n        throw new OperationError(`SessionProperties validation: Property 'authenticationScheme' ${''\n                                 }cannot be set to '${AuthenticationScheme.OAUTH2}' unless the ${''\n                                 }session property 'url' is written to use a secure ${''\n                                 }communication protocol like tcps or https.`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      if (Check.empty(props.idToken) && Check.empty(props.accessToken)) {\n        throw new OperationError(`SessionProperties validation: Property 'authenticationScheme' ${''\n                                 }can be set to ${''\n                                 }'${AuthenticationScheme.OAUTH2}' only if there ${''\n                                 }is an accompanying token set as a session property. The ${''\n                                 }token types that are ${''\n                                 }supported for OAuth authentication are OAuth2.0 Access ${''\n                                 }Tokens and OpenID Connect ID Tokens. To set an access token ${''\n                                 }you can use the accessToken session property. To set an id ${''\n                                 }you can use the idToken session property.`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    } else if (!Check.empty(props.idToken) || !Check.empty(props.accessToken)) {\n      LOG_INFO(`SessionProperties validation: Property ${''\n               }'authenticationScheme' must be set to ${''\n               }'${AuthenticationScheme.OAUTH2}'in order to use either ${''\n               } an OAUTH2 access token or an OpenID Connect ID token.`);\n    }\n\n\n    if (BUILD_ENV.TARGET_NODE) {\n      // should not happen since transportProtocol and webTransportProtocolList are not public\n      if (Check.something(props.transportProtocol) &&\n          props.transportProtocol !== TransportProtocol.WS_BINARY) {\n        throw new OperationError(\"SessionProperties validation: properties 'transportProtocol' \" +\n                                 'can only be WS_BINARY',\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (Check.something(props.webTransportProtocolList)) {\n        if (!Check.array(props.webTransportProtocolList)) {\n          throw new OperationError('SessionProperties validation: Property ' +\n                                   \"'webTransportProtocolList' should be type Array\",\n                                   ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n        if (props.webTransportProtocolList.length !== 1 ||\n            props.webTransportProtocolList[0] !== TransportProtocol.WS_BINARY) {\n          throw new OperationError('SessionProperties validation: properties ' +\n                                   \"'webTransportProtocolList' can only contain element WS_BINARY\",\n                                   ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n      }\n\n      v('sslExcludedProtocols', [valArrayOfString], [valSslExcludedProtocols]);\n      v('sslCipherSuites', [valString], [valSslCipherSuites]);\n      v('sslValidateCertificate', [valBoolean]);\n\n      if (props.sslValidateCertificate || useClientCert) {\n        v('sslTrustStores', [valArrayOfString]);\n        v('sslTrustedCommonNameList', [valArrayOfString], [valSslTrustedCommonNameList]);\n      }\n\n      if (useClientCert) {\n        v('sslPfx', [valString]);\n        v('sslPfxPassword', [valString]);\n        v('sslPrivateKey', [valString]);\n        v('sslPrivateKeyPassword', [valString]);\n        v('sslCertificate', [valString]);\n        // either sslPfx or sslPrivateKey and sslCertificate must be specified,\n        // but not at the same time\n        const sslPfxSet = Check.something(props.sslPfx) && props.sslPfx.length;\n        const sslPrivateKeySet = (\n          Check.something(props.sslPrivateKey) &&\n          props.sslPrivateKey.length\n        );\n        const sslCertSet = (\n          Check.something(props.sslCertificate) &&\n          props.sslCertificate.length\n        );\n        if (!sslPfxSet && !sslPrivateKeySet && !sslCertSet) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Either property 'sslPfx', or 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'must be set when authenticationScheme is client certificate',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n        if (sslPfxSet && (sslPrivateKeySet || sslCertSet)) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Property 'sslPfx' can only be set when 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'are not set',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n        if ((sslPrivateKeySet && !sslCertSet) || (!sslPrivateKeySet && sslCertSet)) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Property 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'must be set at the same time',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n\n      v('compressionLevel', [valNumber], [valRange, 0, 9]);\n      // Compression and web protocols do not mix.\n      if (props.compressionLevel > 0) {\n        if (props.url instanceof Array) {\n          const allTcp = props.url.every(url => Check.string(url) && url.match(/tcps?:/i));\n          if (!allTcp) {\n            throw new OperationError('SessionProperties validation: Property ' +\n                                     \"'compressionLevel' is non-zero, \" +\n                                     'but not all URLs in the host list ' +\n                                     'support compression. (tcp:// or tcps:// expected)',\n                                     ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n          }\n        } else if (Check.string(props.url)) {\n          if (!props.url.match(/tcps?:/i)) {\n            throw new OperationError('SessionProperties validation: Property ' +\n                                     \"'compressionLevel' is non-zero, \" +\n                                     'but the url does not ' +\n                                     'support compression. (tcp:// or tcps:// expected)',\n                                     ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n          }\n        } else {\n          throw new OperationError('SessionProperties validation: Property' +\n                                   \"'url' must be string or array of strings.\" +\n                                   ` instead got ${props.url} ` +\n                                   `of type ${typeof props.url}`,\n                                    ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n\n      v('sslConnectionDowngradeTo', [valIsMember, SslDowngrade, 'SslDowngrade', false]);\n    }\n    v('transportProtocol', [valIsMember, TransportProtocol, 'TransportProtocol', true]);\n    v('webTransportProtocolList',\n      [valArrayIsMember, TransportProtocol, 'TransportProtocol',\n        true, false, false]);\n\n    validatePropsSupportedByTransport(props.transportProtocol,\n                                      props.nonHTTPTransportPropsSet);\n\n    if (props.publisherProperties) {\n      PublisherLib.MessagePublisherPropertiesValidator.validate(props.publisherProperties);\n    }\n\n    // Non-errors\n\n    const recommendedMin = props.defaultConnectTimeoutInMsecs;\n    const connectTimeout = props.connectTimeoutInMsecs;\n    const transportCount = props.webTransportProtocolList\n      ? props.webTransportProtocolList.length\n      : 1;\n    if (transportCount > 1 && connectTimeout < recommendedMin) {\n      LOG_WARN(\n        `Connect timeout of ${connectTimeout} msecs is less than default and recommended ` +\n        `minimum of ${recommendedMin} msecs for current transport selection. Transport ` +\n        'downgrades may not complete.');\n    }\n  },\n};\n\nmodule.exports.SessionPropertiesValidator = SessionPropertiesValidator;\n\n","const NodeSslConstants = require('constants');\nconst PublisherLib = require('solclient-message-publisher');\nconst { APIProperties } = require('solclient-util');\nconst { AuthenticationScheme } = require('./authentication-schemes');\nconst { Check } = require('solclient-validate');\nconst { LOG_WARN } = require('solclient-log');\nconst { SslDowngrade } = require('./ssl-downgrades');\n\nfunction makeDefaults() {\n  // Defer binding. Publisher constructor may rely on profile.\n  const { MessagePublisherProperties } = PublisherLib;\n  return {\n    _vpnNameInUse:        '',\n    _virtualRouterName:   '',\n    _p2pInboxInUse:       '',\n    _p2pInboxBase:        '',\n    _userIdentification:  '',\n    _tpProtocolInUse:     null,\n    _tpContentType:       'text/plain',\n    _publisherProperties: new MessagePublisherProperties(),\n  };\n}\n\nconst DEFAULT_CIPHER_SUITES = BUILD_ENV.TARGET_NODE ? [\n  'ECDHE-RSA-AES256-GCM-SHA384',\n  'ECDHE-RSA-AES256-SHA384',\n  'ECDHE-RSA-AES256-SHA',\n  'AES256-GCM-SHA384',\n  'AES256-SHA256',\n  'AES256-SHA',\n  'ECDHE-RSA-DES-CBC3-SHA',\n  'DES-CBC3-SHA',\n  'ECDHE-RSA-AES128-GCM-SHA256',\n  'ECDHE-RSA-AES128-SHA256',\n  'ECDHE-RSA-AES128-SHA',\n  'AES128-GCM-SHA256',\n  'AES128-SHA256',\n  'AES128-SHA',\n].join(',') : null;\n\nconst SUPPORTED_CIPHER_SUITES = BUILD_ENV.TARGET_NODE ? [\n  'AES128-GCM-SHA256',\n  'AES128-SHA',\n  'AES128-SHA256',\n  'AES256-GCM-SHA384',\n  'AES256-SHA',\n  'AES256-SHA256',\n  'DES-CBC3-SHA',\n  'ECDHE-RSA-AES128-GCM-SHA256',\n  'ECDHE-RSA-AES128-SHA',\n  'ECDHE-RSA-AES128-SHA256',\n  'ECDHE-RSA-AES256-GCM-SHA384',\n  'ECDHE-RSA-AES256-SHA',\n  'ECDHE-RSA-AES256-SHA384',\n  'ECDHE-RSA-DES-CBC3-SHA',\n] : null;\n\nconst SUPPORTED_SSL_PROTOCOLS = BUILD_ENV.TARGET_NODE\n? [\n  'tlsv1',\n  'tlsv1.1',\n  'tlsv1.2',\n]\n: null;\n\n/**\n * @lends SessionProperties\n *\n */\nclass SessionPropertiesBrowser extends APIProperties {\n  /**\n   * This property is deprecated.  It is recommended to use\n   * {@link solace.SessionProperties#webTransportProtocolList} instead, which explicitly lists all\n   * web transport protocols that may be used when establishing a session.\n   *\n   * This property specifies the web transport protocol that will initially be selected by the\n   * session for its connection attempt. If this protocol fails, the session will attempt other\n   * protocols in accordance with its transport protocol connect policy.\n   *\n   * If {@link solace.FactoryProfile#cometEnabled} is `true`, the selection of\n   * any {@link solace.TransportProtocol} will result in the inclusion of\n   * fallback protocols in {@link solace.SessionProperties#webTransportProtocolList}.\n   * This makes the session incompatible with Guaranteed Messaging.\n   *\n   * To create a Guaranteed Messaging compatible session with\n   * {@link solace.FactoryProfile#cometEnabled} set to `true`, ensure the session's\n   * {@link solace.SessionProperties#webTransportProtocoList} is set to only\n   * {@link solace.TransportProtocol.WS_BINARY}.\n   *\n   *  * Mutually exclusive to property webTransportProtocolList\n   *\n   * @name solace.SessionProperties#transportProtocol\n   * @type {solace.TransportProtocol}\n   * @default null\n   * @deprecated\n   * @target browser\n   */\n  get transportProtocol() {\n    return Check.nothing(this._tpProtocol) ? null : this._tpProtocol;\n  }\n  set transportProtocol(newValue) {\n    this._tpProtocol = newValue;\n  }\n\n\n  /**\n   * @name solace.SessionProperties#transportDowngradeTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout, in milliseconds, that must elapse before the session will abandon a\n   * connection attempt with the current transport protocol if no response is received, and begin\n   * a new connection attempt with a downgraded transport protocol. If no remaining downgrades\n   * exist, the session will continue the current connection attempt until the connection timeout\n   * expires. Note that the WS_BINARY transport will also attempt a downgrade if the underlying\n   * WebSocket fails to connect before this period elapses.\n   *  * The valid range is > 0.\n   * @default 3000\n   * @target browser\n   */\n  get transportDowngradeTimeoutInMsecs() {\n    return Check.nothing(this._tpDowngradeTimeout) ? 3000 : this._tpDowngradeTimeout;\n  }\n  set transportDowngradeTimeoutInMsecs(newValue) {\n    this._tpDowngradeTimeout = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#webTransportProtocolList\n   * @type {Array.<solace.TransportProtocol>}\n   * @description The user provided web transport protocol list indicating the initial protocol\n   * to be used by the session for its connection attempt, and the protocols to try\n   * subsequently if the attempt fails.\n   *  * Mutually exclusive to property transportProtocol\n   * @default null\n   * @target browser\n   */\n  get webTransportProtocolList() {\n    return Check.nothing(this._transportProtocolList)\n             ? null\n             : this._transportProtocolList;\n  }\n  set webTransportProtocolList(newValue) {\n    this._transportProtocolList = newValue;\n  }\n\n  /**\n   * @private\n   * @name SessionProperties#bufferedAmountQueryIntervalInMsecs\n   * @type {Number}\n   * @description When WebSocket transport protocol is used, SolClient uses this property\n   * and {@link solace.SessionProperties.maxWebPayload} to throttle the publishing rate in order to\n   * avoid network saturation.\n   *  * The valid range is >=4.\n   * @default 100\n   */\n  get bufferedAmountQueryIntervalInMsecs() {\n    return Check.nothing(this._bufferedAmountQueryInterval)\n    ? 100\n    : this._bufferedAmountQueryInterval;\n  }\n  set bufferedAmountQueryIntervalInMsecs(newValue) {\n    this._bufferedAmountQueryInterval = newValue;\n  }\n\n\n  /**\n   *\n   * @name solace.SessionProperties#transportProtocolInUse\n   * @type {String}\n   * @description This property is deprecated.\n   * Use {@link solace.SessionProperties#webTransportProtocolInUse} instead.\n   * @readonly\n   * @target browser\n   * @deprecated\n   */\n  get transportProtocolInUse() {\n    return this._tpProtocolInUse || null;\n  }\n  _setTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#webTransportProtocolInUse\n   * @type {String}\n   * @description A read-only property about the web transport protocol that is currently being\n   * used by the session for its current connection or connection attempt. To determine which\n   * web transport protocol was successfully used by the API, interrogate this property after the\n   * session event UP_NOTICE is dispatched.\n   * @readonly\n   * @target browser\n   */\n  get webTransportProtocolInUse() {\n    return this._tpProtocolInUse || null;\n  }\n  _setWebTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#transportContentType\n   * @type {String}\n   * @description Transport content-type override for HTTP transports\n   * @default 'text/plain'\n   * @internal\n   */\n  get transportContentType() {\n    return this._tpContentType || 'text/plain';\n  }\n  set transportContentType(newValue) {\n    this._tpContentType = newValue;\n  }\n\n  _lendsInspect() {\n    return {\n      'bufferedAmountQueryIntervalInMsecs': this.bufferedAmountQueryIntervalInMsecs,\n      'transportContentType':               this.transportContentType,\n      'transportDowngradeTimeoutInMsecs':   this.transportDowngradeTimeoutInMsecs,\n      'transportProtocol':                  this.transportProtocol,\n      'transportProtocolInUse':             this.transportProtocolInUse,\n      'webTransportProtocolList':           this.webTransportProtocolList,\n    };\n  }\n}\n\nclass SessionPropertiesNode extends APIProperties {\n  /**\n   * @internal\n   */\n  get transportProtocol() {\n    return this._tpProtocol;\n  }\n  set transportProtocol(value) {\n    this._tpProtocol = value;\n  }\n\n  /**\n   * @internal\n   */\n  get webTransportProtocolList() {\n    return this._transportProtocolList;\n  }\n  set webTransportProtocolList(value) {\n    this._transportProtocolList = value;\n  }\n\n  /**\n   * @internal\n   */\n  get transportDowngradeTimeoutInMsecs() {\n    return this._tpDowngradeTimeout || 86400000; // All day\n  }\n  set transportDowngradeTimeoutInMsecs(value) {\n    this._tpDowngradeTimeout = value;\n  }\n\n  /**\n   * @internal\n   * @deprecated\n   */\n  get transportProtocolInUse() {\n    return this._tpProtocolInUse;\n  }\n  _setTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   * @internal\n   */\n  get webTransportProtocolInUse() {\n    return this._tpProtocolInUse;\n  }\n  _setWebTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   * @internal\n   */\n  get transportContentType() {\n    return this._tpContentType;\n  }\n  set transportContentType(value) {\n    this._tpContentType = value;\n  }\n\n  // TLS connection options\n\n  /**\n   * @name solace.SessionProperties#sslExcludedProtocols\n   * @type {Array.<String>}\n   * @description An array of TLS protocols to be excluded when negotiating which protocol\n   * to use.\n   *  * Allowed values are: TLSv1, TLSv1.1, TLSv1.2\n   *  * Note: when a protocol version is excluded without excluding all of its\n   *    previous protocol versions, the effect is to also exclude all subsequent\n   *    protocol versions.\n   * @default null\n   * @target node\n   */\n  get sslExcludedProtocols() {\n    return Check.nothing(this._sslExcludedProtocols)\n      ? null\n      : this._sslExcludedProtocols;\n  }\n  set sslExcludedProtocols(newValue) {\n    this._sslExcludedProtocols = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslCipherSuites\n   * @type {String}\n   * @description A comma separated list of cipher suites in order of preference used for TLS\n   * connections.\n   *  * Allowed values:\n   *     * AES128-GCM-SHA256\n   *     * AES128-SHA\n   *     * AES128-SHA256\n   *     * AES256-GCM-SHA384\n   *     * AES256-SHA\n   *     * AES256-SHA256\n   *     * DES-CBC3-SHA\n   *     * ECDHE-RSA-AES128-GCM-SHA256\n   *     * ECDHE-RSA-AES128-SHA\n   *     * ECDHE-RSA-AES128-SHA256\n   *     * ECDHE-RSA-AES256-GCM-SHA384\n   *     * ECDHE-RSA-AES256-SHA\n   *     * ECDHE-RSA-AES256-SHA384\n   *     * ECDHE-RSA-DES-CBC3-SHA\n   *     * RC4-SHA\n   *     * RC4-MD5\n   * @default {@link solace.SessionProperties.DEFAULT_CIPHER_SUITES}\n   * @target node\n   */\n  get sslCipherSuites() {\n    return Check.nothing(this._sslCipherSuites)\n      ? DEFAULT_CIPHER_SUITES\n      : this._sslCipherSuites;\n  }\n  set sslCipherSuites(newValue) {\n    this._sslCipherSuites = newValue;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#sslValidateCertificate\n   * @type {Boolean}\n   * @description Whether the server certificate shall be verified against the list of\n   * certificates in the trust stores. If set to false, all certificate validation is disabled,\n   * including date, hostname and common name validation.\n   * @default true\n   * @target node\n   */\n  get sslValidateCertificate() {\n    // if the value is undefined, then use environment variable\n    if (this._sslValidateCert === undefined) return (process.env.NODE_TLS_REJECT_UNAUTHORIZED !== '0');\n    if (this._sslValidateCert === null) return true;\n    return this._sslValidateCert;\n  }\n  set sslValidateCertificate(newValue) {\n    this._sslValidateCert = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslTrustStores\n   * @type {Array.<String>}\n   * @description An array of file names of trusted certificates in PEM format.\n   * If not set, and {@link solace.SessionProperties#sslValidateCertificate} is set to true,\n   * the server certificate will be validated against well known \"root\" CAs.\n   *    * Mutually exclusive to sslPfx property when\n   *      {@link solace.SessionProperties#sslValidateCertificate} is set\n   * @default null\n   * @target node\n   */\n  get sslTrustStores() {\n    return Check.nothing(this._sslTrustStores)\n      ? null\n      : this._sslTrustStores;\n  }\n  set sslTrustStores(newValue) {\n    this._sslTrustStores = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslTrustedCommonNameList\n   * @type {Array.<String>}\n   * @description An array of acceptable common names for matching with the server certificate.\n   * If set to a non-empty array, the API will override the default hostname validation logic\n   * provided by Node.js with its own implemenation; if set to empty array, no hostname\n   * validation will be performed.\n   *    * Only relevant when {@link solace.SessionProperties#sslValidateCertificate} is set\n   *      to true\n   *    * Note that leading and trailing whitespaces are considered to be part of the common\n   *      names and are not ignored\n   * @default null\n   * @target node\n   */\n  get sslTrustedCommonNameList() {\n    return Check.nothing(this._sslTrustedCNList)\n      ? null\n      : this._sslTrustedCNList;\n  }\n  set sslTrustedCommonNameList(newValue) {\n    this._sslTrustedCNList = newValue;\n  }\n\n  // Client certificates related\n\n  /**\n   * @name solace.SessionProperties#sslPfx\n   * @type {String}\n   * @description The file name of a file containing private key, certificate and optional\n   * CA certificates of the client in PFX or PKCS12 format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPrivateKey, sslCertificate and sslTrustStores properties\n   * @default \"\"\n   * @target node\n   */\n  get sslPfx() {\n    return Check.nothing(this._sslPfx)\n      ? ''\n      : this._sslPfx;\n  }\n  set sslPfx(newValue) {\n    this._sslPfx = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPfxPassword\n   * @type {String}\n   * @description A string containing password for the client pfx file.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   * @default empty string\n   * @target node\n   */\n  get sslPfxPassword() {\n    return Check.nothing(this._sslPfxPasswd) ? '' : this._sslPfxPasswd;\n  }\n  set sslPfxPassword(newValue) {\n    this._sslPfxPasswd = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPrivateKey\n   * @type {String}\n   * @description The file name of a file containing private key of the client in PEM format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPfx property\n   * @default empty string\n   * @target node\n   */\n  get sslPrivateKey() {\n    return Check.nothing(this._sslPrivateKey) ? '' : this._sslPrivateKey;\n  }\n  set sslPrivateKey(newValue) {\n    this._sslPrivateKey = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPrivateKeyPassword\n   * @type {String}\n   * @description A string containg password for the client private key.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   * @default empty string\n   * @target node\n   */\n  get sslPrivateKeyPassword() {\n    return Check.nothing(this._sslPrivateKeyPasswd) ? '' : this._sslPrivateKeyPasswd;\n  }\n  set sslPrivateKeyPassword(newValue) {\n    this._sslPrivateKeyPasswd = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslCertificate\n   * @type {String}\n   * @description The file name of a file containing certificate key of the client in PEM\n   * format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPfx property\n   * @default empty string\n   * @target node\n   */\n  get sslCertificate() {\n    return Check.nothing(this._sslCertificate) ? '' : this._sslCertificate;\n  }\n  set sslCertificate(newValue) {\n    this._sslCertificate = newValue;\n  }\n\n  // TLS connection options\n\n  /**\n   * @name SessionProperties#sslProtocol\n   * @type {String}\n   * @description The SSL protocols to use.\n   *    * Allowed values are: SSLv3, TLSv1, TLSv1.1, TLSv1.2\n   * @target node\n   */\n  get sslProtocol() {\n    return this._sslProtocol;\n  }\n  set sslProtocol(newValue) {\n    this._sslProtocol = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#compressionLevel\n   * @type {Number}\n   * @description zlib compression level (1-9) or no compression (0)\n   *\n   * When this property is set to a valid, non-zero value (1-9):\n   *\n   * * tcp:// connections are established compressed.\n   * This usually requires connecting to a different tcp port on the router,\n   * 55003 by default.\n   *\n   * * tcps:// connections are established uncompressed,\n   * but then negotiate compression on login.\n   * Compression before encryption allows inference of similarities between messages\n   * from observing packet sizes on the network.\n   * This could lead to chosen Plaintext attacks.\n   * Can be combined with sslDowngradeConnectionTo for no encryption beyond authentication.\n   *\n   * * ws(s):// and http(s):// transports do not support compression and are considered invalid.\n   *\n   * @default 0\n   * @target node\n   */\n\n  get compressionLevel() {\n    return Check.nothing(this._compressionLevel) ? 0 : this._compressionLevel;\n  }\n  set compressionLevel(newValue) {\n    this._compressionLevel = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslConnectionDowngradeTo\n   * @type {solace.SslDowngrade}\n   * @description Disable encryption after authentication\n   *\n   * When set to {@link solace.SslDowngrade.PLAINTEXT},\n   * all message traffic beyond the initial login is unencrypted.\n   * A TLS connection is negotiated on the regular TLS port (55443 by default),\n   * TLS authentication schemes can be used, same as without this option.\n   * After a successful login however, a TLS shutdown is performed,\n   * and the same socket is then used for unencrypted message traffic.\n   *\n   * Please note this way plain text traffic passes on a port\n   * usually associated with encryption (55443 by default)\n   *\n   * This downgrade is only supported for tcps:// connections,\n   * all other URL schemes ignore this option.\n   *\n   * Can be combined with compressionLevel for\n   * non-encrypted, compressed message transfer after login.\n   *\n   * @default {@link solace.SslDowngrade.NONE}\n   * @target node\n   */\n  get sslConnectionDowngradeTo() {\n    return Check.nothing(this._sslConnectionDowngradeTo) ?\n      SslDowngrade.NONE : this._sslConnectionDowngradeTo;\n  }\n\n  set sslConnectionDowngradeTo(newValue) {\n    this._sslConnectionDowngradeTo = newValue;\n  }\n\n  _lendsInspect() {\n    return {\n      'sslExcludedProtocols':     this.sslExcludedProtocols,\n      'sslCipherSuites':          this.sslCipherSuites,\n      'sslValidateCertificate':   this.sslValidateCertificate,\n      'sslTrustStores':           this.sslTrustStores,\n      'sslTrustedCommonNameList': this.sslTrustedCommonNameList,\n      'sslPfx':                   this.sslPfx,\n      'sslPfxPassword':           this.sslPfxPassword ? '*****' : this.sslPfxPassword,\n      'sslPrivateKey':            this.sslPrivateKey,\n      'sslPrivateKeyPassword':    this.sslPrivateKeyPassword ? '*****' : this.sslPrivateKeyPassword,\n      'sslCertificate':           this.sslCertificate,\n      'sslProtocol':              this.sslProtocol,\n      'compressionLevel':         this.compressionLevel,\n      'sslConnectionDowngradeTo': this.sslConnectionDowngradeTo,\n    };\n  }\n}\n\nconst SessionPropertiesBase = BUILD_ENV.TARGET_NODE\n  ? SessionPropertiesNode\n  : SessionPropertiesBrowser;\n\n/**\n * @classdesc\n * Represents a session properties object. Passed in to\n * {@link solace.SolclientFactory.createSession} when creating a {@link solace.Session} instance.\n * @memberof solace\n * @extends APIProperties\n */\nclass SessionProperties extends SessionPropertiesBase {\n\n  /**\n   * @constructor\n   * @param {Object} options Properties to apply to the newly constructed object.\n   */\n  constructor(options) {\n    super(makeDefaults(), options);\n  }\n\n  /**\n   * The authentication scheme used when establishing the session.\n   * @name solace.SessionProperties#authenticationScheme\n   * @type {solace.AuthenticationScheme}\n   * @default {@link solace.AuthenticationScheme.BASIC}\n   */\n  get authenticationScheme() {\n    return Check.nothing(this._authScheme)\n        ? AuthenticationScheme.BASIC\n        : this._authScheme;\n  }\n  set authenticationScheme(newValue) {\n    this._authScheme = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#accessToken\n   * @type {String}\n   * @description The access token required for OAUTH2 authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get accessToken() {\n    return Check.empty(this._accessToken)\n        ? ''\n        : this._accessToken;\n  }\n\n  set accessToken(newValue) {\n    this._accessToken = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#idToken\n   * @type {String}\n   * @description The ID token required for OIDC authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get idToken() {\n    return Check.empty(this._idToken)\n        ? ''\n        : this._idToken;\n  }\n\n  set idToken(newValue) {\n    this._idToken = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#issuerIdentifier\n   * @type {String}\n   * @description The issuer identifier is optional for OAUTH2 authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get issuerIdentifier() {\n    return Check.empty(this._issuerIdentifier)\n        ? ''\n        : this._issuerIdentifier;\n  }\n\n  set issuerIdentifier(newValue) {\n    if (!Check.type(newValue, 'string')) {\n      LOG_WARN(`Failed to set issuer identifier because the pased value ${''\n                }was not of type String. The passed issuer identifier ${''\n                }must be of type String. Setting issuer identifier to ${''\n                }default value empty string.`);\n      this._issuerIdentifier = '';\n    } else if (Check.empty(newValue)) {\n      LOG_WARN(`Failed to set the issuer identifier because the passed string was empty ${''\n                }or null. The passed issuer identifier must not be empty or null. Setting ${''\n                }issuer identifier to default value empty string.`);\n    } else {\n      this._issuerIdentifier = newValue;\n    }\n  }\n\n  /**\n   * The URL or URLs of the messaging service to connect to.  The URL is typically of the form\n   * `<protocol>://<host[:port]>`, where:\n   *  * `protocol` is one of `ws`, `wss`, `http`, `https`, `tcp` or `tcps`.\n   *  (Note to developers who also use the browser variant of this SDK:\n   *  Browsers do not support the `tcp` and `tcps` protocols.)\n   *  * `host` is a hostname or IP address of the router to connect to.\n   *  * `port` is the port on which the messaging service is listening. The default is the\n   *    well-known port for the service associated with the given protocol, if any.\n   *\n   * Additionally, note:\n   *  * When an Array is provided, each element is expected to be a string of the above format.\n   *    The API will attempt to connect to these URLs in the specified order.\n   *  * Numerical IPv6 addresses must be enclosed in square brackets, e.g. tcp://[2001:db8::1]\n   * @name solace.SessionProperties#url\n   * @type {String|Array.<String>}\n   * @default \"\"\n   * @target node\n   */\n  /**\n   * The URL or URLs of the messaging service to connect to.  The URL is typically of the form\n   * `<protocol>://<host[:port]>`, where:\n   *  * `protocol` is one of `ws`, `wss`, `http`, `https'.\n   *  (Note to developers who also ise the NodeJS variant of this SDK:\n   *  NodeJS also supports the 'tcp' and 'tcps' protocols, but browsers do not.)\n   *  * `host` is a hostname or IP address of the router to connect to.\n   *  * `port` is the port on which the messaging service is listening. The default is the\n   *    well-known port for the service associated with the given protocol, if any.\n   *\n   * Additionally, note:\n   *  * When an Array is provided, each element is expected to be a string of the above format.\n   *    The API will attempt to connect to these URLs in the specified order.\n   *  * Cross-domain restrictions should be taken into consideration when deploying web\n   *    applications with messaging capabilities. See the API User Guide for more\n   *    information.\n   *  * Numerical IPv6 addresses must be enclosed in square brackets, e.g. ws://[2001:db8::1]\n   * @name solace.SessionProperties#url\n   * @type {String|Array.<String>}\n   * @default \"\"\n   * @target browser\n   */\n  get url() {\n    return Check.nothing(this._url) ? '' : this._url;\n  }\n\n  set url(newValue) {\n    this._url = newValue;\n  }\n\n  //  ======================== Credentials  ========================\n\n  /**\n   * @name solace.SessionProperties#password\n   * @type {String}\n   * @description The password required for authentication.\n   * @default \"\"\n   */\n  get password() {\n    return Check.nothing(this._password) ? '' : this._password;\n  }\n\n  set password(newValue) {\n    this._password = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#userName\n   * @type {String}\n   * @description  The client username required for authentication.\n   * @default \"\"\n   */\n  get userName() {\n    return Check.nothing(this._userName) ? '' : this._userName;\n  }\n\n  set userName(newValue) {\n    this._userName = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#clientName\n   * @type {String}\n   * @default '' (automatically generated)\n   * @description The client name that is used during login as a unique identifier for the session\n   * on the Solace Message Router.\n   *  * An empty string causes a unique client name to be generated\n   *     automatically.\n   *  * If specified, it must be a valid Topic name, and a maximum of 160 bytes in length.\n   *  * This property is also used to uniquely identify the sender in\n   *    a message's senderId field if {@link solace.SessionProperties.includeSenderId}\n   *    is set.\n   * @default \"\"\n   */\n  get clientName() {\n    return Check.nothing(this._clientName) ? '' : this._clientName;\n  }\n\n  set clientName(newValue) {\n    this._clientName = newValue;\n  }\n\n  /**\n   * A string that uniquely describes the application instance.\n   *  * If left blank, the API will generate a description string\n   *    using the current user-agent string.\n   * @default \"\"\n   * @name solace.SessionProperties#applicationDescription\n   * @type {String}\n   */\n  get applicationDescription() {\n    return Check.nothing(this._appDesc) ? '' : this._appDesc;\n  }\n  set applicationDescription(newValue) {\n    this._appDesc = newValue;\n  }\n\n  /**\n   * The Message VPN name that the client is requesting for this session.\n   * @default \"\"\n   * @name solace.SessionProperties#vpnName\n   * @type {String}\n   */\n  get vpnName() {\n    return Check.nothing(this._vpnName) ? '' : this._vpnName;\n  }\n  set vpnName(newValue) {\n    this._vpnName = newValue;\n  }\n\n  /**\n   * A read-only session property that indicates which Message\n   * VPN the session is connected to. When not connected, or when not in client mode,\n   * an empty string is returned.\n   * @default \"\"\n   * @name solace.SessionProperties#vpnNameInUse\n   * @type {String}\n   * @readonly\n   */\n  get vpnNameInUse() {\n    return Check.nothing(this._vpnNameInUse) ? '' : this._vpnNameInUse;\n  }\n  /**\n   * @private\n   * @param {String} value The vpn name currently being used.\n   */\n  _setVpnNameInUse(value) {\n    this._vpnNameInUse = value;\n  }\n\n  /**\n   * @name solace.SessionProperties#virtualRouterName\n   * @type {String}\n   * @description A read-only property that indicates the connected Solace Message Router's\n   * virtual router name.\n   * @default \"\"\n   * @readonly\n   */\n  get virtualRouterName() {\n    return Check.nothing(this._virtualRouterName) ? '' : this._virtualRouterName;\n  }\n  /**\n   * @private\n   * @param {String} value The current virtual router name.\n   */\n  _setVirtualRouterName(value) {\n    this._virtualRouterName = value;\n  }\n\n  //  ======================== Connection Strategies ========================\n  /**\n   * @name solace.SessionProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a connect operation to a given host.\n   *  If no value is provided, the default is 8000.\n   *   * The valid range is > 0.\n   * @default 8000\n   * @target node\n   */\n  /**\n   * @name solace.SessionProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a connect operation to a given host.\n   *  If no value is provided, the default is calculated as shown below.\n   *   * The valid range is > 0.\n   * @default max(8000, 1000 + webTransportProtocolList.length * transportDowngradeTimeoutInMsecs)\n   * @target browser\n   */\n  get connectTimeoutInMsecs() {\n    if (Check.nothing(this._connectTimeout)) {\n      return this.defaultConnectTimeoutInMsecs;\n    }\n    return this._connectTimeout;\n  }\n  set connectTimeoutInMsecs(newValue) {\n    this._connectTimeout = newValue;\n  }\n\n  /**\n   * @internal\n   */\n  get defaultConnectTimeoutInMsecs() {\n    const minTimeout = 8000;\n    const { webTransportProtocolList, transportDowngradeTimeoutInMsecs } = this;\n    const transportCount = webTransportProtocolList ? webTransportProtocolList.length : 1;\n    const margin = transportCount > 1 ? 1000 : 0;\n    const connectDowngradeDefault = transportCount * transportDowngradeTimeoutInMsecs + margin;\n    return Math.max(minTimeout, connectDowngradeDefault);\n  }\n\n  /**\n   * @name solace.SessionProperties#connectRetries\n   * @type {Number}\n   * @description The number of times to retry connecting during initial connection setup.\n   *\n   * When using a host list, each traversal of the list is considered a try; therefore, if\n   * `connectRetries === 2`, the host list will be traversed up to three times: once\n   * for the initial try, and twice more for the retries. Each retry begins with the first host\n   * listed. After each unsuccessful attempt to connect to a host, the API waits for the amount\n   * of time set for {@link solace.SessionProperties#reconnectRetryWaitInMsecs} before attempting\n   * another connection. The next connection attempt may be to the same host,\n   * see {@link solace.SessionProperties#connectRetriesPerHost}.\n   *\n   * If an established connection fails, the reconnection is attempted with\n   * {@link solace.SessionProperties#reconnectRetries} retries instead.\n   *\n   *  * The valid range is connectRetries >= -1.\n   *  * -1 means try to connect forever.\n   *  * 0 means no automatic connection retries; the API will try once and then give up.\n   *  * connectRetries >= 1 means reattempt connection n times.\n   * @default 20\n   */\n  get connectRetries() {\n    return Check.nothing(this._connectRetries) ? 20 : this._connectRetries;\n  }\n  set connectRetries(newValue) {\n    this._connectRetries = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#connectRetriesPerHost\n   * @type {Number}\n   * @description When using a host list, this property defines how many times to\n   * try to connect to a single host before moving to the next host in the list.\n   *\n   *  * The valid range is connectRetriesPerHost >= -1.\n   *  * -1 means attempt an infinite number of connection retries. The API will only\n   *    attempt to connect to the first host in the list.\n   *  * 0 means make a single connection attempt per host, with no retries.\n   * @default 0\n   */\n  get connectRetriesPerHost() {\n    return Check.nothing(this._connectRetriesPerHost) ? 0 : this._connectRetriesPerHost;\n  }\n  set connectRetriesPerHost(newValue) {\n    this._connectRetriesPerHost = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#reconnectRetryWaitInMsecs\n   * @type {Number}\n   * @description How much time to wait (in ms) between each attempt to connect to\n   * a host.\n   * If a connect attempt is not successful, the API waits for the amount of time\n   * specified, and then makes another attempt to connect.\n   * {@link solace.SessionProperties#connectRetriesPerHost} sets how many connection\n   * attempts will be made before moving on to the next host in the list.\n   * The valid range is >= 0 and <= 60000.\n   * @default 3000\n   */\n  get reconnectRetryWaitInMsecs() {\n    return Check.nothing(this._reconnectRetryWaitInMsecs) ? 3000 : this._reconnectRetryWaitInMsecs;\n  }\n  set reconnectRetryWaitInMsecs(newValue) {\n    this._reconnectRetryWaitInMsecs = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#reconnectRetries\n   * @type {Number}\n   * @description The number of times to retry connecting after a connected session goes down.\n   *\n   * When using a host list, each traversal of the list is considered a try; therefore, if\n   * `reconnectRetries === 2`, the host list will be traversed up to three times: once\n   * for the initial try, and twice more for the retries. Each retry begins with the first host\n   * listed. After each unsuccessful attempt to connect to a host, the API waits for the amount\n   * of time set for {@link solace.SessionProperties#reconnectRetryWaitInMsecs} before attempting\n   * another connection. The next reconnect attempt may be to the same host,\n   * see {@link solace.SessionProperties#connectRetriesPerHost}.\n   *\n   *  * The valid range is reconnectRetries >= -1.\n   *  * -1 means try to reconnect forever.\n   *  * 0 means no automatic reconnect retries; the API will try once and then give up.\n   *  * reconnectRetries >= 1 means reattempt reconnect n times.\n   * @default 20\n   */\n  get reconnectRetries() {\n    return Check.nothing(this._reconnectRetries) ? 20 : this._reconnectRetries;\n  }\n  set reconnectRetries(newValue) {\n    this._reconnectRetries = newValue;\n  }\n\n  //  ======================== message properties ========================\n  /**\n   * @name solace.SessionProperties#generateSendTimestamps\n   * @type {Boolean}\n   * @description When enabled, a send timestamp is automatically included\n   * (if not already present) in the Solace-defined fields for\n   * each message sent.\n   * @default  false\n   */\n  get generateSendTimestamps() {\n    return Check.nothing(this._genSendTimestamps) ? false : this._genSendTimestamps;\n  }\n  set generateSendTimestamps(newValue) {\n    this._genSendTimestamps = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#generateReceiveTimestamps\n   * @type {Boolean}\n   * @description When enabled, a receive timestamp is recorded for\n   * each message and passed to the session's message callback receive handler.\n   * @default  false\n   */\n  get generateReceiveTimestamps() {\n    return Check.nothing(this._genReceiveTimestamps) ? false : this._genReceiveTimestamps;\n  }\n  set generateReceiveTimestamps(newValue) {\n    this._genReceiveTimestamps = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#includeSenderId\n   * @type {Boolean}\n   * @description When enabled, a sender ID is automatically included\n   * (if not already present) in the Solace-defined fields for each message\n   * sent.\n   * @default  false\n   */\n  get includeSenderId() {\n    return Check.nothing(this._includeSenderId) ? false : this._includeSenderId;\n  }\n  set includeSenderId(newValue) {\n    this._includeSenderId = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#generateSequenceNumber\n   * @type {Boolean}\n   * @description When enabled, a sequence number is automatically\n   * included (if not already present) in the Solace-defined fields\n   * for each message sent.\n   * @default  false\n   */\n  get generateSequenceNumber() {\n    return Check.nothing(this._genSequenceNumber) ? false : this._genSequenceNumber;\n  }\n  set generateSequenceNumber(newValue) {\n    this._genSequenceNumber = newValue;\n  }\n\n  //  ======================== Keep Alive ========================\n  /**\n   * @name solace.SessionProperties#keepAliveIntervalInMsecs\n   * @type {Number}\n   * @description The amount of time (in milliseconds) to wait between sending\n   * out keep-alive messages to the Solace Message Router.\n   *  * The valid range is > 0.\n   * @default  3000\n   */\n  get keepAliveIntervalInMsecs() {\n    return Check.nothing(this._kaInterval) ? 3000 : this._kaInterval;\n  }\n  set keepAliveIntervalInMsecs(newValue) {\n    this._kaInterval = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#keepAliveIntervalsLimit\n   * @type {Number}\n   * @description The maximum number of consecutive Keep-Alive messages that\n   * can be sent without receiving a response before the session is declared down\n   * and the connection is closed by the API.\n   *  * The valid range is >= 3.\n   * @default 3\n   */\n  get keepAliveIntervalsLimit() {\n    return Check.nothing(this._kaIntervalsLimit) ? 3 : this._kaIntervalsLimit;\n  }\n  set keepAliveIntervalsLimit(newValue) {\n    this._kaIntervalsLimit = newValue;\n  }\n\n  // ======================== P2P Inbox ========================\n\n  /**\n   * @name solace.SessionProperties#p2pInboxInUse\n   * @type {String}\n   * @description A read-only string that indicates the default\n   * reply-to destination used for any request messages sent from this session.\n   * See {@link solace.Session#sendRequest}.\n   * This parameter is only valid when the session is connected.\n   * @default \"\"\n   * @readonly\n   */\n  get p2pInboxInUse() {\n    return Check.nothing(this._p2pInboxInUse) ? '' : this._p2pInboxInUse;\n  }\n  /**\n   * @private\n   * @param {String} value The current P2P subscription.\n   */\n  _setP2pInboxInUse(value) {\n    this._p2pInboxInUse = value;\n  }\n\n  /**\n   * @private\n   *\n   * @name solace.SessionProperties#p2pInboxBase\n   * @description A read-only information string that stores the P2P topic subscription\n   * obtained from the Solace Message Router.\n   * This parameter is only valid when the session is connected.\n   * @default  \"\"\n   * @readonly\n   */\n  get p2pInboxBase() {\n    return Check.nothing(this._p2pInboxBase) ? '' : this._p2pInboxBase;\n  }\n  /**\n   * @private\n   * @param {String} value The current P2P inbox root subscription. The subscription on the router\n   *   additionally contains '/>', so extra topic levels can be added to this root and messages to\n   *   those topics will be attracted with the subscription.\n   */\n  _setP2pInboxBase(value) {\n    this._p2pInboxBase = value;\n  }\n\n  /**\n   * @name solace.SessionProperties#userIdentification\n   * @type {String}\n   * @description A read-only string providing information\n   * about the application, such as the name of operating system\n   * that is running the application.\n   * @default  \"\"\n   * @readonly\n   */\n  get userIdentification() {\n    return Check.nothing(this._userIdentification) ? '' : this._userIdentification;\n  }\n  /**\n   * @private\n   * @param {String} value The current userId\n   */\n  _setUserIdentification(value) {\n    this._userIdentification = value;\n  }\n\n  // ================== Subscriptions ========================\n  /**\n   *\n   * @name solace.SessionProperties#subscriberLocalPriority\n   * @type {Number}\n   * @description Subscriber priorities are used by the Solace Message Router to distribute messages\n   * that have the {@link solace.Message#setDeliverToOne} flag set to true. These messages are sent\n   * to the subscriber with the highest priority. Subscribers have two priorities; this\n   * priority is for messages published locally.\n   *  * The valid range is 1..4\n   * @default 1\n   * @deprecated Use Shared Subscriptions instead\n   */\n  get subscriberLocalPriority() {\n    return Check.nothing(this._subLocalPriority) ? 1 : this._subLocalPriority;\n  }\n  set subscriberLocalPriority(newValue) {\n    this._subLocalPriority = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#subscriberNetworkPriority\n   * @type {Number}\n   * @description Subscriber priorities are used by the Solace Message Router to distribute messages\n   * that have the {@link solace.Message#setDeliverToOne} flag set to true. These messages are sent\n   * to the subscriber with the highest priority.\n   *\n   * Subscribers have two priorities; this priority is for messages published on Solace Message\n   * Routers other than the one that the client is connected to.\n   *  * The valid range is 1..4\n   * @default  1\n   * @deprecated Use Shared Subscriptions instead\n   */\n  get subscriberNetworkPriority() {\n    return Check.nothing(this._subNetworkPriority) ? 1 : this._subNetworkPriority;\n  }\n  set subscriberNetworkPriority(newValue) {\n    this._subNetworkPriority = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#ignoreDuplicateSubscriptionError\n   * @type {Boolean}\n   * @description Used to ignore duplicate subscription errors on subscribe.\n   * @default  true\n   */\n  get ignoreDuplicateSubscriptionError() {\n    return Check.nothing(this._ignoreDupSubError) ? true : this._ignoreDupSubError;\n  }\n  set ignoreDuplicateSubscriptionError(newValue) {\n    this._ignoreDupSubError = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#ignoreSubscriptionNotFoundError\n   * @type {Boolean}\n   * @description Used to ignore subscription not found errors on unsubscribe.\n   * @default  true\n   */\n  get ignoreSubscriptionNotFoundError() {\n    return Check.nothing(this._ignoreSubNotFoundError) ? true : this._ignoreSubNotFoundError;\n  }\n  set ignoreSubscriptionNotFoundError(newValue) {\n    this._ignoreSubNotFoundError = newValue;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#reapplySubscriptions\n   * @type {Boolean}\n   * @description Set to 'true' to have the API remember subscriptions and reapply them upon\n   * calling {@link solace.Session#connect} on a disconnected session.\n   * @default  false\n   */\n  get reapplySubscriptions() {\n    return Check.nothing(this._reapplySubcriptions) ? false : this._reapplySubcriptions;\n  }\n  set reapplySubscriptions(newValue) {\n    this._reapplySubcriptions = newValue;\n  }\n\n  // ================== AD configuration ========================\n  /**\n   * Sets the guaranteed messaging publisher properties for the session.\n   * If the supplied value is not a {@link solace.MessagePublisherProperties},\n   * one will be constructed using the supplied value as an argument.\n   *\n   * @name solace.SessionProperties#publisherProperties\n   * @type {solace.MessagePublisherProperties}\n   */\n  get publisherProperties() {\n    return this._publisherProperties;\n  }\n  set publisherProperties(val) {\n    const { MessagePublisherProperties } = PublisherLib;\n    this._publisherProperties = val instanceof MessagePublisherProperties\n      ? val\n      : new MessagePublisherProperties(val);\n  }\n\n  // ================== Transport configuration ========================\n\n  /**\n   *\n   * @name solace.SessionProperties#noLocal\n   * @type {Boolean}\n   * @description Set to 'true' to signal the Solace Message Router that messages published on the\n   * session should not be received on the same session even if the client has a subscription that\n   * matches the published topic. If this restriction is requested, and the Solace Message Router\n   * does not have No Local support, the session connect will fail.\n   * @default  false\n   */\n  get noLocal() {\n    return Check.nothing(this._noLocal) ? false : this._noLocal;\n  }\n  set noLocal(newValue) {\n    this._noLocal = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#readTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a reply to\n   * come back from the Solace Message Router. This timeout serves as the default\n   * request timeout for {@link solace.Session#subscribe},\n   * {@link solace.Session#unsubscribe}, {@link solace.Session#updateProperty}.\n   *  * The valid range is >= 0.\n   * @default 10000\n   */\n  get readTimeoutInMsecs() {\n    return Check.nothing(this._readTimeout) ? 10000 : this._readTimeout;\n  }\n  set readTimeoutInMsecs(newValue) {\n    this._readTimeout = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sendBufferMaxSize\n   * @type {Number}\n   * @description The maximum buffer size for the transport session. This size must be bigger\n   * than the largest message an application intends to send on the session.\n   *\n   * The session buffer size configured using the sendBufferMaxSize\n   * session property controls SolClient buffering of transmit messages. When\n   * sending small messages, the session buffer size should be set to multiple times\n   * the typical message size to improve the performance. Regardless of the buffer\n   * size, SolClient always accepts at least one message to transmit. So even if a\n   * single message exceeds sendBufferMaxSize, it is accepted and\n   * transmitted as long as the current buffered data is zero. However, no more\n   * messages are accepted until the amount of data buffered is reduced\n   * enough to allow room below sendBufferMaxSize.\n   *  * The valid range is > 0.\n   *\n   * @default 65536 (64KB)\n   */\n  get sendBufferMaxSize() {\n    return Check.nothing(this._sendBufferMaxSize) ? (64 * 1024) : this._sendBufferMaxSize;\n  }\n  set sendBufferMaxSize(newValue) {\n    this._sendBufferMaxSize = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#assumedMaxAdSize\n   * @type {Number}\n   * @description The assumed maximum AD message payload size before the session is established.\n   * This value is irrelevant after session connection establishment,\n   * because at that point the broker-reported AD size limit takes precedence.\n   *\n   * Before the session is connected, messages with payloads larger than this number\n   * are rejected upon send().\n   * The default value of 30000000 is appropriate for appliances, whereas for VMRs it should be set to 10000000.\n   *\n   *  * The valid range is > 0.\n   *\n   * @default 30000000 \n   */\n  get assumedMaxAdSize() {\n    return Check.nothing(this._assumedMaxAdSize) ? 30000000 : this._assumedMaxAdSize;\n  }\n\n  set assumedMaxAdSize(newValue) {\n    this._assumedMaxAdSize = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#maxWebPayload\n   * @type {Number}\n   * @description The maximum payload size (in bytes) when sending data using the Web transport\n   * protocol.  Large messages may fail to be sent to the Solace Message Router when the maximum web\n   * payload is set to a small value. To avoid this, use a large maximum web payload.\n   *  * The valid range is >= 100.\n   * @default 1048576 (1MB)\n   */\n  get maxWebPayload() {\n    return Check.nothing(this._maxWebPayload) ? (1024 * 1024) : this._maxWebPayload;\n  }\n  set maxWebPayload(newValue) {\n    this._maxWebPayload = newValue;\n  }\n\n  /**\n   * @private\n   */\n  get nonHTTPTransportPropsSet() {\n      // Calculate on demand based on presence of properties.\n      // Currently not tracking this so no property names listed.\n    return [].filter(k => Check.something(this[k]));\n  }\n\n  /**\n   * @returns {String} A brief description of this object\n   * @private\n   */\n  [util_inspect_custom]() {\n    return Object.assign(this._lendsInspect(), {\n      'authenticationScheme':             AuthenticationScheme.describe(this.authenticationScheme),\n      'accessToken':                      this.accessToken ? '*****' : 'Not Set',\n      'idToken':                          this.idToken ? '*****' : 'Not Set',\n      'issuerIdentifier':                 this.issuerIdentifier ? '*****' : 'Not Set',\n      'url':                              this.url,\n      'password':                         this.password ? '*****' : this.password,\n      'userName':                         this.userName,\n      'clientName':                       this.clientName,\n      'applicationDescription':           this.applicationDescription,\n      'vpnName':                          this.vpnName,\n      'vpnNameInUse':                     this.vpnNameInUse,\n      'virtualRouterName':                this.virtualRouterName,\n      'connectTimeoutInMsecs':            this.connectTimeoutInMsecs,\n      'connectRetries':                   this.connectRetries,\n      'connectRetriesPerHost':            this.connectRetriesPerHost,\n      'reconnectRetryWaitInMsecs':        this.reconnectRetryWaitInMsecs,\n      'reconnectRetries':                 this.reconnectRetries,\n      'generateSendTimestamps':           this.generateSendTimestamps,\n      'generateReceiveTimestamps':        this.generateReceiveTimestamps,\n      'includeSenderId':                  this.includeSenderId,\n      'generateSequenceNumber':           this.generateSequenceNumber,\n      'keepAliveIntervalInMsecs':         this.keepAliveIntervalInMsecs,\n      'keepAliveIntervalsLimit':          this.keepAliveIntervalsLimit,\n      'p2pInboxInUse':                    this.p2pInboxInUse,\n      'p2pInboxBase':                     this.p2pInboxBase,\n      'userIdentification':               this.userIdentification,\n      'subscriberLocalPriority':          this.subscriberLocalPriority,\n      'subscriberNetworkPriority':        this.subscriberNetworkPriority,\n      'ignoreDuplicateSubscriptionError': this.ignoreDuplicateSubscriptionError,\n      'reapplySubscriptions':             this.reapplySubscriptions,\n      'publisherProperties':              this.publisherProperties,\n      'noLocal':                          this.noLocal,\n      'readTimeoutInMsecs':               this.readTimeoutInMsecs,\n      'sendBufferMaxSize':                this.sendBufferMaxSize,\n      'maxWebPayload':                    this.maxWebPayload,\n    });\n  }\n\n  /**\n   * @name solace.SessionProperties#toString\n   * @method\n   * @description Returns a human-readable representation of this Session, subject to change.\n   * @returns {String} A brief description of this object\n   */\n  toString() {\n    return super.toString(); // only here for the docs\n  }\n\n}\n\n// Don't try to evaluate these constants in browser mode\nif (BUILD_ENV.TARGET_NODE) {\n  /**\n   * @description The default comma separated list of cipher suites in\n   * order of preference used for SSL connections.\n   * @constant\n   * @type {String}\n   */\n  SessionProperties.DEFAULT_CIPHER_SUITES = DEFAULT_CIPHER_SUITES;\n\n  /**\n   * A list of cipher suites supported by the API when using SSL connections\n   * @constant\n   * @type {string[]}\n   * @private\n   */\n  SessionProperties.SUPPORTED_CIPHER_SUITES = SUPPORTED_CIPHER_SUITES;\n\n  /**\n   * SSL protocols supported by the API when using SSL connections\n   * @type {string[]}\n   * @private\n   */\n  SessionProperties.SUPPORTED_SSL_PROTOCOLS = SUPPORTED_SSL_PROTOCOLS;\n\n  /* eslint-disable */ // don't mangle import\n  SessionProperties.SslProtocolExcludeConstantMap = {\n    ['sslv2']:   NodeSslConstants['SSL_OP_NO_SSLv2'] || 0,\n    ['sslv3']:   NodeSslConstants['SSL_OP_NO_SSLv3'] || 0,\n    ['tlsv1']:   NodeSslConstants['SSL_OP_NO_TLSv1'] || 0,\n    ['tlsv1.1']: NodeSslConstants['SSL_OP_NO_TLSv1_1'] || 0,\n    ['tlsv1.2']: NodeSslConstants['SSL_OP_NO_TLSv1_2'] || 0,\n  };\n  /* eslint-enable */ // don't mangle import\n}\n\n\nmodule.exports.SessionProperties = SessionProperties;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionRequestType = {\n  ADD_SUBSCRIPTION:        0,\n  REMOVE_SUBSCRIPTION:     1,\n  ADD_P2PINBOX:            2,\n  REMOVE_P2PINBOX:         3,\n  REMOVE_DTE_SUBSCRIPTION: 100,\n};\n\nmodule.exports.SessionRequestType = Enum.new(SessionRequestType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Internal session state\n * @enum {string}\n * @memberof solace\n * @private\n */\nconst SessionStateName = {\n  DISCONNECTED:                     'SessionDisconnected',\n  CONNECTING:                       'SessionConnecting',\n  WAITING_FOR_TRANSPORT:            'WaitingForTransport',\n  WAITING_FOR_TRANSPORT_UP:         'WaitingForTransportUp',\n  WAITING_FOR_LOGIN:                'WaitingForLogin',\n  TRANSPORT_UP:                     'SessionTransportUp',\n  FULLY_CONNECTED:                  'SessionFullyConnected',\n  SESSION_ERROR:                    'SessionError',\n  DISCONNECTING:                    'SessionDisconnecting',\n  REAPPLYING_SUBSCRIPTIONS:         'ReapplyingSubscriptions',\n  WAITING_FOR_PUBFLOW:              'WaitingForMessagePublisher',\n  DISPOSED:                         'SessionDisposed',\n  WAITING_FOR_SUBCONFIRM:           'WaitForSubConfirm',\n  WAITING_FOR_CAN_ACCEPT_DATA:      'WaitForCanAcceptData',\n  DISCONNECTING_FLOWS:              'DisconnectingFlows',\n  FLUSHING_TRANSPORT:               'FlushingTransport',\n  DESTROYING_TRANSPORT:             'DestroyingTransport',\n  RECONNECTING:                     'Reconnecting',\n  TRANSPORT_FAIL:                   'TransportFail',\n  WAITING_FOR_INTERCONNECT_TIMEOUT: 'WaitingForInterconnectTimeout',\n  WAITING_FOR_DNS:                  'WaitingForDNS',\n  WAITING_FOR_TRANSPORT_CHANGE:     'WaitingForTransportChange',\n};\n\nmodule.exports.SessionStateName = Enum.new(SessionStateName);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionState = {\n  /**\n   * The session is connecting.\n   */\n  CONNECTING:    1,\n  /**\n   * The session is connected.\n   */\n  CONNECTED:     2,\n  /**\n   * The session experienced an error.\n   */\n  SESSION_ERROR: 3,\n  /**\n   * The session is disconnecting.\n   */\n  DISCONNECTING: 4,\n  /**\n   * The session is disconnected.\n   */\n  DISCONNECTED:  5,\n\n};\n\nmodule.exports.SessionState = Enum.new(SessionState);\n","const DestinationLib = require('solclient-destination');\nconst MessageLib = require('solclient-message');\nconst SolclientFactoryLib = require('solclient-factory');\nconst { assert } = require('solclient-eskit');\nconst { CacheSession,\n        CACHE_REQUEST_PREFIX } = require('solclient-solcache-session');\nconst { CapabilityType } = require('./capability-types');\nconst { Check,\n        Parameter } = require('solclient-validate');\nconst { DefaultCapabilities } = require('./default-capabilities');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError,\n        RequestEventCode } = require('solclient-error');\nconst { EventEmitter } = require('solclient-events');\nconst { GlobalContext } = require('./global-context');\nconst { HostList } = require('./host-list');\nconst { LogFormatter } = require('solclient-log');\nconst { MessageRxCBInfo } = require('./message-rx-cb-info');\nconst { MutableSessionProperty } = require('./mutable-session-properties');\nconst { OutstandingDataRequest } = require('./outstanding-data-request');\nconst { P2PUtil } = require('./p2p-util');\nconst { QueueDescriptor,\n        QueueType } = require('solclient-queue');\nconst { SDTField,\n        SDTFieldType } = require('solclient-sdt');\nconst { SessionEvent } = require('./session-event');\nconst { SessionEventCBInfo } = require('./session-event-cb-info');\nconst { SessionEventCode } = require('./session-event-codes');\nconst { SessionEventName } = require('./session-event-names');\nconst { SessionFSM } = require('./session-fsm');\nconst { SessionFSMEvent } = require('./session-fsm-event');\nconst { SessionOperation } = require('./session-operations');\nconst { SessionProperties } = require('./session-properties');\nconst { SessionPropertiesValidator } = require('./session-properties-validator');\nconst { SessionRequestType } = require('./session-request-types');\nconst { SessionState } = require('./session-states');\nconst { SessionStateName } = require('./session-state-names');\nconst { Stats,\n        StatType } = require('solclient-stats');\nconst { StringUtils } = require('solclient-util');\nconst { TransportCapabilities,\n        TransportProtocol,\n        TransportReturnCode } = require('solclient-transport');\n\nfunction transportProtocolDefaultList() {\n  const { ProfileBinding } = SolclientFactoryLib;\n\n  if (BUILD_ENV.TARGET_NODE) {\n    return [TransportProtocol.WS_BINARY];\n  }\n\n  const result = [];\n  if (TransportCapabilities.web.webSocket()) {\n    result.push(TransportProtocol.WS_BINARY);\n  }\n  const profile = ProfileBinding.value;\n  if (profile.cometEnabled) {\n    if (TransportCapabilities.web.xhrBinary()) {\n      if (TransportCapabilities.web.streaming()) {\n        result.push(TransportProtocol.HTTP_BINARY_STREAMING);\n      }\n      result.push(TransportProtocol.HTTP_BINARY);\n    }\n    result.push(TransportProtocol.HTTP_BASE64);\n  }\n  return result;\n}\n\nfunction isValidADTransport(transportProtocol) {\n  return (transportProtocol && (\n          transportProtocol !== TransportProtocol.HTTP_BINARY_STREAMING &&\n          transportProtocol !== TransportProtocol.HTTP_BINARY &&\n          transportProtocol !== TransportProtocol.HTTP_BASE64));\n}\n\nfunction formatEventName(eventName) {\n  return `SessionEventCode.${SessionEventCode.describe(eventName)}`;\n}\n\n/**\n * @private\n */\nconst SOLCLIENT_REQUEST_PREFIX = '#REQ';\n\n/**\n * A callback that returns replies to requests sent via {@link solace.Session#sendRequest}.\n * The replyReceivedCallback <b>must</b> be provided to the API as the third argument of\n * {@link solace.Session#sendRequest}.\n * @callback\n * @function\n * @name solace.Session.replyReceivedCallback\n * @param {solace.Session} session The session object that received the reply.\n * @param {solace.Message} message The reply message received.\n * @param {Object} userObject The user object associated with the callback. 'undefined' when\n * not provided to <i>sendRequest</i>\n */\n\n/**\n * A callback that returns errors associated with requests sent via\n * {@link solace.Session#sendRequest}. The requestFailedCallback <b>must</b> be\n * provided to the API as the fourth argument of\n * {@link solace.Session#sendRequest}\n * @callback\n * @function\n * @name solace.Session.requestFailedCallback\n * @param {solace.Session} session The session object associated with the event.\n * @param {solace.RequestError} error The event associated with the failure.\n * @param {Object} userObject The user object associated with the callback. 'undefined' when\n * not provided to <i>sendRequest</i>\n */\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * Applications must use {@link solace.SolclientFactory.createSession} to create a session.\n *\n * Represents a client Session.\n *\n * Session provides these major functions:\n *  * Subscriber control, such as updating subscriptions;\n *  * Publishes both Direct and Guaranteed Messages to the router;\n *  * Receives direct messages from the router.\n *\n * The Session object is an\n * {@link https://nodejs.org/api/events.html#events_class_eventemitter|EventEmitter}, and will emit\n * events with event names from {@link solace.SessionEventCode} when Session events occur.\n * Each session event can be subscribed using {@link solace.Session#on} with the corresponding\n * {@link solace.SessionEventCode}. If any of the registered event listeners throw an exception,\n * the exception will be emitted on the 'error' event.\n *\n * @fires solace.SessionEventCode#ACKNOWLEDGED_MESSAGE\n * @fires solace.SessionEventCode#CAN_ACCEPT_DATA\n * @fires solace.SessionEventCode#CONNECT_FAILED_ERROR\n * @fires solace.SessionEventCode#DISCONNECTED\n * @fires solace.SessionEventCode#DOWN_ERROR\n * @fires solace.SessionEventCode#GUARANTEED_MESSAGE_PUBLISHER_DOWN\n * @fires solace.SessionEventCode#MESSAGE\n * @fires solace.SessionEventCode#PROPERTY_UPDATE_ERROR\n * @fires solace.SessionEventCode#PROPERTY_UPDATE_OK\n * @fires solace.SessionEventCode#RECONNECTED_NOTICE\n * @fires solace.SessionEventCode#RECONNECTING_NOTICE\n * @fires solace.SessionEventCode#REJECTED_MESSAGE_ERROR\n * @fires solace.SessionEventCode#REPUBLISHING_UNACKED_MESSAGES\n * @fires solace.SessionEventCode#SUBSCRIPTION_ERROR\n * @fires solace.SessionEventCode#SUBSCRIPTION_OK\n * @fires solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_ERROR\n * @fires solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_OK\n * @fires solace.SessionEventCode#UP_NOTICE\n * @fires solace.SessionEventCode#VIRTUALROUTER_NAME_CHANGED\n *\n * @hideconstructor\n * @memberof solace\n */\nclass Session extends EventEmitter {\n\n  /*\n   * Applications must use {@link solace.SolclientFactory.createSession} to create a session.\n   *\n   * @param {solace.SessionProperties} properties Properties to use for constructing\n   *        the session.\n   * @param {solace.MessageRxCBInfo} [messageCallback] Message callback info. The application can\n   *    also receive message events via\n   *    `session.on(solace.SessionEventCode.MESSAGE, (message) => { ... });`\n   * @param {solace.SessionEventCBInfo} [eventCallback] Event callback info. The application can\n   *    also receive session events via\n   *    `session.on(solace.SessionEventCode.<code>, (event) => { ... });`\n   *\n   * @throws {solace.OperationError} if the parameters have an invalid type or value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * @private\n   * @constructor\n   */\n  constructor(properties, messageCallback, eventCallback) {\n    super({\n      emits:  SessionEventCode.values,\n      direct: SessionEventCode.MESSAGE,\n      formatEventName,\n    });\n    const self = this;\n    this.logger = new LogFormatter();\n    this.logger.formatter = function formatter(...args) {\n      return [`[session=${self._sessionFSM ? self._sessionFSM.sessionIdHex : '(N/A)'}]`, ...args];\n    };\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session constructor called.');\n    if ((properties !== undefined) && (properties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('Incoming session properties:\\n', properties);\n    }\n\n    // Default error handler prints the exception:\n    this.on('error', (error) => {\n      const { LOG_ERROR } = self.logger;\n      LOG_ERROR(error.info.error);\n    });\n\n    const sessionProperties = new SessionProperties(properties);\n    {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('Eventual session properties:\\n', sessionProperties);\n    }\n    // Callbacks to client application.\n    // Get/set for these is private, so they can only be changed in-API (e.g. by CacheSession)\n    // The user-supplied one cannot be changed.\n    // The configuration of the exceptions generated by these needs to match EventEmitter, so that\n    // the handleGenericErrorEvent above can behave consistently\n    this._messageCallbackInfo = this.wrapMessageCallback(messageCallback);\n    this._eventCallbackInfo = this.wrapEventCallback(eventCallback);\n\n    // client name generation is applicable\n    if (Check.empty(sessionProperties.clientName)) {\n      // Auto-gen clientName\n      sessionProperties.clientName = GlobalContext.GenerateClientName();\n    }\n\n    // generate userIdentification\n    sessionProperties._setUserIdentification(GlobalContext.GenerateUserIdentification());\n\n    // client description generation is applicable\n    if (Check.empty(sessionProperties.applicationDescription)) {\n      // Auto-gen applicationDescription\n      sessionProperties.applicationDescription = GlobalContext.GenerateClientDescription();\n    }\n\n    // Set webTransportProtocolList after validation so we're not basing it on an\n    // invalid transport selection...so we're not checking transportProtocol/\n    // webTransportProtocolList except for parameter conflict.\n\n    // Now that we have touched up the properties as much as possible, validate\n    // This also validates the subordinate MessagePublisherProperties\n    SessionPropertiesValidator.validate(sessionProperties);\n\n    // We want a protocol list, but historically we also accept a single protocol.\n    // Create a web transport protocol list from the transport protocol\n    // option if that is all that was set. (If both were set, we failed validation)\n    if (Check.nothing(sessionProperties.webTransportProtocolList)) {\n      // Create a fallback list that starts with the selected protocol.\n      // If the selected protocol is not in the fallback list, it is not\n      // a valid protocol for the platform so return an empty list.\n      const selectedProtocol = sessionProperties.transportProtocol;\n      const defaultList = transportProtocolDefaultList();\n      const sliceIndex = selectedProtocol ? defaultList.indexOf(selectedProtocol) : 0;\n      if (sliceIndex < 0) {\n        // The user explicitly selected a protocol that wasn't valid\n        throw new OperationError(`Selected transport protocol ${\n                                 TransportProtocol.describe(selectedProtocol)\n                                 } is disabled or invalid for this platform`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      // Slice index is valid\n      sessionProperties.webTransportProtocolList = defaultList.slice(sliceIndex);\n\n      if (sessionProperties.webTransportProtocolList.length === 0) {\n        // Even before AD restrictions, no valid protocols.\n        // User error.\n        throw new OperationError(`No usable transport protocol or fallback from ${\n          TransportProtocol.describe(selectedProtocol)}`,\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n\n      // Check that the generated list is compatible with AD.\n      const validForAD = sessionProperties.webTransportProtocolList.filter(x =>\n        isValidADTransport(x));\n      if (validForAD.length === 0) {\n        this._adDisabledReason = 'Guaranteed messaging not compatible with any available ' +\n          `transport protocol: ${\n            sessionProperties.webTransportProtocolList.map(k =>\n              TransportProtocol.describe(k)).join(', ')}`;\n      }\n\n      // Don't fold this into the check below -- for that one, every\n      // protocol must be valid because the user explicitly requested all of them.\n      // In this case, we ensure that at least one of our generated list is valid.\n      if (sessionProperties.publisherProperties.enabled) {\n        if (this._adDisabledReason) {\n          throw new OperationError(\n            'Invalid transport protocol(s) for session with Guaranteed Messaging Publisher',\n            ErrorSubcode.PARAMETER_CONFLICT,\n            this._adDisabledReason\n          );\n        }\n        // AD was not disabled by having no protocols available\n        sessionProperties.webTransportProtocolList = validForAD;\n      }\n      // A valid protocol list is ready to use.\n    } else {\n      // User provided transport protocol list\n      // Check for parameter conflict between session and publisher\n      // Already checked these for parameter conflict; only one will be set\n      // Already checked that user list was not empty\n      const transportProtocols = sessionProperties.webTransportProtocolList;\n      const validForAD = transportProtocols.every(isValidADTransport);\n      if (!validForAD) {\n        const invalid = transportProtocols.filter(x => !isValidADTransport(x));\n        this._adDisabledReason = `Guaranteed messaging incompatible with selected transport protocols: ${\n          invalid.map(k => TransportProtocol.describe(k)).join(', ')}`;\n        if (sessionProperties.publisherProperties.enabled) {\n          throw new OperationError(\n            'Invalid transport protocol(s) for session with Guaranteed Messaging Publisher',\n            ErrorSubcode.PARAMETER_CONFLICT,\n            this._adDisabledReason\n          );\n        }\n      }\n    }\n\n\n    // Assign the final properties and start the state machine.\n    this._sessionProperties = sessionProperties;\n    this._sessionStats = new Stats();\n    this._hosts = new HostList(sessionProperties);\n    this._sessionFSM = new SessionFSM(\n      this._sessionProperties,\n      this,\n      this._sessionStats,\n      this._hosts\n    );\n    this._sessionFSM.start();\n    this._sessionFSM.createMessagePublisher();\n\n    /**\n     * The following fields are destroyed when disconnect is called\n     * and recreated when connect is called again.\n     * @private\n     */\n    this._outstandingDataReqs = {};\n    this._capabilities = DefaultCapabilities.createDefaultCapabilities(sessionProperties);\n    this._seqNum = 1;\n  }\n\n  /**\n   * Connects the session to the Solace Message Router as configured in\n   * the {@link solace.SessionProperties#url}.\n   *\n   * When the session is successfully connected to the Solace Message Router, the\n   * {@link solace.SessionEventCode#UP_NOTICE} event is emitted if a listener has been registered.\n   *\n   * If {@link solace.SessionProperties#reapplySubscriptions} is set to true, this operation\n   * re-registers previously registered subscriptions. The connected session event\n   * ({@link solace.SessionEventCode#event:UP_NOTICE}) is emitted only when all the subscriptions\n   * are successfully added to the router.\n   *\n   * If the API is unable to connect within {@link solace.SessionProperties#connectTimeoutInMsecs}\n   * or due to login failures, the session's state transitions back to 'disconnected' and an event\n   * is generated.\n   *\n   * **Note:** Before the session's state transitions to 'connected', a client\n   * application cannot use the session; any attempt to call functions will throw\n   * {@link solace.OperationError}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed, already connected or connecting.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the underlying transport cannot be established.\n   *   Subcode: {@link solace.ErrorSubcode.CONNECTION_ERROR}.\n   */\n  connect() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session connect called.');\n    const result = this.allowOperation(SessionOperation.CONNECT);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.CONNECT });\n    this._sessionFSM.processEvent(sEvent);\n  }\n\n  /**\n   * @returns {Boolean} True if the session can be used to acknolwedge a message\n   * @readonly\n   * @private\n   */\n  get canAck() {\n    /*\n     * If the user wants to ack a message, it was received on a session (else ack will throw),\n     * and so we know that the session was connected at some point.\n     *\n     * If the session is in any of the following states, we know it is either connecting or\n     * connected.\n     *\n     * Since we know the session was previously connected, this implies the session is either\n     * RECONNECTING or connected.\n     *\n     * We allow acks when the session is reconnecting or connected.\n     */\n    const statesCanAck = [\n      SessionStateName.CONNECTING,\n      SessionStateName.TRANSPORT_UP,\n      SessionStateName.DISCONNECTING,\n    ];\n    // Allow ack if there is some acceptable state name such that getActiveState returns the state.\n    return statesCanAck.some(stateName => !!this._sessionFSM.getActiveState(stateName));\n  }\n\n  /**\n   * Disconnects the session. The session attempts to disconnect cleanly, concluding all operations\n   * in progress. The disconnected session event {@link solace.SessionEventCode#event:DISCONNECTED}\n   * is emitted when these operations complete and the session has completely disconnected.\n   *\n   * @throws {solace.OperationError} if the session is disposed, or has never been connected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  disconnect() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session disconnect called.');\n    const result = this.allowOperation(SessionOperation.DISCONNECT);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.DISCONNECT });\n    this._sessionFSM.processEvent(sEvent);\n  }\n\n  /**\n   * Release all resources associated with the session.\n   * It is recommended to call disconnect() first for proper handshake with the message-router.\n   */\n  dispose() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session dispose called.');\n    if (this._disposed) return;\n\n    //setImmediate(() => {\n    setTimeout(() => {\n      this._sessionFSM.processEvent(\n        new SessionFSMEvent({ name: SessionEventName.DISPOSE })\n      ); // yield for disconnect if any\n      this._sessionFSM.terminateFsm();\n      this.disableEmitter();\n      this._disposed = true;\n    }, 0);\n  }\n\n  /**\n   * Subscribe to a topic, optionally requesting a confirmation from the router.\n   *\n   * If requestConfirmation is set to true:\n   * {@link solace.SessionEventCode.SUBSCRIPTION_OK} is generated when subscription is\n   * added successfully; otherwise, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated.\n   *\n   * If requestConfirmation is set to false, only session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated upon failure.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}.\n   * The returned string is in the format of \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to add.\n   * @param {Boolean} requestConfirmation true, to request a confirmation; false otherwise.\n   * @param {Object} correlationKey If specified, and if requestConfirmation is true, this value is\n   *                                echoed in the session event within {@link SessionEvent}.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  subscribe(topic, requestConfirmation, correlationKey, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session subscribe called for topic ', (topic && topic.toString && topic.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for subscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n\n    Parameter.isBooleanOrNothing('requestConfirmation', requestConfirmation);\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    this._sessionFSM.subscriptionUpdate(\n      topic,\n      !!requestConfirmation,\n      correlationKey,\n      requestTimeout,\n      SessionRequestType.ADD_SUBSCRIPTION,\n      (rxMsgObj, cancelledRequest) =>\n        this.handleSubscriptionUpdateResponse(rxMsgObj,\n                                              cancelledRequest,\n                                              requestConfirmation));\n  }\n\n  updateQueueSubscription(topic, queue, add, messageConsumer, callback, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(\n      'Queue subscribe called for topic ', (topic && topic.toString && topic.toString()),\n      ' for queue ', (queue && queue.toString && queue.toString()));\n\n    LOG_TRACE('queue: ', queue);\n\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for queue subscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n    Parameter.isInstanceOf('queue', queue, DestinationLib.Destination);\n    queue.validate();\n    if ((queue.getType() !== DestinationLib.DestinationType.QUEUE) &&\n    (queue.getType() !== DestinationLib.DestinationType.TEMPORARY_QUEUE)) {\n      throw new OperationError(`Queue is required for queue subscribe; ${\n                               DestinationLib.DestinationType.describe(queue.getType())}`,\n                               ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    this._sessionFSM.queueSubscriptionUpdate(\n      topic,\n      queue,\n      requestTimeout,\n      add,\n      (rxMsgObj, cancelledRequest) =>\n        this.handleQueueSubscriptionUpdateResponse(\n          rxMsgObj,\n          cancelledRequest,\n          callback));\n  }\n\n  /**\n   * Unsubscribe from a topic, and optionally request a confirmation from the router.\n   *\n   * If requestConfirmation is set to true, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_OK} is generated when subscription is removed\n   * successfully; otherwise, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated.\n   *\n   * If requestConfirmation is set to false, only session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated upon failure.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}. The returned\n   * string is in the format \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to remove.\n   * @param {Boolean} requestConfirmation true, to request a confirmation; false otherwise.\n   * @param {Object} correlationKey If <code>null</code> or undefined, a Correlation Key is not set\n   *                                in the confirmation session event.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  unsubscribe(topic, requestConfirmation, correlationKey, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session unsubscribe called for topic ', (topic && topic.toString && topic.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for unsubscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n\n    Parameter.isBooleanOrNothing('requestConfirmation', requestConfirmation);\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    this._sessionFSM.subscriptionUpdate(\n      topic,\n      !!requestConfirmation,\n      correlationKey,\n      requestTimeout,\n      SessionRequestType.REMOVE_SUBSCRIPTION,\n      (rxMsgObj, cancelledRequest) =>\n        this.handleSubscriptionUpdateResponse(rxMsgObj,\n                                              cancelledRequest,\n                                              requestConfirmation));\n  }\n\n  /**\n   * Request that a Durable Topic Endpoint stop receiving data on a topic. Unsubscribe\n   * requests are only allowed by the router when no clients are bound to the DTE.\n   * If the unubscribe request is successful, the DTE will stop attracting messages,\n   * and all messages spooled to the DTE will be deleted.\n   *\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_OK} is generated when the\n   * subscription is removed successfully; otherwise,\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR} is generated.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}.\n   *\n   * @param {solace.AbstractQueueDescriptor|solace.QueueDescriptor} queueDescriptor A description\n   *  of the queue to which the topic is subscribed.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   */\n  unsubscribeDurableTopicEndpoint(queueDescriptor) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session unsubscribeDurableTopicEndpoint called for queue descriptor ', (queueDescriptor && queueDescriptor.toString && queueDescriptor.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    // emulate subscription\n    const destination = this.createDestinationFromDescriptor(\n      QueueDescriptor.createFromSpec(queueDescriptor));\n    const requestConfirmation = true;\n    this._sessionFSM.subscriptionUpdate(\n      destination,\n      requestConfirmation,\n      undefined,\n      undefined,\n      SessionRequestType.REMOVE_DTE_SUBSCRIPTION,\n      (rxMsgObj, cancelledRequest) =>\n        this.handleDTEUnsubscribeResponse(rxMsgObj,\n                                          cancelledRequest));\n  }\n\n\n  /**\n   * Modify a session property after creation of the session.\n   *\n   * This method only works for a select few properties,\n   * and updates their value on the live broker session.\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property key to modify.\n   * @param {Object} newValue The new property value.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, it\n   *                                overwrites readTimeoutInMsecs\n   * @param {Object} correlationKey If specified, this value is echoed in the session event within\n   *                                {@link SessionEvent} property in {@link SessionProperties}\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   */\n  updateProperty(mutableSessionProperty, newValue, requestTimeout, correlationKey) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session updateProperty called: ', mutableSessionProperty, newValue);\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    const { Topic } = DestinationLib;\n\n    LOG_TRACE('Updating property ', mutableSessionProperty, newValue);\n\n    Parameter.isEnumMember('mutableSessionProperty', mutableSessionProperty, MutableSessionProperty);\n\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    let sessionEvent;\n    /*\n     Response CB to the CLIENTCTRL UPDATE response\n\n     This is pretty complicated: we define the whole process in here\n     using callbacks to preserve state such as the correlationKey of the user\n     request.\n     That is, this entire multi-step process executes under the context of that one call to\n     updateProperty with a single correlationKey value.\n     */\n    const responseCallback = (respMsg) => {\n      const response = respMsg.getResponse();\n      if (response.responseCode === 200) {\n        if (mutableSessionProperty === MutableSessionProperty.CLIENT_DESCRIPTION) {\n          // update property and notify client\n          this._sessionProperties.applicationDescription = newValue;\n          sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                            response.responseString,\n                                            response.responseCode,\n                                            0,\n                                            correlationKey,\n                                            null);\n          this.sendEvent(sessionEvent);\n        } else if (mutableSessionProperty === MutableSessionProperty.CLIENT_NAME) {\n          // replace P2P subscription: REM and ADD\n          const oldP2pTopicName = P2PUtil.getP2PTopicSubscription(\n            this._sessionProperties.p2pInboxBase);\n          const oldP2pTopic = Topic.createFromName(oldP2pTopicName);\n\n          const newP2pTopicName = P2PUtil.getP2PTopicSubscription(\n            respMsg.getP2PTopicValue());\n          const newP2pTopic = Topic.createFromName(newP2pTopicName);\n\n          const afterAddCallback = (smpResp) => {\n            const resp = smpResp.getResponse();\n            if (resp.responseCode === 200) {\n              // notify client\n              this._sessionProperties._setP2pInboxBase(respMsg.getP2PTopicValue() || '');\n              this._sessionProperties._setP2pInboxInUse(\n                P2PUtil.getP2PInboxTopic(this._sessionProperties.p2pInboxBase));\n              this._sessionProperties.clientName = newValue;\n              sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                                resp.responseString,\n                                                resp.responseCode,\n                                                0,\n                                                correlationKey,\n                                                null);\n              this.sendEvent(sessionEvent);\n            } else {\n              const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(resp.responseCode,\n                                                                              resp.responseString);\n              if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT &&\n                              this._sessionProperties.ignoreDuplicateSubscriptionError) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  0,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ATTRIBUTES_CONFLICT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_INVALID ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ACL_DENIED ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_TOO_MANY) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  errorSubcode,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  ErrorSubcode.SUBSCRIPTION_ERROR_OTHER,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              }\n            }\n          };\n\n          const afterRemoveCallback = (smpResp) => {\n            const resp = smpResp.getResponse();\n            if (resp.responseCode === 200) {\n              // second add new P2P\n              this._sessionFSM.subscriptionUpdate(newP2pTopic,\n                                                  true,       // request confirm\n                                                  correlationKey,\n                                                  this._sessionProperties.readTimeoutInMsecs,\n                                                  SessionRequestType.ADD_P2PINBOX,\n                                                  afterAddCallback);\n            } else {\n              const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(resp.responseCode,\n                                                                              resp.responseString);\n              if (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND &&\n                  this._sessionProperties.ignoreSubscriptionNotFoundError) {\n                // add new P2P anyway: the error is simply the old P2P\n                // was not found on remove.  It's notable though.\n                this._sessionFSM.subscriptionUpdate(newP2pTopic,\n                                                    true,       // request confirm\n                                                    correlationKey,\n                                                    this._sessionProperties.readTimeoutInMsecs,\n                                                    SessionRequestType.ADD_P2PINBOX,\n                                                    afterAddCallback);\n              } else if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ATTRIBUTES_CONFLICT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_INVALID ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ACL_DENIED) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  errorSubcode,\n                                                  null,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  ErrorSubcode.SUBSCRIPTION_ERROR_OTHER,\n                                                  null,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              }\n            }\n          };\n\n          // first remove old P2P\n          this._sessionFSM.subscriptionUpdate(oldP2pTopic,\n                                              true,       // request confirm\n                                              correlationKey,\n                                              this._sessionProperties.readTimeoutInMsecs,\n                                              SessionRequestType.REMOVE_P2PINBOX,\n                                              afterRemoveCallback);\n        }\n      } else {\n        // notify client error\n        const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(response.responseCode,\n                                                                        response.responseString);\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          response.responseString,\n                                          response.responseCode,\n                                          errorSubcode,\n                                          correlationKey,\n                                          null);\n        this.sendEvent(sessionEvent);\n      }\n    }; // end CB (response to UPDATE request)\n\n    const returnCode = this._sessionFSM.sendUpdateProperty(mutableSessionProperty,\n                                                           newValue,\n                                                           correlationKey,\n                                                           requestTimeout,\n                                                           responseCallback);\n    if (returnCode !== TransportReturnCode.OK) {\n          // do not change session state\n\n      if (returnCode === TransportReturnCode.NO_SPACE) {\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          'Property update failed - no space in transport',\n                                          null,\n                                          ErrorSubcode.INSUFFICIENT_SPACE,\n                                          null,\n                                          null);\n      } else {\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          'Property update failed',\n                                          null,\n                                          ErrorSubcode.INVALID_OPERATION,\n                                          null,\n                                          null);\n      }\n      this.sendEvent(sessionEvent);\n    }\n  }\n  /**\n   * Modify (some) authentication-related session properties.\n   * The modifications take effect the next time the session connects or reconnects to the broker.\n   * There is no change to the active connection.\n   * Calling this method does not in itself trigger any kind of reconnection, reauthentication or renegotiation.\n   *\n   * **Note:** the update of \"accessToken\" and \"idToken\" properties is currently supported.\n   * Authentication Properties\n   * - accessToken to update previously set access token required for OAUTH2 authentication.\n   * - idToken to update previously set ID token required for OIDC authentication\n   * Example: updateAuthenticationOnReconnect({accessToken : “my_new_token”});\n   *\n   *\n   * @param {Object} authenticationProperties to be set\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if unsupported properties attempted to be set.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}.\n   */\n  updateAuthenticationOnReconnect(authenticationProperties) {\n    const { LOG_TRACE } = this.logger;\n    const allowedProperties = ['accessToken', 'idToken'];\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    if (!authenticationProperties || typeof authenticationProperties !== 'object') {\n      throw new OperationError('updateAuthenticationOnReconnect parameter must be a non-empty object.', ErrorSubcode.PARAMETER_INVALID_TYPE, null);\n    }\n    var key;\n    for (key in authenticationProperties) {\n      if (!allowedProperties.includes(key)) {\n        throw new OperationError('Invalid property in updateAuthenticationOnReconnect parameter.', ErrorSubcode.PARAMETER_CONFLICT, null);\n      }\n    }\n    const newProps = this.getSessionProperties();\n    Object.assign(newProps, authenticationProperties);\n    SessionPropertiesValidator.validate(newProps);\n    this._sessionProperties = newProps;\n    Object.assign(this._sessionFSM._sessionProperties, authenticationProperties);\n    LOG_TRACE('updateAuthenticationOnReconnect applied new token(s).');\n  }\n\n  /**\n   * Publish (send) a message over the session. The message is sent to its set destination.\n   *\n   * This method is used for sending both direct and Guaranteed Messages.  If the message's\n   * {@link solace.MessageDeliveryModeType} is {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * message is a direct message; otherwise, it is a guaranteed message.\n   *\n   * @param {solace.Message} message The message to send. It must have a destination set.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   * \n   */\n  send(message) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session send() called.');\n    const result = this.allowOperation(SessionOperation.SEND, message);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('message', message, MessageLib.Message);\n    this.validateAndSendMessage(message);\n  }\n\n  /**\n   * Sends a request using user-specified callback functions.\n   * <br>\n   * <strong>Note:</strong>\n   * The API sets the correlationId and replyTo fields of the message being sent;\n   * this overwrites any existing correlationId and replyTo values on the message.\n   *\n   * @param {solace.Message} message The request message to send.\n   * @param {Number} [timeout] The timeout value (in milliseconds). The minimum value is 100 msecs.\n   * @param {solace.Session.replyReceivedCallback} [replyReceivedCBFunction] The callback to notify\n   *    when a reply is received.\n   * @param {solace.Session.requestFailedCallback} [requestFailedCBFunction] The callback to notify\n   *    when the request failed.\n   * @param {Object} [userObject] An optional correlation object to use in the response callback.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   */\n  sendRequest(message,\n              timeout = undefined,\n              replyReceivedCBFunction = undefined,\n              requestFailedCBFunction = undefined,\n              userObject = undefined\n              ) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session sendRequest called.');\n    const result = this.allowOperation(SessionOperation.SEND, message);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('message', message, MessageLib.Message);\n    Parameter.isNumberOrNothing('timeout', timeout);\n    Parameter.isRangeCompareOrNothing('timeout', timeout, '>=', 100);\n    Parameter.isFunctionOrNothing('replyReceivedCBFunction', replyReceivedCBFunction);\n    Parameter.isFunctionOrNothing('requestFailedCBFunction', requestFailedCBFunction);\n\n    // set correlationId and replyTo fields if not set by the application\n    const correlationId = message.getCorrelationId();\n    if (correlationId === null || correlationId === undefined) {\n      message.setCorrelationId(SOLCLIENT_REQUEST_PREFIX + GlobalContext.NextId());\n    }\n    const replyTo = message.getReplyTo();\n    if (replyTo === null || replyTo === undefined) {\n      const replyToTopic = DestinationLib.Topic.createFromName(\n        this._sessionProperties.p2pInboxInUse);\n      message.setReplyTo(replyToTopic);\n    }\n\n    this.validateAndSendMessage(message);\n\n      // enqueue request\n    this.enqueueOutstandingDataReq(message.getCorrelationId(),\n                                   requestFailedCBFunction,\n                                   timeout,\n                                   replyReceivedCBFunction,\n                                   userObject);\n  }\n\n  /**\n   * Sends a reply message to the destination specified in messageToReplyTo.\n   *\n   * If `messageToReplyTo` is non-null:\n   *  * {@link solace.Message#getReplyTo} is copied from `messageToReplyTo` to\n   *    {@link solace.Message#setDestination} on `replyMessage`, unless `replyTo` is null.\n   *  * {@link solace.Message#setCorrelationId} is copied from `messageToReplyTo` to\n   *    {@link solace.Message#setCorrelationId} on `replyMessage`, unless `correlationId` is null.\n   *\n   * If `messageToReplyTo` is null, the application is responsible for setting\n   * the `destination` and `correlationId` on the `replyMessage`.\n   *\n   * @param {solace.Message} messageToReplyTo The message to which a reply will be sent.\n   * @param {solace.Message} replyMessage The reply to send.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   */\n  sendReply(messageToReplyTo, replyMessage) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session sendReply called.');\n    const result = this.allowOperation(SessionOperation.SEND, replyMessage);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isInstanceOfOrNothing('messageToReplyTo', messageToReplyTo, MessageLib.Message);\n    Parameter.isInstanceOf('replyMessage', replyMessage, MessageLib.Message);\n\n    replyMessage.setAsReplyMessage(true);\n    if (messageToReplyTo) {\n      replyMessage.setCorrelationId(messageToReplyTo.getCorrelationId());\n      const replyTo = messageToReplyTo.getReplyTo();\n      if (replyTo === null || replyTo === undefined) {\n        throw new OperationError('ReplyTo destination may not be null.',\n                                 ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n      replyMessage.setDestination(messageToReplyTo.getReplyTo());\n    }\n    this.validateAndSendMessage(replyMessage);\n  }\n\n  /**\n   * Returns the value of a given {@link solace.StatType}.\n   *\n   * @param {solace.StatType} statType The statistic to query.\n   * @returns {Number} The value of the requested statistic.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the StatType is invalid.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   */\n  getStat(statType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getStat called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isEnumMember('statType', statType, StatType);\n    return this._sessionFSM.getStat(statType);\n  }\n\n  /**\n   * Reset session statistics to initial values.\n   *\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  resetStats() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session resetStats called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    this._sessionFSM.resetStats();\n  }\n\n  /**\n   * Returns a clone of the properties for this session.\n   *\n   * @returns {solace.SessionProperties} A clone of this session's properties.\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  getSessionProperties() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getSessionProperties called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    const properties = this._sessionProperties.clone();\n    const sessionState = this.getSessionState();\n    if ((sessionState !== SessionStateName.DISCONNECTED) && this._sessionFSM._transport) {\n      properties._setWebTransportProtocolInUse(this._sessionFSM._transport.getTransportProtocol());\n    }\n\n    return properties;\n  }\n\n  /**\n   * Check the value of a boolean router capability.\n   *\n   * This function is a shortcut for {@link solace.Session#getCapability}. It performs the same\n   * operation, but instead of returning a {@link solace.SDTField} wrapping a capability value, it\n   * just returns the boolean value.\n   *\n   *  Attempting to query a non-boolean capability will return `null`.\n   *\n   * @param {solace.CapabilityType} capabilityType The capability to check.\n   *\n   * @returns {Boolean} the value of the capability queried.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type or value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  isCapable(capabilityType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session isCapable called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isNumber('capabilityType', capabilityType);\n\n    const caps = this._capabilities;\n    if (!caps) {\n      return false;\n    }\n\n    // Guard for undefined OR non-boolean capability\n    return (typeof caps[capabilityType] === 'boolean') ? caps[capabilityType] : false;\n  }\n\n  /**\n   * Get the value of an router capability, or null if unknown. This function must\n   * be called after connecting the session.\n   *\n   * SDT Type conversions:\n   *\n   *  * {string} values are returned as {@link solace.SDTFieldType.STRING}.\n   *  * {boolean} values are returned as {@link solace.SDTFieldType.BOOL}.\n   *  * All numeric values are returned as {@link solace.SDTFieldType.INT64}.\n   *\n   * @param {solace.CapabilityType} capabilityType The router capability to query.\n   * @returns {solace.SDTField} The result of the capability query.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed\n   *    Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type or value.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  getCapability(capabilityType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getCapability called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isNumber('capabilityType', capabilityType);\n\n    const val = this._getCapability(capabilityType);\n    if (typeof val === 'boolean') {\n      return SDTField.create(SDTFieldType.BOOL, val);\n    }\n    if (typeof val === 'number') {\n      return SDTField.create(SDTFieldType.INT64, val);\n    }\n    if (typeof val === 'string') {\n      return SDTField.create(SDTFieldType.STRING, val);\n    }\n\n    return null;\n  }\n\n  _getCapability(capabilityType) {\n    const caps = this._capabilities;\n    if (!caps) return null;\n\n    const value = caps[capabilityType];\n    return (value === undefined) ? null : value;\n  }\n\n  /**\n   * Returns the session's state. This is a third-choice method to determine session\n   * state; the first is notifications on FSM transitions, and the second choice is\n   * the finer-grained states of the FSM that are used in this mapping.\n   *\n   * @returns {SessionState} The current state of the session.\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * @internal\n   */\n  getSessionState() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getSessionState called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sessionStateName = this.getFSMState();\n    switch (sessionStateName) {\n      case SessionStateName.FULLY_CONNECTED:\n        return SessionState.CONNECTED;\n      case SessionStateName.DISCONNECTING:\n        return SessionState.DISCONNECTING;\n      case SessionStateName.DISCONNECTED:\n        return SessionState.DISCONNECTED;\n      case SessionStateName.SESSION_ERROR:\n        return SessionState.SESSION_ERROR;\n      case SessionStateName.CONNECTING:\n      case SessionStateName.WAITING_FOR_INTERCONNECT_TIMEOUT:\n      case SessionStateName.WAITING_FOR_DNS:\n      case SessionStateName.WAITING_FOR_TRANSPORT_UP:\n      case SessionStateName.WAITING_FOR_SESSION_UP:\n      case SessionStateName.WAITING_FOR_LOGIN:\n      case SessionStateName.WAITING_FOR_P2PINBOX_REG:\n      case SessionStateName.WAITING_FOR_PUBFLOW:\n      case SessionStateName.REAPPLYING_SUBSCRIPTIONS:\n        return SessionState.CONNECTING;\n      default:\n        {\n          // State names unaccounted for --\n          // WAITING_FOR_SUBCONFIRM\n          // WAITING_FOR_CAN_ACCEPT_DATA\n          // DISCONNECTING_FLOWS\n          // FLUSHING_TRANSPORT\n          // DESTROYING_TRANSPORT\n          // RECONNECTING\n          // TRANSPORT_FAIL\n          //\n          // Alternatively, we could use StateMachine#isStateActive on key parent states,\n          // instead of having to enumerate all child states.ant\n          const { LOG_INFO } = this.logger;\n          LOG_INFO(`Unmapped session state ${SessionStateName.describe(sessionStateName)}`);\n          return null;\n        }\n    }\n  }\n\n  /**\n   * Gets the fine grained state name from the session FSM.\n   * @returns {solace.SessionStateName} The FSM state name\n   * @private\n   */\n  getFSMState() {\n    return this._sessionFSM.getCurrentStateName();\n  }\n\n  /**\n   * Creates a {@link solace.CacheSession} object that uses this Session to service its\n   * cache requests.\n   *\n   * It should be disposed when the application no longer requires a CacheSession, by calling\n   * {@link solace.CacheSession#dispose}.\n   *\n   * @param {solace.CacheSessionProperties} properties The properties for the cache session.\n   *\n   * @returns {solace.CacheSession} The newly created cache session.\n   *\n   * @throws {solace.OperationError} if a CacheSession is already associated with this Session.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  createCacheSession(properties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createCacheSession called.');\n    return new CacheSession(properties, this, {\n      // bind instead of arrow func for varargs\n      // due to bublé transpiler bug\n      incStat: this._sessionFSM.incStat.bind(this._sessionFSM),\n    });\n  }\n\n  /**\n   * Creates a {@link solace.MessageConsumer} to receive Guaranteed Messages in this Session.\n   *\n   * Consumer characteristics and behavior are defined by properties. The consumer properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.MessageConsumerProperties};\n   * other property names are ignored. If the Message Consumer creation\n   * specifies a non-durable endpoint,\n   * {@link solace.QueueProperties} can be used to change the default properties on the\n   * non-durable endpoint. Any values not supplied are set to default values.\n   *\n   * When the consumer is created, a consumer object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the consumer) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The following\n   * must be true in order to create a MessageConsumer:\n   *  * The transport protocol list does not contain any HTTP transport protocols. See\n   *    {@link solace.SessionProperties#transportProtocol} and\n   *    {@link solace.FactoryProfile#cometEnabled}\n   *  * The Solace Messaging Router must support Guaranteed Messaging\n   *\n   * @method solace.Session#createMessageConsumer\n   * @param {solace.MessageConsumerProperties|Object} consumerProperties The properties for the\n   *    consumer.\n   * @returns {solace.MessageConsumer} The newly created Message Consumer.\n   * @throws {solace.OperationError} when Guaranteed Message Consume is not\n   *    supported on this session.\n   * @target browser\n   */\n  /**\n   * Creates a {@link solace.MessageConsumer} to receive Guaranteed Messages in this Session.\n   *\n   * Consumer characteristics and behavior are defined by properties. The consumer properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.MessageConsumerProperties};\n   * other property names are ignored. If the Message Consumer creation\n   * specifies a non-durable endpoint,\n   * {@link solace.QueueProperties} can be used to change the default properties on the\n   * non-durable endpoint. Any values not supplied are set to default values.\n   *\n   * When the consumer is created, a consumer object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the consumer) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The Solace\n   * Messaging Router must support Guaranteed Messaging.\n   *\n   * @method solace.Session#createMessageConsumer\n   * @param {solace.MessageConsumerProperties|Object} consumerProperties The properties for the\n   *    consumer.\n   * @returns {solace.MessageConsumer} The newly created Message Consumer.\n   * @throws {solace.OperationError} if Guaranteed Message Consume is not supported on this session.\n   * @target node\n   */\n  createMessageConsumer(consumerProperties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createMessageConsumer called.');\n    if (this._adDisabledReason) {\n      throw new OperationError('Session does not provide MessageConsumer capability',\n                               ErrorSubcode.GM_UNAVAILABLE,\n                               this._adDisabledReason);\n    }\n    if ((consumerProperties !== undefined) && (consumerProperties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('createMessageConsumer - Consumer properties:\\n', consumerProperties);\n    }\n    return this._sessionFSM.createMessageConsumer(consumerProperties);\n  }\n\n  /**\n   * Creates a {@link solace.QueueBrowser} to browse Guaranteed Messages on a specified queue in\n   * this Session.\n   *\n   * Browser characteristics and behavior are defined by properties. The browser properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.QueueBrowserProperties};\n   * other property names are ignored. Any values not supplied are set to default values.\n   *\n   * Delivery restrictions imposed by the queue’s Access type (exclusive or non-exclusive),\n   * do not apply when browsing messages with a Browser.\n   *\n   * When the queue browser is created, a queue browser object is returned to the caller. This is\n   * the object from which events are emitted, and upon which operations (for example, starting and\n   * stopping the browser) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The following\n   * must be true in order to create a QueueBrowser:\n   *  * The transport protocol list does not contain any HTTP transport protocols. See\n   *    {@link solace.SessionProperties#transportProtocol} and\n   *    {@link solace.FactoryProfile#cometEnabled}\n   *  * The Solace Messaging Router must support Guaranteed Messaging\n   *\n   * @method solace.Session#createQueueBrowser\n   * @param {solace.QueueBrowserProperties|Object} browserProperties The properties for the\n   *    browser.\n   * @returns {solace.QueueBrowser} The newly created Queue Browser.\n   * @throws {solace.OperationError} when Guaranteed Messaging is not\n   *    supported on this session.\n   * @target browser\n   */\n  /**\n   * Creates a {@link solace.QueueBrowser} to receive Guaranteed Messages in this Session.\n   *\n   * Browser characteristics and behavior are defined by properties. The properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.QueueBrowserProperties};\n   * other property names are ignored.\n   *\n   * Delivery restrictions imposed by the queue’s Access type (exclusive or non-exclusive),\n   * do not apply when browsing messages with a Browser.\n   *\n   * When the browser is created, a browser object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the browser) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The Solace\n   * Messaging Router must support Guaranteed Messaging.\n   *\n   * @method solace.Session#createQueueBrowser\n   * @param {solace.QueueBrowserProperties|Object} browserProperties The properties for the\n   *    browser.\n   * @returns {solace.QueueBrowser} The newly created Queue Browser.\n   * @throws {solace.OperationError} if Guaranteed Messaging is not supported on this session.\n   * @target node\n   */\n  createQueueBrowser(browserProperties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createQueueBrowser called.');\n    if (this._adDisabledReason) {\n      throw new OperationError('Session does not provide QueueBrowser capability',\n                               ErrorSubcode.GM_UNAVAILABLE,\n                               this._adDisabledReason);\n    }\n    if ((browserProperties !== undefined) && (browserProperties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('createQueueBrowser - Browser properties:\\n', browserProperties);\n    }\n    return this._sessionFSM.createQueueBrowser(browserProperties);\n  }\n\n  /**\n   * Creates a publishing destination from a queue descriptor.\n   *\n   * A MessageConsumer is the only object that has any business\n   * doing this, but it should not be concerned with the internals\n   * which depend on the session.\n   *\n   * @param {AbstractQueueDescriptor|QueueDescriptor} queueDescriptor The consumer's descriptor\n   * @returns {Destination} A destination that publishes to the descriptor.\n   * @memberof Session\n   * @private\n   */\n  createDestinationFromDescriptor(queueDescriptor) {\n    const {\n      DestinationType,\n      Queue,\n      Topic,\n    } = DestinationLib;\n\n    let destinationType = DestinationType.TOPIC;\n    if (queueDescriptor.type === QueueType.QUEUE) {\n      destinationType = queueDescriptor.durable\n        ? DestinationType.QUEUE\n        : DestinationType.TEMPORARY_QUEUE;\n    }\n\n    const name = queueDescriptor.name || null;\n\n    if (queueDescriptor.durable) {\n      assert(name, 'Durable endpoint with generated name is not a valid configuration');\n      const factoryMethod = queueDescriptor.getType() === QueueType.QUEUE\n        ? Queue.createFromLocalName\n        : Topic.createFromName;\n      return factoryMethod(name);\n    }\n\n    return this.createTemporaryDestination(destinationType, name);\n  }\n\n  /**\n   * Creates a temporary destination.\n   * @param {DestinationType} destinationType Type of destination\n   * @param {String} [name] Name if any\n   * @returns {Destination} Temporary destination\n   * @private\n   */\n  createTemporaryDestination(destinationType, name) {\n    const { LOG_TRACE } = this.logger;\n    const { DestinationFromNetwork, DestinationUtil } = DestinationLib;\n    // TRANSPORT_UP is chosen because this is when the session tells subscribers\n    // that they may begin connecting\n    const vrn = this.getSessionProperties().virtualRouterName;\n    if (!this.isCapable(CapabilityType.TEMPORARY_ENDPOINT) ||\n        vrn === null || vrn === undefined || vrn.length === 0) {\n      throw new OperationError(\n        'Attempt to generate temporary destination or endpoint without suitable session',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    // Non-durable case; avoid re-prefixing\n    const localName = name && name.startsWith('#P2P')\n      ? name\n      : DestinationUtil.createTemporaryName(destinationType, vrn, name);\n    LOG_TRACE('Generated name:', localName);\n    return DestinationFromNetwork.createDestinationFromName(localName);\n  }\n\n  /**\n   * @param {solace.SessionEvent} sessionEvent The event to send\n   * @private\n   */\n  sendEvent(sessionEvent) {\n    if (!sessionEvent) return;\n    if (this._disposed) return;\n\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Sending event ${sessionEvent}`);\n    this._eventCallbackInfo.sessionEventCBFunction(this,\n                                                   sessionEvent,\n                                                   this._eventCallbackInfo.userObject);\n  }\n\n  /**\n   * Gets a transport session information string.\n   * This string is informative only, and applications should not attempt to parse it.\n   *\n   * @returns {String} A description of the current session's transport.\n   */\n  getTransportInfo() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getTransportInfo called.');\n    return this._sessionFSM.getTransportInfo();\n  }\n\n  /**\n   * @param {Object} interceptor The transport interceptor to set\n   * @private\n   */\n  injectTransportInterceptor(interceptor) {\n    this._sessionFSM.injectTransportInterceptor(interceptor);\n  }\n\n  /**\n   * @param {solace.SessionOperation} operationEnum the id of the operation\n   * @param {solace.Message} message The message to send\n   * @returns {?String} error message if not allowed; otherwise null\n   * @private\n   */\n  allowOperation(operationEnum, message) {\n    if (!this._sessionFSM) return false;\n    let allow = true;\n    const sessionStateName = this._sessionFSM.getCurrentStateName();\n\n    if (sessionStateName === SessionStateName.DISPOSED) {\n      allow = false;\n    } else if (Check.anything(operationEnum)) {\n      switch (operationEnum) {\n        case SessionOperation.CONNECT:\n          if (sessionStateName !== SessionStateName.NEW &&\n              sessionStateName !== SessionStateName.DISCONNECTED) {\n            allow = false;\n          }\n          break;\n        case SessionOperation.DISCONNECT:\n          if (sessionStateName === SessionStateName.NEW) {\n            allow = false;\n          }\n          break;\n        case SessionOperation.SEND:\n        case SessionOperation.CTRL:\n          allow =\n            ((sessionStateName === SessionStateName.FULLY_CONNECTED) ||\n            (message && (message.getDeliveryMode() !== MessageLib.MessageDeliveryModeType.DIRECT)));\n          break;\n\n        case SessionOperation.QUERY_OPERATION:\n          allow = true;\n          break;\n        default:\n          allow = false;\n      }\n    } else {\n      allow = false;\n    }\n\n    if (allow) {\n      return null;\n    }\n\n    return `Cannot perform operation ${operationEnum} while in state ${sessionStateName}`;\n  }\n\n  /**\n   * @param {smf.ClientCtrlMessage} routerCapabilities The message containing the router caps\n   * @private\n   */\n  updateCapabilities(routerCapabilities) {\n    this._capabilities = routerCapabilities;\n  }\n\n  /**\n   * @param {solace.Message} message The message to send\n   * @private\n   */\n  validateAndSendMessage(message) {\n    // Sanity checks on the message before attempting to send it\n    //  * do we have a destination?\n    const sendDest = message.getDestination();\n    if (Check.nothing(sendDest) || Check.empty(sendDest.getName())) {\n      throw new OperationError('Message must have a valid Destination', ErrorSubcode.TOPIC_MISSING);\n    }\n\n    const senderTimestamp = message.getSenderTimestamp();\n    const noSenderTimestamp = senderTimestamp === null || senderTimestamp === undefined;\n    if (this._sessionProperties.generateSendTimestamps &&\n        (noSenderTimestamp || message.hasAutoSenderTimestamp)) {\n      const now = new Date();\n      message.setSenderTimestamp(now.getTime());\n      message.hasAutoSenderTimestamp = true;\n    }\n    const sequenceNumber = message.getSequenceNumber();\n    const noSequenceNumber = sequenceNumber === null || sequenceNumber === undefined;\n    if (this._sessionProperties.generateSequenceNumber &&\n        (noSequenceNumber || message.hasAutoSequenceNumber)) {\n      message.setSequenceNumber(this._seqNum++);\n      message.hasAutoSequenceNumber = true;\n    }\n    const senderId = message.getSenderId();\n    const noSenderId = senderId === null || senderId === undefined;\n    if (this._sessionProperties.includeSenderId && noSenderId) {\n      message.setSenderId(this._sessionProperties.clientName);\n    }\n\n    // Allow the FSM and its delegates to prepare and send the message\n    // This may mutate the delegates, so we need to validate first\n    // this may throw if the message is guaranteed and the window is closed.\n    // If this returns true, the message can be sent to the transport\n    // (always true for direct messages whne there is a transport). If\n    // this returns false, the message has been prepared and queued for\n    // transport but may not be sent now.\n    this._sessionFSM.prepareAndSendMessage(message);\n  }\n\n  /**\n   * @param {String} correlationId The internal correlation ID for the message\n   * @param {function(...[*])} reqFailedCb The callback on request failure\n   * @param {Number} reqTimeout The request timeout in ms\n   * @param {function(*)} replyRecvdCb The callback on reply received\n   * @param {Object} userObject A user object to pass back to the callback (legacy)\n   * @private\n   */\n  enqueueOutstandingDataReq(correlationId, reqFailedCb, reqTimeout, replyRecvdCb, userObject) {\n    if (Check.none(correlationId)) {\n      return;\n    }\n    const { LOG_TRACE, LOG_ERROR } = this.logger;\n\n    // empty string is valid\n    LOG_TRACE(`Enqueue outstanding data request correlationId=${correlationId}`);\n    const timer = setTimeout(() => {\n      this._sessionFSM.incStat(StatType.TX_REQUEST_TIMEOUT);\n                  // remove request from queue\n      try {\n        const result = delete this._outstandingDataReqs[correlationId];\n        if (!result) {\n          LOG_ERROR(`Cannot delete data request ${correlationId}`);\n        }\n      } catch (e) {\n        LOG_ERROR(`Cannot delete data request ${correlationId}`, e);\n      }\n\n      if (Check.anything(reqFailedCb)) {\n        const requestEvent = SessionEvent.build(RequestEventCode.REQUEST_TIMEOUT,\n                                                'Request timeout',\n                                                correlationId);\n\n        reqFailedCb(this, requestEvent, userObject);\n      }\n    }, reqTimeout || this._sessionProperties.readTimeoutInMsecs);\n\n    const outstandingReq = new OutstandingDataRequest(correlationId,\n                                                      timer,\n                                                      replyRecvdCb,\n                                                      reqFailedCb,\n                                                      userObject);\n    this._outstandingDataReqs[correlationId] = outstandingReq;\n  }\n\n  /**\n   * @param {String} correlationId The internal ID of the request to cancel\n   * @returns {OutstandingDataRequest} The request that was cancelled, if any\n   * @private\n   */\n  cancelOutstandingDataReq(correlationId) {\n    const { LOG_TRACE, LOG_ERROR } = this.logger;\n\n    if (Check.none(correlationId) || !this._outstandingDataReqs) {\n      return null;\n    }\n\n    const req = this._outstandingDataReqs[correlationId];\n    if (req === undefined || req === null) {\n      return null;\n    }\n    LOG_TRACE(`Cancel outstanding data request correlationId=${correlationId}`);\n    if (req.timer) {\n      clearTimeout(req.timer);\n      req.timer = null;\n    }\n\n    try {\n      const result = delete this._outstandingDataReqs[correlationId];\n      if (!result) {\n        LOG_ERROR(`Cannot delete data request ${correlationId}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete data request ${correlationId}`, e);\n    }\n    return req;\n  }\n\n  /**\n   * @private\n   */\n  cleanupSession() {\n    const { LOG_TRACE } = this.logger;\n    if (this._outstandingDataReqs) {\n      LOG_TRACE('Cancel all outstanding data requests');\n      Object.keys(this._outstandingDataReqs).forEach((key) => {\n        const dataReq = this.cancelOutstandingDataReq(key);\n        if (dataReq && dataReq.reqFailedCBFunction) {\n          const requestEvent = SessionEvent.build(RequestEventCode.REQUEST_ABORTED,\n                                                  'Request aborted',\n                                                  key);\n          dataReq.reqFailedCBFunction(this, requestEvent, dataReq.userObject);\n        }\n      });\n    }\n  }\n\n  /**\n   * @param {Message} dataMessageIn The received direct TRmsg\n   * @private\n   */\n  handleDataMessage(dataMessageIn) {\n    const { LOG_TRACE, LOG_INFO } = this.logger;\n    const dataMessage = dataMessageIn;\n    if (this._sessionProperties.generateReceiveTimestamps) {\n      const now = new Date();\n      dataMessage._receiverTimestamp = now.getTime();\n    }\n\n    if (dataMessage.isReplyMessage()) {\n      const correlationId = dataMessage.getCorrelationId();\n      if (Check.anything(correlationId)) {\n        const dataReq = this.cancelOutstandingDataReq(correlationId);\n        if (dataReq !== null) {\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_RECVED);\n          LOG_TRACE('Calling application replyReceivedCallback');\n          dataReq.replyReceivedCBFunction(this, dataMessage, dataReq.userObject);\n          LOG_TRACE('application replyReceivedCallback returns');\n          return;\n        }\n\n        if (correlationId.startsWith(SOLCLIENT_REQUEST_PREFIX)) {\n            // if a reply message doesn't have outstanding request and correlationId\n            // starts with #REQ it is assumed to be a delayed reply and has to be discarded\n          LOG_INFO('DROP: Discard reply message due to missing outstanding request');\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_DISCARD);\n          return;\n        }\n\n        if (correlationId.startsWith(CACHE_REQUEST_PREFIX) &&\n              !(CacheSession && this._messageCallbackInfo.userObject instanceof CacheSession)) {\n          // If it's a cache message, only pass it along if the listener is a cache message\n          // listener. The listener may drop it and increment the DISCARD stat if no\n          // cache session recognizes the reply.\n          LOG_INFO('DROP: Discard cache reply due to no cache session active');\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_DISCARD);\n          return;\n        }\n      }\n    }\n\n    // notify client message callback\n    LOG_TRACE('Calling application messageCallback');\n    this._messageCallbackInfo.messageRxCBFunction(this,\n                                                  dataMessage,\n                                                  this._messageCallbackInfo.userObject);\n    LOG_TRACE('application messageCallback returns');\n  }\n\n  /**\n   * Callback function for subscribe/unsubscribe response\n   * @param {solace.SMPMessage} smpMsg The SMP response to the subscription request\n   * @param {CorrelatedRequest} request The originating request object\n   * @param {Boolean} requestConfirm Whether the user asked for confirmation on the request\n   * @private\n   */\n  handleSubscriptionUpdateResponse(smpMsg, request, requestConfirm) {\n    const response = smpMsg.getResponse();\n    const {\n      responseCode,\n      responseString,\n     } = response;\n    const { correlationKey } = request;\n    // If we don't request confirmation, the router doesn't send one for the OK case,\n    // so we don't need to guard for that.\n    // The router always replies on SUBSCRIPTION_ERROR, so we track whether confirmation\n    // was requested and suppress the reply in certain cases.\n    if (responseCode === 200) {\n      // notify client\n      const sessionEvent = SessionEvent.build(SessionEventCode.SUBSCRIPTION_OK,\n                                              responseString,\n                                              responseCode,\n                                              0,\n                                              correlationKey,\n                                              null);\n      this.sendEvent(sessionEvent);\n    } else {\n      const subscriptionStr = StringUtils.stripNullTerminate(smpMsg.encodedUtf8Subscription);\n      this._sessionFSM.handleSubscriptionUpdateError(responseCode,\n                                                     responseString,\n                                                     subscriptionStr,\n                                                     correlationKey,\n                                                     requestConfirm);\n    }\n  }\n\n\n  /**\n   * Callback function for queue subscribe/unsubscribe response\n   * @param {solace.SMPMessage} smpMsg The SMP response to the subscription request\n   * @param {CorrelatedRequest} request The originating request object\n   * @param {function} callback The callback on response\n   * @private\n   */\n  handleQueueSubscriptionUpdateResponse(smpMsg, request, callback) {\n    const { LOG_TRACE } = this.logger;\n\n    if (!smpMsg) { // reuest timed out.\n      LOG_TRACE('handleQueueSubscriptionUpdateResponse called on timeout.');\n      callback(false, ErrorSubcode.TIMEOUT, 0, 'Timeout');\n      return;\n    }\n\n    const response = smpMsg.getResponse();\n    const {\n      responseCode,\n      responseString,\n     } = response;\n    const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode, responseString);\n    LOG_TRACE('handleQueueSubscriptionUpdateResponse called.', smpMsg);\n    if (responseCode === 200 ||\n      (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT) ||\n      (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND)\n    ) {\n      callback(true, 0, responseCode, responseString);\n    } else {\n      callback(false, errorSubcode, responseCode, responseString);\n    }\n  }\n\n  /**\n   * Callback function for DTE unsubscribe response\n   *\n   * @param {solace.AdMessage} adCtrlMessage The Guaranteed Message Protocol\n   *                           control response to the DTE unsub message\n   * @param {CorrelatedRequest} request The originating request object\n   * @private\n   */\n  handleDTEUnsubscribeResponse(adCtrlMessage, request) {\n    const response = adCtrlMessage.getResponse();\n    const {\n      responseCode,\n      responseString,\n    } = response;\n    const { correlationKey } = request;\n    const eventCode = responseCode === 200\n      ? SessionEventCode.UNSUBSCRIBE_TE_TOPIC_OK\n      : SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR;\n    const subcode = responseCode === 200\n      ? 0\n      : ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                     responseString);\n    this.sendEvent(SessionEvent.build(eventCode,\n                                      responseString,\n                                      responseCode,\n                                      subcode,\n                                      correlationKey\n    ));\n  }\n\n  /**\n   * @param {Number} respCode The returned response code\n   * @param {String} respText The returned response text\n   * @param {String} subscriptionStr The requested topic name\n   * @param {*} correlationKey The user-supplied correlation key\n   * @param {Boolean} requestConfirm Whether confirmation was requested on subscription\n   * @private\n   */\n  handleSubscriptionUpdateError(respCode,\n                                respText,\n                                subscriptionStr,\n                                correlationKey,\n                                requestConfirm) {\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n    if ((errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT &&\n         this._sessionProperties.ignoreDuplicateSubscriptionError) ||\n        (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND &&\n          this._sessionProperties.ignoreSubscriptionNotFoundError)) {\n      if (requestConfirm) {\n        // notify client\n        const sessionEvent = SessionEvent.build(\n          SessionEventCode.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          0,\n          correlationKey,\n          null\n        );\n        this.sendEvent(sessionEvent);\n      }\n    } else {\n      // notify client\n      const sessionEvent = SessionEvent.build(\n        SessionEventCode.SUBSCRIPTION_ERROR,\n        respText,\n        respCode,\n        errorSubcode,\n        correlationKey,\n        `Topic: ${subscriptionStr}`\n      );\n      this.sendEvent(sessionEvent);\n    }\n  }\n\n  /**\n   * @returns {SessionEventCBInfo} The session's event callback\n   * @private\n   */\n  getEventCBInfo() {\n    return this._eventCallbackInfo;\n  }\n\n  /**\n   * @param {SessionEventCBInfo} eventCBInfo The new event callback to set\n   * @private\n   */\n  setEventCBInfo(eventCBInfo) {\n    this._eventCallbackInfo = eventCBInfo;\n  }\n\n  /**\n   * @returns {MessageRxCBInfo} The session's message callback\n   * @private\n   */\n  getMessageCBInfo() {\n    return this._messageCallbackInfo;\n  }\n\n  /**\n   * @param {MessageRxCBInfo} messageCBInfo The new message callback to set\n   * @private\n   */\n  setMessageCBInfo(messageCBInfo) {\n    this._messageCallbackInfo = messageCBInfo;\n  }\n\n  /**\n   * @returns {String} The next correlation tag for this session.\n   * @private\n   */\n  getCorrelationTag() {\n    return this._sessionFSM.getCorrelationTag();\n  }\n\n  /**\n   * Wraps a SessionEventCBInfo or a bare function with an event emitting function.\n   * @param {SessionEventCBInfo|function|undefined} eventCallback The callback to wrap\n   * @returns {SessionEventCBInfo} A SessionEventCBInfo object that handles all callbacks.\n   * @private\n   */\n  wrapEventCallback(eventCallback) {\n    const { LOG_WARN } = this.logger;\n    const eventCallbackInfo = (() => {\n      if (!eventCallback) return null;\n      if (eventCallback.sessionEventCBFunction) return eventCallback;\n      return new SessionEventCBInfo(eventCallback);\n    })();\n    return new SessionEventCBInfo((session, sessionEvent, obj, rfu) => {\n      const { sessionEventCode } = sessionEvent;\n      if (eventCallbackInfo) {\n        try {\n          eventCallbackInfo.sessionEventCBFunction(session, sessionEvent, obj, rfu);\n        } catch (ex) {\n          const error = Object.assign(new OperationError(\n            `Unhandled error in SessionEventRxCBInfo callback on sessionEventCode ${\n              SessionEventCode.describe(sessionEventCode)}`,\n              ErrorSubcode.CALLBACK_ERROR,\n              `On event: ${[sessionEventCode, sessionEvent, obj, rfu]} ${ex}`\n            ), {\n              stack: ex.stack,\n              info:  {\n                event: {\n                  name:          sessionEventCode,\n                  formattedName: `SessionEventCode.${SessionEventCode.describe(sessionEventCode)}`,\n                  args:          [sessionEvent, obj, rfu],\n                },\n                error: ex,\n              },\n            }\n          );\n          LOG_WARN(error.toString(), error.info);\n        }\n      }\n      this.emit(sessionEventCode, sessionEvent);\n    });\n  }\n\n  /**\n   * Wraps a CBInfo or a bare function with an event emitting function.\n   * @param {MessageCBInfo|function|undefined} messageCallback The callback to wrap\n   * @returns {MessageCBInfo} A MessageCBInfo object that handles all callbacks.\n   * @private\n   */\n  wrapMessageCallback(messageCallback) {\n    const { LOG_WARN } = this.logger;\n\n    const messageCallbackInfo = (() => {\n      if (!messageCallback) return null;\n      if (messageCallback.messageRxCBFunction) return messageCallback;\n      return new MessageRxCBInfo(messageCallback);\n    })();\n\n    const formattedName = `SessionEventCode.${SessionEventCode.describe(SessionEventCode.MESSAGE)}`;\n    const buildErrorEvent = (ex, message, object) => Object.assign(\n      new OperationError(`Unhandled error in MessageRxCBInfo callback/handler for ${formattedName}`,\n                         ErrorSubcode.CALLBACK_ERROR),\n      {\n        stack: ex.stack,\n        info:  {\n          event: {\n            name: SessionEventCode.MESSAGE,\n            formattedName,\n            args: [message, object],\n          },\n          error: ex,\n        },\n      });\n\n    return new MessageRxCBInfo((session, message, object) => {\n      if (messageCallbackInfo) {\n        try {\n          messageCallbackInfo.messageRxCBFunction(session, message, object);\n        } catch (ex) {\n          const error = buildErrorEvent(ex, message, object).toString();\n          LOG_WARN(error, error.info, ex);\n        }\n      }\n      try {\n        this.emitDirect(message);\n      } catch (ex) {\n        this.emit('error', buildErrorEvent(ex, message, object));\n      }\n    });\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get adLocallyDisabled() {\n    return !!this._adDisabledReason;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get canConnectConsumer() {\n    if (this.adLocallyDisabled) return false;\n    if (this._capabilities) {\n      return this.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME);\n    }\n    return undefined;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get canConnectPublisher() {\n    if (this.adLocallyDisabled) return false;\n    if (this._capabilities) {\n      return this.isCapable(CapabilityType.GUARANTEED_MESSAGE_PUBLISH);\n    }\n    return undefined;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get disposed() {\n    return this._disposed;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'sessionId': this._sessionFSM && this._sessionFSM.sessionIdHex || '(N/A)',\n      'transport': this.getTransportInfo(),\n      'state':     SessionState.describe(this.getSessionState()),\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.Session = Session;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Effectively a boolean governing TLS downgrade to plain text after authentication.\n * @see {@link solace.SessionProperties#sslConnectionDowngradeTo}\n *\n * @target node\n * @readonly\n * @enum {String}\n * @memberof solace\n * @namespace\n */\nconst SslDowngrade = {\n  /**\n   * @description No downgrade, TLS connection remains encrypted.\n   * @type {String}\n   */\n  NONE:      'NONE',\n  /**\n   * @description TLS connection downgrades to plain text after authentication.\n   * USE WITH CAUTION! Message traffic is not encrypted!\n   */\n  PLAINTEXT: 'PLAIN_TEXT',\n};\n\nmodule.exports.SslDowngrade = Enum.new(SslDowngrade);\n","const { SessionRequestType } = require('./session-request-types');\n\nmodule.exports = {\n  SubscriptionUpdateTimeoutMessages: {\n    [SessionRequestType.ADD_SUBSCRIPTION]:        'Add subscription request timeout',\n    [SessionRequestType.REMOVE_SUBSCRIPTION]:     'Remove subscription request timeout',\n    [SessionRequestType.ADD_P2PINBOX]:            'Add P2P inbox subscription timeout',\n    [SessionRequestType.REMOVE_P2PINBOX]:         'Remove P2P inbox subscription timeout',\n    [SessionRequestType.REMOVE_DTE_SUBSCRIPTION]: 'Remove endpoint topic subscription',\n    default:                                      'Request timeout',\n  },\n};\n","const CodecLib = require('./lib/codec');\nconst { AdProtocolMessage, BinaryMetaBlock, ClientCtrlMessage, KeepAliveMessage, SMPMessage } = require('./lib/message-objects');\nconst { SMFAdProtocolMessageType } = require('./lib/smf-adprotocol-message-types');\nconst { SMFAdProtocolParam } = require('./lib/smf-adprotocol-params');\nconst { SMFClientCtrlMessageType } = require('./lib/smf-client-ctrl-message-types');\nconst { SMFClientCtrlParam } = require('./lib/smf-client-ctrl-params');\nconst { SMFParameterType, SMFExtendedParameterType } = require('./lib/smf-parameter-types');\nconst { SMFProtocol } = require('./lib/smf-protocols');\nconst { SMFSMPMessageType } = require('./lib/smf-smp-message-types');\nconst { SMFSMPMessageTypeFlags } = require('./lib/smf-smp-message-type-flags');\nconst { SMFTransportSessionMessageType } = require('./lib/smf-transport-session-message-types');\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\nmodule.exports.Codec = CodecLib;\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\nmodule.exports.SMFAdProtocolMessageType = SMFAdProtocolMessageType;\nmodule.exports.SMFAdProtocolParam = SMFAdProtocolParam;\nmodule.exports.SMFClientCtrlMessageType = SMFClientCtrlMessageType;\nmodule.exports.SMFClientCtrlParam = SMFClientCtrlParam;\nmodule.exports.SMFParameterType = SMFParameterType;\nmodule.exports.SMFProtocol = SMFProtocol;\nmodule.exports.SMFSMPMessageTypeFlags = SMFSMPMessageTypeFlags;\nmodule.exports.SMFSMPMessageType = SMFSMPMessageType;\nmodule.exports.SMFTransportSessionMessageType = SMFTransportSessionMessageType;\nmodule.exports.SMPMessage = SMPMessage;\nmodule.exports.SMFExtendedParameterType = SMFExtendedParameterType;\n","const SMFLib = require('solclient-smf');\nconst { AdProtocolMessage, SMFParameter } = require('../message-objects');\nconst { Bits, Convert } = require('solclient-convert');\nconst { LOG_DEBUG, LOG_INFO, LOG_ERROR } = require('solclient-log');\nconst { ReplayStartType } = require('solclient-replaystart');\n// const { SMFAdProtocolParam } = require('solclient-smf');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n} = Convert;\n\nfunction parseAdpAt(dataBuf, offset) {\n  if ((offset + 3) > dataBuf.length) {\n    //not enough data\n    LOG_DEBUG('Not enough data to read an ADP message.');\n    return false;\n  }\n  let pos = offset;\n  let onebyte = dataBuf.readUInt8(pos);\n  pos++;\n\n  // var msgRFU = bits(onebyte, 6, 2);\n  const adpVersion = bits(onebyte, 0, 6);\n  let msgLength;\n  let msgType;\n  if (adpVersion < 3) {\n    const twobyte = dataBuf.readUInt16BE(pos);\n    pos += 2;\n    msgType = bits(twobyte, 12, 4);\n    // length in 32 bit words is in the lower 12 bits\n    msgLength = bits(twobyte, 0, 12);\n    // convert length to number of bytes\n    msgLength <<= 2;\n  } else if (adpVersion === 3) {\n    onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    msgType = bits(onebyte, 0, 8);\n    msgLength = dataBuf.readUInt32BE(pos);\n    pos += 4;\n  } else {\n    LOG_ERROR('Found unsupported ADP Version', adpVersion);\n    return false; //unsupported type\n  }\n  //\n  // Verify that the ADP header length does not exceed the entire\n  // contents of the SMF message.\n  if (offset + msgLength > dataBuf.length) {\n    LOG_ERROR(`Invalid Asssured Control Protocol length=${msgLength\n      } exceeds remaining message buffer = ${dataBuf.length - offset}`);\n    return false; // invalid message format\n  }\n  const adpMsg = new AdProtocolMessage(msgType, adpVersion);\n  while (pos < (offset + msgLength)) {\n    onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    const paramUH = bits(onebyte, 6, 2);\n    const paramType = bits(onebyte, 0, 6);\n\n    // Look for and skip padding bytes\n    if (paramType === 0) {\n      continue;\n    }\n    if (pos >= (offset + msgLength)) {\n      LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType} at position =${pos}`);\n      return false; // Assured Control parsing fail\n    }\n    let paramLen = dataBuf.readUInt8(pos);\n    let paramValueLen;\n    pos++;\n    // If paramLen == 0, then this is an extended length format\n    // and there is a 4 byte length following the '0'\n    if (paramLen === 0) {\n      // need at least 5 more bytes in the buffer\n      if (pos + 5 > (offset + msgLength)) {\n        LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType} at position =${pos}`);\n        return false; // Assured Control parsing fail\n      }\n      paramLen = dataBuf.readUInt32BE(pos);\n      pos += 4;\n      paramValueLen = paramLen - 5;\n    } else {\n      paramValueLen = paramLen - 2;\n    }\n    if (paramLen <= 0) {\n      return false; // Assured Control parsing fail\n    }\n    //\n    // make sure there is enough buffer for paramValueLen\n    if (pos + paramValueLen > offset + msgLength) {\n      LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType\n        } length =${paramValueLen} invalid at position =${pos}`);\n      return false; // Assured Control parsing fail\n    }\n    const smfParam = new SMFParameter(paramUH, paramType, null, dataBuf, pos, pos + paramValueLen);\n    adpMsg.addParameter(smfParam);\n    pos += paramValueLen;\n  }\n  return adpMsg;\n}\n\nfunction encAdp0Param(uh, paramtype) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(2)); // length\n  return data.join('');\n}\nfunction encAdp8Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(3)); // length\n  data.push(Convert.int8ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp16Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(4)); // length\n  data.push(Convert.int16ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp32Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(6)); // length\n  data.push(Convert.int32ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp64Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(10)); // length\n  data.push(Convert.int64ToStr(value));\n  return data.join('');\n}\n\n// map of replay start value types to parameter lengths\nconst RSValueLenMap = {};\nRSValueLenMap[ReplayStartType.BEGINNING] = 3; // 2 (TLV) + 1 (replay start type)\nRSValueLenMap[ReplayStartType.DATE] = 11; // 2 (TLV) + 1 (replay start type) + 8 (date value)\nRSValueLenMap[ReplayStartType.RGMID] = 19; //2 (TLV) + 1 (replay start type) + 16 (rgmid value)\n\n// special case for message replay value, a 1 byte type\n// followed by 0 bytes of begining, 8 bytes of date or 16 bytes of rgmid\n// Note replay Start type 0 is handled using encAdp8Param as there is no value\nfunction encAdpReplayParam(uh, paramtype, value) {\n  const data = [];\n  const valType = value.type;\n  const valObj = value.value;\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(RSValueLenMap[valType])); // length\n  data.push(Convert.int8ToStr(valType)); // replay start type, 1 == date, 2 == RGMID\n  switch (valType) {\n    case ReplayStartType.DATE:\n      // encode 64 bit date\n      data.push(Convert.int64ToStr(valObj)); // value is Long type\n      break;\n    case ReplayStartType.RGMID:\n      // encode 128 bit replication group message id\n      // expected value object of\n      // {\n      //   suid (Long),\n      //   messageId (Long),\n      // }\n      data.push(Convert.int64ToStr(valObj.suid)); // get Long suid\n      data.push(Convert.int64ToStr(valObj.messageId)); // get Long messageId\n      break;\n    case ReplayStartType.BEGINNING:\n      // in this case there is no value to encode\n      break;\n    default:\n      // should not happen until there are more replay start type but those\n      // should be handled in a case above\n      break;\n  }\n  return data.join('');\n}\n\nfunction encAdp64AckPairParam(uh, paramtype, min, max) {\n  const data = [];\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(18)); // length\n  data.push(Convert.int64ToStr(min));\n  data.push(Convert.int64ToStr(max));\n  return data.join('');\n}\n\nfunction encAdpUTF8NTParam(uh, paramtype, value) {\n  // value is already UTF8 encoded and null terminated.\n  const data = [];\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n\n  let byte2 = 0;\n  if (value.length <= 253) {\n    byte2 = value.length + 2; // full length of param\n    data.push(Convert.int8ToStr(byte2));\n  } else {\n    byte2 = 0; // extended-length\n    data.push(Convert.int8ToStr(byte2));\n    data.push(Convert.int32ToStr(value.length + 5));\n  }\n  data.push(value);\n  return data.join('');\n}\n\nfunction encAdp(adpMsg) {\n  const paramspace = [];\n  const paramarray = adpMsg.getParameterArray();\n\n  let p;\n  for (p = 0; p < paramarray.length; p++) {\n    const param = paramarray[p];\n    // It's not a flat array, we have gaps!\n    if (param === undefined) {\n      continue;\n    }\n\n    switch (param.getType()) {\n      /*\n       * 8 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.WINDOW:\n      case SMFLib.SMFAdProtocolParam.EP_DURABLE:\n      case SMFLib.SMFAdProtocolParam.ACCESSTYPE:\n      case SMFLib.SMFAdProtocolParam.FLOWTYPE:\n      case SMFLib.SMFAdProtocolParam.EP_RESPECTS_TTL:\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_CTRL_MESSAGE_TYPE:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_STATE:\n      case SMFLib.SMFAdProtocolParam.ACTIVE_FLOW_INDICATION:\n      case SMFLib.SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY:\n      case SMFLib.SMFAdProtocolParam.MAX_REDELIVERY:\n        paramspace.push(encAdp8Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 16 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.EP_BEHAVIOUR:\n        paramspace.push(encAdp16Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 32 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.FLOWID:\n      case SMFLib.SMFAdProtocolParam.TRANSPORT_WINDOW:\n      case SMFLib.SMFAdProtocolParam.EP_ALLOTHER_PERMISSION:\n      case SMFLib.SMFAdProtocolParam.EP_QUOTA:\n      case SMFLib.SMFAdProtocolParam.EP_MAX_MSGSIZE:\n      case SMFLib.SMFAdProtocolParam.GRANTED_PERMISSION:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_ID:\n      case SMFLib.SMFAdProtocolParam.PUBLISHER_ID:\n        paramspace.push(encAdp32Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 64 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDSENT:\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDACKED:\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDRECEIVED:\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_ID:\n      case SMFLib.SMFAdProtocolParam.ENDPOINT_ERROR_ID:\n        paramspace.push(encAdp64Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * Replay start location can be either a 0 bit, 64 bit or 128 bit parameter.\n       */\n      case SMFLib.SMFAdProtocolParam.REPLAY_START_LOCATION:\n        {\n          const replayParamVal = param.getValue();\n          if (undefined === replayParamVal.value) {\n            // replay start location with 0 bit values, type only\n            paramspace.push(encAdp8Param(param.getUh(),\n                                         param.getType(),\n                                         replayParamVal.type));  // start location type 0\n          } else {\n            // replay start location with > 0 bit values, type + value\n            paramspace.push(encAdpReplayParam(param.getUh(), param.getType(), replayParamVal));\n          }\n          break;\n        }\n      /*\n       * application ack\n       */\n      case SMFLib.SMFAdProtocolParam.APPLICATION_ACK:\n        {\n          // Unpack this to multiple parameters\n          const ranges = param.getValue();\n          const uh = param.getUh();\n          const type = param.getType();\n          for (let i = 0; i < ranges.length; ++i) {\n            const range = ranges[i];\n            paramspace.push(encAdp64AckPairParam(uh,\n                                                 type,\n                                                 range[0],\n                                                 range[1]));\n          }\n          break;\n        }\n      /*\n       * string and other variable length parameters\n       */\n      case SMFLib.SMFAdProtocolParam.QUEUENAME:\n      case SMFLib.SMFAdProtocolParam.DTENAME:\n      case SMFLib.SMFAdProtocolParam.TOPICNAME:\n      case SMFLib.SMFAdProtocolParam.FLOWNAME:\n      case SMFLib.SMFAdProtocolParam.SELECTOR:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_NAME:\n        paramspace.push(encAdpUTF8NTParam(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * Transaction Publisher Notify\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY:\n        break;\n      /*\n       * Transaction Publisher Ack\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK:\n        break;\n      /*\n       * Transaction Subscriber Ack\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK:\n        break;\n      /*\n       * No Local Parameter has no data\n       * Cut Through Parameter has no data\n       */\n      case SMFLib.SMFAdProtocolParam.NOLOCAL:\n      case SMFLib.SMFAdProtocolParam.CUT_THROUGH:\n        paramspace.push(encAdp0Param(param.getUh(), param.getType()));\n        break;\n      /*\n       * Application Publisher Acknowledge\n       */\n      case SMFLib.SMFAdProtocolParam.APPLICATION_PUB_ACK:\n        break;\n      default:\n        LOG_INFO('Unrecognized ADProtocol Parameter in Message');\n        break;\n    }\n  }\n\n  const paramdata = paramspace.join('');\n\n  const data = [];\n  if (adpMsg.version === 2) {\n    let threebytes = 0;\n    threebytes = setBits(threebytes, 0, 22, 2); // RFU\n    threebytes = setBits(threebytes, adpMsg.version, 16, 6); // RFU\n    threebytes = setBits(threebytes, adpMsg.msgType, 12, 4); // msgtype\n    // length in 32 bit words means the real length must always be a multiple of 4, so pad as\n    // necessary\n\n    // 4 - how many bytes passed a 4 byte boundary\n    let padBytes = 4 - ((3 + paramdata.length) & 0x3);\n    // calculate the total length, 3 bytes header + params, in 32 bit words\n    const length = (3 + paramdata.length + padBytes) >> 2;\n    threebytes = setBits(threebytes, length, 0, 12);\n    data.push(int24ToStr(threebytes)); // first 3B (RFU, version, msgtype, length)\n    data.push(paramdata);\n\n    if (padBytes === 4) padBytes = 0; // don't add 4 pad bytes\n    while (padBytes > 0) {\n      data.push(int8ToStr(0));\n      padBytes--;\n    }\n  } else if (adpMsg.version === 3) {\n    let twobytes = 0;\n    twobytes = setBits(twobytes, 0, 14, 2); // RFU\n    twobytes = setBits(twobytes, adpMsg.version, 8, 6); // version\n    twobytes = setBits(twobytes, adpMsg.msgType, 0, 8); // msgtype\n    data.push(int16ToStr(twobytes)); // first 2B (RFU, version, msgtype)\n    data.push(int32ToStr(6 + paramdata.length)); //length: 6B header + params\n    data.push(paramdata);\n  } else {\n    LOG_ERROR(`Invalid Version ${adpMsg.version} found while encoding`);\n  }\n\n  return data.join('');\n}\n\nmodule.exports.parseAdpAt = parseAdpAt;\nmodule.exports.encAdp = encAdp;\n","const { ContentSummaryType } = require('./content-summary-types');\nconst { Decode } = require('./decode');\nconst { Encode } = require('./encode');\nconst { ParamParse } = require('./param-parse');\nconst { ParseSMF } = require('./parse-smf');\nconst { Transport } = require('./transport');\n\nmodule.exports.ContentSummaryType = ContentSummaryType;\nmodule.exports.Encode = Encode;\nmodule.exports.Decode = Decode;\nmodule.exports.ParamParse = ParamParse;\nmodule.exports.ParseSMF = ParseSMF;\nmodule.exports.Transport = Transport;\n\n","const { Bits, Convert } = require('solclient-convert');\nconst { ClientCtrlMessage, SMFParameter } = require('../message-objects');\nconst { LOG_ERROR } = require('solclient-log');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr, /*strToInt8,*/\n  int16ToStr, /*strToInt16,*/\n  int32ToStr, /*strToUInt32,*/\n} = Convert;\n\nfunction parseCCAt(dataBuf, offset, payloadLen) {\n  const ccMsg = new ClientCtrlMessage();\n  if (payloadLen < 6 || offset + 6 > dataBuf.length) {\n      // not enough data! Return empty.\n      // This is required because we can get an empty CC payload as a router response\n    return ccMsg;\n  }\n\n  let pos = offset;\n  const twobytes = dataBuf.readUInt16BE(pos);\n  pos += 2;\n    // var uh = bits(twobytes, 15, 1);\n  const version = bits(twobytes, 8, 3);\n  const msgType = bits(twobytes, 0, 8);\n  const len = dataBuf.readUInt32BE(pos);\n  pos += 4;\n\n    // Sanity check: we support ClientCtrl v1\n  if (version !== 1) {\n    LOG_ERROR(`Unsupported ClientCtrl version ${version}`);\n    return false;\n  }\n\n  if (len <= 0 || (offset + len) > dataBuf.length) {\n    return false;\n  }\n\n  ccMsg.msgType = msgType;\n  ccMsg.version = version;\n  while (pos < (offset + len)) {\n    const onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    const paramUh = bits(onebyte, 7, 1);\n    const paramType = bits(onebyte, 0, 7);\n    const paramLen = dataBuf.readUInt32BE(pos);\n    if (paramLen <= 0) {\n      return false; // SMF parsing fail\n    }\n\n    pos += 4;\n    const paramValueLen = paramLen - 5;\n    const smfP = new SMFParameter(paramUh, paramType, null, dataBuf, pos, pos + paramValueLen);\n    ccMsg.addParameter(smfP);\n    pos += paramValueLen;\n  }\n  return ccMsg;\n}\n\nfunction encCC(ccMsg) {\n  const paramSpace = [];\n  const paramArray = ccMsg.getParameterArray();\n    /*\n    ClientCtrl Parameter formatting:\n        1 byte uh/type\n        4 bytes length\n        N bytes value\n     */\n  for (let p = 0, n = paramArray.length; p < n; ++p) {\n    const currentParam = paramArray[p];\n      // It's not a flat array, we have gaps!\n    if (currentParam === undefined) {\n      continue;\n    }\n    let currentParamOneByte = 0;\n    currentParamOneByte = setBits(currentParamOneByte, currentParam.getUh(), 7, 1);\n    currentParamOneByte = setBits(currentParamOneByte, currentParam.getType(), 0, 7);\n    paramSpace.push(int8ToStr(currentParamOneByte));\n    paramSpace.push(int32ToStr(currentParam.getValue().length + 5));\n    paramSpace.push(currentParam.getValue());\n  }\n\n  const paramData = paramSpace.join('');\n  let twobytes = 0;\n  twobytes = setBits(twobytes, 0, 15, 1); // uh\n  twobytes = setBits(twobytes, 0, 11, 4); // RFU\n  twobytes = setBits(twobytes, 1, 8, 3); // version\n  twobytes = setBits(twobytes, ccMsg.msgType, 0, 8); // msgtype\n\n  const data = [];\n  data.push(int16ToStr(twobytes)); // first 2B (uh, version, msgtype)\n  data.push(int32ToStr(6 + paramData.length)); // length: 6B header + params\n  data.push(paramData);\n  return data.join('');\n}\n\nmodule.exports.parseCCAt = parseCCAt;\nmodule.exports.encCC = encCC;\n","class ContentSummaryElement {\n  constructor(type = null, position = 0, length = 0) {\n    this.type = type;\n    this.position = position;\n    this.length = length;\n  }\n}\n\nmodule.exports.ContentSummaryElement = ContentSummaryElement;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Type maching SMF encoding value\n * @enum {number}\n * @memberof solace\n * @private\n */\nconst ContentSummaryType = {\n  XML_META:          0,\n  XML_PAYLOAD:       1,\n  BINARY_ATTACHMENT: 2,\n  CID_LIST:          3,\n  BINARY_METADATA:   4,\n};\n\nmodule.exports.ContentSummaryType = Enum.new(ContentSummaryType);\n","const DebugLib = require('solclient-debug');\nconst SolclientDestinationLib = require('solclient-destination');\nconst SolclientMessageLib = require('solclient-message');\nconst SolclientSDTLib = require('solclient-sdt');\nconst { BinaryMetaBlock, KeepAliveMessage } = require('../message-objects');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { Hex, Long } = require('solclient-convert');\nconst { Lazy } = require('solclient-eskit');\nconst { LogFormatter } = require('solclient-log');\nconst { parseAdpAt } = require('./adprotocol');\nconst { parseCCAt } = require('./client-ctrl');\nconst { ParseSMF } = require('./parse-smf');\nconst { PriorityUserCosMap } = require('./priority-user-cos-map');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMP } = require('./smp');\nconst { Transport } = require('./transport');\n\nconst { formatHexString } = Hex;\nconst { lazyValue } = Lazy;\nconst { parseSMFAt } = ParseSMF;\nconst { parseSMPAt } = SMP;\nconst { parseTsSmfMsgAt } = Transport;\n\nconst logger = new LogFormatter('[smf-decode]');\nconst { LOG_DEBUG,\n        LOG_ERROR } = logger;\n\nconst userCosForPriority = lazyValue(() => new PriorityUserCosMap().reverse);\n\nconst BIN_STRUCTYPES = {\n  0x0A: SolclientMessageLib.MessageType.MAP,\n  0x0B: SolclientMessageLib.MessageType.STREAM,\n  0x07: SolclientMessageLib.MessageType.TEXT,\n};\n\nfunction adaptBinaryMetaToMessage(binaryMeta, messageIn) {\n  const message = messageIn;\n  const messageSdt = SolclientSDTLib.Codec.parseSingleElement(binaryMeta.payload, 0);\n\n  if (!(messageSdt && messageSdt.getType() === SolclientSDTLib.SDTFieldType.STREAM)) {\n    return;\n  }\n\n  const sdtstream = messageSdt.getValue();\n  let sdtfield = sdtstream.getNext();\n  if (sdtfield && sdtfield.getType() === SolclientSDTLib.SDTFieldType.BYTEARRAY\n    && sdtfield._value && sdtfield._value.length > 0) {\n    // Preamble byte array is present\n    const preambleByte0 = sdtfield._value.readUInt8(0);\n    if ((preambleByte0 & 0x80) === 0) {\n      // structured message: override default \"BIN\" message type\n      message._messageType = (BIN_STRUCTYPES[preambleByte0 & 0x0F] ||\n                              SolclientMessageLib.MessageType.BINARY);\n    }\n    if (sdtfield._value.length > 1) {\n      const preambleByte1 = sdtfield._value.readUInt8(1);\n      message.setAsReplyMessage((preambleByte1 & 0x80) !== 0);\n    }\n  }\n\n  sdtfield = sdtstream.getNext();\n  if (sdtfield && sdtfield.getType() === SolclientSDTLib.SDTFieldType.MAP) {\n    const sdtMap = sdtfield.getValue();\n    const p = sdtMap.getField('p');\n    const h = sdtMap.getField('h');\n    if (p) {\n      message.setUserPropertyMap(p.getValue());\n    }\n    if (h) {\n      const headerMap = h.getValue();\n      const ci = headerMap.getField('ci');\n      const mi = headerMap.getField('mi');\n      const mt = headerMap.getField('mt');\n      const rt = headerMap.getField('rt');\n      const si = headerMap.getField('si');\n      const sn = headerMap.getField('sn');\n      const ts = headerMap.getField('ts');\n      const ex = headerMap.getField('ex');\n      if (ci) {\n        message.setCorrelationId(ci.getValue());\n      }\n      if (mi) {\n        message.setApplicationMessageId(mi.getValue());\n      }\n      if (mt) {\n        message.setApplicationMessageType(mt.getValue());\n      }\n      if (rt) {\n        message.setReplyTo(rt.getValue());\n      }\n      if (si) {\n        message.setSenderId(si.getValue());\n      }\n      if (sn) {\n        message.setSequenceNumber(sn.getValueNoThrow());\n      }\n      if (ts) {\n        message.setSenderTimestamp(ts.getValue());\n      }\n      if (ex) {\n        message.setGMExpiration(ex.getValue());\n      }\n    }\n  }\n}\n\nfunction adaptSmfToMessage(smfHeader, messageIn, stream, offset) {\n  const message = messageIn;\n  message._setDeliverToOne(!!smfHeader.smf_dto);\n  message._setDeliveryMode(smfHeader.pm_deliverymode ||\n                          SolclientMessageLib.MessageDeliveryModeType.DIRECT);\n  if (smfHeader.pm_tr_topicname_bytes !== null) {\n    message._setDestination(\n      SolclientDestinationLib.DestinationFromNetwork.createDestinationFromBytes(\n        smfHeader.pm_tr_topicname_bytes));\n  }\n  message._setDiscardIndication(!!smfHeader.smf_di);\n  message._setElidingEligible(!!smfHeader.smf_elidingEligible);\n  message._setDMQEligible(!!smfHeader.smf_deadMessageQueueEligible);\n  message._setUserCos(userCosForPriority.value.get(smfHeader.smf_priority));\n  message._setPriority(smfHeader.pm_msg_priority);\n  if (smfHeader.pm_userdata) message._setUserData(smfHeader.pm_userdata);\n\n  message.setRedelivered(!!smfHeader.pm_ad_redelflag || !!smfHeader.pm_ad_flowredelflag);\n\n  message.setFlowId(smfHeader.pm_ad_flowid);\n  message.setGuaranteedMessageId(smfHeader.pm_ad_msgid);\n  message.setGuaranteedPreviousMessageId(smfHeader.pm_ad_prevmsgid);\n  message.setPublisherId(smfHeader.pm_ad_publisherid);\n  message.setPublisherMessageId(smfHeader.pm_ad_publishermsgid);\n  message.setTopicSequenceNumber(smfHeader.pm_ad_topicSequenceNumber);\n  if (message.getDeliveryMode() === SolclientMessageLib.MessageDeliveryModeType.DIRECT) {\n    message.setDeliveryCount(-1);\n  } else if (smfHeader.pm_ad_redeliveryCount) {\n    message.setDeliveryCount(smfHeader.pm_ad_redeliveryCount + 1);\n  } else { // AD, but delivery count header not present\n    // Only the flow knows whether the qEndpointBehaviour DC flag was set,\n    // so it overrides the value before passing it to the user with -1 if it wasn't.\n    message.setDeliveryCount(1);\n  }\n\n  // set the suid for the message if present\n  if (smfHeader.pm_ad_spooler_unique_id) {\n    message._setSpoolerUniqueId(smfHeader.pm_ad_spooler_unique_id);\n  }\n  // set the message id of the replication group message id using\n  // ASSURED_DELIVERY_REPLICATION_MATE_ACK_MESSAGE_ID if present\n  // otherwise use ASSURED_DELIVERY_ACK_MESSAGE_ID if present\n  // otherwise let the Mesage.getReplicationGroupMessageId use\n  // the value set by message.setGuaranteedMessageId\n  if (smfHeader.pm_ad_replication_mate_ack_message_id) {\n    message._setSpoolerMessageId(smfHeader.pm_ad_replication_mate_ack_message_id);\n  } else if (smfHeader.pm_ad_local_spooler_message_id) {\n    message._setSpoolerMessageId(smfHeader.pm_ad_local_spooler_message_id);\n  }\n\n  if (Long.isLong(smfHeader.pm_ad_ttl)) {\n    message.setTimeToLive(smfHeader.pm_ad_ttl.toNumber());\n  } else {\n    message.setTimeToLive(smfHeader.pm_ad_ttl);\n  }\n\n  // Copy content into fields (from input bytes)\n  const payloadOffset = offset + smfHeader.headerLength;\n  const cs = smfHeader.pm_content_summary;\n\n  if (!(cs && cs.length)) {\n    // No content-summary, assume binary attachment\n    message._setBinaryAttachment(smfHeader.payloadLength > 0\n                                ? stream.slice(payloadOffset,\n                                               payloadOffset + smfHeader.payloadLength)\n                                : undefined);\n    return;\n  }\n\n  for (let i = 0, n = cs.length; i < n; ++i) {\n    const currentChunk = cs[i];\n    const chunkBegin = payloadOffset + currentChunk.position;\n    const chunkEnd = payloadOffset + currentChunk.position + currentChunk.length;\n    switch (currentChunk.type) {\n      case ContentSummaryType.BINARY_ATTACHMENT:\n        message._setBinaryAttachment(stream.slice(chunkBegin, chunkEnd));\n        break;\n      case ContentSummaryType.BINARY_METADATA:\n        {\n          const binaryMeta = BinaryMetaBlock.fromEncodedSmf(stream, chunkBegin);\n          message.binaryMetadataChunk = binaryMeta;\n          if (binaryMeta.type === 0) {\n            // we have SDT JMS metadata\n            adaptBinaryMetaToMessage(binaryMeta, message);\n          }\n          break;\n        }\n      case ContentSummaryType.XML_META:\n        message._setXmlMetadata(stream.toString('latin1', chunkBegin, chunkEnd));\n        break;\n      case ContentSummaryType.XML_PAYLOAD:\n        message._setXmlContentInternal(stream.toString('latin1', chunkBegin, chunkEnd));\n        break;\n      default:\n        LOG_ERROR(`Unhandled ContentSummaryType: ${ContentSummaryType.describe(currentChunk.type)}`);\n    }\n  }\n}\n\nfunction decodeCompoundMessage(dataBuf, pos) {\n  const header = parseSMFAt(dataBuf, pos);\n  if (!header) {\n    LOG_DEBUG('decodeCompoundMessage: SMF parsing failed');\n    return null;\n  }\n  // the parser determined there was a full SMF message\n  const payloadPosition = pos + header.headerLength;\n  const payloadLen = header.payloadLength;\n  let message;\n  switch (header.smf_protocol) {\n    case SMFProtocol.TSESSION:\n      message = parseTsSmfMsgAt(dataBuf, payloadPosition, header);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.TRMSG:\n      message = new SolclientMessageLib.Message();\n      message._smfHeader = header;\n      adaptSmfToMessage(header, message, dataBuf, pos);\n      return message;\n\n    case SMFProtocol.ADCTRL:\n      message = parseAdpAt(dataBuf, payloadPosition, payloadLen);\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.CLIENTCTRL:\n      message = parseCCAt(dataBuf, payloadPosition, payloadLen);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.SMP:\n      message = parseSMPAt(dataBuf, payloadPosition);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.KEEPALIVE:\n    case SMFProtocol.KEEPALIVEV2:\n      message = new KeepAliveMessage();\n      message.smfHeader = header;\n      return message;\n\n    default:\n      LOG_ERROR(`Unknown protocol: 0x${formatHexString(header.smf_protocol)}, ` +\n                `dump message content: \\n${\n                DebugLib.Debug.formatDumpBytes(dataBuf.slice(pos,\n                                                             pos + header.messageLength).toString('latin1'),\n                                               true, 0)}`);\n      break;\n  }\n  return null;\n}\n\nconst Decode = {\n  decodeCompoundMessage,\n};\n\nmodule.exports.Decode = Decode;\n","const MessageLib = require('solclient-message');\nconst { Base64, Bits, Convert } = require('solclient-convert');\nconst { BinaryMetaBlock, SMFHeader, SMPMessage } = require('../message-objects');\nconst { Check } = require('solclient-validate');\nconst { ClientCtrlMessage, KeepAliveMessage, AdProtocolMessage } = require('../message-objects');\nconst { Codec: SDTCodec } = require('solclient-sdt');\nconst { ContentSummaryElement } = require('./content-summary-element');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { DestinationType } = require('solclient-destination');\nconst { encAdp } = require('./adprotocol');\nconst { encCC } = require('./client-ctrl');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_TRACE, LOG_INFO } = require('solclient-log');\nconst { ParamParse } = require('./param-parse');\nconst { PriorityUserCosMap } = require('./priority-user-cos-map');\nconst { SDTField, SDTFieldType, SDTMapContainer, SDTStreamContainer } = require('solclient-sdt');\nconst { SMFParameterType, SMFExtendedParameterType } = require('../smf-parameter-types');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMP } = require('./smp');\n\nconst { encode: base64Encode } = Base64;\nconst { set: setBits } = Bits;\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n  int64ToStr,\n} = Convert;\nconst { lazyValue } = Lazy;\nconst {\n  encContentSummary,\n  encDeliveryMode,\n  encLightSMFParam,\n  encodeSMFParam,\n  encodeSMFExtendedParam,\n} = ParamParse;\nconst { encodeSingleElement } = SDTCodec;\nconst { encSmp } = SMP;\n\nconst priorityForUserCos = lazyValue(() => new PriorityUserCosMap().forward);\n\nfunction addContentElementToArrays(csumm, payloadArray, dataChunk, cstype) {\n  if (Check.anything(dataChunk) && dataChunk.length > 0) {\n    const cse = new ContentSummaryElement(cstype, NaN, dataChunk.length);\n    csumm.push(cse);\n    payloadArray.push(dataChunk);\n  }\n}\n\nfunction addToMapIfPresent(headerMap, key, type, value) {\n  if (Check.anything(value)) {\n    headerMap.addField(key, SDTField.create(type, value));\n  }\n}\n\n// Return the binary attachment as string, sets the binaryMetaData on the message.\n// Not nice, but fast.\nfunction adaptMessageToBinaryMeta(message) {\n  let result;\n  // solace header map\n  const headerMap = new SDTMapContainer();\n  addToMapIfPresent(headerMap, 'ci', SDTFieldType.STRING, message.getCorrelationId());\n  addToMapIfPresent(headerMap, 'mi', SDTFieldType.STRING, message.getApplicationMessageId());\n  addToMapIfPresent(headerMap, 'mt', SDTFieldType.STRING, message.getApplicationMessageType());\n  addToMapIfPresent(headerMap, 'rt', SDTFieldType.DESTINATION, message.getReplyTo());\n  addToMapIfPresent(headerMap, 'si', SDTFieldType.STRING, message.getSenderId());\n  addToMapIfPresent(headerMap, 'sn', SDTFieldType.INT64, message.getSequenceNumber());\n  addToMapIfPresent(headerMap, 'ts', SDTFieldType.INT64, message.getSenderTimestamp());\n  addToMapIfPresent(headerMap, 'ex', SDTFieldType.INT64, message.getGMExpiration());\n\n  // container map: solace headers + user prop map\n  const sdtMap = new SDTMapContainer();\n  if (message.getUserPropertyMap()) {\n    sdtMap.addField('p', SDTField.create(SDTFieldType.MAP, message.getUserPropertyMap()));\n  }\n  if (headerMap.getKeys().length > 0) {\n    sdtMap.addField('h', SDTField.create(SDTFieldType.MAP, headerMap));\n  }\n\n  let preambleByte0 = 0;\n  switch (message.getType()) {\n    case MessageLib.MessageType.BINARY:\n      preambleByte0 |= 0x80;\n      break;\n    case MessageLib.MessageType.MAP:\n      preambleByte0 |= 0x0A;\n      result = encodeSingleElement(message._structuredContainer);\n      break;\n    case MessageLib.MessageType.STREAM:\n      preambleByte0 |= 0x0B;\n      result = encodeSingleElement(message._structuredContainer);\n      break;\n    case MessageLib.MessageType.TEXT:\n      preambleByte0 |= 0x07;\n      result = encodeSingleElement(message._structuredContainer);\n      break;\n    default:\n      LOG_INFO(`Unhandled messageType: ${message.getType()}`);\n      break;\n  }\n  const preambleByte1 = message.isReplyMessage() ? 0x80 : 0;\n  const sdtPreamble = SDTField.create(SDTFieldType.BYTEARRAY,\n                                      String.fromCharCode(preambleByte0, preambleByte1));\n\n  // Putting it all together: a stream with the preamble and map\n  const sdtStreamContainer = new SDTStreamContainer();\n  sdtStreamContainer.addField(sdtPreamble);\n  sdtStreamContainer.addField(SDTField.create(SDTFieldType.MAP, sdtMap));\n\n  const binaryMeta = new BinaryMetaBlock();\n  binaryMeta.type = 0;\n  binaryMeta.payload = encodeSingleElement(SDTField.create(SDTFieldType.STREAM,\n                                                           sdtStreamContainer));\n  message.binaryMetadataChunk = binaryMeta;\n  return result;\n}\n\n\nfunction adaptMessageToSmf_nonPayload(message, smfHeaderIn) {\n  const smfHeader = smfHeaderIn;\n  const deliveryMode = message.getDeliveryMode();\n\n  smfHeader.smf_dto = message.isDeliverToOne();\n  smfHeader.pm_deliverymode = deliveryMode;\n  smfHeader.smf_adf = deliveryMode === MessageLib.MessageDeliveryModeType.DIRECT ? 0 : 1;\n  smfHeader.smf_di = message.isDiscardIndication();\n  smfHeader.smf_elidingEligible = message.isElidingEligible();\n  smfHeader.smf_deadMessageQueueEligible = message.isDMQEligible();\n  smfHeader.pm_ad_flowid = message.getFlowId();\n  smfHeader.pm_ad_publisherid = message.getPublisherId();\n  smfHeader.pm_ad_publishermsgId = message.getPublisherMessageId();\n  smfHeader.pm_ad_msgid = message.getGuaranteedMessageId();\n  smfHeader.pm_ad_prevmsgid = message.getGuaranteedPreviousMessageId();\n  smfHeader.pm_ad_ttl = message.getTimeToLive();\n  smfHeader.pm_ad_ackimm = message.isAcknowledgeImmediately();\n  smfHeader.pm_ad_redelflag = message.isRedelivered();\n\n  const dest = message.getDestination();\n  if (dest) {\n    smfHeader.pm_tr_topicname_bytes = dest.getBytes();\n    if (dest.type === DestinationType.QUEUE ||\n        dest.type === DestinationType.TEMPORARY_QUEUE) {\n      const { offset } = dest;\n      smfHeader.pm_queue_len = smfHeader.pm_tr_topicname_bytes.length - offset;\n      smfHeader.pm_queue_offset = offset;\n    }\n  }\n\n  smfHeader.smf_priority = priorityForUserCos.value.get(message.getUserCos());\n\n  if (message.getPriority() !== undefined\n    && typeof message.getPriority() === 'number'\n    && message.getPriority() <= 255\n    && message.getPriority() >= 0) {\n    smfHeader.pm_msg_priority = message.getPriority();\n  } else {\n    smfHeader.pm_msg_priority = null;\n  }\n\n  const userData = message.getUserData();\n  smfHeader.pm_userdata = (userData === null || userData === undefined)\n    ? null\n    : message.getUserData();\n}\n\nfunction adaptMessageToSmf_payloadMemoize(message) {\n  let encodedSdtPayload;\n\n  // Setup user properties, header properties, msgtype\n  if (message.getCorrelationId() ||\n      message.getApplicationMessageId() ||\n      message.getApplicationMessageType() ||\n      message.getReplyTo() ||\n      message.getSenderId() ||\n      message.getSequenceNumber() ||\n      message.getSenderTimestamp() ||\n      message.getUserPropertyMap() ||\n      message.isReplyMessage() ||\n      (message.getType() !== MessageLib.MessageType.BINARY)) {\n    // add SDT binary metadata\n    encodedSdtPayload = adaptMessageToBinaryMeta(message);\n  }\n\n  // Build array of ContentSummaryElements\n  const csumm = [];\n  const payload = [];\n  addContentElementToArrays(csumm, payload,\n                            message.getXmlMetadata(), ContentSummaryType.XML_META);\n  addContentElementToArrays(csumm, payload,\n                            message.getXmlContent(), ContentSummaryType.XML_PAYLOAD);\n  if (encodedSdtPayload) {\n    addContentElementToArrays(csumm, payload,\n                              encodedSdtPayload, ContentSummaryType.BINARY_ATTACHMENT);\n  } else {\n    addContentElementToArrays(csumm, payload,\n                              message._binaryAttachment ? message._binaryAttachment.toString('latin1') : '', ContentSummaryType.BINARY_ATTACHMENT);\n  }\n  const binaryMeta = message.binaryMetadataChunk;\n  if (binaryMeta !== null) {\n    const binaryMetaSMF = binaryMeta.asEncodedSmf();\n    const MAX_24BITS = 16777215;\n    if (binaryMetaSMF.length > MAX_24BITS) {\n      LOG_TRACE(`binary-meta data (${binaryMetaSMF.length}) over the ${MAX_24BITS} limit`);\n      throw new OperationError(`binary-meta data (${binaryMetaSMF.length}) over the ${MAX_24BITS} limit`, ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    } else {\n      addContentElementToArrays(csumm, payload, binaryMetaSMF, ContentSummaryType.BINARY_METADATA);\n    }\n  }\n  message._memoized_csumm = csumm;\n  message._memoized_payload = payload.join(''); \n  message._payload_is_memoized = true;\n  return message._memoized_payload ? message._memoized_payload.length : 0;\n}\n\nfunction adaptMessageToSmf_payloadFinalize(message, smfHeaderIn) {\n  const smfHeader = smfHeaderIn;\n  if (!message._payload_is_memoized) {\n    adaptMessageToSmf_payloadMemoize(message);\n  }\n  const csumm = message._memoized_csumm;\n  const payloadBytes = message._memoized_payload;\n  if (csumm.length === 0 ||\n      (csumm.length === 1 && csumm[0].type === ContentSummaryType.BINARY_ATTACHMENT)) {\n    // NULL or RAW payload (no content-summary)\n    //  Was this here to invert the condition?\n    // LOG_TRACE('NULL or RAW payload (no content-summary)');\n  } else {\n    smfHeader.pm_content_summary = csumm;\n  }\n\n  smfHeader.payload = payloadBytes;\n}\n\nfunction adaptMessageToSmf(message, smfHeaderIn) {\n  adaptMessageToSmf_payloadFinalize(message, smfHeaderIn);\n  adaptMessageToSmf_nonPayload(message, smfHeaderIn);\n}\n\n/**\n * Creates an array of all values that fit in the given number of bits.\n * e.g. bitRange(1) => [0, 1], bitRange(2) => [0, 1, 2, 3]\n * @param {Number} bits The number of bits in the range\n * @returns {Number} All values that fit in that number of bits\n * @private\n */\nconst bitRange = bits => Array.from(Array(Math.pow(2, bits))).map((el, i) => i);\nconst maskValues = (shift, bits) => bitRange(bits).map(val => setBits(0, val, shift, bits));\nconst DI_BIT = maskValues(31, 1);\nconst ELIDING_ELIGIBLE_BIT = maskValues(30, 1);\nconst DTO_BIT = maskValues(29, 1);\nconst ADF_BIT = maskValues(28, 1);\nconst DMQE_BIT = maskValues(27, 1);\nconst VERSION_BITS = maskValues(24, 3);\nconst UH_BITS = maskValues(22, 2);\nconst PROTOCOL_BITS = maskValues(16, 6);\nconst PRIORITY_BITS = maskValues(12, 4);\nconst TTL_BITS = maskValues(0, 8);\nconst QT_OFFSET_BYTES = maskValues(8, 8);\nconst QT_LEN_BYTES = maskValues(0, 8);\n\nfunction encodeSMF(header) {\n  // First 4 bytes: protocol, ttl, etc\n  let w1 = 0;\n\n  // PERF: single expression to make w1 const\n  w1 |= DI_BIT[header.smf_di && 1 || 0];\n  w1 |= ELIDING_ELIGIBLE_BIT[header.smf_elidingEligible && 1 || 0];\n  w1 |= DTO_BIT[header.smf_dto && 1 || 0];\n  w1 |= ADF_BIT[header.smf_adf && 1 || 0];\n  w1 |= DMQE_BIT[header.smf_deadMessageQueueEligible && 1 || 0];\n  w1 |= VERSION_BITS[header.smf_version || 0];\n  w1 |= UH_BITS[header.smf_uh || 0];\n  w1 |= PROTOCOL_BITS[header.smf_protocol || 0];\n  w1 |= PRIORITY_BITS[header.smf_priority || 0];\n  w1 |= TTL_BITS[header.smf_ttl || 0]; // PERF: or set w1 to ttl initially.\n\n  const params = [];\n  // Encode all standard SMF parameters\n  // Topic name and queue/topic offsets are supposed to come first\n  if (header.pm_tr_topicname_bytes) {\n    params.push(encodeSMFParam(2, SMFParameterType.TR_TOPICNAME,\n                               `${header.pm_tr_topicname_bytes}`));\n  }\n  if (header.pm_queue_len) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_QUEUE_NAME_OFFSET,\n                                 int16ToStr(QT_OFFSET_BYTES[header.pm_queue_offset] |\n                                            QT_LEN_BYTES[header.pm_queue_len])));\n  }\n  if (header.pm_topic_len) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_TOPIC_NAME_OFFSET,\n                                 int16ToStr(QT_OFFSET_BYTES[header.pm_topic_offset] |\n                                            QT_OFFSET_BYTES[header.pm_topic_len])));\n  }\n\n  if (header.pm_corrtag !== null && header.pm_corrtag !== undefined) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_CORRELATION,\n                                 int24ToStr(header.pm_corrtag)));\n  }\n  if (header.pm_ad_ackimm) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_ACK_IMMEDIATELY,\n                                 ''));\n  }\n\n  if (header.pm_msg_priority !== null) {\n    params.push(encodeSMFParam(0, SMFParameterType.MESSAGEPRIORITY,\n                               int8ToStr(header.pm_msg_priority)));\n  }\n  if (header.pm_userdata !== null && header.pm_userdata !== '') {\n    params.push(encodeSMFParam(0, SMFParameterType.USERDATA,\n                               header.pm_userdata));\n  }\n  if (header.pm_username) {\n    // do a sloppy base64 (no newlines)\n    params.push(encodeSMFParam(0, SMFParameterType.USERNAME,\n                               base64Encode(header.pm_username)));\n  }\n  if (header.pm_password) {\n    // do a sloppy base64 (no newlines)\n    params.push(encodeSMFParam(0, SMFParameterType.PASSWORD,\n                               base64Encode(header.pm_password)));\n  }\n  if (header.pm_respcode) {\n    // not useful API->router\n    params.push(encodeSMFParam(0, SMFParameterType.RESPONSE,\n                               int32ToStr(header.pm_respcode) + header.pm_respstr));\n  }\n\n  if (header.pm_deliverymode !== null) {\n    params.push(encodeSMFParam(0, SMFParameterType.DELIVERY_MODE,\n                               encDeliveryMode(header.pm_deliverymode)));\n  }\n\n  if (header.pm_ad_msgid !== undefined) {\n    params.push(encodeSMFParam(2, SMFParameterType.ASSURED_MESSAGE_ID,\n                               int64ToStr(header.pm_ad_msgid)));\n    params.push(encodeSMFParam(2, SMFParameterType.ASSURED_PREVMESSAGE_ID,\n                               int64ToStr(header.pm_ad_prevmsgid)));\n  }\n\n  if (header.pm_ad_flowid) {\n    params.push(encodeSMFParam(0, SMFParameterType.ASSURED_FLOWID,\n                               int32ToStr(header.pm_ad_flowid)));\n  }\n\n  // header.pm_ad_redelflag\n  // Ad redelivered\n  if (header.pm_ad_redelflag) {\n    params.push(encodeSMFParam(0, SMFParameterType.ASSURED_REDELIVERED_FLAG, undefined));\n  }\n  // header.pm_ad_flowredelflag\n\n  if (header.pm_ad_ttl !== undefined) {\n    params.push(encodeSMFParam(0, SMFParameterType.AD_TIMETOLIVE,\n                               int64ToStr(header.pm_ad_ttl)));\n  }\n\n  // sequence number?\n\n  if (header.pm_ad_publisherid) {\n    params.push(encodeSMFParam(0, SMFParameterType.PUBLISHER_ID,\n                               int32ToStr(header.pm_ad_publisherid)));\n  }\n\n  if (header.pm_ad_publisherMsgId) {\n    params.push(encodeSMFParam(0, SMFParameterType.PUBLISHER_MSGID,\n                               int64ToStr(header.pm_ad_publisherMsgId)));\n  }\n\n  // transactions: ackmessageid, transactionid, transactionflags\n\n  if (header.pm_content_summary) {\n    params.push(encodeSMFParam(2, SMFParameterType.MESSAGE_CONTENT_SUMMARY,\n                               encContentSummary(header.pm_content_summary)));\n  }\n  // done common SMF parameters!\n\n  // pre-collect and push extended parameters (once we have any)\n\n  let extendedStreamContents = '';\n  let extendedUH = 0;\n\n  if (header.pm_oauth2_access_token) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType.OAUTH2_ACCESS_TOKEN,\n                                                     header.pm_oauth2_access_token);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (header.pm_oidc_id_token) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType.OIDC_ID_TOKEN,\n                                                     header.pm_oidc_id_token);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (header.pm_oauth2_issuer_identifier) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType\n                                                     .OAUTH2_ISSUER_IDENTIFIER,\n                                                     header.pm_oauth2_issuer_identifier);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (extendedStreamContents.length > 0) {\n    params.push(encodeSMFParam(extendedUH,\n                               SMFParameterType.EXTENDED_TYPE_STREAM,\n                               extendedStreamContents));\n  }\n\n  // compute header size and full message size\n  const encodedParams = params.join('');\n  const hdrlen = 12 + encodedParams.length;\n  const msglen = hdrlen + header.payloadLength;\n\n  // ? Already encoded. Why bother?\n  header.setMessageSizes(hdrlen, header.payloadLength);\n\n  return (\n    int32ToStr(w1) +\n    int32ToStr(hdrlen) +\n    int32ToStr(msglen) +\n    encodedParams\n  );\n}\n\nfunction encodeCompoundMessage(msg) {\n  let payload = '';\n  if (msg instanceof MessageLib.Message) {\n    if (!msg.smfHeader) {\n      msg.smfHeader = new SMFHeader(SMFProtocol.TRMSG, 255);\n    }\n    adaptMessageToSmf(msg, msg._smfHeader);\n    payload = msg._smfHeader.payload;\n  } else if (msg instanceof ClientCtrlMessage) {\n    payload = encCC(msg);\n  } else if (msg instanceof SMPMessage) {\n    payload = encSmp(msg);\n  } else if (msg instanceof KeepAliveMessage) {\n    LOG_TRACE('Skipping retrieve payload as there is none in a KeepAliveMessage');\n  } else if (msg instanceof AdProtocolMessage) {\n    payload = encAdp(msg);\n  }\n  const header = msg.smfHeader;\n  header.setPayloadSize(payload.length);\n  const encodedHeader = encodeSMF(header);\n  return encodedHeader + payload;\n}\n\nconst Encode = {\n  encodeCompoundMessage,\n  encodeSMF,\n  adaptMessageToSmf_payloadMemoize,\n};\n\nmodule.exports.Encode = Encode;\n","const MessageLib = require('solclient-message');\nconst { BidiMap, Lazy } = require('solclient-eskit');\nconst { Bits, Convert } = require('solclient-convert');\nconst { ContentSummaryElement } = require('./content-summary-element');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SMFUH } = require('../message-objects');\n\nconst { lazyValue } = Lazy;\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n} = Convert;\n\nconst delModeEnumBidiMap = lazyValue(\n  () => {\n    // Single bidirectional map for lookups. Note that the forward\n    // keys are converted to strings.\n    const source = [\n      [0x00, MessageLib.MessageDeliveryModeType.NON_PERSISTENT],\n      [0x01, MessageLib.MessageDeliveryModeType.PERSISTENT],\n      [0x02, MessageLib.MessageDeliveryModeType.DIRECT],\n    ].map(el => [el[0], el[1]]);\n    return new BidiMap(...source);\n  });\nconst lutDelModeToEnum = lazyValue(() => delModeEnumBidiMap.value.forward);\nconst lutEnumToDelMode = lazyValue(() => delModeEnumBidiMap.value.reverse);\n\n/**\n * SMF TLV Param LUT\n * utTypeMap[uh][paramtype] is the binary prefix for a regular (not LW) TLV\n * parameter with uh and paramtype values as accessed in the array.\n *\n * @private\n */\nconst uhTypeMap = (() => {\n  const result = [];\n  const paramTypeBits = 5;\n  const paramTypeCount = Math.pow(2, paramTypeBits);\n  SMFUH.values.forEach((uh) => {\n    result[uh] = [];\n    for (let i = 0; i < paramTypeCount; ++i) {\n      let byte1 = 0;\n      byte1 = Bits.set(byte1, uh, 6, 2);\n      byte1 = Bits.set(byte1, i, 0, paramTypeBits);\n      result[uh][i] = int8ToStr(byte1);\n    }\n  });\n  return result;\n})();\n\n/**\n * SMF TLV length map LUT\n *\n * lenMap[x] === String.fromCharCode(x)\n *\n * @private\n */\nconst lenMap = (new Array(256).fill(null).map((_, idx) => int8ToStr(idx)));\n\n/**\n * SMF Lightweight Param LUT\n *\n * lightMap[uh][paramtype][len] is the prefix for an SMF LWP\n * with uh, paramtype and len values as accessed in the array.\n *\n * @private\n */\nconst lightMap = (() => {\n  const result = [];\n  const paramTypeBits = 3;\n  const paramTypeCount = Math.pow(2, paramTypeBits);\n  const lenBits = 2;\n  const lenCount = Math.pow(2, lenBits);\n  SMFUH.values.forEach((uh) => {\n    result[uh] = [];\n    for (let i = 0; i < paramTypeCount; ++i) {\n      result[uh][i] = [];\n      for (let j = 0; j < lenCount; ++j) {\n        let byte1 = 0;\n        byte1 = Bits.set(byte1, uh, 6, 2);\n        byte1 = Bits.set(byte1, 1, 5, 1);\n        byte1 = Bits.set(byte1, i, 2, 3);\n        byte1 = Bits.set(byte1, j, 0, 2);\n        result[uh][i][j] = int8ToStr(byte1);\n      }\n    }\n  });\n  return result;\n})();\n\nconst ContentSummaryDecodeMap = [\n  ContentSummaryType.XML_META,\n  ContentSummaryType.XML_PAYLOAD,\n  ContentSummaryType.BINARY_ATTACHMENT,\n  ContentSummaryType.CID_LIST,\n  ContentSummaryType.BINARY_METADATA,\n];\n\nconst ParamParse = {};\n\nParamParse.parseTopicQueueOffsets = function parseTopicQueueOffsets(dataBuf, offset) {\n  const result = [];\n  result[0] = dataBuf.readUInt8(offset);\n  result[1] = dataBuf.readUInt8(offset + 1);\n  return result;\n};\n\nParamParse.parseResponseParam = function parseResponseParam(dataBuf, offset, paramLen) {\n  const result = [];\n  result[0] = dataBuf.readInt32BE(offset);\n  if (paramLen > 4) {\n    result[1] = dataBuf.toString('latin1', offset + 4, offset + paramLen);\n  } else {\n    result[1] = '';\n  }\n  return result;\n};\n\nParamParse.parseDeliveryMode = function parseDeliveryMode(dataBuf, offset) {\n  const delmode = dataBuf.readUInt8(offset);\n  const lookup = lutDelModeToEnum.value.get(delmode);\n  return lookup !== undefined ? lookup : MessageLib.MessageDeliveryModeType.DIRECT;\n};\n\nParamParse.encDeliveryMode = function encDeliveryMode(delmode) {\n  const lut = lutEnumToDelMode.value;\n  const lookup = lut.get(delmode);\n  return int8ToStr(lookup !== undefined ? lookup : MessageLib.MessageDeliveryModeType.DIRECT);\n};\n\nParamParse.parseContentSummary = function parseContentSummary(dataBuf, offset, length) {\n  const elements = [];\n  let cumulativeSize = 0;\n  let pos = offset;\n\n  while (pos < offset + length) {\n    const byte1 = dataBuf.readUInt8(pos);\n    const elementType = Bits.get(byte1, 4, 4);\n    const elementDeclaredLength = Bits.get(byte1, 0, 4);\n    let elementSize = 0;\n    switch (elementDeclaredLength) {\n      case 2:\n        elementSize = dataBuf.readUInt8(pos + 1);\n        break;\n      case 3:\n        elementSize = dataBuf.readUInt16BE(pos + 1);\n        break;\n      case 4:\n        elementSize = dataBuf.readUIntBE(pos + 1, 3);\n        break;\n      case 5:\n        elementSize = dataBuf.readInt32BE(pos + 1);\n        break;\n      default:\n        // Allow 1 and continue;\n        break;\n    }\n\n    if (elementDeclaredLength === 0) {\n      LOG_ERROR('Invalid content summary parameter - pos not advancing');\n      return null;\n    }\n    pos += elementDeclaredLength;\n\n    const cst = ContentSummaryDecodeMap[elementType];\n    if (cst === undefined) {\n      LOG_ERROR(`Unhandled element type ${elementType}`);\n    }\n    const currentElement = new ContentSummaryElement(cst, cumulativeSize, elementSize);\n    elements.push(currentElement);\n    cumulativeSize += elementSize;\n  } // end while loop\n  return elements;\n};\n\nParamParse.encContentSummary = function encContentSummary(contentSummaryArr) {\n  const messageElementDescriptions = [];\n  for (let i = 0, n = contentSummaryArr.length; i < n; ++i) {\n    // a ContentSummaryElement\n    const currentContentSummary = contentSummaryArr[i];\n    let currentSizeStr = '';\n    let firstByte = Bits.set(0, currentContentSummary.type, 4, 4);\n    if (currentContentSummary.length <= 255) {\n      // element length: 2\n      firstByte = Bits.set(firstByte, 2, 0, 4);\n      currentSizeStr = int8ToStr(currentContentSummary.length);\n    } else if (currentContentSummary.length <= 65535) {\n      firstByte = Bits.set(firstByte, 3, 0, 4);\n      currentSizeStr = int16ToStr(currentContentSummary.length);\n    } else if (currentContentSummary.length <= 16777215) {\n      firstByte = Bits.set(firstByte, 4, 0, 4);\n      currentSizeStr = int24ToStr(currentContentSummary.length);\n    } else {\n      firstByte = Bits.set(firstByte, 5, 0, 4);\n      currentSizeStr = int32ToStr(currentContentSummary.length);\n    }\n    messageElementDescriptions.push(int8ToStr(firstByte));\n    messageElementDescriptions.push(currentSizeStr);\n  }\n  return messageElementDescriptions.join('');\n};\n\nParamParse.encodeSMFParam = function encodeSMFParam(uh, paramtype, value) {\n  if (value === undefined) {\n    return uhTypeMap[uh][paramtype] + lenMap[2];\n  }\n  const len = value.length;\n  if (len <= 253) {\n    return uhTypeMap[uh][paramtype] + lenMap[len + 2] + value;\n  }\n  return uhTypeMap[uh][paramtype] + lenMap[0] + int32ToStr(len + 6) + value;\n};\n\n\nParamParse.encodeSMFExtendedParam = function encodeSMFExtendedParam(uh, paramtype, value) {\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, (uh ? 1 : 0), 7, 1);\n  const length = ((value === undefined || value === null) ? 0 : value.length);\n  // Bits 1-3 of an extended param (not named in the spec, lengthMode here)\n  // can indicate value lengths 0-8 bytes, or 1-2 byte variable length.\n  const lengthModeMap = { 0: 0, 1: 1, 2: 2, 4: 3, 8: 4 };\n  let lengthMode = 0;\n  let lengthString = '';\n  // EsLint made me do it.\n  if (Object.prototype.hasOwnProperty.call(lengthModeMap, length)) {\n    lengthMode = lengthModeMap[length];\n  } else if (length < 253) {\n    lengthMode = 5;\n    lengthString = int8ToStr(length + 3);\n  } else if (length < 256 * 256 - 4) {\n    lengthMode = 6;\n    lengthString = int16ToStr(length + 4);\n  } else {\n    LOG_ERROR(`Extended parameter type ${paramtype} is too long (${length} bytes) `);\n    throw new OperationError(`Extended parameter (${paramtype}) over the 2^16 byte limit`,\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n\n  byte1 = Bits.set(byte1, lengthMode, 4, 3);\n  byte1 = Bits.set(byte1, (paramtype >> 8), 0, 4);\n  const byte2 = paramtype & 0xFF;\n  return int8ToStr(byte1) + int8ToStr(byte2) + lengthString + value;\n};\n\nParamParse.encLightSMFParam = function encLightSMFParam(uh, paramtype, value) {\n  return lightMap[uh][paramtype][value.length] + value;\n};\n\nmodule.exports.ParamParse = ParamParse;\n","const Long = require('long');\nconst {\n  LOG_DEBUG,\n  LOG_ERROR,\n  LOG_INFO,\n  LOG_TRACE,\n} = require('solclient-log');\nconst { Base64, Bits } = require('solclient-convert');\nconst { ParamParse } = require('./param-parse');\nconst { SMFHeader } = require('../message-objects');\nconst { SMFParameterType } = require('../smf-parameter-types');\n\nconst {\n  decode: base64Decode,\n} = Base64;\nconst {\n  get: bits,\n} = Bits;\n\nfunction isSMFHeaderAvailable(dataBuf, offset) {\n  const remaining = dataBuf.length - offset;\n  if (remaining < 12) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction isSMFHeaderValid(dataBuf, offset) {\n  if (!isSMFHeaderAvailable(dataBuf, offset)) {\n    return false;\n  }\n  const version = dataBuf.readUInt8(offset) & 0x7;\n  if (version !== 3) {\n    LOG_ERROR(`Invalid smf version in smf header, version=${version}`);\n    return false;\n  }\n  return true;\n}\n\nfunction isSMFAvailable(dataBuf, offset) {\n  if (!isSMFHeaderValid(dataBuf, offset)) {\n    return false;\n  }\n  const remaining = dataBuf.length - offset;\n  const totalLen = dataBuf.readUInt32BE(offset + 8);\n  return (totalLen <= remaining);\n}\n\n/**\n * Parse the Extended Parameters from an Extended Type Stream.\n * See section \"4.2.4 Extended Parameter Types\" in the SMF spec.\n * @param {SMFHeader} smfHeader The SMF header to add the extended parameters to.\n * @param {Buffer} dataBuf The binary data to parse\n * @param {Number} offset The offset in the data to begin parsing (ETS payload)\n * @param {Number} streamLen ETS length\n * @returns {Boolean} false if framing is lost, true otherwise.\n * @private\n */\nfunction parseSMFExtendedStream(smfHeader, dataBuf, offset, streamLen) {\n  /* eslint-disable no-unused-vars */\n  let pos = offset;\n  while (pos < offset + streamLen) {\n    if (pos + 2 > offset + streamLen) {\n      LOG_ERROR('Extended parameter stream had padding inside.');\n      break;\n    }\n\n    // The first 2 bytes of Extended Parameters is fixed (MSB order):\n    // 1 bit UH\n    // 3 bits length mode selector (0-, 1-, 2-, 4-, 8-byte, or variable)\n    // 12 bits Type\n    const byte1 = dataBuf.readUInt8(pos);\n    const byte2 = dataBuf.readUInt8(pos + 1);\n    const pUH = bits(byte1, 7, 1);\n    const lengthMode = bits(byte1, 4, 3);\n    const type = (bits(byte1, 0, 4) << 8) + byte2; //FIGURE OUT WHAT bits does\n    pos += 2;\n    const lengthModeMap = { 0: 0, 1: 1, 2: 2, 3: 4, 4: 8 };\n    let valueLen = 0;\n    // EsLint made me do it\n    if (Object.prototype.hasOwnProperty.call(lengthModeMap, lengthMode)) {\n      valueLen = lengthModeMap[lengthMode];\n    } else if (lengthMode === 5) {\n      // 1-byte variable length value\n      valueLen = dataBuf.readUInt8(pos) - 3;\n      pos++;\n    } else if (lengthMode === 6) {\n      // 2-byte variable length value\n      valueLen = dataBuf.readUInt16BE(pos) - 4;\n      pos += 2;\n    } else {\n      LOG_ERROR(`Invalid length mode ${lengthMode} in Extended Parameter type ${type}`);\n      // We must be reading garbage, disconnect:\n      return false;\n    }\n\n    switch (type) {\n      case SMFParameterType.AD_REDELIVERY_COUNT:\n        smfHeader.pm_ad_redeliveryCount = dataBuf.readUInt32BE(pos);\n        break;\n      case SMFParameterType.AD_SPOOLER_UNIQUE_ID:\n        smfHeader.pm_ad_spooler_unique_id = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                          dataBuf.readUInt32BE(pos),\n                                                          true);\n        break;\n      case SMFParameterType.AD_ACK_MESSAGE_ID:\n        smfHeader.pm_ad_local_spooler_message_id = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                                 dataBuf.readUInt32BE(pos),\n                                                                 true);\n        break;\n      case SMFParameterType.AD_REPL_MATE_ACK_MSGID:\n        smfHeader.pm_ad_replication_mate_ack_message_id =\n           Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                         dataBuf.readUInt32BE(pos),\n                         true);\n        break;\n      default:\n        if (pUH === 0) {\n          LOG_TRACE('Dropping unrecognised extended parameter ' +\n                    `type ${type} value length ${valueLen} UH ${pUH}`);\n        } else {\n          smfHeader.discardMessage = true;\n          LOG_TRACE('Dropping whole message due to unrecognised extended parameter ' +\n                    `type ${type} value length ${valueLen} UH ${pUH}`);\n        }\n        break;\n    }\n    pos += valueLen;\n  }\n  if (pos > offset + streamLen) {\n    LOG_ERROR(`Last extended parameter ran beyond extended stream length by ${pos - (offset + streamLen)}.`);\n  }\n  return true;\n  /* eslint-enable no-unused-vars */\n}\n\n/**\n * Parse SMF in the given data buffer at the supplied offset.\n * @param {Buffer} dataBuf The binary data to parse\n * @param {Number} offset The offset in the data to begin parsing\n * @param {Boolean} readHeaderOnly If true, stop parsing at end of header\n * @returns {SMFHeader|null} The SMF header, if possible\n * @private\n */\nfunction parseSMFAt(dataBuf, offset, readHeaderOnly = false) {\n  if (!isSMFHeaderValid(dataBuf, offset)) {\n    LOG_DEBUG('Valid SMF header not available');\n    return null;\n  }\n  let pos = offset;\n\n  // Reading fixed header block (12 bytes)\n  const word1 = dataBuf.readUInt32BE(pos);\n  const headerLen = dataBuf.readUInt32BE(pos + 4);\n  const word3 = dataBuf.readUInt32BE(pos + 8);\n\n  const smfHeader = new SMFHeader();\n  smfHeader.smf_di = bits(word1, 31, 1);\n  smfHeader.smf_elidingEligible = bits(word1, 30, 1);\n  smfHeader.smf_dto = bits(word1, 29, 1);\n  smfHeader.smf_adf = bits(word1, 28, 1);\n  smfHeader.smf_deadMessageQueueEligible = bits(word1, 27, 1);\n  smfHeader.smf_version = bits(word1, 24, 3);\n  smfHeader.smf_uh = bits(word1, 22, 2);\n  smfHeader.smf_protocol = bits(word1, 16, 6);\n  smfHeader.smf_priority = bits(word1, 12, 4);\n  smfHeader.smf_ttl = bits(word1, 0, 8);\n\n  const payloadLen = word3 - headerLen;\n  if (payloadLen < 0) {\n    LOG_ERROR('SMF parse error: lost framing');\n    return null; // SMF parse error: lost framing\n  }\n  smfHeader.setMessageSizes(headerLen, payloadLen);\n  if (readHeaderOnly) {\n    return smfHeader;\n  }\n  pos += 12;\n\n  // Reading variable-length params\n  const end = offset + headerLen;\n  while (pos < end) {\n    const paramByte1 = dataBuf.readUInt8(pos);\n    ++pos;\n\n    const prmUh = bits(paramByte1, 6, 2);\n    const paramIsLightweight = (bits(paramByte1, 5, 1) !== 0);\n    if (paramIsLightweight) {\n      // LIGHTWEIGHT param\n      const lwpType = bits(paramByte1, 2, 3);\n      const lwpLen = bits(paramByte1, 0, 2) + 1;\n      const lwpValueLen = lwpLen - 1;\n      if (lwpLen <= 0) {\n        LOG_ERROR('Invalid lightweight parameter length');\n        return null; // Invalid parameter\n      }\n\n      switch (lwpType) {\n        case SMFParameterType.LIGHT_CORRELATION:\n          smfHeader.pm_corrtag = dataBuf.readUIntBE(pos, 3);\n          break;\n        case SMFParameterType.LIGHT_TOPIC_NAME_OFFSET:\n          {\n            const parsedQueueOffsets = ParamParse.parseTopicQueueOffsets(dataBuf, pos);\n            smfHeader.pm_queue_offset = parsedQueueOffsets[0];\n            smfHeader.pm_queue_len = parsedQueueOffsets[1];\n            break;\n          }\n        case SMFParameterType.LIGHT_QUEUE_NAME_OFFSET:\n          {\n            const parsedTopicOffsets = ParamParse.parseTopicQueueOffsets(dataBuf, pos);\n            smfHeader.pm_topic_offset = parsedTopicOffsets[0];\n            smfHeader.pm_topic_len = parsedTopicOffsets[1];\n            break;\n          }\n        case SMFParameterType.LIGHT_ACK_IMMEDIATELY:\n          smfHeader.pm_ad_ackimm = !!dataBuf.readUInt8(pos);\n          break;\n        default:\n          if (prmUh === 0) {\n            // Ignore, and silently discard the parameter.\n            LOG_TRACE(`Unhandled LIGHTWEIGHT parameter type: ${lwpType} UH is ${prmUh} discarding parameter.`);\n          } else {\n            // Ignore, and silently discard the entire message.\n            LOG_TRACE(`Unhandled LIGHTWEIGHT parameter type: ${lwpType} UH is ${prmUh} discarding message.`);\n            smfHeader.discardMessage = true;\n          }\n          break;\n      }\n      pos += lwpValueLen;\n    } else {\n      // REGULAR encoded param (including breakout for Extended Type Stream)\n      const pStart = pos;\n      const pType = bits(paramByte1, 0, 5);\n      if (pType === 0) {\n        break; // PADDING (break while: header finished)\n      }\n\n      let pLen = dataBuf.readUInt8(pos);\n      pos++;\n      let pValueLen;\n      if (pLen === 0) {\n        // extended-length parameter (32-bit)\n        // Works for Extended Parameters too.\n        pLen = dataBuf.readUInt32BE(pos);\n        pos += 4;\n        pValueLen = pLen - 6;\n      } else {\n        pValueLen = pLen - 2;\n      }\n\n      if (pLen <= 0) {\n        LOG_ERROR(`Invalid regular parameter length ${pLen}/${pValueLen\n                  } with suspect type ${SMFParameterType.describe(pType)} at parameter at position ${pStart}`);\n        return null; // Invalid parameter\n      }\n\n      switch (pType) {\n        case SMFParameterType.PUBLISHER_ID:\n          smfHeader.pm_ad_publisher_id = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                       dataBuf.readUInt32BE(pos),\n                                                       true);\n          break;\n        case SMFParameterType.PUBLISHER_MSGID:\n          smfHeader.pm_ad_publishermsgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                         dataBuf.readUInt32BE(pos),\n                                                         true);\n          break;\n        case SMFParameterType.MESSAGEPRIORITY:\n          smfHeader.pm_msg_priority = dataBuf.readUInt8(pos);\n          break;\n        case SMFParameterType.USERDATA:\n          smfHeader.pm_userdata = dataBuf.toString('latin1', pos, pos + pValueLen);\n          break;\n        case SMFParameterType.USERNAME:\n          // only useful on API -> router\n          smfHeader.pm_username = base64Decode(dataBuf.toString('latin1', pos, pos + pValueLen));\n          break;\n        case SMFParameterType.PASSWORD:\n          // only useful on API -> router\n          smfHeader.pm_password = base64Decode(dataBuf.toString('latin1', pos, pos + pValueLen));\n          break;\n        case SMFParameterType.RESPONSE:\n          {\n            const parsedResponse = ParamParse.parseResponseParam(dataBuf, pos, pValueLen); //CHECK\n            smfHeader.pm_respcode = parsedResponse[0];\n            smfHeader.pm_respstr = parsedResponse[1];\n            break;\n          }\n        case SMFParameterType.SUB_ID_LIST:\n        case SMFParameterType.GENERIC_ATTACHMENT:\n        case SMFParameterType.BINARY_ATTACHMENT:\n          LOG_INFO('Skipping deprecated parameter type');\n          // deprecated\n          break;\n        case SMFParameterType.DELIVERY_MODE:\n          // DeliveryMode is DIRECT unless the AD flag is set. The\n          // deliveryMode parameter (and all other guaranteed messaging\n          // parameters may be present in demoted messages reflecting how\n          // the message was published.\n          // IF ever solClientJS must support the horror that is cut-through\n          // persistence, then we must defer setting deliveryMode back to\n          // DIRECT until the session decides whether it is a true direct\n          // message or a cut-through direct message.  But until that is\n          // forced upon us, the cleanest place to set deliveryMode is always\n          // here in the parser.\n          if (smfHeader.smf_adf) {\n            smfHeader.pm_deliverymode = ParamParse.parseDeliveryMode(dataBuf, pos);\n          }\n          break;\n        case SMFParameterType.ASSURED_MESSAGE_ID:\n          smfHeader.pm_ad_msgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                dataBuf.readUInt32BE(pos),\n                                                true);\n          break;\n        case SMFParameterType.ASSURED_PREVMESSAGE_ID:\n          smfHeader.pm_ad_prevmsgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                    dataBuf.readUInt32BE(pos),\n                                                    true);\n          break;\n        case SMFParameterType.ASSURED_REDELIVERED_FLAG:\n          smfHeader.pm_ad_redelflag = true;\n          break;\n        case SMFParameterType.AD_TIMETOLIVE:\n          smfHeader.pm_ad_ttl = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                              dataBuf.readUInt32BE(pos),\n                                              true);\n          break;\n        case SMFParameterType.AD_TOPICSEQUENCE_NUMBER:\n          smfHeader.pm_ad_topicSequenceNumber = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                              dataBuf.readUInt32BE(pos),\n                                                              true);\n          break;\n        case SMFParameterType.MESSAGE_CONTENT_SUMMARY:\n          {\n            const contentSummary = ParamParse.parseContentSummary(dataBuf, pos, pValueLen);\n            if (!contentSummary) {\n              LOG_ERROR(`Invalid message content summary at ${pos}, len ${pValueLen}`);\n              return false; // invalid message content summary parameter\n            }\n            smfHeader.pm_content_summary = contentSummary;\n            break;\n          }\n        case SMFParameterType.ASSURED_FLOWID:\n          smfHeader.pm_ad_flowid = dataBuf.readUInt32BE(pos);\n          break;\n        case SMFParameterType.TR_TOPICNAME:\n          // copy bytes. Don't strip null terminator\n          smfHeader.pm_tr_topicname_bytes = dataBuf.toString('latin1', pos, pos + pValueLen);\n          break;\n        case SMFParameterType.AD_FLOWREDELIVERED_FLAG:\n          smfHeader.pm_ad_flowredelflag = true;\n          break;\n        case SMFParameterType.EXTENDED_TYPE_STREAM: {\n          const extSuccess = parseSMFExtendedStream(smfHeader, dataBuf, pos, pValueLen);\n          if (!extSuccess) { return null; }\n          break;\n        }\n        default:\n          if (prmUh === 0) {\n            // Ignore, and silently discard the parameter.\n            LOG_TRACE(`Unhandled SMF parameter type: ${pType} UH is ${prmUh} discarding parameter.`);\n          } else {\n            // Ignore, and silently discard the entire message.\n            LOG_TRACE(`Unhandled SMF parameter type: ${pType} UH is ${prmUh} discarding message.`);\n            smfHeader.discardMessage = true;\n          }\n          break;\n      } // end param type switch block\n\n      pos += pValueLen;\n    } // end (regular param)\n  } // end while\n\n  return smfHeader;\n}\n\nconst ParseSMF = {\n  isSMFHeaderAvailable,\n  isSMFHeaderValid,\n  isSMFAvailable,\n  parseSMFAt,\n};\n\nmodule.exports.ParseSMF = ParseSMF;\n","const MessageLib = require('solclient-message');\nconst { BidiMap } = require('solclient-eskit');\n\nclass PriorityUserCosMap extends BidiMap {\n  constructor() {\n    super([MessageLib.MessageUserCosType.COS1, 0],\n          [MessageLib.MessageUserCosType.COS2, 1],\n          [MessageLib.MessageUserCosType.COS3, 2]);\n  }\n}\n\nmodule.exports.PriorityUserCosMap = PriorityUserCosMap;\n","const { Bits, Convert } = require('solclient-convert');\nconst { LOG_DEBUG, LOG_TRACE } = require('solclient-log');\nconst { SMFSMPMessageType } = require('../smf-smp-message-types');\nconst { SMPMessage } = require('../message-objects');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr,\n  int32ToStr,\n} = Convert;\n\nconst SMP = {};\nSMP.parseSMPAt = function parseSMPAt(dataBuf, offset) {\n  if ((offset + 6) > dataBuf.length) {\n    // not enough data\n    LOG_DEBUG('Not enough data to read an SMP message.');\n    return false;\n  }\n  let pos = offset;\n  const onebyte = dataBuf.readUInt8(pos);\n  pos++;\n\n  // var msgUh = bits(onebyte, 7, 1);\n  const msgType = bits(onebyte, 0, 7);\n  const smpMsg = new SMPMessage();\n\n  if (!(msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n        msgType === SMFSMPMessageType.REMSUBSCRIPTION ||\n        msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n        msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION\n  )) {\n    LOG_DEBUG(`Found unsupported SMP messageType ${msgType}`);\n    return false; // unsupported type\n  }\n\n  LOG_TRACE('SMP.parseSMPAt called, ', dataBuf.toString('latin1'));\n\n  const msgLength = dataBuf.readUInt32BE(pos);\n  pos += 4;\n  if ((offset + msgLength) > dataBuf.length) {\n    // not enough data\n    LOG_DEBUG(`Invalid declared length of ${msgLength}, unable to read SMP message.`);\n    return false;\n  }\n  const msgFlags = dataBuf.readUInt8(pos);\n  pos++;\n\n  smpMsg.msgType = msgType;\n  smpMsg.smpFlags = msgFlags;\n  if (msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n    msgType === SMFSMPMessageType.REMSUBSCRIPTION) {\n    // 6 is the base len (msgLength - 6)\n    smpMsg.encodedUtf8Subscription = dataBuf.toString('latin1', pos, pos + msgLength - 6);\n  } else {\n    const queueLength = dataBuf.readUInt8(pos);\n    pos++;\n    smpMsg.encodedUtf8QueueName = dataBuf.toString('latin1', pos, pos + queueLength);\n    pos += queueLength;\n    const subsLength = dataBuf.readUInt8(pos);\n    pos++;\n    smpMsg.encodedUtf8Subscription = dataBuf.toString('latin1', pos, pos + subsLength);\n    pos += subsLength;\n  }\n  return smpMsg;\n};\n\nSMP.encSmp = function encSmp(smpMsg) {\n  if (!(smpMsg.msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.REMSUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION\n  )) {\n    LOG_DEBUG(`Unsupported SMP message for encoding: ${smpMsg}`);\n    return false;\n  }\n\n  LOG_TRACE('encSmp called.', smpMsg);\n  const data = [];\n  let onebyte = 0;\n  onebyte = setBits(onebyte, 1, 7, 1);\n  onebyte = setBits(onebyte, smpMsg.msgType, 0, 7);\n  data.push(int8ToStr(onebyte));\n  let msgLength = 6 + smpMsg.encodedUtf8Subscription.length;\n  if (smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n    smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION) {\n    msgLength += 2 + smpMsg.encodedUtf8QueueName.length; //both strings have a 1-byte length.\n  }\n  data.push(int32ToStr(msgLength)); // length\n  data.push(int8ToStr(smpMsg.smpFlags));\n  if (smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n    smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION) {\n    //TODO: validate the lengths are < 251 including null termination!\n    // Somewhere else though.\n    data.push(int8ToStr(smpMsg.encodedUtf8QueueName.length));\n    data.push(smpMsg.encodedUtf8QueueName);\n    data.push(int8ToStr(smpMsg.encodedUtf8Subscription.length));\n    data.push(smpMsg.encodedUtf8Subscription);\n  } else {\n    data.push(smpMsg.encodedUtf8Subscription);\n  }\n  return data.join('');\n};\n\nmodule.exports.SMP = SMP;\n","const { Bits, Convert } = require('solclient-convert');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SMFTransportSessionMessageType } = require('../smf-transport-session-message-types');\nconst { TransportSMFMessage } = require('../message-objects');\n\nconst {\n  get: bits,\n} = Bits;\nconst {\n  int16ToStr,\n  int32ToStr,\n} = Convert;\nconst { lazyValue } = Lazy;\n\n// ========== TSSMF ==========\nfunction remains(dataBuf, offset) {\n  return dataBuf.length - offset;\n}\n\nfunction parseTsSmfHdrAt(dataBuf, offset, smfheader) {\n  let pos = offset;\n  if (remains(dataBuf, pos) < 10) {\n    LOG_ERROR('TsSmf parse failed: not enough data, expected at least 10B');\n    return false;\n  }\n\n  const transportSMFMessage = new TransportSMFMessage();\n  transportSMFMessage.smfHeader = smfheader;\n  const twobyte = dataBuf.readUInt16BE(pos);\n  pos += 2;\n  transportSMFMessage.uh = bits(twobyte, 15, 1);\n  transportSMFMessage.messageType = bits(twobyte, 8, 7);\n  const tsHdrLen = bits(twobyte, 0, 8);\n  transportSMFMessage.tsHeaderLength = tsHdrLen;\n  transportSMFMessage.sessionId = dataBuf.toString('latin1', pos, pos + 8);\n  pos += 8;\n\n  if (transportSMFMessage.messageType ===\n      SMFTransportSessionMessageType.CREATE_RESP) {\n    // parse extra chunk: routerTag\n    const rtrTagLen = dataBuf.readUInt8(pos);\n    pos++;\n    if (remains(dataBuf, pos) < rtrTagLen) {\n      LOG_ERROR(`TsSmf parse failed: not enough data for RouterTag, expected ${rtrTagLen}B`);\n      return false;\n    }\n    transportSMFMessage.routerTag = dataBuf.toString('latin1', pos, pos + rtrTagLen);\n    pos += rtrTagLen;\n  }\n\n  // FFWD any remaining TsSmf padding?\n  pos = offset + tsHdrLen;\n\n  // Length of encapsulated message payload:\n  // the SMF msg payload length - bytes consumed in TsSmf\n\n  if (smfheader.payloadLength === 0xffffffff) {\n    // special \"streaming\" unknown-length header\n    transportSMFMessage.payloadLength = smfheader.payloadLength;\n  } else {\n    transportSMFMessage.payloadLength = smfheader.payloadLength - tsHdrLen;\n  }\n  return transportSMFMessage; // Header with no payload field\n}\n\n// Generates an SMF header up to, but not including the the total length\n// This is fixed for all client generated transport session messages\nconst tsHeaderPreLength = lazyValue(() => (\n  int32ToStr(0x03140001) +  // SMF version, TransportSession, TTL\n  int32ToStr(12)            // Header length\n));\n\nconst tsDestroyHeaderPreSid = lazyValue(() => (\n  tsHeaderPreLength.value + // Header up to the message length field\n  int32ToStr(22) +          // Total length\n  int16ToStr(0x820a)        // msgType(destroy), length\n));\n\nconst tsCreateHeader = lazyValue(() => (\n  tsHeaderPreLength.value + // Header up to the message length field\n  int32ToStr(22) +          // Total length\n  int16ToStr(0x800a) +      // msgType(create), length\n  int32ToStr(0) +           // Session ID (first half)\n  int32ToStr(0)             // Session ID (second half)\n));\n\nconst tsDataTokenPreSid = lazyValue(() => (\n  int32ToStr(0x03940001) +\n  int32ToStr(12) +\n  int32ToStr(22) +\n  int16ToStr(0x850a)\n));\n\nconst tsDataStreamTokenPreSid = lazyValue(() => (\n  int32ToStr(0x03940001) +\n  int32ToStr(12) +\n  int32ToStr(24) +\n  int16ToStr(0x860c)\n));\n\n// Generate a full Transport Session Create header\nfunction genTsCreateHeader() {\n  return tsCreateHeader.value;\n}\n\n// Generate a full Transport Session Destroy header\nfunction genTsDestroyHeader(sid) {\n  return (\n    tsDestroyHeaderPreSid.value +\n    sid                       // Session ID\n  );\n}\n\n// Generate a data token message\nfunction genTsDataTokenMsg(sid) {\n  return (\n    tsDataTokenPreSid.value +\n    sid\n  );\n}\n\n// Generate a STREAMING data token message\nfunction genTsDataStreamTokenMsg(sid, paddingBytes) {\n  return (\n    tsDataStreamTokenPreSid.value +\n    sid +\n    ((paddingBytes && paddingBytes > 0) ? int16ToStr(paddingBytes) : int16ToStr(0x0000))\n  );\n}\n\nfunction genTsDataMsgHeaderParts(sid) {\n  return [\n    (int32ToStr(0x03940001) + int32ToStr(12)),\n    (int16ToStr(0x840a) + sid),\n  ];\n}\n\nfunction parseTsSmfMsgAt(dataBuf, offset, smfheader) {\n  const transportSMFMessage = parseTsSmfHdrAt(dataBuf, offset, smfheader);\n  if (!transportSMFMessage) {\n    return null;\n  }\n\n    // need to FF to pos\n  const pos = offset + transportSMFMessage.tsHeaderLength;\n\n    // Length of encapsulated message payload:\n    // the SMF msg payload length - bytes consumed in TsSmf\n  if (remains(dataBuf, pos) < transportSMFMessage.payloadLength) {\n    LOG_ERROR(`Couldn't read full encapsulated TsSmf payload, expected ${transportSMFMessage.payloadLength}B`);\n    return null;\n  }\n\n  transportSMFMessage.payload =\n                            dataBuf.slice(pos, pos + transportSMFMessage.payloadLength);\n  return transportSMFMessage;\n}\n\nconst Transport = {\n  genTsCreateHeader,\n  genTsDestroyHeader,\n  genTsDataTokenMsg,\n  genTsDataStreamTokenMsg,\n  genTsDataMsgHeaderParts,\n  parseTsSmfHdrAt,\n  parseTsSmfMsgAt,\n};\n\nmodule.exports.Transport = Transport;\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { BaseMessage } = require('./base-message');\nconst { Convert, Long } = require('solclient-convert');\nconst { DestinationType } = require('solclient-destination');\nconst { LOG_TRACE } = require('solclient-log');\nconst { OperationError } = require('solclient-error');\nconst { QueueAccessType,\n        QueueDiscardBehavior } = require('solclient-queue');\nconst { QueuePermissions, QueueType } = require('solclient-queue');\nconst { ReplayStartType } = require('solclient-replaystart');\nconst { SMFAdProtocolMessageType } = require('../smf-adprotocol-message-types');\nconst { SMFAdProtocolParam } = require('../smf-adprotocol-params');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMFUH } = require('./smf-uh');\nconst { StringUtils } = require('solclient-util');\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\nconst {\n  strToInt8,\n  strToInt16,\n  strToUInt32,\n  strToUInt64,\n} = Convert;\n\nconst bUInt8 = BufferImpl.prototype.readUInt8;\nconst bUInt16BE = BufferImpl.prototype.readUInt16BE;\nconst bUInt32BE = BufferImpl.prototype.readUInt32BE;\nconst bUInt64BE = function bUInt64BE(pos) { // invoked with \"this\" as the buffer.\n  return Long.fromBits(this.readUInt32BE(pos + 4), this.readUInt32BE(pos), true);\n};\n\nconst {\n  nullTerminate,\n  stripNullTerminate,\n} = StringUtils;\n\n// QUEUENAME/TOPICNAME\nconst EndpointTypeToParam = {\n  [DestinationType.TOPIC]: SMFAdProtocolParam.DTENAME,\n  [DestinationType.QUEUE]: SMFAdProtocolParam.QUEUENAME,\n};\n\n//Same as above, but for CREATE.\nconst QueueDescriptorTypeToParam = {\n  [QueueType.TOPIC_ENDPOINT]: SMFAdProtocolParam.DTENAME,\n  [QueueType.QUEUE]:          SMFAdProtocolParam.QUEUENAME,\n};\n\nconst QUEUE_PERMISSIONS_TO_BITS = {\n  [QueuePermissions.NONE]:         0x0000,\n  [QueuePermissions.READ_ONLY]:    0x0001,\n  [QueuePermissions.CONSUME]:      0x0003,\n  [QueuePermissions.MODIFY_TOPIC]: 0x0007,\n  [QueuePermissions.DELETE]:       0x000f,\n};\n\nconst ACCESS_TYPE_INT_TO_ENUM = {\n  0x01: QueueAccessType.EXCLUSIVE,\n  0x02: QueueAccessType.NONEXCLUSIVE,\n};\n\nconst ACCESS_TYPE_ENUM_TO_BITS = {\n  [QueueAccessType.EXCLUSIVE]:    0x01,\n  [QueueAccessType.NONEXCLUSIVE]: 0x02,\n};\n\nconst DISCARD_ENUM_TO_VALUE = {\n  [QueueDiscardBehavior.NOTIFY_SENDER_OFF]: 0x01,\n  [QueueDiscardBehavior.NOTIFY_SENDER_ON]:  0x02,\n};\n\nfunction addQueueProperties(message, queueProperties, skipAccessType = false) {\n  if (!queueProperties) {\n    return;\n  }\n  const {\n    accessType,\n    discardBehavior,\n    maxMessageRedelivery,\n    maxMessageSize,\n    permissions,\n    quotaMB,\n    respectsTTL,\n  } = queueProperties;\n\n\n  // [AssuredCtrl AllOthersPermissions Parameter]\n  if (permissions && (QUEUE_PERMISSIONS_TO_BITS[permissions] !== undefined)) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_ALLOTHER_PERMISSION,\n      QUEUE_PERMISSIONS_TO_BITS[permissions]\n    ));\n  }\n\n  //AccessType\n  if (!skipAccessType &&\n    accessType !== undefined &&\n    ACCESS_TYPE_ENUM_TO_BITS[accessType] !== undefined\n  ) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.ACCESSTYPE,\n      ACCESS_TYPE_ENUM_TO_BITS[accessType]\n    ));\n  }\n\n  // [AssuredCtrl EndpointQuotaMB Parameter]\n  if (quotaMB !== null && quotaMB !== undefined) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_QUOTA,\n      quotaMB\n    ));\n  }\n\n  // [AssuredCtrl EndpointMaxMessageSize Parameter]\n  if (maxMessageSize !== undefined && maxMessageSize !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_MAX_MSGSIZE,\n      maxMessageSize\n    ));\n  }\n\n  let flags = 0x0000;\n  if (discardBehavior !== null && discardBehavior !== undefined) {\n    const discardBehaviorValue = DISCARD_ENUM_TO_VALUE[discardBehavior];\n    flags |= (discardBehaviorValue << 12);\n    // Omit cutThrough, << 14\n  }\n  if (flags /* is nonzero */) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_BEHAVIOUR,\n      flags\n    ));\n  }\n\n  if (maxMessageRedelivery !== undefined && maxMessageRedelivery !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.MAX_REDELIVERY,\n      maxMessageRedelivery\n    ));\n  }\n\n  if (respectsTTL !== undefined && respectsTTL !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_RESPECTS_TTL,\n      (respectsTTL ? 0x1 : 0x0)\n    ));\n  }\n}\n\n/**\n * @internal\n */\nclass AdProtocolMessage extends BaseMessage {\n  /**\n   * @constructor\n   * @param {SMFAdProtocolMessageType} [messageType=SMFAdProtocolMessageType.OPENPUBFLOW]\n   *  The type of message\n   * @param {Number} [version=3] The AD protocol version for the message\n   * @extends {BaseMessage}\n   * @memberof solace\n   * @internal\n   */\n  constructor(messageType = 0, version = 3) {\n    super(new SMFHeader(SMFProtocol.ADCTRL, 1));\n\n    // Field: msgtype\n    this.msgType = messageType;\n\n    // Field: version\n    this.version = version;\n  }\n\n  _readParameter(paramtype, decoder = null, bufMethod = null) {\n    const param = this.getParameter(paramtype);\n    if (param === undefined) return undefined;\n    if (bufMethod && param.getBuffer()) {\n      return bufMethod.call(param.getBuffer(), param.getBegin());\n    }\n    const value = param.getValue();\n    return decoder ? decoder(value) : value;\n  }\n\n  /**\n   * @returns {?QueueAccessType} The access type, if present\n   */\n  getAccessType() {\n    const param = this._readParameter(SMFAdProtocolParam.ACCESSTYPE, strToInt8, bUInt8);\n    return ACCESS_TYPE_INT_TO_ENUM[param];\n  }\n\n  /**\n   * @returns {?Boolean} The active flow indication, if present\n   */\n  getActiveFlow() {\n    return this._readParameter(SMFAdProtocolParam.ACTIVE_FLOW_INDICATION, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?QueueDiscardBehavior} The discard behavior for the endpoint, if present\n   */\n  getQueueDiscardBehavior() {\n    const param = this._readParameter(SMFAdProtocolParam.EP_BEHAVIOUR, strToInt16, bUInt16BE);\n    if (param === undefined) {\n      return undefined;\n    }\n    // Get NotifySender flag\n    const masked = (param & 0x3000) >> 12;\n    if (masked === DISCARD_ENUM_TO_VALUE[QueueDiscardBehavior.NOTIFY_SENDER_OFF]) {\n      return QueueDiscardBehavior.NOTIFY_SENDER_OFF;\n    } else if (masked === DISCARD_ENUM_TO_VALUE[QueueDiscardBehavior.NOTIFY_SENDER_ON]) {\n      return QueueDiscardBehavior.NOTIFY_SENDER_ON;\n    }\n    return undefined;\n  }\n  /**\n   * @returns {?Boolean} The Delivery Count setting of the endpoint, if present\n   */\n  getEndpointDeliveryCountSent() {\n    const param = this._readParameter(SMFAdProtocolParam.EP_BEHAVIOUR, strToInt16, bUInt16BE);\n    // Get NotifySender flag\n    const masked = (param & 0x0c00) >> 10;\n    switch (masked) {\n      case 0 :\n        return undefined;\n      case 1 :\n        return false;\n      case 2:\n        return true;\n      default:\n        //TODO: log: invalid flag value.\n        return undefined;\n    }\n  }\n\n  /**\n   * @returns {?Number} The endpoint ID, if present\n   */\n  getEndpointId() {\n    return this._readParameter(SMFAdProtocolParam.ENDPOINT_ID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Boolean} Whether endpoint respects TTL\n   */\n  getRespectsTTL() {\n    const value = this._readParameter(SMFAdProtocolParam.EP_RESPECTS_TTL, strToInt8, bUInt8);\n    if (value === undefined) {\n      LOG_TRACE('respectsTTL missing from response.');\n      return undefined;\n    }\n    LOG_TRACE(`respectsTTL present in response: ${value}`);\n    return !!value;\n  }\n\n  /**\n   * @returns {?String} The router-assigned flow name, if present\n   */\n  getFlowName() {\n    return this._readParameter(SMFAdProtocolParam.FLOWNAME, stripNullTerminate);\n  }\n\n  /**\n   * @returns {?Number} The router-assigned flow ID, if present\n   */\n  getFlowId() {\n    return this._readParameter(SMFAdProtocolParam.FLOWID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} The quota on the endpoint, if present\n   */\n  getQuota() {\n    return this._readParameter(SMFAdProtocolParam.EP_QUOTA, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} The maximum message size of the endpoint, if present\n   */\n  getMaxMsgSize() {\n    return this._readParameter(SMFAdProtocolParam.EP_MAX_MSGSIZE, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?String} The UTF-8 encoded, null terminated endpoint name\n   */\n  getTopicEndpointBytes() {\n    return this._readParameter(SMFAdProtocolParam.DTENAME);\n  }\n\n  /**\n   * @returns {?QueuePermissions} The granted permissions for the flow, if present\n   */\n  getGrantedPermissions() {\n    const permissions =\n      this._readParameter(SMFAdProtocolParam.GRANTED_PERMISSIONS, strToUInt32, bUInt32BE);\n    let result;\n    Object.keys(QUEUE_PERMISSIONS_TO_BITS).forEach((key) => {\n      if (QUEUE_PERMISSIONS_TO_BITS[key] === permissions) {\n        result = key;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * @returns {?QueuePermissions} The permissions for other users for the endpoint, if present\n   */\n  getAllOthersPermissions() {\n    const permissions =\n      this._readParameter(SMFAdProtocolParam.EP_ALLOTHER_PERMISSION, strToUInt32, bUInt32BE);\n    let result;\n    Object.keys(QUEUE_PERMISSIONS_TO_BITS).forEach((key) => {\n      if (QUEUE_PERMISSIONS_TO_BITS[key] === permissions) {\n        result = key;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * @returns {?Long} The last message ID acked, if present\n   */\n  getLastMsgIdAcked() {\n    return this._readParameter(SMFAdProtocolParam.LASTMSGIDACKED,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Long} The last message ID received, if present\n   */\n  getLastMsgIdReceived() {\n    return this._readParameter(SMFAdProtocolParam.LASTMSGIDRECEIVED,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Number} The publisher ID, if present\n   */\n  getPublisherId() {\n    return this._readParameter(SMFAdProtocolParam.PUBLISHER_ID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} Whether we want flow change notifications, if present\n   */\n  getWantFlowChangeNotify() {\n    return !!this._readParameter(SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The Window parameter, if present\n   */\n  getWindow() {\n    return this._readParameter(SMFAdProtocolParam.WINDOW, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The max redelivery parameter, if present\n   */\n  getMaxRedelivery() {\n    return this._readParameter(SMFAdProtocolParam.MAX_REDELIVERY, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The max unacked messages parameter, if present\n   */\n  getMaxUnackedMessages() {\n    return this._readParameter(SMFAdProtocolParam.MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW,\n                               strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Long} The endpointErrorId, if present\n   */\n  getEndpointErrorId() {\n    return this._readParameter(SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Long} The spoolerUniqueId, if present\n   */\n  getSpoolerUniqueId() {\n    return this._readParameter(SMFAdProtocolParam.SPOOLER_UNIQUE_ID,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * Creates a CLOSEPUBFLOW message\n   * @param {Number} flowId The publisher flow to close\n   * @param {Number} correlationTag The correlation tag for the request\n   * @returns {AdProtocolMessage} The newly created message\n   * @internal\n   * @static\n   */\n  static getCloseMessagePublisher(flowId,\n                                  correlationTag) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CLOSEPUBFLOW);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.FLOWID,\n                                          flowId));\n    return message;\n  }\n\n\n  /**\n   * Creates a CREATE message\n   * @param {solace.QueueDescriptor} queueDescriptor The endpoint descriptor for the create request\n   * @param {?solace.QueueProperties} queueProperties The properties for the create request\n   * @param {Number} correlationTag The correlation tag for the request\n   * @returns {AdProtocolMessage} The newly created message\n   * @internal\n   * @static\n   */\n  static getCreate(\n    queueDescriptor,\n    queueProperties,\n    correlationTag\n  ) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CREATE);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    /*\n      {AssuredCtrl QueueName|TopicEndpointName Parameter}\n      {AssuredCtrl Durability Parameter}\n      [AssuredCtrl AllOthersPermission Parameter]\n      [AssuredCtrl AccessType Parameter]\n    [AssuredCtrl EndpointQuotaMB Parameter]\n    [AssuredCtrl EndpointMaxMessageSize Parameter]\n    [AssuredCtrl qEndpointBehaviourFlags Parameter]\n    [AssuredCtrl MaxRedelivery Parameter]\n    */\n\n    // QueueName/TopicEndpointName : different param type for TE vs queue\n    const endpointTypeParam = QueueDescriptorTypeToParam[queueDescriptor.type];\n    if (endpointTypeParam === undefined) throw new OperationError('Unknown destination type');\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      endpointTypeParam,\n      nullTerminate(queueDescriptor.name)\n    ));\n\n\n    // [AssuredCtrl Durability Parameter]\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_DURABLE,\n      queueDescriptor.durable // better be...\n    ));\n\n\n    addQueueProperties(message, queueProperties);\n\n    return message;\n  }\n\n  /**\n   * Returns an AdProtocolMessage that describes a publisher open-flow request.\n   * @static\n   * @param {?Long} lastMsgIdAcked Last message ID acked, if re-opening\n   * @param {?Long} lastMsgIdSent Last message ID sent, if re-opening\n   * @param {Number} windowSize Desired window size\n   * @param {String} flowName Last flow name in use, if re-opening\n   * @param {Number} correlationTag Correlation tag for the request\n   * @returns {solace.AdProtocolMessage} The OPENPUBFLOW message\n   * @internal\n   */\n  static getOpenMessagePublisher(\n            lastMsgIdAcked,\n            lastMsgIdSent,\n            windowSize,\n            flowName,\n            correlationTag) {\n    const adMsg = new AdProtocolMessage(SMFAdProtocolMessageType.OPENPUBFLOW);\n\n    const smfHeader = adMsg.smfHeader;\n    smfHeader.pm_corrtag = correlationTag;\n\n    if (lastMsgIdAcked !== undefined) {\n      adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.LASTMSGIDACKED,\n                                          lastMsgIdAcked));\n    }\n    if (lastMsgIdSent !== undefined) {\n      adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.LASTMSGIDSENT,\n                                          lastMsgIdSent));\n    }\n\n    adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                        SMFAdProtocolParam.WINDOW,\n                                        windowSize));\n\n    adMsg.addParameter(new SMFParameter(SMFUH.IGNORE,\n                                        SMFAdProtocolParam.FLOWNAME,\n                                        flowName || ''));\n\n    LOG_TRACE(`Create open publisher: lastMsgIdAcked=${lastMsgIdAcked} lastMsgIdSent=${lastMsgIdSent} window=${windowSize} flowName=${flowName || '(null)'}`);\n\n    return adMsg;\n  }\n\n  /**\n   * Returns an AdProtocolMessage that describes a subscriber (MessageConsumer) bind request.\n   * @static\n   * @param {solace.QueueDescriptor} queueDescriptor The endpoint descriptor for the bind request\n   * @param {?solace.QueueProperties} queueProperties The properties for the bind request\n   * @param {solace.Destination} endpoint The endpoint for the bind request\n   * @param {?solace.Topic} topicSubscription The topic endpoint\n   * @param {String} correlationTag The correlation tag for the request\n   * @param {Number} windowSize The desired window size\n   * @param {Boolean} [noLocal=false] If true, local publisher messages are not delivered\n   * @param {Boolean} [wantFlowChangeUpdate] default is true if destination is a {solace.Queue}\n   * @param {Long} [lastMsgIdAcked=Long.UZERO] Last message ID acked, if re-binding\n   * @param {Long} [lastMsgIdReceived=Long.UZERO] Last message ID received, if re-binding\n   * @param {Boolean} [browser=false] If true, flow is a queue browser\n   * @param {ReplayStartLocation} [replayStartLocation=undefined] If set messages\n   *         are first retrieved from the replay log before live messages are received.\n   * @param {Long} [endpointErrorId=undefined] Endpoint Error ID identifying the flow\n   *         when rebinding.\n   * @returns {solace.AdProtocolMessage} The BIND message\n   * @internal\n   */\n  static getOpenMessageConsumer(queueDescriptor,\n                                queueProperties,\n                                endpoint,\n                                topicSubscription,\n                                correlationTag,\n                                windowSize,\n                                noLocal,\n                                wantFlowChangeUpdate,\n                                lastMsgIdAcked = Long.UZERO,\n                                lastMsgIdReceived = Long.UZERO,\n                                browser = false,\n                                replayStartLocation = undefined,\n                                endpointErrorId = undefined) {\n    /*\n    QUEUE FLOW                                      TE FLOW\n\n    {SMF Header, protocol=AssuredCtrl ttl=1}        {SMF Header, protocol=AssuredCtrl ttl=1}\n    [Correlation Tag Parameter]                     [Correlation Tag Parameter]\n    {AssuredCtrl Message Header, msgType=Bind}      {AssuredCtrl Message Header, msgType=Bind}\n\n    {AssuredCtrl QueueName Parameter}               {AssuredCtrl TopicEndpointName Parameter}\n    ***                                             {AssuredCtrl TopicName Parameter}\n    [AssuredCtrl Last Message Id Acked Parameter]   ***\n    [AssuredCtrl Last Message Id Recv'd Parameter]  ***\n    {AssuredCtrl Transport Window Size Parameter}   {AssuredCtrl Transport Window Size Parameter}\n    [AssuredCtrl Durability Parameter]              [AssuredCtrl Durability Parameter]\n    [AssuredCtrl Message Selector Parameter]        [AssuredCtrl Message Selector Parameter]\n    [AssuredCtrl FlowType Parameter]                [AssuredCtrl FlowType Parameter]\n    [AssuredCtrl Selector Parameter]                [AssuredCtrl Selector Parameter]\n    [AssuredCtrl AllOthersPermissions Parameter]    [AssuredCtrl AllOthersPermissions Parameter]\n    [AssuredCtrl EndpointQuotaMB Parameter]         [AssuredCtrl EndpointQuotaMB Parameter]\n    [AssuredCtrl EndpointMaxMessageSize Parameter]  [AssuredCtrl EndpointMaxMessageSize Parameter]\n    [AssuredCtrl TransactedSessionId Parameter]     [AssuredCtrl TransactedSessionId Parameter]\n    [AssuredCtrl NoLocal Parameter]                 [AssuredCtrl NoLocal Parameter]\n    [AssuredCtrl wantFlowChangeUpdate Parameter]    ***\n    [AssuredCtrl qEndpointBehaviourFlags Parameter] [AssuredCtrl qEndpointBehaviourFlags Parameter]\n    [AssuredCtrl MaxRedelivery Parameter]           [AssuredCtrl MaxRedelivery Parameter]\n    [AssuredCtrl browser Parameter]                 ***\n    */\n    const durable = queueDescriptor.durable;\n    const endpointBytes = endpoint.bytes;\n    const endpointType = endpoint.type;\n\n    // {SMF Header, protocol=AssuredCtrl ttl=1}        {SMF Header, protocol=AssuredCtrl ttl=1}\n    // [Correlation Tag Parameter]                     [Correlation Tag Parameter]\n    // {AssuredCtrl Message Header, msgType=Bind}      {AssuredCtrl Message Header, msgType=Bind}\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.BIND);\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    // {AssuredCtrl QueueName Parameter}               {AssuredCtrl TopicEndpointName Parameter}\n    const endpointTypeParam = EndpointTypeToParam[endpointType];\n    if (endpointTypeParam === undefined) throw new OperationError('Unknown destination type');\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      endpointTypeParam,\n      endpointBytes\n    ));\n\n    // ***                                             {AssuredCtrl TopicName Parameter}\n    if (topicSubscription) {\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.TOPICNAME,\n        topicSubscription.bytes\n      ));\n    }\n\n    if (endpointType === DestinationType.QUEUE) {\n      //     [AssuredCtrl Last Message Id Acked Parameter]   ***\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.LASTMSGIDACKED,\n        lastMsgIdAcked\n      ));\n      //     [AssuredCtrl Last Message Id Recv'd Parameter]  ***\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.LASTMSGIDRECEIVED,\n        lastMsgIdReceived\n      ));\n    }\n\n    // {AssuredCtrl Transport Window Size Parameter}\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.WINDOW,\n      windowSize\n    ));\n\n    // [AssuredCtrl Durability Parameter]\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_DURABLE,\n      durable\n    ));\n\n    // Omit Message Selector\n    // Omit FlowType, CONSUMER assumed (not BROWSER currently)\n    // Omit TransactedSessionId\n\n    addQueueProperties(message, queueProperties, true);\n\n    if (noLocal /* is true */) {\n      // [AssuredCtrl NoLocal Parameter]\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.NOLOCAL,\n        0x1\n      ));\n    }\n\n    if (wantFlowChangeUpdate /* is true */) {\n      // [AssuredCtrl wantFlowChangeUpdate Parameter]    ***\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY,\n        0x1\n      ));\n    }\n\n    if (browser /* is true */) {\n      // [AssuredCtrl browser Parameter]    ***\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.FLOWTYPE,\n        0x2\n      ));\n    }\n    if (replayStartLocation !== undefined) {\n      // [AssuredCtrl replay start location Parameter]\n      let rsValue = replayStartLocation._replayStartValue;\n      if (replayStartLocation._type === ReplayStartType.DATE) {\n        const replayStartTimeMs = Long.fromNumber(replayStartLocation._replayStartValue, true);\n        const replayStartTimeNs = replayStartTimeMs.multiply(1000000);\n        rsValue = replayStartTimeNs;\n      }\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.REPLAY_START_LOCATION,\n        {\n          type:  replayStartLocation._type,\n          value: rsValue,\n        }\n      ));\n    }\n\n    if (endpointErrorId !== undefined) {\n      // [AssuredCtrl EndpointErrorId Parameter]    ***\n      LOG_TRACE(`Adding endpointErrorId to message: ${endpointErrorId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n        endpointErrorId\n      ));\n    }\n\n    return message;\n  }\n\n  /**\n   * Creates an UNBIND request\n   * @param {Number} flowId The flow ID to unbind\n   * @param {Number} correlationTag The correlation tag for the request\n   * @param {?Long} lastMessageIdAcked The last message ID marked as locally acked\n   * @returns {AdProtocolMessage} The new UNBIND request\n   * @static\n   * @internal\n   */\n  static getCloseMessageConsumer(flowId,\n                                 correlationTag) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNBIND);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.FLOWID,\n                                          flowId));\n    // linger: assume no\n\n    return message;\n  }\n\n  static getDTEUnsubscribeMessage(correlationTag,\n                                  topic) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNSUBSCRIBE);\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.DTENAME,\n      topic.getBytes()\n    ));\n\n    return message;\n  }\n\n  /**\n   * @param {Number} flowId The flow on which to acknowledge messages.\n   * @param {?Long} [lastMessageIdAcked=undefined] The transport acknowledges receipt of all\n   *  messages up to and including this ID.\n   * @param {?Long} [windowSize=undefined] The size to which the flow window should be set.\n   * @param {?Array.<Array.<Long>>} [applicationAckRanges=undefined] Low-high ID pairs of\n   *  message IDs to acknowledge at the application level. To application ack a single message,\n   *  pass `[ [singleMessageId, singleMessageId] ]`.\n   * @returns {solace.AdProtocolMessage} A message containing the given parameters.\n   * @internal\n   * @static\n   */\n  static getAck(flowId,\n                lastMessageIdAcked = undefined,\n                windowSize = undefined,\n                applicationAckRanges = undefined) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CLIENTACK);\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.FLOWID,\n      flowId\n    ));\n\n    if (lastMessageIdAcked) {\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.LASTMSGIDACKED,\n        lastMessageIdAcked\n      ));\n    }\n\n    if (windowSize !== undefined && windowSize !== null) {\n      // There are two windowSize options; we'll use the legacy one for smaller\n      // window sizes\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        (windowSize <= 0xFF) ? SMFAdProtocolParam.WINDOW : SMFAdProtocolParam.TRANSPORT_WINDOW,\n        windowSize\n      ));\n    }\n\n    if (applicationAckRanges && applicationAckRanges.length) {\n      if (applicationAckRanges.length > AdProtocolMessage.MAX_CLIENT_ACK_RANGES) {\n        throw new OperationError('Application ack range count exceeds limit of 64');\n      }\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.APPLICATION_ACK,\n        applicationAckRanges // DANGER: this needs to be encoded immediately, or else deep-cloned\n      ));\n    }\n\n    return message;\n  }\n\n  /**\n   * @param {Number} flowId The flow on which to acknowledge messages.\n   * @param {?Long} [endpointErrorId=undefined] endpoint error id\n   * @param {?Long} [lastMessageIdAcked=undefined] The transport acknowledges receipt of all\n   *  messages up to and including this ID.\n   * @returns {solace.AdProtocolMessage} A message containing the given parameters.\n   * @internal\n   * @static\n   */\n  static getUnbindAck(flowId, endpointErrorId = undefined, lastMessageIdAcked = undefined) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNBIND);\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.FLOWID,\n      flowId\n    ));\n\n    if (endpointErrorId) {\n      LOG_TRACE(`Adding endpointErrorId to unbind ack: ${endpointErrorId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n        endpointErrorId\n      ));\n    }\n    LOG_TRACE(`Not adding lastMessageIdAcked to unbind ack: ${lastMessageIdAcked}`);\n    //if (lastMessageIdAcked) {\n    //  LOG_TRACE(`Adding lastMessageIdAcked to unbind ack: ${lastMessageIdAcked}`);\n    //  message.addParameter(new SMFParameter(\n    //    SMFUH.REJECT,\n    //    SMFAdProtocolParam.LASTMSGIDACKED,\n    //    lastMessageIdAcked\n    //  ));\n    //}\n    return message;\n  }\n}\n\n\nAdProtocolMessage.MAX_CLIENT_ACK_RANGES = 64;\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\n","const { AdProtocolMessage } = require('./adprotocol-message');\nconst { BinaryMetaBlock } = require('./binary-meta-block');\nconst { ClientCtrlMessage } = require('./client-ctrl-message');\nconst { KeepAliveMessage } = require('./keep-alive-message');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFUH } = require('./smf-uh');\nconst { SMPMessage } = require('./smp-message');\nconst { TransportSMFMessage } = require('./transport-smf-message');\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\nmodule.exports.SMFHeader = SMFHeader;\nmodule.exports.SMFParameter = SMFParameter;\nmodule.exports.SMFUH = SMFUH;\nmodule.exports.SMPMessage = SMPMessage;\nmodule.exports.TransportSMFMessage = TransportSMFMessage;\n","/**\n * @constructor BaseMessage\n * @private\n */\nclass BaseMessage {\n  constructor(header = null, params = []) {\n    this._smfHeader = header;\n    this._parameters = params;\n  }\n\n  addParameter(param) {\n    this._parameters[param.getType()] = param;\n  }\n\n  getParameter(paramType) {\n    return this._parameters[paramType];\n  }\n\n  getParameterArray() {\n    return this._parameters;\n  }\n\n  get smfHeader() {\n    return this._smfHeader;\n  }\n  set smfHeader(val) {\n    this._smfHeader = val;\n  }\n\n  getResponse() {\n    const smf = this.smfHeader;\n    if (!(smf && smf.pm_respcode && smf.pm_respstr)) {\n      return null;\n    }\n    return {\n      responseCode:   smf.pm_respcode,\n      responseString: smf.pm_respstr,\n    };\n  }\n}\n\nmodule.exports.BaseMessage = BaseMessage;\n","const { Bits, Convert } = require('solclient-convert');\n\nconst {\n  get: bits,\n} = Bits;\nconst {\n  int8ToStr,\n  int24ToStr,\n} = Convert;\n\n/**\n * @classdesc\n *\n * BinaryMetaBlock represents a binary metadata block in a TrMsg\n *\n * @private\n */\nclass BinaryMetaBlock {\n  constructor(type, payload) {\n    this.type = type;\n    this.payload = payload;\n  }\n\n  asEncodedSmf() {\n    const smf = [];\n    smf.push(int8ToStr(1));\n    smf.push(int8ToStr(this.type));\n    smf.push(int24ToStr(this.payload.length));\n    smf.push(this.payload.toString('latin1'));\n    return smf.join('');\n  }\n\n  static fromEncodedSmf(bufSmf, offset = 0) {\n    if ((bufSmf.length - offset) < 6) {\n      return null; // not enough data\n    }\n    const chunkCount = bufSmf.readUInt8(offset);\n    const fourbyte = bufSmf.readInt32BE(offset + 1);\n    const type = bits(fourbyte, 24, 8);\n    const payloadLen = bits(fourbyte, 0, 24);\n    const payloadOffset = chunkCount * 4 + 1;\n    const payload = bufSmf.slice(offset + payloadOffset, offset + payloadOffset + payloadLen);\n    return new BinaryMetaBlock(type, payload);\n  }\n\n}\n\n\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\n","const { AuthenticationScheme, CapabilityType, ClientCapabilityType, MutableSessionProperty, SessionProperties } = require('solclient-session');\nconst { BaseMessage } = require('./base-message');\nconst { Bits, Convert } = require('solclient-convert');\nconst { DestinationType, DestinationUtil } = require('solclient-destination');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Process, StringUtils, Version } = require('solclient-util');\nconst { SMFClientCtrlMessageType } = require('../smf-client-ctrl-message-types');\nconst { SMFClientCtrlParam, SMFClientCtrlAuthType } = require('../smf-client-ctrl-params');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFProtocol } = require('../smf-protocols');\n\nconst { LOG_TRACE } = require('solclient-log');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\nconst {\n  int8ToStr, strToInt8,\n  int16ToStr, int32ToStr,\n  strToInt16, strToInt32,\n} = Convert;\nconst {\n  nullTerminate,\n  stripNullTerminate,\n} = StringUtils;\nconst {\n  validateAndEncode,\n} = DestinationUtil;\n\nconst BOOLEAN_CAPS_BITS = [\n  CapabilityType.JNDI,\n  CapabilityType.COMPRESSION,\n  CapabilityType.GUARANTEED_MESSAGE_CONSUME,\n  CapabilityType.TEMPORARY_ENDPOINT,\n  CapabilityType.GUARANTEED_MESSAGE_PUBLISH,\n  CapabilityType.GUARANTEED_MESSAGE_BROWSE,\n  CapabilityType.ENDPOINT_MGMT,\n  CapabilityType.SELECTOR,\n  CapabilityType.ENDPOINT_MESSAGE_TTL,\n  CapabilityType.QUEUE_SUBSCRIPTIONS,\n  null, // skip obsolete FLOW_RECOVER\n  CapabilityType.SUBSCRIPTION_MANAGER,\n  CapabilityType.MESSAGE_ELIDING,\n  CapabilityType.TRANSACTED_SESSION,\n  CapabilityType.NO_LOCAL,\n  CapabilityType.ACTIVE_CONSUMER_INDICATION,\n  CapabilityType.PER_TOPIC_SEQUENCE_NUMBERING,\n  CapabilityType.ENDPOINT_DISCARD_BEHAVIOR,\n  CapabilityType.CUT_THROUGH,\n  null, // skip OPENMAMA\n  CapabilityType.MESSAGE_REPLAY,\n  CapabilityType.COMPRESSED_SSL,\n  null, // skipping LONG_SELECTORS\n  CapabilityType.SHARED_SUBSCRIPTIONS,\n  CapabilityType.BR_REPLAY_ERRORID,\n];\n\nconst CLIENT_CAPS_VALUES = new Map([\n  [ClientCapabilityType.UNBIND_ACK, 0x80],\n  [ClientCapabilityType.BR_ERRORID, 0x40],\n]);\n\n/**\n * @classdesc ClientCtrlMessage\n * Represents a ClientCtrl request or reply message\n * @private\n */\nclass ClientCtrlMessage extends BaseMessage {\n  constructor(messageType = 0) {\n    super(new SMFHeader(SMFProtocol.CLIENTCTRL, 1));\n\n    // Field: msgtype\n    this.msgType = messageType;\n\n    // Field: version\n    this.version = 1;\n  }\n\n  getP2PTopicValue() {\n    const p2pParam = this.getParameter(SMFClientCtrlParam.P2PTOPIC);\n    if (!p2pParam) {\n      return null;\n    }\n    return stripNullTerminate(p2pParam.getValue());\n  }\n\n  getVpnNameInUseValue() {\n    const vpnParam = this.getParameter(SMFClientCtrlParam.MSGVPNNAME);\n    if (!vpnParam) {\n      return null;\n    }\n    return stripNullTerminate(vpnParam.getValue());\n  }\n\n  getVridInUseValue() {\n    const vridParam = this.getParameter(SMFClientCtrlParam.VRIDNAME);\n    if (!vridParam) {\n      return null;\n    }\n    return stripNullTerminate(vridParam.getValue());\n  }\n\n  getUserIdValue() {\n    const userIdParam = this.getParameter(SMFClientCtrlParam.USERID);\n    if (!userIdParam) {\n      return null;\n    }\n    return stripNullTerminate(userIdParam.getValue());\n  }\n\n  getRouterCapabilities() {\n    let caps = [];\n\n    // Parse the composite capabilities parameter\n    let capParam = this.getParameter(SMFClientCtrlParam.ROUTER_CAPABILITIES);\n    if (capParam) {\n      caps = ClientCtrlMessage.prmParseCapabilitiesValue(capParam.getValue(), caps);\n    }\n\n    // Parse out the router status strings\n    capParam = this.getParameter(SMFClientCtrlParam.SOFTWAREVERSION);\n    if (capParam) {\n      caps[CapabilityType.PEER_SOFTWARE_VERSION] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.SOFTWAREDATE);\n    if (capParam) {\n      caps[CapabilityType.PEER_SOFTWARE_DATE] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.PLATFORM);\n    if (capParam) {\n      caps[CapabilityType.PEER_PLATFORM] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.PHYSICALROUTERNAME);\n    if (capParam) {\n      caps[CapabilityType.PEER_ROUTER_NAME] = stripNullTerminate(capParam.getValue());\n    }\n    return caps;\n  }\n\n\n  static prmGetDtoPriorityValue(dto) {\n    if (dto.local === undefined || dto.network === undefined) {\n      return false;\n    }\n    let twobyte = 0;\n    twobyte = setBits(twobyte, dto.local, 8, 8);\n    twobyte = setBits(twobyte, dto.network, 0, 8);\n    return int16ToStr(twobyte);\n  }\n\n  static prmParseDtoPriorityValue(strDtoPriority) {\n    const dto = {};\n    const twobyte = strToInt16(strDtoPriority.substr(0, 2));\n    dto.local = bits(twobyte, 8, 8);\n    dto.network = bits(twobyte, 0, 8);\n    return dto;\n  }\n\n  /*\n  strCapabilities: parameter value\n  caps: an already existing hash array of CapabilityType\n   */\n  static prmParseCapabilitiesValue(strCapabilities, capsIn) {\n    const caps = capsIn;\n    if (!(strCapabilities && caps)) {\n      return false;\n    }\n    const CT = CapabilityType;\n    let pos = 0;\n\n    // parse boolean capabilities\n    const boolCapCount = strToInt8(strCapabilities[pos]);\n    ++pos;\n\n    // The boolean caps are listed in order as in the documentation,\n    // that is from MSB to LSB for each caps byte.\n    let capsByte;\n    for (let bitIndex = 0; bitIndex < boolCapCount; ++bitIndex) {\n      const msbIndex = bitIndex & 0x7;\n      if (msbIndex === 0) { // Consume a byte\n        capsByte = strToInt8(strCapabilities[pos]);\n        ++pos;\n      }\n      const capsKey = BOOLEAN_CAPS_BITS[bitIndex];\n      if (!capsKey) continue; // We don't know about this cap\n      // so set caps bits from MSB (bit 7) to LSB (bit 0)\n      caps[capsKey] = !!bits(capsByte, 7 - msbIndex, 1);\n    }\n    // parse non-boolean capabilities\n    const sanityLoop = 500;\n    for (let i = 0; pos < strCapabilities.length && i < sanityLoop; ++i) {\n      const onebyte = strToInt8(strCapabilities[pos]); // type\n      pos++;\n      const capLen = strToInt32(strCapabilities.substr(pos, 4)) - 5;\n      pos += 4;\n      const strValue = strCapabilities.substr(pos, capLen);\n      pos += capLen;\n      switch (onebyte) {\n        case 0x00:\n          caps[CT.PEER_PORT_SPEED] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        case 0x01:\n          caps[CT.PEER_PORT_TYPE] = (strValue.length === 1) ? strToInt8(strValue) : 0;\n          break;\n        case 0x02:\n          caps[CT.MAX_GUARANTEED_MSG_SIZE] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        case 0x03:\n          caps[CT.MAX_DIRECT_MSG_SIZE] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        default:\n          // NOOP (unknown cap)\n          break;\n      }\n    }\n    return caps;\n  }\n\n\n  static getLogin(sprop, compressedTLS, plaintextTLS, correlationTag) {\n    function clientCapsToStr(clientCapList) {\n      const highestCap = Math.max.apply(null, clientCapList) + 1;\n      let capBits = 0;\n      clientCapList.forEach((cap) => { capBits += CLIENT_CAPS_VALUES.get(cap); });\n      return int8ToStr(highestCap) + int8ToStr(capBits);\n    }\n    if (!(sprop instanceof SessionProperties)) {\n      return false;\n    }\n    const cc = new ClientCtrlMessage(SMFClientCtrlMessageType.LOGIN);\n    const smfHeader = cc._smfHeader;\n    const isClientCert = sprop.authenticationScheme === AuthenticationScheme.CLIENT_CERTIFICATE;\n    smfHeader.pm_corrtag = correlationTag;\n    if (sprop.password && !isClientCert) {\n      smfHeader.pm_password = sprop.password;\n    }\n    if (sprop.userName) {\n      smfHeader.pm_username = sprop.userName;\n    }\n    if (sprop.subscriberLocalPriority && sprop.subscriberNetworkPriority) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.DELIVERTOONEPRIORITY,\n                                       ClientCtrlMessage.prmGetDtoPriorityValue({\n                                         local:   sprop.subscriberLocalPriority,\n                                         network: sprop.subscriberNetworkPriority })));\n    }\n    if (sprop.vpnName && sprop.vpnName.length > 0) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.MSGVPNNAME,\n                                       nullTerminate(sprop.vpnName)));\n    }\n\n    if (sprop.applicationDescription && sprop.applicationDescription.length > 0) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTDESC,\n                                       nullTerminate(sprop.applicationDescription)));\n    }\n\n    if (sprop.userIdentification && sprop.userIdentification.length > 0) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.USERID,\n                                       nullTerminate(sprop.userIdentification)));\n    }\n\n    if (sprop.authenticationScheme === AuthenticationScheme.OAUTH2) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.AUTHENTICATION_SCHEME,\n                                       SMFClientCtrlAuthType.OAUTH2));\n\n      if (sprop.idToken) {\n        smfHeader.pm_oidc_id_token = nullTerminate(sprop.idToken);\n      }\n\n      if (sprop.accessToken) {\n        smfHeader.pm_oauth2_access_token = nullTerminate(sprop.accessToken);\n      }\n\n      if (sprop.issuerIdentifier) {\n        smfHeader.pm_oauth2_issuer_identifier = nullTerminate(sprop.issuerIdentifier);\n      }\n    }\n\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.CLIENTNAME,\n                                     nullTerminate(sprop.clientName)));\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.PLATFORM,\n                                     nullTerminate(`${Process.platform} - JS API (${Version.mode})`)));\n\n    if (sprop.noLocal) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.NO_LOCAL,\n                                       '\\x01'));\n    }\n\n    if (isClientCert) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.AUTHENTICATION_SCHEME,\n                                       SMFClientCtrlAuthType.CLIENT_CERTIFICATE));\n    }\n\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.SOFTWAREDATE,\n                                     nullTerminate(Version.formattedDate)));\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.SOFTWAREVERSION,\n                                     nullTerminate(Version.version)));\n\n    if (compressedTLS && plaintextTLS) {\n      LOG_TRACE('Adding SslDowngrade=1 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x01'));\n    } else if (compressedTLS) {\n      LOG_TRACE('Adding SslDowngrade=2 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x02'));\n    } else if (plaintextTLS) {\n      LOG_TRACE('Adding SslDowngrade=0 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x00'));\n    }\n    const clientCaps = clientCapsToStr([ClientCapabilityType.UNBIND_ACK,\n      ClientCapabilityType.BR_ERRORID]);\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.CLIENT_CAPABILITIES,\n                                     clientCaps));\n                                     //'\\x02\\xc0'));\n                                     //'\\x01\\x80'));\n    const keepaliveVal = int32ToStr((sprop.keepAliveIntervalInMsecs) / 1000);\n    cc.addParameter(new SMFParameter(0,\n                                    SMFClientCtrlParam.KEEP_ALIVE_INTERVAL,\n                                    keepaliveVal));\n\n    return cc;\n  }\n\n  /**\n   * Get a CC update message.\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property to update\n   * @param {String} newValue The new value for the property\n   * @param {String} correlationTag The correlation tag for the request\n   * @returns {ClientCtrlMessage} The new UPDATE message\n   *\n   * @private\n   */\n  static getUpdate(mutableSessionProperty, newValue, correlationTag) {\n    const cc = new ClientCtrlMessage(SMFClientCtrlMessageType.UPDATE);\n    const smfHeader = cc.smfHeader;\n    smfHeader.pm_corrtag = correlationTag;\n    if (mutableSessionProperty === MutableSessionProperty.CLIENT_DESCRIPTION) {\n      const appdesc = (newValue || '').toString().substr(0, 250);\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTDESC,\n                                       nullTerminate(appdesc)));\n    } else if (mutableSessionProperty === MutableSessionProperty.CLIENT_NAME) {\n      const error =\n        ClientCtrlMessage.validateClientName(\n          newValue,\n          errorMessage =>\n            new OperationError(`Invalid clientName: ${errorMessage}`,\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n      if (error) {\n        throw error;\n      }\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTNAME,\n                                       nullTerminate(newValue)));\n    }\n    return cc;\n  }\n\n  static validateClientName(strName, exceptionCreator) {\n    const encodeResult = validateAndEncode(DestinationType.TOPIC, strName, exceptionCreator);\n    if (encodeResult.error) {\n      return encodeResult.error;\n    }\n    // Add 1: bytes includes terminator, 160 excludes terminator\n    if (encodeResult.bytes.length > 161) {\n      return exceptionCreator('Client Name too long (max length: 160).');\n    }\n    return null;\n  }\n}\n\n\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\n","const { BaseMessage } = require('./base-message');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFProtocol } = require('../smf-protocols');\n\nclass KeepAliveMessage extends BaseMessage {\n  constructor() {\n    super(new SMFHeader(SMFProtocol.KEEPALIVEV2, 2));\n    this._smfHeader.smf_uh = 2;\n  }\n}\n\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\n","/**\n * @classdesc\n * Control messages wrap an SMFHeader instance\n * @private\n */\nclass SMFHeader {\n  constructor(protocol = 0, ttl = 0) {\n    // header properties\n    // header block\n    // SMF parameters\n    // payload\n    this._parameters = [];\n\n    // Common SMF header field values\n    this.smf_version = 3;\n    this.smf_uh = 0;\n    this.smf_protocol = protocol;\n    this.smf_priority = 0;\n    this.smf_ttl = ttl;\n    this.smf_msgLen = 0;\n    this.smf_di = 0;\n    this.smf_tqd = 0;\n    this.smf_elidingEligible = 0;\n    this.smf_dto = 0;\n    this.smf_adf = 0;                  // AD\n    this.smf_deadMessageQueueEligible = 0; //DMQ Eligible\n\n    // Common SMF protocol parameters\n    this.pm_userdata = null;\n    this.pm_respcode = 0;\n    this.pm_respstr = null;\n    this.pm_username = null;\n    this.pm_password = null;\n    this.pm_tr_topicname_bytes = null;\n    this.pm_deliverymode = null;\n\n    this.pm_ad_msgid = undefined;      // AD\n    this.pm_ad_prevmsgid = undefined;  // AD\n    this.pm_ad_redelflag = 0;          // AD\n    this.pm_ad_flowredelflag = 0;      // AD\n    this.pm_ad_ttl = undefined;        // AD\n    this.pm_ad_ackimm = undefined;     // AD\n    this.pm_ad_flowid = 0;             // AD\n    this.pm_ad_publisherid = 0;\n    this.pm_ad_publishermsgid = 0;\n\n    this.pm_content_summary = null;\n    this.pm_corrtag = null;\n    this.pm_topic_offset = 0;\n    this.pm_topic_len = 0;\n    this.pm_queue_offset = 0;\n    this.pm_queue_len = 0;\n    this.pm_msg_priority = null;        // {number}\n\n    // extended optional parameters\n    // these fields are header but may not be present\n    // see ../codec/parse-smf.js for details\n    // this.pm_ad_redeliveryCount;\n    // this.pm_ad_spooler_unique_id;\n    // this.pm_ad_local_spooler_message_id;\n    // this.pm_ad_replication_mate_ack_message_id;\n    this.pm_oauth2_access_token = null;\n    this.pm_oidc_id_token = null;\n    this.pm_oauth2_issuer_identifier = null;\n\n    // housekeeping\n    this.unknownProtoFlag = false;\n    this.messageLength = 0;\n    this.payloadLength = 0;\n    this.headerLength = 0;\n    this.payload = null;\n\n    // This message is invalid, but the framing (messageLength) is fine.\n    // set by the parser when UH==2 on an unknown parameter.\n    // The SMF fsm can then discard and increment the stats.\n    this.discardMessage = false;\n  }\n\n  setMessageSizes(headerLength, payloadLength) {\n    this.headerLength = headerLength;\n    this.payloadLength = payloadLength;\n    this.messageLength = headerLength + payloadLength;\n  }\n\n  setPayloadSize(payloadLength) {\n    this.payloadLength = payloadLength;\n  }\n}\n\nmodule.exports.SMFHeader = SMFHeader;\n","/**\n * @classdesc\n * A representation of an SMF parameter\n *\n * @private\n */\nclass SMFParameter {\n/**\n * @constructor\n * @param {Number} uh The UH value [0..2]\n * @param {SMFParameterType} type The type of SMF parameter\n * @param {*} value The value for this parameter\n * @param {Buffer} buffer instead of value, a buffer, with indexes (begin and end)\n * @param {Number} begin start index in buffer\n * @param {Number} end end index in buffer.\n */\n  constructor(uh, type, value, buffer, begin, end) {\n    this._type = type;\n    this._value = value;\n    this._uh = uh;\n    this._buffer = buffer;\n    this._begin = begin;\n    this._end = end;\n  }\n  getType() {\n    return this._type;\n  }\n  getValue() {\n    if (this._buffer && !this._value) {\n      return this._buffer.toString('latin1', this._begin, this._end);\n    }\n    return this._value;\n  }\n  getUh() {\n    return this._uh;\n  }\n  getBuffer() {\n    return this._buffer;\n  }\n  getBegin() {\n    return this._begin;\n  }\n  getEnd() {\n    return this._end;\n  }\n\n  toString() {\n    return `${this._uh}:0x${this._type.toString(16)} = ${this.getValue()}`;\n  }\n}\n\nmodule.exports.SMFParameter = SMFParameter;\n","const { Enum } = require('solclient-eskit');\n\nconst SMFUH = {\n  IGNORE: 0x0,\n  REJECT: 0x2,\n};\n\nmodule.exports.SMFUH = Enum.new(SMFUH);\n","const { assert } = require('solclient-eskit');\nconst { BaseMessage } = require('./base-message');\nconst { Destination, DestinationUtil } = require('solclient-destination');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMFSMPMessageType } = require('../smf-smp-message-types');\nconst { SMFSMPMessageTypeFlags } = require('../smf-smp-message-type-flags');\n\n/**\n * Represents an SMP request or reply message\n * @memberof solace\n * @private\n */\nclass SMPMessage extends BaseMessage {\n\n  /**\n   * Creates an instance of SMPMessage.\n   *\n   * @memberOf SMPMessage\n   */\n  constructor() {\n    super(new SMFHeader(SMFProtocol.SMP, 1));\n\n    // Field: msgtype\n    this.msgType = 0;\n\n    // Field: subscription string\n    this.encodedUtf8Subscription = null;\n    this.encodedUtf8QueueName = null;\n\n    this.smpFlags = (0 | SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC); // default flags\n\n    this._encodedQueueName = null; // unused in solclientjs\n    this._encodedClientName = null; // unused in solclientjs\n  }\n\n  isFlag(flagMask) {\n    return (this.smpFlags & flagMask);\n  }\n\n  setFlag(flagMask, value) {\n    if (value) {\n      this.smpFlags |= flagMask;\n    } else {\n      this.smpFlags &= (~flagMask);\n    }\n  }\n\n  static getSubscriptionMessage(correlationTag, topic, add, requestConfirm) {\n    assert(topic instanceof Destination, 'Topics are not UCS-2 strings. Pass a Topic object.');\n    const smp = new SMPMessage();\n    smp.msgType = add\n      ? SMFSMPMessageType.ADDSUBSCRIPTION\n      : SMFSMPMessageType.REMSUBSCRIPTION;\n    smp.encodedUtf8Subscription = topic.getBytes();\n    assert(smp.encodedUtf8Subscription, 'Topic had no encoding');\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC, true);\n    if (requestConfirm) {\n      smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_RESPREQUIRED, true);\n    }\n\n    // Always put a correlation tag\n    smp._smfHeader.pm_corrtag = correlationTag;\n    return smp;\n  }\n\n  static getQueueSubscriptionMessage(correlationTag, topic, queue, add) {\n    assert(topic instanceof Destination, 'Topics are not UCS-2 strings. Pass a Topic object.');\n    const smp = new SMPMessage();\n    smp.msgType = add\n      ? SMFSMPMessageType.ADDQUEUESUBSCRIPTION\n      : SMFSMPMessageType.REMQUEUESUBSCRIPTION;\n    smp.encodedUtf8QueueName = DestinationUtil.encodeBytes(queue.getName());\n    smp.encodedUtf8Subscription = topic.getBytes();\n    assert(smp.encodedUtf8Subscription, 'Topic had no encoding');\n    assert(smp.encodedUtf8QueueName, 'Queue had no encoding');\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC, true);\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_RESPREQUIRED, true);\n    // TODO: true for remove, false for add? Typo in the spec?\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_PERSIST, true);\n\n    // Always put a correlation tag\n    smp._smfHeader.pm_corrtag = correlationTag;\n    return smp;\n  }\n\n\n}\n\n\nmodule.exports.SMPMessage = SMPMessage;\n","const { BaseMessage } = require('./base-message');\n\n/**\n * @classdesc\n * Transport SMF Message\n * @memberof solace\n * @private\n */\nclass TransportSMFMessage extends BaseMessage {\n  /**\n   * @constructor\n   */\n  constructor() {\n    super(null, null);\n    this.uh = 0;\n    this.messageType = null;\n    this.sessionId = null;\n    this.routerTag = null;\n    this.payload = null;\n    this.payloadLength = 0;\n    this.tsHeaderLength = 0;\n  }\n}\n\nmodule.exports.TransportSMFMessage = TransportSMFMessage;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFAdProtocolMessageType = {\n  OPENPUBFLOW:      0x00,\n  // INTERROUTERACK:          0x01,\n  // INTERROUTERHANDSHAKEACK: 0x02,\n  CLIENTACK:        0x03,\n  BIND:             0x04,\n  UNBIND:           0x05,\n  UNSUBSCRIBE:      0x06,\n  CLOSEPUBFLOW:     0x07,\n  CREATE:           0x08,\n  DELETE:           0x09,\n  // FLOWRECOVER:  0x0a,\n  TRANSACTIONCTRL:  0x0b,\n  FLOWCHANGEUPDATE: 0x0c,\n  // EXTERNALACK:      0x0d,\n  XACTRL:           0x0e,\n  CLIENTNACK:       0x0f,\n  // TXNCTRL:          0x10,\n};\n\nmodule.exports.SMFAdProtocolMessageType = Enum.new(SMFAdProtocolMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFAdProtocolParam = {\n  LASTMSGIDSENT:                           0x01,\n  LASTMSGIDACKED:                          0x02,\n  WINDOW:                                  0x03,\n  TRANSPORT_PRIORITY:                      0x04,\n  APPLICATION_ACK:                         0x05,\n  FLOWID:                                  0x06,\n  QUEUENAME:                               0x07,\n  DTENAME:                                 0x08,\n  TOPICNAME:                               0x09,\n  FLOWNAME:                                0x0a,\n  EP_DURABLE:                              0x0b,\n  ACCESSTYPE:                              0x0c,\n  SELECTOR:                                0x0d,\n  TRANSPORT_WINDOW:                        0x0e,\n  LINGER_OPTION:                           0x0f,\n  LASTMSGIDRECEIVED:                       0x10,\n  EP_ALLOTHER_PERMISSION:                  0x11,\n  FLOWTYPE:                                0x12,\n  EP_QUOTA:                                0x13,\n  EP_MAX_MSGSIZE:                          0x14,\n  GRANTED_PERMISSIONS:                     0x15,\n  EP_RESPECTS_TTL:                         0x16,\n  TRANSACTION_CTRL_MESSAGE_TYPE:           0x17,\n  TRANSACTED_SESSION_ID:                   0x18,\n  TRANSACTED_SESSION_NAME:                 0x19,\n  TRANSACTION_ID:                          0x1a,\n  TRANSACTED_SESSION_STATE:                0x1b,\n  TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY:  0x1c,\n  TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK:     0x1d,\n  TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK:     0x1e,\n  NOLOCAL:                                 0x1f,\n  ACTIVE_FLOW_INDICATION:                  0x20,\n  WANT_FLOW_CHANGE_NOTIFY:                 0x21,\n  EP_BEHAVIOUR:                            0x22,\n  PUBLISHER_ID:                            0x23,\n  APPLICATION_PUB_ACK:                     0x24,\n  NUM_MESSAGES_SPOOLED:                    0x25,\n  CUT_THROUGH:                             0x26,\n  PUBLISHER_FLAGS:                         0x27,\n  APP_MSG_ID_TYPE:                         0x28,\n  QUEUE_ENDPOINT_HASH:                     0x29,\n  MAX_REDELIVERY:                          0x2a,\n  PAYLOAD:                                 0x2b,\n  ENDPOINT_ID:                             0x2c,\n  ACK_SEQUENCE_NUMBER:                     0x2d,\n  ACK_RECONCILE_REQUEST:                   0x2e,\n  START_OF_ACK_RECONCILE:                  0x2f,\n  TIMESTAMP:                               0x30,\n  MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW: 0x31,\n  REPLAY_START_LOCATION:                   0x33,\n  ENDPOINT_ERROR_ID:                       0x34,\n  SPOOLER_UNIQUE_ID:                       0x36,\n};\n\nmodule.exports.SMFAdProtocolParam = Enum.new(SMFAdProtocolParam);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFClientCtrlMessageType = {\n  LOGIN:  0x00,\n  UPDATE: 0x01,\n};\n\nmodule.exports.SMFClientCtrlMessageType = Enum.new(SMFClientCtrlMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFClientCtrlParam = {\n  SOFTWAREVERSION:              0x00,\n  SOFTWAREDATE:                 0x01,\n  PLATFORM:                     0x02,\n  USERID:                       0x03,\n  CLIENTDESC:                   0x04,\n  CLIENTNAME:                   0x05,\n  MSGVPNNAME:                   0x06,\n  DELIVERTOONEPRIORITY:         0x07,\n  P2PTOPIC:                     0x08,\n  ROUTER_CAPABILITIES:          0x09,\n  VRIDNAME:                     0x0a,\n  PHYSICALROUTERNAME:           0x0c,\n  BRIDGE_MSG_VPN_NAME:          0x0d,\n  BRIDGE_ROUTER_NAME:           0x0e,\n  NO_LOCAL:                     0x0f,\n  BRIDGE_VERSION:               0x10,\n  AUTHENTICATION_SCHEME:        0x11,\n  CONNECTION_TYPE:              0x12,\n  ROUTER_CAPABILITIES_EXTENDED: 0x13,\n  REQUIRES_RELEASE_7:           0x14, // not supported.\n  SSL_DOWNGRADE:                0x15,\n  CLIENT_CAPABILITIES:          0x17,\n  KEEP_ALIVE_INTERVAL:          0x18,\n};\n\n// Internal use only\nconst SMFClientCtrlAuthType = {\n  CLIENT_CERTIFICATE: '\\x01',\n  OAUTH2:             '\\x0a',\n};\n\nmodule.exports.SMFClientCtrlAuthType = Enum.new(SMFClientCtrlAuthType);\nmodule.exports.SMFClientCtrlParam = Enum.new(SMFClientCtrlParam);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFParameterType = {\n  // SMF parameter types 5 bit types\n  PADDING:                  0x00,\n  PUBLISHER_ID:             0x01,\n  PUBLISHER_MSGID:          0x02,\n  MESSAGEPRIORITY:          0x03,\n  USERDATA:                 0x04,\n  USERNAME:                 0x06,\n  PASSWORD:                 0x07,\n  RESPONSE:                 0x08,\n  SUB_ID_LIST:              0x0A,\n  GENERIC_ATTACHMENT:       0x0B,\n  BINARY_ATTACHMENT:        0x0C,\n  DELIVERY_MODE:            0x10,\n  ASSURED_MESSAGE_ID:       0x11,\n  ASSURED_PREVMESSAGE_ID:   0x12,\n  ASSURED_REDELIVERED_FLAG: 0x13,\n  MESSAGE_CONTENT_SUMMARY:  0x16,\n  ASSURED_FLOWID:           0x17,\n  TR_TOPICNAME:             0x18,\n  AD_FLOWREDELIVERED_FLAG:  0x19,\n  AD_TIMETOLIVE:            0x1C,\n  AD_TOPICSEQUENCE_NUMBER:  0x1e,\n  EXTENDED_TYPE_STREAM:     0x1f,\n  /* extended parameters 12 bit types */\n  AD_ACK_MESSAGE_ID:        0x29,\n  AD_SPOOLER_UNIQUE_ID:     0x2c,\n  AD_REPL_MATE_ACK_MSGID:   0x2d,\n  AD_REDELIVERY_COUNT:      0x2e,\n\n  /* light wieght parameters */\n  LIGHT_CORRELATION:       0x00,\n  LIGHT_TOPIC_NAME_OFFSET: 0x01,\n  LIGHT_QUEUE_NAME_OFFSET: 0x02,\n  LIGHT_ACK_IMMEDIATELY:   0x03,\n};\n\nconst SMFExtendedParameterType = {\n  // SMFv3 Extended parameters inside the Extended Type Stream\n//Not supported yet\n//  GSS_API_TOKEN:        0x28,\n//  AD_ACK_MESSAGE_ID:    0x29,\n//  AD_TRANSACTION_ID:    0x2a,\n//  AD_TRANSACTION_FLAGS: 0x2b,\n  OAUTH2_ISSUER_IDENTIFIER: 0x2f,\n  OIDC_ID_TOKEN:            0x30,\n  OAUTH2_ACCESS_TOKEN:      0x31,\n};\n\nmodule.exports.SMFParameterType = Enum.new(SMFParameterType);\nmodule.exports.SMFExtendedParameterType = Enum.new(SMFExtendedParameterType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * SMFProtocol\n * @private\n * @enum {number}\n */\nconst SMFProtocol = {\n  CSPF:               0x01,\n  CSMP:               0x02,\n  PUBMSG:             0x03,\n  XMLLINK:            0x04,\n  WSE:                0x05,\n  SEMP:               0x06,\n  SUBCTRL:            0x07,\n  PUBCTRL:            0x08,\n  ADCTRL:             0x09,\n  KEEPALIVE:          0x0a,\n  KEEPALIVEV2:        0x0b,\n  CLIENTCTRL:         0x0c,\n  TRMSG:              0x0d,\n  JNDI:               0x0e,\n  SMP:                0x0f,\n  SMRP:               0x10,\n  SMF_IN_SMF:         0x11,\n  SMF_IN_RV:          0x12,\n  ADCTRL_PASSTHROUGH: 0x13,\n  TSESSION:           0x14,\n\n};\n\nmodule.exports.SMFProtocol = Enum.new(SMFProtocol);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFSMPMessageTypeFlags = {\n  FLAG_FILTER:                1,\n  FLAG_PERSIST:               2,\n  SMF_SMP_FLAG_TOPIC:         4,\n  SMF_SMP_FLAG_RESPREQUIRED:  8,\n  SMF_SMP_FLAG_DELIVERALWAYS: 16,\n};\n\nmodule.exports.SMFSMPMessageTypeFlags = Enum.new(SMFSMPMessageTypeFlags);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFSMPMessageType = {\n  ADDSUBSCRIPTION:              0x00,\n  REMSUBSCRIPTION:              0x01,\n  ADDQUEUESUBSCRIPTION:         0x02,\n  REMQUEUESUBSCRIPTION:         0x03,\n  ADDSUBSCRIPTIONFORCLIENTNAME: 0x04,\n  REMSUBSCRIPTIONFORCLIENTNAME: 0x05,\n};\n\nmodule.exports.SMFSMPMessageType = Enum.new(SMFSMPMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFTransportSessionMessageType = {\n  CREATE:            0,\n  CREATE_RESP:       1,\n  DESTROY:           2,\n  DESTROY_RESP:      3,\n  DATA:              4,\n  DATA_TOKEN:        5,\n  DATA_STREAM_TOKEN: 6,\n};\n\nmodule.exports.SMFTransportSessionMessageType = Enum.new(SMFTransportSessionMessageType);\n","const { CacheCBInfo } = require('./lib/cache-cb-info');\nconst { CacheContext } = require('./lib/cache-context');\nconst { CacheLiveDataAction } = require('./lib/cache-live-data-actions');\nconst { CacheRequest } = require('./lib/cache-request');\nconst { CacheRequestResult } = require('./lib/cache-request-result');\nconst { CacheReturnCode } = require('./lib/cache-return-codes');\nconst { CacheReturnSubcode } = require('./lib/cache-return-subcodes');\nconst { CacheSession } = require('./lib/cache-session');\nconst { CacheSessionProperties } = require('./lib/cache-session-properties');\n\nmodule.exports.CacheCBInfo = CacheCBInfo;\nmodule.exports.CACHE_REQUEST_PREFIX = CacheContext.CACHE_REQUEST_PREFIX;\nmodule.exports.CacheLiveDataAction = CacheLiveDataAction;\nmodule.exports.CacheRequestResult = CacheRequestResult;\nmodule.exports.CacheReturnCode = CacheReturnCode;\nmodule.exports.CacheReturnSubcode = CacheReturnSubcode;\nmodule.exports.CacheRequest = CacheRequest;\nmodule.exports.CacheSession = CacheSession;\nmodule.exports.CacheSessionProperties = CacheSessionProperties;\n\n","/**\n * This callback is called by a cache session when a cache request\n * completes.\n *\n * @callback solace.CacheCBInfo.cacheRequestCallback\n * @function\n * @param {Number} requestID The ID of the request on which the event is notified.\n * @param {solace.CacheRequestResult} result The result of the cache request.\n * @param {Object} userObject The user object provided.\n */\n\n\n/**\n * @classdesc\n * Encapsulates a {@link solace.CacheSession}'s request listener callback function and\n * optional application-specified context object.\n *\n * Instances of this class are required as a parameter to\n * {@link solace.CacheSession#sendCacheRequest} when creating a CacheSession request.\n *\n * @memberof solace\n */\nclass CacheCBInfo {\n\n  /**\n   * Creates an instance of CacheCBInfo using the provided callback and user context object.\n   * @param {solace.CacheCBInfo.cacheRequestCallback} cacheCBFunction The callback to be invoked.\n   * @param {Object} userObject A context object to be returned with the callback.\n   */\n  constructor(cacheCBFunction, userObject) {\n    /**\n     * The function that will be called by the cache session when a request\n     * completes.\n     * @type {solace.CacheCBInfo.cacheRequestCallback}\n     */\n    this.cacheCBFunction = cacheCBFunction;\n\n    /**\n     * The user context object that will be supplied to the callback function\n     * when the cache request completes.\n     * @type {object}\n     */\n    this.userObject = userObject;\n  }\n\n  /**\n   * @returns {solace.CacheCBInfo.cacheRequestCallback} The callback function\n   * @private\n   */\n  getCallback() {\n    return this.cacheCBFunction;\n  }\n\n  /**\n   * @returns {*} The user context object, if any\n   * @private\n   */\n  getUserObject() {\n    return this.userObject;\n  }\n\n}\n\nmodule.exports.CacheCBInfo = CacheCBInfo;\n","/**\n * @private\n * @static\n */\nconst CacheContext = {\n  /**\n   * A prefix appearing on the request IDs of all requests associated with a Solcache session.\n   * @type {String}\n   * @private\n   */\n  CACHE_REQUEST_PREFIX: '#CRQ',\n\n  /**\n   * A global counter generating unique correlation IDs for cache requests.\n   * @private\n   */\n  cacheRequestCorrelationId: 0,\n};\n\nmodule.exports.CacheContext = CacheContext;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst CacheGetResultCode = {\n  INVALID: 0,\n  OK:      1,\n};\n\nmodule.exports.CacheGetResultCode = Enum.new(CacheGetResultCode);\n","const { CacheGetResultCode } = require('./cache-get-result-codes');\n\nconst DEFAULTS = {\n  messageID:         null,\n  version:           0,\n  responseCode:      CacheGetResultCode.INVALID,\n  responseString:    '',\n  matchTopic:        '',\n  sessionID:         null,\n  isSuspect:         null,\n  hasMore:           null,\n  hasTimestamps:     null,\n  replyTo:           null,\n  messageStream:     null,\n  clusterNameStream: null,\n};\n\n/**\n * @classdesc CacheGetResult encapsulates the result of a cache get request\n * @private\n */\nclass CacheGetResult {\n  /*\n   * @constructor\n   */\n  constructor(options = DEFAULTS) {\n    Object.assign(this, options);\n  }\n\n  readFromStream(stream) {\n    this.messageID = stream.getNext().getValue();\n    this.version = stream.getNext().getValue();\n    this.responseCode = stream.getNext().getValue();\n    this.responseString = stream.getNext().getValue();\n    // SD claims instanceName is present here but empirically, it's not\n\n    this.matchTopic = stream.getNext().getValue();\n    this.sessionID = stream.getNext().getValue();\n    this.isSuspect = stream.getNext().getValue();\n    this.hasMore = stream.getNext().getValue();\n\n    this.hasTimestamps = stream.getNext().getValue();\n\n    if (stream.hasNext()) { // first stream\n      this.messageStream = stream.getNext().getValue();\n    }\n    if (stream.hasNext()) { // if two streams, first was cluster name stream\n      this.clusterNameStream = this.messageStream;\n      this.messageStream = stream.getNext().getValue();\n    }\n  }\n}\n\nmodule.exports.CacheGetResult = CacheGetResult;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * solace.CacheLiveDataAction\n * Enumeration of CacheLiveDataAction values, specifying how the CacheSession should handle\n * live data associated with a cache request in progress.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheLiveDataAction = {\n  /**\n   * @type {Number}\n   * @description End the cache request when live data arrives that matches the topic.\n   * Note that wildcard cache requests must always be {@link CacheLiveDataAction.FLOW_THRU}.\n   */\n  FULFILL:   1,\n  /**\n   * @type {Number}\n   * @description Queue arriving live data that matches the topic, until the cache request\n   * completes. Note that wildcard cache requests must always be {@link\n   * solace.CacheLiveDataAction.FLOW_THRU}.\n   */\n  QUEUE:     2,\n  /**\n   * @type {Number}\n   * @description Continue the outstanding cache request while allowing live data to flow through to\n   * the application.\n   * Note that wildcard cache requests must always be {@link CacheLiveDataAction.FLOW_THRU}.\n   */\n  FLOW_THRU: 3,\n};\n\nmodule.exports.CacheLiveDataAction = Enum.new(CacheLiveDataAction);\n","/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. A CacheRequestResult object is\n * provided on the callback (see {@link solace.CacheCBInfo.cacheRequestCallback} when a cache\n * request completes.</b>\n *\n * An object that indicates the termination of a cache request, and provides details how it\n * concluded.\n * @memberof solace\n * @hideconstructor\n */\nclass CacheRequestResult {\n  /*\n   * @param {solace.CacheReturnCode} rc The result of the request.\n   *   * When returnCode === CacheReturnCode.OK, the applicable subcodes are:\n   *     * {@link CacheReturnSubcode.REQUEST_COMPLETE}\n   *     * {@link CacheReturnSubcode.LIVE_DATA_FULFILL}\n   *   * When returnCode === CacheReturnCode.FAIL, applicable subcodes are:\n   *     * {@link CacheReturnSubcode.ERROR_RESPONSE}\n   *     * {@link CacheReturnSubcode.INVALID_SESSION}\n   *     * {@link CacheReturnSubcode.REQUEST_ALREADY_IN_PROGRESS}\n   *   * When returnCode === CacheReturnCode.INCOMPLETE, applicable subcodes are:\n   *     * {@link CacheReturnSubcode.NO_DATA}\n   *     * {@link CacheReturnSubcode.REQUEST_TIMEOUT}\n   *     * {@link CacheReturnSubcode.SUSPECT_DATA}\n   *\n   * @param {solace.CacheReturnSubcode} subcode The subcode result of the request. Provides\n   *    details on the condition that caused the result.\n   * @param {solace.Destination} topic The topic destination on which the request was made.\n   * @param {String} error The error, if any, that caused the current result.\n   */\n  constructor(rc, subcode, topic, error) {\n    this._returnCode = rc;\n    this._subcode = subcode;\n    this._topic = topic;\n    this._error = error;\n  }\n\n  /**\n   * Gets the return code from the cache request result.\n   *\n   * @returns {solace.CacheReturnCode} The return code associated with the result of\n   * the request.\n   */\n  getReturnCode() {\n    return this._returnCode;\n  }\n\n  /**\n   * Gets the return subcode from the cache request result.\n   *\n   * @returns {solace.CacheReturnSubcode} A subcode that gives more detail than\n   * {@link CacheRequestResult#getReturnCode} about the result of the request.\n   */\n  getReturnSubcode() {\n    return this._subcode;\n  }\n\n  /**\n   * Gets the topic object associated with the cache request.\n   *\n   * @returns {solace.Destination} The topic destination supplied for the cache request.\n   */\n  getTopic() {\n    return this._topic;\n  }\n\n\n  /**\n   * Gets the error, if any, associated with the returned result.\n   *\n   * @returns {String} The error associated with the returned result.\n   */\n  getError() {\n    return this._error;\n  }\n}\n\nmodule.exports.CacheRequestResult = CacheRequestResult;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst CacheRequestType = {\n  INVALID:                       0,\n  BULK_MSG:                      1,\n  REGISTER_REQUEST:              2,\n  REGISTER_RESPONSE:             3,\n  HEARTBEAT_REQUEST:             4,\n  HEARTBEAT_RESPONSE:            5,\n  EVENT_NOTIFY:                  6,\n  EVENT_ACK:                     7,\n  ACTION_REQUEST:                8,\n  ACTION_RESPONSE:               9,\n  GET_REQUEST:                   10,\n  GET_RESPONSE:                  11,\n  GET_NEXT_REQUEST:              12,\n  GET_NEXT_RESPONSE:             13,\n  SET_REQUEST:                   14,\n  SET_RESPONSE:                  15,\n  GET_MSG_REQUEST:               16,\n  GET_MSG_RESPONSE:              17,\n  GET_NEXT_MSG_REQUEST:          18,\n  GET_NEXT_MSG_RESPONSE:         19,\n  UNREGISTER_IND:                20,\n  BULK_SET_REQUEST:              21,\n  BULK_SET_RESPONSE:             22,\n  PURGE_MSG_SEQUENCE_REQUEST:    23,\n  PURGE_MSG_SEQUENCE_RESPONSE:   24,\n  GET_MSG_SEQUENCE_REQUEST:      25,\n  GET_NEXT_MSG_SEQUENCE_REQUEST: 26,\n  GET_TOPIC_INFO_REQUEST:        27,\n  GET_TOPIC_INFO_RESPONSE:       28,\n  READY_MARKER:                  29,\n  GET_TOPIC_INFO_REQUEST_RANGE:  30,\n  SYNC_READY_MARKER:             31,\n  VACUUM_REQUEST:                32,\n  VACUUM_RESPONSE:               33,\n};\n\nmodule.exports.CacheRequestType = Enum.new(CacheRequestType);\n","const { CacheContext } = require('./cache-context');\nconst { LOG_DEBUG } = require('solclient-log');\n\nconst { CACHE_REQUEST_PREFIX } = CacheContext;\n\n/**\n * @private\n */\nclass CacheRequest {\n  /**\n   * @constructor\n   * @param {CacheSession} cacheSession The owning session\n   * @param {CacheRequestType} cacheMessageType The type of request\n   * @param {Number} requestID The ID for the request\n   * @param {CacheCBInfo} cbInfo Callback target\n   * @param {CacheLiveDataAction} liveDataAction Action on live data received\n   * @param {Topic} topic Associated topic\n   * @param {String} cacheName Associated remote cache name\n   * @private\n   */\n  constructor(cacheSession, cacheMessageType, requestID, cbInfo, liveDataAction, topic, cacheName) {\n    this.cacheSession = cacheSession;\n    this.cacheMessageType = cacheMessageType;\n    this.requestID = requestID;\n    this.cbInfo = cbInfo;\n    this.liveDataAction = liveDataAction;\n    this.topic = topic;\n    this.cacheName = cacheName;\n\n    this.subscriptionWaiting = null;\n    this.replyReceived = false;\n    this.dataReceived = false;\n    this.isSuspect = false;\n\n    this.correlationID = `${CACHE_REQUEST_PREFIX}${CacheContext.cacheRequestCorrelationId++}`;\n\n    this.childRequests = [];\n    this.parentRequest = null;\n\n    this.queuedLiveData = [];\n    this.liveDataFulfilled = false;\n\n    this.timeoutHandle = null;\n  }\n\n  /**\n   * @returns {CacheRequest} The root cache request in the current request tree\n   * @private\n   */\n  getRootRequest() {\n    if (!this.parentRequest) {\n      return this;\n    }\n    return this.parentRequest.getRootRequest();\n  }\n\n  /**\n   * @param {CacheRequest} childIn A request to make a descendant of this node in the request tree\n   * @private\n   */\n  addChild(childIn) {\n    if (!(childIn instanceof CacheRequest)) {\n      throw new Error(`Invalid child ${childIn}`);\n    }\n    if (childIn === this) {\n      throw new Error('Constructing circular child reference');\n    }\n    const child = childIn;\n    child.parentRequest = this;\n    this.childRequests.push(child);\n  }\n\n  /**\n   * @param {CacheRequest} childIn A request to remove as a descendant of this node\n   * @private\n   */\n  removeChild(childIn) {\n    if (childIn === this) {\n      throw new Error('Attempting to deconstruct invalid circular child reference');\n    }\n    const child = childIn;\n    const childIndex = this.childRequests.indexOf(child);\n    if (childIndex === -1) {\n      LOG_DEBUG(`Child ${child} not found in ${this}`);\n    }\n    this.childRequests.splice(childIndex, 1);\n    child.parentRequest = null;\n  }\n\n  /**\n   * @private\n   */\n  collapse() {\n    const parentRequest = this.parentRequest;\n    parentRequest.isSuspect = parentRequest.isSuspect || this.isSuspect;\n    parentRequest.dataReceived = parentRequest.dataReceived || this.dataReceived;\n    parentRequest.removeChild(this);\n  }\n\n  /**\n   * @private\n   */\n  cancel() {\n    if (this.parentRequest) {\n      this.collapse();\n    }\n\n    while (this.childRequests.length) {\n      const child = this.childRequests.shift();\n      if (child.childRequests) {\n        child.cancel();\n      }\n      this.removeChild(child);\n    }\n\n    this.clearRequestTimeout();\n  }\n\n  /**\n   * @returns {Number} The ID of this request\n   * @private\n   */\n  getRequestID() {\n    return this.requestID;\n  }\n\n\n  /**\n   * @returns {CacheCBInfo} The callback object for this request\n   * @private\n   */\n  getCBInfo() {\n    return this.cbInfo;\n  }\n\n  /**\n   * @returns {Topic} The topic for this request\n   * @private\n   */\n  getTopic() {\n    return this.topic;\n  }\n\n\n  /**\n   * @returns {CacheLiveDataAction} The live data action for this request\n   * @private\n   */\n  getLiveDataAction() {\n    return this.liveDataAction;\n  }\n\n  /**\n   * @param {function({solace.CacheRequest})} cacheSessionTimeoutCB Callback to notify on timeout\n   * @param {Number} timeoutMsec Timeout in milliseconds\n   * @private\n   */\n  startRequestTimeout(cacheSessionTimeoutCB, timeoutMsec) {\n    this.timeoutHandle = setTimeout(() => {\n      cacheSessionTimeoutCB(this);\n    }, timeoutMsec);\n  }\n\n  /**\n   * @private\n   */\n  clearRequestTimeout() {\n    if (this.timeoutHandle === null || this.timeoutHandle === undefined) {\n      return;\n    }\n\n    LOG_DEBUG(`Clearing timeout for ${this}`);\n    clearTimeout(this.timeoutHandle);\n    this.timeoutHandle = null;\n  }\n\n  /**\n   * Returns a string representing the request.\n   * @returns {String} A brief description of this object\n   */\n  toString() {\n    return `CacheRequest[correlationID=${this.correlationID\n        },requestID=${this.requestID\n        },cacheName=${this.cacheName\n        },topic=${this.topic.getName()}]`;\n  }\n\n}\n\n/**\n * @private\n */\nCacheRequest.VERSION = 1;\n\n/**\n * @private\n */\nCacheRequest.DEFAULT_REPLY_SIZE_LIMIT = 1000000;\n\n/**\n * @private\n */\nCacheRequest.REPLY_SIZE_LIMIT = CacheRequest.DEFAULT_REPLY_SIZE_LIMIT;\n\nmodule.exports.CacheRequest = CacheRequest;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of CacheReturnCode types.  The method {@link solace.CacheRequestResult#getReturnCode}\n * returns on of these basic results of a cache request.  More details are available in the\n * associated {@link solace.CacheReturnSubcode}, retrieved by\n * {@link solace.CacheRequestResult#getReturnSubcode}.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheReturnCode = {\n  /**\n   * @type {Number}\n   * @description The cache request succeeded.  See the subcode for more information.\n   */\n  OK:         1,\n  /**\n   * @type {Number}\n   * @description The cache request was not processed.  See the subcode for more information.\n   */\n  FAIL:       2,\n  /**\n   * @type {Number}\n   * @description The cache request was processed but could not be completed.  See the subcode for\n   * more information.\n   */\n  INCOMPLETE: 3,\n};\n\nmodule.exports.CacheReturnCode = Enum.new(CacheReturnCode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of CacheReturnSubcode types.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheReturnSubcode = {\n  /**\n   * @type {Number}\n   * @description\n   * The cache request completed successfully.\n   */\n  REQUEST_COMPLETE:            0,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request completed when live data arrived on the topic requested.\n   */\n  LIVE_DATA_FULFILL:           1,\n  /**\n   * @type {Number}\n   * @description\n   * The cache instance or session returned an error response to the cache request.\n   */\n  ERROR_RESPONSE:              2,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request failed because the {@link Session} used to construct it has been\n   * disposed.\n   */\n  INVALID_SESSION:             3,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request failed because the request timeout expired.\n   */\n  REQUEST_TIMEOUT:             4,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request was made on the same topic as an existing request, and\n   * {@link CacheLiveDataAction.FLOW_THRU} was not set.\n   */\n  REQUEST_ALREADY_IN_PROGRESS: 5,\n  /**\n   * @type {Number}\n   * @description\n   * The cache reply returned no data.\n   */\n  NO_DATA:                     6,\n  /**\n   * @type {Number}\n   * @description\n   * The cache reply returned suspect data.\n   */\n  SUSPECT_DATA:                7,\n  /**\n   * @type {Number}\n   * @description\n   * The request was terminated because the cache session was disposed.\n   */\n  CACHE_SESSION_DISPOSED:      8,\n  /**\n   * @type {Number}\n   * @description\n   * The request was terminated because the subscription request for the specified topic failed.\n   */\n  SUBSCRIPTION_ERROR:          9,\n};\n\nmodule.exports.CacheReturnSubcode = Enum.new(CacheReturnSubcode);\n","/**\n * @classdesc\n *\n * Encapsulates the properties of a cache session.\n *\n * @memberof solace\n *\n */\nclass CacheSessionProperties {\n\n   /**\n    * @constructor\n    *\n    * @param {String} cacheName A property that specifies the cache name to which CacheSession\n    *   operations should be sent.\n    * @param {Number} [maxAgeSec=0] The maximum allowable message age in seconds to deliver in\n    *   response to a cache request. 0 means no restriction on age.\n    * @param {Number} [maxMessages=1] The maximum number of messages per Topic to deliver in\n    *   response to cache requests. 0 means no restriction on the number of messages.\n    * @param {Number} [timeoutMsec=10000] The timeout period (in milliseconds) to wait for a\n    *   response from the cache. This is a protocol timer used internally by the API on each\n    *   message exchange with SolCache. A single call to\n    *   {@link solace.CacheSession#sendCacheRequest} may lead to many request-reply exchanges\n    *   with SolCache and so is not bounded by this timer as long as each internal request is\n    *   satisfied in time.\n    *   * The valid range for this property is >= 3000.\n    */\n  constructor(cacheName, maxAgeSec, maxMessages, timeoutMsec) {\n    /**\n     * @type {String}\n     *\n     * @description A property that specifies the cache name to which CacheSession operations should\n     * be sent.\n     */\n    this.cacheName = cacheName;\n\n    /**\n     * @type {Number}\n     *\n     * @description The maximum allowable message age in seconds to deliver in response to cache\n     * requests.  0 means no restriction on age.\n     *\n     * @default 0\n     */\n    this.maxAgeSec = maxAgeSec || 0;\n\n    /**\n     * @type {Number}\n     *\n     * @description The maximum number of messages per Topic to deliver in response to cache\n     * requests.  0 means no restriction on the number of messages.\n     *\n     * @default 1\n     */\n    this.maxMessages = (maxMessages === null || maxMessages === undefined) ? 1 : maxMessages;\n\n    /**\n     * @type {Number}\n     *\n     * @description The timeout for a cache request, in milliseconds.  The valid range for this\n     * property is >= 3000.\n     *\n     * @default 10000\n     */\n    this.timeoutMsec = timeoutMsec || 10000;\n\n    /**\n     * @private\n     * @type {Boolean}\n     * @description Whether to include other clusters in the request.\n     * @default true\n     */\n    this.includeOtherClusters = true;\n\n    /**\n     * @private\n     */\n    this.cachePrefix = '#P2P/CACHEINST/';\n  }\n\n  /**\n   * Gets the cache name to which {@link solace.CacheSession} requests should be sent, for\n   * sessions constructed using these properties.\n   *\n   * @returns {String} The cache name.\n   */\n  getCacheName() {\n    return this.cacheName;\n  }\n\n  /**\n   * Sets the cache name to which requests should be sent. Cannot be null or blank.\n   * @param {String} value The cache name to which requests should be sent.\n   */\n  setCacheName(value) {\n    this.cacheName = value;\n  }\n\n  /**\n   * Gets the maximum allowable message age for messages to be delivered in response to a request\n   * made on a {@link solace.CacheSession} that was constructed using these properties.  0 means no\n   * restriction on age.\n   *\n   * @returns {Number} The maximum allowable message age to be returned by an associated\n   * {@link solace.CacheSession}, or 0 for no restriction.\n   */\n  getMaxMessageAgeSec() {\n    return this.maxAgeSec;\n  }\n\n  /**\n   * Sets the maximum allowable message age. 0 means no restriction on age.\n   *\n   * @param {Number} value The maximum allowable message age, or 0 for no restriction.\n   */\n  setMaxMessageAgeSec(value) {\n    this.maxAgeSec = value;\n  }\n\n  /**\n   * Gets the maximum count of messages to be delivered, per {@link solace.Destination}, in\n   * response to a request issued on a {@link solace.CacheSession} constructed using these\n   * properties.  0 means no restriction on the number of messages.\n   *\n   * @returns {Number} The maximum number of messages per Topic to deliver, or 0 for no restriction.\n   */\n  getMaxMessages() {\n    return this.maxMessages;\n  }\n\n  /**\n   * Sets the maximum count of messages to be delivered per {@link solace.Destination} in response\n   * to a cache request. 0 means no restriction.\n   *\n   * @param {Number} value The maximum count of messages to deliver, or 0 for no restriction.\n   */\n  setMaxMessages(value) {\n    this.maxMessages = value;\n  }\n\n  /**\n   * Gets the timeout for requests issued on a {@link solace.CacheSession} constructed\n   * using these properties.\n   *  * The valid range is >= 3000.\n   *\n   * @returns {Number} The timeout, in milliseconds, for cache session requests.\n   */\n  getTimeoutMsec() {\n    return this.timeoutMsec;\n  }\n\n  /**\n   * Sets the timeout for requests.\n   *  * The valid range is >= 3000.\n   * @param {Number} value The timeout for requests.\n   */\n  setTimeoutMsec(value) {\n    this.timeoutMsec = value;\n  }\n\n}\n\nmodule.exports.CacheSessionProperties = CacheSessionProperties;\n","/**\n * A tuple associating subscriptions, correlation IDs and cache sessions.\n * @param {String} correlationID The correlation ID for this tuple\n * @param {Topic} topic The topic for this tuple\n * @param {CacheSession} cacheSession The cache session for this tuple\n * @private\n */\nclass CacheSessionSubscribeInfo {\n  constructor(correlationID, topic, cacheSession) {\n    Object.assign(this, {\n      correlationID,\n      topic,\n      cacheSession,\n    });\n  }\n}\n\nmodule.exports.CacheSessionSubscribeInfo = CacheSessionSubscribeInfo;\n","const MessageLib = require('solclient-message');\nconst SessionLib = require('solclient-session');\nconst SMFLib = require('solclient-smf');\nconst StatType = require('solclient-stats');\nconst {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n} = require('solclient-log');\nconst {\n  SDTField,\n  SDTFieldType,\n  SDTStreamContainer,\n} = require('solclient-sdt');\nconst { CacheCBInfo } = require('./cache-cb-info');\nconst { CacheContext } = require('./cache-context');\nconst { CacheGetResult } = require('./cache-get-result');\nconst { CacheLiveDataAction } = require('./cache-live-data-actions');\nconst { CacheRequest } = require('./cache-request');\nconst { CacheRequestResult } = require('./cache-request-result');\nconst { CacheRequestType } = require('./cache-request-types');\nconst { CacheReturnCode } = require('./cache-return-codes');\nconst { CacheReturnSubcode } = require('./cache-return-subcodes');\nconst { CacheSessionProperties } = require('./cache-session-properties');\nconst { CacheSessionSubscribeInfo } = require('./cache-session-subscribe-info');\nconst { Destination,\n        Topic } = require('solclient-destination');\n\nconst { CACHE_REQUEST_PREFIX } = CacheContext;\n\nconst noOp = () => undefined;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.Session#createCacheSession}</b>\n * <p>\n * A session for performing cache requests.\n *\n * Applications must use {@link solace.Session#createCacheSession} to construct this class.\n *\n * The supplied {@link solace.CacheSessionProperties} will be copied. Subsequent modifications\n * to the passed properties will not modify the session. The properties may be reused.\n *\n * @hideconstructor\n * @memberof solace\n */\nclass CacheSession {\n  /*\n   * @constructor\n   * @private\n   *\n   * @param {solace.CacheSessionProperties} props The properties for the cache session.\n   * @param {solace.Session} session The Session on which the CacheSession will issue\n   *  cache requests.\n   * @param {Object} privateInterface Private methods exposed to this CacheSession.\n   *\n   * @throws {solace.OperationError}\n   *  * if the parameters have an invalid type or value;\n   *    subcode {@link ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  constructor(props, session, privateInterface) {\n    CacheSession._validateProps(props);\n    const properties = new CacheSessionProperties(props.cacheName,\n                                                  props.maxAgeSec,\n                                                  props.maxMessages,\n                                                  props.timeoutMsec);\n    Object.assign(this,\n                  {\n                    _outstandingRequests:          {},\n                    _outstandingIDs:               {},\n                    _disposed:                     false,\n                    _nextMessageCallbackInfo:      null,\n                    _nextSessionEventCallbackInfo: null,\n                    _properties:                   properties,\n                    _session:                      session,\n                    _sessionIF:                    privateInterface,\n                  });\n    this._connectToSession(session);\n  }\n\n  /**\n   * @param {solace.Session} session The session to connect\n   * @private\n   */\n  _connectToSession(session) {\n    this._nextSessionEventCallbackInfo = session.getEventCBInfo();\n    this._nextMessageCallbackInfo = session.getMessageCBInfo();\n    session.setMessageCBInfo(new SessionLib.MessageRxCBInfo((_, message) => {\n      this._handleMessage(message);\n    }, this));\n    session.setEventCBInfo(this._createCompoundEventCB(this._nextSessionEventCallbackInfo));\n  }\n\n  /**\n   * Takes the session's existing event callback and sets it as the next delegate in a\n   * chain of responsibility. The next delegate could be the client application, or another\n   * cache session.\n   * @param {SessionEventCBInfo} nextDelegate The next event receiver in the chain\n   * @returns {SessionEventCBInfo} An event receiver that delegates to the supplied receiver\n   * @private\n   */\n  _createCompoundEventCB(nextDelegate) {\n    return new SessionLib.SessionEventCBInfo((session, sessionEvent, userObject, rfuObject) => {\n      this._handleSessionEvent(nextDelegate, session, sessionEvent, userObject, rfuObject);\n    }, null);\n  }\n\n  /**\n   * Modified chain of responsibility. Handles the event, then passes the event to the next\n   * delegate.\n   * @param {SessionEventCBInfo} nextDelegate The next delegate to notify\n   * @param {solace.Session} session The associated session\n   * @param {SessionEvent} sessionEvent The session event to dispatch\n   * @private\n   */\n  _handleSessionEvent(nextDelegate, session, sessionEvent /*, userObject, rfuObject */) {\n    const passEvent = this._processSessionEvent(session, sessionEvent);\n    if (!passEvent) {\n      return;\n    }\n    const cbUserObject = nextDelegate.userObject;\n    if (!cbUserObject) {\n      nextDelegate.sessionEventCBFunction(session, sessionEvent);\n    } else {\n      nextDelegate.sessionEventCBFunction(session, sessionEvent, cbUserObject);\n    }\n  }\n\n  /**\n   * @param {Message} message The message to forward\n   * @private\n   */\n  _sendToNextDelegate(message) {\n    const cbUserObject = this._nextMessageCallbackInfo.userObject;\n    if (!cbUserObject) {\n      this._nextMessageCallbackInfo.messageRxCBFunction(this._session, message);\n    } else {\n      this._nextMessageCallbackInfo.messageRxCBFunction(this._session, message, cbUserObject);\n    }\n  }\n\n  /**\n   * @param {solace.Session} session The associated session\n   * @param {SessionEvent} event The event to process\n   * @returns {Boolean} true if event should pass to next delegate\n   * @private\n   */\n  _processSessionEvent(session, event) {\n    switch (event.sessionEventCode) {\n      case SessionLib.SessionEventCode.SUBSCRIPTION_ERROR:\n      case SessionLib.SessionEventCode.SUBSCRIPTION_OK:\n        return this._checkSubscriptionStatus(event);\n      case SessionLib.SessionEventCode.DOWN_ERROR:\n        this.dispose();\n        return true;\n      default:\n        LOG_TRACE(`Unhandled session event: ${event.sessionEventCode}`);\n        return true;\n    }\n  }\n\n  /**\n   * @param {SessionEvent} event The event to check\n   * @returns {Boolean} `true` if event should pass to next delegate\n   * @private\n   */\n  _checkSubscriptionStatus(event) {\n    // Incremental checks for whether this is our subscription.\n    if ((event.correlationKey === null || event.correlationKey === undefined) ||\n        (!(event.correlationKey instanceof CacheSessionSubscribeInfo)) ||\n        (event.correlationKey.cacheSession !== this)) {\n      return true;\n    }\n    const request = this._getOutstandingRequest(event.correlationKey.correlationID);\n    if (!request) {\n      LOG_WARN(`No request found for subscription success on ${event.correlationKey.topic}`);\n      return true;\n    }\n    if (event.sessionEventCode === SessionLib.SessionEventCode.SUBSCRIPTION_OK) {\n      this._handleSubscriptionSuccess(request, event.correlationKey.topic);\n      return false;\n    }\n    this._handleSubscriptionError(request, event);\n    return false;\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The cache on which to register success\n   * @param {Topic} topic The topic on which to issue the request.\n   * @private\n   */\n  _handleSubscriptionSuccess(requestIn /*, topic */) {\n    // Null out this field and check completion status.\n    const request = requestIn;\n    request.subscriptionWaiting = null;\n    this._startCacheRequest(request);\n  }\n\n  /**\n   * @param {CacheRequest} request The cache request on which to register failure\n   * @private\n   */\n  _handleSubscriptionError(request/*, event */) {\n    this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.SUBSCRIPTION_ERROR);\n  }\n\n  /**\n   * @param {CacheRequest} request The cache request on which to check completion\n   * @private\n   */\n  _checkRequestCompletion(request) {\n    if (request.childRequests.length) {\n      // Not finished with spawned child requests.\n      LOG_DEBUG(`Awaiting termination of ${request.childRequests.length} children`);\n      return;\n    }\n    if (request.subscriptionWaiting) {\n      // Waiting for confirmation of subscription to a topic.\n      LOG_DEBUG('Awaiting subscription');\n      return;\n    }\n    if (request.timeoutHandle !== null && (!request.replyReceived)) {\n      LOG_DEBUG('Awaiting timeout');\n      return;\n    }\n    if (request.parentRequest) {\n      // We're no longer waiting for a child to complete.\n      const parent = request.parentRequest;\n      request.cancel();\n      this._unregisterRequest(request);\n      this._checkRequestCompletion(parent);\n      return;\n    }\n\n    // This is a parent request and it is done.\n    let code;\n    let subcode;\n    if (request.isSuspect) {\n      code = CacheReturnCode.INCOMPLETE;\n      subcode = CacheReturnSubcode.SUSPECT_DATA;\n    } else if (request.dataReceived) {\n      code = CacheReturnCode.OK;\n      if (request.liveDataFulfilled) {\n        subcode = CacheReturnSubcode.LIVE_DATA_FULFILL;\n      } else {\n        subcode = CacheReturnSubcode.REQUEST_COMPLETE;\n      }\n    } else if (request.replyReceived) {\n      code = CacheReturnCode.INCOMPLETE;\n      subcode = CacheReturnSubcode.NO_DATA;\n    } else {\n      throw new Error('Sanity: should never happen');\n    }\n    this._terminateRequest(request, code, subcode);\n  }\n\n  /**\n   * @param {CacheRequest} parentRequest The parent node for the new request\n   * @param {CacheGetResult} cacheGetResult The result of this request\n   * @private\n   */\n  _sendSeeOther(parentRequest, cacheGetResult) {\n    const clusterName = cacheGetResult.clusterNameStream.getNext().getValue();\n    // var root = parentRequest.getRootRequest();\n    LOG_DEBUG(`See Other for ${clusterName}. Sending child request`);\n    const childRequest = new CacheRequest(this,\n                                          CacheRequestType.GET_MSG_REQUEST,\n                                          parentRequest.requestID,\n                                          new CacheCBInfo(noOp, null),\n                                          parentRequest.liveDataAction,\n                                          parentRequest.topic,\n                                          clusterName);\n    // Add this request to its parent\n    parentRequest.addChild(childRequest);\n    // Start the request\n    this._registerRequest(childRequest);\n    childRequest.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                     this._properties.timeoutMsec);\n    this._startCacheRequest(childRequest, // request to send\n                            null, // no session ID\n                            null, // no specific instance target\n                            true); // don't return other clusters\n  }\n\n  /**\n   * @param {CacheRequest} parentRequest The parent node for the new request\n   * @param {CacheGetResult} cacheGetResult The result of this request\n   * @private\n   */\n  _sendGetNext(parentRequest, cacheGetResult) {\n    LOG_DEBUG('Cache result has more, sending GET_NEXT_MSG_REQUEST as child');\n    // This is how to trigger \"Invalid Session\":\n    //require(\"child_process\").execSync('sleep 11');\n    const nextRequest = new CacheRequest(this,\n                                         CacheRequestType.GET_NEXT_MSG_REQUEST,\n                                         parentRequest.requestID,\n                                         new CacheCBInfo(noOp, null),\n                                         parentRequest.liveDataAction,\n                                         parentRequest.topic,\n                                         parentRequest.cacheName);\n    // Set up parent-child relationship\n    parentRequest.addChild(nextRequest);\n    // Start the request\n    this._registerRequest(nextRequest);\n    nextRequest.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                    this._properties.timeoutMsec);\n    this._startCacheRequest(nextRequest, // request to send\n                            cacheGetResult.sessionID, // supplied session ID\n                            cacheGetResult.replyTo); // supplied cache instance target\n  }\n\n  /**\n   * @param {Message} message The message to inspect and handle\n   * @private\n   */\n  _handleMessage(message) {\n    // Determine if the message is associated with one of this session's requests\n    const correlationID = message.getCorrelationId();\n    const request = correlationID === null || correlationID === undefined\n      ? null\n      : this._outstandingRequests[correlationID];\n\n    // This could be live data on a relevant topic.  Check that.\n    if (!request) {\n      if (this._relevantLiveData(message)) {\n        this._sendToNextDelegate(message);\n      }\n      return;\n    }\n\n    // It's ours!\n    LOG_DEBUG(`Processing reply to ${request}`);\n    // bug 36404: We have a response. Cancel the timeout for this request.\n    request.clearRequestTimeout();\n    const streamField = message.getSdtContainer();\n    const stream = streamField && streamField.getValue();\n    if (!stream) {\n      LOG_INFO(\n        `Invalid message format for cache response: no SDT container (${\n        streamField}) or stream (${stream})`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE);\n    }\n    // The session will never see this reply, so we need to update the stats\n    // from here.\n    this._incStat(StatType.RX_REPLY_MSG_RECVED);\n    request.replyReceived = true;\n\n    // If the request was fulfilled by live data, discard the reply and stop processing\n    // the response.\n    if (request.getRootRequest().liveDataFulfilled) {\n      this._incStat(StatType.CACHE_REQUEST_FULFILL_DISCARD_RESPONSE);\n      this._checkRequestCompletion(request);\n      return;\n    }\n\n    if (!stream) {\n      LOG_INFO('Invalid cache response did not fulfill request. Skipping response processing');\n      return;\n    }\n\n    try {\n      // Fill the result object with values from the result stream.\n      const result = new CacheGetResult();\n      result.readFromStream(stream);\n      result.replyTo = message.getReplyTo();\n      if (result.responseString) {\n        LOG_DEBUG(`Cluster response: ${result.responseString}`);\n      }\n        if (result.responseCode === 7 || result.responseString == \"Invalid Session\") {\n          LOG_INFO(`Cluster response indicates invalid session: ${result.responseString} code: ${result.responseCode}`);\n          this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.INVALID_SESSION);\n        }\n      // Apply the isSuspect flag. Don't clear it if the result is already suspect.\n      request.isSuspect = request.isSuspect || result.isSuspect;\n      // Get any inner messages.\n      const messages = CacheSession._decodeMessageStream(request, result);\n      // Update statistics.\n      this._incStat(StatType.RX_CACHE_MSG, messages.length);\n      // If we have more results to come, send a get next request.\n      if (result.hasMore) {\n        this._sendGetNext(request, result);\n      }\n      // If we have more clusters to visit, send requests to those clusters.\n      if (result.clusterNameStream) {\n        LOG_DEBUG('Receiving cluster stream');\n        while (result.clusterNameStream.hasNext()) {\n          this._sendSeeOther(request, result);\n        }\n      }\n      // Forward any retrieved messages.\n      if (messages) {\n        messages.forEach((m) => {\n          this._sendToNextDelegate(m);\n        });\n      }\n      this._checkRequestCompletion(request);\n    } catch (exception) {\n      LOG_INFO(`Invalid message format for cache response: ${exception.stack}`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE);\n    }\n  }\n\n  /**\n   * @param {Message} message The message to inspect and handle\n   * @returns {Boolean} `true` if the next delegate should handle this message\n   * @private\n   */\n  _relevantLiveData(message) {\n    // If the next message processor does not belong to a cache\n    // session, and this is a CRQ message, suppress it.\n    if (message.getCorrelationId() &&\n        message.getCorrelationId().startsWith(CACHE_REQUEST_PREFIX) &&\n        !(this._nextMessageCallbackInfo.userObject instanceof CacheSession)) {\n      LOG_WARN('DROP: Dropping CRQ reply due to no remaining Cache Session processors on message ' +\n               'callback chain');\n      this._incStat(StatType.RX_REPLY_MSG_DISCARD);\n      return false;\n    }\n    // Otherwise, assume the message should flow through.\n    // If all _performLiveDataAction calls return true, we return true;\n    return Object.keys(this._outstandingRequests).every(checkCID =>\n      this._performLiveDataAction(this._outstandingRequests[checkCID], message));\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The cache request for which to perform the action\n   * @param {Message} message The message to process on the request\n   * @returns {Boolean} true if message should flow through after action.\n   * @private\n   */\n  _performLiveDataAction(requestIn, message) {\n    const request = requestIn;\n    request.dataReceived = true;\n    switch (request.liveDataAction) {\n      case CacheLiveDataAction.QUEUE:\n        request.queuedLiveData.push(message);\n        return false;\n\n      case CacheLiveDataAction.FULFILL:\n        if (!request.liveDataFulfilled) {\n          this._fulfillRequest(request);\n        }\n        return true;\n\n      default:\n        return true;\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request to fulfill\n   * @private\n   */\n  _fulfillRequest(requestIn) {\n    const request = requestIn;\n    request.liveDataFulfilled = true;\n    this._trackCompletionStats(CacheReturnCode.OK, CacheReturnSubcode.LIVE_DATA_FULFILL);\n    // We have more work to do here -- we need to return the live data first.\n    // Schedule the notification for later.\n    setTimeout(() => {\n      CacheSession._notifyCallback(request,\n                                   CacheReturnCode.OK,\n                                   CacheReturnSubcode.LIVE_DATA_FULFILL,\n                                   request.getTopic(),\n                                   null);\n    }, 0);\n  }\n\n  /**\n   * Disposes the session.  No cache requests will be sent by this CacheSession after it is\n   * _disposed.\n   *\n   * Any subsequent operations on the session will throw {OperationError}.\n   *\n   * Any pending operations will immediately terminate, returning\n   *   * {@link solace.CacheRequestResult}\n   *     * #returnCode === {@link solace.CacheReturnCode.INCOMPLETE}\n   *     * #subcode === {@link solace.CacheReturnSubcode.CACHE_SESSION_DISPOSED}\n   * @throws {solace.OperationError} if the CacheSession is already _disposed.\n   */\n  dispose() {\n    const toTerminate = Object.keys(this._outstandingRequests)\n      .map(correlationID => this._outstandingRequests[correlationID])\n      .filter(request => request instanceof CacheRequest);\n    toTerminate.forEach((request) => {\n      this._terminateRequest(request,\n                             CacheReturnCode.INCOMPLETE,\n                             CacheReturnSubcode.CACHE_SESSION_DISPOSED);\n    });\n    this._outstandingRequests = [];\n    // Restore original listeners\n    this._session.setEventCBInfo(this._nextSessionEventCallbackInfo);\n    this._session.setMessageCBInfo(this._nextMessageCallbackInfo);\n    // Set _disposed\n    this._disposed = true;\n  }\n\n  /**\n   * Gets the cache session properties.\n   *\n   * @returns {solace.CacheSessionProperties} The properties for the session.\n   * @throws {solace.OperationError} if the CacheSession is disposed.\n   */\n  getProperties() {\n    return this._properties;\n  }\n\n  /**\n   * Issues an asynchronous cache request. The result of the request will be returned via the\n   * listener. Messages returned as a result of issuing the request will be returned to the\n   * application via the {@link solace.MessageRxCBInfo} associated with this\n   * {@link solace.CacheSession}'s {@link solace.Session}\n   *\n   * @param {Number} requestID The application-assigned ID number for the request.\n   * @param {solace.Destination} topic The topic destination for which the cache request will be\n   *    made.\n   * @param {Boolean} subscribe If true, the session will subscribe to the given {Topic}, if it is\n   * not already subscribed, before performing the cache request.\n   * @param {solace.CacheLiveDataAction} liveDataAction The action to perform when the\n   *    {@link solace.CacheSession} receives live data on the given topic.\n   * @param {solace.CacheCBInfo} cbInfo Callback info for the cache request.\n   *\n   * @throws {solace.OperationError} In the following cases:\n   * * If the CacheSession is disposed.\n   *    Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * If one or more parameters were invalid.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}\n   * * If the supplied topic and live data action cannot be combined.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n   * * If the supplied topic or live data action cannot be used given the current outstanding\n   *    requests.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n   */\n  sendCacheRequest(requestID, topic, subscribe, liveDataAction, cbInfo) {\n    if (arguments.length !== 5) {\n      throw new OperationError(`sendCacheRequest() invoked with an illegal argument count of ${\n        arguments.length}`);\n    }\n    if (typeof subscribe !== 'boolean') {\n      throw new OperationError(\n        `Invalid subscribe flag argument, should be a boolean but was ${typeof subscribe}`);\n    }\n    if (typeof requestID !== 'number' || Number.isNaN(requestID)) {\n      throw new OperationError('Invalid requestID', ErrorSubcode.PARAMETER_INVALID_TYPE, null);\n    }\n    if (this._outstandingIDs[requestID]) {\n      throw new OperationError('Request already in progress with this requestID');\n    }\n    if (!(topic instanceof Destination)) {\n      throw new OperationError('Invalid topic', ErrorSubcode.PARAMETER_INVALID_TYPE, (typeof topic));\n    }\n    topic.validate();\n    if (!(liveDataAction === CacheLiveDataAction.FLOW_THRU || liveDataAction ===\n        CacheLiveDataAction.FULFILL || liveDataAction === CacheLiveDataAction.QUEUE)) {\n      throw new OperationError('Invalid live data action', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (topic.isWildcarded() && liveDataAction !== CacheLiveDataAction.FLOW_THRU) {\n      throw new OperationError('Wildcarded topic not supported for this live data action',\n        ErrorSubcode.PARAMETER_CONFLICT);\n    }\n    if (!(cbInfo instanceof CacheCBInfo)) {\n      throw new OperationError('Callback info was not an instance of CacheCBInfo');\n    }\n    if (this._disposed) {\n      CacheSession._notifyCallbackError(cbInfo, requestID, CacheReturnCode.FAIL,\n                                        CacheReturnSubcode.CACHE_SESSION_DISPOSED, topic,\n                                        'Cache request failed: the cache session is disposed.');\n      return;\n    }\n    if (this._session._disposed) {\n      CacheSession._notifyCallbackError(cbInfo, requestID, CacheReturnCode.FAIL,\n                                        CacheReturnSubcode.INVALID_SESSION, topic,\n                                        'Cache request failed: the session is disposed.');\n      return;\n    }\n\n    const request = new CacheRequest(this,\n      CacheRequestType.GET_MSG_REQUEST,\n      requestID,\n      cbInfo,\n      liveDataAction,\n      topic,\n      this._properties.cacheName);\n\n    const matchingRequestKeys = Object.keys(this._outstandingRequests).filter(key =>\n      this._outstandingRequests[key].topic.getName() === topic.getName());\n\n    if (matchingRequestKeys.length) {\n      // Topic name matches mean a conflict unless both requests are FLOW_THRU\n      const conflictKeys = (\n        liveDataAction !== CacheLiveDataAction.FLOW_THRU\n          ? matchingRequestKeys\n          : matchingRequestKeys.filter(k =>\n            this._outstandingRequests[k].liveDataAction !== CacheLiveDataAction.FLOW_THRU));\n      if (conflictKeys.length) {\n        const conflictRequest = this._outstandingRequests[conflictKeys[0]];\n        LOG_WARN(`Existing request ${conflictRequest} conflicts. Rejecting request ${request}`);\n         // Register this request so that it is not dismissed as an orphan.\n        this._registerRequest(request);\n        this._terminateRequest(request,\n                               CacheReturnCode.FAIL,\n                               CacheReturnSubcode.REQUEST_ALREADY_IN_PROGRESS);\n        return;\n      }\n    }\n\n    this._registerRequest(request);\n    request.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                this._properties.timeoutMsec);\n    if (subscribe) {\n      const waitingForSubscribeInfo = new CacheSessionSubscribeInfo(request.correlationID, topic,\n        this);\n      request._subscriptionWaiting = waitingForSubscribeInfo;\n      this._session.subscribe(topic, true, waitingForSubscribeInfo);\n      return;\n    }\n    this._startCacheRequest(request);\n  }\n\n  /**\n   * @param {solace.Session} session The session associated with the request\n   * @param {SessionEvent} sessionEvent The session event\n   * @param {CacheRequest} userObject The user-specified context object\n   * @private\n   */\n  _handleCacheRequestFailed(session, sessionEvent, userObject /*, rfuObject */) {\n    this._terminateRequest(userObject.getRequestID(),\n                           CacheReturnCode.FAIL,\n                           CacheReturnSubcode.ERROR_RESPONSE);\n  }\n\n  /**\n   * @param {CacheRequest} request The new request to register\n   * @private\n   */\n  _registerRequest(request) {\n    this._outstandingRequests[request.correlationID] = request;\n    if (!request.parentRequest) {\n      this._outstandingIDs[request.requestID] = request;\n    }\n  }\n\n  /**\n   * @param {Number} correlationID The ID of an existing request\n   * @returns {CacheRequest} The existing request with the given ID\n   * @private\n   */\n  _getOutstandingRequest(correlationID) {\n    return this._outstandingRequests[correlationID];\n  }\n\n  /**\n   *\n   * @param {CacheRequest} request The request to start\n   * @param {?Number} sessionID Only when returned from a cache instance as part of a\n   * previous message\n   * @param {?Topic} destination Only when required by a cache reply\n   * @param {?Boolean} suppressClusters True when other clusters should be excluded from\n   * the response, as in a request resulting from a \"see other\"\n   * @private\n   */\n  _startCacheRequest(request, sessionID, destination, suppressClusters) {\n    const message = new MessageLib.Message();\n\n    // Prepare message\n    message.setCorrelationId(request.correlationID);\n    if (destination) {\n      message.setDestination(destination);\n    } else {\n      message.setDestination(\n        Topic.createFromName(this._properties.cachePrefix + request.cacheName));\n    }\n    message.setReplyTo(Topic.createFromName(this._session.getSessionProperties().p2pInboxInUse));\n    message.setDeliverToOne(request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST);\n\n    // Prepare stream container\n    const stream = new SDTStreamContainer();\n    stream.addField(SDTFieldType.UINT32, request.cacheMessageType);\n    stream.addField(SDTFieldType.UINT32, CacheRequest.VERSION);\n    stream.addField(SDTFieldType.STRING, request.topic.getName());\n    stream.addField(SDTFieldType.UINT32, CacheRequest.REPLY_SIZE_LIMIT);\n\n    if (typeof sessionID === 'number') {\n      LOG_DEBUG(`Including session ID: ${sessionID}`);\n      stream.addField(SDTFieldType.UINT32, sessionID);\n    }\n\n    stream.addField(SDTFieldType.UINT32, this._properties.maxMessages);\n    stream.addField(SDTFieldType.UINT32, this._properties.maxAgeSec);\n    if (request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST) {\n      stream.addField(SDTFieldType.BOOL,\n                      this._properties.includeOtherClusters && (!suppressClusters));\n    }\n\n    stream.addField(SDTFieldType.BOOL, false); // includeTimestamps, 6.17.1\n    if (request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST) {\n      stream.addField(SDTFieldType.UINT32, Math.round(this._properties.timeoutMsec / 1000));\n    }\n\n    // Load stream container\n    message.setSdtContainer(SDTField.create(SDTFieldType.STREAM, stream));\n    try {\n      LOG_DEBUG(`Sending ${request}`);\n      this._session.send(message);\n\n      if (!request.parentRequest) { // Don't count child requests in CACHE_REQUEST_SENT total\n        this._incStat(StatType.CACHE_REQUEST_SENT);\n      }\n    } catch (e) {\n      LOG_INFO(`Failed to send request: ${e.message}`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE, e);\n    }\n  }\n\n  /**\n   * Increments a stat.\n   * @param  {String} statType The stat to increment\n   * @param  {Number} value    The amount by which to increment the state\n   * @private\n   */\n  _incStat(statType, value) {\n    if (!this._session) {\n      LOG_DEBUG(\"Can't log stat: session is disposed\");\n      return;\n    }\n    if (!this._sessionIF) {\n      LOG_INFO(\"Can't log stat: session statistics not available\");\n      return;\n    }\n    this._sessionIF.incStat(statType, value);\n  }\n\n  /**\n   * Unregisters the given request.\n   * @param  {CacheRequest} request The request to unreguster\n   * @private\n   */\n  _unregisterRequest(request) {\n    delete this._outstandingRequests[request.correlationID];\n    delete this._outstandingIDs[request.requestID];\n  }\n\n  /**\n   * @param {CacheReturnCode} returnCode The return code for this completion\n   * @param {CacheReturnSubcode} subcode The subcode for this completion\n   * @private\n   */\n  _trackCompletionStats(returnCode, subcode) {\n    switch (returnCode) {\n      case CacheReturnCode.OK:\n        this._incStat(StatType.CACHE_REQUEST_OK_RESPONSE);\n        if (subcode === CacheReturnSubcode.LIVE_DATA_FULFILL) {\n          this._incStat(StatType.CACHE_REQUEST_LIVE_DATA_FULFILL);\n        }\n        break;\n      case CacheReturnCode.INCOMPLETE:\n        this._incStat(StatType.CACHE_REQUEST_INCOMPLETE_RESPONSE);\n        break;\n      case CacheReturnCode.FAIL:\n        this._incStat(StatType.CACHE_REQUEST_FAIL_RESPONSE);\n        break;\n      default:\n        throw new Error('Sanity: no return code supplied');\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request to terminate\n   * @param {CacheReturnCode} returnCode The return code for this operation\n   * @param {CacheReturnSubcode} subcode The subcode for this operation\n   * @param {Error} error Any error associated with this operation\n   * @private\n   */\n  _terminateRequest(requestIn, returnCode, subcode, error) {\n    const request = requestIn.getRootRequest();\n    if (!this._outstandingRequests[request.correlationID]) {\n      // Request is unknown or was previously terminated\n      return;\n    }\n    const cbInfo = request.cbInfo;\n    if (!cbInfo) {\n      LOG_WARN(`No callback info provided for ${request}. Cannot notify`);\n      return; // Cannot continue\n    }\n    const callback = cbInfo.getCallback();\n    if (!callback) {\n      LOG_WARN(`No callback provided for ${request}. Cannot notify`);\n      return; // Cannot continue\n    }\n    const topic = request.getTopic();\n    if (!topic) {\n      LOG_WARN(`No topic provided for ${request}`);\n    }\n    request.queuedLiveData.forEach(data => this._sendToNextDelegate(data));\n\n    // Unregister before callback so that the client application can treat the request ID\n    // as \"freed\" and reuse it\n    request.cancel();\n    this._unregisterRequest(request);\n\n    if (!request.liveDataFulfilled) {\n      // All of this has already been done on fulfill.\n      this._trackCompletionStats(returnCode, subcode);\n      CacheSession._notifyCallback(request, returnCode, subcode, topic, error);\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request with a result to decode\n   * @param {CacheGetResult} result The result to decode\n   * @returns {Array.<Message>} The messages contained in the result\n   * @private\n   */\n  static _decodeMessageStream(requestIn, result) {\n    if (!result.messageStream) {\n      return [];\n    }\n\n    LOG_DEBUG('Receiving messages');\n    const messages = [];\n    const request = requestIn;\n    while (result.messageStream.hasNext()) {\n      request.dataReceived = true;\n      const data = result.messageStream.getNext().getValue();\n      const innerMessage = SMFLib.Codec.Decode.decodeCompoundMessage(data, 0);\n      if (!innerMessage) {\n        continue;\n      }\n      const cacheStatus = result.isSuspect\n        ? MessageLib.MessageCacheStatus.SUSPECT\n        : MessageLib.MessageCacheStatus.CACHED;\n      innerMessage._setCacheStatus(cacheStatus);\n      innerMessage._setCacheRequestID(request.requestID);\n      messages.push(innerMessage);\n    }\n    LOG_DEBUG(`${messages.length} cached messages received`);\n    return messages;\n  }\n\n  /**\n   * Closure call context; `this` will be redefined\n   * @param {CacheRequest} cacheRequest The request that timed out\n   * @private\n   */\n  static _handleCacheRequestTimeout(cacheRequest) {\n    const context = cacheRequest.cacheSession;\n    if (!context._getOutstandingRequest(cacheRequest.correlationID)) {\n      LOG_INFO(`Timeout for ${cacheRequest} was not unregistered. Ignoring`);\n      // already completed\n      return;\n    }\n\n    // bug 36404: Cache request timeout is to be interpreted as timeout per session request-reply,\n    // not timeout per cache request-reply.\n    // Implementation: Timeouts on parent requests are cancelled when a child request is spawned.\n    // Timeouts on child requests cause the root request to fail.\n    LOG_INFO(`Request ${cacheRequest} timed out`);\n    context._terminateRequest(cacheRequest.getRootRequest(), CacheReturnCode.INCOMPLETE,\n                              CacheReturnSubcode.REQUEST_TIMEOUT);\n  }\n\n\n  /**\n   * @param {CacheRequest} request The request that is notifying\n   * @param {CacheReturnCode} returnCode The return code for the notification\n   * @param {CacheReturnSubcode} subcode The subcode for the notification\n   * @param {Destination} topic The topic associated with the notification\n   * @param {Error} error Any error associated with the notification\n   * @private\n   */\n  static _notifyCallback(request, returnCode, subcode, topic, error) {\n    const cbInfo = request.cbInfo;\n    const callback = cbInfo.getCallback();\n    callback(request.requestID,\n             new CacheRequestResult(returnCode, subcode, topic, error),\n             cbInfo.getUserObject());\n  }\n\n  /**\n   * @param {solace.CacheCBInfo} cbInfo Callback info for the cache request.\n   * @param {Number} requestID The application-assigned ID number for the request\n   * @param {CacheReturnCode} returnCode The return code for the notification\n   * @param {CacheReturnSubcode} subcode The subcode for the notification\n   * @param {Destination} topic The topic associated with the notification\n   * @param {Error} error Any error associated with the notification\n   * @private\n   */\n  static _notifyCallbackError(cbInfo, requestID, returnCode, subcode, topic, error) {\n    const callback = cbInfo.getCallback();\n    callback(requestID,\n             new CacheRequestResult(returnCode, subcode, topic, error),\n             cbInfo.getUserObject());\n  }\n\n  /**\n   * Validates the cache session properties.\n   * @param {solace.CacheSessionProperties} props The properties to validate\n   * @private\n   */\n  static _validateProps(props) {\n    if ((typeof (props.cacheName) !== 'string')) {\n      throw new OperationError('Invalid parameter type for cacheName', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    // Create from name will throw if the cacheName is invalid.  This performs more checking than\n    // the legacy API did, but I think it is all justified as we shouldn't be able to use anything\n    // that would be rejected here as a cacheName.\n    if (Topic.createFromName(props.cacheName).isWildcarded()) {\n      throw new OperationError(\n        `Invalid cacheName '${props.cacheName}'. The cacheName cannot be wildcarded`,\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.maxAgeSec) !== 'number')) {\n      throw new OperationError('Invalid parameter type for maxAgeSec', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.maxAgeSec < 0) {\n      throw new OperationError('Invalid value for maxAgeSec; must be >= 0', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.maxMessages) !== 'number')) {\n      throw new OperationError('Invalid parameter type for maxMessages', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.maxMessages < 0) {\n      throw new OperationError('Invalid value for maxMessages; must be >= 0', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.timeoutMsec) !== 'number')) {\n      throw new OperationError('Invalid parameter type for timeoutMsec', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.timeoutMsec < 3000) {\n      throw new OperationError('Invalid value for timeoutMsec; must be >= 3000', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  }\n\n}\n\nmodule.exports.CacheSession = CacheSession;\n","const { Stats } = require('./lib/stats.js');\nconst { StatsByMode } = require('./lib/stat-bymode');\nconst { StatType } = require('./lib/stat-types');\n\nmodule.exports = {\n  Stats,\n  StatType,\n  StatsByMode,\n};\n","const { StatType } = require('./stat-types');\n\nmodule.exports = {\n  StatsByMode: {\n    STAT_TX_BYMODE_MSGS: [\n      StatType.TX_DIRECT_MSGS,\n      StatType.TX_PERSISTENT_MSGS,\n      StatType.TX_NONPERSISTENT_MSGS,\n    ],\n    STAT_TX_BYMODE_BYTES: [\n      StatType.TX_DIRECT_BYTES,\n      StatType.TX_PERSISTENT_BYTES,\n      StatType.TX_NONPERSISTENT_BYTES,\n    ],\n    STAT_TX_BYMODE_REDELIVERED: [\n      StatType.TX_DIRECT_MSGS,     // unused placeholder, direct messsages are not redelivered\n      StatType.TX_PERSISTENT_REDELIVERED,\n      StatType.TX_NONPERSISTENT_REDELIVERED,\n    ],\n    STAT_TX_BYMODE_BYTES_REDELIVERED: [\n      StatType.TX_DIRECT_BYTES,     // unused placeholder, direct messsages are not redelivered\n      StatType.TX_PERSISTENT_BYTES_REDELIVERED,\n      StatType.TX_NONPERSISTENT_BYTES_REDELIVERED,\n    ],\n    STAT_RX_BYMODE_MSGS: [\n      StatType.RX_DIRECT_MSGS,\n      StatType.RX_PERSISTENT_MSGS,\n      StatType.RX_NONPERSISTENT_MSGS,\n    ],\n    STAT_RX_BYMODE_BYTES: [\n      StatType.RX_DIRECT_BYTES,\n      StatType.RX_PERSISTENT_BYTES,\n      StatType.RX_NONPERSISTENT_BYTES,\n    ],\n  },\n};\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Statistics for sent/received messages and control operations.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst StatType = {\n\n  // ------- SMF and Direct Messaging\n\n  /**\n   * Count of bytes sent as part of data messages.\n   */\n  TX_TOTAL_DATA_BYTES:            0,\n  /**\n   * Count of data messages sent.\n   */\n  TX_TOTAL_DATA_MSGS:             1,\n  /**\n   * Count of bytes sent as part of direct data messages.\n   */\n  TX_DIRECT_BYTES:                2,\n  /**\n   * Count of direct data messages sent.\n   */\n  TX_DIRECT_MSGS:                 3,\n  /**\n   * Count of bytes sent as part of control messages.\n   */\n  TX_CONTROL_BYTES:               4,\n  /**\n   * Count of control messages sent.\n   */\n  TX_CONTROL_MSGS:                5,\n  /**\n   * Count of request messages sent.\n   */\n  TX_REQUEST_SENT:                6,\n  /**\n   * Count of request timeouts that occurred.\n   */\n  TX_REQUEST_TIMEOUT:             7,\n  /**\n   * Count of bytes received as part of data messages.\n   */\n  RX_TOTAL_DATA_BYTES:            8,\n  /**\n   * Count of data messages received.\n   */\n  RX_TOTAL_DATA_MSGS:             9,\n  /**\n   * Count of bytes received as part of direct data messages.\n   */\n  RX_DIRECT_BYTES:                10,\n  /**\n   * Count of direct data messages received.\n   */\n  RX_DIRECT_MSGS:                 11,\n  /**\n   * Count of bytes received as part of control messages.\n   */\n  RX_CONTROL_BYTES:               12,\n  /**\n   * Count of control messages received.\n   */\n  RX_CONTROL_MSGS:                13,\n  /**\n   * Count discard message indications received on incoming messages.\n   */\n  RX_DISCARD_MSG_INDICATION:      14,\n  /**\n   * Count of reply messaged received.\n   */\n  RX_REPLY_MSG_RECVED:            15,\n  /**\n   * Count of received reply messages that were discarded.\n   */\n  RX_REPLY_MSG_DISCARD:           16,\n  /**\n   * @description\n   * Count of messages discarded due to the presence of an unknown element or\n   * unknown protocol in the SMF header.\n   */\n  RX_DISCARD_SMF_UNKNOWN_ELEMENT: 17,\n\n  // ------- SolCache Session\n\n  /**\n   * @description\n   * Count of cache requests sent. One conceptual request (i.e. one API call)\n   * may involve many requests and replies.\n   */\n  CACHE_REQUEST_SENT:                     18,\n  /**\n   * @description\n   * Count of OK responses to cache requests.\n   */\n  CACHE_REQUEST_OK_RESPONSE:              19,\n  /**\n   * @description\n   * Count of cache requests that returned a failure response.\n   */\n  CACHE_REQUEST_FAIL_RESPONSE:            20,\n  /**\n   * @description\n   * Count of cache replies discarded because a request has been fulfilled.\n   */\n  CACHE_REQUEST_FULFILL_DISCARD_RESPONSE: 21,\n  /**\n   * @description\n   * Count of cached messages delivered to the application.\n   */\n  RX_CACHE_MSG:                           22,\n  /**\n   * @description\n   * Count of cache requests that were incomplete.\n   */\n  CACHE_REQUEST_INCOMPLETE_RESPONSE:      23,\n  /**\n   * @description\n   * The cache session operation completed when live data arrived on the requested topic.\n   */\n  CACHE_REQUEST_LIVE_DATA_FULFILL:        24,\n\n  // ------ Guaranteed Messaging\n\n  /**\n   * Count of bytes sent as part of persistent data messages.\n   */\n  TX_PERSISTENT_BYTES:                25,\n  /**\n   * Count of persistent data messages sent.\n   */\n  TX_PERSISTENT_MSGS:                 26,\n  /**\n   * Count of non-persistent data bytes sent.\n   */\n  TX_NONPERSISTENT_BYTES:             27,\n  /**\n   * Count of non-persistent data messages sent.\n   */\n  TX_NONPERSISTENT_MSGS:              28,\n  /**\n   * The number of bytes redelivered in Persistent messages.\n   */\n  TX_PERSISTENT_BYTES_REDELIVERED:    29,\n  /**\n   * The number of Persistent messages redelivered.\n   */\n  TX_PERSISTENT_REDELIVERED:          30,\n  /**\n   * The number of bytes redelivered in Non-Persistent messages.\n   */\n  TX_NONPERSISTENT_BYTES_REDELIVERED: 31,\n  /**\n   * The number of Non-Persistent messages redelivered.\n   */\n  TX_NONPERSISTENT_REDELIVERED:       32,\n  /**\n   * The number of acknowledgments received.\n   */\n  TX_ACKS_RXED:                       33,\n  /**\n   * The number of times the transmit window closed.\n   */\n  TX_WINDOW_CLOSE:                    34,\n  /**\n   * The number of times the acknowledgment timer expired.\n   */\n  TX_ACK_TIMEOUT:                     35,\n  /**\n   * Count of bytes received as part of persistent data messages.\n   */\n  RX_PERSISTENT_BYTES:                36,\n  /**\n   * Count of persistent data messages received.\n   */\n  RX_PERSISTENT_MSGS:                 37,\n  /**\n   * Count of bytes received as part of non-persistent data messages.\n   */\n  RX_NONPERSISTENT_BYTES:             38,\n  /**\n   * Count of non-persistent data messages received.\n   */\n  RX_NONPERSISTENT_MSGS:              39,\n  /**\n   * Count of acknowledgements sent to the Solace Message Router\n   * for guaranteed messages received by the API.\n   */\n  RX_ACKED:                           40,\n  /**\n   * Count of guaranteed messages discarded for being duplicates.\n   */\n  RX_DISCARD_DUPLICATE:               41,\n  /**\n   * Count of guaranteed messages discarded due to no match message consumer for the message.\n   */\n  RX_DISCARD_NO_MATCHING_CONSUMER:    42,\n  /**\n   * Count of guaranteed messages discarded for being received out of order.\n   */\n  RX_DISCARD_OUT_OF_ORDER:            43,\n};\n\nmodule.exports.StatType = Enum.new(StatType);\n","const { EventEmitter } = require('solclient-events');\nconst { StatType } = require('./stat-types');\n\n/**\n * @private\n */\nclass Stats extends EventEmitter {\n  constructor(parent) {\n    super();\n\n    this._parent = parent;\n    this._statsMap = [];\n    StatType.values.forEach((value) => {\n      this._statsMap[value] = 0;\n    });\n  }\n\n  resetStats() {\n    this.emit('reset');\n    // The stat types are sequential, so .fill(0) would work, but the API design\n    // doesn't really guarantee this so overwriting every existing index is safer.\n    this._statsMap = this._statsMap.map(() => 0);\n  }\n\n  incStat(statType, value = 1) {\n    // should we validate statType?\n    this._statsMap[statType] += value;\n    if (this._parent) {\n      this._parent.incStat(statType, value);\n    }\n  }\n\n  getStat(statType) {\n    return this._statsMap[statType];\n  }\n\n}\n\nmodule.exports.Stats = Stats;\n","const { SMFClient } = require('./lib/smf-client');\nconst { TransportCapabilities } = require('./lib/transport-capabilities');\nconst { TransportError } = require('./lib/transport-error');\nconst { TransportFactory } = require('./lib/transport-factory');\nconst { TransportProtocol } = require('./lib/transport-protocols');\nconst { TransportReturnCode } = require('./lib/transport-return-codes');\nconst { TransportSessionEventCode } = require('./lib/transport-session-event-codes');\nconst { TransportSessionStates } = require('./lib/transport-session-states');\n\n\nmodule.exports.SMFClient = SMFClient;\nmodule.exports.TransportCapabilities = TransportCapabilities;\nmodule.exports.TransportError = TransportError;\nmodule.exports.TransportFactory = TransportFactory;\nmodule.exports.TransportProtocol = TransportProtocol;\nmodule.exports.TransportReturnCode = TransportReturnCode;\nmodule.exports.TransportSessionEventCode = TransportSessionEventCode;\nmodule.exports.TransportSessionStates = TransportSessionStates;\n","class BaseSMFClient {\n  constructor(rxSmfCB, rxMessageErrorCB, session) {\n    this.reset();\n    this._rxSmfCB = rxSmfCB; // callback for parsed msg\n    this._rxMessageErrorCB = rxMessageErrorCB; // invalid UH, etc.\n    this._session = session;\n  }\n\n  reset() {\n    this._correlationCounter = 0;\n  }\n\n  nextCorrelationTag() {\n    // Login uses the max value as a sentinel, so wrap around early\n    if (++this._correlationCounter >= BaseSMFClient.SMF_MAX_CORRELATION) {\n      this._correlationCounter = 1;\n    }\n    return this._correlationCounter;\n  }\n}\n\nBaseSMFClient.SMF_MAX_CORRELATION = 0xFFFFFF;\n\n\nmodule.exports.BaseSMFClient = BaseSMFClient;\n","// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n\nfunction concatFrom(list, from, length) {\n  const buffer = BufferImpl.allocUnsafe(length);\n  let pos = 0;\n  let i;\n  const buf0 = list[0];\n  pos += buf0.copy(buffer, 0, from, buf0.length);\n  for (i = 1; i < list.length && pos < length; i++) {\n    const buf = list[i];\n    pos += buf.copy(buffer, pos, 0, buf.length);\n  }\n  return buffer;\n}\n\n\nfunction readUInt32BEFrag(bufList, listOffsetParam, byteIndexParam) {\n  let listOffset = listOffsetParam;\n  let byteIndex = byteIndexParam;\n  const bytes = []; // the 4 bytes\n  let i = 0;\n  for (i = 0; i < 4; i++) {\n    while (bufList[listOffset].length <= byteIndex) {\n      byteIndex -= bufList[listOffset].length;\n      listOffset++;\n      if (listOffset >= bufList.length) { return null; } // should not happen.\n    }\n    bytes[i] = bufList[listOffset].readUInt8(byteIndex);\n    byteIndex++;\n  }\n  // shift the bytes into a 32 bit number, BE.\n  return (bytes[0] << 24) + (bytes[1] << 16) + (bytes[2] << 8) + bytes[3];\n}\n\n/**\n * Simplified FIFO of buffers.\n * Holds transport buffers without copying, allows 12 byte peeks for header and length detection.\n * For pops either a slice is returned if possible,\n * or a copy if the message spans transport buffers.\n * Pushes are refused when over capacity.\n * @internal\n */\nclass BufferQueue {\n  constructor(maxSize) {\n    let _queue = [];\n    const _maxSize = maxSize;\n    let _size = 0;\n    let _offset = 0;\n\n    /**\n     * Creates a slice (view) of the buffer with the given size. Conceptually.\n     * Since slicing is expensive, it just retruns the raw transport buffer with the offset.\n     * Buffer - offset pair if possible, copy (with zero offset) if beyond first buffer boundary.\n     *\n     *\n     * @param {Number} size Bytes to view\n     * @returns {?Array} Buffer - offset pair if there was enough data to peek, or `null`\n     */\n    this.peekView = function peekView(size) {\n      const result = [];\n      if (_queue.length < 1 || size > _size) { return null; }\n      if (_queue[0].length >= size + _offset) {\n        result[0] = _queue[0];\n        result[1] = _offset;\n      } else {  //over buffer boundary, must copy.\n        result[0] = concatFrom(_queue, _offset, size);\n        result[1] = 0;\n      }\n      return result;\n    };\n\n    this.readUInt8 = function readUInt8(index) {\n      if (index >= _size) { return null; }\n      const oIndex = index + _offset;\n      if (oIndex < _queue[0].length) {\n        return _queue[0].readUInt8(oIndex);\n      } // else\n      let pos = _queue[0].length;\n      let i = 1;\n      while (pos + _queue[i].length <= oIndex) {\n        pos += _queue[i].length;\n        i++;\n      }\n      return _queue[i].readUInt8(oIndex - pos);\n    };\n\n    this.readUInt32BE = function readUInt32BE(index) {\n      if (index + 3 >= _size) { return null; }\n      const oIndex = index + _offset;\n      if (oIndex + 3 < _queue[0].length) {\n        return _queue[0].readUInt32BE(oIndex);\n      } // else\n      if (oIndex < _queue[0].length) {\n        return readUInt32BEFrag(_queue, 0, oIndex);\n      }\n\n      let pos = _queue[0].length;\n      let i = 1;\n      while (pos + _queue[i].length <= oIndex) {\n        pos += _queue[i].length;\n        i++;\n      }\n      if (oIndex - pos + 3 < _queue[i].length) {\n        return _queue[i].readUInt32BE(oIndex - pos);\n      } // else\n      return readUInt32BEFrag(_queue, i, oIndex - pos);\n    };\n\n    /**\n     * Adds a buffer to the queue.\n     * Fails if maxsize is exeeded.\n     *\n     * @param {Buffer} dataIn Source data\n     * @returns {Boolean} `true` if the data fits.\n     */\n    this.put = function put(dataIn) {\n      const buffer = BufferQueue.adaptData(dataIn);\n      const size = buffer.length;\n      if (size === 0) { return true; }\n\n      if (_size + size >= _maxSize) return false;\n\n      _queue.push(buffer);\n      _size += size;\n\n      return true;\n    };\n\n    this.advance = function advance(size) {\n      if (size < 1) {\n        return;\n      }\n      if (size >= _size) {\n        this.reset();\n        return;\n      }\n      let done = 0;\n      while (done < size) {\n        if (_queue[0].length - _offset <= size - done) { // drop first buffer entirely\n          const chunk = _queue[0].length - _offset;\n          _queue.shift();\n          done += chunk;\n          _size -= chunk; // invariants are good.\n          _offset = 0;\n        } else { // cut into first buffer, virtually, with _offset\n          _offset += (size - done);\n          _size -= (size - done);\n          break;\n        }\n      }\n    };\n\n    this.reset = function reset() {\n      _queue = [];\n      _size = 0;\n      _offset = 0;\n    };\n\n    this.remaining = function remaining() {\n      return _size;\n    };\n\n    this.isEmpty = function isEmpty() {\n      return _size === 0;\n    };\n  }\n\n  /**\n   * Adapt incoming data to the format expected by this.put().\n   * @param {*} data The data to adapt.\n   * @returns {Buffer} The adapted data.\n   */\n  static adaptData(data) {\n    if (data instanceof BufferImpl) return data;\n    return BufferImpl.from(data);\n  }\n}\n\nmodule.exports.BufferQueue = BufferQueue;\nmodule.exports.concatFrom = concatFrom;\n","const DebugLib = require('solclient-debug');\nconst SMFLib = require('solclient-smf');\nconst { BaseSMFClient } = require('./base-smf-client');\nconst { BufferQueue } = require('./buffer-queue');\nconst { Convert, Hex } = require('solclient-convert');\nconst { LogFormatter } = require('solclient-log');\n\nconst BufferImpl = require('buffer').Buffer;\n\nconst { stringToUint8Array } = Convert;\nconst { formatHexString } = Hex;\n\nconst SMF_LOST_FRAMING_THRESHOLD = 80000000;\n\nconst { LOG_ERROR } = new LogFormatter('[buffer-smf-client]');\n\nfunction logPeekBuffer(buffer) {\n  const bufPair = buffer.peekView(Math.min(buffer.remaining(), 64));\n  LOG_ERROR(`First 64 bytes (or fewer) of incoming buffer: \\n${\n    DebugLib.Debug.formatDumpBytes(bufPair[0].toString('latin1', bufPair[1]), true, 0)}`);\n}\n\n/**\n * Interact with underlying transport to send and receive SMF messages\n * @private\n */\nclass BufferSMFClient extends BaseSMFClient {\n\n  /**\n   * @constructor\n   * @param {Function} rxSmfCB The callback to notify on SMF binary data received\n   * @param {Function} rxMessageErrorCB The callback to notify on message errors\n   * @param {Session} session The session owning this client\n   */\n  constructor(rxSmfCB, rxMessageErrorCB, session) {\n    super(rxSmfCB, rxMessageErrorCB, session);\n    this._incomingBuffer = new BufferQueue(SMF_LOST_FRAMING_THRESHOLD);\n  }\n\n  reset() {\n    super.reset();\n    // Called from super constructor, so guard this\n    if (this._incomingBuffer) this._incomingBuffer.reset();\n  }\n\n  /**\n   * @param {String} data Incoming data as binary string\n   */\n  rxDataString(data) {\n    this._rxDataCB(BufferImpl.from(stringToUint8Array(data)));\n  }\n\n  /**\n   * @param {ArrayBuffer} data Incoming data\n   */\n  rxDataArrayBuffer(data) {\n    this._rxDataCB(BufferImpl.from(data));\n  }\n\n  /**\n   * @param {Buffer} data Incoming data\n   */\n  rxDataBuffer(data) {\n    this._rxDataCB(data);\n  }\n\n  /**\n   * Invoked by transport session. Handles multiple SMF messages in input, as well as defragmenting\n   * partial SMF messages. The state we keep is in this._incomingBuffer.\n   * @param {Buffer} data The binary data to decode\n   */\n  _rxDataCB(data) {\n    if (this._session) {\n      // each incoming data chunk resets KA counter\n      this._session.resetKeepAliveCounter();\n    }\n    const buffer = this._incomingBuffer;\n    const putSuccess = buffer.put(data);\n    let remaining = buffer.remaining();\n\n    if (!putSuccess) {\n      // 80 megabytes - lost SMF framing: may never complete\n      logPeekBuffer(buffer);\n      this._rxMessageErrorCB(`Buffer overflow (length: ${remaining})`);\n      this._incomingBuffer.reset();\n    }\n\n    while (remaining > 12) {\n      const version = buffer.readUInt8(0) & 0x7;\n      if (version !== 3) {\n        LOG_ERROR(`Invalid smf version in smf header, version=${version}`);\n        // Throw away the buffer and bail out\n        LOG_ERROR(\"BufferSMFClient._rxDataCB(): couldn't decode message due to invalid smf header\");\n        logPeekBuffer(buffer);\n        this._incomingBuffer.reset();\n        this._rxMessageErrorCB('Error parsing incoming SMF - invalid SMF header detected');\n        return;\n      }\n\n      const messageLen = buffer.readUInt32BE(8);\n      if (messageLen > buffer.remaining()) {\n        break; // no full message\n      }\n      const msgBuffer = buffer.peekView(messageLen);\n\n      //const binaryString = messageBuffer.toString('binary');\n      const incomingMsg = SMFLib.Codec.Decode.decodeCompoundMessage(msgBuffer[0], msgBuffer[1]);\n      if (incomingMsg && incomingMsg.smfHeader) {\n        buffer.advance(incomingMsg.smfHeader.messageLength);\n        this._rxSmfCB(incomingMsg); // hand over to core API callback\n      } else {\n        // couldn't decode! Lost SMF framing.\n        // throw away the buffer and bail out\n        const sessionId = this._session ? this._session._sessionId : null;\n        const sessionIdHex = sessionId ? formatHexString(sessionId) : 'N/A';\n        LOG_ERROR(`BufferSMFClient._rxDataCB(): couldn't decode message (sessionId=${sessionIdHex})`);\n        logPeekBuffer(buffer);\n        this._incomingBuffer.reset();\n        this._rxMessageErrorCB('Error parsing incoming SMF');\n        return;\n      }\n      remaining = buffer.remaining();\n    }\n\n    if (remaining) {\n      // We have a partial header, or a valid header and a partial message.\n      // partial message remaining: keep it in incoming buffer\n    } else {\n      // clear incoming buffer\n      this._incomingBuffer.reset();\n    }\n  }\n}\n\nmodule.exports.BufferSMFClient = BufferSMFClient;\n","/* eslint-disable global-require */\nconst { BaseSMFClient } = require('./base-smf-client');\n\n// Got rid of anonymous function that checked browser and set smf-client\n// Now ignoring string-smf-client and setting it straight to buffer-smf-client\n// const SMFClient = require('./buffer-smf-client').BufferSMFClient;\n\nconst SMFClient = (() => {\n  if (typeof navigator !== 'undefined') {\n      /* eslint-env browser */\n    if (navigator.appVersion.indexOf('MSIE 9.') !== -1 ||\n        navigator.appVersion.indexOf('Trident/') !== -1) {\n        // Avoid the buffer-based version for IE9, 10, and 11, but not Edge.\n      return require('./buffer-smf-client').BufferSMFClient;\n    }\n  }\n  /* eslint-env shared-browser-node */\n  return require('./buffer-smf-client').BufferSMFClient;\n})();\n\nSMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG = BaseSMFClient.SMF_MAX_CORRELATION;\n\nmodule.exports.SMFClient = SMFClient;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { TransportReturnCode } = require('./transport-return-codes');\n\n// Stubs don't use this\n/* eslint-disable class-methods-use-this */\n// Stubs declare all params\n/* eslint-disable no-unused-vars */\n\n/**\n *\n * Base class for various transports\n * @private\n */\nclass TransportBase {\n  /**\n   * @constructor\n   * @param {URL} url The URL to connect to\n   * @param {function} eventCB The callback to notify on events\n   * @param {SMFClient} client The SMF client to notify on data\n   * @param {Object} transportProps Additional properties to assign to the transport\n   * @param {?Object} [interceptor] The transport interceptor to install\n   */\n  constructor(url, eventCB, client, transportProps, interceptor = null) {\n    this._url = url;\n    this._ssl = TransportBase.useSsl(url);\n    this._client = client;\n    this._eventCB = eventCB;\n    this._props = transportProps;\n    this.setInterceptor(interceptor);\n  }\n\n  /**\n   * Establish underlying transport.\n   * Returns transport return code, to be overridden in subclass\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() { return TransportReturnCode.OK; }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code, to be overridden in subclass\n   * @param {Boolean} immediate Destroy gracefully if false.\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(immediate, msg, subcode) { return TransportReturnCode.OK; }\n\n  flush(callback) {\n    callback();\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Send encoded SMF message\n   * Returns transport return code, to be overridden in subclass\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) { return TransportReturnCode.OK; }\n\n  /**\n   * @returns {TransportProtocol} Return transport protocol in use\n   */\n  getTransportProtocol() {\n    return this._props.transportProtocol;\n  }\n\n  /**\n   * @returns {?String} Return transport session information such as sessionId\n   */\n  getInfoStr() { return null; }\n\n  /**\n   * @returns {TransportClientStats} transport statistics\n   */\n  getClientStats() { return null; }\n\n  /**\n   * Check whether or not the transport can be downgraded to the next protocol.\n   * It is possible to downgrade the transport, the existing transport is destroyed and\n   * the new transport connection initiated.\n   * @param {String} msg The message associated with this operation\n   * @param {ErrorSubcode} subcode The subcode associated with this operation\n   * @returns {Boolean} Return true if downgrade is allowed and has been initiated; false otherwise\n   */\n  beginDowngrade(msg, subcode) { return false; }\n\n  /**\n   * Sets the interceptor for this transport. This object has the chance\n   * to intervene before bytes are sent or received.\n   * @param {Object} [interceptor] If set, the interceptor is inserted into the\n   *\n   * @private\n   */\n  setInterceptor(interceptor) {\n    if (this._interceptor) {\n      // Reset original callbacks\n      if (this._interceptor.removed) this._interceptor.removed(this);\n    }\n    this._interceptor = interceptor;\n    if (interceptor) {\n      if (interceptor.installed) interceptor.installed(this);\n    }\n  }\n\n  toString() {\n    return `${this.getTransportProtocol()}${this._ssl ? ' (SSL)' : ''}`;\n  }\n\n  /**\n   * @param {String} url The URL to check\n   * @returns {Boolean} `true` if the URL requires SSL; `false` otherwise\n   * @static\n   */\n  static useSsl(url) {\n    const urlParts = (url || '').split('://');\n    if (urlParts.length === 0 || TransportBase.validSchemes.indexOf(urlParts[0]) < 0) {\n      throw new OperationError(`Invalid url \"${url}\": Only [${\n                               TransportBase.validSchemes.join(', ')}] URL schemes are supported`,\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n\n    const useSSL = (urlParts[0] === 'https' || urlParts[0] === 'wss' || urlParts[0] === 'tcps');\n    return useSSL;\n  }\n\n}\n\n/**\n * @type {Array.<String>}\n */\nTransportBase.validSchemes = ['http', 'https', 'ws', 'wss', 'tcp', 'tcps'];\n\nmodule.exports.TransportBase = TransportBase;\n\n","const { WebTransportCapabilities } = require('./web');\n\nconst TransportCapabilities = {\n  web: WebTransportCapabilities,\n};\n\nmodule.exports.TransportCapabilities = TransportCapabilities;\n","/**\n * @private\n * @constructor\n */\nclass TransportClientStats {\n  constructor() {\n    this.bytesWritten = 0;\n    this.msgWritten = 0;\n  }\n}\n\nmodule.exports.TransportClientStats = TransportClientStats;\n","const { SolaceError } = require('solclient-error');\n\n/**\n * @classdesc\n * An error thrown when an error occurs on the transport session.\n * <p>\n * Applications are not expected to instantiate this type.\n *\n * @memberof solace\n * @private\n */\nclass TransportError extends SolaceError {\n  /**\n   * Creates an instance of TransportError.\n   * @constructor\n   * @param {String} message The message associated with this error\n   * @param {ErrorSubcode} subcode The subcode for this error\n   * @private\n   */\n  constructor(message, subcode) {\n    super('TransportError', message);\n    this.subcode = subcode;\n  }\n\n  toString() {\n    return `${super.toString()}, subcode=${this.subcode}`;\n  }\n}\n\nmodule.exports.TransportError = TransportError;\n","const { LOG_TRACE } = require('solclient-log');\nconst { TcpRawTransport, CompressedTransport, TlsOnlyTransport, TcpTlsTransport } = BUILD_ENV.TARGET_NODE ? require('./tcp') : {};\nconst { WebTransport } = require('./web');\n\nconst TransportFactory = {\n  createTransport(host, eventCB, client, props, getId) {\n    const url = host;\n    Object.assign(props, {\n      connectTimeoutInMsecs: 100000,\n    });\n    // TCP transport is dictated by the URL (tcp:// or tcps://)\n    // It is unaffected by the transportProtocol config parameter.\n    if (TcpRawTransport && url.trim().startsWith('tcp')) {\n      if (!url.trim().startsWith('tcps')) {\n        if (props.compressionLevel === 0) {\n          LOG_TRACE('createTransport raw tcp');\n          return new TcpRawTransport(url, eventCB, client, props);\n        } // else { //compressed plaintext right off the bat.\n        LOG_TRACE('createTransport compressed plaintex.');\n        const compressingLayer = new CompressedTransport(eventCB, client, props);\n        const plaintextTransport =\n          new TcpRawTransport(url,\n                              compressingLayer.eventCB.bind(compressingLayer),\n                              compressingLayer, props);\n        compressingLayer.setClientStats(plaintextTransport.getClientStats());\n        plaintextTransport.setClientStats(null);\n        compressingLayer.setUnderlyingTransport(plaintextTransport);\n        return compressingLayer;\n      } //else { //tcps\n      if (props.sslConnectionDowngradeTo !== 'PLAIN_TEXT') { //no downgrade\n        LOG_TRACE('createTransport monolithic tls');\n        return new TcpTlsTransport(url, eventCB, client, props);\n      } //else { // Composite TLS transport anticipating downgrade.\n      LOG_TRACE('createTransport composite tls (anticipating downgrade)');\n      // passing URL for SNI.\n      const tlsLayer = new TlsOnlyTransport(url, eventCB, client, props);\n      const plaintextTransport =\n        new TcpRawTransport(url,\n                            tlsLayer.eventCB.bind(tlsLayer),\n                            tlsLayer, props);\n      tlsLayer.setClientStats(plaintextTransport.getClientStats());\n      plaintextTransport.setClientStats(null);\n      tlsLayer.setUnderlyingTransport(plaintextTransport);\n      return tlsLayer;\n    }\n    LOG_TRACE('createTransport WebTransport');\n    return new WebTransport(url, eventCB, client, props, getId);\n  },\n\n  startCompression(uncompressedTransport) {\n    const eventCB = uncompressedTransport._eventCB;\n    const client = uncompressedTransport._client;\n    const props = uncompressedTransport._props;\n\n    const compressingLayer = new CompressedTransport(eventCB, client, props);\n    uncompressedTransport.rehome(compressingLayer.eventCB.bind(compressingLayer),\n                                 compressingLayer);\n    compressingLayer.setClientStats(uncompressedTransport.getClientStats());\n    uncompressedTransport.setClientStats(null);\n    compressingLayer.setUnderlyingTransport(uncompressedTransport);\n    compressingLayer.connect();\n    return compressingLayer;\n  },\n\n  severTls(encryptedTransport, compress, callback) {\n    if (!compress) {\n      encryptedTransport.tlsShutdown(callback);\n    } else {\n      const precallback = plaintextTransport => callback(this.startCompression(plaintextTransport));\n      //encryptedTransport.tlsShutdown(precallback.bind(this));\n      encryptedTransport.tlsShutdown(precallback);\n    }\n  },\n};\n\nmodule.exports.TransportFactory = TransportFactory;\n","const WebTransportsLib = require('./web');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_TRACE } = require('solclient-log');\nconst { TransportBase } = require('./transport-base');\nconst { TransportProtocol } = require('./transport-protocols');\n\nconst { lazyValue } = Lazy;\n\n// Define transportProtocol to transport mapping\nconst lutTransportProtocols = lazyValue(() => {\n  const protocols = {\n    [TransportProtocol.HTTP_BASE64]:           WebTransportsLib.StateBase64,\n    [TransportProtocol.HTTP_BINARY]:           WebTransportsLib.StateBinary,\n    [TransportProtocol.HTTP_BINARY_STREAMING]: WebTransportsLib.StateStreamingAndBinary,\n    [TransportProtocol.WS_BINARY]:             WebTransportsLib.StateWebSocketBinary,\n  };\n  return protocols;\n});\n\n/**\n * @classdesc\n * Handles web transport selection and downgrade without creating the actual transport\n * session object\n * @memberof solace\n * @private\n */\nclass TransportProtocolHandler {\n  constructor(url, webTransportProtocolList) {\n    const useSSL = TransportBase.useSsl(url);\n    let transport = null;\n    let downgradeTransport = null;\n    webTransportProtocolList.slice().reverse().forEach((el) => {\n      const TransportConstructor = lutTransportProtocols.value[el];\n      transport = new TransportConstructor(useSSL, this.switchState.bind(this), downgradeTransport);\n      downgradeTransport = transport;\n    });\n    this._transport = transport;\n    this._transport.onEnter();\n  }\n\n  getTransportProtocol() {\n    return this._transport.getTransportProtocol();\n  }\n\n  completeDowngrade(err) {\n    return this._transport.completeDowngrade(err);\n  }\n\n  canCompleteDowngrade() {\n    return (this._transport.getNextState() !== null);\n  }\n\n  toString() {\n    return this._transport.toString();\n  }\n\n  switchState(newState, reason) {\n    LOG_TRACE(`Switching ${this._transport} => ${newState} (${reason})`);\n    this._transport = newState;\n    newState.onEnter();\n  }\n}\n\nmodule.exports.TransportProtocolHandler = TransportProtocolHandler;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Connection scheme types referenced by {@link solace.SessionProperties#transportProtocol},\n * {@link solace.SessionProperties#webTransportProtocolList} (browser only), and\n * {@link solace.SessionProperties#transportProtocolInUse}.\n *\n * @target browser\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst TransportProtocol = {\n\n  /**\n   * A COMET model that uses base64 payload encoding. HTTP responses have a defined Content-Length.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BASE64: 'HTTP_BASE64',\n\n  /**\n   * A COMET model that uses binary payload encoding. HTTP responses have a defined Content-Length.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BINARY: 'HTTP_BINARY',\n\n  /**\n   * A COMET model that uses binary payload encoding. HTTP responses use Chunked Transfer-Encoding\n   * to stream data from the Solace Message Router to the client without needing to terminate the\n   * HTTP response.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BINARY_STREAMING: 'HTTP_BINARY_STREAMING',\n\n  /**\n   * A WebSocket communication channel uses binary payload encoding and provides full-duplex\n   * communication between the client and the Solace Message Router over a single TCP connection.\n   *\n   * This is the preferred protocol to use if all networking infrastructure betweed the application\n   * and the Solace Message router support WebSockets. If this is not the case, it may be necessary\n   * to use one of the HTTP protocols that use the COMET model of messaging.\n   *\n   * This transport protocol supports Guaranteed Messaging.\n   */\n  WS_BINARY: 'WS_BINARY',\n\n};\n\nmodule.exports.TransportProtocol = Enum.new(TransportProtocol);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst TransportReturnCode = {\n  OK:                          0,\n  FAIL:                        1,\n  NO_SPACE:                    2,\n  DATA_DECODE_ERROR:           3,\n  INVALID_STATE_FOR_OPERATION: 4,\n  CONNECTION_ERROR:            5,\n};\n\nmodule.exports.TransportReturnCode = Enum.new(TransportReturnCode);\n\n/* eslint-disable */\n// Manually demangle these names; bug 70031\nmodule.exports.TransportReturnCode._setCanonical({\n  'OK':                          TransportReturnCode.OK,\n  'FAIL':                        TransportReturnCode.FAIL,\n  'NO_SPACE':                    TransportReturnCode.NO_SPACE,\n  'DATA_DECODE_ERROR':           TransportReturnCode.DATA_DECODE_ERROR,\n  'INVALID_STATE_FOR_OPERATION': TransportReturnCode.INVALID_STATE_FOR_OPERATION,\n  'CONNECTION_ERROR':           TransportReturnCode.CONNECTION_ERROR\n});\n/* eslint-enable */\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Defines the possible TransportSessionEvent codes.\n * @private\n * @enum {number}\n */\nconst TransportSessionEventCode = {\n  // Raised when TransportSession is up and ready to send/receive data\n  UP_NOTICE:           1,\n  // Raised if the session is destroyed\n  DESTROYED_NOTICE:    2,\n  // Raised when the send queue had reached its maximum, but now has space again\n  CAN_ACCEPT_DATA:     4,\n  // Raised when there is a decode error on received data.  The app should destroy the session\n  DATA_DECODE_ERROR:   5,\n  // Raised when there is a decode error on received data.  The app should destroy the session\n  PARSE_FAILURE:       6,\n  // Raised when the connection times out. The app should attempt downgrade if available.\n  CONNECT_TIMEOUT:     7,\n  // There was an error sending a message on an etablished transport\n  SEND_ERROR:          8,\n  // The requested downgrade was rejected.\n  DOWNGRADE_FAILED:    10,\n  // The requested downgrade completed.\n  DOWNGRADE_SUCCEEDED: 11,\n};\n\nmodule.exports.TransportSessionEventCode = Enum.new(TransportSessionEventCode);\n","const { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { TransportSessionEventCode } = require('./transport-session-event-codes');\n\nconst { formatHexString } = Hex;\n\n/**\n * @classdesc\n * Defines a Transport Session Event\n *\n * @private\n */\nclass TransportSessionEvent {\n\n  /**\n   * @constructor\n   * @param {Object} tsEventCode The {@link TransportSessionEventCode} associated with this event\n   * @param {String} infoStr An informational string\n   * @param {?Number} responseCode The response code from the router, if any\n   * @param {ErrorSubcode} subcode The {@link ErrorSubcode} associated with this event\n   * @param {Number} sessionId The session ID associated with this event\n   *\n   */\n  constructor(tsEventCode, infoStr, responseCode, subcode, sessionId) {\n    this._transportEventCode = tsEventCode;\n    this._infoStr = infoStr;\n    this._responseCode = responseCode;\n    this._errorSubcode = subcode;\n    this._sid = sessionId;\n  }\n\n  // TransportSessionEvent functions\n\n  getTransportEventCode() {\n    return this._transportEventCode;\n  }\n\n  get transportEventCode() {\n    return this._transportEventCode;\n  }\n\n  getInfoStr() {\n    return this.infoStr;\n  }\n\n  get infoStr() {\n    return this._infoStr;\n  }\n\n  getResponseCode() {\n    return this.responseCode;\n  }\n\n  get responseCode() {\n    return this._responseCode;\n  }\n\n  getSubcode() {\n    return this.errorSubcode;\n  }\n\n  get errorSubcode() {\n    return this._errorSubcode;\n  }\n\n  getSessionId() {\n    return this.sessionId;\n  }\n\n  get sessionId() {\n    return this._sid;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'transportEventCode': TransportSessionEventCode.describe(this.transportEventCode),\n      'infoStr':            this.infoStr,\n      'responseCode':       this.responseCode,\n      'errorSubcode':       ErrorSubcode.describe(this.errorSubcode),\n      'sid':                this.sid && formatHexString(this.sid) || 'N/A',\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n}\n\nmodule.exports.TransportSessionEvent = TransportSessionEvent;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Transport session states, used by WebSocketTransportSession and HTTPTransportSession\n * @enum {number}\n * @private\n */\nconst TransportSessionState = {\n  DOWN:                0,\n  WAITING_FOR_CREATE:  1,\n  SESSION_UP:          2,\n  WAITING_FOR_DESTROY: 4,\n  CONNECTION_FAILED:   5,\n};\n\nmodule.exports.TransportSessionState = Enum.new(TransportSessionState);\n","const {\n  LOG_INFO,\n  LOG_WARN,\n} = require('solclient-log');\nconst { Process } = require('solclient-util');\n\n/**\n * @classdesc\n * Base class for transports\n * @memberof solace\n * @private\n */\nclass TSHState {\n  /**\n   * @constructor\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {TransportProtocol} tpProtocol The protocol to use for this state\n   * @param {Function} exitCallback The callback to notify on exit\n   * @param {?TSHState} nextState The TSH state to use on downgrade\n   */\n  constructor(useSsl, tpProtocol, exitCallback, nextState) {\n    this._ssl = !!useSsl;\n    this._transportProtocol = tpProtocol;\n    this._exitCallback = exitCallback;\n    this._nextState = nextState;\n    this._unsupportedRuntimeMessage =\n      `${this._transportProtocol} not supported by this runtime: ${Process.userAgent}`;\n  }\n\n  getNextState() {\n    return this._nextState;\n  }\n\n  setNextState(nextState) {\n    this._nextState = nextState;\n  }\n\n  getTransportProtocol() {\n    return this._transportProtocol;\n  }\n\n  getUseSsl() {\n    return this._ssl;\n  }\n\n  // Override me\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return true;\n  }\n\n  onEnter() {\n    if (!this.validateLegal()) {\n      if (this._nextState && this._exitCallback) {\n        this._exitCallback(this._nextState, this._unsupportedRuntimeMessage);\n      } else {\n        LOG_WARN(`${this._unsupportedRuntimeMessage}, no next state.`);\n      }\n    }\n  }\n\n  completeDowngrade(err) {\n    if (this._nextState && this._exitCallback) {\n      LOG_INFO(`Connect failed (${err}), try next state.`);\n      this._exitCallback(this._nextState, 'Connect failed');\n      return true;\n    }\n    LOG_WARN(`Connect failed (${err}), no next state.`);\n    return false;\n  }\n\n  toString() {\n    return this._transportProtocol + (this._ssl ? ' (SSL)' : '');\n  }\n\n}\n\nmodule.exports.TSHState = TSHState;\n","const HTTPLib = require('./http');\nconst { StateBase64 } = require('./state-base64');\nconst { StateBinary } = require('./state-binary');\nconst { StateStreamingAndBinary } = require('./state-streaming-and-binary');\nconst { StateWebSocketBinary } = require('./state-websocket-binary');\nconst { WebTransport } = require('./web-transport');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\nconst { HTTPConnection, HTTPTransportSession } = HTTPLib;\n\nmodule.exports.HTTPConnection = HTTPConnection;\nmodule.exports.HTTPTransportSession = HTTPTransportSession;\nmodule.exports.StateBase64 = StateBase64;\nmodule.exports.StateBinary = StateBinary;\nmodule.exports.StateStreamingAndBinary = StateStreamingAndBinary;\nmodule.exports.StateWebSocketBinary = StateWebSocketBinary;\nmodule.exports.WebTransport = WebTransport;\nmodule.exports.WebTransportCapabilities = WebTransportCapabilities;\n","const { HTTPConnection } = require('./http-connection');\nconst { HTTPTransportSession } = require('./http-transport-session');\n\nif (BUILD_ENV.TARGET_BROWSER) {\n  module.exports.HTTPConnection = HTTPConnection;\n  module.exports.HTTPTransportSession = HTTPTransportSession;\n}\n","const DebugLib = require('solclient-debug');\nconst {\n  Convert,\n  Base64,\n} = require('solclient-convert');\nconst {\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n  LOG_ERROR,\n} = require('solclient-log');\nconst {\n  sendXhrBinary,\n  sendXhrText,\n} = require('./send-xhr');\nconst { StringBuffer, TimingBucket } = require('solclient-util');\nconst { TransportReturnCode } = require('../../transport-return-codes');\nconst { XHRFactory } = require('./xhr-factory');\n\nconst { arrayBufferToString } = Convert;\n\nconst SOL_CONNECTION_DEBUG = false;\n\n/**\n * A URI starting with a \"/\" is a \"path-absolute\" URI, and those aren't\n * allowed to have a query component (starting with \"?\").\n *\n * If an origin isn't defined in the url, tack on the one from the page.\n *\n * @param {URL} url The URL to connect to\n * @returns {URL} Adjusted URL if incoming URL was relative\n * @private\n */\nfunction prependOrigin(url) {\n  if (!url.match(/^(http|ws)(s?):/i) && window.location && window.location.origin) {\n    return window.location.origin + ((url.charAt(0) !== '/') ? '/' : '') + url;\n  }\n  return url;\n}\n\nfunction getTs() {\n  return new Date().getTime();\n}\n\nclass Stats {\n  constructor() {\n    this.WaitedToken = new TimingBucket('WaitedToken', 100);\n    this.HadToken = new TimingBucket('HadToken', 100);\n    this.ReturnedToken = new TimingBucket('ReturnedToken', 100);\n  }\n  toString() {\n    let s = '';\n    [this.WaitedToken, this.HadToken, this.ReturnedToken].forEach((b) => {\n      if (b && b.bucketCount() > 0) {\n        s += `${b.name} >> ${b}\\n`;\n      }\n    });\n    return s;\n  }\n}\n\n/**\n * @classdesc\n * This class contains all state for a single HTTP connection (XHR).\n *\n * @private\n */\nclass HTTPConnection {\n  constructor(url, base64Enc, streamProgressEvents, rxDataCb,\n              connectionErrorCb, contentType, connectionClose) {\n    this.Options = {\n      url: prependOrigin(url),\n      contentType,\n      base64Enc,\n      streamProgressEvents,\n      connectionClose,\n    };\n\n    this._streamProgressBytes = 0;\n    this._xhr = null;\n    this._rxDataCb = rxDataCb;\n    this._connErrorCb = connectionErrorCb;\n    this._reqActive = false;\n    this._REQCOUNTER = 0;\n    this._REQBASE = Math.floor(Math.random() * 1000);\n\n    this._xhr = XHRFactory.create();\n    // older browser ie9\n    this._handleAbortedReq = !HTTPConnection.browserSupportsXhrBinary();\n\n    this.stats = new Stats();\n  }\n\n  recStat(s) {\n    if (!SOL_CONNECTION_DEBUG) {\n      return;\n    }\n    const stats = this.stats;\n    if (s === 'GotToken') {\n      stats.LastGotToken = getTs();\n      if (stats.LastSendMsg) {\n        const waitedTok = stats.LastGotToken - stats.LastSendMsg;\n        stats.WaitedToken.log(waitedTok);\n        if (waitedTok > 100) {\n          LOG_WARN(`Abnormally long waitToken, last request: ${this._REQBASE}_${this._REQCOUNTER}`);\n        }\n      }\n    }\n    if (s === 'SendMsg') {\n      stats.LastSendMsg = getTs();\n      const hadToken = stats.LastSendMsg - stats.LastGotToken;\n      stats.HadToken.log(hadToken);\n    }\n    if (s === 'GotData') {\n      stats.LastGotData = getTs();\n    }\n    if (s === 'ReturnToken') {\n      stats.LastReturnToken = getTs();\n      if (stats.LastGotData) {\n        const returnedToken = stats.LastReturnToken - stats.LastGotData;\n        stats.ReturnedToken.log(returnedToken);\n      }\n    }\n  }\n\n  /*\n   * Send data over the connection - this requires a send token\n   */\n  send(data, attempt = 0, maxRetry = 1) {\n    if (attempt > 0) {\n      this._xhr.abort();\n      this._xhr = XHRFactory.create();\n    }\n    this._xhr.open('POST', this.Options.url, true);\n\n    this._streamProgressBytes = 0;\n    // We pass the write data to the CB so we can retry when it mysteriously fails.\n    this._xhr.onreadystatechange = () => this.xhrStateChange(data, attempt, maxRetry);\n\n    this._reqActive = true;\n\n    if (SOL_CONNECTION_DEBUG) {\n      this._REQCOUNTER++;\n      this._xhr.setRequestHeader('sol-request-track', `${this._REQBASE}_${this._REQCOUNTER}`);\n    }\n    if (this.Options.base64Enc) {\n      sendXhrText(this._xhr, data, this.Options.contentType, this.Options.connectionClose);\n    } else {\n      sendXhrBinary(this._xhr, data, this.Options.contentType, this.Options.connectionClose);\n    }\n    this.recStat('SendMsg');\n  }\n\n\n  // XmlHTTPRequest Callback\n  xhrStateChange(sentdata, attempt, maxRetry) {\n    const readyState = this._xhr.readyState;\n    const RS_LOADING = this._xhr.LOADING;\n    const RS_DONE = this._xhr.DONE;\n\n    if (!((this.Options.streamProgressEvents && readyState === RS_LOADING)\n          || readyState === RS_DONE)) {\n      // we proceed with notifications if we're LOADING and we requested streaming events,\n      // or we're DONE.\n      return;\n    }\n\n    if (!this._reqActive) {\n          // request aborted, DO NOT propagate event\n      return;\n    }\n\n    let status = null;\n    if (this._handleAbortedReq) {\n      // To avoid the following IE9 error when request is aborted by server or client and\n      // application tries to access any property in the XHR other than readyState whose value is\n      // 4 (XMLHTTPRequest.DONE):\n      // - The data necessary to complete this operation is not yet available\n      // See https://groups.google.com/forum/#!topic/websync/ysBEvtvMyb0 for details\n      // _requestActive is used to handle client initiated abort, but it does not handle\n      // the case when the request is aborted on the server side or proxy server\n      try {\n        status = this._xhr.status;\n      } catch (e) {\n        LOG_INFO(`Error trying to access status in XHR due to request aborted: ${e.message}`);\n        return;\n      }\n    } else {\n      status = this._xhr.status;\n    }\n\n    if (status === 200 || status === 304) {\n      // Success status code\n      let data = null;\n      if (this._xhr.responseType && this._xhr.responseType === 'arraybuffer') {\n        data = arrayBufferToString(this._xhr.response);\n      } else {\n        data = this._xhr.responseText;\n      }\n      data = data.substring(this._streamProgressBytes, data.length);\n      this._streamProgressBytes += data.length;\n\n      if (data.length === 0 && readyState === RS_LOADING) {\n        // we are streaming LOADING events but have no data\n        return;\n      }\n\n      if (this.Options.base64Enc) {\n        try {\n          data = Base64.decode(data);\n        } catch (e) {\n          // Failed the decode - call the error callback\n          LOG_ERROR(`Data decode error on: ${data}`);\n          LOG_ERROR(`Data decode error is: ${e.message}`);\n          this._rxDataCb(TransportReturnCode.DATA_DECODE_ERROR, data);\n          return;\n        }\n      } else {\n        // take lower-8 bits\n        const decodedData = [];\n        const dataLength = data.length;\n        for (let i = 0; i < dataLength; i++) {\n          decodedData.push(String.fromCharCode(data.charCodeAt(i) & 0xFF));\n        }\n        data = decodedData.join('');\n      }\n      if (readyState === RS_DONE) {\n        // MUST do this BEFORE the callback invocation, because the callback can trigger a new send.\n        this._reqActive = false;\n      }\n      this._rxDataCb(TransportReturnCode.OK, data);\n      if (readyState === RS_DONE && data.length > 0) {\n        this._rxDataCb(TransportReturnCode.OK, ''); // indicate end of stream\n      }\n\n      return;\n    }\n\n    // Failure status code.\n    const statusText = this._xhr.statusText;\n    let responseText = '';\n    if (this._xhr.responseType && this._xhr.responseType === 'arraybuffer') {\n      responseText = arrayBufferToString(this._xhr.response);\n    } else {\n      responseText = this._xhr.responseText || '';\n    }\n\n    const responseTextLen = responseText.length;\n    const requestUrl = this.Options.url;\n    const sentdataLen = sentdata ? sentdata.length : 0;\n    const { formatDumpBytes } = DebugLib.Debug;\n    const responseTextDump = formatDumpBytes(\n      responseText.substr(0, Math.min(responseTextLen, 64)), true, 0);\n    const sentTextDump = formatDumpBytes(\n      (sentdata || '').substr(0, Math.min(sentdataLen, 256)), true, 0);\n    if (BUILD_ENV.MODE_DEBUG) {\n      const stmt = new StringBuffer(\n        `Http request failed.  url=${requestUrl}, status=${status}, statusText=${statusText}, `,\n        `responseText length=${responseTextLen}, `,\n        'responseText (first 64 bytes or fewer)=\\n',\n        `${responseTextDump}, `,\n        `XHR errorCode=${this._xhr._error ? this._xhr._error.code : ''}, `,\n        `attempt=${attempt}, reqActive=${this._reqActive}, readyState=${readyState}, `,\n        `sent data length=${sentdataLen}, `,\n        'sent data (first 256 bytes or fewer)=\\n',\n        `${sentTextDump}`).toString();\n      LOG_DEBUG(stmt);\n    }\n\n    const nextMaxRetry = maxRetry;\n    if (this._reqActive\n          && status !== 400\n          && responseText.length === 0\n          && (attempt === 0 || attempt < nextMaxRetry)) {\n      LOG_INFO(`XHR failed while request active, will retry send, retry=${attempt + 1}`);\n        // RETRY (could be a transient browser connection problem)\n      this.send(sentdata, attempt + 1, nextMaxRetry);\n    } else {\n      this._reqActive = false;\n      this._connErrorCb(\n          status,\n          new StringBuffer(\n            `HTTP request failed(status=${status} statusText=${statusText}, `,\n            `responseText length=${responseTextLen}, responseText[0..64]=\\n`,\n            responseTextDump,\n            `XHR errorCode=${this._xhr._error ? this._xhr._error.code : ''})`).toString());\n    }\n  }\n\n  isUsingBase64() {\n    return this.Options.base64Enc;\n  }\n\n  // This function will abort the current xhr request if it is active\n  abort() {\n      // mark request as inactive, so we won't process statechange events\n    this._reqActive = false;\n    if (this._xhr && this._xhr.abort) {\n      this._xhr.abort();\n    }\n  }\n\n  /**\n   * Check if we can try binary XHR on this browser.\n   * @returns {Boolean} `true` if XHR binary should work; `false` otherwise\n   * @static\n   */\n  static browserSupportsXhrBinary() {\n    return sendXhrBinary !== sendXhrText;\n  }\n\n  /**\n   * Check if browser supports streaming responses (progressive reading of XHR).\n   * @returns {Boolean} `true` if feature was detected, `false` otherwise\n   * @static\n   */\n  static browserSupportsStreamingResponse() {\n    const xhr = XHRFactory.create();\n    // A conforming XHR2 implementation must include progress events.\n    // Can we assume that the event property will be null instead of undefined?\n    // A conforming XHR2 implementation must also include withCredentials.\n    const check = xhr && xhr.onprogress === null; // xhr.withCredentials === false;\n    LOG_INFO(`http browserStreamingCheck - if XMLHTTPRequest supported and XMLHTTPRequest support onprogress: ${check}`);\n    return check;\n  }\n}\n\nmodule.exports.HTTPConnection = HTTPConnection;\n","const DebugLib = require('solclient-debug');\nconst SMFLib = require('solclient-smf');\nconst { Check } = require('solclient-validate');\nconst { Convert, Hex } = require('solclient-convert');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { HTTPConnection } = require('./http-connection');\nconst { LogFormatter } = require('solclient-log');\nconst { SMFClient } = require('../../smf-client');\nconst { TransportError } = require('../../transport-error');\nconst { TransportProtocol } = require('../../transport-protocols');\nconst { TransportReturnCode } = require('../../transport-return-codes');\nconst { TransportSessionEvent } = require('../../transport-session-event');\nconst { TransportSessionEventCode } = require('../../transport-session-event-codes');\nconst { TransportSessionState } = require('../../transport-session-states');\nconst { WebTransportSessionBase } = require('../web-transport-session-base');\n\nconst { int32ToStr, strToByteArray, strToHexArray } = Convert;\nconst { formatHexString } = Hex;\n\nconst {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_ERROR,\n  LOG_INFO,\n} = new LogFormatter('[http-transport-session]');\n\n/**\n * @private\n * @namespace Values for tracking current state of incoming streaming data\n */\nconst PacketReadState = {\n  READING_HEADER: 0,\n  STREAMING:      1,\n};\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n/**\n * @private\n */\nconst MSIE_TRANSPORT_PADDING = 257;\n\nfunction adaptURL(url) {\n  const v = url.match(/(ws|http)(s?:\\/\\/.+)/);\n  return `http${v[2]}`;\n}\n\n/** ===========================================================================\n * HTTPTransportSession :\n *\n * This contains all data and code required to maintain HTTP transport sessions\n * with Solace routers\n * ============================================================================\n * @extends WebTransportSessionBase\n * @private\n */\nclass HTTPTransportSession extends WebTransportSessionBase {\n  constructor(baseUrl, eventCB, client, props) {\n    // Our internal data format (for now) is binary string, so we wrap the callback\n    // in a function that does the required conversion to ArrayBuffer.\n    super(baseUrl,\n          eventCB,\n          client,\n          props);\n\n    // const self = this;\n    // logger.formatter = function formatter(...args) {\n    //   return [self.sessionIdHex, ...args];\n    // };\n\n    // Set to true if we have the data token that we need for sending data to the router\n    this._haveToken = true;\n\n    // Maximum payload chunk size in web transport\n    this._confMaxWebPayload = props.maxWebPayload;\n    this._maxPayloadBytes = 0;\n\n    // Timer that will keep track of the destroy time\n    this._destroyTimer = null;\n    this._destroyTimeout = props.connectTimeoutInMsecs;\n\n    // The URL used for create messages\n    this._createUrl = adaptURL(baseUrl);\n\n    // The URL used for all other messages - it will have the router tag appended\n    // after the session has been created\n    this._routerUrl = this._createUrl;\n\n    // SMF client (instantiated after session is created)\n    this._rxChannelClient = null;\n    // Send data connection (instantiated after session is created)\n    this._httpSendConn = null;\n\n    // Receive data connection (instantiated after session is created)\n    this._httpReceiveConn = null;\n\n    // Data Token SMF header - this is preformatted for performance\n    // It will be set after session is created\n    this._smfDataTokenTSHeader = null;\n\n    // Router Tag - a string that will be added to HTTP request URLs\n    this._routerTag = '';\n\n    // Session ID - 8-byte identifier that will associate this client\n    // with client resources on the router\n    this._sid = null;\n\n    if (props.transportProtocol === null || props.transportProtocol === undefined) {\n      throw new OperationError('transportProtocol is not set', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n\n    this._transportProtocol = props.transportProtocol;\n    this._useBinaryTransport = false;\n    this._useStreamingTransport = false;\n    this._streamingTransportPadding = 0;\n\n    this._useBinaryTransport = (props.transportProtocol !== TransportProtocol.HTTP_BASE64);\n    this._useStreamingTransport = (props.transportProtocol ===\n                                   TransportProtocol.HTTP_BINARY_STREAMING);\n\n    // extra state for STREAMING transport\n    this._incomingBuffer = '';\n    this._packetReadState = PacketReadState.READING_HEADER;\n\n    const agent = navigator.userAgent || '';\n    if (agent.match(/trident/i) || agent.match(/msie/i)) {\n      this._streamingTransportPadding = MSIE_TRANSPORT_PADDING;\n    }\n\n    if (props.transportContentType === null || props.transportContentType === undefined) {\n      throw new OperationError('transportContentType is not set', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._contentType = props.transportContentType;\n  }\n\n  /**\n   * @override\n   */\n  connectTimerExpiry() {\n    LOG_INFO('HTTP transport connect timeout');\n    this.destroyCleanup('HTTP transport connect timeout', ErrorSubcode.TIMEOUT);\n  }\n\n  get sessionIdHex() {\n    return (this._sid) ? formatHexString(this._sid) : '';\n  }\n\n  updateMaxWebPayload() {\n    // 22 Bytes of TransportSMF wrapping overhead\n    const trLessEncapSMF = this._confMaxWebPayload - 22;\n    // Base64 has a 4:3 expansion\n    this._maxPayloadBytes = this._useBinaryTransport\n      ? trLessEncapSMF\n      : Math.floor(trLessEncapSMF * 0.75);\n  }\n\n  /**\n   * Connect transport session to router\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  connect() {\n    // Check that we we are in an acceptable state for connection\n    if (this._state !== TransportSessionState.DOWN) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    return this.connectInternal();\n  }\n\n  connectInternal() {\n    // Create the XHR to talk to the router\n    this._connError = null;\n    try {\n      this._createConn = new HTTPConnection(this._createUrl,\n                                            !(this._useBinaryTransport),\n                                            false,\n                                            (rc, data) => this.handleCreateResponse(rc, data),\n                                            (rc, data) => this.handleCreateConnFailure(rc, data),\n                                            this._contentType);\n    } catch (e) {\n      LOG_INFO(`Failed to create connection to router: ${e.message}`);\n      this._connError = e;\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n    if (Check.nothing(this._createConn)) {\n      LOG_INFO('Failed to create connection to router');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    // Get an SMF transport session create message\n    const createMsg = SMFLib.Codec.Transport.genTsCreateHeader();\n\n    if (this._state === TransportSessionState.WAITING_FOR_CREATE) {\n      // already connecting (this is likely a retry with Base64 encoding)\n      LOG_DEBUG('Connect attempt while in WAITING_FOR_CREATE (retry)');\n    } else {\n      this.createConnectTimeout();\n      // Set the current state\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n    }\n\n    // Send the create message to the router.  When the response is received, the\n    // handleCreateResponse method will be called\n    try {\n      this._createConn.send(createMsg);\n    } catch (connError) {\n      LOG_INFO(`Error connecting: ${connError.message}`);\n      LOG_TRACE('Error details:', connError.stack || connError);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.cancelConnectTimeout();\n      if (connError instanceof TransportError) {\n        this._connError = connError;\n      } else {\n        this._connError = new TransportError(\n          `Could not create HTTP transport session: ${connError.message}`,\n          connError.subcode || ErrorSubcode.CONNECTION_ERROR);\n      }\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Destroy transport session to router\n   * @param {String} msg The message associated with the operation\n   * @param {ErrorSubcode} subcode The subcode associated with the operation\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  destroy(msg, subcode) {\n    LOG_TRACE(`Destroy transport session when in state ${this._state}`);\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n        this._state === TransportSessionState.DOWN) {\n      // Nothing to do\n      return TransportReturnCode.OK;\n    }\n\n    if (this._state === TransportSessionState.CONNECTION_FAILED ||\n        this._state === TransportSessionState.WAITING_FOR_CREATE) {\n      // The connections are in an unreliable state - we will just\n      // kill our local object and let the router clean itself up with its inactivity timer\n      LOG_INFO('The connection is in unreliable state, close transport');\n      this.destroyCleanup(msg, subcode, true);\n      return TransportReturnCode.OK;\n    }\n\n    LOG_INFO('Destroy transport session immediately');\n    // Set the current state\n    this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n    // Abort any current requests for this session\n    if (this._httpSendConn !== null) {\n      LOG_INFO('Destroy transport session: abort sendConn');\n      this._httpSendConn.abort();\n    }\n    if (this._httpReceiveConn !== null) {\n      LOG_INFO('Destroy transport session: abort receiveConn');\n      this._httpReceiveConn.abort();\n    }\n\n    // Start a timer\n    this._destroyTimer = setTimeout(() => {\n      this.destroyTimerExpiry();\n    }, this._destroyTimeout);\n\n    // Send the destroy message over new HTTPConnection to the router so that the async abort\n    // can properly finish in the old _httpSendConn.\n    // When the response is received, the handleDestroyResponse method will be called.\n    this._httpSendConn = new HTTPConnection(\n        this._routerUrl,\n        !(this._useBinaryTransport), false,\n        (rc, data) => this.handleRxDataToken(rc, data), // RxData callback\n        (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n        this._contentType,\n        true);\n\n    // Get an SMF transport session destroy message\n    const destroyMsg = SMFLib.Codec.Transport.genTsDestroyHeader(this._sid);\n\n    LOG_TRACE(`destroy message: ${strToHexArray(destroyMsg)}`);\n    this._httpSendConn.send(destroyMsg);\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Send data over the connection - this requires a send token\n   * @param {String} dataIn The data to send\n   * @param {Boolean} [forceAllowEnqueue=false] If `true`, do not fail due to out of space\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  send(dataIn, forceAllowEnqueue = false) {\n    let data = dataIn;\n    // LOG_TRACE(`HTTPTransportSession:send ${data.length}, tx_queued:${this._queuedDataSize}`);\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    // Check to see if we already have queued data\n    if ((this._queuedData.length > 0) || (!this._haveToken)) {\n      return this.enqueueData(data, forceAllowEnqueue);\n    }\n\n    // Check if we need to chop up the payload\n    let remainder = null;\n    if (data.length > this._maxPayloadBytes) {\n      remainder = data.substr(this._maxPayloadBytes);\n      data = data.substr(0, this._maxPayloadBytes);\n\n      // If no space for remainder, return FAIL without sending anything.\n      if (!this.allowEnqueue(remainder.length)) {\n        return this.enqueueFailNoSpace();\n      }\n\n    // LOG_DEBUG(\"$$ send dataChunk:\" + data.length + \", remainderChunk:\" + remainder.length);\n    }\n\n    // We have the token, so send the data\n    this._haveToken = false;\n\n    const transportPacketLen = (this._smfDataTSHeaderParts[0].length + 4 +\n                                this._smfDataTSHeaderParts[1].length + data.length);\n\n    this._httpSendConn.send(this._smfDataTSHeaderParts[0] +\n                            int32ToStr(transportPacketLen) +\n                            this._smfDataTSHeaderParts[1] +\n                            data);\n    this._clientstats.bytesWritten += data.length;\n\n    if (remainder) {\n      // The message was partially sent. The message written count will be incremented\n      // when its last bytes go out.\n      return this.enqueueData(remainder, null);\n    }\n\n    // The whole message was sent.\n    this._clientstats.msgWritten++;\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Push data onto the pending send queue as long as it doesn't violate\n   * the max stored message size\n   * @param {String} data The data to enqueue\n   * @param {Boolean} [forceAllowEnqueue=false] If `true`, don't fail due to no space.\n   * @returns {TransportReturnCode} The result of the operation.\n   */\n  enqueueData(data, forceAllowEnqueue = false) {\n    const dataLen = data.length;\n\n    // LOG_DEBUG(\"enqueueing data: \" + data.length + \", queue depth: \" + this._queuedDataSize);\n    if (forceAllowEnqueue || this.allowEnqueue(dataLen)) {\n      this._queuedDataSize += dataLen;\n      this._queuedData.push(data);\n    } else {\n      return this.enqueueFailNoSpace();\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Set the data in the preformatted headers.  The headers are set up this way\n   * for performance reasons\n   * @param {String} sid The session ID to incorporate into the headers\n   */\n  initPreformattedHeaders(sid) {\n    // _smfDataTSHeaderParts is a two entry array - one part before the total length\n    // and the other after.  The total length is not known until actual data is sent\n    this._smfDataTSHeaderParts = SMFLib.Codec.Transport.genTsDataMsgHeaderParts(sid);\n\n    // _smfDataTokenTSHeader is a single header that all data-token messages require\n    if (this._useStreamingTransport) {\n      this._smfDataTokenTSHeader = SMFLib.Codec.Transport.genTsDataStreamTokenMsg(\n        sid,\n        this._streamingTransportPadding);\n    } else {\n      this._smfDataTokenTSHeader = SMFLib.Codec.Transport.genTsDataTokenMsg(sid);\n    }\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    if (this._queuedDataSize) {\n      this._flushCallback = callback;\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * Check if there is any data waiting to be sent to the router.\n   * If there is, send it.\n   */\n  sendQueuedData() {\n    if (this._queuedDataSize === 0) {\n      return;\n    }\n    this._haveToken = false;\n    const data = this.getQueuedDataToSend();\n    const transportPacketLen = this._smfDataTSHeaderParts[0].length + 4 +\n                               this._smfDataTSHeaderParts[1].length + data.length;\n\n    this._httpSendConn.send(this._smfDataTSHeaderParts[0] +\n                            int32ToStr(transportPacketLen) +\n                            this._smfDataTSHeaderParts[1] +\n                            data);\n    this._clientstats.bytesWritten += data.length;\n\n\n    if (this._canSendNeeded) {\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '',\n                                  null,\n                                  0,\n                                  this._sid));\n    }\n\n    if (this._flushCallback) {\n      const cb = this._flushCallback;\n      this._flushCallback = null;\n      cb();\n    }\n  }\n\n  // Internal Callbacks\n\n  // Called when a create response message has been received\n  handleCreateResponse(tsRc, response) {\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n        this._state === TransportSessionState.DOWN) {\n      LOG_DEBUG('Received create response on a destroyed transport session, ignore');\n      return;\n    }\n\n    // Was: stop the connect timer. We don't do that in this transport now.\n    // We wait for the login response.\n\n    // We know whether we're using Base64 or not, so update our max payload size.\n    this.updateMaxWebPayload();\n\n    if (tsRc !== TransportReturnCode.OK) {\n      LOG_INFO(`Received create response with return code ${TransportReturnCode.describe(tsRc)}`);\n      if (tsRc === TransportReturnCode.DATA_DECODE_ERROR) {\n        this.destroyCleanup('Received data decode error on create session response', ErrorSubcode.DATA_DECODE_ERROR);\n      } else {\n        this.destroyCleanup('Failed to handle create session response', ErrorSubcode.CONNECTION_ERROR);\n      }\n      return;\n    }\n\n    if (response.length === 0) {\n      return; // null read indicating end of stream\n    }\n\n    // Parse the Transport Session SMF\n    const parsedResponse = SMFLib.Codec.Decode.decodeCompoundMessage(BufferImpl.from(response, 'latin1'), 0);\n    if (!parsedResponse) {\n      LOG_ERROR('Could not parse create response as SMF. Destroying transport');\n      this.destroyCleanup('Failed to parse create response message', ErrorSubcode.CONNECTION_ERROR);\n      return;\n    }\n\n    const smfresponse = parsedResponse.getResponse();\n    if (smfresponse.responseCode !== 200) {\n      this.destroyCleanup(`Transport create request failed (${smfresponse.responseCode}, ${smfresponse.responseString})`,\n                          ErrorSubcode.CONNECTION_ERROR);\n      return;\n    }\n\n    this.cancelConnectTimeout();\n    this._createConn.abort();\n    this._createConn = null;\n    this._state = TransportSessionState.SESSION_UP;\n    this._sid = parsedResponse.sessionId;\n    this._routerTag = parsedResponse.routerTag;\n\n    // Trim any parameters off the create url before using it for the routerUrl\n    this._routerUrl = this._createUrl.replace(/\\?.*/, '');\n    if (this._routerTag !== '') {\n      this._routerUrl = this._routerUrl + this._routerTag;\n    }\n\n    this.initPreformattedHeaders(this._sid);\n    const useBase64 = !this._useBinaryTransport;\n    const useStreaming = this._useStreamingTransport;\n\n    // Create the two connections to the router\n    // By now, getXhrObj() should not throw any exception inside HTTPConnection constructor\n    this._httpSendConn = new HTTPConnection(this._routerUrl, useBase64, false,\n        (rc, data) => this.handleRxDataToken(rc, data), // RxData callback\n        (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n        this._contentType);\n    if (this._useStreamingTransport) {\n      // When the transport is HTTP_BINARY_STREAMING the SMF encapsulation\n      // is complete, the SMF header indicates a message length of 0xFFFFFFFF\n      // and after decoding just the header alone the data is passed through\n      // to the session layer, so we must use a simplified SMF parser and a\n      // stateful data callback in that case.\n      this._httpReceiveConn = new HTTPConnection(this._routerUrl, useBase64, useStreaming,\n            (rc, data) => this.handleRxStreaming(rc, data), // RxData Callback\n            (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n            this._contentType,\n            true);\n    } else {\n      // Create a SMF client for the Receive Data channel, when http is used.\n      // SMF messages are encapsualated in a solace http-transport which is itself\n      // encapsulated in SMF.  So create an SMF client that will callback with\n      // an smfMessage construct to the HTTPTransportSession.\n      this._rxChannelClient = new SMFClient(\n            rxData => this.handleSmfMessage(rxData),\n            rxError => this.handleSmfParseError(rxError),\n            null);    // we don't have a 'session' for this client. It's just a parser.\n      this._httpReceiveConn = new HTTPConnection(this._routerUrl, useBase64, useStreaming,\n            (rc, data) => this.handleRxData(rc, data), // RxData Callback\n            (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n            this._contentType);\n    }\n\n    // Give the router the data token so that it will be able to send data\n    this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n\n    // Send the event to the application letting it know that the session is up\n    this._eventCB(\n      new TransportSessionEvent(TransportSessionEventCode.UP_NOTICE,\n                                smfresponse.responseString,\n                                smfresponse.responseCode,\n                                0,\n                                parsedResponse.sessionId));\n  }\n\n  // Called when receiving a destroy response\n  handleDestroyResponse(response) {\n    LOG_DEBUG('Handle destroy response');\n    // Stop the timer\n    this.cancelDestroyTimeout();\n    const innerResponse = response.getResponse();\n    const responseString = innerResponse ? innerResponse.responseString : '';\n    this.destroyCleanup(\n      `${responseString} handled Destroy Response addressed to session ${\n      formatHexString(response.sessionId)}, on session ${formatHexString(this._sid)}`,\n      0);\n  }\n\n  handleSmfMessage(tsmsg) {\n    const smfHeader = tsmsg.smfHeader;\n    if (smfHeader.smf_protocol !== SMFLib.SMFProtocol.TSESSION) {\n      this.handleSmfParseError(`Unexpected Message Prototcol (${smfHeader.smf_protocol}) on ReceiveData connection`);\n      return;\n    }\n\n      // we have found a transport SMF, can we now read the Transport SMF chunk\n    const data = tsmsg.payload;\n    const TotalPayloadToRead = tsmsg.payloadLength;\n\n    switch (tsmsg.messageType) {\n      case SMFLib.SMFTransportSessionMessageType.DESTROY_RESP:\n        this.handleDestroyResponse(tsmsg);\n        return;\n\n      case SMFLib.SMFTransportSessionMessageType.DATA:\n        if (tsmsg.sessionId !== this._sid) {\n          // The router may have given us an error code; if so, include in the error message.\n          const smfErrResponse = tsmsg.getResponse();\n          const responseErrStr = smfErrResponse\n              ? (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`)\n              : '';\n          const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n          LOG_DEBUG(`HandleRxData Bad Session ID received in message. Expected: ${strToByteArray(this._sid)\n                        }, Received: ${strToByteArray(tsmsg.sessionId)}${responseErrStr}`);\n\n          this._state = TransportSessionState.CONNECTION_FAILED;\n          this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                        `Session ID mismatch in data message, expected: ${formatHexString(this._sid)}, got: ${\n                        formatHexString(tsmsg.sessionId)}, ${responseErrStr}`,\n                        responseCode,\n                        ErrorSubcode.PROTOCOL_ERROR, this._sid));\n          return;\n        }\n\n        // pass-through encapsulated data to parent\n        if (TotalPayloadToRead > 0) {\n          this._client.rxDataBuffer(data);\n        }\n        break;\n      default:\n        // Unexpected message type\n        this.handleSmfParseError(`Unexpected message type (${\n                    tsmsg.messageType}) on ReceiveData connection`);\n    }\n  }\n\n  handleSmfParseError() {\n    this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DATA_DECODE_ERROR,\n        'Received data decode error', null,\n        ErrorSubcode.DATA_DECODE_ERROR, this._sid));\n  }\n\n  // Called when data is received on the connection\n  handleRxData(tsRc, data) {\n    if (this._httpReceiveConn === null || this._rxChannelClient === null) {\n      if (this._state === TransportSessionState.DOWN) {\n        LOG_INFO('Transport session is down, ignore data from receive connection');\n      } else {\n        LOG_ERROR(`Transport session is not in working state, state: ${this._state}`);\n      }\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('Transport session is being destroyed, ignore data from receive connection, ' +\n               `dump first 64 bytes (or fewer) of data:\\n${\n                 DebugLib.Debug.formatDumpBytes(data.substring(0, 64), true, 0)}`);\n      return;\n    }\n\n    this._httpReceiveConn.recStat('GotData');\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      LOG_DEBUG('Send write token to router');\n      this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n    } else {\n      this._rxChannelClient.rxDataString(data);\n    } // end have data to process\n  }\n\n  // Called when data is received on a HTTP_BINARY_STREAMING connection\n  handleRxStreaming(tsRc, data) {\n    if (this._httpReceiveConn === null) {\n      if (this._state === TransportSessionState.DOWN) {\n        LOG_DEBUG('Transport session is down, ignore data from receive connection');\n      } else {\n        LOG_ERROR(`Transport session is not in working state, state: ${this._state}`);\n      }\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('Transport session is being destroyed, ignore data from streaming receive ' +\n               `connection, dump first 64 bytes (or fewer) of data:\\n${\n               DebugLib.Debug.formatDumpBytes(data.substring(0, 64), true, 0)}`);\n      return;\n    }\n\n    this._httpReceiveConn.recStat('GotData');\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      LOG_TRACE('Send write token to router');\n      this._packetReadState = PacketReadState.READING_HEADER;\n      this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n      return;\n    }\n\n    // pass-through encapsulated data to parent\n    if (this._packetReadState === PacketReadState.STREAMING) {\n      this._client.rxDataString(data);\n      return;\n    }\n\n    this._incomingBuffer += data;\n    const smfheader = SMFLib.Codec.ParseSMF.parseSMFAt(BufferImpl.from(this._incomingBuffer, 'latin1'),\n                                                       0, true);\n    if (smfheader) {\n        // we have a valid smf header, see if there is a transport header and session-id\n      const tsmsg = SMFLib.Codec.Transport.parseTsSmfHdrAt(BufferImpl.from(this._incomingBuffer, 'latin1'),\n                                                           smfheader.headerLength,\n                                                           smfheader);\n      if (!tsmsg) {\n        // Not tsMsg but there is an smf header, just return until more data arrives\n        return;\n      }\n\n      // We have the transport message header too, if it is a DATA message enter\n      // STREAMING state\n      switch (tsmsg.messageType) {\n        case SMFLib.SMFTransportSessionMessageType.DESTROY_RESP:\n          this.handleDestroyResponse(tsmsg);\n          return;\n\n        case SMFLib.SMFTransportSessionMessageType.DATA:\n          if (tsmsg.sessionId !== this._sid) {\n            // The router may have given us an error code, if so, include in the error message.\n            const smfErrResponse = tsmsg.getResponse();\n            const responseErrStr = smfErrResponse\n                ? (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`)\n                : '';\n            const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n            LOG_DEBUG(`HandleRxData Bad Session ID received in message.  Expected: ${strToByteArray(this._sid)\n                        }, Received: ${strToByteArray(tsmsg.sessionId)}${responseErrStr}`);\n            LOG_DEBUG(`First 64 bytes (or fewer) of message: ${strToByteArray(data.substr(0, 64))}`);\n\n            this._state = TransportSessionState.CONNECTION_FAILED;\n            this._eventCB(\n              new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                                        `Session ID mismatch in data message, expected: ${formatHexString(this._sid)}, got: ${\n                                        formatHexString(tsmsg.sessionId)}, ${responseErrStr}`,\n                                        responseCode,\n                                        ErrorSubcode.PROTOCOL_ERROR, this._sid));\n            return;\n          }\n          // all is good. We can now STREAM the rest of the data until a empty message is received.\n          this._packetReadState = PacketReadState.STREAMING;\n          // pass-through any remaining data\n          if (this._incomingBuffer.length > (smfheader.headerLength + tsmsg.tsHeaderLength)) {\n            this._client.rxDataString(\n              this._incomingBuffer.substr(smfheader.headerLength + tsmsg.tsHeaderLength));\n          }\n          this._incomingBuffer = '';\n          return;\n\n        default:\n          // Unexpected message type\n          throw new TransportError(`Unexpected message type (${tsmsg.messageType}) on ReceiveData connection`, 0);\n      }\n    } else if (SMFLib.Codec.ParseSMF.isSMFHeaderAvailable(BufferImpl.from(this._incomingBuffer, 'latin1'), 0) &&\n               !SMFLib.Codec.ParseSMF.isSMFHeaderValid(BufferImpl.from(this._incomingBuffer, 'latin1'), 0)) {\n      // Probably lost framing\n      LOG_ERROR(`Couldn't decode message due to invalid smf header, dump first 64 bytes (or fewer) of buffer content:\\n${\n                 DebugLib.Debug.formatDumpBytes(this._incomingBuffer.substring(0, 64), true, 0)}`);\n\n      const errorInfo = 'Error parsing incoming message - invalid SMF header detected';\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                                  errorInfo, null,\n                                  ErrorSubcode.PROTOCOL_ERROR,\n                                  null));\n    }\n  }\n\n  // Called when data is received on the httpDataSend\n  handleRxDataToken(tsRc, data) {\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      return; // handle End of Stream\n    }\n\n    const parsedResponse = SMFLib.Codec.Decode.decodeCompoundMessage(BufferImpl.from(data, 'latin1'), 0);\n    if (!parsedResponse) {\n      if (this._state !== TransportSessionState.WAITING_FOR_DESTROY) {\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                'Failed to parse received data message', null,\n                ErrorSubcode.PROTOCOL_ERROR, this._sid));\n      } else {\n        this.destroyCleanup('Failed to parse received data message', ErrorSubcode.PROTOCOL_ERROR);\n      }\n      return;\n    }\n\n    if (parsedResponse.messageType === SMFLib.SMFTransportSessionMessageType.DESTROY_RESP) {\n      this.handleDestroyResponse(parsedResponse);\n      return;\n    }\n\n    if (parsedResponse.sessionId !== this._sid) {\n        // The router may have given us an error code, if so, include in the error message.\n      const smfErrResponse = parsedResponse.getResponse();\n      const responseErrStr = smfErrResponse ?\n            (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`) :\n            '';\n      const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n      LOG_DEBUG(`HandleRxDataToken Bad SID received in message.  Expected: ${strToByteArray(this._sid)\n            }, Received: ${strToByteArray(parsedResponse.sessionId)}${responseErrStr}`);\n      LOG_DEBUG(`First 64 bytes (or fewer) of message: ${strToByteArray(data.substr(0, 64))}`);\n\n      if (this._state !== TransportSessionState.WAITING_FOR_DESTROY) {\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                `Session ID mismatch in response message, expected: ${formatHexString(this._sid)}, got: ${formatHexString(parsedResponse.sessionId)}, ${responseErrStr}`,\n                responseCode, ErrorSubcode.PROTOCOL_ERROR, this._sid));\n      } else {\n        this.destroyCleanup('Session ID mismatch in response message', ErrorSubcode.PROTOCOL_ERROR);\n      }\n      return;\n    }\n\n    if (parsedResponse.messageType ===\n        SMFLib.SMFTransportSessionMessageType.DATA_TOKEN ||\n        parsedResponse.messageType ===\n        SMFLib.SMFTransportSessionMessageType.DATA_STREAM_TOKEN) {\n      this._haveToken = true;\n      this._httpSendConn.recStat('GotToken');\n      // this._eventCB(\n      //    new TransportSessionEvent(TransportSessionEventCode.NOTIFY_GOT_TOKEN, \"\", null, null));\n      this.sendQueuedData();\n    } else {\n        // Unexpected message type\n      throw (new TransportError(`Unexpected message type (${\n            parsedResponse.messageType}) on SendData connection`, 0));\n    }\n  }\n\n  handleRxError(tsRc) {\n    LOG_INFO(`handleRxError, transport return code ${TransportReturnCode.name(tsRc)}`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    if (tsRc === TransportReturnCode.DATA_DECODE_ERROR) {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DATA_DECODE_ERROR,\n            'Received data decode error', null,\n            ErrorSubcode.DATA_DECODE_ERROR, this._sid));\n    } else {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.SEND_ERROR,\n            'Connection error',\n            ErrorSubcode.CONNECTION_ERROR, this._sid));\n    }\n  }\n\n  // Called when there is an error on a connection or the connection is aborted\n  handleSendFailure(status, msg) {\n    // failed to send message, if it is a destroy message, just complete the destroy process\\\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_INFO(`Connection destroy failure (${msg}) while in state ${this._state}`);\n      this.destroyCleanup(`Connection destroy failure: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n    } else {\n      // Failed to send message, return error to upper layer which may  tear the session down\n      LOG_INFO(`Connection failure (${msg}) while in state ${this._state}`);\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.SEND_ERROR,\n            `Connection error: ${msg}`, status,\n            ErrorSubcode.CONNECTION_ERROR, this._sid));\n    }\n  }\n\n  // Called when there is an error on a connection for a session create request\n  handleCreateConnFailure(status, msg) {\n    if (this._state === TransportSessionState.DOWN) {\n      return;\n    }\n\n    LOG_INFO(`Connection create failure (${msg}) while in state ${this._state}`);\n    this.destroyCleanup(`Connection create failure: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n  }\n\n  // Called when the destroy timer expires\n  destroyTimerExpiry() {\n    this.destroyCleanup('Destroy request timeout', ErrorSubcode.CONNECTION_ERROR);\n  }\n\n  cancelDestroyTimeout() {\n    if (this._destroyTimer) {\n      clearTimeout(this._destroyTimer);\n      this._destroyTimer = null;\n    }\n  }\n\n  /**\n   * Called after receiving ts destroy response from router\n   * @param {String} infoStr The informational string to pass along\n   * @param {ErrorSubcode} subcode The subcode associated with the event\n   * @param {Boolean} asyncSendEvent If true, always send the event asynchronously.\n   */\n  destroyCleanup(infoStr, subcode, asyncSendEvent) {\n    LOG_DEBUG(`Destroy cleanup: ${infoStr}`);\n\n    // Abort any current requests for this session\n    if (this._createConn) {\n      LOG_DEBUG('Destroy cleanup: Abort createConn');\n      this._createConn.abort();\n    }\n    if (this._httpSendConn) {\n      LOG_DEBUG('Destroy cleanup: Abort sendConn');\n      this._httpSendConn.abort();\n    }\n    if (this._httpReceiveConn) {\n      LOG_DEBUG('Destroy cleanup: Abort receiveConn');\n      this._httpReceiveConn.abort();\n    }\n\n    // Clear most internal state\n    this._createUrl = null;\n    this._routerUrl = null;\n    this._createConn = null;\n    this._httpSendConn = null;\n    this._httpReceiveConn = null;\n    this._smfDataTokenTSHeader = null;\n    this._rxChannelClient = null;\n    this._routerTag = '';\n    this._queuedData = [];\n    this._queuedDataSize = 0;\n    this._canSendNeeded = false;\n\n    // Clear timers.\n    this.cancelDestroyTimeout();\n    this.cancelConnectTimeout();\n\n    // Set final state\n    this._state = TransportSessionState.DOWN;\n\n    // Send the event to the application letting it know that the session is down\n    const finalize = () => {\n      // Check whether the callback was cleared before the timeout completes.\n      if (this._eventCB) {\n        this._eventCB(\n            new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                      infoStr || 'Session is destroyed',\n                                      null,\n                                      subcode || 0,\n                                      this._sid));\n      }\n\n      // release reference to smf client object\n      this._client = null;\n      // release reference to session object\n      this._eventCB = null;\n    };\n\n    if (asyncSendEvent) {\n      setTimeout(finalize, 0); // opportunity to use setImmediate instead\n    } else {\n      finalize();\n    }\n  }\n\n  getInfoStr() {\n    const str = `HTTPTransportSession; sid=${\n        formatHexString(this._sid)\n        }; routerTag=${this._routerTag}`;\n    return str;\n  }\n\n}\n\nmodule.exports.HTTPTransportSession = HTTPTransportSession;\n","const { Base64, Convert } = require('solclient-convert');\nconst { XHRFactory } = require('./xhr-factory');\n\nconst { encode: base64Encode } = Base64;\nconst { stringToUint8Array } = Convert;\n\nfunction sendXhrBinaryMSIE10(xhr, data, contentType) {\n  xhr.responseType = 'arraybuffer';\n  xhr.overrideMimeType(`${contentType}; charset=x-user-defined`);\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(stringToUint8Array(data));\n}\n\nfunction sendXhrBinaryXHR2(xhr, data, contentType) {\n  xhr.overrideMimeType(`${contentType}; charset=x-user-defined`);\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(stringToUint8Array(data).buffer);\n}\n\nfunction sendXhrText(xhr, data, contentType, connClose) {\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(data === null || data === undefined ? data : base64Encode(data), connClose);\n}\n\nconst sendXhrBinary = (() => {\n  // Uint8Array is probably shimmed by core-js. We don't use window.Blob, but\n  // it is a Working Draft, not  part of ES6, and not shimmed by core-js.\n  // Therefore it makes a workable canary for IE10 detection.\n  if (typeof window !== 'undefined' && window.Uint8Array && window.Blob /* !ie9 */) {\n    const xhr = XHRFactory.create(true);\n    if (xhr.responseType /* ie10 */) {\n      return sendXhrBinaryMSIE10;\n    }\n    return sendXhrBinaryXHR2;\n  }\n  return sendXhrText;\n})();\n\nmodule.exports.sendXhrBinary = sendXhrBinary;\nmodule.exports.sendXhrText = sendXhrText;\n","const { ErrorSubcode } = require('solclient-error');\nconst { TransportError } = require('../../transport-error');\n\n/* eslint-env browser */\nconst XHRFactory = {\n  /**\n   * Creates an XHR object.\n   *\n   * @param {Boolean} [allowFail=false] If `true`, return null on failure; otherwise throw.\n   * @throws {TransportError}\n   * @returns {XMLHttpRequest} The new XHR object\n   */\n  create(allowFail = false) {\n    const xhr = typeof XMLHttpRequest !== 'undefined' ? new XMLHttpRequest() : null;\n    if (!allowFail && !xhr) {\n      throw new TransportError('Failed to create an XMLHTTPRequest',\n                                 ErrorSubcode.CREATE_XHR_FAILED);\n    }\n    return xhr;\n  },\n};\n\nmodule.exports.XHRFactory = XHRFactory;\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\n\n/**\n * @classdesc\n * HTTP Base64 transport\n * @memberof solace\n * @private\n */\nclass StateBase64 extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BASE64, exitCb, nextState);\n  }\n}\n\nmodule.exports.StateBase64 = StateBase64;\n\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * HTTP Binary transport\n * @memberof solace\n * @private\n */\nclass StateBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BINARY, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.xhrBinary();\n  }\n}\n\nmodule.exports.StateBinary = StateBinary;\n\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * HTTP Binary Streaming transport\n * @memberof solace\n * @private\n */\nclass StateStreamingAndBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BINARY_STREAMING, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.streaming() && WebTransportCapabilities.xhrBinary();\n  }\n}\n\nmodule.exports.StateStreamingAndBinary = StateStreamingAndBinary;\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * WebSocket transport\n * @memberof solace\n * @private\n */\nclass StateWebSocketBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.WS_BINARY, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.webSocket();\n  }\n}\n\nmodule.exports.StateWebSocketBinary = StateWebSocketBinary;\n","const HTTPLib = require('./http');\nconst { WebSocketTransportSession } = require('./websocket-transport-session');\n\nconst { HTTPConnection } = HTTPLib;\n\nconst WebTransportCapabilities = {\n  webSocket() { return WebSocketTransportSession.browserSupportsBinaryWebSockets(); },\n  xhrBinary() { return HTTPConnection.browserSupportsXhrBinary(); },\n  streaming() { return HTTPConnection.browserSupportsStreamingResponse(); },\n};\n\nmodule.exports.WebTransportCapabilities = WebTransportCapabilities;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of Web Transport events.\n * @enum {string}\n * @namespace\n * @memberof solace\n * @private\n */\nconst WebTransportEvent = {\n  /**\n   * The Session Layer has issued a connect request\n   */\n  CONNECT:          'Connect',\n  /**\n   * The Session Layer has issued a destroy request\n   */\n  DESTROY:          'Destroy',\n  /**\n   * A downgrade request has been received from an FSM.\n   */\n  DOWNGRADE:        'Downgrade',\n  /**\n   * The underlying transport has been destroyed. Seen in\n   * response to calling destroy() and in some cases when\n   * the transport is destroyed by the peer.\n   */\n  DESTROYED_NOTICE: 'DestroyedNotice',\n  /**\n   * The underlying transport timed out in its connection attempt.\n   * The managing component should abort this connection attempt\n   * and begin a downgrade if available.\n   */\n  CONNECT_TIMEOUT:  'ConnectTimeout',\n  /**\n   * The underlying transport is active and ready for traffic.\n   */\n  UP_NOTICE:        'UpNotice',\n  /**\n   * The transport encountered an error sending data.\n   */\n  SEND_ERROR:       'SendError',\n};\n\nmodule.exports.WebTransportEvent = Enum.new(WebTransportEvent);\n","\nconst { ErrorSubcode } = require('solclient-error');\nconst { FsmEvent, State, StateMachine } = require('solclient-fsm');\nconst { LogFormatter } = require('solclient-log');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { WebTransportEvent } = require('./web-transport-events');\nconst { WebTransportState } = require('./web-transport-states');\n\nconst {\n  LOG_TRACE,\n  LOG_INFO,\n} = new LogFormatter();\n\nclass WebTransportFSM extends StateMachine {\n  constructor(transportIn, getId) {\n    super({ name: 'WebTransportFSM' });\n    const transport = transportIn;\n    const fsm = this;\n    const logger = new LogFormatter();\n    logger.formatter = function logFormatter(...args) {\n      return [`[web-transport-fsm=${getId()}]`, ...args];\n    };\n    this.log = logger.wrap(this.log, this);\n    this.transport = transport;\n\n    this.initial(function onInitial() {\n      return this.transitionTo(\n        this.WebTransportDown,\n        (context) => {\n          LOG_TRACE(`Starting ${context.getStateMachine().getName()}`);\n        });\n    });\n\n    this.unhandledEventReaction(function onUnhandledEvent(wEvent) {\n      LOG_TRACE(`Ignoring event ${wEvent.getName()} in state ${this.getCurrentState().getName()}`);\n      return this;\n    });\n\n    this.WebTransportDown = new State({\n      name:          WebTransportState.DOWN,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.CONNECT, function onConnect(/* wEevent */) {\n        return this.transitionTo(fsm.WebTransportConnecting);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n\n    this.WebTransportConnecting = new State({\n      name:          WebTransportState.CONNECTING,\n      parentContext: this,\n    })\n      .entry(() => {\n        try {\n          const rc = transport.connectInternal();\n          if (rc !== TransportReturnCode.OK) {\n            const connError = transport.getConnError();\n            const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n            wEvent._destroyMsg = connError ? connError.message : 'Error occurred while establishing transport';\n            wEvent._subcode = connError ? connError.subcode : null;\n            wEvent._eventReason = connError;\n            return this.processEvent(wEvent);\n          }\n        } catch (e) {\n          LOG_INFO(`transport.connectInternal threw: ${e.message}`);\n          const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n          wEvent._destroyMsg = e.message;\n          wEvent._subcode = e.subcode ? e.subcode : ErrorSubcode.CONNECTION_ERROR;\n          wEvent._eventReason = e;\n          return this.processEvent(wEvent);\n        }\n        return undefined;\n      })\n      // Transport destroy is async, so in downgrade cases we need an event to start the downgrade\n      // (and associated transport destroy) and one to complete it (DESTROYED_NOTICE).\n      // These two events trigger downgrade: SEND_ERROR on connection (protocol issue) and\n      // CONNECT_TIMEOUT (possible black hole proxy).\n      .reaction(WebTransportEvent.SEND_ERROR, (wEvent) => {\n        transport.notifyEvent(wEvent._transportEvent); // Give the session a chance to intervene\n        return fsm.attemptDowngrade(wEvent._transportEvent);\n      })\n      .reaction(WebTransportEvent.CONNECT_TIMEOUT, e => fsm.attemptDowngrade(e._transportEvent))\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, (wEvent) => {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      })\n      .reaction(WebTransportEvent.UP_NOTICE, function onUpNotice(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportUp);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportDowngrading = new State({\n      name:          WebTransportState.DOWNGRADING,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        LOG_INFO('Web transport: request downgrade');\n        if (!transport.completeDowngrade()) {\n          LOG_INFO('Web transport: connection error, no downgrade');\n          transport.notifyEvent(wEvent._transportEvent);\n          fsm.notifyDowngradeFailed();\n          return this.transitionTo(fsm.WebTransportDown);\n        }\n        return this.transitionTo(fsm.WebTransportConnecting);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportUp = new State({\n      name:          WebTransportState.UP,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DOWNGRADE, wEvent =>\n        fsm.attemptDowngrade(new TransportSessionEvent(wEvent._downgradeMsg, wEvent._subcode)))\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      })\n      .reaction(WebTransportEvent.SEND_ERROR, function onUpNotice(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportDestroying = new State({\n      name:          WebTransportState.DESTROYING,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      });\n  }\n\n\n    /**\n     * Attempt a downgrade. This is the procedure.\n     * 1. Call this. If it returns true, wait for DESTROYED_NOTICE, then\n     * 2. Call transport.completeDowngrade().\n     * @param {TransportSessionEvent} tsEvent The event triggering the downgrade\n     * @returns {Boolean} `true` if downgrade is starting (by destroying the transport)\n     */\n  attemptDowngrade(tsEvent) {\n    const { infoStr, errorSubcode } = tsEvent;\n    if (!this.transport.beginDowngrade(infoStr, errorSubcode)) {\n      LOG_TRACE('Downgrade unavailable');\n      this.transport.destroyInternal(infoStr, errorSubcode);\n      this.transport.notifyEvent(tsEvent);\n      return this.transitionTo(this.WebTransportDestroying);\n    }\n    LOG_TRACE('Downgrade available');\n    return this.transitionTo(this.WebTransportDowngrading);\n  }\n\n  notifyDowngradeFailed() {\n    LOG_TRACE('Notifying of downgrade failure');\n    this.transport.notifyEvent(new TransportSessionEvent(TransportSessionEventCode.DOWNGRADE_FAILED,\n                                  'Downgrade failed'));\n  }\n}\n\nmodule.exports.WebTransportFSM = WebTransportFSM;\n","const {\n  LOG_DEBUG,\n  LOG_TRACE,\n} = require('solclient-log');\nconst { TransportBase } = require('../transport-base');\nconst { TransportClientStats } = require('../transport-client-stats');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst MAX_BUFFERED_AMOUNT_QUERY_INTERVAL_MS = 4000;\n\n/**\n * Base class for web related transports\n * @extends TransportBase\n * @private\n */\nclass WebTransportSessionBase extends TransportBase {\n  /**\n   * @constructor\n   * @param {URL} url The URL to connect to\n   * @param {function} eventCB The function to call on events\n   * @param {SMFClient} client The function to call on data received.\n   * @param {Object} props Additional object properties for this transport session\n   */\n  constructor(url, eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super(url, eventCB, client, props);\n\n    /**\n     * @type {Number}\n     */\n    this._connectTimeout = props.transportDowngradeTimeoutInMsecs;\n\n    /**\n     * @type {?number}\n     */\n    this._connectTimer = null;\n\n    /**\n     * @type {TransportClientStats}\n     */\n    this._clientstats = new TransportClientStats();\n\n    /**\n     * Maximum amount of send data than can be queued\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /**\n     * Maximum payload chunk size in web transport\n     * @type {Number}\n     */\n    this._maxPayloadBytes = props.maxWebPayload;\n\n    /**\n     * Queue to hold data to be sent to the Solace Message Router when we get back a\n     * data token\n     * @type {array}\n     */\n    this._queuedData = [];\n\n    /**\n     * Number of bytes of queued data\n     * @type {Number}\n     */\n    this._queuedDataSize = 0;\n\n    /**\n     * Remember if we have to send an event when there is room in the queue\n     * @type {Boolean}\n     */\n    this._canSendNeeded = false;\n\n    /**\n     * @type {TransportSessionState}\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * Any connection error that needs to be propagated up\n     * @type {?Error}\n     */\n    this._connError = null;\n  }\n\n  // override\n  getClientStats() {\n    return this._clientstats;\n  }\n\n  createConnectTimeout() {\n    if (this._connectTimeout > 0) {\n      this._connectTimer = setTimeout(() => {\n        this.connectTimerExpiry();\n      }, this._connectTimeout);\n    }\n  }\n\n  cancelConnectTimeout() {\n    if (this._connectTimer) {\n      clearTimeout(this._connectTimer);\n      this._connectTimer = null;\n    }\n  }\n\n  /* override me */\n  connectTimerExpiry() { // eslint-disable-line class-methods-use-this\n    return undefined;\n  }\n\n  allowEnqueue(datalen) {\n      // Bug 32006: if there's no queued data, we always accept at least one message, even if it\n      // exceeds the sendBufferMaxSize.\n      // If we reject enqueueing something too large because we already have queued data,\n      // that guarantees when the data is flushed we will emit the alertOnDequeue event.\n    return (this._queuedDataSize === 0 ||\n            ((datalen + this._queuedDataSize) <= this._sendBufferMaxSize));\n  }\n\n  enqueueFailNoSpace() {\n    this._canSendNeeded = true;\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  /* override me */\n  flush(callback) { // eslint-disable-line class-methods-use-this\n    callback();\n  }\n\n  getQueuedDataToSend() {\n    // Track messages dequeued.\n    let data = '';\n\n    // Start by trying to fill a complete payload.\n    let bytesAllowed = this._maxPayloadBytes;\n    LOG_TRACE(`getQueuedDataToSend: bytesAllowed=${bytesAllowed}, bufferedAmount=${this.getBufferedAmount ? this.getBufferedAmount() : 'undefined'}`);\n    if (this.getBufferedAmount) {\n      bytesAllowed = this._maxPayloadBytes - this.getBufferedAmount();\n      if (bytesAllowed <= 0) {\n        LOG_DEBUG(`$$ bytesAllowed=${bytesAllowed}, maxPayloadBytes=${this._maxPayloadBytes\n                  }, bufferedAmount=${this.getBufferedAmount()}`);\n        if (BUILD_ENV.TARGET_BROWSER &&\n            (this._bufferedAmountQueryIntervalInMsecs *\n              this._bufferedAmountQueryIntervalDelayMultiplier <=\n              MAX_BUFFERED_AMOUNT_QUERY_INTERVAL_MS)) {\n          this._bufferedAmountQueryIntervalDelayMultiplier *= 2;\n        }\n        return data;\n      }\n      if (BUILD_ENV.TARGET_BROWSER) {\n        this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n      }\n    }\n\n    if (this._queuedDataSize > bytesAllowed) {\n      let payloadSize = bytesAllowed;\n      // Slow path: dequeue and append until we fill the payload.\n      while (payloadSize && this._queuedDataSize) {\n        // Is this element larger than the payload?\n        const elem = this._queuedData[0];\n        const elemLength = elem.length;\n        if (elemLength > payloadSize) {\n          // This element is larger than the payload.\n          data += elem.substr(0, payloadSize);\n          this._queuedData[0] = elem.substr(payloadSize);\n\n          // The rest of the payload space was consumed.\n          this._queuedDataSize -= payloadSize;\n          payloadSize = 0;\n        } else {\n          data += this._queuedData.shift();\n          payloadSize -= elemLength;\n          this._queuedDataSize -= elemLength;\n          this._clientstats.msgWritten++;\n        }\n      }\n    } else {\n      // Shortcut: use the whole buffer, increase the message sent count by the length of the size\n      // queue, and reset the buffer.\n      data = this._queuedData.join('');\n      this._clientstats.msgWritten += this._queuedData.length;\n\n      this._queuedData = [];\n      this._queuedDataSize = 0;\n    }\n\n    LOG_DEBUG(`Sending ${data.length} bytes from queued data`);\n    return data;\n  }\n}\n\nmodule.exports.WebTransportSessionBase = WebTransportSessionBase;\n","const { Enum } = require('solclient-eskit');\n\n// WebTransport states, used by WebTransport\nconst WebTransportState = {\n  DOWN:        'WebTransportDown',\n  CONNECTING:  'WebTransportConnecting',\n  DOWNGRADING: 'WebTransportDowngrading',\n  DESTROYING:  'WebTransportDestroying',\n  UP:          'WebTransportUp',\n};\n\nmodule.exports.WebTransportState = Enum.new(WebTransportState);\n","const {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst {\n  HTTPTransportSession,\n} = require('./http');\nconst {\n  LOG_TRACE,\n  LOG_INFO,\n  LOG_ERROR,\n} = require('solclient-log');\nconst { FsmEvent } = require('solclient-fsm');\nconst { TransportBase } = require('../transport-base');\nconst { TransportProtocol } = require('../transport-protocols');\nconst { TransportProtocolHandler } = require('../transport-protocol-handler');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { WebSocketTransportSession } = require('./websocket-transport-session');\nconst { WebTransportEvent } = require('./web-transport-events');\nconst { WebTransportFSM } = require('./web-transport-fsm');\n\n/**\n * @classdesc\n * This class manages all the web based transport protocols.\n * <ul>\n *     <li>{@link TransportProtocol.HTTP_BASE64}\n *     <li>{@link TransportProtocol.HTTP_BINARY}\n *     <li>{@link TransportProtocol.HTTP_BINARY_STREAMING}\n *     <li>{@link TransportProtocol.WS_BINARY}\n * </ul>\n * @extends TransportBase\n * @private\n */\nclass WebTransport extends TransportBase {\n\n  /**\n   * @constructor\n   * @param {URL} url The url to connect to\n   * @param {Function} eventCB The callback for transport events\n   * @param {BaseSMFClient} client An SMF client instance\n   * @param {Object} props Additional transport properties\n   * @param {Function} getId A function that returns this transport's unique ID\n   */\n  constructor(url, eventCB, client, props, getId) {\n    super(url, eventCB, client, props);\n    LOG_TRACE(`webTransportProtocolList ${props.webTransportProtocolList}`);\n    this._transportHandler = new TransportProtocolHandler(url, props.webTransportProtocolList);\n    this._webTransportFsm = new WebTransportFSM(this, getId);\n    this._webTransportFsm.start();\n  }\n\n  notifyEvent(event) {\n    this._eventCB(event);\n  }\n\n  handleDestroyed() {\n    this._transportSession = null;\n  }\n\n  handleTransportEvent(transportEvent) {\n    LOG_INFO(`Web transport receive transport event: ${transportEvent}`);\n    let wEvent;\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportSessionEventCode.UP_NOTICE:\n        wEvent = new FsmEvent({ name: WebTransportEvent.UP_NOTICE });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.DESTROYED_NOTICE:\n        this.handleDestroyed();\n        wEvent = new FsmEvent({ name: WebTransportEvent.DESTROYED_NOTICE });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.SEND_ERROR:\n        wEvent = new FsmEvent({ name: WebTransportEvent.SEND_ERROR });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.CONNECT_TIMEOUT:\n        wEvent = new FsmEvent({ name: WebTransportEvent.CONNECT_TIMEOUT });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.DOWNGRADE_FAILED:\n        this._lastDowngradeSucceeded = false;\n        break;\n\n      case TransportSessionEventCode.DOWNGRADE_SUCCEEDED:\n        this._lastDowngradeSucceeded = true;\n        break;\n\n      default:\n        // All other transport events have no effect on the web transport and are passed through\n        this._eventCB(transportEvent);\n    }\n  }\n\n  /**\n   * @override\n   */\n  connect() {\n    const wEvent = new FsmEvent({ name: WebTransportEvent.CONNECT });\n    this._webTransportFsm.processEvent(wEvent);\n    return TransportReturnCode.OK;\n  }\n\n  connectInternal() {\n    this._transportSession = null;\n    const tpProtocol = this._transportHandler.getTransportProtocol();\n    this._props.transportProtocol = tpProtocol;\n    switch (tpProtocol) {\n      case TransportProtocol.HTTP_BASE64:\n      case TransportProtocol.HTTP_BINARY:\n      case TransportProtocol.HTTP_BINARY_STREAMING:\n        this._transportSession = new HTTPTransportSession(\n          this._url,\n          evt => this.handleTransportEvent(evt),\n          this._client,\n          this._props\n        );\n        break;\n\n      case TransportProtocol.WS_BINARY:\n        this._transportSession = new WebSocketTransportSession(\n          this._url,\n          evt => this.handleTransportEvent(evt),\n          this._client,\n          this._props\n        );\n        break;\n\n      default:\n        LOG_ERROR(`Web transport unrecognized TransportProtocol: ${tpProtocol}`);\n        throw new OperationError(`No transport session provider for scheme: ${tpProtocol}`,\n                                 ErrorSubcode.CONNECTION_ERROR,\n                                 tpProtocol);\n    }\n\n    LOG_INFO(`Connect Transport ${tpProtocol}`);\n    return this._transportSession.connect();\n  }\n\n  /**\n   * @override\n   */\n  destroy(msg, subcode) {\n    const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n    wEvent._destroyMsg = msg;\n    wEvent._subcode = subcode;\n    this._webTransportFsm.processEvent(wEvent);\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @param {String} msg The message associated with the downgrade\n   * @param {ErrorSubcode} subcode The subcode associated with the downgrade\n   * @returns {Boolean} `true` if there are downgrade options available. `false` otherwise.\n   * @private\n   */\n  beginDowngrade(msg, subcode) {\n    if (this._transportHandler.canCompleteDowngrade()) {\n      LOG_TRACE('Web transport downgrade');\n      // Destroy the underlying transport session\n      // This will asynchronously cause DESTROYED_NOTICE to be emitted.\n      // The receiver can then call completeDowngrade, which will complete the downgrade.\n      this.destroyInternal(msg, subcode);\n      return true;\n    }\n    LOG_TRACE('Web transport downgrade rejected');\n    return false;\n  }\n\n  completeDowngrade() {\n    if (!this._transportHandler.canCompleteDowngrade()) {\n      return false;\n    }\n    return this._transportHandler.completeDowngrade();\n  }\n\n  destroyInternal(msg, subcode) {\n    if (this._transportSession) {\n      this._transportSession.destroy(msg, subcode);\n    }\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    return this._transportSession.flush(callback);\n  }\n\n  getConnError() {\n    if (this._transportSession) {\n      return this._transportSession._connError;\n    }\n    return null;\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    if (this._transportSession) {\n      return this._transportSession.getInfoStr();\n    }\n    return 'Not connected.';\n  }\n\n  /**\n   * @override\n   */\n  getTransportProtocol() {\n    return this._transportHandler.getTransportProtocol();\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    if (this._transportSession) {\n      return this._transportSession.getClientStats();\n    }\n    return null;\n  }\n\n  /**\n   * @override\n   */\n  requestDowngrade(msg, subcode) {\n    LOG_TRACE('Creating downgrade request event');\n    this._lastDowngradeSucceeded = undefined; // will be reset by handler for TS DOWNGRADE_ events\n    const wEvent = new FsmEvent({ name: WebTransportEvent.DOWNGRADE });\n    wEvent._downgradeMsg = msg;\n    wEvent._subcode = subcode;\n    this._webTransportFsm.processEvent(wEvent);\n    return this._lastDowngradeSucceeded;\n  }\n\n  /**\n   * @override\n   */\n  send(message, forceAllowEnqueue) {\n    return this._transportSession.send(message, forceAllowEnqueue);\n  }\n}\n\nmodule.exports.WebTransport = WebTransport;\n","module.exports.WebSocketCloseCodes = {\n  0: {\n    name:        'Unknown code',\n    description: 'No status code was returned by the operation',\n  },\n  1000: {\n    name:        'Normal Closure',\n    description: 'The connection closed normally',\n  },\n  1001: {\n    name:        'Going Away',\n    description: 'The endpoint is going away due to a server failure or client navigation',\n  },\n  1002: {\n    name:        'Protocol Error',\n    description: 'A WebSocket protocol error occurred',\n  },\n  1003: {\n    name:        'Unsupported Data',\n    description: 'The endpoint cannot handle the specified data type',\n  },\n  1004: {\n    name:        'Reserved',\n    description: '',\n  },\n  1005: {\n    name:        'No Status Recvd',\n    description: 'Expected a status code but none was provided',\n  },\n  1006: {\n    name:        'Abnormal Closure',\n    description: 'No close frame was received before remote hangup',\n  },\n  1007: {\n    name:        'Invalid Frame Payload Data',\n    description: 'A message contained data inconsistent with its encoding',\n  },\n  1008: {\n    name:        'Policy Violation',\n    description: 'A message violated endpoint policy',\n  },\n  1009: {\n    name:        'Message Too Big',\n    description: 'A data frame was too large',\n  },\n  1010: {\n    name:        'Missing Extension',\n    description: 'The endpoint did not negotiate an expected extension',\n  },\n  1011: {\n    name:        'Internal Error',\n    description: 'The server encountered an unexpected condition that prevented it from fulfilling the request',\n  },\n  1012: {\n    name:        'Service Restart',\n    description: 'The server is restarting',\n  },\n  1013: {\n    name:        'Try Again Later',\n    description: 'The server is terminating the connection due to a temporary condition',\n  },\n  1014: {\n    name:        'Bad Gateway',\n    description: 'A gateway or proxy received an invalid response from the upstream server',\n  },\n  1015: {\n    name:        'TLS Handshake',\n    description: 'The connection was closed due to a failure to perform a TLS handshake',\n  },\n};\n","const {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n  LOG_ERROR } = require('solclient-log');\n\nconst { ArrayUtils } = require('solclient-util');\nconst { Convert,\n        Hex } = require('solclient-convert');\nconst { ErrorSubcode } = require('solclient-error');\nconst { mixin } = require('solclient-eskit');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\nconst { WebSocketCloseCodes } = require('./websocket-close-codes');\nconst { WebTransportSessionBase } = require('./web-transport-session-base');\n\nconst http = require('http');\nconst https = require('https');\n\nconst {\n  stringToArrayBuffer,\n} = Convert;\nconst {\n  formatHexString,\n} = Hex;\nconst {\n  includes,\n} = ArrayUtils;\n\n/* eslint-env browser */\n// closure mangles window.WebSocket\nconst globalContext = (typeof window === 'undefined' ? global : window);\nlet MyWebSocket = globalContext.WebSocket;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-disable no-global-assign */\n  /* eslint-disable global-require */\n  MyWebSocket = /** @type {WebSocket} */ (require('ws'));\n  /* eslint-enable no-global-assign */\n  /* eslint-enable global-require */\n}\n/* eslint-env shared-browser-node */\n\nfunction adaptURL(url) {\n  const v = url.match(/(ws|http)(s?:\\/\\/.+)/);\n  return `ws${v[2]}`;\n}\n\n\n/**\n * @classdesc\n * @private\n * @memberof solace\n */\nclass WebSocketTransportSession extends WebTransportSessionBase {\n\n  /**\n   * @constructor\n   * @param {String} url The url to connect to\n   * @param {function} eventCB The callback for transport events\n   * @param {SMFClient} client The SMF client for data events\n   * @param {Object} props Properties for the transport session\n   */\n  constructor(url, eventCB, client, props) {\n    super(url, eventCB, client, props);\n    /**\n     * @type {String}\n     */\n    this._url = adaptURL(url);\n\n    /**\n     * @type {?WebSocket}\n     */\n    this._socket = null;\n\n    /**\n     * @type {?string}\n     */\n    this._sessionId = new Date().getTime();\n\n    if (BUILD_ENV.TARGET_BROWSER) {\n      /**\n       * @type {Number}\n       */\n      this._bufferedAmountQueryIntervalInMsecs = props.bufferedAmountQueryIntervalInMsecs;\n      /**\n       * @type {?number}\n       */\n      this._bufferedAmountQueryTimer = null;\n      /**\n       * @type {Number}\n       */\n      this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n    }\n  }\n\n\n  /**\n   * @private\n   */\n  onOpen() {\n    this.cancelConnectTimeout();\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(\n          new TransportSessionEvent(\n              TransportSessionEventCode.UP_NOTICE,\n              'Connected',\n              0,\n              null,\n              this._sessionId));\n  }\n\n  /**\n   * @param {Socket} originalSocket bound at the time of callback registration,\n   * safety against stray calls after socket is destroyed.\n   * @param {Event} event The websocket event causing the close\n   * @private\n   */\n  onClose(originalSocket, event) {\n    if (originalSocket !== this._socket) {\n      LOG_DEBUG('Websocket Transport Session stray onClose for previous socket, ignoring.');\n      return;\n    }\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('WebSocket transport is being destroyed, ignore error');\n      return;\n    }\n    const msgBuf = [];\n    const code = WebSocketCloseCodes[event.code] || WebSocketCloseCodes[0];\n    msgBuf.push(`${event.code} ${code.name} (${code.description})`);\n    if (event.wasClean !== undefined) {\n      msgBuf.push(`clean closure: ${event.wasClean}`);\n    }\n    if (event.reason) {\n      msgBuf.push(`reason: ${event.reason}`);\n    }\n    const msg = msgBuf.join(', ');\n    LOG_DEBUG(`WebSocket transport connection is closed ${msg}`);\n    LOG_TRACE(`Event { type: ${event.type} wasClean: ${event.wasClean} code: ${event.code} reason: ${event.reason} }`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    this.destroy(`Connection closed: ${msg}`, ErrorSubcode.COMMUNICATION_ERROR);\n  }\n\n  onDrain() {\n    LOG_TRACE('Drained socket');\n    this.maybeEmitCanSend();\n    this.maybeEmitFlush();\n  }\n\n  onBufferedAmountPoll() {\n    if (this.getBufferedAmount() === 0) {\n      this.onDrain();\n    } else if (this.scheduleQuery) {\n      this.scheduleQuery();\n    }\n  }\n\n  /**\n   * @param {Socket} originalSocket bound at callback registration.\n   * @param {TransportSessionEvent} event The event causing the error\n   * @private\n   */\n  onError(originalSocket, event) {\n    LOG_INFO(`Websocket Transport Session onError for socket ${originalSocket} while socket is ${this._socket}`);\n    if (originalSocket !== this._socket) {\n      LOG_INFO('Websocket Transport Session stray onError for previous socket, ignoring.');\n      return;\n    }\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_INFO('WebSocket transport is being destroyed, ignore error');\n      return;\n    }\n    const msg = (event.message) ? (`: ${event.message}`) : '';\n    LOG_INFO(`WebSocket transport connection error ${msg} while in state ${this._state}`);\n    // There won't be an onClose call to clean up unless we are connected already.\n    if (this._state === TransportSessionState.WAITING_FOR_CONNECT) {\n      this.cancelConnectTimeout();\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.destroy(`Connection failed: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n    } else { // Sending error event only, onClose will clean up in due time.\n      this._eventCB(\n            new TransportSessionEvent(\n                TransportSessionEventCode.SEND_ERROR,\n                `Connection error${msg}`,\n                null,\n                ErrorSubcode.CONNECTION_ERROR, null));\n    }\n  }\n\n  /**\n   * @param {TransportSessionEvent} event The data event\n   * @private\n   */\n  onMessage(event) {\n    if (this._client) {\n      this._client.rxDataArrayBuffer(event.data);\n    }\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  connectTimerExpiry() {\n    LOG_INFO('WebSocket transport connect timeout');\n    this.state = TransportSessionState.CONNECTION_FAILED;\n    this._eventCB(new TransportSessionEvent(\n      TransportSessionEventCode.CONNECT_TIMEOUT,\n      'Connection timed out',\n      null,\n      ErrorSubcode.TIMEOUT\n    ));\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  connect() {\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_ERROR(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (!this._url) {\n      LOG_WARN('Cannot connect to null URL');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n    if (this._socket) {\n      this.onError('Socket already connected');\n    }\n\n    LOG_INFO('Establishing WebSocket transport session');\n    try {\n      this.createConnectTimeout();\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n      if (BUILD_ENV.TARGET_NODE && !this._socketOptions) {\n        LOG_DEBUG('Creating Node websocket options');\n        this._socketOptions = this.createWebSocketOptions(this.onDrain.bind(this));\n      }\n      LOG_INFO('Constructing socket');\n      if (BUILD_ENV.TARGET_BROWSER) {\n        /**\n         * @type {WebSocket}\n         */\n        this._socket = new MyWebSocket(this._url, 'smf.solacesystems.com');\n      } else {\n        this._socket = new MyWebSocket(this._url, 'smf.solacesystems.com', this._socketOptions);\n        this._socket.ondrain = this.onDrain.bind(this);\n      }\n      // Closure is generally faster than bind\n      LOG_TRACE('Assigning properties to socket');\n      // Closure using Browser profile to avoid mangling this\n      this._socket.binaryType = 'arraybuffer';\n      this._socket.onopen = this.onOpen.bind(this);\n      this._socket.onmessage = this.onMessage.bind(this);\n      this._socket.onclose = this.onClose.bind(this, this._socket);\n      this._socket.onerror = this.onError.bind(this, this._socket);\n      LOG_TRACE('Prepared socket');\n    } catch (error) {\n      LOG_INFO(`Error connecting: ${error.message}`);\n      LOG_TRACE('Error details', error.stack || error);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.cancelConnectTimeout();\n      if (error instanceof TransportError) {\n        this._connError = error;\n      } else {\n        throw new TransportError(`Could not create WebSocket: ${error.message}`,\n                                 error.subcode || ErrorSubcode.CONNECTION_ERROR);\n      }\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    LOG_INFO('WebSocket is connecting');\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @param {String} data The binary string data to send.\n   * @param {Boolean} [force=false] If true, send even if buffer is full.\n   */\n  send(data, force = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    const dataLen = data.length;\n    const bufferAllow = (this._sendBufferMaxSize - this.getBufferedAmount()) >= 0;\n    // LOG_DEBUG('Websocket send:', dataLen, force, bufferAllow);\n    if (!(force || bufferAllow)) {\n      this._canSendNeeded = true;\n      if (this.scheduleQuery) this.scheduleQuery();\n      return TransportReturnCode.NO_SPACE;\n    }\n\n    // LOG_TRACE(`websocket.send: len=${data.length}`);\n    // Slice messages per maxPayloadBytes\n    const maxPayloadBytes = this._maxPayloadBytes;\n    const ab = stringToArrayBuffer(data);\n    if (dataLen > maxPayloadBytes) {\n      for (let i = 0; i < dataLen; i += maxPayloadBytes) {\n        this._socket.send(ab.slice(i, i + maxPayloadBytes));\n      }\n    } else {\n      this._socket.send(ab);\n    }\n    // LOG_TRACE(`websocket.send: after send getBufferedAmount=${this.getBufferedAmount()}`);\n    this._clientstats.bytesWritten += dataLen;\n    ++this._clientstats.msgWritten;\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @returns {Number} The number of already buffered bytes in this transport.\n   * @private\n   */\n  getBufferedAmount() {\n    // Access as string property because this is a defineProperty on node websocket,\n    // meaning it is not mangled by Closure Compiler\n    return this._socket ? this._socket['bufferedAmount'] : 0; // eslint-disable-line dot-notation\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    this._flushCallback = callback;\n    this.maybeEmitFlush();\n  }\n\n  maybeEmitCanSend() {\n    if (this._canSendNeeded && this.getBufferedAmount() < this._sendBufferMaxSize) {\n      LOG_TRACE('Transport emitting CAN_ACCEPT_DATA');\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '', null, 0, this._sessionId));\n    }\n  }\n\n  maybeEmitFlush() {\n    if (!this._flushCallback) return;\n    if (BUILD_ENV.TARGET_BROWSER && this.getBufferedAmount() > 0) {\n      // Ensure we have a query scheduled, but don't interrupt a query in progress\n      if (!this._bufferedAmountQueryTimer) {\n        this.scheduleQuery();\n      }\n      return;\n    }\n\n    // Node is automatically flushed by socket.end(), which is called in non-error cases\n    LOG_DEBUG('Transport emitting FLUSH');\n    const cb = this._flushCallback;\n    this._flushCallback = null;\n    cb();\n  }\n\n  /**\n   * @override\n   */\n  destroy(message, subcode) {\n    // We can destroy (and get a notice) even if the socket is freshly created.\n    // But this will only work once.\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_INFO(`Destroy WebSocket transport: ${message}`);\n\n      // Set state for connection teardown.\n      this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n      if (this._socket) {\n        this._socket.close();\n        this._socket.onopen = null;\n        this._socket.onmessage = null;\n        this._socket.onclose = null;\n        this._socket.onerror = function onerrorStub() { }; // Prevent unhandled errors\n        this._socket = null;\n      }\n\n      if (this._connectTimer) {\n        clearTimeout(this._connectTimer);\n        this._connectTimer = undefined;\n      }\n\n      if (BUILD_ENV.TARGET_BROWSER) {\n        this.cancelQuery();\n        this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n      }\n\n      this._canSendNeeded = false;\n\n      this._state = TransportSessionState.DOWN;\n\n      this._client = null; // Don't accept data.\n    }\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    if (this._eventCB) {\n      // Fire this *almost* instantly, but follow the HTTP\n      // transport pattern by guaranteeing an async callback.\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                              message || 'Session is destroyed',\n                                              null,\n                                              subcode || 0,\n                                              this._sessionId));\n      // Release references to other components\n      this._eventCB = null;\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @returns {String} A description of this object.\n   */\n  getInfoStr() {\n    const str = `WebSocketTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n  static browserSupportsBinaryWebSockets() {\n    LOG_DEBUG('websocket browserSupportBinaryCheck - ' +\n              'if WebSocket, ArrayBuffer and Uint8Array are supported');\n\n    const exists = ['function', 'object'];\n    if (!includes(exists, typeof MyWebSocket) ||\n        !includes(exists, typeof ArrayBuffer) ||\n        !includes(exists, typeof Uint8Array)) {\n      LOG_INFO('websocket browserSupportBinaryCheck: false - some required classes not supported');\n      return false;\n    }\n\n    LOG_DEBUG('websocket browserSupportBinaryCheck - if WebSocket supports binaryType');\n    if ('binaryType' in MyWebSocket.prototype) {\n      LOG_INFO('websocket browserSupportBinaryCheck: true - WebSocket supports binaryType');\n      return true;\n    }\n\n    LOG_INFO('websocket browserSupportBinaryCheck: false - WebSocket does not support binaryType');\n    return false;\n  }\n\n}\n\nif (BUILD_ENV.TARGET_BROWSER) {\n  mixin(WebSocketTransportSession, class WebSocketTransportSessionBrowser {\n    /**\n     * @private\n     */\n    scheduleQuery() {\n      const bufferedAmount = this.getBufferedAmount();\n      if (bufferedAmount > 0 && this._bufferedAmountQueryIntervalInMsecs > 0) {\n        this.cancelQuery();\n        if (this._bufferedAmountQueryIntervalDelayMultiplier > 1) {\n          LOG_DEBUG(`$$ schedule bufferedAmount query timer in ${\n                    this._bufferedAmountQueryIntervalInMsecs *\n                    this._bufferedAmountQueryIntervalDelayMultiplier} ms`);\n        }\n        const timeout = this._bufferedAmountQueryIntervalInMsecs *\n                        this._bufferedAmountQueryIntervalDelayMultiplier;\n        this._bufferedAmountQueryTimer = setTimeout(() => {\n          this.cancelQuery();\n          try {\n            this.onBufferedAmountPoll();\n          } catch (e) {\n            LOG_ERROR(`Error occurred in onBufferedAmountPoll: ${e.message}`);\n            LOG_TRACE('Error details:', e.stack || e);\n          }\n        }, timeout);\n      }\n    }\n\n    cancelQuery() {\n      if (this._bufferedAmountQueryTimer) {\n        clearTimeout(this._bufferedAmountQueryTimer);\n        this._bufferedAmountQueryTimer = null;\n      }\n    }\n  });\n} else {\n  // Node TLS socket options formulation shared with TCP transport\n  // eslint-disable-next-line global-require\n  const { NodeTLSOptsMixin } = require('../node-tls-opts-mixin');\n  mixin(WebTransportSessionBase, NodeTLSOptsMixin);\n  // Node-specific methods of this class go here\n  mixin(WebTransportSessionBase, class WebTransportSessionBaseNode {\n\n    /**\n     * @name solace.WebTransportSession#createWebSocketOptions\n     * @param {Function} onDrainCallback handler function for socket onDrain event\n     * @returns {Object} A WebSocket options object for the current configuration\n     * @private\n     */\n    createWebSocketOptions(onDrainCallback) {\n      let options = {};\n      if (this._ssl) {\n        options = this.createTLSOptions();\n        // use custom agent for client certificate support, ssl resume session support\n        // eslint-disable-next-line dot-notation\n        options['agent'] = new https.Agent({\n          keepAlive: false,\n        });\n      } else { // else no TLS:\n        // eslint-disable-next-line dot-notation\n        options['agent'] = new http.Agent();\n      }\n      // eslint-disable-next-line dot-notation\n      const wsAgent = options['agent'];\n      const origCreateConnection = wsAgent.createConnection;\n      wsAgent.createConnection = function newCreateConnection(opts, callback) {\n        const socket = origCreateConnection.call(this, opts, callback);\n        socket.on('drain', onDrainCallback);\n        return socket;\n      };\n      LOG_DEBUG('WebSocket options', options);\n      return options;\n    }\n  });\n}\n\nmodule.exports.WebSocketTransportSession = WebSocketTransportSession;\n","const { APIProperties } = require('./lib/api-properties');\nconst { APIPropertiesValidators } = require('./lib/api-properties-validators');\nconst { ArrayUtils } = require('./lib/array-utils');\nconst { parseURL } = require('./lib/url');\nconst { Process } = require('./lib/process');\nconst { StringBuffer } = require('./lib/string-buffer');\nconst { StringUtils } = require('./lib/string-utils');\nconst { TimingBucket } = require('./lib/timing-bucket');\nconst { UUID } = require('./lib/uuid');\nconst { Version } = require('./lib/version');\n\nmodule.exports = {\n  parseURL,\n\n  APIProperties,\n  APIPropertiesValidators,\n  ArrayUtils,\n  Process,\n  StringBuffer,\n  StringUtils,\n  TimingBucket,\n  UUID,\n  Version,\n};\n","const { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst APIPropertiesValidators = {\n  validateInstance(typeDesc, instance, name, ...args) {\n    args.forEach((check) => {\n      const validator = check.shift();\n      const validatorArgs = [typeDesc, instance, name, ...check];\n      validator(...validatorArgs);\n    });\n  },\n\n  valInstance(typeDesc, instance, name, typeInstance, typeInstanceDesc) {\n    if (!Check.instanceOf(instance[name], typeInstance)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                               }' must be instance of ${typeInstanceDesc}`);\n    }\n  },\n\n  valNotEmpty(typeDesc, instance, name) {\n    if (Check.none(instance[name]) || instance[name] === '') {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' cannot be empty.`,\n                             ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valLength(typeDesc, instance, name, max) {\n    if (Check.string(instance[name]) && instance[name].length > max) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' exceeded max length ${max}`,\n                             ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valRange(typeDesc, instance, name, min, max) {\n    if (Check.number(instance[name]) && (instance[name] < min || instance[name] > max)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' out of range [${min}; ${max}].`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valString(typeDesc, instance, name) {\n    if (!Check.string(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type string; was ${typeof instance[name]}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valNumber(typeDesc, instance, name) {\n    if (!Check.number(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type number; was ${typeof instance[name]}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valBoolean(typeDesc, instance, name) {\n    const val = instance[name];\n    if (!Check.boolean(val)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type boolean; was ${typeof val}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valIsMember(typeDesc, instance, key, enumInstance, enumName, allowNull = false) {\n    const val = instance[key];\n    if (allowNull && (val === null || val === undefined)) return;\n    if (enumInstance.values.indexOf(val) >= 0) return;\n    throw new OperationError(`${typeDesc} validation: Property '${key\n                             }'=${val} must be a member of ${enumName}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n  },\n\n  valStringOrArray(typeDesc, instance, name) {\n    const val = instance[name];\n    if (typeof val !== 'string' && !Array.isArray(val)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' must be a string or array`,\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valArrayIsMember(typeDesc, instance, name, enumInstance, enumName,\n                   allowUndefined, allowEmpty, allowDuplicate) {\n    const val = instance[name];\n    if ((val === undefined || val === null)) {\n      if (allowUndefined) {\n        return;\n      }\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' must be type Array`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    if (!Array.isArray(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' must be type Array`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (!allowEmpty && instance[name].length === 0) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' cannot be empty`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    instance[name].forEach((ele, index) => {\n      if (!enumInstance.values.includes(ele)) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' must be an array of ${enumName}`,\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (!allowDuplicate) {\n        if (instance[name].indexOf(ele, index + 1) >= 0) {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                          }' cannot have duplicate element value`,\n                          ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n    });\n  },\n\n  valArrayOfString(typeDesc, instance, name) {\n    const val = instance[name];\n    if (Check.something(val)) {\n      if (!Array.isArray(val)) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                               }' must be type Array`,\n                               ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      val.forEach((ele) => {\n        if (typeof ele !== 'string') {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                                 }' must be an array of string`,\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n      });\n    }\n  },\n\n  valTopicString(typedesc, instance, name) {\n    // Pardon this late import. I need to break a circular dependency.\n    // eslint-disable-next-line global-require\n    const { DestinationUtil, DestinationType } = require('solclient-destination');\n    module.exports.APIPropertiesValidators.valString(typedesc, instance, name);\n    const val = instance[name];\n    const result = DestinationUtil.validateAndEncode(DestinationType.TOPIC, val);\n    if (result.error) {\n      throw new OperationError(`${typedesc} validation: Property '${name}' must be ` +\n                               `a valid topic string: ${result.error}`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valTopicStringOrEmpty(typedesc, instance, name) {\n    const val = instance[name];\n    if (val && val.length) {\n      module.exports.APIPropertiesValidators.valTopicString(typedesc, instance, name);\n    }\n  },\n};\n\nmodule.exports.APIPropertiesValidators = APIPropertiesValidators;\n","const cloneObj = require('clone');\n\nconst CLONE_CIRCULAR = false; // If true, handles circular references safely.\nconst CLONE_DEPTH = 1; // Don't deep-clone nested values.\n\n/**\n * @memberof solace\n * @private\n */\nclass APIProperties {\n\n  /**\n   * Base class for all API properties structures. Provides the clone() method to\n   * make all properties cloneable.\n   * Creates an instance of APIProperties. Assigns properties from one or more\n   * objects in increasing priority order.\n   *\n   * @example\n   * super({ foo: 'defaultFoo', bar: 42 }, { foo: 'quux' }); // .foo == quux, .bar = 42\n   *\n   * @param {...any} options The properties sources to assign.\n   *\n   * @since 10.0.0\n   * @constructor\n   */\n  constructor(...options) {\n    Object.assign(this, ...options);\n  }\n\n  /**\n   * Can be overridden.  For instance sessionProperties\n   * overrides this to suppress printing the password.\n   * @returns {String} The string representation of this object\n   * @private\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  clone() {\n    return cloneObj(this, CLONE_CIRCULAR, CLONE_DEPTH);\n  }\n}\n\nmodule.exports.APIProperties = APIProperties;\n","function flatten(array) {\n  return array.reduce((acc, el) => acc.concat(Array.isArray(el) ? flatten(el) : el), []);\n}\n\nfunction includes(array, el) {\n  return array.some(v => v === el);\n}\n\nmodule.exports.ArrayUtils = {\n  flatten,\n  includes,\n};\n","/* Any copyright is dedicated to the Public Domain.\n * http://creativecommons.org/publicdomain/zero/1.0/ */\n/* eslint-disable no-restricted-syntax */\n/* eslint-disable no-labels */\n/* eslint-env browser */\nmodule.exports = function (scope) {\n  // feature detect for URL constructor\n  let hasWorkingUrl = false;\n  if (!scope.forceJURL) {\n    try {\n      const u = new URL('b', 'http://a');\n      u.pathname = 'c%20d';\n      hasWorkingUrl = u.href === 'http://a/c%20d';\n    } catch (e) {\n      // no problem\n    }\n  }\n\n  if (hasWorkingUrl) {\n    return;\n  }\n\n  // Otherwise the keys get minified.\n  /* eslint-disable dot-notation */\n  const relative = Object.create(null);\n  relative['ftp'] = 21;\n  relative['file'] = 0;\n  relative['gopher'] = 70;\n  relative['http'] = 80;\n  relative['https'] = 443;\n  relative['ws'] = 80;\n  relative['wss'] = 443;\n  /* eslint-enable dot-notation */\n\n  const relativePathDotMapping = Object.create(null);\n  relativePathDotMapping['%2e'] = '.';\n  relativePathDotMapping['.%2e'] = '..';\n  relativePathDotMapping['%2e.'] = '..';\n  relativePathDotMapping['%2e%2e'] = '..';\n\n  function clear() {\n    this._scheme = '';\n    this._schemeData = '';\n    this._username = '';\n    this._password = null;\n    this._host = '';\n    this._port = '';\n    this._path = [];\n    this._query = '';\n    this._fragment = '';\n    this._isInvalid = false;\n    this._isRelative = false;\n  }\n\n  function isRelativeScheme(scheme) {\n    return relative[scheme] !== undefined;\n  }\n\n  function invalid() {\n    clear.call(this);\n    this._isInvalid = true;\n  }\n\n  function IDNAToASCII(h) {\n    if (h === '') {\n      invalid.call(this);\n    }\n    // TODO: more robust\n    return h.toLowerCase();\n  }\n\n  function percentEscape(c) {\n    const unicode = c.charCodeAt(0);\n    if (unicode > 0x20 &&\n       unicode < 0x7F &&\n       // \" # < > ? `\n       [0x22, 0x23, 0x3C, 0x3E, 0x3F, 0x60].indexOf(unicode) === -1\n      ) {\n      return c;\n    }\n    return encodeURIComponent(c);\n  }\n\n  function percentEscapeQuery(c) {\n    // TODO: This actually needs to encode c using encoding and then\n    // convert the bytes one-by-one.\n\n    const unicode = c.charCodeAt(0);\n    if (unicode > 0x20 &&\n       unicode < 0x7F &&\n       // \" # < > ` (do not escape '?')\n       [0x22, 0x23, 0x3C, 0x3E, 0x60].indexOf(unicode) === -1\n      ) {\n      return c;\n    }\n    return encodeURIComponent(c);\n  }\n\n  let EOF;\n  const ALPHA = /[a-zA-Z]/;\n  const ALPHANUMERIC = /[a-zA-Z0-9+\\-.]/;\n\n  function parse(input, stateOverride, base) {\n    const errors = [];\n    function err(message) {\n      errors.push(message);\n    }\n\n    let state = stateOverride || 'scheme start';\n    let cursor = 0;\n    let buffer = '';\n    let seenAt = false;\n    let seenBracket = false;\n\n    loop: while ((input[cursor - 1] !== EOF || cursor === 0) && !this._isInvalid) {\n      const c = input[cursor];\n      switch (state) {\n        case 'scheme start':\n          if (c && ALPHA.test(c)) {\n            buffer += c.toLowerCase(); // ASCII-safe\n            state = 'scheme';\n          } else if (!stateOverride) {\n            buffer = '';\n            state = 'no scheme';\n            continue;\n          } else {\n            err('Invalid scheme.');\n            break loop;\n          }\n          break;\n\n        case 'scheme':\n          if (c && ALPHANUMERIC.test(c)) {\n            buffer += c.toLowerCase(); // ASCII-safe\n          } else if (c === ':') {\n            this._scheme = buffer;\n            buffer = '';\n            if (stateOverride) {\n              break loop;\n            }\n            if (isRelativeScheme(this._scheme)) {\n              this._isRelative = true;\n            }\n            if (this._scheme === 'file') {\n              state = 'relative';\n            } else if (this._isRelative && base && base._scheme === this._scheme) {\n              state = 'relative or authority';\n            } else if (this._isRelative) {\n              state = 'authority first slash';\n            } else {\n              state = 'scheme data';\n            }\n          } else if (!stateOverride) {\n            buffer = '';\n            cursor = 0;\n            state = 'no scheme';\n            continue;\n          } else if (EOF === c) {\n            break loop;\n          } else {\n            err(`Code point not allowed in scheme: ${c}`);\n            break loop;\n          }\n          break;\n\n        case 'scheme data':\n          if (c === '?') {\n            this._query = '?';\n            state = 'query';\n          } else if (c === '#') {\n            this._fragment = '#';\n            state = 'fragment';\n          } else if (EOF !== c && c !== '\\t' && c !== '\\n' && c !== '\\r') {\n            // TODO: error handling\n            this._schemeData += percentEscape(c);\n          }\n          break;\n\n        case 'no scheme':\n          if (!base || !(isRelativeScheme(base._scheme))) {\n            err('Missing scheme.');\n            invalid.call(this);\n          } else {\n            state = 'relative';\n            continue;\n          }\n          break;\n\n        case 'relative or authority':\n          if (c === '/' && input[cursor + 1] === '/') {\n            state = 'authority ignore slashes';\n          } else {\n            err(`Expected /, got: ${c}`);\n            state = 'relative';\n            continue;\n          }\n          break;\n\n        case 'relative':\n          this._isRelative = true;\n          if (this._scheme !== 'file') { this._scheme = base._scheme; }\n          if (EOF === c) {\n            this._host = base._host;\n            this._port = base._port;\n            this._path = base._path.slice();\n            this._query = base._query;\n            this._username = base._username;\n            this._password = base._password;\n            break loop;\n          } else if (c === '/' || c === '\\\\') {\n            if (c === '\\\\') { err('\\\\ is an invalid code point.'); }\n            state = 'relative slash';\n          } else if (c === '?') {\n            this._host = base._host;\n            this._port = base._port;\n            this._path = base._path.slice();\n            this._query = '?';\n            this._username = base._username;\n            this._password = base._password;\n            state = 'query';\n          } else if (c === '#') {\n            this._host = base._host;\n            this._port = base._port;\n            this._path = base._path.slice();\n            this._query = base._query;\n            this._fragment = '#';\n            this._username = base._username;\n            this._password = base._password;\n            state = 'fragment';\n          } else {\n            const nextC = input[cursor + 1];\n            const nextNextC = input[cursor + 2];\n            if (this._scheme !== 'file' || !ALPHA.test(c) ||\n                (nextC !== ':' && nextC !== '|') ||\n                (\n                  EOF !== nextNextC && nextNextC !== '/' &&\n                  nextNextC !== '\\\\' && nextNextC !== '?' && nextNextC !== '#'\n                )\n              ) {\n              this._host = base._host;\n              this._port = base._port;\n              this._username = base._username;\n              this._password = base._password;\n              this._path = base._path.slice();\n              this._path.pop();\n            }\n            state = 'relative path';\n            continue;\n          }\n          break;\n\n        case 'relative slash':\n          if (c === '/' || c === '\\\\') {\n            if (c === '\\\\') {\n              err('\\\\ is an invalid code point.');\n            }\n            if (this._scheme === 'file') {\n              state = 'file host';\n            } else {\n              state = 'authority ignore slashes';\n            }\n          } else {\n            if (this._scheme !== 'file') {\n              this._host = base._host;\n              this._port = base._port;\n              this._username = base._username;\n              this._password = base._password;\n            }\n            state = 'relative path';\n            continue;\n          }\n          break;\n\n        case 'authority first slash':\n          if (c === '/') {\n            state = 'authority second slash';\n          } else {\n            err(`Expected '/', got: ${c}`);\n            state = 'authority ignore slashes';\n            continue;\n          }\n          break;\n\n        case 'authority second slash':\n          state = 'authority ignore slashes';\n          if (c !== '/') {\n            err(`Expected '/', got: ${c}`);\n            continue;\n          }\n          break;\n\n        case 'authority ignore slashes':\n          if (c !== '/' && c !== '\\\\') {\n            state = 'authority';\n            continue;\n          } else {\n            err(`Expected authority, got: ${c}`);\n          }\n          break;\n\n        case 'authority':\n          if (c === '@') {\n            if (seenAt) {\n              err('@ already seen.');\n              buffer += '%40';\n            }\n            seenAt = true;\n            for (let i = 0; i < buffer.length; i++) {\n              const cp = buffer[i];\n              if (cp === '\\t' || cp === '\\n' || cp === '\\r') {\n                err('Invalid whitespace in authority.');\n                continue;\n              }\n              // TODO: check URL code points\n              if (cp === ':' && this._password === null) {\n                this._password = '';\n                continue;\n              }\n              const tempC = percentEscape(cp);\n              if (this._password !== null) {\n                this._password += tempC;\n              } else {\n                this._username += tempC;\n              }\n            }\n            buffer = '';\n          } else if (EOF === c || c === '/' || c === '\\\\' || c === '?' || c === '#') {\n            cursor -= buffer.length;\n            buffer = '';\n            state = 'host';\n            continue;\n          } else {\n            buffer += c;\n          }\n          break;\n\n        case 'file host':\n          if (EOF === c || c === '/' || c === '\\\\' || c === '?' || c === '#') {\n            if (buffer.length === 2 && ALPHA.test(buffer[0]) &&\n                (buffer[1] === ':' || buffer[1] === '|')) {\n              state = 'relative path';\n            } else if (buffer.length === 0) {\n              state = 'relative path start';\n            } else {\n              this._host = IDNAToASCII.call(this, buffer);\n              buffer = '';\n              state = 'relative path start';\n            }\n            continue;\n          } else if (c === '\\t' || c === '\\n' || c === '\\r') {\n            err('Invalid whitespace in file host.');\n          } else {\n            buffer += c;\n          }\n          break;\n\n        case 'host':\n        case 'hostname':\n          if (c === ':' && !seenBracket) {\n            // TODO: host parsing\n            this._host = IDNAToASCII.call(this, buffer);\n            buffer = '';\n            state = 'port';\n            if (stateOverride === 'hostname') {\n              break loop;\n            }\n          } else if (EOF === c || c === '/' || c === '\\\\' || c === '?' || c === '#') {\n            this._host = IDNAToASCII.call(this, buffer);\n            buffer = '';\n            state = 'relative path start';\n            if (stateOverride) {\n              break loop;\n            }\n            continue;\n          } else if (c !== '\\t' && c !== '\\n' && c !== '\\r') {\n            if (c === '[') {\n              seenBracket = true;\n            } else if (c === ']') {\n              seenBracket = false;\n            }\n            buffer += c;\n          } else {\n            err(`Invalid code point in host/hostname: ${c}`);\n          }\n          break;\n\n        case 'port':\n          if (/[0-9]/.test(c)) {\n            buffer += c;\n          } else if (EOF === c || c === '/' || c === '\\\\' || c === '?' || c === '#'\n                     || stateOverride) {\n            if (buffer !== '') {\n              const temp = parseInt(buffer, 10);\n              if (temp !== relative[this._scheme]) {\n                this._port = `${temp}`;\n              }\n              buffer = '';\n            }\n            if (stateOverride) {\n              break loop;\n            }\n            state = 'relative path start';\n            continue;\n          } else if (c === '\\t' || c === '\\n' || c === '\\r') {\n            err(`Invalid code point in port: ${c}`);\n          } else {\n            invalid.call(this);\n          }\n          break;\n\n        case 'relative path start':\n          if (c === '\\\\') {\n            err(\"'\\\\' not allowed in path.\");\n          }\n          state = 'relative path';\n          if (c !== '/' && c !== '\\\\') {\n            continue;\n          }\n          break;\n\n        case 'relative path':\n          if (EOF === c || c === '/' || c === '\\\\' ||\n              (!stateOverride && (c === '?' || c === '#'))) {\n            if (c === '\\\\') {\n              err('\\\\ not allowed in relative path.');\n            }\n            const tmp = relativePathDotMapping[buffer.toLowerCase()];\n            if (tmp) {\n              buffer = tmp;\n            }\n            if (buffer === '..') {\n              this._path.pop();\n              if (c !== '/' && c !== '\\\\') {\n                this._path.push('');\n              }\n            } else if (buffer === '.' && c !== '/' && c !== '\\\\') {\n              this._path.push('');\n            } else if (buffer !== '.') {\n              if (this._scheme === 'file' && this._path.length === 0 && buffer.length === 2 &&\n                  ALPHA.test(buffer[0]) && buffer[1] === '|') {\n                buffer = `${buffer[0]}:`;\n              }\n              this._path.push(buffer);\n            }\n            buffer = '';\n            if (c === '?') {\n              this._query = '?';\n              state = 'query';\n            } else if (c === '#') {\n              this._fragment = '#';\n              state = 'fragment';\n            }\n          } else if (c !== '\\t' && c !== '\\n' && c !== '\\r') {\n            buffer += percentEscape(c);\n          }\n          break;\n\n        case 'query':\n          if (!stateOverride && c === '#') {\n            this._fragment = '#';\n            state = 'fragment';\n          } else if (EOF !== c && c !== '\\t' && c !== '\\n' && c !== '\\r') {\n            this._query += percentEscapeQuery(c);\n          }\n          break;\n\n        case 'fragment':\n          if (EOF !== c && c !== '\\t' && c !== '\\n' && c !== '\\r') {\n            this._fragment += c;\n          }\n          break;\n\n        default:\n      }\n\n      cursor++;\n    }\n  }\n\n\n  // Does not process domain names or IP addresses.\n  // Does not handle encoding for the query parameter.\n  /* eslint-disable no-param-reassign */\n  function PolyfillURL(url, base /* , encoding */) {\n    if (base !== undefined && !(base instanceof PolyfillURL)) {\n      base = new PolyfillURL(String(base));\n    }\n\n    url = String(url);\n    this._url = url;\n    clear.call(this);\n\n    const input = url.replace(/^[ \\t\\r\\n\\f]+|[ \\t\\r\\n\\f]+$/g, '');\n    // encoding = encoding || 'utf-8'\n\n    parse.call(this, input, null, base);\n  }\n\n  PolyfillURL.prototype = {\n    toString() {\n      return this.href;\n    },\n    get href() {\n      if (this._isInvalid) { return this._url; }\n\n      let authority = '';\n      if (this._username !== '' || this._password !== null) {\n        authority = `${this._username +\n            (this._password !== null ? `:${this._password}` : '')}@`;\n      }\n\n      return this.protocol +\n          (this._isRelative ? `//${authority}${this.host}` : '') +\n          this.pathname + this._query + this._fragment;\n    },\n    set href(href) {\n      clear.call(this);\n      parse.call(this, href);\n    },\n\n    get protocol() {\n      return `${this._scheme}:`;\n    },\n    set protocol(protocol) {\n      if (this._isInvalid) { return; }\n      parse.call(this, `${protocol}:`, 'scheme start');\n    },\n\n    get host() {\n      if (this._isInvalid) return '';\n      if (this._port) return `${this._host}:${this._port}`;\n      return this._host;\n    },\n    set host(host) {\n      if (this._isInvalid || !this._isRelative) { return; }\n      parse.call(this, host, 'host');\n    },\n\n    get hostname() {\n      return this._host;\n    },\n    set hostname(hostname) {\n      if (this._isInvalid || !this._isRelative) { return; }\n      parse.call(this, hostname, 'hostname');\n    },\n\n    get port() {\n      return this._port;\n    },\n    set port(port) {\n      if (this._isInvalid || !this._isRelative) { return; }\n      parse.call(this, port, 'port');\n    },\n\n    get pathname() {\n      if (this._isInvalid) return '';\n      if (this._isRelative) return `/${this._path.join('/')}`;\n      return this._schemeData;\n    },\n    set pathname(pathname) {\n      if (this._isInvalid || !this._isRelative) { return; }\n      this._path = [];\n      parse.call(this, pathname, 'relative path start');\n    },\n\n    get search() {\n      return this._isInvalid || !this._query || this._query === '?' ?\n          '' : this._query;\n    },\n    set search(search) {\n      if (this._isInvalid || !this._isRelative) { return; }\n      this._query = '?';\n      if (search[0] === '?') { search = search.slice(1); }\n      parse.call(this, search, 'query');\n    },\n\n    get hash() {\n      return this._isInvalid || !this._fragment || this._fragment === '#' ?\n          '' : this._fragment;\n    },\n    set hash(hash) {\n      if (this._isInvalid) { return; }\n      this._fragment = '#';\n      if (hash[0] === '#') { hash = hash.slice(1); }\n      parse.call(this, hash, 'fragment');\n    },\n\n    get origin() {\n      if (this._isInvalid || !this._scheme) {\n        return '';\n      }\n      // javascript: Gecko returns String(\"\"), WebKit/Blink String(\"null\")\n      // Gecko throws error for \"data://\"\n      // data: Gecko returns \"\", Blink returns \"data://\", WebKit returns \"null\"\n      // Gecko returns String(\"\") for file: mailto:\n      // WebKit/Blink returns String(\"SCHEME://\") for file: mailto:\n      switch (this._scheme) {\n        case 'data':\n        case 'file':\n        case 'javascript':\n        case 'mailto':\n          return 'null';\n        default:\n      }\n      const host = this.host;\n      if (!host) {\n        return '';\n      }\n      return `${this._scheme}://${host}`;\n    },\n  };\n\n  // Copy over the static methods\n  const OriginalURL = scope.URL;\n  if (OriginalURL) {\n    PolyfillURL.createObjectURL = function createObjectURL(...args) {\n      // IE extension allows a second optional options argument.\n      // http://msdn.microsoft.com/en-us/library/ie/hh772302(v=vs.85).aspx\n      return OriginalURL.createObjectURL(...args);\n    };\n    PolyfillURL.revokeObjectURL = function revokeObjectURL(url) {\n      OriginalURL.revokeObjectURL(url);\n    };\n  }\n\n  scope.URL = PolyfillURL;\n};\n","\nconst WINDOWS_VERSION_MAP = {\n  '6.4':  '10.0',\n  '6.3':  '8.1',\n  '6.2':  '8',\n  '6.1':  '7',\n  '6.0':  'Vista',\n  '5.2':  'Server 2003',\n  '5.1':  'XP',\n  '5.01': '2000 SP1',\n  '5.0':  '2000',\n  '4.0':  '4.0',\n};\n\nconst NODE_OS_TYPES = {\n  Darwin:     'OSX',\n  Windows_NT: 'Windows',\n};\n\nconst context = typeof window !== 'undefined' ? window : global;\n\nconst DEFAULT = {\n};\n\nconst NODE_PROCESS = {\n  product:  'solclientjs',\n  platform: 'node',\n  agent:    'node',\n  process:  context.process,\n};\n\n// Worst case fallbacks\nconst BROWSER_PROCESS = {\n  product:  'solclientjs',\n  platform: 'unknown',\n  agent:    'Gecko',\n};\n\nfunction getBrowserAgentInfo() {\n  /* eslint-env browser */\n  const navObj = typeof navigator !== 'undefined' ? navigator : null;\n  if (!navObj) return null;\n  const agentStr = navigator.userAgent;\n\n  // Execute these regex checks against the user agent string in this order.\n  // The earlier browsers have a lot of impersonation substrings in their user\n  // agent list so we positively test for them before considering the browsers\n  // that are frequently impersonated.\n  const browsers = [\n    ['edge', /Edge\\/([0-9._]+)/],\n    ['chrome', /(?!Chrom.*OPR)Chrom(?:e|ium)\\/([0-9.]+)(:?\\s|$)/],\n    ['firefox', /Firefox\\/([0-9.]+)(?:\\s|$)/],\n    ['opera', /Opera\\/([0-9.]+)(?:\\s|$)/],\n    ['opera', /OPR\\/([0-9.]+)(:?\\s|$)$/],\n    ['ie', /Trident\\/7\\.0.*rv:([0-9.]+).*\\).*Gecko$/],\n    ['ie', /MSIE\\s([0-9.]+);.*Trident\\/[4-8].0/], // Edit: IE11 in IE9 emu mode uses Trident 8\n    ['ie', /MSIE\\s(7\\.0)/],\n    ['bb10', /BB10;\\sTouch.*Version\\/([0-9.]+)/],\n    ['android', /Android\\s([0-9.]+)/],\n    ['ios', /Version\\/([0-9._]+).*Mobile.*Safari.*/],\n    ['safari', /Version\\/([0-9._]+).*Safari/],\n  ];\n\n  const agentInfo = {\n    browser:  { name: 'unknown', version: '0.0.0' },\n    platform: { os: 'unknown', arch: 'unknown', version: 'unknown' },\n  };\n\n  const agentHas = (...strs) => strs.some(str => agentStr.indexOf(str) >= 0);\n  const firstValue = (...vals) => vals.filter(Boolean).shift();\n\n  Object.assign(\n    agentInfo, // start with fallbacks above\n    // 1. Run the callback below for each browser name/regex-rule pair.\n    // 2. Decompose the pair into variables called `key` and `rule`.\n    browsers.map(([key, rule]) => {\n      // 3. Skip if the rule doesn't match the user agent string.\n      if (!rule.test(agentStr)) return false;\n      // 4. Get the matches for the rule.\n      const match = rule.exec(agentStr);\n      // 5. Extract the version from match group 1.\n      const versionStrs = match && match[1].split(/[._]/).slice(0, 3);\n      // 6. Convert the version strings to numbers.\n      const version = versionStrs.map(str => parseInt(str, 10));\n      // 7. Ensure our version tuple is length 3 by appending 0 elements.\n      while (version.length < 3) version.push(0);\n      // 8. Return an agentInfo object in the same form as above, consuming the version array.\n      return { browser: { name: key, version: version.join('.') } };\n    }).filter(Boolean).shift()); // 9. Filter out anything that returned `false` (#3)...\n    // 10. ...and return the first element.\n\n  // Now try to extract platform info\n  const os = firstValue(\n    agentHas('Windows Phone') && 'WindowsPhone',\n    agentHas('Windows') && 'Windows',\n    agentHas('Linux') && 'Linux',\n    agentHas('like Mac OS X') && 'iOS',\n    agentHas('OS X') && 'OSX',\n    agentHas('Android', 'Adr') && 'Android',\n    agentHas('BB10', 'RIM Tablet OS', 'BlackBerry') && 'BlackBerry'\n  );\n  const versionTests = {\n    'Windows': () => firstValue(\n      agentHas('Win16') && '3.1.1',\n      agentHas('Windows CE') && 'CE',\n      agentHas('Windows 95') && '4.00.950',\n      agentHas('Windows 98; Win 9x 4.90') && '4.90',\n      agentHas('Windows 98') && '4.10',\n      (() => {\n        // Look in the first set of parentheses for a version string key.\n        // This will fail when Windows 16 comes out\n        const parenParts = agentStr.match(/\\(.+?\\)/);\n        const versionPart = parenParts[0];\n        if (!versionPart) return false;\n        const versionMatch = str => versionPart.indexOf(str) >= 0;\n        return firstValue(...Object.keys(WINDOWS_VERSION_MAP).map(k =>\n            versionMatch(k) && WINDOWS_VERSION_MAP[k]));\n      })()\n    ),\n    'OSX':        () => agentStr.match(/OS X ((\\d+[._])+\\d+)\\b/)[1],\n    'Linux':      () => '',\n    'iOS':        () => agentStr.match(/OS ((\\d+[._])+\\d+) like Mac OS X/)[1],\n    'Android':    () => agentStr.match(/(?:Android|Adr) ((\\d+[._])+\\d_)/)[1],\n    'BlackBerry': () => agentStr.match(/(?:Version\\/|RIM Tablet OS )((\\d+\\.)+\\d+)/)[1],\n  };\n  const versionTest = versionTests[os];\n  agentInfo.platform.os = os || 'Unknown';\n  agentInfo.platform.version = (versionTest && versionTest() || '0.0.0').replace(/_/g, '.');\n  return agentInfo;\n}\n/* eslint-env shared-browser-node */\n\ntry {\n  if (BUILD_ENV.TARGET_BROWSER && context.navigator) {\n    // These are historical defaults\n    const safeEncode = str => str.replace(/[^a-zA-Z0-9_/.]/g, '-');\n    Object.assign(BROWSER_PROCESS, {\n      platform:    context.navigator.platform,\n      agent:       context.navigator.product,\n      description: safeEncode(context.navigator.userAgent),\n      navigator:   context.navigator,\n    });\n    const browserAgentInfo = getBrowserAgentInfo();\n    if (browserAgentInfo) {\n      BROWSER_PROCESS.agent = safeEncode(`${browserAgentInfo.browser.name\n                                           }-${browserAgentInfo.browser.version}`);\n      BROWSER_PROCESS.platform = `${BROWSER_PROCESS.agent}-${safeEncode(\n        `${browserAgentInfo.platform.os}-${browserAgentInfo.platform.version}`)}`;\n    }\n  }\n  if (BUILD_ENV.TARGET_NODE && context.process) {\n  //if (false) {\n    const os = require('os'); // eslint-disable-line global-require\n    const ostype = os.type();\n    const osname = NODE_OS_TYPES[ostype] || ostype || 'unknown';\n    const nodeVersionStr = `node-${process.version.substr(1)}`;\n    Object.assign(NODE_PROCESS, {\n      platform:    `${nodeVersionStr}-${osname}-${os.release()}-${os.arch()}`,\n      agent:       nodeVersionStr,\n      description: nodeVersionStr,\n    });\n  }\n} catch (ex) {\n  // Fall back to defaults\n}\n\nconst Process = Object.assign({}, DEFAULT,\n                              BUILD_ENV.TARGET_BROWSER ? BROWSER_PROCESS : {},\n                              BUILD_ENV.TARGET_NODE ? NODE_PROCESS : {});\n\nmodule.exports.Process = Process;\n","/**\n * This class is used to efficiently concatenate strings.\n * @private\n */\nclass StringBuffer {\n  /**\n   * @constructor\n   * @param {...*} args Initial buffer contents\n   * @private\n   */\n  constructor(...args) {\n    this.clear();\n    this.append(...args);\n  }\n\n  /**\n   * Appends the given strings to the buffer\n   *\n   * @param {...*} args Objects to add to the buffer. These are immediately\n   *                    coerced to strings.\n   * @returns {StringBuffer} this\n   */\n  append(...args) {\n    [...args].forEach((arg) => {\n      this.buffer[this.index++] = String(arg);\n    });\n    return this;\n  }\n\n  /**\n   * Resets the buffer.\n   */\n  clear() {\n    this.buffer = [];\n    this.index = 0;\n  }\n\n  /**\n   * Returns the buffer as a string. Additional concatenations and renderings\n   * can be performed.\n   * @returns {String} The buffer's contents concatenated to a string.\n   */\n  toString() {\n    return this.buffer.join('');\n  }\n}\n\nmodule.exports.StringBuffer = StringBuffer;\n","const { StringBuffer } = require('./string-buffer');\n\nconst PAD_LEFT = 0;\nconst PAD_RIGHT = 1;\n\nconst LUT_PRINTABLE = (() => {\n  const tmp = [];\n  for (let c = 0; c < 256; ++c) {\n    tmp[c] = (c < 33 || c > 126) ? '.' : String.fromCharCode(c);\n  }\n  return tmp;\n})();\n\nfunction padLeftRight(str, minLen, padSide, padChar = ' ') {\n  if (typeof str !== 'string') {\n    return str;\n  }\n  if (str.length >= minLen) {\n    return str;\n  }\n\n  const buf = new StringBuffer();\n  for (let i = 0; i < (minLen - str.length); i++) {\n    buf.append(padChar.charAt(0));\n  }\n  switch (padSide) {\n    case PAD_LEFT:\n      return `${buf}${str}`;\n    case PAD_RIGHT:\n      return `${str}${buf}`;\n    default:\n      return str;\n  }\n}\n\nfunction leastSpaces(length, line) {\n  if (!line.length) return length;\n  const spaces = line.match(/^\\s*/)[0].length;\n  return spaces < length ? spaces : length;\n}\n\nfunction capitalizeWord(str) {\n  return `${str.charAt(0).toUpperCase()}${str.substr(1)}`;\n}\n\nfunction isEmptyFun(str) {\n  return (\n    str === undefined ||\n    str === null ||\n    str.length === 0\n  );\n}\n\n/**\n * @private\n * @type {StringUtils}\n */\nconst StringUtils = {};\n\nStringUtils.capitalize = function capitalize(str) {\n  if (!(str && str.length)) {\n    return str;\n  }\n\n  return str.split(' ').map(capitalizeWord).join(' ');\n};\n\nStringUtils.isEmpty = isEmptyFun;\n\nStringUtils.notEmpty = function notEmpty(str) {\n  return !(isEmptyFun(str));\n};\n\nStringUtils.toSafeChars = function toSafeChars(str) {\n  return str.replace(/[^a-zA-Z0-9_/.]/g, '');\n};\n\nStringUtils.padLeft = function padLeft(str, minLen, padChar) {\n  return padLeftRight(str, minLen, PAD_LEFT, padChar);\n};\n\nStringUtils.padRight = function padRight(str, minLen, padChar) {\n  return padLeftRight(str, minLen, PAD_RIGHT, padChar);\n};\n\nStringUtils.nullTerminate = function nullTerminate(str) {\n  if (str === null || str === undefined) {\n    throw new Error('non str in nullTerminate');\n  }\n  const lastChar = str.charCodeAt(str.length - 1);\n  if (lastChar === 0) {\n    return str;\n  }\n  return str + String.fromCharCode(0x00);\n};\n\nStringUtils.stripNullTerminate = function stripNullTerminate(str) {\n  if (str === null || str === undefined) {\n    throw new Error('null str in stripNullTerminate');\n  }\n  const lastChar = str.charCodeAt(str.length - 1);\n  if (lastChar === 0) {\n    return str.substr(0, str.length - 1);\n  }\n  return str;\n};\n\nStringUtils.hexdump = function hexdump(s) {\n  const output = new StringBuffer();\n  const printable = new StringBuffer();\n  const spacer = pos => (pos === 8 || pos === 16 ? '  ' : ' ');\n  let linelen = 0;\n  for (let i = 0, sLength = s.length; i < sLength; i++) {\n    const ccode = s.charCodeAt(i);\n    output.append(padLeftRight(ccode.toString(16), 2, PAD_LEFT));\n    printable.append(LUT_PRINTABLE[ccode] || '.');\n    output.append(spacer(++linelen));\n\n    if (i === s.length - 1) {\n      // input finished: complete the line\n      while (linelen < 16) {\n        output.append(`  ${spacer(++linelen)}`);\n      }\n    }\n\n    if (linelen === 16) {\n      output.append(printable.join(''));\n      output.append('\\n');\n      linelen = 0;\n      printable.clear();\n    }\n  }\n  return output.toString();\n};\n\n/**\n * Use heredoc`....` to create multi-line heredoc strings. Leading blank lines are removed, as are\n * leading spaces, up to the number of spaces on the least-indented line.\n * @param {String} literals The document template\n * @param {...String} substitutions The substitutions to make in the document\n * @returns {String} The interpolated representation of the document\n */\nStringUtils.heredoc = function heredoc(literals, ...substitutions) {\n  const subst = [...substitutions, ''];\n  const lines = literals.map(k => k + subst.shift())\n    .join('')\n    .split(/\\r?\\n/);\n  const spaces = lines.length === 1 ? 0 : lines.reduce(leastSpaces, Infinity);\n  while (lines[0] === '') {\n    lines.shift();\n  }\n  return lines.map(line => line.substring(spaces)).join('\\n');\n};\n\n\nmodule.exports.StringUtils = StringUtils;\n","class TimingBucket {\n  constructor(name, interval) {\n    this.name = name;\n    this.interval = interval;\n    this.buckets = [];\n  }\n\n  get bucketCount() {\n    let c = 0;\n    for (let i = 0, n = this.buckets.length; i < n; ++i) {\n      c += this.buckets[i] || 0;\n    }\n    return c;\n  }\n\n  log(v) {\n    if (v === undefined || isNaN(v)) {\n      return;\n    }\n    const normalized = Math.floor(v / this.interval) * this.interval;\n    this.buckets[normalized] = this.buckets[normalized] || 0;\n    this.buckets[normalized]++;\n  }\n\n  toString() {\n    const cont = [];\n    this.buckets.forEach((i) => {\n      cont.push(`${i}: ${this.buckets[i]}`);\n    });\n    return `{${cont.join(', ')}}`;\n  }\n}\n\nmodule.exports.TimingBucket = TimingBucket;\n","/* eslint-disable global-require */\nlet parseURL;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-env node */\n  parseURL = require('url').parse;\n} else {\n  /* eslint-env browser */\n  const scope = typeof window !== 'undefined' ? window : this;\n  require('./browser-url-polyfill')(scope);\n  parseURL = function makeURL(...args) {\n    return new URL(...args);\n  };\n}\n\nmodule.exports.parseURL = parseURL;\n","function generateUUID() { // Public Domain/MIT\n  let d = new Date().getTime();\n  // if (typeof performance !== 'undefined' && typeof performance.now === 'function') {\n  //   d += performance.now(); //use high-precision timer if available\n  // }\n\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (d + Math.random() * 16) % 16 | 0;\n    d = Math.floor(d / 16);\n    return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n  });\n}\n\nmodule.exports.UUID = {\n  generateUUID,\n};\n","// Coverity scanned is configured to run against the generated monolithic\n// solclient.js file (debug) version. On the loadbuild server BUILD_ENV.VERSION is\n// substituted and never null (it is null in developer workspace) so\n// coverity will complain that the \" || '0.0.0-source' \" is DEADCODE\n// coverity[dead_error_line]\nconst VERSION = BUILD_ENV.VERSION || '0.0.0-source';\n// Parse the date if provided. Was seeing NaN formatted dates in source mode, so add fallback\nconst DATE = BUILD_ENV.DATE\n  ? new Date(Date.parse(BUILD_ENV.DATE))\n  : new Date();\nconst MODE = BUILD_ENV.MODE_NAME;\n\n// These property names are all for export, so make sure they're not mangled\nconst TARGET = {\n  'name':    BUILD_ENV.TARGET_NAME,\n  'node':    BUILD_ENV.TARGET_NODE,\n  'browser': BUILD_ENV.TARGET_BROWSER,\n};\n\nconst FORMATTED_DATE = (() => {\n  const pad = n => (n < 10 ? `0${n}` : n);\n  const d = DATE;\n  const YYYY = d.getFullYear();\n  const MM = pad(d.getMonth() + 1);\n  const DD = pad(d.getDate());\n  const hh = pad(d.getHours());\n  const mm = pad(d.getMinutes());\n  return `${YYYY}/${MM}/${DD} ${hh}:${mm}`;\n})();\nconst SUMMARY = ['SolclientJS', BUILD_ENV.VERSION, MODE, FORMATTED_DATE].join(', ');\n\n/**\n * Returns the API version. Use version, date and mode properties for build details.\n * Use the summary property or the .toString() method to return a summary.\n * @static\n * @type {Object}\n * @namespace\n * @memberof solace\n */\nconst Version = {\n  /**\n   * The API version, as an informational string. The format of this string is subject to change.\n   * @type {String}\n   */\n  'version':       VERSION,\n  /**\n   * The API build date.\n   * @type {Date}\n   */\n  'date':          DATE,\n  /**\n   * The API build date, as a formatted string.\n   * The format of this date is:\n   * `YYYY-MM-DD hh:mm`\n   * where\n   *  * `YYYY` is the 4-digit year,\n   *  * `MM` is the 2-digit month   (01-12),\n   *  * `DD` is the 2-digit day     (01-31),\n   *  * `hh` is the 2-digit hour    (00-23),\n   *  * `mm` is the 2-digit minute  (00-59)\n   *\n   * @type {String}\n   */\n  'formattedDate': FORMATTED_DATE,\n  /**\n   * Information about the build target. This object is informational; its type, structure and\n   * content are subject to change.\n   * @type {Object}\n   */\n  'target':        TARGET,\n  /**\n   * The build mode. This may be one of 'debug' or 'release'. Other build modes may be added\n   * in the future.\n   * @type {String}\n   */\n  'mode':          MODE,\n  /**\n   * If `true`, this is an unoptimized debug build.\n   * @type {Boolean}\n   */\n  'debug':         BUILD_ENV.MODE_DEBUG,\n  /**\n   * If `true`, this is an optimized release build. Note that there may be multiple release\n   * builds in a distribution, with varying degrees of optimization.\n   * @type {Boolean}\n   */\n  'release':       BUILD_ENV.MODE_RELEASE,\n  /**\n   * An informational string summarizing the API name, version and build date.\n   * @type {String}\n   */\n  'summary':       SUMMARY,\n\n  toString() {\n    return SUMMARY;\n  },\n};\nmodule.exports.Version = Version;\n","const { Check } = require('./lib/check');\nconst { Parameter } = require('./lib/parameter');\n\nmodule.exports.Check = Check;\nmodule.exports.Parameter = Parameter;\n","const EPSILON = 1e6;\n\n/**\n * @param {Array} arr The array to flatten\n * @returns {Array} A maximally flattened array. The original array is not modified.\n * @private\n */\nfunction flatten(arr) {\n  return arr.reduce((a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []);\n}\n\n/**\n * @private\n */\nconst BaseChecks = (() => {\n  const result = {\n    /**\n     * Checks whether a value is undefined or null.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is undefined or null.\n     *\n     * @private\n     */\n    nothing(value) {\n      return (value === undefined || value === null);\n    },\n\n    /**\n     * Checks whether a value is anything, i.e. not undefined or null.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True unless the value is undefined or null.\n     *\n     * @private\n     */\n    anything(value) {\n      return !BaseChecks.nothing(value);\n    },\n\n    /**\n     * Checks whether a value is undefined. Uses the conservative\n     * typeof check for compatibility with particularly ill-behaved\n     * libraries that redefine <code>undefined</code>.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is undefined.\n     *\n     * @private\n     */\n    undefined(value) {\n      return typeof value === 'undefined';\n    },\n\n    /**\n     * Checks whether a value is defined. This is true for any value with\n     * a type that is not 'undefined'.\n     *\n     * @param {any} value The value to check\n     * @returns {Boolean} True if the value is defined.\n     *\n     * @private\n     */\n    defined(value) {\n      return !BaseChecks.undefined(value);\n    },\n\n    /**\n     * Checks whether a value is an array.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is an array.\n     *\n     * @private\n     */\n    array(value) {\n      return BaseChecks.anything(value) && Array.isArray(value);\n    },\n\n    /**\n     * Checks whether a value is an object. If a value is an array, it is not an object.\n     * If a value is null, it is not an object.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is an object (and not an array).\n     *\n     * @private\n     */\n    object(value) {\n      return (!BaseChecks.array(value) &&\n              value !== null &&\n              (typeof value === 'object' || value instanceof Object));\n    },\n\n    /**\n     * Checks whether a value is an instance of the given type.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} type The type to check.\n     *\n     * @returns {Boolean} True if type is in value's prototype chain.\n     *\n     * @private\n     */\n    instanceOf(val, type) {\n      return BaseChecks.object(val) && val instanceof type;\n    },\n\n    /**\n     * Checks whether a value's typeof is equal to the given type string.\n     *\n     * @param {*} val The value to check.\n     * @param {String} type The type string for comparison.\n     *\n     * @returns {Boolean} True if typeof(val) == type\n     *\n     * @private\n     */\n    type(val, type) {\n      return typeof val === type; /* dynamic */ // eslint-disable-line valid-typeof\n    },\n\n    /**\n     * Checks whether a value is an instance of any of the given types.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} types The types to check.\n     *\n     * @returns {Boolean} True if any element of types is in val's prototype chain.\n     *\n     * @private\n     */\n    instanceOfAny(val, ...types) {\n      return (BaseChecks.array(types) &&\n              flatten(types).some(type => BaseChecks.instanceOf(val, type)));\n    },\n\n    /**\n     * Checks whether the given value is empty.\n     *\n     * Emptiness is determined using the following checks:\n     *\n     * <ol>\n     *  <li>If an object is nothing, it is empty.</li>\n     *  <li>If it is an object, and it has no keys of its own, it is empty.</li>\n     *  <li>If it has a length property, it is empty if length === 0.</li>\n     *  <li>If none of the above apply, the object is not empty.</li>\n     * </ol>\n     *\n     * @param   {*} val The value to check.\n     *\n     * @returns {Boolean} True if the value is empty.\n     *\n     * @private\n     */\n    empty(val) {\n      if (BaseChecks.nothing(val)) return true;\n      if (BaseChecks.object(val)) {\n        if (Object.keys(val).length === 0) {\n          return true;\n        }\n      }\n      if (val.length === 0) {\n        return true;\n      }\n      return false;\n    },\n\n    /**\n     * A user-defined check.\n     *\n     * @param   {*} val The value to check\n     * @param   {Function} fn The function(val) to use.\n     *\n     * @returns {Boolean} The result of the function, coerced to a boolean.\n     *\n     * @private\n     */\n    truthy(val, fn) {\n      return !!fn(val);\n    },\n\n    rangeGe(val, rangeMinInclusive) {\n      return val >= rangeMinInclusive;\n    },\n\n    rangeGt(val, rangeMin) {\n      return val > rangeMin;\n    },\n\n    rangeLe(val, rangeMaxInclusive) {\n      return val <= rangeMaxInclusive;\n    },\n\n    rangeLt(val, rangeMax) {\n      return val < rangeMax;\n    },\n\n    rangeCompare(val, operator, operand, ...args) {\n      switch (operator) {\n        case '=':\n        case '==':\n        case '===':\n          return val === operand;\n        case '~=':\n        case '=~':\n          {\n            const epsilon = args[0] || EPSILON;\n            return Math.abs(val - operand) < epsilon;\n          }\n        case '<':\n          return val < operand;\n        case '<=':\n          return val <= operand;\n        case '>':\n          return val > operand;\n        case '>=':\n          return val >= operand;\n        default:\n          throw new Error(`Illegal operator for rangeCompare: ${operator}`);\n      }\n    },\n\n    NaN(val) {\n      return Number.isNaN(val);\n    },\n\n    /**\n     * Checks whether val is included in the object. If obj is an array, val is included if\n     * val is an element of the array. Otherwise, if obj is an object, val is included if\n     * val is one of the keys of obj.\n     *\n     * @param   {*} val The value to test\n     * @param   {*} obj The object to test\n     *\n     * @returns {Boolean} True if the value is included in the object\n     */\n    included(val, obj) {\n      if (BaseChecks.nothing(obj)) {\n        return false;\n      }\n      if (obj.includes) {\n        return obj.includes(val);\n      }\n      if (Array.isArray(obj)) {\n        // Not exactly Array.prototype.includes, which uses SameValueZero (+0 == -0)\n        return obj.indexOf(val) >= 0;\n      }\n      if (BaseChecks.object(obj)) {\n        const keys = Object.keys(obj);\n        return BaseChecks.included(val, keys);\n      }\n      return false;\n    },\n\n    /**\n     * Checks whether val is equal to expected.\n     *\n     * @param {any} val The value to check.\n     * @param {any} expected The expected value.\n     * @returns {Boolean} True if the value was equal to the expected value.\n     */\n    equal(val, expected) {\n      return val === expected;\n    },\n\n    /**\n     * Checks whether the given value appears as an attribute value in the given attributes object,\n     * e.g. whether an enumeration contains the given value. If the attributes object is an array,\n     * the array membership check {@link #included} is used instead.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} obj The object with attributes to check.\n     *\n     * @returns {Boolean} True if attrs has any attribute equal to val.\n     */\n    member(val, obj) {\n      return (BaseChecks.anything(obj) &&\n              (BaseChecks.array(obj)\n                ? BaseChecks.included(val, obj)\n                : Object.keys(obj).some(k => obj[k] === val))\n      );\n    },\n\n    boolean(v) {\n      return BaseChecks.type(v, 'boolean');\n    },\n\n    number(v) {\n      return BaseChecks.type(v, 'number');\n    },\n\n    string(v) {\n      return BaseChecks.type(v, 'string');\n    },\n\n    function(v) {\n      return BaseChecks.type(v, 'function');\n    },\n  };\n\n  /**\n   * Checks whether an object is none. This is the same check as <code>nothing</code>\n   * @see {@link nothing}\n   */\n  result.none = result.nothing;\n\n  /**\n   * Checks whether an object is something. This is the same check as <code>anything</code>\n   */\n  result.something = result.anything;\n\n  // Add check-loosening suffixes, (t | null), (t | undefined) and (t | null | undefined).\n  // Do the t check last, just in case it is not (null | undefined) safe.\n  Object.keys(result).forEach((key) => {\n    /**\n     * .orNull checks. These are equivalent to the similarly named check, but also pass if the value\n     * supplied was equal to null.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orNull = function orNull(val, ...args) {\n      return val === null || result[key](val, ...args);\n    };\n\n    /**\n     * .orUndefined checks. These are equivalent to the similarly named check, but also pass if the\n     * value supplied was equal to null.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orUndefined = function orUndefined(val, ...args) {\n      return val === undefined || result[key](val, ...args);\n    };\n\n    /**\n     * .orNothing checks. These are equivalent to the similarly named check, but also pass if the\n     * value supplied was null or undefined.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orNothing = function orNothing(val, ...args) {\n      return result.nothing(val) || result[key](val, ...args);\n    };\n  });\n\n  return result;\n})();\n\nmodule.exports.BaseChecks = BaseChecks;\n","const { BaseChecks } = require('./base-checks');\n\n/**\n *\n * Generates a then closure.\n *\n * @param {Boolean} doOp Whether the returned then function should call its argument.\n * @returns {Object} An object { then(fn, elseFn=undefined) }. If doOp was true, then(fn) will\n *                      call fn. If not, elseFn will be called if supplied.\n * @private\n */\nfunction thenGen(doOp) {\n  return {\n    then: doOp ? f => f() : (_, elseFn) => elseFn(),\n  };\n}\n\n/**\n *\n * none, anything, boolean, ... @returns {Boolean}\n * when(condition) @returns then(fn, elseFn) => if condition fn() else elseFn && elseFn()\n * unless(condition, else) @returns then(fn, elseFn) => if !condition fn() else elseFn && elseFn\n * whenNone, whenAnything, whenBoolean, ... @returns {function} then(fn, elseFn)\n * unlessNone, unlessAnything, unlessBoolean ... @returns {function} unless(fn, elseFn)\n * @private\n */\nconst Check = (() => {\n  const result = Object.assign({}, BaseChecks);\n  result.when = condition => thenGen(condition);\n  result.unless = condition => thenGen(!condition);\n  return result;\n})();\n\nmodule.exports.Check = Check;\n","const { Check } = require('./check');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst NO_OBJ = {}; // anonymous object\n\nfunction objectValues(object) {\n  return Object.keys(object).map(k => object[k]);\n}\n\nfunction subcodeSummary(subcode, expected = null, got = NO_OBJ) {\n  const expectedStr = expected ? `; expected: ${expected}` : '';\n  const gotStr = got !== NO_OBJ ? `; got: ${got}` : '';\n  switch (subcode) {\n    case ErrorSubcode.PARAMETER_INVALID_TYPE:\n      return `Parameter type was invalid${expectedStr}${gotStr}`;\n    default:\n      return ErrorSubcode.nameOf(subcode).toLowerCase().replace(/_/, ' ') + expectedStr;\n  }\n}\n\nfunction validateError(name, subcode, message) {\n  throw new OperationError(`Parameter ${name} failed validation`, subcode, message);\n}\n\nfunction validate(name, subcode, message, check, value, ...validatorArgs) {\n  if (!check(value, ...validatorArgs)) {\n    return validateError(name, subcode, message);\n  }\n  return value;\n}\n\nconst typename = x => x && x.constructor && x.constructor.name || typeof x;\n\n/**\n * The Check object is a powerful validation API but it is partially built at runtime by composing\n * functions, and it requires significant boilerplate for parameter validation.\n *\n * The Parameter API expresses concrete validations using the Check API, returning values on success\n * and throwing the appropriate SDK exception on failure. It would be tempting to try to\n * automatically build a Parameter method for every Check method, but this would make Parameter\n * difficult to understand and use.\n *\n * @private\n */\nconst Parameter = {};\n\nParameter.isArray = function isArray(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'array', value)) {\n  return validate(name, subcode, message, Check.isArray, value);\n};\n\nParameter.isBoolean =\nfunction isBoolean(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'boolean', value)) {\n  return validate(name, subcode, message, Check.boolean, value);\n};\n\nParameter.isBooleanOrNothing =\nfunction isBooleanOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'boolean or nothing', value)) {\n  return validate(name, subcode, message, Check.boolean.orNothing, value);\n};\n\nParameter.isEnumMember =\nfunction isEnumMember(name, value, memberOfEnum, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of [${memberOfEnum.names.join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member, value, memberOfEnum);\n};\n\nParameter.isEnumMemberOrNothing =\nfunction isEnumMemberOrNothing(name, value, memberOfEnum, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of [${memberOfEnum.names.join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member.orNothing, value, memberOfEnum);\n};\n\nParameter.isFunction =\nfunction isFunction(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'function', value)) {\n  return validate(name, subcode, message, Check.function, value);\n};\n\nParameter.isFunctionOrNothing =\nfunction isFunctionOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'function or nothing', value)) {\n  return validate(name, subcode, message, Check.function.orNothing, value);\n};\n\nParameter.isInstanceOf =\nfunction isInstanceOf(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE,\n                      message = subcodeSummary(subcode, instanceOf.name, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf, value, instanceOf);\n};\n\nParameter.isInstanceOfOrNothing =\nfunction isInstanceOfOrNothing(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or nothing`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orNothing, value, instanceOf);\n};\n\nParameter.isInstanceOfOrNull =\nfunction isInstanceOfOrNull(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or null`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orNull, value, instanceOf);\n};\n\nParameter.isInstanceOfOrUndefined =\nfunction isInstanceOfOrUndefined(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or undefined`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orUndefined, value, instanceOf);\n};\n\nParameter.isMember =\nfunction isMember(name, value, memberOf, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of ${memberOf.name}.[${objectValues(memberOf).join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member, value, memberOf);\n};\n\nParameter.isNumber =\nfunction isNumber(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number', value)) {\n  return validate(name, subcode, message, Check.number, value);\n};\n\nParameter.isNumberOrNothing =\nfunction isNumberOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number or nothing', value)) {\n  return validate(name, subcode, message, Check.number.orNothing, value);\n};\n\nParameter.isNumberOrNull =\nfunction isNumberOrNull(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number or null', value)) {\n  return validate(name, subcode, message, Check.number.orNull, value);\n};\n\nParameter.isRangeCompare =\nfunction isRangeCompare(name, value, operator, operand, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `${operator} ${operand}`, value)) {\n  return validate(name, subcode, message, Check.rangeCompare, value, operator, operand);\n};\n\nParameter.isRangeCompareOrNothing = function isRangeCompareOrNothing(name, value, operator, operand, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `${operator} ${operand} or nothing`, value)) {\n  return validate(name, subcode, message, Check.rangeCompare.orNothing, value, operator, operand);\n};\n\nParameter.isStringOrNull =\nfunction isStringOrNull(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string or null', value)) {\n  return validate(name, subcode, message, Check.string.orNull, value);\n};\n\n\nParameter.isString =\nfunction isString(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string', value)) {\n  return validate(name, subcode, message, Check.string, value);\n};\n\nParameter.isStringOrNothing =\nfunction isStringOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string or nothing', value)) {\n  return validate(name, subcode, message, Check.string.orNothing, value);\n};\n\nParameter.isValue =\nfunction isValue(name, value, expected, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `must be ${value}`)) {\n  return validate(name, subcode, message, Check.equal, value, expected);\n};\n\n\nmodule.exports.Parameter = Parameter;\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/**\n * Module exports.\n */\n\nmodule.exports = inspect;\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n * @license MIT (© Joyent)\n */\n/* legacy: obj, showHidden, depth, colors*/\n\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    _extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isNull(arg) {\n  return arg === null;\n}\n\nfunction hasOwn(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwn(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  try {\n    if (ctx.showHidden && Object.getOwnPropertyNames) {\n      keys = Object.getOwnPropertyNames(value);\n    }\n  } catch (e) {\n    // ignore\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (Array.isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = { value: void 0 };\n  try {\n    // ie6 › navigator.toString\n    // throws Error: Object doesn't support this property or method\n    desc.value = value[key];\n  } catch (e) {\n    // ignore\n  }\n  try {\n    // ie10 › Object.getOwnPropertyDescriptor(window.location, 'hash')\n    // throws TypeError: Object doesn't support this action\n    if (Object.getOwnPropertyDescriptor) {\n      desc = Object.getOwnPropertyDescriptor(value, key) || desc;\n    }\n  } catch (e) {\n    // ignore\n  }\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwn(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\nfunction _extend(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","var clone = (function() {\n'use strict';\n\nfunction _instanceof(obj, type) {\n  return type != null && obj instanceof type;\n}\n\nvar nativeMap;\ntry {\n  nativeMap = Map;\n} catch(_) {\n  // maybe a reference error because no `Map`. Give it a dummy value that no\n  // value will ever be an instanceof.\n  nativeMap = function() {};\n}\n\nvar nativeSet;\ntry {\n  nativeSet = Set;\n} catch(_) {\n  nativeSet = function() {};\n}\n\nvar nativePromise;\ntry {\n  nativePromise = Promise;\n} catch(_) {\n  nativePromise = function() {};\n}\n\n/**\n * Clones (copies) an Object using deep copying.\n *\n * This function supports circular references by default, but if you are certain\n * there are no circular references in your object, you can save some CPU time\n * by calling clone(obj, false).\n *\n * Caution: if `circular` is false and `parent` contains circular references,\n * your program may enter an infinite loop and crash.\n *\n * @param `parent` - the object to be cloned\n * @param `circular` - set to true if the object to be cloned may contain\n *    circular references. (optional - true by default)\n * @param `depth` - set to a number if the object is only to be cloned to\n *    a particular depth. (optional - defaults to Infinity)\n * @param `prototype` - sets the prototype to be used when cloning an object.\n *    (optional - defaults to parent prototype).\n * @param `includeNonEnumerable` - set to true if the non-enumerable properties\n *    should be cloned as well. Non-enumerable properties on the prototype\n *    chain will be ignored. (optional - false by default)\n*/\nfunction clone(parent, circular, depth, prototype, includeNonEnumerable) {\n  if (typeof circular === 'object') {\n    depth = circular.depth;\n    prototype = circular.prototype;\n    includeNonEnumerable = circular.includeNonEnumerable;\n    circular = circular.circular;\n  }\n  // maintain two arrays for circular references, where corresponding parents\n  // and children have the same index\n  var allParents = [];\n  var allChildren = [];\n\n  var useBuffer = typeof Buffer != 'undefined';\n\n  if (typeof circular == 'undefined')\n    circular = true;\n\n  if (typeof depth == 'undefined')\n    depth = Infinity;\n\n  // recurse this function so we don't reset allParents and allChildren\n  function _clone(parent, depth) {\n    // cloning null always returns null\n    if (parent === null)\n      return null;\n\n    if (depth === 0)\n      return parent;\n\n    var child;\n    var proto;\n    if (typeof parent != 'object') {\n      return parent;\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      child = new nativeMap();\n    } else if (_instanceof(parent, nativeSet)) {\n      child = new nativeSet();\n    } else if (_instanceof(parent, nativePromise)) {\n      child = new nativePromise(function (resolve, reject) {\n        parent.then(function(value) {\n          resolve(_clone(value, depth - 1));\n        }, function(err) {\n          reject(_clone(err, depth - 1));\n        });\n      });\n    } else if (clone.__isArray(parent)) {\n      child = [];\n    } else if (clone.__isRegExp(parent)) {\n      child = new RegExp(parent.source, __getRegExpFlags(parent));\n      if (parent.lastIndex) child.lastIndex = parent.lastIndex;\n    } else if (clone.__isDate(parent)) {\n      child = new Date(parent.getTime());\n    } else if (useBuffer && Buffer.isBuffer(parent)) {\n      if (Buffer.allocUnsafe) {\n        // Node.js >= 4.5.0\n        child = Buffer.allocUnsafe(parent.length);\n      } else {\n        // Older Node.js versions\n        child = new Buffer(parent.length);\n      }\n      parent.copy(child);\n      return child;\n    } else if (_instanceof(parent, Error)) {\n      child = Object.create(parent);\n    } else {\n      if (typeof prototype == 'undefined') {\n        proto = Object.getPrototypeOf(parent);\n        child = Object.create(proto);\n      }\n      else {\n        child = Object.create(prototype);\n        proto = prototype;\n      }\n    }\n\n    if (circular) {\n      var index = allParents.indexOf(parent);\n\n      if (index != -1) {\n        return allChildren[index];\n      }\n      allParents.push(parent);\n      allChildren.push(child);\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      parent.forEach(function(value, key) {\n        var keyChild = _clone(key, depth - 1);\n        var valueChild = _clone(value, depth - 1);\n        child.set(keyChild, valueChild);\n      });\n    }\n    if (_instanceof(parent, nativeSet)) {\n      parent.forEach(function(value) {\n        var entryChild = _clone(value, depth - 1);\n        child.add(entryChild);\n      });\n    }\n\n    for (var i in parent) {\n      var attrs;\n      if (proto) {\n        attrs = Object.getOwnPropertyDescriptor(proto, i);\n      }\n\n      if (attrs && attrs.set == null) {\n        continue;\n      }\n      child[i] = _clone(parent[i], depth - 1);\n    }\n\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(parent);\n      for (var i = 0; i < symbols.length; i++) {\n        // Don't need to worry about cloning a symbol because it is a primitive,\n        // like a number or string.\n        var symbol = symbols[i];\n        var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);\n        if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {\n          continue;\n        }\n        child[symbol] = _clone(parent[symbol], depth - 1);\n        if (!descriptor.enumerable) {\n          Object.defineProperty(child, symbol, {\n            enumerable: false\n          });\n        }\n      }\n    }\n\n    if (includeNonEnumerable) {\n      var allPropertyNames = Object.getOwnPropertyNames(parent);\n      for (var i = 0; i < allPropertyNames.length; i++) {\n        var propertyName = allPropertyNames[i];\n        var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);\n        if (descriptor && descriptor.enumerable) {\n          continue;\n        }\n        child[propertyName] = _clone(parent[propertyName], depth - 1);\n        Object.defineProperty(child, propertyName, {\n          enumerable: false\n        });\n      }\n    }\n\n    return child;\n  }\n\n  return _clone(parent, depth);\n}\n\n/**\n * Simple flat clone using prototype, accepts only objects, usefull for property\n * override on FLAT configuration object (no nested props).\n *\n * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n * works.\n */\nclone.clonePrototype = function clonePrototype(parent) {\n  if (parent === null)\n    return null;\n\n  var c = function () {};\n  c.prototype = parent;\n  return new c();\n};\n\n// private utility functions\n\nfunction __objToStr(o) {\n  return Object.prototype.toString.call(o);\n}\nclone.__objToStr = __objToStr;\n\nfunction __isDate(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object Date]';\n}\nclone.__isDate = __isDate;\n\nfunction __isArray(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object Array]';\n}\nclone.__isArray = __isArray;\n\nfunction __isRegExp(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object RegExp]';\n}\nclone.__isRegExp = __isRegExp;\n\nfunction __getRegExpFlags(re) {\n  var flags = '';\n  if (re.global) flags += 'g';\n  if (re.ignoreCase) flags += 'i';\n  if (re.multiline) flags += 'm';\n  return flags;\n}\nclone.__getRegExpFlags = __getRegExpFlags;\n\nreturn clone;\n})();\n\nif (typeof module === 'object' && module.exports) {\n  module.exports = clone;\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","// GENERATED FILE. DO NOT EDIT.\nvar Long = (function(exports) {\n  \"use strict\";\n  \n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  \n  /**\n   * @license\n   * Copyright 2009 The Closure Library Authors\n   * Copyright 2020 Daniel Wirtz / The long.js Authors.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   * SPDX-License-Identifier: Apache-2.0\n   */\n  // WebAssembly optimizations to do native i64 multiplication and divide\n  var wasm = null;\n  \n  try {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;\n  } catch (e) {// no wasm support :(\n  }\n  /**\n   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n   *  See the from* functions below for more convenient ways of constructing Longs.\n   * @exports Long\n   * @class A Long class for representing a 64 bit two's-complement integer value.\n   * @param {number} low The low (signed) 32 bits of the long\n   * @param {number} high The high (signed) 32 bits of the long\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @constructor\n   */\n  \n  \n  function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n  \n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n  \n    this.unsigned = !!unsigned;\n  } // The internal representation of a long is the two given signed, 32-bit values.\n  // We use 32-bit pieces because these are the size of integers on which\n  // Javascript performs bit-operations.  For operations like addition and\n  // multiplication, we split each number into 16 bit pieces, which can easily be\n  // multiplied within Javascript's floating-point representation without overflow\n  // or change in sign.\n  //\n  // In the algorithms below, we frequently reduce the negative case to the\n  // positive case by negating the input(s) and then post-processing the result.\n  // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n  // a positive number, it overflows back into a negative).  Not handling this\n  // case would often result in infinite recursion.\n  //\n  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n  // methods on which they depend.\n  \n  /**\n   * An indicator used to reliably determine if an object is a Long or not.\n   * @type {boolean}\n   * @const\n   * @private\n   */\n  \n  \n  Long.prototype.__isLong__;\n  Object.defineProperty(Long.prototype, \"__isLong__\", {\n    value: true\n  });\n  /**\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   * @inner\n   */\n  \n  function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n  }\n  /**\n   * @function\n   * @param {*} value number\n   * @returns {number}\n   * @inner\n   */\n  \n  \n  function ctz32(value) {\n    var c = Math.clz32(value & -value);\n    return value ? 31 - c : c;\n  }\n  /**\n   * Tests if the specified object is a Long.\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   */\n  \n  \n  Long.isLong = isLong;\n  /**\n   * A cache of the Long representations of small integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var INT_CACHE = {};\n  /**\n   * A cache of the Long representations of small unsigned integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var UINT_CACHE = {};\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n  \n    if (unsigned) {\n      value >>>= 0;\n  \n      if (cache = 0 <= value && value < 256) {\n        cachedObj = UINT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, 0, true);\n      if (cache) UINT_CACHE[value] = obj;\n      return obj;\n    } else {\n      value |= 0;\n  \n      if (cache = -128 <= value && value < 128) {\n        cachedObj = INT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, value < 0 ? -1 : 0, false);\n      if (cache) INT_CACHE[value] = obj;\n      return obj;\n    }\n  }\n  /**\n   * Returns a Long representing the given 32 bit integer value.\n   * @function\n   * @param {number} value The 32 bit integer in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromInt = fromInt;\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromNumber(value, unsigned) {\n    if (isNaN(value)) return unsigned ? UZERO : ZERO;\n  \n    if (unsigned) {\n      if (value < 0) return UZERO;\n      if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n    } else {\n      if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n      if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n    }\n  \n    if (value < 0) return fromNumber(-value, unsigned).neg();\n    return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n  }\n  /**\n   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n   * @function\n   * @param {number} value The number in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromNumber = fromNumber;\n  /**\n   * @param {number} lowBits\n   * @param {number} highBits\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n  }\n  /**\n   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n   *  assumed to use 32 bits.\n   * @function\n   * @param {number} lowBits The low 32 bits\n   * @param {number} highBits The high 32 bits\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBits = fromBits;\n  /**\n   * @function\n   * @param {number} base\n   * @param {number} exponent\n   * @returns {number}\n   * @inner\n   */\n  \n  var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n  \n  /**\n   * @param {string} str\n   * @param {(boolean|number)=} unsigned\n   * @param {number=} radix\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromString(str, unsigned, radix) {\n    if (str.length === 0) throw Error('empty string');\n  \n    if (typeof unsigned === 'number') {\n      // For goog.math.long compatibility\n      radix = unsigned;\n      unsigned = false;\n    } else {\n      unsigned = !!unsigned;\n    }\n  \n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return unsigned ? UZERO : ZERO;\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    var p;\n    if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');else if (p === 0) {\n      return fromString(str.substring(1), unsigned, radix).neg();\n    } // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n  \n    for (var i = 0; i < str.length; i += 8) {\n      var size = Math.min(8, str.length - i),\n          value = parseInt(str.substring(i, i + size), radix);\n  \n      if (size < 8) {\n        var power = fromNumber(pow_dbl(radix, size));\n        result = result.mul(power).add(fromNumber(value));\n      } else {\n        result = result.mul(radixToPower);\n        result = result.add(fromNumber(value));\n      }\n    }\n  \n    result.unsigned = unsigned;\n    return result;\n  }\n  /**\n   * Returns a Long representation of the given string, written using the specified radix.\n   * @function\n   * @param {string} str The textual representation of the Long\n   * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n   * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromString = fromString;\n  /**\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromValue(val, unsigned) {\n    if (typeof val === 'number') return fromNumber(val, unsigned);\n    if (typeof val === 'string') return fromString(val, unsigned); // Throws for non-objects, converts non-instanceof Long:\n  \n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n  }\n  /**\n   * Converts the specified value to a Long using the appropriate from* function for its type.\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long}\n   */\n  \n  \n  Long.fromValue = fromValue; // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n  // no runtime penalty for these.\n  \n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_16_DBL = 1 << 16;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24_DBL = 1 << 24;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n  /**\n   * @type {!Long}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ZERO = fromInt(0);\n  /**\n   * Signed zero.\n   * @type {!Long}\n   */\n  \n  Long.ZERO = ZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UZERO = fromInt(0, true);\n  /**\n   * Unsigned zero.\n   * @type {!Long}\n   */\n  \n  Long.UZERO = UZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ONE = fromInt(1);\n  /**\n   * Signed one.\n   * @type {!Long}\n   */\n  \n  Long.ONE = ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UONE = fromInt(1, true);\n  /**\n   * Unsigned one.\n   * @type {!Long}\n   */\n  \n  Long.UONE = UONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var NEG_ONE = fromInt(-1);\n  /**\n   * Signed negative one.\n   * @type {!Long}\n   */\n  \n  Long.NEG_ONE = NEG_ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n  /**\n   * Maximum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_VALUE = MAX_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n  /**\n   * Maximum unsigned value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n  /**\n   * Minimum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MIN_VALUE = MIN_VALUE;\n  /**\n   * @alias Long.prototype\n   * @inner\n   */\n  \n  var LongPrototype = Long.prototype;\n  /**\n   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  LongPrototype.toInt = function toInt() {\n    return this.unsigned ? this.low >>> 0 : this.low;\n  };\n  /**\n   * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.toNumber = function toNumber() {\n    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n  };\n  /**\n   * Converts the Long to a string written in the specified radix.\n   * @this {!Long}\n   * @param {number=} radix Radix (2-36), defaults to 10\n   * @returns {string}\n   * @override\n   * @throws {RangeError} If `radix` is out of range\n   */\n  \n  \n  LongPrototype.toString = function toString(radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    if (this.isZero()) return '0';\n  \n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      if (this.eq(MIN_VALUE)) {\n        // We need to change the Long value before it can be negated, so we remove\n        // the bottom-most digit in this base and then recurse to do the rest.\n        var radixLong = fromNumber(radix),\n            div = this.div(radixLong),\n            rem1 = div.mul(radixLong).sub(this);\n        return div.toString(radix) + rem1.toInt().toString(radix);\n      } else return '-' + this.neg().toString(radix);\n    } // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n  \n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n        rem = this;\n    var result = '';\n  \n    while (true) {\n      var remDiv = rem.div(radixToPower),\n          intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n          digits = intval.toString(radix);\n      rem = remDiv;\n      if (rem.isZero()) return digits + result;else {\n        while (digits.length < 6) digits = '0' + digits;\n  \n        result = '' + digits + result;\n      }\n    }\n  };\n  /**\n   * Gets the high 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed high bits\n   */\n  \n  \n  LongPrototype.getHighBits = function getHighBits() {\n    return this.high;\n  };\n  /**\n   * Gets the high 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned high bits\n   */\n  \n  \n  LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n    return this.high >>> 0;\n  };\n  /**\n   * Gets the low 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed low bits\n   */\n  \n  \n  LongPrototype.getLowBits = function getLowBits() {\n    return this.low;\n  };\n  /**\n   * Gets the low 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned low bits\n   */\n  \n  \n  LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n    return this.low >>> 0;\n  };\n  /**\n   * Gets the number of bits needed to represent the absolute value of this Long.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n    if (this.isNegative()) // Unsigned Longs are never negative\n      return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n    var val = this.high != 0 ? this.high : this.low;\n  \n    for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;\n  \n    return this.high != 0 ? bit + 33 : bit + 1;\n  };\n  /**\n   * Tests if this Long's value equals zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isZero = function isZero() {\n    return this.high === 0 && this.low === 0;\n  };\n  /**\n   * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eqz = LongPrototype.isZero;\n  /**\n   * Tests if this Long's value is negative.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  LongPrototype.isNegative = function isNegative() {\n    return !this.unsigned && this.high < 0;\n  };\n  /**\n   * Tests if this Long's value is positive or zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isPositive = function isPositive() {\n    return this.unsigned || this.high >= 0;\n  };\n  /**\n   * Tests if this Long's value is odd.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isOdd = function isOdd() {\n    return (this.low & 1) === 1;\n  };\n  /**\n   * Tests if this Long's value is even.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isEven = function isEven() {\n    return (this.low & 1) === 0;\n  };\n  /**\n   * Tests if this Long's value equals the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.equals = function equals(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n    return this.high === other.high && this.low === other.low;\n  };\n  /**\n   * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eq = LongPrototype.equals;\n  /**\n   * Tests if this Long's value differs from the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.notEquals = function notEquals(other) {\n    return !this.eq(\n    /* validates */\n    other);\n  };\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.neq = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ne = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value is less than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThan = function lessThan(other) {\n    return this.comp(\n    /* validates */\n    other) < 0;\n  };\n  /**\n   * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lt = LongPrototype.lessThan;\n  /**\n   * Tests if this Long's value is less than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) <= 0;\n  };\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lte = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.le = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThan = function greaterThan(other) {\n    return this.comp(\n    /* validates */\n    other) > 0;\n  };\n  /**\n   * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gt = LongPrototype.greaterThan;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) >= 0;\n  };\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n  /**\n   * Compares this Long's value with the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  LongPrototype.compare = function compare(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.eq(other)) return 0;\n    var thisNeg = this.isNegative(),\n        otherNeg = other.isNegative();\n    if (thisNeg && !otherNeg) return -1;\n    if (!thisNeg && otherNeg) return 1; // At this point the sign bits are the same\n  \n    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1; // Both are positive if at least one is unsigned\n  \n    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n  };\n  /**\n   * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  \n  LongPrototype.comp = LongPrototype.compare;\n  /**\n   * Negates this Long's value.\n   * @this {!Long}\n   * @returns {!Long} Negated Long\n   */\n  \n  LongPrototype.negate = function negate() {\n    if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\n    return this.not().add(ONE);\n  };\n  /**\n   * Negates this Long's value. This is an alias of {@link Long#negate}.\n   * @function\n   * @returns {!Long} Negated Long\n   */\n  \n  \n  LongPrototype.neg = LongPrototype.negate;\n  /**\n   * Returns the sum of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} addend Addend\n   * @returns {!Long} Sum\n   */\n  \n  LongPrototype.add = function add(addend) {\n    if (!isLong(addend)) addend = fromValue(addend); // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the difference of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.subtract = function subtract(subtrahend) {\n    if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n    return this.add(subtrahend.neg());\n  };\n  /**\n   * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n   * @function\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.sub = LongPrototype.subtract;\n  /**\n   * Returns the product of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  LongPrototype.multiply = function multiply(multiplier) {\n    if (this.isZero()) return this;\n    if (!isLong(multiplier)) multiplier = fromValue(multiplier); // use wasm support if present\n  \n    if (wasm) {\n      var low = wasm[\"mul\"](this.low, this.high, multiplier.low, multiplier.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;\n    if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\n    if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\n  \n    if (this.isNegative()) {\n      if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();\n    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg(); // If both longs are small, use float multiplication\n  \n  \n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned); // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n   * @function\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  \n  LongPrototype.mul = LongPrototype.multiply;\n  /**\n   * Returns this Long divided by the specified. The result is signed if this Long is signed or\n   *  unsigned if this Long is unsigned.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  LongPrototype.divide = function divide(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor);\n    if (divisor.isZero()) throw Error('division by zero'); // use wasm support if present\n  \n    if (wasm) {\n      // guard against signed division overflow: the largest\n      // negative number / -1 would be 1 larger than the largest\n      // positive number, due to two's complement.\n      if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {\n        // be consistent with non-wasm code path\n        return this;\n      }\n  \n      var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (this.isZero()) return this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n  \n    if (!this.unsigned) {\n      // This section is only relevant for signed longs and is derived from the\n      // closure library as a whole.\n      if (this.eq(MIN_VALUE)) {\n        if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n        else if (divisor.eq(MIN_VALUE)) return ONE;else {\n          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n          var halfThis = this.shr(1);\n          approx = halfThis.div(divisor).shl(1);\n  \n          if (approx.eq(ZERO)) {\n            return divisor.isNegative() ? ONE : NEG_ONE;\n          } else {\n            rem = this.sub(divisor.mul(approx));\n            res = approx.add(rem.div(divisor));\n            return res;\n          }\n        }\n      } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\n  \n      if (this.isNegative()) {\n        if (divisor.isNegative()) return this.neg().div(divisor.neg());\n        return this.neg().div(divisor).neg();\n      } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n  \n      res = ZERO;\n    } else {\n      // The algorithm below has not been made for unsigned longs. It's therefore\n      // required to take special care of the MSB prior to running it.\n      if (!divisor.unsigned) divisor = divisor.toUnsigned();\n      if (divisor.gt(this)) return UZERO;\n      if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n        return UONE;\n      res = UZERO;\n    } // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n  \n  \n    rem = this;\n  \n    while (rem.gte(divisor)) {\n      // Approximate the result of division. This may be a little greater or\n      // smaller than the actual value.\n      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or\n      // the smallest non-fractional digit, whichever is larger.\n  \n      var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n          delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\n          // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      approxRes = fromNumber(approx),\n          approxRem = approxRes.mul(divisor);\n  \n      while (approxRem.isNegative() || approxRem.gt(rem)) {\n        approx -= delta;\n        approxRes = fromNumber(approx, this.unsigned);\n        approxRem = approxRes.mul(divisor);\n      } // We know the answer can't be zero... and actually, zero would cause\n      // infinite recursion since we would make no progress.\n  \n  \n      if (approxRes.isZero()) approxRes = ONE;\n      res = res.add(approxRes);\n      rem = rem.sub(approxRem);\n    }\n  \n    return res;\n  };\n  /**\n   * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  \n  LongPrototype.div = LongPrototype.divide;\n  /**\n   * Returns this Long modulo the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.modulo = function modulo(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor); // use wasm support if present\n  \n    if (wasm) {\n      var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    return this.sub(this.div(divisor).mul(divisor));\n  };\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  \n  LongPrototype.mod = LongPrototype.modulo;\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.rem = LongPrototype.modulo;\n  /**\n   * Returns the bitwise NOT of this Long.\n   * @this {!Long}\n   * @returns {!Long}\n   */\n  \n  LongPrototype.not = function not() {\n    return fromBits(~this.low, ~this.high, this.unsigned);\n  };\n  /**\n   * Returns count leading zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.countLeadingZeros = function countLeadingZeros() {\n    return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n  };\n  /**\n   * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.clz = LongPrototype.countLeadingZeros;\n  /**\n   * Returns count trailing zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  LongPrototype.countTrailingZeros = function countTrailingZeros() {\n    return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n  };\n  /**\n   * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.ctz = LongPrototype.countTrailingZeros;\n  /**\n   * Returns the bitwise AND of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  LongPrototype.and = function and(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise OR of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.or = function or(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise XOR of this Long and the given one.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.xor = function xor(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shiftLeft = function shiftLeft(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shl = LongPrototype.shiftLeft;\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRight = function shiftRight(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shr = LongPrototype.shiftRight;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);\n    if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n    return fromBits(this.high >>> numBits - 32, 0, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits rotated to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotl = LongPrototype.rotateLeft;\n  /**\n   * Returns this Long with bits rotated to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotr = LongPrototype.rotateRight;\n  /**\n   * Converts this Long to signed.\n   * @this {!Long}\n   * @returns {!Long} Signed long\n   */\n  \n  LongPrototype.toSigned = function toSigned() {\n    if (!this.unsigned) return this;\n    return fromBits(this.low, this.high, false);\n  };\n  /**\n   * Converts this Long to unsigned.\n   * @this {!Long}\n   * @returns {!Long} Unsigned long\n   */\n  \n  \n  LongPrototype.toUnsigned = function toUnsigned() {\n    if (this.unsigned) return this;\n    return fromBits(this.low, this.high, true);\n  };\n  /**\n   * Converts this Long to its byte representation.\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @this {!Long}\n   * @returns {!Array.<number>} Byte representation\n   */\n  \n  \n  LongPrototype.toBytes = function toBytes(le) {\n    return le ? this.toBytesLE() : this.toBytesBE();\n  };\n  /**\n   * Converts this Long to its little endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Little endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesLE = function toBytesLE() {\n    var hi = this.high,\n        lo = this.low;\n    return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];\n  };\n  /**\n   * Converts this Long to its big endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Big endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesBE = function toBytesBE() {\n    var hi = this.high,\n        lo = this.low;\n    return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];\n  };\n  /**\n   * Creates a Long from its byte representation.\n   * @param {!Array.<number>} bytes Byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytes = function fromBytes(bytes, unsigned, le) {\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n  };\n  /**\n   * Creates a Long from its little endian byte representation.\n   * @param {!Array.<number>} bytes Little endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);\n  };\n  /**\n   * Creates a Long from its big endian byte representation.\n   * @param {!Array.<number>} bytes Big endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);\n  };\n  \n  var _default = Long;\n  exports.default = _default;\n  return \"default\" in exports ? exports.default : exports;\n})({});\nif (typeof define === 'function' && define.amd) define([], function() { return Long; });\nelse if (typeof module === 'object' && typeof exports==='object') module.exports = Long;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./index.js\");\n"],"names":["root","factory","exports","module","define","amd","this","Base64","Bits","Convert","Hex","Long","KEY_STR","ENC_LUT","DecodeError","Error","LegacyEncoder","base64_encode","input","let","output","i","chr1","charCodeAt","chr2","chr3","enc1","enc2","enc3","enc4","isNaN","charAt","length","base64_decode","String","fromCharCode","isNode","window","hasBuffer","Buffer","hasBlob","Blob","BufferEncoder","str","from","toString","WindowEncoder","b","a","encode","decode","get","val","shift","numBits","set","dataIn","curMask","shiftedVal","data","ErrorSubcode","OperationError","BufferImpl","TWO_ZEROES_STR","THREE_ZEROES_STR","FOUR_ZEROES_STR","BYTEARRAY_CONVERT_CHUNK","UNSIGNED_LSHIFT_24","ARRAY_BUFFER_CONVERT_CHUNK","stringToUint8Array","dataLength","arrayBuf","ArrayBuffer","uint8Array","Uint8Array","arrayBufferToString","ab","len","byteLength","u8","apply","k","r","subarray","stringToArrayBuffer","buffer","int8ToStr","int8","int16ToStr","int16","int24ToStr","int24","int32ToStr","int32","int64ToStr","int64","high","low","byteArrayToStr","byteArray","slice","strToByteArray","result","strToHexArray","toHex","c","Array","prototype","map","call","split","strToInt8","strToInt16","strToInt24","strToInt32","strToUInt32","strToUInt64","fromBits","substr","ucs2ToUtf8","ucs2","unescape","encodeURIComponent","utf8ToUcs2","utf8","decodeURIComponent","escape","anythingToBuffer","value","isBuffer","byteOffset","PARAMETER_OUT_OF_RANGE","numToHex","n","s","formatHexString","obj","isArray","join","_","Debug","Destination","ESKit","Factory","FSM","Log","Message","Publisher","SDT","Session","SMF","SolcacheSession","TestEnv","Transport","Util","Validate","FactoryLib","SolclientFactory","SolclientFactoryProfiles","SolclientFactoryProperties","DestinationType","Topic","NotImplementedError","RequestError","RequestEventCode","makeIterator","ConsoleLogImpl","LogImpl","LogLevel","MessageCacheStatus","MessageDeliveryModeType","MessageDumpFlag","MessageType","MessageUserCosType","ReplicationGroupMessageId","MessageConsumer","MessageConsumerAcknowledgeMode","MessageConsumerEventName","MessageConsumerProperties","QueueBrowser","QueueBrowserEventName","QueueBrowserProperties","ReplayStartLocation","ReplayStartLocationBeginning","MessagePublisherAcknowledgeMode","MessagePublisherProperties","AbstractQueueDescriptor","QueueAccessType","QueueDescriptor","QueueDiscardBehavior","QueuePermissions","QueueProperties","QueueType","SDTField","SDTFieldType","SDTMapContainer","SDTStreamContainer","SDTUnsupportedValueError","SDTValueErrorSubcode","AuthenticationScheme","CapabilityType","MessageRxCBInfo","MutableSessionProperty","SessionEvent","SessionEventCBInfo","SessionEventCode","SessionProperties","SessionState","SslDowngrade","CacheCBInfo","CacheLiveDataAction","CacheRequestResult","CacheReturnCode","CacheReturnSubcode","CacheSession","CacheSessionProperties","StatType","TransportError","TransportProtocol","Version","_internal","solace","Object","assign","PRINTABLE_LUT","tmp","SPACER","UNPRINTABLE","formatDumpBytes","showDecode","leftPadding","StringBuffer","StringUtils","isEmpty","padLeft","padRight","ascii","line","lineBytes","asciiOffset","dataLen","ccode","append","clear","parseSMFStream","Decode","decodeCompoundMessage","Codec","LOG_WARN","LOG_ERROR","pos","incomingMsg","smf","smfHeader","smf_protocol","messageLength","DestinationFromNetwork","DestinationUtil","Parameter","Queue","createTopicDestination","createFactory","isString","topicName","createFromName","createTopic","createDurableQueueDestination","queueName","createFromLocalName","QUEUE_PREFIX","QUEUE_PREFIX_LEN","TEMPORARY_QUEUE_PREFIX","createDestinationFromName","networkTopicName","networkTopicBytes","undefined","spec","name","bytes","encodeBytes","startsWith","offset","type","QUEUE","TEMPORARY_QUEUE","createDestinationFromBytes","decodeBytes","Enum","TOPIC","new","_setCanonical","SolclientFactoryLib","SubscriptionInfo","UUID","ProfileBinding","toSafeChars","stripNullTerminate","DESTINATION_PREFIX_FROM_TYPE","createTemporaryName","vrid","id","generateUUID","describe","createPrefix","createOperationError","errorStr","INVALID_TOPIC_SYNTAX","legacyValidate","exceptionCreator","bind","error","nameLength","bytesLength","isWildcarded","topicUtf8Encode","prefix","networkName","validateAndEncode","constError","subscriptionInfo","keys","some","prefixType","errorConst","subInfo","subInfoConst","parseFromName","constructor","_name","_type","_bytes","_offset","isValidated","_isValidated","_isWildcarded","_subscriptionInfo","getName","getType","getBytes","getOffset","validate","_error","getSubscriptionInfo","util_inspect","equals","other","valueOf","DestinationUtilLib","assert","super","encoding","subscriptionParseNoExport","NOEXPORT_PREFIX","NOEXPORT_PREFIX_LEN","index","isNoExport","subscriptionParseShare","SHARE_PREFIX","SHARE_PREFIX_LEN","LEVEL_DELIMETER","LEVEL_DELIMETER_LEN","groupIndex","shareGroup","isShare","indexOf","substring","dispatchTopicIndex","subscriptionStringParse","layers","parseLayers","constOffset","constResult","SUBSCRIPTION_LAYER_PARSER_FROM_TYPE","_layers","parse","_isShare","_isNoExport","_dispatchTopicIndex","_shareGroup","parser","apiEnv","envObject","g","BUILD_ENV","TEST","target","ErrorResponseSubcodeMapper","SolaceError","makeMap","SC","ROOT_MAPPING","CLIENT_NAME_INVALID","MESSAGE_TOO_LARGE","INACTIVITY_TIMEOUT","SUBSCRIPTION_TOO_MANY","NOLOCAL_DISCARD","OUT_OF_RESOURCES","SUBSCRIPTION_ALREADY_PRESENT","SUBSCRIPTION_ATTRIBUTES_CONFLICT","SUBSCRIPTION_NOT_FOUND","SUBSCRIPTION_INVALID","UNKNOWN_TRANSPORT_SESSION_ID","XML_PARSE_ERROR","LOGIN_FAILURE","BASIC_AUTHENTICATION_IS_SHUTDOWN","CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN","CLIENT_NAME_ALREADY_IN_USE","CLIENT_USERNAME_IS_SHUTDOWN","DYNAMIC_CLIENTS_NOT_ALLOWED","INVALID_VIRTUAL_ADDRESS","CLIENT_ACL_DENIED","MESSAGE_VPN_NOT_ALLOWED","PUBLISH_ACL_DENIED","REPLICATION_IS_STANDBY","SELECTOR_DOES_NOT_MATCH","SUBSCRIPTION_ACL_DENIED","SUBSCRIPTION_DOES_NOT_MATCH","SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED","SHARED_SUBSCRIPTIONS_NOT_ALLOWED","LOW_PRIORITY_MSG_CONGESTION","MESSAGE_VPN_UNAVAILABLE","GM_UNAVAILABLE","SPOOL_OVER_QUOTA","CLIENT_DELETE_IN_PROGRESS","TOO_MANY_CLIENTS","MAX_MESSAGE_USAGE_EXCEEDED","GM_NOT_READY","AD_MAPPING","ALREADY_BOUND","ENDPOINT_ALREADY_EXISTS","ENDPOINT_PROPERTY_MISMATCH","INVALID_DTE_NAME","INVALID_SELECTOR","INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT","QUEUE_NOT_FOUND","QUOTA_OUT_OF_RANGE","UNKNOWN_FLOW_NAME","UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND","PERMISSION_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED","REPLAY_TEMPORARY_NOT_SUPPORTED","UNKNOWN_START_LOCATION_TYPE","MISMATCHED_ENDPOINT_ERROR_ID","REPLAY_START_MESSAGE_NOT_AVAILABLE","TOPIC_ENDPOINT_SHUTDOWN","MAX_CLIENTS_FOR_TE","MAX_CLIENTS_FOR_QUEUE","NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT","NO_SUBSCRIPTION_MATCH","QUEUE_SHUTDOWN","UNKNOWN_TOPIC_ENDPOINT_NAME","UNKNOWN_QUEUE_NAME","REPLAY_DISABLED","REPLAY_CANCELLED","REPLAY_MESSAGE_UNAVAILABLE","REPLAY_STARTED","REPLAY_MESSAGE_REJECTED","REPLAY_LOG_MODIFIED","OUT_OF_REPLAY_RESOURCES","TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT","REPLAY_FAILED","REPLAY_START_TIME_NOT_AVAILABLE","getSubcodeMappingInner","respErrorCode","respStr","codeMap","searchKey","toLowerCase","foundKey","find","mapKey","getSubcodeMapping","UNKNOWN_ERROR","getErrorSubcode","getADErrorSubcode","NO_ERROR","SESSION_NOT_CONNECTED","INVALID_SESSION_OPERATION","INVALID_OPERATION","TIMEOUT","PARAMETER_CONFLICT","PARAMETER_INVALID_TYPE","INTERNAL_ERROR","INSUFFICIENT_SPACE","PROTOCOL_ERROR","COMMUNICATION_ERROR","KEEP_ALIVE_FAILURE","TOPIC_MISSING","SUBSCRIPTION_ERROR_OTHER","NO_LOCAL_NOT_SUPPORTED","DATA_ERROR_OTHER","CREATE_XHR_FAILED","CONNECTION_ERROR","DATA_DECODE_ERROR","AD_MESSAGING_NOT_SUPPORTED","CREATE_WEBSOCKET_FAILED","UNEXPECTED_UNBIND","MESSAGE_DELIVERY_MODE_MISMATCH","MESSAGE_ALREADY_ACKNOWLEDGED","CALLBACK_ERROR","FAILED_LOADING_TRUSTSTORE","FAILED_LOADING_CERTIFICATE_AND_KEY","UNRESOLVED_HOSTS","REPLAY_NOT_SUPPORTED","COMPRESSED_TLS_NOT_SUPPORTED","SHARED_SUBSCRIPTIONS_NOT_SUPPORTED","MESSAGE_ID_NOT_COMPARABLE","message","subcode","reason","SUBCODE_FROM_EC","REQUEST_ABORTED","REQUEST_TIMEOUT","eventCode","correlationKey","_eventCode","_correlationKey","_requestEventCode","superObj","requestEventCode","infoStr","captureStackTrace","stack","ArrayOperations","BidiMap","Iterator","Lazy","Mixin","Resolver","SetOperations","mixin","resolve","defaultComparator","astr","bstr","insertOrdered","array","element","comparator","inplaceInsertOrdered","min","max","splice","pairs","forward","Map","reverse","forEach","setValues","p","key","enumName","instance","matches","filter","enumValues","Set","values","defineProperties","_canonical","enumerable","writable","configurable","final","descriptor","getOwnPropertyDescriptor","defineProperty","enumValue","noneValue","unknownValue","nameOf","strings","arr","start","end","_arr","_index","_end","deref","incr","DEFAULT_PROPERTY_OPTIONS","setPropertyValue","options","lazyProperty","evalFn","lazyProperties","lazyValue","keyValuePairs","add","targetProto","addProto","getOwnPropertyNames","traversePath","commonSource","keySource","pathArr","reduce","source","compoundKey","trim","rawPath","path","concat","isSuperset","subset","every","elem","has","inplaceUnion","setA","setB","union","inplaceIntersection","delete","intersection","inplaceDifference","difference","EventEmitter","Timer","NodeEventEmitter","ArrayUtils","flatten","includes","NODE_DEFAULT_EVENTS","BLACKLIST_DIRECT","buildFilter","emits","emitSet","el","emitArray","DISABLED_ACTIONS","ignore","fail","direct","unsafe","formatEventName","bareEmit","emit","_installDirectFilter","_installErrorHandlers","_installEmitVerifier","_listenerVerificationFilter","_emits","_defaultEmitDirect","args","emitDirect","_directEventName","on","eventName","listener","_verifyListenerEvent","ret","_setEmitDirect","addListener","once","prependListener","prependOnceListener","removeAllListeners","removeListener","listenerCount","directListenerCount","setOnFirstDirectListener","_onFirstDirectListener","firstDirect","onListener","event","throwInternal","err","emitBase","_internalError","ex","formatErrorEvent","info","formattedName","innerEx","disableEmitter","cancel","interval","onInterval","timerRef","setInterval","clearInterval","timeout","onExpire","setTimeout","clearTimeout","FactoryProfile","binding","guaranteedMessagingEnabled","cometEnabled","byteArrayAsString","Version7Profile","legacyInstance","Version10Profile","v10Instance","Version105Profile","forwardInstance","_legacy","_v10","_forward","_default","version7","version10","version10_5","APIProperties","Check","getDefaultLogLevel","INFO","logLevel","logger","_profile","profile","number","_logLevel","_logger","factoryState","initializeCount","initializers","addInitializer","func","push","init","factoryProps","props","isInstanceOf","initializer","reset","_getInitializeCount","Flow","FlowOperation","PrivateFlowEventName","CONNECT","DISCONNECT","START","STOP","DISPOSE","GET_STATS","RESET_STATS","GET_PROPERTIES","GET_DESTINATION","LogFormatter","Stats","ALWAYS_OPS","flowProperties","sessionInterfaceFactory","emitterOptions","emitterOptionsFull","sessionInterface","self","sessionIdHex","flowIdDec","log","wrap","_disposing","_disposed","_userDisconnected","_properties","_sessionInterface","_stats","_privateEventEmitter","_emit","_on","_once","_removeListener","clearStats","_operationCheck","resetStats","connect","userDisconnected","dispose","terminate","getDisposedEvent","_fsm","_midDispatch","terminateWithRunningFSM","terminateFsm","disconnect","_disconnectSession","getProperties","clone","getStat","statType","handleUncorrelatedControlMessage","incStat","processFSMEvent","processEvent","disposed","flowId","_session","_userDisconnecte","operation","v","_isDisconnected","BIND_WAITING","FsmEvent","State","StateMachine","StateLib","FsmObject","EntryPoint","entryPointName","innerState","impl","outerState","state","parentContext","getParent","initial","transitionTo","getDestState","ExitPoint","exitPointName","extraStringInfo","getExtraStringInfo","StateContext","logPadding","getStateMachine","ancestorList","initialReaction","action","ReactionResult","caller","destState","getFinalState","getAncestorList","onInitial","external","processReactionResult","e","curContext","destStateIter","lowestCommonAncestor","onExit","onEntry","destInitial","reactionResult","destAncestorList","setLogPadding","padding","isRunning","eventQueue","finalState","handleUncaughtException","ev","exc","process","processingEvents","evt","_onEventCompletion","getCurrentState","currentState","handleEvent","curState","setPostEventAction","postEventAction","getActiveState","activeStates","isStateActive","unhandledEventReaction","handleUnhandledEvent","uncaughtExceptionReaction","extensions","reactions","entryPoints","exitPoints","extension","repeat","reaction","entryPoint","exitPoint","getEntryPointDestState","getExitPointDestState","entry","appEntryFunc","exit","appExitFunc","externalTransitionTo","transitionToEntryPoint","transitionToExitPoint","eventUnhandled","internalTransition","GlobalBinding","isEnumMember","isFunction","getImpl","getLogLevel","setImpl","setLogLevel","forwarder","buildLogForwarder","trace","TRACE","debug","DEBUG","warn","WARN","ERROR","fatal","addGlobalFuncs","toUpperCase","formatter","_formatter","genericFunction","targetSelf","newLevel","Binding","STUB","generateLogHeader","levelStr","date","Date","levelStrPadding","YY","getFullYear","MM","getMonth","DD","getDate","hh","getHours","mm","getMinutes","ss","getSeconds","ms","getMilliseconds","consoleIn","_trace","_debug","_info","_warn","_fatal","console","Function","level","LogBinding","FATAL","ConsumerFlows","ConsumerFSMEvent","ConsumerFSMEventNames","MessageConsumerEvent","ApplicationAckState","UNACKED","ACKED_NOT_SENT","ACKED_SENT","ApplicationAck","exists","ApplicationAckRingBuffer","size","_size","_insertIndex","_buffer","fill","ack","insert","beforeEvictCallback","insertIndex","inserting","evictingIndex","evicting","front","firstIndex","rawIndex","lastIndex","readIndex","callback","updateAckState","updateIndex","existing","_allFlows","_reconnectingFlows","_flowsById","flow","flowUp","flowDisposed","flowById","flowReconnecting","flowReconnected","flowDown","UP","RECONNECTED","DISPOSED","RECONNECTING","DOWN","DOWN_ERROR","getFlowById","disposeAll","SESSION_UP","SESSION_UP_NO_AD","SESSION_DOWN","SESSION_DISCONNECT","FLOW_FAILED","FLOW_UP","FLOW_ACTIVE_IND","FLOW_CLOSE","FLOW_OPEN","FLOW_UNBOUND","ACK","ACK_TIMEOUT","BIND_TIMEOUT","CREATE_TIMEOUT","UNBIND_TIMEOUT","CAN_SEND","TRANSPORT_ERROR","VIRTUALROUTER_NAME_CHANGED","RECONNECT_INTERVAL_TIMEOUT","BIND_RESPONSE","CREATE_FAILED","CREATE_SUCCESS","details","SMFLib","ConsumerStateNames","MessageDispatcher","RgmidFactory","TransportAcks","TransportAckResult","RING_BUFFER_SIZE","ZERO_APP_ACK","UZERO","ConsumerFSM","consumer","properties","fsm","LOG_INFO","autoAck","acknowledgeMode","AUTO","_consumer","_acknowledgeTimeoutInMsecs","acknowledgeTimeoutInMsecs","_acknowledgeThreshold","acknowledgeThreshold","_localPreferredWindowSize","windowSize","_localMaxWindowSize","_messageDispatch","emitter","_resetRemoteConnectionState","_resetLocalConnectionState","_replayStartLocation","replayStartLocation","_errorCausingReconnect","emitEventActionType","startDispatchActionType","stopDispatchActionType","postEventActions","preprocessPostEventActions","startIndex","actionLocations","cancelAction","firstActionName","cancellingActionName","firstLocation","ACTIVE","INACTIVE","processPostEventActions","preprocessedActions","requestStartDispatchFSM","addPostEventAction","newEvent","addEventToEmit","activeIndicationEnabled","requestStartDispatch","requestStopDispatch","requestStopDispatchFSM","_addEventToEmit","_requestStartDispatch","_requestStopDispatch","emitBindFailed","CONNECT_FAILED_ERROR","emitRebindFailed","verifyEndpointSubscription","destination","isCapable","SHARED_SUBSCRIPTIONS","checkCapabilitiesChoicePoint","MESSAGE_REPLAY","topicEndpointSubscription","Unbound","createIfMissing","queueDescriptor","durable","CreateSent","BindSent","handleAccidentalBind","msg","correlationTag","getCorrelationTag","AdProtocolMessage","getCloseMessageConsumer","sendControl","enqueueRequest","connectTimeoutInMsecs","transitionToUnbound","_dispose","context","UNBOUND","emitDisabledEvent","GM_DISABLED","AwaitSessionUp","GUARANTEED_MESSAGE_CONSUME","AwaitFlowOpen","_connectAttempts","connectAttempts","UNBOUND_AWAIT_SESSION_UP","emitBindWaiting","UNBOUND_AWAIT_FLOWOPEN","BindSentExtensions","sendBindRequest","transportAcks","_transportAcks","_endpointEnsure","endpoint","_endpoint","subscription","_subscription","getOpenMessageConsumer","queueProperties","noLocal","lastAcked","lastReceived","browser","endpointErrorId","handleBindTimeout","handleBindResponse","cancelBindRequestTimer","bindRequestTimer","handleExpectedBind","accessTypeOrDefault","x","EXCLUSIVE","attrs","lastMsgIdAcked","getLastMsgIdAcked","getFlowId","accessType","getAccessType","topicEndpointBytes","getTopicEndpointBytes","grantedPermissions","getGrantedPermissions","allOthersPermissions","getAllOthersPermissions","respectsTTL","getRespectsTTL","activeFlow","getActiveFlow","wantFlowChangeNotify","getWantFlowChangeNotify","discardBehavior","getQueueDiscardBehavior","deliveryCountSent","getEndpointDeliveryCountSent","endpointId","getEndpointId","maxUnackedMessages","getMaxUnackedMessages","getEndpointErrorId","spoolerUniqueId","getSpoolerUniqueId","quota","getQuota","maxMsgSize","getMaxMsgSize","maxRedelivery","getMaxRedelivery","queueDiscardBehavior","permissions","BR_REPLAY_ERRORID","consumerProperties","quotaMB","maxMessageSize","maxMessageRedelivery","NONE","_active","_remoteWindowSize","eq","msgType","SMFAdProtocolMessageType","BIND","PROTOTOCOL_ERROR","header","responseCode","pm_respcode","RX_DISCARD_SMF_UNKNOWN_ELEMENT","description","pm_respstr","errorSubcode","respEvent","BIND_SENT","newTimeout","UnbindSent","FlowUp","Reconnecting","reconnectAttempts","RBindSent","RAwaitSessionUp","RECONNECTING_AWAIT_SESSION_UP","RECONNECTING_BIND_SENT","RAwaitTimer","RECONNECTING_AWAIT_TIMER","handleReconnectIntervalTimeout","cancelReconnectIntervalTimer","reconnectIntervalTimer","reconnectIntervalInMsecs","flowUpFSM","XferInactive","Xfer","transitionToUnboundFromUp","FLOW_UP_XFER","_sendAcks","FLOW_UP_XFER_INACTIVE","UNBIND_SENT","sendUnbindRequest","_endpointClear","handleUnbindTimeout","response","handleUnbindResponse","getCurrentStateName","UNBIND","CREATE_SENT","sendCreateRequest","getCreate","handleCreateTimeout","handleCreateResponse","CREATE","acceptMessage","messageID","getGuaranteedMessageId","idstr","_fsmDispatch","RX_DISCARD_NO_MATCHING_CONSUMER","setDeliveryCount","messageSuid","_getSpoolerUniqueId","INVALID_SUID","_setSpoolerUniqueId","consumerSuidStr","msgSuidStr","ackResult","tryReceive","getGuaranteedPreviousMessageId","transportAckRequired","acksPending","maxPendingAcks","OK","DUPLICATE","RX_DISCARD_DUPLICATE","_applicationAcks","_oldUnacked","_sendAck","_setTransportAckTimer","OUT_OF_ORDER","RX_DISCARD_OUT_OF_ORDER","applicationAckRequired","applicationAck","messageId","RX_ACKED","getDestination","_destination","isDisconnected","UNBOUND_AWAITING_FLOWOPEN","requestStartDispatchUser","_userDispatch","applyStartDispatch","unbindAck","getUnbindAck","_flowId","requestStopDispatchUser","stop","_clearTransportAckTimer","_transportAckTimer","_unacked","createDestinationFromDescriptor","createTemporaryDestination","applicationAcks","transportAck","getAck","_addAckToRanges","acksPendingState","currentRange","ackRanges","MAX_CLIENT_ACK_RANGES","bareRanges","range","forceTransportAck","setAcked","ackRange","Math","Number","POSITIVE_INFINITY","maxWindowSize","UNBOUND_AWAIT_ANY","CLIENT","MESSAGE","SUBSCRIPTION_OK","SUBSCRIPTION_ERROR","messageConsumerEventName","_messageConsumerEventName","_infoStr","_responseCode","_errorSubcode","_reason","QueueDescriptorValidator","QueuePropertiesValidator","APIPropertiesValidators","validateInstance","valBoolean","valInstance","valIsMember","valNumber","valRange","valTopicStringOrEmpty","valTopicEndpointSubscription","typeDesc","TOPIC_ENDPOINT","isDurable","MessageConsumerPropertiesValidator","rawProperties","hasOwnProperty","something","MAX_VALUE","QueueLib","DEFAULTS","transportAcknowledgeTimeoutInMsecs","transportAcknowledgeThresholdPercentage","_browser","_queueDescriptor","_queueProperties","_bindTimeoutInMsecs","_topicEndpointSubscription","_acknowledgeMode","_transportAcknowledgeTimeoutInMsecs","_transportAcknowledgeThresholdPercentage","_activeIndicationEnabled","newValue","_noLocal","_windowSize","_reconnectAttempts","_reconnectIntervalInMsecs","_createIfMissing","localCounter","getConsumerLocalName","applyProperties","superFormatter","_makeFSM","_onFlowActive","_onFlowDisconnected","_onFlowUp","getCapability","handleDataMessage","setMessageConsumer","FLOWCHANGEUPDATE","active","onVRNChanged","_accessType","_queueDiscardBehavior","_respectsTTL","_permissions","isActive","_disposeFSM","addSubscription","topic","requestTimeout","success","subCode","respCode","respText","updateQueueSubscription","removeSubscription","queue","dispatch","_dispatchOne","_dispatchOneAutoAck","_dispatchOneBare","_onFirstMessageListener","_availableListener","_flush","caught","isAcknowledged","acknowledge","messageConsumer","_messageConsumer","_setupEventListers","_onConsumerUp","_onConsumerConnectFailed","_onConsumerDown","_onConsumerDownError","_onConsumerMessage","_onConsumerDisposed","_onConsumerGMDisabled","removeMessageFromQueue","_guaranteedMsgId","_acked","base","fromNumber","fromValue","_acksPending","ZERO","prevMessageID","_lastReceived","lt","gte","_lastAcked","MessagePublisher","MessagePublisherEventName","MessagePublisherPropertiesValidator","PublisherFSMEvent","PublisherFSMEventNames","_lastSent","_next","longToString","MessageIds","setLastSent","lastSent","next","PER_MESSAGE","WINDOWED","ACKNOWLEDGED_MESSAGE","FLOW_NAME_CHANGED","GUARANTEED_MESSAGING_DOWN","REJECTED_MESSAGE","DISCONNECT_FAILED_ERROR","TRANSPORT_FULL","TransportCapabilities","defaultEnablePublisher","globallyEnabled","webSocketAvailable","web","webSocket","getDefaults","enabled","connectRetryCount","_enabled","defined","_connectRetryCount","_connectTimeoutInMsecs","PublisherFSM","_bindWaiting","_onBindWaiting","_onBindFailed","_onDown","_onUp","publisher","_flowName","_publisherId","handleAck","handleNack","ctrlMessage","nack","CLIENTACK","CLIENTNACK","CLOSEPUBFLOW","prepareAdMessageAndSend","dataMsg","isBindWaiting","publisherId","RESEND_COMPLETE","smfmessage","getEventText","_eventText","SolclientSession","PublisherStateNames","TransportReturnCode","ConnectReason","INIT","RESUME","FAILOVER","_publisher","_stateEvents","_guaranteedEnabled","_sendWindow","_resetConnectedInfo","_notifiedWindowClosed","_transportFlowControlled","PublisherUnbound","emitDownAndBindWaiting","PublisherOpenFlowSent","OPENFLOWSENT","emitOpenFlowFailedError","handleOpenFlowResponse","adpMsg","smfRespHeader","OPENPUBFLOW","returnCode","mappedSubcode","lastMsgIDAcked","getWindow","flowName","getFlowName","getPublisherId","_messageIds","_unackedList","_connectReason","messages","count","oldId","_renumber","setFlowId","setPublisherId","payloadSizeLimit","MAX_GUARANTEED_MSG_SIZE","getValue","_memoized_payload","_handleAck","_firstUnackedToSend","handleOpenFlowTimeout","handleUnknownFlowName","sendOpenFlow","openPubFlowMsg","getOpenMessagePublisher","rxMsgObj","PublisherCloseFlowSent","PublisherUp","pEvent","CLOSEFLOWSENT","handleCloseFlowResponse","handleCloseFlowTimeout","sendCloseFlow","closePubFlowMsg","getCloseMessagePublisher","_handleAckEvent","emitFlowUp","PublisherRetransmitting","PublisherDataXfer","_scheduleStateEvents","DATA_XFER","_maybeEmitCanSend","PublisherFlowControlled","FLOW_CONTROLLED","RETRANSMITTING","retransmit","_resendFromUnacked","TX_WINDOW_CLOSED","unackedList","_payload_is_memoized","_memoized_csumm","dupMsg","payloadSize","Encode","adaptMessageToSmf_payloadMemoize","_cloneNumbers","msgId","sendToTransport","NO_SPACE","setRedelivered","_startAckTimer","pop","TX_ACKS_RXED","openFlow","messageIds","reportAcked","reportNacked","numAcked","lastAckedMessage","_resetAckTimer","_clearAckTimer","list","resendIndex","m","sendData","failover","_ackTimer","_emitStateEvents","pair","_handleAckTimeout","TX_ACK_TIMEOUT","current","setGuaranteedPreviousMessageId","setGuaranteedMessageId","fromMsg","toMsg","_setPostEventAction","desc","_postEventAction","FAILED","MessageDumpStandardProvider","MessageDumpUtil","createMessage","createReplicationGroupMessageId","fromString","LIVE","CACHED","SUSPECT","DIRECT","PERSISTENT","NON_PERSISTENT","MSGDUMP_BRIEF","MSGDUMP_FULL","DebugLib","MessageDumpUtilLib","fpDestination","dest","fpSenderId","getSenderId","fpAppmsgType","getApplicationMessageType","fpAppMsgId","getApplicationMessageId","fpSequenceNumber","sequenceNum","getSequenceNumber","fpTopicSequenceNumber","topicSeqNo","getTopicSequenceNumber","isLong","fpCorrelationId","getCorrelationId","fpHttpContentType","fpHttpContentEncoding","fpSendTimestamp","timestamp","getSenderTimestamp","mdu","formatDate","fpRcvTimestamp","getReceiverTimestamp","fpClassOfService","cos","getUserCos","fpDeliveryMode","mode","getDeliveryMode","fpGuaranteedMsgId","fpReplicationGroupMessageId","rgmid","getReplicationGroupMessageId","fpTimeToLive","timeToLive","getTimeToLive","d","getTime","fpExpiration","getGMExpiration","fpMessageDMQEligible","isDMQEligible","fpMessageRedelivered","isRedelivered","fpMessageDeliveryCount","getDeliveryCount","fpDiscardIndication","isDiscardIndication","fpAckImmediately","isAcknowledgeImmediately","fpElidingEligible","isElidingEligible","fpReplyMessage","isReplyMessage","fpReplyTo","replyTo","getReplyTo","fpDeliverToOne","isDeliverToOne","fpCacheMessage","getCacheStatus","fpCacheRequestId","cacheRequestId","getCacheRequestId","fpUserPropertyMap","flags","propMap","getUserPropertyMap","getKeys","detailValue","printMap","fpCorrelationTag","strValue","getCorrelationKey","fpUserData","notEmpty","getUserData","fpSdtStream","sdtFieldValue","getSdtContainer","STREAM","countItems","printStream","fpSdtMap","MAP","fpBinaryAttachment","_binaryAttachment","att","fpXmlContent","xml","getXmlContent","fpXmlMetadata","xmlMetadata","getXmlMetadata","MessageDumpStandardProviderLib","MessageDumpState","providers","getOutOfRangeValue","rawData","sdtField","getSubcode","VALUE_OUTSIDE_SUPPORTED_RANGE","getSourceData","sdtMap","indent","nothing","lines","strIndent","sort","getField","BYTEARRAY","sdtStream","rewind","hasNext","getNext","DESTINATION","timeStamp","dump","separator","colPadding","sb","theSeparator","needSeparator","theColPadding","dumpProviders","provider","isPresent","BINARY","TEXT","COS1","COS2","COS3","SDTCodec","isBoolean","isInstanceOfOrNothing","isNumberOrNothing","isStringOrNothing","MESSAGE_CLONE_OPTIONS","circular","includeNonEnumerable","initMessage","_deliveryMode","_userCos","_cacheStatus","_spoolerUniqueId","_priority","_deliveryCount","clearMessage","fields","f","_messageType","setApplicationMessageId","_applicationMessageId","setApplicationMessageType","_applicationMessageType","getBinaryAttachment","setBinaryAttachment","_setBinaryAttachment","_cacheRequestId","_setCacheRequestID","cacheRequestID","_correlationId","setCorrelationId","setCorrelationKey","_deliverToOne","setDeliverToOne","_setDeliverToOne","setDeliveryMode","_setDeliveryMode","setDestination","_setDestination","_discardIndication","setDiscardIndication","_setDiscardIndication","_elidingEligible","setElidingEligible","_setElidingEligible","getPublisherMessageId","_publisherMsgId","setPublisherMessageId","_timeToLive","setTimeToLive","MAX_MESSAGE_TTL_MS","_expiration","setGMExpiration","_dmqEligible","setDMQEligible","_setDMQEligible","_guaranteedPrevMsgId","getMessageConsumer","_setSpoolerMessageId","_spoolerMessageId","smid","suid","msgid","_topicSequenceNumber","setTopicSequenceNumber","deliveryCount","canAck","_ackImmediately","setAcknowledgeImmediately","_setAcknowledgeImmediately","_setCacheStatus","cacheStatus","_replyMessage","_redelivered","setAsReplyMessage","_receiverTimestamp","_replyTo","setReplyTo","_senderId","setSenderId","_senderTimestamp","setSenderTimestamp","_sequenceNumberError","_sequenceNumber","setSequenceNumber","_autoSequenceNumber","getPriority","setUserCos","_setUserCos","setPriority","_setPriority","_userData","setUserData","_setUserData","_xmlContent","getXmlContentDecoded","setXmlContent","setValue","_setXmlContentInternal","setXmlMetadata","_setXmlMetadata","_xmlMetadata","_binaryMetaChunk","meta","_smfHeader","_autoSenderTimestamp","_userPropertyMap","setUserPropertyMap","setSdtContainer","container","structuredContainer","_structuredContainer","sdtType","STRING","binaryAttachment","binaryAttachmentLength","parseSingleElement","validFlags","ReplayStartType","RMID_VERSION_1_PREFIX","RMID_LEN","validRmidHexRegex","isValue","effectiveMessageId","_replayStartValue","RGMID","_suid","_messageId","compare","otherReplicationGroupMessageId","oId","gt","idBuffer","toBytesBE","hexString","sep","rgmidStr","rmidBufs","rmidHex","test","rmidBuffer","buflen","readUInt32BE","TYPE_DESCRIPTION","DESINATION_TYPE_TO_DESCRIPTOR_TYPE","maybeAdaptFromDestination","targetType","queueSpec","_durable","NONEXCLUSIVE","valTopicString","NOTIFY_SENDER_ON","NOTIFY_SENDER_OFF","READ_ONLY","CONSUME","MODIFY_TOPIC","DELETE","_quotaMB","_maxMessageSize","_discardBehavior","_maxMessageRedelivery","ReplayStartLocationDate","createReplayStartLocationBeginning","createReplayStartLocationDate","dateTime","BEGINNING","DATE","SDTDestType","EncodeSingleElement","IEEE754LIB","ParseSingleElement","StringToBuffer","encodeSingleElement","stringToBuffer","SDTDataTypes","EncodeHeader","encodeHeader","tag","valueLen","byte0","strSdtLen","Stream","EncodeInteger","int48ToStr","vIn","byteI","floor","EncodeSingleElementLib","UtilLib","EncodeMap","encodeMap","sdtmap","buf","sdtfield","strKeyField","strKeyName","nullTerminate","encodeSingleElementToBuf","DestinationLib","EncodeStream","encodeStream","C_2_48","pow","strencode","fieldVal","BOOL","Boolean","UINT8","UnsignedInteger","INT8","Integer","UINT16","INT16","UINT32","INT32","UINT64","INT64","WCHAR","Char","ByteArray","FLOATTYPE","Float","toIEEE754Single","DOUBLETYPE","toIEEE754Double","NULLTYPE","Null","UNKNOWN","hdr","sdtstream","toIEEE754","ebits","fbits","bias","Infinity","abs","ln","LN2","bits","parseInt","fromIEEE754","j","NaN","strToByteArr","byteArrToStr","fromIEEE754Double","fromIEEE754Single","ParseDestination","parseDestination","dataBuf","destType","readUInt8","destBytes","create","ParseInteger","autoDecodeVarLengthNumber","ParseFieldHeader","parseFieldHeader","onebyte","elemType","lenBytes","elemLen","elemValLen","ParseFloat","parseFloatField","readFloatBE","readDoubleBE","createField","readUIntBE","parseIntegerField","isSigned","readInt8","readInt16BE","readUInt16BE","readInt32BE","longValue","getNumBitsAbs","toNumber","field","setError","ParseSingleElementLib","ParseMap","parseMapAt","datalen","mapObj","keyFieldHeader","keyString","valueFieldHeader","valueField","addField","ParseStream","parseStreamAt","fieldHeader","SMFMessage","SMF_MESSAGE","streamObj","validateSdtField","_value","getValueNoThrow","_map","deleteField","typeOrField","SDTFieldLib","_stream","_writable","_readPt","sourceData","inspect","SDTMapContainerLib","SDTStreamContainerLib","ValidateLib","baseTypes","failInvalidParameter","valueType","instanceOf","ClientCapabilityType","SessionEventName","createSession","sessionProperties","messageCallbackInfo","eventCallbackInfo","BASIC","CLIENT_CERTIFICATE","AUTHENTICATION_SCHEME_BASIC","AUTHENTICATION_SCHEME_CLIENT_CERTIFICATE","OAUTH2","PEER_SOFTWARE_VERSION","PEER_SOFTWARE_DATE","PEER_PLATFORM","PEER_PORT_SPEED","PEER_PORT_TYPE","MAX_DIRECT_MSG_SIZE","PEER_ROUTER_NAME","MESSAGE_ELIDING","NO_LOCAL","TEMPORARY_ENDPOINT","GUARANTEED_MESSAGE_PUBLISH","GUARANTEED_MESSAGE_BROWSE","ENDPOINT_MGMT","SELECTOR","ACTIVE_CONSUMER_INDICATION","COMPRESSION","CUT_THROUGH","ENDPOINT_DISCARD_BEHAVIOR","ENDPOINT_MESSAGE_TTL","JNDI","PER_TOPIC_SEQUENCE_NUMBERING","QUEUE_SUBSCRIPTIONS","SUBSCRIPTION_MANAGER","TRANSACTED_SESSION","COMPRESSED_SSL","UNBIND_ACK","BR_ERRORID","CorrelatedRequest","timer","respRecvdCallback","DefaultCapabilities","createDefaultCapabilities","defaultCapabilities","assumedMaxAdSize","Process","C_2_32","leftPad","generateRandomId","rand","random","toFixed","GlobalContext","sessionCounter","idCounter","RandId","NextSessionCounter","NextId","GenerateClientName","product","platform","GenerateUserIdentification","GenerateClientDescription","parseURL","hostListDNSFilter","urls","cb","host","url","address","resolved","parseURLs","rawURLs","rawURL","HostInfo","waitTime","HostList","connectRetries","reconnectRetries","connectRetriesPerHost","reconnectRetryWaitInMsecs","hosts","href","connectTryCount","reconnectTryCount","connectTryCountPerHost","_mutableState","resolveHosts","succeeded","code","syscall","hostname","wasConnected","disconnected","hostPointer","hostTries","listTries","exhausted","lastHostInfo","getNextHost","hostTriesMax","listTriesMax","isNewList","isNewHost","didJustFinishList","hostInfo","currentHostToString","hostNumber","messageRxCBFunction","userObject","CLIENT_NAME","CLIENT_DESCRIPTION","OutstandingDataRequest","correlationId","replyReceivedCBFunction","reqFailedCBFunction","P2PUtil","getP2PInboxTopic","getP2PTopicSubscription","sessionEventCBFunction","UP_NOTICE","REJECTED_MESSAGE_ERROR","PROPERTY_UPDATE_OK","PROPERTY_UPDATE_ERROR","CAN_ACCEPT_DATA","DISCONNECTED","RECONNECTING_NOTICE","RECONNECTED_NOTICE","REPUBLISHING_UNACKED_MESSAGES","UNSUBSCRIBE_TE_TOPIC_OK","UNSUBSCRIBE_TE_TOPIC_ERROR","GUARANTEED_MESSAGE_PUBLISHER_DOWN","CONNECT_TIMEOUT","CONNECT_WAIT_TIMEOUT","DOWNGRADE_TIMEOUT","TRANSPORT_UP","TRANSPORT_DESTROYED","TRANSPORT_CAN_ACCEPT_DATA","TRANSPORT_PARSE_ERROR","TRANSPORT_PROTOCOL_SMP","TRANSPORT_PROTOCOL_CLIENTCTRL","EXCEPTION","SUBSCRIBE_TIMEOUT","CREATE_SUBSCRIBER","SEND_ERROR","FLOWS_DISCONNECTED","TRANSPORT_FLUSHED","DNS_RESOLUTION_COMPLETE","TRANSPORT_CHANGE_DONE","buildType","Superclass","superclassArgs","sessionEventCode","_sessionEventCode","SUPERCLASS_FOR_SESSION_EVENT","SUPERCLASS_ARGS","sec","rc","ck","TYPE_CACHE","build","superclassArgsBuilder","SessionFSMEvent","eventText","eventReason","smfMsg","sessionId","guaranteedFlowObject","ConsumerLib","PublisherLib","TransportLib","SessionRequestType","SessionStateName","StatsByMode","SubscriptionUpdateTimeoutMessages","STAT_TX_BYMODE_BYTES","STAT_TX_BYMODE_MSGS","STAT_RX_BYMODE_BYTES","STAT_RX_BYMODE_MSGS","STAT_TX_BYMODE_REDELIVERED","STAT_TX_BYMODE_BYTES_REDELIVERED","SessionFSM","session","stats","logFormatter","_sessionProperties","_sessionStatistics","_hosts","_consumers","_flowInterfaceFactory","send","enqueueOutstandingCorrelatedReq","_userBackpressured","clearCurrentError","SessionDisconnected","sEvent","disposeInternal","SessionConnecting","CONNECTING","handleTransportDestroyed","_currentHost","connectWaitTimeInMsecs","_connectWaitTimer","WaitingForInterConnectTimeout","WaitingForTransport","setConnectTimer","_connectFailEvent","_connectSuccessEvent","DestroyingTransport","_reconnectRetries","_currentError","emitSessionEvent","setCurrentError","WaitingForDNS","sessionEvent","errEvent","clearConnectTimer","SessionTransportUp","WAITING_FOR_DNS","DESTROYING_TRANSPORT","destroyTransportSession","WAITING_FOR_INTERCONNECT_TIMEOUT","WAITING_FOR_TRANSPORT","errorMessage","initTransport","WaitingForTransportUp","WAITING_FOR_TRANSPORT_UP","_justEntered","_transport","sendClientCtrlLogin","WaitingForLogin","WAITING_FOR_LOGIN","setClientCtrlTimer","clientCtrlMsg","getResponse","checkNoLocal","checkCompressedSsl","updateReadonlySessionProps","WaitForTransportChange","rawSubcode","responseString","requestDowngrade","clearClientCtrlTimer","WAITING_FOR_TRANSPORT_CHANGE","newTransport","updateTransportCompression","ReapplyingSubscriptions","REAPPLYING_SUBSCRIPTIONS","copySubscriptionCacheKeys","reapplySubscriptions","WaitForSubConfirm","WaitForCanAcceptData","clearSubscriptionCacheKeys","WAITING_FOR_SUBCONFIRM","subscriptionStr","encodedUtf8Subscription","DestroyTransport","canConnectPublisher","_defaultPublisher","WaitingForMessagePublisher","WAITING_FOR_CAN_ACCEPT_DATA","WAITING_FOR_PUBFLOW","sendPublisherSessionUpEvent","canConnectConsumer","flows","sendConsumerSessionUpEvent","reconnectingFlows","FullyConnected","SessionDisconnecting","cleanupSession","handleSubscriptionUpdateError","clearKeepAlive","FULLY_CONNECTED","scheduleKeepAlive","DISCONNECTING","DisconnectingFlows","DISCONNECTING_FLOWS","gatherPendingFlows","isGathering","adaptedListenForDestroy","installfn","downEvents","known","pending","onFlowDown","checkPendingFlows","proceed","FlushingTransport","FLUSHING_TRANSPORT","flushTransport","flushTransportSession","onTransportFlushed","addToSubscriptionCache","_subscriptionCache","_subscriptionCacheCount","cancelOutstandingCorrelatedReq","_correlatedReqs","req","_clientCtrlTimer","_connectTimer","_keepAliveTimer","resetKeepAliveCounter","noLocalSupported","caps","getRouterCapabilities","_compressedTLS","checkSessionDestinationCapability","_subscriptionCacheKeys","p2pTopic","p2pInboxBase","createMessagePublisher","publisherProperties","isAD","createMessageConsumer","conusmerProperties","createQueueBrowser","destroy","_smfClient","operations","_kaStats","removeFromSubscriptionCache","operationKey","sendEvent","reqTimeoutCb","reqTimeout","respRecvCallback","readTimeoutInMsecs","outstandingReq","errorInFsm","errorEventText","flush","nextCorrelationTag","TX_TOTAL_DATA_MSGS","TX_DIRECT_MSGS","TX_PERSISTENT_MSGS","TX_NONPERSISTENT_MSGS","TX_TOTAL_DATA_BYTES","TX_DIRECT_BYTES","TX_PERSISTENT_BYTES","TX_NONPERSISTENT_BYTES","getTransportInfo","getInfoStr","handleADCtrlMessage","pm_corrtag","updateRxStats","cancelledRequest","RX_REPLY_MSG_DISCARD","handleADTrMessage","pm_ad_flowid","handleApiSubscriptionTimeout","timeoutMsg","handleClientCtrlMessage","SMFClientCtrlMessageType","LOGIN","SMFClient","SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG","handleClientCtrlResponse","handleClientCtrlTimeout","handleConnectTimeout","handleUpdatePropertyTimeout","handleRejectedTrMessage","topicNameRaw","pm_tr_topicname_bytes","replace","handleSMFMessage","discardMessage","SMFProtocol","TRMSG","smf_adf","ADCTRL","CLIENTCTRL","SMP","handleSMPMessage","KEEPALIVE","KEEPALIVEV2","handleUnknownProtocolMessage","handleSMFParseError","transportError","request","confirm","handleSubscriptionTimeout","handleTransportEvent","transportEvent","getTransportEventCode","TransportSessionEventCode","getSessionId","DESTROYED_NOTICE","GuaranteedFlowControlledRelief","PARSE_FAILURE","TSESSION","messageType","lastMsgWritten","lastBytesWritten","rxData","rxError","TransportFactory","createTransport","injectTransportInterceptor","_transportInterceptor","interceptor","setInterceptor","keepAliveTimeout","_keepAliveCounter","keepAliveIntervalsLimit","clientStats","getClientStats","prestatMsgWritten","msgWritten","prestatBytesWritten","bytesWritten","kaMsg","KeepAliveMessage","prepareAndSendMessage","deliveryMode","adLocallyDisabled","_gmSendDisallowed","requestConfirmation","topicDestination","sendSubscribe","sub","keepAliveIntervalInMsecs","statTarget","forceAllowEnqueue","content","encodeCompoundMessage","updateTxStats","compressionLevel","match","_plaintextTLS","sslConnectionDowngradeTo","PLAINTEXT","ClientCtrlMessage","getLogin","smpMsg","SMPMessage","getSubscriptionMessage","sendUpdateProperty","mutableSessionProperty","getUpdate","transportDowngradeTimeoutInMsecs","subscriptionUpdate","subject","requestType","default","isSMP","REMOVE_DTE_SUBSCRIPTION","ADD_SUBSCRIPTION","ADD_P2PINBOX","generateMessage","getDTEUnsubscribeMessage","REMOVE_SUBSCRIPTION","queueSubscriptionUpdate","getQueueSubscriptionMessage","origReq","smfMessage","pm_deliverymode","msgStatKey","bytesStatKey","msgLength","RX_TOTAL_DATA_MSGS","RX_TOTAL_DATA_BYTES","smf_di","RX_DISCARD_MSG_INDICATION","RX_CONTROL_MSGS","RX_CONTROL_BYTES","TX_REQUEST_SENT","TX_CONTROL_MSGS","TX_CONTROL_BYTES","clientCtrlRespMsg","_setVpnNameInUse","getVpnNameInUseValue","oldVirtualRouterName","virtualRouterName","newVirtualRouterName","getVridInUseValue","_setVirtualRouterName","handleVirtualRouterNameChange","_setP2pInboxBase","getP2PTopicValue","_setP2pInboxInUse","updateCapabilities","gmCap","_getCapability","oldName","newName","severTls","startCompression","SessionOperation","CTRL","SEND","QUERY_OPERATION","valArrayIsMember","valLength","valNotEmpty","valString","valStringOrArray","ALLOWED_PROTOCOLS","valClientName","validateClientName","enumInstance","allowNull","valUrlList","valArray","included","protocol","isHttpTransport","transportProtocol","HTTP_BINARY_STREAMING","HTTP_BINARY","HTTP_BASE64","validatePropsSupportedByTransport","nonHttpPropsSet","propNames","matchUrl","regex","all","arrayLength","currententry","string","useSsl","SessionPropertiesValidator","webTransportProtocolList","useClientCert","authenticationScheme","equal","empty","idToken","accessToken","nonHTTPTransportPropsSet","recommendedMin","defaultConnectTimeoutInMsecs","connectTimeout","transportCount","makeDefaults","_vpnNameInUse","_virtualRouterName","_p2pInboxInUse","_p2pInboxBase","_userIdentification","_tpProtocolInUse","_tpContentType","_publisherProperties","SessionPropertiesBrowser","_tpProtocol","_tpDowngradeTimeout","_transportProtocolList","_bufferedAmountQueryInterval","_setTransportProtocolInUse","_setWebTransportProtocolInUse","_lendsInspect","bufferedAmountQueryIntervalInMsecs","transportContentType","transportProtocolInUse","SessionPropertiesBase","_authScheme","_accessToken","_idToken","_issuerIdentifier","_url","_password","_userName","_clientName","_appDesc","_vpnName","_connectTimeout","minTimeout","margin","connectDowngradeDefault","_connectRetries","_connectRetriesPerHost","_reconnectRetryWaitInMsecs","_genSendTimestamps","_genReceiveTimestamps","_includeSenderId","_genSequenceNumber","_kaInterval","_kaIntervalsLimit","_setUserIdentification","_subLocalPriority","_subNetworkPriority","_ignoreDupSubError","_ignoreSubNotFoundError","_reapplySubcriptions","_readTimeout","_sendBufferMaxSize","_assumedMaxAdSize","_maxWebPayload","issuerIdentifier","password","userName","clientName","applicationDescription","vpnName","vpnNameInUse","generateSendTimestamps","generateReceiveTimestamps","includeSenderId","generateSequenceNumber","p2pInboxInUse","userIdentification","subscriberLocalPriority","subscriberNetworkPriority","ignoreDuplicateSubscriptionError","sendBufferMaxSize","maxWebPayload","REMOVE_P2PINBOX","SESSION_ERROR","TRANSPORT_FAIL","CONNECTED","MessageLib","CACHE_REQUEST_PREFIX","transportProtocolDefaultList","WS_BINARY","xhrBinary","streaming","isValidADTransport","SOLCLIENT_REQUEST_PREFIX","messageCallback","eventCallback","_sessionFSM","_messageCallbackInfo","wrapMessageCallback","_eventCallbackInfo","wrapEventCallback","selectedProtocol","defaultList","sliceIndex","validForAD","_adDisabledReason","transportProtocols","invalid","_sessionStats","_outstandingDataReqs","_capabilities","_seqNum","allowOperation","statesCanAck","stateName","subscribe","isBooleanOrNothing","isRangeCompareOrNothing","handleSubscriptionUpdateResponse","handleQueueSubscriptionUpdateResponse","unsubscribe","unsubscribeDurableTopicEndpoint","createFromSpec","handleDTEUnsubscribeResponse","updateProperty","responseCallback","respMsg","oldP2pTopicName","oldP2pTopic","newP2pTopicName","newP2pTopic","afterAddCallback","resp","smpResp","afterRemoveCallback","ignoreSubscriptionNotFoundError","updateAuthenticationOnReconnect","authenticationProperties","allowedProperties","newProps","getSessionProperties","validateAndSendMessage","sendRequest","requestFailedCBFunction","isFunctionOrNothing","replyToTopic","enqueueOutstandingDataReq","sendReply","messageToReplyTo","replyMessage","sessionState","getSessionState","getTransportProtocol","capabilityType","isNumber","sessionStateName","getFSMState","WAITING_FOR_SESSION_UP","WAITING_FOR_P2PINBOX_REG","createCacheSession","browserProperties","destinationType","factoryMethod","vrn","localName","operationEnum","allow","anything","NEW","routerCapabilities","sendDest","senderTimestamp","noSenderTimestamp","hasAutoSenderTimestamp","now","sequenceNumber","noSequenceNumber","hasAutoSequenceNumber","senderId","noSenderId","reqFailedCb","replyRecvdCb","none","TX_REQUEST_TIMEOUT","requestEvent","cancelOutstandingDataReq","dataReq","dataMessageIn","dataMessage","RX_REPLY_MSG_RECVED","requestConfirm","adCtrlMessage","getEventCBInfo","setEventCBInfo","eventCBInfo","getMessageCBInfo","setMessageCBInfo","messageCBInfo","rfu","buildErrorEvent","object","CodecLib","BinaryMetaBlock","SMFAdProtocolParam","SMFClientCtrlParam","SMFParameterType","SMFExtendedParameterType","SMFSMPMessageType","SMFSMPMessageTypeFlags","SMFTransportSessionMessageType","SMFParameter","setBits","parseAdpAt","adpVersion","twobyte","paramUH","paramType","paramLen","paramValueLen","smfParam","addParameter","encAdp0Param","uh","paramtype","byte1","encAdp8Param","encAdp16Param","encAdp32Param","encAdp64Param","RSValueLenMap","encAdpReplayParam","valType","valObj","encAdp64AckPairParam","encAdpUTF8NTParam","byte2","encAdp","paramspace","paramarray","getParameterArray","param","WINDOW","EP_DURABLE","ACCESSTYPE","FLOWTYPE","EP_RESPECTS_TTL","TRANSACTION_CTRL_MESSAGE_TYPE","TRANSACTED_SESSION_STATE","ACTIVE_FLOW_INDICATION","WANT_FLOW_CHANGE_NOTIFY","MAX_REDELIVERY","getUh","EP_BEHAVIOUR","FLOWID","TRANSPORT_WINDOW","EP_ALLOTHER_PERMISSION","EP_QUOTA","EP_MAX_MSGSIZE","GRANTED_PERMISSION","TRANSACTED_SESSION_ID","PUBLISHER_ID","LASTMSGIDSENT","LASTMSGIDACKED","LASTMSGIDRECEIVED","TRANSACTION_ID","ENDPOINT_ERROR_ID","REPLAY_START_LOCATION","replayParamVal","APPLICATION_ACK","ranges","QUEUENAME","DTENAME","TOPICNAME","FLOWNAME","TRANSACTED_SESSION_NAME","TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY","TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK","TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK","NOLOCAL","APPLICATION_PUB_ACK","paramdata","version","threebytes","padBytes","twobytes","ContentSummaryType","ParamParse","ParseSMF","parseCCAt","payloadLen","ccMsg","paramUh","smfP","encCC","paramSpace","paramArray","currentParam","currentParamOneByte","paramData","ContentSummaryElement","position","XML_META","XML_PAYLOAD","BINARY_ATTACHMENT","CID_LIST","BINARY_METADATA","SolclientDestinationLib","SolclientMessageLib","SolclientSDTLib","PriorityUserCosMap","parseSMFAt","parseSMPAt","parseTsSmfMsgAt","userCosForPriority","BIN_STRUCTYPES","adaptBinaryMetaToMessage","binaryMeta","messageIn","messageSdt","payload","preambleByte0","preambleByte1","h","headerMap","ci","mi","mt","rt","si","sn","ts","adaptSmfToMessage","stream","smf_dto","smf_elidingEligible","smf_deadMessageQueueEligible","smf_priority","pm_msg_priority","pm_userdata","pm_ad_redelflag","pm_ad_flowredelflag","pm_ad_msgid","pm_ad_prevmsgid","pm_ad_publisherid","pm_ad_publishermsgid","pm_ad_topicSequenceNumber","pm_ad_redeliveryCount","pm_ad_spooler_unique_id","pm_ad_replication_mate_ack_message_id","pm_ad_local_spooler_message_id","pm_ad_ttl","payloadOffset","headerLength","cs","pm_content_summary","payloadLength","currentChunk","chunkBegin","chunkEnd","fromEncodedSmf","binaryMetadataChunk","payloadPosition","SMFHeader","base64Encode","encContentSummary","encDeliveryMode","encLightSMFParam","encodeSMFParam","encodeSMFExtendedParam","encSmp","priorityForUserCos","addContentElementToArrays","csumm","payloadArray","dataChunk","cstype","cse","addToMapIfPresent","adaptMessageToBinaryMeta","sdtPreamble","sdtStreamContainer","adaptMessageToSmf_nonPayload","smfHeaderIn","pm_ad_publishermsgId","pm_ad_ackimm","pm_queue_len","pm_queue_offset","userData","encodedSdtPayload","binaryMetaSMF","asEncodedSmf","MAX_24BITS","adaptMessageToSmf_payloadFinalize","payloadBytes","adaptMessageToSmf","bitRange","maskValues","DI_BIT","ELIDING_ELIGIBLE_BIT","DTO_BIT","ADF_BIT","DMQE_BIT","VERSION_BITS","UH_BITS","PROTOCOL_BITS","PRIORITY_BITS","TTL_BITS","QT_OFFSET_BYTES","QT_LEN_BYTES","encodeSMF","w1","smf_version","smf_uh","smf_ttl","params","TR_TOPICNAME","LIGHT_QUEUE_NAME_OFFSET","pm_topic_len","LIGHT_TOPIC_NAME_OFFSET","pm_topic_offset","LIGHT_CORRELATION","LIGHT_ACK_IMMEDIATELY","MESSAGEPRIORITY","USERDATA","pm_username","USERNAME","pm_password","PASSWORD","RESPONSE","DELIVERY_MODE","ASSURED_MESSAGE_ID","ASSURED_PREVMESSAGE_ID","ASSURED_FLOWID","ASSURED_REDELIVERED_FLAG","AD_TIMETOLIVE","pm_ad_publisherMsgId","PUBLISHER_MSGID","MESSAGE_CONTENT_SUMMARY","extendedStreamContents","extendedUH","pm_oauth2_access_token","OAUTH2_ACCESS_TOKEN","pm_oidc_id_token","OIDC_ID_TOKEN","pm_oauth2_issuer_identifier","OAUTH2_ISSUER_IDENTIFIER","EXTENDED_TYPE_STREAM","encodedParams","hdrlen","msglen","setMessageSizes","setPayloadSize","encodedHeader","SMFUH","delModeEnumBidiMap","lutDelModeToEnum","lutEnumToDelMode","uhTypeMap","paramTypeBits","paramTypeCount","lenMap","idx","lightMap","lenBits","lenCount","ContentSummaryDecodeMap","parseTopicQueueOffsets","parseResponseParam","parseDeliveryMode","delmode","lookup","lut","parseContentSummary","elements","cumulativeSize","elementType","elementDeclaredLength","elementSize","cst","currentElement","contentSummaryArr","messageElementDescriptions","currentContentSummary","currentSizeStr","firstByte","lengthModeMap","0","1","2","4","8","lengthMode","lengthString","base64Decode","isSMFHeaderAvailable","remaining","isSMFHeaderValid","isSMFAvailable","totalLen","parseSMFExtendedStream","streamLen","pUH","3","AD_REDELIVERY_COUNT","AD_SPOOLER_UNIQUE_ID","AD_ACK_MESSAGE_ID","AD_REPL_MATE_ACK_MSGID","readHeaderOnly","word1","headerLen","word3","paramByte1","prmUh","paramIsLightweight","lwpType","lwpLen","lwpValueLen","parsedQueueOffsets","parsedTopicOffsets","pStart","pType","pLen","pValueLen","pm_ad_publisher_id","parsedResponse","SUB_ID_LIST","GENERIC_ATTACHMENT","AD_TOPICSEQUENCE_NUMBER","contentSummary","AD_FLOWREDELIVERED_FLAG","extSuccess","ADDSUBSCRIPTION","REMSUBSCRIPTION","ADDQUEUESUBSCRIPTION","REMQUEUESUBSCRIPTION","msgFlags","smpFlags","queueLength","encodedUtf8QueueName","subsLength","TransportSMFMessage","remains","parseTsSmfHdrAt","smfheader","transportSMFMessage","tsHdrLen","tsHeaderLength","CREATE_RESP","rtrTagLen","routerTag","tsHeaderPreLength","tsDestroyHeaderPreSid","tsCreateHeader","tsDataTokenPreSid","tsDataStreamTokenPreSid","genTsCreateHeader","genTsDestroyHeader","sid","genTsDataTokenMsg","genTsDataStreamTokenMsg","paddingBytes","genTsDataMsgHeaderParts","BaseMessage","bUInt8","bUInt16BE","bUInt32BE","bUInt64BE","EndpointTypeToParam","QueueDescriptorTypeToParam","QUEUE_PERMISSIONS_TO_BITS","ACCESS_TYPE_INT_TO_ENUM","ACCESS_TYPE_ENUM_TO_BITS","DISCARD_ENUM_TO_VALUE","addQueueProperties","skipAccessType","IGNORE","discardBehaviorValue","_readParameter","decoder","bufMethod","getParameter","getBuffer","getBegin","masked","ENDPOINT_ID","GRANTED_PERMISSIONS","getLastMsgIdReceived","MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW","SPOOLER_UNIQUE_ID","REJECT","endpointTypeParam","lastMsgIdSent","adMsg","topicSubscription","wantFlowChangeUpdate","lastMsgIdReceived","endpointBytes","endpointType","rsValue","replayStartTimeMs","replayStartTimeNs","multiply","UNSUBSCRIBE","lastMessageIdAcked","applicationAckRanges","_parameters","bufSmf","chunkCount","fourbyte","SMFClientCtrlAuthType","BOOLEAN_CAPS_BITS","CLIENT_CAPS_VALUES","p2pParam","P2PTOPIC","vpnParam","MSGVPNNAME","vridParam","VRIDNAME","getUserIdValue","userIdParam","USERID","capParam","ROUTER_CAPABILITIES","prmParseCapabilitiesValue","SOFTWAREVERSION","SOFTWAREDATE","PLATFORM","PHYSICALROUTERNAME","dto","local","network","strDtoPriority","strCapabilities","capsIn","CT","boolCapCount","capsByte","bitIndex","msbIndex","capsKey","sanityLoop","capLen","sprop","compressedTLS","plaintextTLS","clientCapsToStr","clientCapList","highestCap","capBits","cap","cc","isClientCert","DELIVERTOONEPRIORITY","prmGetDtoPriorityValue","CLIENTDESC","AUTHENTICATION_SCHEME","CLIENTNAME","formattedDate","SSL_DOWNGRADE","clientCaps","CLIENT_CAPABILITIES","keepaliveVal","KEEP_ALIVE_INTERVAL","UPDATE","appdesc","strName","encodeResult","ttl","smf_msgLen","smf_tqd","unknownProtoFlag","begin","_uh","_begin","getEnd","SMF_SMP_FLAG_TOPIC","_encodedQueueName","_encodedClientName","isFlag","flagMask","setFlag","smp","SMF_SMP_FLAG_RESPREQUIRED","SMF_SMP_FLAG_PERSIST","TRANSACTIONCTRL","XACTRL","TRANSPORT_PRIORITY","LINGER_OPTION","NUM_MESSAGES_SPOOLED","PUBLISHER_FLAGS","APP_MSG_ID_TYPE","QUEUE_ENDPOINT_HASH","PAYLOAD","ACK_SEQUENCE_NUMBER","ACK_RECONCILE_REQUEST","START_OF_ACK_RECONCILE","TIMESTAMP","BRIDGE_MSG_VPN_NAME","BRIDGE_ROUTER_NAME","BRIDGE_VERSION","CONNECTION_TYPE","ROUTER_CAPABILITIES_EXTENDED","REQUIRES_RELEASE_7","PADDING","CSPF","CSMP","PUBMSG","XMLLINK","WSE","SEMP","SUBCTRL","PUBCTRL","SMRP","SMF_IN_SMF","SMF_IN_RV","ADCTRL_PASSTHROUGH","FLAG_FILTER","FLAG_PERSIST","SMF_SMP_FLAG_DELIVERALWAYS","ADDSUBSCRIPTIONFORCLIENTNAME","REMSUBSCRIPTIONFORCLIENTNAME","DESTROY","DESTROY_RESP","DATA","DATA_TOKEN","DATA_STREAM_TOKEN","CacheContext","CacheRequest","cacheCBFunction","getCallback","getUserObject","cacheRequestCorrelationId","CacheGetResultCode","INVALID","matchTopic","sessionID","isSuspect","hasMore","hasTimestamps","messageStream","clusterNameStream","CacheGetResult","readFromStream","FULFILL","FLOW_THRU","_returnCode","_subcode","_topic","getReturnCode","getReturnSubcode","getTopic","getError","CacheRequestType","BULK_MSG","REGISTER_REQUEST","REGISTER_RESPONSE","HEARTBEAT_REQUEST","HEARTBEAT_RESPONSE","EVENT_NOTIFY","EVENT_ACK","ACTION_REQUEST","ACTION_RESPONSE","GET_REQUEST","GET_RESPONSE","GET_NEXT_REQUEST","GET_NEXT_RESPONSE","SET_REQUEST","SET_RESPONSE","GET_MSG_REQUEST","GET_MSG_RESPONSE","GET_NEXT_MSG_REQUEST","GET_NEXT_MSG_RESPONSE","UNREGISTER_IND","BULK_SET_REQUEST","BULK_SET_RESPONSE","PURGE_MSG_SEQUENCE_REQUEST","PURGE_MSG_SEQUENCE_RESPONSE","GET_MSG_SEQUENCE_REQUEST","GET_NEXT_MSG_SEQUENCE_REQUEST","GET_TOPIC_INFO_REQUEST","GET_TOPIC_INFO_RESPONSE","READY_MARKER","GET_TOPIC_INFO_REQUEST_RANGE","SYNC_READY_MARKER","VACUUM_REQUEST","VACUUM_RESPONSE","cacheSession","cacheMessageType","requestID","cbInfo","liveDataAction","cacheName","subscriptionWaiting","replyReceived","dataReceived","correlationID","childRequests","parentRequest","queuedLiveData","liveDataFulfilled","timeoutHandle","getRootRequest","addChild","childIn","child","removeChild","childIndex","collapse","clearRequestTimeout","getRequestID","getCBInfo","getLiveDataAction","startRequestTimeout","cacheSessionTimeoutCB","timeoutMsec","VERSION","DEFAULT_REPLY_SIZE_LIMIT","REPLY_SIZE_LIMIT","FAIL","INCOMPLETE","REQUEST_COMPLETE","LIVE_DATA_FULFILL","ERROR_RESPONSE","INVALID_SESSION","REQUEST_ALREADY_IN_PROGRESS","NO_DATA","SUSPECT_DATA","CACHE_SESSION_DISPOSED","maxAgeSec","maxMessages","includeOtherClusters","cachePrefix","getCacheName","setCacheName","getMaxMessageAgeSec","setMaxMessageAgeSec","getMaxMessages","setMaxMessages","getTimeoutMsec","setTimeoutMsec","CacheSessionSubscribeInfo","SessionLib","noOp","privateInterface","_validateProps","_outstandingRequests","_outstandingIDs","_nextMessageCallbackInfo","_nextSessionEventCallbackInfo","_sessionIF","_connectToSession","_handleMessage","_createCompoundEventCB","nextDelegate","rfuObject","_handleSessionEvent","passEvent","_processSessionEvent","cbUserObject","_sendToNextDelegate","_checkSubscriptionStatus","_getOutstandingRequest","_handleSubscriptionSuccess","_handleSubscriptionError","requestIn","_startCacheRequest","_terminateRequest","_checkRequestCompletion","parent","_unregisterRequest","_sendSeeOther","cacheGetResult","clusterName","childRequest","_registerRequest","_handleCacheRequestTimeout","_sendGetNext","nextRequest","_relevantLiveData","streamField","_incStat","CACHE_REQUEST_FULFILL_DISCARD_RESPONSE","_decodeMessageStream","RX_CACHE_MSG","exception","checkCID","_performLiveDataAction","_fulfillRequest","_trackCompletionStats","_notifyCallback","toTerminate","sendCacheRequest","arguments","_notifyCallbackError","matchingRequestKeys","conflictKeys","conflictRequest","waitingForSubscribeInfo","_subscriptionWaiting","_handleCacheRequestFailed","suppressClusters","round","CACHE_REQUEST_SENT","CACHE_REQUEST_OK_RESPONSE","CACHE_REQUEST_LIVE_DATA_FULFILL","CACHE_REQUEST_INCOMPLETE_RESPONSE","CACHE_REQUEST_FAIL_RESPONSE","innerMessage","cacheRequest","TX_PERSISTENT_REDELIVERED","TX_NONPERSISTENT_REDELIVERED","TX_PERSISTENT_BYTES_REDELIVERED","TX_NONPERSISTENT_BYTES_REDELIVERED","RX_DIRECT_MSGS","RX_PERSISTENT_MSGS","RX_NONPERSISTENT_MSGS","RX_DIRECT_BYTES","RX_PERSISTENT_BYTES","RX_NONPERSISTENT_BYTES","TX_WINDOW_CLOSE","_parent","_statsMap","TransportSessionStates","BaseSMFClient","rxSmfCB","rxMessageErrorCB","_rxSmfCB","_rxMessageErrorCB","_correlationCounter","SMF_MAX_CORRELATION","concatFrom","allocUnsafe","buf0","copy","readUInt32BEFrag","bufList","listOffsetParam","byteIndexParam","listOffset","byteIndex","BufferQueue","maxSize","_queue","_maxSize","peekView","oIndex","put","adaptData","advance","done","chunk","SMF_LOST_FRAMING_THRESHOLD","logPeekBuffer","bufPair","BufferSMFClient","_incomingBuffer","rxDataString","_rxDataCB","rxDataArrayBuffer","rxDataBuffer","putSuccess","messageLen","msgBuffer","_sessionId","navigator","appVersion","TransportBase","eventCB","client","transportProps","_ssl","_client","_eventCB","_props","immediate","beginDowngrade","_interceptor","removed","installed","urlParts","validSchemes","useSSL","WebTransportCapabilities","TransportClientStats","TcpRawTransport","CompressedTransport","TlsOnlyTransport","TcpTlsTransport","WebTransport","getId","compressingLayer","plaintextTransport","setClientStats","setUnderlyingTransport","tlsLayer","uncompressedTransport","rehome","encryptedTransport","compress","tlsShutdown","precallback","WebTransportsLib","lutTransportProtocols","protocols","StateBase64","StateBinary","StateStreamingAndBinary","StateWebSocketBinary","TransportProtocolHandler","transport","downgradeTransport","TransportConstructor","switchState","onEnter","completeDowngrade","canCompleteDowngrade","getNextState","newState","INVALID_STATE_FOR_OPERATION","DOWNGRADE_FAILED","DOWNGRADE_SUCCEEDED","TransportSessionEvent","tsEventCode","_transportEventCode","_sid","getResponseCode","transportEventCode","TransportSessionState","WAITING_FOR_CREATE","WAITING_FOR_DESTROY","CONNECTION_FAILED","TSHState","tpProtocol","exitCallback","nextState","_transportProtocol","_exitCallback","_nextState","_unsupportedRuntimeMessage","userAgent","setNextState","getUseSsl","validateLegal","HTTPLib","HTTPConnection","HTTPTransportSession","sendXhrBinary","sendXhrText","TimingBucket","XHRFactory","SOL_CONNECTION_DEBUG","prependOrigin","location","origin","getTs","WaitedToken","HadToken","ReturnedToken","bucketCount","base64Enc","streamProgressEvents","rxDataCb","connectionErrorCb","contentType","connectionClose","Options","_streamProgressBytes","_xhr","_rxDataCb","_connErrorCb","_reqActive","_REQCOUNTER","_REQBASE","_handleAbortedReq","browserSupportsXhrBinary","recStat","LastGotToken","LastSendMsg","waitedTok","hadToken","LastGotData","LastReturnToken","returnedToken","attempt","maxRetry","abort","open","onreadystatechange","xhrStateChange","setRequestHeader","sentdata","readyState","RS_LOADING","LOADING","RS_DONE","DONE","status","responseType","responseText","decodedData","statusText","responseTextLen","sentdataLen","responseTextDump","nextMaxRetry","isUsingBase64","xhr","check","onprogress","WebTransportSessionBase","PacketReadState","READING_HEADER","STREAMING","MSIE_TRANSPORT_PADDING","adaptURL","baseUrl","_haveToken","_confMaxWebPayload","_maxPayloadBytes","_destroyTimer","_destroyTimeout","_createUrl","_routerUrl","_rxChannelClient","_httpSendConn","_httpReceiveConn","_smfDataTokenTSHeader","_routerTag","_useBinaryTransport","_useStreamingTransport","_streamingTransportPadding","_packetReadState","agent","_contentType","connectTimerExpiry","destroyCleanup","updateMaxWebPayload","trLessEncapSMF","_state","connectInternal","_connError","_createConn","handleCreateConnFailure","createMsg","createConnectTimeout","connError","cancelConnectTimeout","destroyTimerExpiry","handleRxDataToken","handleSendFailure","destroyMsg","_queuedData","enqueueData","remainder","allowEnqueue","enqueueFailNoSpace","transportPacketLen","_smfDataTSHeaderParts","_clientstats","_queuedDataSize","initPreformattedHeaders","_flushCallback","sendQueuedData","getQueuedDataToSend","_canSendNeeded","tsRc","smfresponse","useBase64","useStreaming","handleRxStreaming","handleSmfMessage","handleSmfParseError","handleRxData","handleDestroyResponse","cancelDestroyTimeout","innerResponse","tsmsg","TotalPayloadToRead","smfErrResponse","responseErrStr","handleRxError","errorInfo","asyncSendEvent","finalize","sendXhrBinaryMSIE10","overrideMimeType","sendXhrBinaryXHR2","connClose","allowFail","XMLHttpRequest","exitCb","WebSocketTransportSession","browserSupportsBinaryWebSockets","browserSupportsStreamingResponse","WebTransportEvent","DOWNGRADE","WebTransportState","WebTransportFSM","transportIn","WebTransportDown","wEvent","WebTransportConnecting","destroyInternal","_destroyMsg","WebTransportDestroying","getConnError","_eventReason","notifyEvent","_transportEvent","attemptDowngrade","WebTransportUp","WebTransportDowngrading","DOWNGRADING","notifyDowngradeFailed","_downgradeMsg","DESTROYING","tsEvent","MAX_BUFFERED_AMOUNT_QUERY_INTERVAL_MS","bytesAllowed","getBufferedAmount","_bufferedAmountQueryIntervalInMsecs","_bufferedAmountQueryIntervalDelayMultiplier","elemLength","_transportHandler","_webTransportFsm","handleDestroyed","_transportSession","_lastDowngradeSucceeded","WebSocketCloseCodes","1000","1001","1002","1003","1004","1005","1006","1007","1008","1009","1010","1011","1012","1013","1014","1015","globalContext","MyWebSocket","WebSocket","_socket","_bufferedAmountQueryTimer","onOpen","onClose","originalSocket","msgBuf","wasClean","onDrain","maybeEmitCanSend","maybeEmitFlush","onBufferedAmountPoll","scheduleQuery","onError","WAITING_FOR_CONNECT","onMessage","binaryType","onopen","onmessage","onclose","onerror","force","bufferAllow","maxPayloadBytes","close","cancelQuery","bufferedAmount","validator","validatorArgs","typeInstance","typeInstanceDesc","boolean","allowUndefined","allowEmpty","allowDuplicate","ele","valArrayOfString","typedesc","cloneObj","CLONE_CIRCULAR","CLONE_DEPTH","acc","scope","hasWorkingUrl","forceJURL","u","URL","pathname","relative","relativePathDotMapping","_scheme","_schemeData","_username","_host","_port","_path","_query","_fragment","_isInvalid","_isRelative","isRelativeScheme","scheme","IDNAToASCII","percentEscape","unicode","percentEscapeQuery","EOF","ALPHA","ALPHANUMERIC","stateOverride","errors","cursor","seenAt","seenBracket","loop","nextC","nextNextC","cp","tempC","temp","PolyfillURL","authority","port","search","hash","OriginalURL","createObjectURL","revokeObjectURL","WINDOWS_VERSION_MAP","DEFAULT","BROWSER_PROCESS","getBrowserAgentInfo","navObj","agentStr","browsers","agentInfo","os","arch","agentHas","strs","firstValue","vals","rule","exec","versionStrs","versionTests","parenParts","versionPart","versionMatch","versionTest","safeEncode","browserAgentInfo","arg","PAD_LEFT","PAD_RIGHT","LUT_PRINTABLE","padLeftRight","minLen","padSide","padChar","leastSpaces","spaces","capitalizeWord","isEmptyFun","capitalize","lastChar","hexdump","printable","spacer","linelen","sLength","heredoc","literals","substitutions","subst","buckets","normalized","cont","MODE","TARGET","FORMATTED_DATE","pad","YYYY","SUMMARY","EPSILON","BaseChecks","instanceOfAny","types","truthy","fn","rangeGe","rangeMinInclusive","rangeGt","rangeMin","rangeLe","rangeMaxInclusive","rangeLt","rangeMax","rangeCompare","operator","operand","epsilon","expected","member","function","orNull","orUndefined","orNothing","thenGen","doOp","then","elseFn","when","condition","unless","NO_OBJ","objectValues","subcodeSummary","got","expectedStr","gotStr","validateError","typename","memberOfEnum","names","isEnumMemberOrNothing","isInstanceOfOrNull","isInstanceOfOrUndefined","isMember","memberOf","isNumberOrNull","isRangeCompare","isStringOrNull","toByteArray","fromByteArray","revLookup","Arr","getLens","b64","validLen","placeHoldersLen","lens","_byteLength","curByte","tripletToBase64","num","encodeChunk","uint8","extraBytes","parts","maxChunkLength","len2","opts","ctx","seen","stylize","stylizeNoColor","depth","colors","showHidden","_extend","isUndefined","customInspect","stylizeWithColor","formatValue","styles","styleType","style","isNull","hasOwn","prop","isRegExp","re","isObject","objectToString","isError","isDate","o","arrayToHash","formatArray","recurseTimes","visibleKeys","l","formatProperty","formatError","primitive","formatPrimitive","RegExp","braces","toUTCString","reduceToSingleString","JSON","stringify","simple","prev","cur","numLinesEst","base64","ieee754","customInspectSymbol","Symbol","SlowBuffer","INSPECT_MAX_BYTES","K_MAX_LENGTH","kMaxLength","TYPED_ARRAY_SUPPORT","typedArraySupport","proto","foo","setPrototypeOf","createBuffer","RangeError","encodingOrOffset","TypeError","poolSize","isView","fromArrayView","isInstance","fromArrayBuffer","SharedArrayBuffer","fromObject","toPrimitive","assertSize","alloc","checked","allocUnsafeSlow","isEncoding","actual","write","fromArrayLike","arrayView","numberIsNaN","_isBuffer","y","mustMatch","loweredCase","utf8ToBytes","base64ToBytes","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","swap16","swap32","swap64","toLocaleString","thisStart","thisEnd","thisCopy","targetCopy","bidirectionalIndexOf","dir","arrayIndexOf","lastIndexOf","indexSize","arrLength","read","foundIndex","found","hexWrite","strLen","parsed","utf8Write","blitBuffer","asciiWrite","asciiToBytes","base64Write","ucs2Write","utf16leToBytes","isFinite","toJSON","res","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","decodeCodePointsArray","MAX_ARGUMENTS_LENGTH","codePoints","out","hexSliceLookupTable","newBuf","checkOffset","ext","readUintLE","readUIntLE","noAssert","mul","readUintBE","readUint8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUInt32LE","readUint32BE","readBigUInt64LE","defineBigIntMethod","validateNumber","first","last","boundsError","lo","hi","BigInt","readBigUInt64BE","readIntLE","readIntBE","readInt16LE","readInt32LE","readBigInt64LE","readBigInt64BE","readFloatLE","readDoubleLE","checkInt","writeUintLE","writeUIntLE","maxBytes","writeUintBE","writeUIntBE","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUInt32LE","writeUint32BE","writeUInt32BE","wrtBigUInt64LE","checkIntBI","wrtBigUInt64BE","writeBigUInt64LE","writeBigUInt64BE","writeIntLE","limit","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeBigInt64LE","writeBigInt64BE","checkIEEE754","writeFloat","littleEndian","writeFloatLE","writeFloatBE","writeDouble","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","E","sym","getMessage","Base","received","isInteger","addNumericalSeparator","checkBounds","ERR_OUT_OF_RANGE","ERR_INVALID_ARG_TYPE","ERR_BUFFER_OUT_OF_BOUNDS","INVALID_BASE64_RE","base64clean","units","leadSurrogate","src","dst","alphabet","table","i16","BufferBigIntNotDefined","_instanceof","nativeMap","nativeSet","nativePromise","Promise","allParents","allChildren","useBuffer","_clone","reject","__isArray","__isRegExp","__getRegExpFlags","__isDate","getPrototypeOf","keyChild","valueChild","entryChild","getOwnPropertySymbols","symbols","symbol","allPropertyNames","propertyName","clonePrototype","__objToStr","global","ignoreCase","multiline","R","Reflect","ReflectApply","receiver","ReflectOwnKeys","ownKeys","ProcessEmitWarning","warning","NumberIsNaN","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","setMaxListeners","_getMaxListeners","that","getMaxListeners","doError","events","er","handler","listeners","arrayClone","_addListener","prepend","newListener","unshift","warned","w","onceWrapper","fired","wrapFn","_onceWrap","wrapped","originalListener","spliceOne","off","_listeners","unwrap","evlistener","unwrapListeners","rawListeners","eventNames","errorListener","resolver","eventTargetAgnosticAddListener","addErrorHandlerIfEventEmitter","addEventListener","wrapListener","removeEventListener","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","wasm","WebAssembly","Instance","Module","unsigned","__isLong__","ctz32","clz32","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","radix","radixToPower","power","TWO_PWR_16_DBL","TWO_PWR_24_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","div","rem1","rem","remDiv","intval","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","ne","lessThan","comp","lessThanOrEqual","lte","le","greaterThan","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","b00","c48","c32","c16","c00","subtract","subtrahend","multiplier","divide","divisor","approx","halfThis","shr","shl","toUnsigned","shru","log2","ceil","delta","approxRes","approxRem","modulo","mod","countLeadingZeros","clz","countTrailingZeros","ctz","and","or","xor","shiftLeft","shiftRight","shiftRightUnsigned","shr_u","rotateLeft","rotl","rotateRight","rotr","toSigned","toBytes","toBytesLE","fromBytes","fromBytesLE","fromBytesBE","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","globalThis","__webpack_exports__"],"sourceRoot":""}