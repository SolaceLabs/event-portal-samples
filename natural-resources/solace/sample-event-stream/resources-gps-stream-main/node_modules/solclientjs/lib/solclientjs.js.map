{"version":3,"file":"solclient.js","mappings":"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,EAAG,GAAI,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,IAAK,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI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","sources":["webpack://solclientjs/./index.js","webpack://solclientjs/./modules/solclient-convert/api.js","webpack://solclientjs/./modules/solclient-convert/lib/base64.js","webpack://solclientjs/./modules/solclient-convert/lib/bits.js","webpack://solclientjs/./modules/solclient-convert/lib/convert.js","webpack://solclientjs/./modules/solclient-convert/lib/hex.js","webpack://solclientjs/./modules/solclient-convert/lib/long.js","webpack://solclientjs/./modules/solclient-core/api-internal.js","webpack://solclientjs/./modules/solclient-core/api.js","webpack://solclientjs/./modules/solclient-debug/api.js","webpack://solclientjs/./modules/solclient-debug/lib/debug.js","webpack://solclientjs/./modules/solclient-destination/api.js","webpack://solclientjs/./modules/solclient-destination/lib/destination-from-network.js","webpack://solclientjs/./modules/solclient-destination/lib/destination-type.js","webpack://solclientjs/./modules/solclient-destination/lib/destination-util.js","webpack://solclientjs/./modules/solclient-destination/lib/destination.js","webpack://solclientjs/./modules/solclient-destination/lib/queue.js","webpack://solclientjs/./modules/solclient-destination/lib/subscription-info.js","webpack://solclientjs/./modules/solclient-destination/lib/topic.js","webpack://solclientjs/./modules/solclient-env/api.js","webpack://solclientjs/./modules/solclient-error/api.js","webpack://solclientjs/./modules/solclient-error/lib/error-response-subcode-mapper.js","webpack://solclientjs/./modules/solclient-error/lib/error-subcodes.js","webpack://solclientjs/./modules/solclient-error/lib/not-implemented-error.js","webpack://solclientjs/./modules/solclient-error/lib/operation-error.js","webpack://solclientjs/./modules/solclient-error/lib/request-error.js","webpack://solclientjs/./modules/solclient-error/lib/request-event-codes.js","webpack://solclientjs/./modules/solclient-error/lib/solace-error.js","webpack://solclientjs/./modules/solclient-eskit/api.js","webpack://solclientjs/./modules/solclient-eskit/lib/array-operations.js","webpack://solclientjs/./modules/solclient-eskit/lib/assert.js","webpack://solclientjs/./modules/solclient-eskit/lib/bidi-map.js","webpack://solclientjs/./modules/solclient-eskit/lib/enum.js","webpack://solclientjs/./modules/solclient-eskit/lib/iterator.js","webpack://solclientjs/./modules/solclient-eskit/lib/lazy.js","webpack://solclientjs/./modules/solclient-eskit/lib/make-map.js","webpack://solclientjs/./modules/solclient-eskit/lib/mixin.js","webpack://solclientjs/./modules/solclient-eskit/lib/resolver.js","webpack://solclientjs/./modules/solclient-eskit/lib/set-operations.js","webpack://solclientjs/./modules/solclient-events/api.js","webpack://solclientjs/./modules/solclient-events/lib/event-emitter.js","webpack://solclientjs/./modules/solclient-events/lib/timer.js","webpack://solclientjs/./modules/solclient-factory/api.js","webpack://solclientjs/./modules/solclient-factory/lib/profile-binding.js","webpack://solclientjs/./modules/solclient-factory/lib/solclient-factory-profiles.js","webpack://solclientjs/./modules/solclient-factory/lib/solclient-factory-properties.js","webpack://solclientjs/./modules/solclient-factory/lib/solclient-factory.js","webpack://solclientjs/./modules/solclient-flow/api.js","webpack://solclientjs/./modules/solclient-flow/lib/flow-operation.js","webpack://solclientjs/./modules/solclient-flow/lib/flow.js","webpack://solclientjs/./modules/solclient-flow/lib/private-flow-event-names.js","webpack://solclientjs/./modules/solclient-fsm/api.js","webpack://solclientjs/./modules/solclient-fsm/lib/entry-point.js","webpack://solclientjs/./modules/solclient-fsm/lib/event.js","webpack://solclientjs/./modules/solclient-fsm/lib/exit-point.js","webpack://solclientjs/./modules/solclient-fsm/lib/object.js","webpack://solclientjs/./modules/solclient-fsm/lib/state-context.js","webpack://solclientjs/./modules/solclient-fsm/lib/state-machine.js","webpack://solclientjs/./modules/solclient-fsm/lib/state.js","webpack://solclientjs/./modules/solclient-log/api.js","webpack://solclientjs/./modules/solclient-log/lib/console-log-impl.js","webpack://solclientjs/./modules/solclient-log/lib/global-binding.js","webpack://solclientjs/./modules/solclient-log/lib/log-impl.js","webpack://solclientjs/./modules/solclient-log/lib/log-levels.js","webpack://solclientjs/./modules/solclient-message-consumer/api.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/application-acks.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/consumer-flows.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/consumer-fsm-event-names.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/consumer-fsm-event.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/consumer-fsm.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/consumer-state-names.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer-acknowledge-modes.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer-event-names.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer-event.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer-properties-validator.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer-properties.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-dispatcher.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/queue-browser-event-names.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/queue-browser-properties.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/queue-browser.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/transport-acks.js","webpack://solclientjs/./modules/solclient-message-publisher/api.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-ids.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-publisher-acknowledge-modes.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-publisher-event-names.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-publisher-properties-validator.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-publisher-properties.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-publisher.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/publisher-fsm-event-names.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/publisher-fsm-event.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/publisher-fsm.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/publisher-state-names.js","webpack://solclientjs/./modules/solclient-message/api.js","webpack://solclientjs/./modules/solclient-message/lib/message-cache-status.js","webpack://solclientjs/./modules/solclient-message/lib/message-delivery-mode-types.js","webpack://solclientjs/./modules/solclient-message/lib/message-dump-flags.js","webpack://solclientjs/./modules/solclient-message/lib/message-dump-standard-provider.js","webpack://solclientjs/./modules/solclient-message/lib/message-dump-util.js","webpack://solclientjs/./modules/solclient-message/lib/message-types.js","webpack://solclientjs/./modules/solclient-message/lib/message-user-cos-types.js","webpack://solclientjs/./modules/solclient-message/lib/message.js","webpack://solclientjs/./modules/solclient-message/lib/replication-group-message-id.js","webpack://solclientjs/./modules/solclient-queue/api.js","webpack://solclientjs/./modules/solclient-queue/lib/abstract-queue-descriptor.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-access-types.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-descriptor-validator.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-descriptor.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-discard-behaviors.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-permissions.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-properties-validator.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-properties.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-types.js","webpack://solclientjs/./modules/solclient-replaystart/api.js","webpack://solclientjs/./modules/solclient-replaystart/lib/replayStartLocation.js","webpack://solclientjs/./modules/solclient-replaystart/lib/replayStartLocationBeginning.js","webpack://solclientjs/./modules/solclient-replaystart/lib/replayStartLocationDate.js","webpack://solclientjs/./modules/solclient-sdt/api.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/api.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/encode-header.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/encode-integer.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/encode-map.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/encode-single-element.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/encode-stream.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/ieee754lib.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-destination.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-field-header.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-float.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-integer.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-map.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-single-element.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-stream.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-data-types.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-destination-types.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-field-types.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-field.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-map-container.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-stream-container.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-unsupported-value-error.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-value-error-subcodes.js","webpack://solclientjs/./modules/solclient-sdt/lib/validate-sdt-field.js","webpack://solclientjs/./modules/solclient-session/api.js","webpack://solclientjs/./modules/solclient-session/lib/authentication-schemes.js","webpack://solclientjs/./modules/solclient-session/lib/capability-types.js","webpack://solclientjs/./modules/solclient-session/lib/correlated-request.js","webpack://solclientjs/./modules/solclient-session/lib/default-capabilities.js","webpack://solclientjs/./modules/solclient-session/lib/global-context.js","webpack://solclientjs/./modules/solclient-session/lib/host-list-dns-filter.js","webpack://solclientjs/./modules/solclient-session/lib/host-list.js","webpack://solclientjs/./modules/solclient-session/lib/message-rx-cb-info.js","webpack://solclientjs/./modules/solclient-session/lib/mutable-session-properties.js","webpack://solclientjs/./modules/solclient-session/lib/outstanding-data-request.js","webpack://solclientjs/./modules/solclient-session/lib/p2p-util.js","webpack://solclientjs/./modules/solclient-session/lib/session-event-cb-info.js","webpack://solclientjs/./modules/solclient-session/lib/session-event-codes.js","webpack://solclientjs/./modules/solclient-session/lib/session-event-names.js","webpack://solclientjs/./modules/solclient-session/lib/session-event.js","webpack://solclientjs/./modules/solclient-session/lib/session-fsm-event.js","webpack://solclientjs/./modules/solclient-session/lib/session-fsm.js","webpack://solclientjs/./modules/solclient-session/lib/session-operations.js","webpack://solclientjs/./modules/solclient-session/lib/session-properties-validator.js","webpack://solclientjs/./modules/solclient-session/lib/session-properties.js","webpack://solclientjs/./modules/solclient-session/lib/session-request-types.js","webpack://solclientjs/./modules/solclient-session/lib/session-state-names.js","webpack://solclientjs/./modules/solclient-session/lib/session-states.js","webpack://solclientjs/./modules/solclient-session/lib/session.js","webpack://solclientjs/./modules/solclient-session/lib/ssl-downgrades.js","webpack://solclientjs/./modules/solclient-session/lib/subscription-update-timeout-messages.js","webpack://solclientjs/./modules/solclient-smf/api.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/adprotocol.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/api.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/client-ctrl.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/content-summary-element.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/content-summary-types.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/decode.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/encode.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/param-parse.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/parse-smf.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/priority-user-cos-map.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/smp.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/transport.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/adprotocol-message.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/api.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/base-message.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/binary-meta-block.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/client-ctrl-message.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/keep-alive-message.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/smf-header.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/smf-parameter.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/smf-uh.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/smp-message.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/transport-smf-message.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-adprotocol-message-types.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-adprotocol-params.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-client-ctrl-message-types.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-client-ctrl-params.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-parameter-types.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-protocols.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-smp-message-type-flags.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-smp-message-types.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-transport-session-message-types.js","webpack://solclientjs/./modules/solclient-solcache-session/api.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-cb-info.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-context.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-get-result-codes.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-get-result.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-live-data-actions.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-request-result.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-request-types.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-request.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-return-codes.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-return-subcodes.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-session-properties.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-session-subscribe-info.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-session.js","webpack://solclientjs/./modules/solclient-stats/api.js","webpack://solclientjs/./modules/solclient-stats/lib/stat-bymode.js","webpack://solclientjs/./modules/solclient-stats/lib/stat-types.js","webpack://solclientjs/./modules/solclient-stats/lib/stats.js","webpack://solclientjs/./modules/solclient-transport/api.js","webpack://solclientjs/./modules/solclient-transport/lib/base-smf-client.js","webpack://solclientjs/./modules/solclient-transport/lib/buffer-queue.js","webpack://solclientjs/./modules/solclient-transport/lib/buffer-smf-client.js","webpack://solclientjs/./modules/solclient-transport/lib/node-tls-opts-mixin.js","webpack://solclientjs/./modules/solclient-transport/lib/smf-client.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/api.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/shuntable-transport.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/transport-compression.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/transport-tcp-plaintext.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/transport-tcp-tls.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/transport-tls.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-base.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-capabilities.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-client-stats.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-error.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-factory.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-protocol-handler.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-protocols.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-return-codes.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-session-event-codes.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-session-event.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-session-states.js","webpack://solclientjs/./modules/solclient-transport/lib/tsh-state.js","webpack://solclientjs/./modules/solclient-transport/lib/web/api.js","webpack://solclientjs/./modules/solclient-transport/lib/web/http/api.js","webpack://solclientjs/./modules/solclient-transport/lib/web/http/http-connection.js","webpack://solclientjs/./modules/solclient-transport/lib/web/http/http-transport-session.js","webpack://solclientjs/./modules/solclient-transport/lib/web/http/send-xhr.js","webpack://solclientjs/./modules/solclient-transport/lib/web/http/xhr-factory.js","webpack://solclientjs/./modules/solclient-transport/lib/web/state-base64.js","webpack://solclientjs/./modules/solclient-transport/lib/web/state-binary.js","webpack://solclientjs/./modules/solclient-transport/lib/web/state-streaming-and-binary.js","webpack://solclientjs/./modules/solclient-transport/lib/web/state-websocket-binary.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport-capabilities.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport-events.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport-fsm.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport-session-base.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport-states.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport.js","webpack://solclientjs/./modules/solclient-transport/lib/web/websocket-close-codes.js","webpack://solclientjs/./modules/solclient-transport/lib/web/websocket-transport-session.js","webpack://solclientjs/./modules/solclient-util/api.js","webpack://solclientjs/./modules/solclient-util/lib/api-properties-validators.js","webpack://solclientjs/./modules/solclient-util/lib/api-properties.js","webpack://solclientjs/./modules/solclient-util/lib/array-utils.js","webpack://solclientjs/./modules/solclient-util/lib/process.js","webpack://solclientjs/./modules/solclient-util/lib/string-buffer.js","webpack://solclientjs/./modules/solclient-util/lib/string-utils.js","webpack://solclientjs/./modules/solclient-util/lib/timing-bucket.js","webpack://solclientjs/./modules/solclient-util/lib/url.js","webpack://solclientjs/./modules/solclient-util/lib/uuid.js","webpack://solclientjs/./modules/solclient-util/lib/version.js","webpack://solclientjs/./modules/solclient-validate/api.js","webpack://solclientjs/./modules/solclient-validate/lib/base-checks.js","webpack://solclientjs/./modules/solclient-validate/lib/check.js","webpack://solclientjs/./modules/solclient-validate/lib/parameter.js","webpack://solclientjs/./node_modules/clone/clone.js","webpack://solclientjs/./node_modules/ws/index.js","webpack://solclientjs/./node_modules/ws/lib/buffer-util.js","webpack://solclientjs/./node_modules/ws/lib/constants.js","webpack://solclientjs/./node_modules/ws/lib/event-target.js","webpack://solclientjs/./node_modules/ws/lib/extension.js","webpack://solclientjs/./node_modules/ws/lib/limiter.js","webpack://solclientjs/./node_modules/ws/lib/permessage-deflate.js","webpack://solclientjs/./node_modules/ws/lib/receiver.js","webpack://solclientjs/./node_modules/ws/lib/sender.js","webpack://solclientjs/./node_modules/ws/lib/stream.js","webpack://solclientjs/./node_modules/ws/lib/subprotocol.js","webpack://solclientjs/./node_modules/ws/lib/validation.js","webpack://solclientjs/./node_modules/ws/lib/websocket-server.js","webpack://solclientjs/./node_modules/ws/lib/websocket.js","webpack://solclientjs/external commonjs2 \"bufferutil\"","webpack://solclientjs/external commonjs2 \"utf-8-validate\"","webpack://solclientjs/external node-commonjs \"buffer\"","webpack://solclientjs/external node-commonjs \"constants\"","webpack://solclientjs/external node-commonjs \"crypto\"","webpack://solclientjs/external node-commonjs \"dns\"","webpack://solclientjs/external node-commonjs \"events\"","webpack://solclientjs/external node-commonjs \"fs\"","webpack://solclientjs/external node-commonjs \"http\"","webpack://solclientjs/external node-commonjs \"https\"","webpack://solclientjs/external node-commonjs \"net\"","webpack://solclientjs/external node-commonjs \"os\"","webpack://solclientjs/external node-commonjs \"stream\"","webpack://solclientjs/external node-commonjs \"tls\"","webpack://solclientjs/external node-commonjs \"url\"","webpack://solclientjs/external node-commonjs \"util\"","webpack://solclientjs/external node-commonjs \"zlib\"","webpack://solclientjs/./node_modules/long/umd/index.js","webpack://solclientjs/webpack/bootstrap","webpack://solclientjs/webpack/startup"],"sourcesContent":["// Node entry point\n//global.BUILD_ENV = require('./define.config.js');\nmodule.exports = require('solclient-core');\n\n","const { Base64 } = require('./lib/base64');\nconst { Bits } = require('./lib/bits');\nconst { Convert } = require('./lib/convert');\nconst { Hex } = require('./lib/hex');\nconst { Long } = require('./lib/long');\n\nmodule.exports.Base64 = Base64;\nmodule.exports.Bits = Bits;\nmodule.exports.Convert = Convert;\nmodule.exports.Hex = Hex;\nmodule.exports.Long = Long;\n","// This code was written by Tyler Akins and has been placed in the\n// public domain.  It would be nice if you left this header intact.\n// Base64 code from Tyler Akins -- http://rumkin.com\n\n// It has been modified by me (Edward Funnekotter) to improve its\n// efficiency\n\n// It has been modified by me (Justin Bowes) to avoid using it whenever\n// possible in favour of browser or buffer implementations.\n\nconst KEY_STR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst ENC_LUT = [\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, 99, -1, -1, 99, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  99, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, 62, -1, -1, -1, 63,\n  52, 53, 54, 55, 56, 57, 58, 59,\n  60, 61, -1, -1, -1, 64, -1, -1,\n\n    // 64\n  -1, 0, 1, 2, 3, 4, 5, 6,\n  7, 8, 9, 10, 11, 12, 13, 14,\n  15, 16, 17, 18, 19, 20, 21, 22,\n  23, 24, 25, -1, -1, -1, -1, -1,\n  -1, 26, 27, 28, 29, 30, 31, 32,\n  33, 34, 35, 36, 37, 38, 39, 40,\n  41, 42, 43, 44, 45, 46, 47, 48,\n  49, 50, 51, -1, -1, -1, -1, -1,\n\n    // 128\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n\n    // 192\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1];\n\nclass DecodeError extends Error {\n\n}\n\nconst LegacyEncoder = {\n  /**\n   * Encodes a string in base64\n   * @param {String} input The string to encode in base64.\n   * @returns {String} base64 encoded input\n   * @private\n   */\n  base64_encode(input) {\n    let output = '';\n    let i = 0;\n    do {\n      const chr1 = input.charCodeAt(i++);\n      const chr2 = input.charCodeAt(i++);\n      const chr3 = input.charCodeAt(i++);\n\n      const enc1 = chr1 >> 2;\n      const enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n      let enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n      let enc4 = chr3 & 63;\n\n      if (isNaN(chr2)) {\n        enc3 = enc4 = 64;\n      } else if (isNaN(chr3)) {\n        enc4 = 64;\n      }\n\n      output += KEY_STR.charAt(enc1);\n      output += KEY_STR.charAt(enc2);\n      output += KEY_STR.charAt(enc3);\n      output += KEY_STR.charAt(enc4);\n    } while (i < input.length);\n\n    return output;\n  },\n\n  /**\n   * Decodes a base64 string.\n   * @param {String} input The base64 string to decode.\n   * @returns {String} binary output\n   * @private\n   */\n  base64_decode(input) {\n    let output = '';\n    let i = 0;\n\n    do {\n      while (ENC_LUT[input.charCodeAt(i)] > 64) {\n        i++;\n      }\n      const enc1 = ENC_LUT[input.charCodeAt(i++)];\n      const enc2 = ENC_LUT[input.charCodeAt(i++)];\n      const enc3 = ENC_LUT[input.charCodeAt(i++)];\n      const enc4 = ENC_LUT[input.charCodeAt(i++)];\n\n      if (enc1 < 0 || enc2 < 0 || enc3 < 0 || enc4 < 0) {\n        // Invalid character in base64 text\n        // alert(\"enc at \" + i + \": \" + enc1 + \", \" + enc2 + \", \" + enc3 + \", \" + enc4);\n        throw new DecodeError('Invalid base64 character');\n      }\n\n      const chr1 = (enc1 << 2) | (enc2 >> 4);\n      const chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n      const chr3 = ((enc3 & 3) << 6) | enc4;\n\n      output += String.fromCharCode(chr1);\n\n      if (enc3 !== 64) {\n        output += String.fromCharCode(chr2);\n      }\n      if (enc4 !== 64) {\n        output += String.fromCharCode(chr3);\n      }\n    } while (i < input.length - 3);\n\n    return output;\n  },\n};\n\nconst isNode = typeof window === 'undefined'; // !node\nconst hasBuffer = typeof Buffer !== 'undefined';\nconst hasBlob = typeof Blob !== 'undefined'; // !node, !ie9\nconst BufferEncoder = (hasBuffer && (hasBlob || isNode))\n  ? {\n    base64_encode: str => Buffer.from(str, 'binary').toString('base64'),\n    base64_decode: str => Buffer.from(str, 'base64').toString('binary'),\n  }\n  : {};\n/* eslint-env browser */\n/* eslint-disable dot-notation */\nconst WindowEncoder = (typeof window !== 'undefined')\n  ? {\n    base64_encode: window['btoa'] ? b => window['btoa'](b) : null,\n    base64_decode: window['atob'] ? a => window['atob'](a) : null,\n  }\n  : {};\n/* eslint-enable dot-notation */\n\nconst Base64 = {\n  encode: (WindowEncoder.base64_encode ||\n           BufferEncoder.base64_encode ||\n           LegacyEncoder.base64_encode),\n  decode: (WindowEncoder.base64_decode ||\n           BufferEncoder.base64_decode ||\n           LegacyEncoder.base64_decode),\n};\n\nmodule.exports.Base64 = Base64;\n","const Bits = {\n  get(val, shift, numBits) {\n    return (val >>> shift) & ((0x01 << numBits) - 1);\n  },\n\n  set(dataIn, val, shift, numBits) {\n    const curMask = (1 << numBits) - 1;\n    const shiftedVal = (val & curMask) << shift;\n    const data = dataIn & ~(curMask << shift);\n    return (data | shiftedVal);\n  },\n};\n\nmodule.exports.Bits = Bits;\n","const Long = require('long');\n\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n/**\n * @module\n * ===========================================================================\n * Convert\n *\n * This collection of functions performs all required string to number and number to string\n * conversions\n * ============================================================================\n * @private\n */\n\nconst TWO_ZEROES_STR = String.fromCharCode(0, 0);\nconst THREE_ZEROES_STR = String.fromCharCode(0, 0, 0);\nconst FOUR_ZEROES_STR = String.fromCharCode(0, 0, 0, 0);\n\nconst BYTEARRAY_CONVERT_CHUNK = 8192;\nconst UNSIGNED_LSHIFT_24 = (256 * 256 * 256);\n\nconst ARRAY_BUFFER_CONVERT_CHUNK = 32768;\n\nfunction stringToUint8Array(data) {\n  const dataLength = data.length;\n  const arrayBuf = new ArrayBuffer(dataLength);\n  const uint8Array = new Uint8Array(arrayBuf, 0, dataLength);\n  for (let i = 0; i < dataLength; i++) {\n    uint8Array[i] = data.charCodeAt(i);\n  }\n  return uint8Array;\n}\n\nfunction arrayBufferToString(ab) {\n  if (!ab) return '';\n  const len = ab.byteLength;\n  const u8 = new Uint8Array(ab);\n  if (len < ARRAY_BUFFER_CONVERT_CHUNK) {\n    return String.fromCharCode.apply(null, u8);\n  }\n\n  let k = 0;\n  let r = '';\n  while (k < len) {\n    // slice is clamped, inclusive of startIndex, exclusive of lastIndex\n    r += String.fromCharCode.apply(null, u8.subarray(k, k + ARRAY_BUFFER_CONVERT_CHUNK));\n    k += ARRAY_BUFFER_CONVERT_CHUNK;\n  }\n  return r;\n}\n\nfunction stringToArrayBuffer(str) {\n  return stringToUint8Array(str).buffer;\n}\n\nfunction int8ToStr(int8) {\n  return String.fromCharCode(int8 & 0xff);\n}\n\nfunction int16ToStr(int16) {\n  return (\n      String.fromCharCode((int16 >> 8) & 0xff) +\n      String.fromCharCode(int16 & 0xff)\n  );\n}\n\nfunction int24ToStr(int24) {\n  return (\n      String.fromCharCode((int24 >> 16) & 0xff) +\n      String.fromCharCode((int24 >> 8) & 0xff) +\n      String.fromCharCode(int24 & 0xff)\n  );\n}\n\nfunction int32ToStr(int32) {\n  // It is expected that there are a lot of small numbers\n  // being converted, so it is worth doing a few checks for\n  // efficiency (on firefox it is about 3 times quicker for small numbers\n  // to do the check - it is 2 times quicker for chrome)\n\n  if (int32 === 0) return FOUR_ZEROES_STR;\n  if (int32 > 0) {\n    if (int32 < 256) {\n      return THREE_ZEROES_STR + String.fromCharCode(int32);\n    }\n    if (int32 < 65536) {\n      return TWO_ZEROES_STR + String.fromCharCode(int32 >> 8) + String.fromCharCode(int32 & 0xff);\n    }\n  }\n\n  return (\n      String.fromCharCode((int32 >> 24) & 0xff) +\n      String.fromCharCode((int32 >> 16) & 0xff) +\n      String.fromCharCode((int32 >> 8) & 0xff) +\n      String.fromCharCode(int32 & 0xff)\n  );\n}\n\nfunction int64ToStr(int64) {\n  if (typeof int64 !== 'number') {\n    return int32ToStr(int64.high) + int32ToStr(int64.low);\n  }\n\n  // It is expected that there are a lot of small numbers\n  // being converted, so it is worth doing a few checks for\n  // efficiency (on firefox it is about 3 times quicker for small numbers\n  // to do the check - it is 2 times quicker for chrome)\n  if (int64 >= 0) {\n    if (int64 < 256) {\n      return FOUR_ZEROES_STR + THREE_ZEROES_STR + String.fromCharCode(int64);\n    }\n    if (int64 < 65536) {\n      return FOUR_ZEROES_STR + TWO_ZEROES_STR +\n        String.fromCharCode(int64 >> 8) + String.fromCharCode(int64 & 0xff);\n    }\n    if (int64 < 4294967296) {\n      return FOUR_ZEROES_STR + (String.fromCharCode((int64 >> 24) & 0xff) +\n        String.fromCharCode((int64 >> 16) & 0xff) +\n        String.fromCharCode((int64 >> 8) & 0xff) +\n        String.fromCharCode(int64 & 0xff));\n    }\n  }\n  return String.fromCharCode((int64 >> 56) & 0xFF) +\n        String.fromCharCode((int64 >> 48) & 0xFF) +\n        String.fromCharCode((int64 >> 40) & 0xFF) +\n        String.fromCharCode((int64 >> 32) & 0xFF) +\n        String.fromCharCode((int64 >> 24) & 0xff) +\n        String.fromCharCode((int64 >> 16) & 0xff) +\n        String.fromCharCode((int64 >> 8) & 0xff) +\n        String.fromCharCode(int64 & 0xff);\n}\n\nfunction byteArrayToStr(byteArray) {\n  const len = byteArray.length;\n  if (len < BYTEARRAY_CONVERT_CHUNK) {\n    return String.fromCharCode.apply(null, byteArray);\n  }\n\n  let k = 0;\n  let r = '';\n\n  while (k < len) {\n    // slice is clamped, inclusive of startIndex, exclusive of lastIndex\n    r += String.fromCharCode.apply(null, byteArray.slice(k, k + BYTEARRAY_CONVERT_CHUNK));\n    k += BYTEARRAY_CONVERT_CHUNK;\n  }\n\n  return r;\n}\n\nfunction strToByteArray(str) {\n  const result = [];\n  let i;\n  for (i = 0; i < str.length; i++) {\n    result[i] = str.charCodeAt(i);\n  }\n  return result;\n}\n\nfunction strToHexArray(str) {\n  function toHex(c) {\n    return c.charCodeAt(0).toString(16);\n  }\n  return Array.prototype.map.call(str.split(''), toHex);\n}\n\nfunction strToInt8(data) {\n  return data.charCodeAt(0) & 0xff;\n}\n\nfunction strToInt16(data) {\n  return (\n      (data.charCodeAt(0) << 8) +\n      (data.charCodeAt(1))\n  );\n}\n\nfunction strToInt24(data) {\n  return (\n      (data.charCodeAt(0) << 16) +\n      (data.charCodeAt(1) << 8) +\n      (data.charCodeAt(2))\n  );\n}\n\nfunction strToInt32(data) {\n    // SIGNED integer\n  return (\n      (data.charCodeAt(0) << 24) +\n      (data.charCodeAt(1) << 16) +\n      (data.charCodeAt(2) << 8) +\n      (data.charCodeAt(3))\n  );\n}\n\nfunction strToUInt32(data) {\n  // WARNING: you cannot use a << 24 to shift a byte into\n  // a 32-bit string, because all shifts in JS are signed\n  return (\n      (data.charCodeAt(0) * UNSIGNED_LSHIFT_24) +\n      (data.charCodeAt(1) << 16) +\n      (data.charCodeAt(2) << 8) +\n      (data.charCodeAt(3))\n  );\n}\n\nfunction strToUInt64(data) {\n  return Long.fromBits(strToUInt32(data.substr(4, 4)),\n                       strToUInt32(data.substr(0, 4)),\n                       true);\n}\n\nfunction ucs2ToUtf8(ucs2) {\n  return unescape(encodeURIComponent(ucs2));\n}\n\nfunction utf8ToUcs2(utf8) {\n  return decodeURIComponent(escape(utf8));\n}\n\nfunction anythingToBuffer(value) {\n  if (BufferImpl.isBuffer(value)) {\n    return value;\n  }\n  if (typeof value === 'string') {\n    return BufferImpl.from(value, 'latin1');\n  }\n  if (value instanceof ArrayBuffer) {\n    return BufferImpl.from(value);\n  }\n  //TypedArrays and DataView:\n  if (value.buffer instanceof ArrayBuffer &&\n    typeof value.byteLength === 'number' &&\n    typeof value.byteOffset === 'number') {\n    if (value.byteOffset === 0 && value.byteLength === value.buffer.byteLength) {\n      // \"full sice\", no actual offset: just use the raw buffer.\n      return BufferImpl.from(value.buffer);\n    }\n    return BufferImpl.from(value.buffer, value.byteOffset, value.byteLength);\n  }\n  throw new OperationError('Parameter value failed validation',\n    ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n    'Expecting Buffer/Uint8Array, also accepting string, ArrayBuffer, any TypedArray, or DataView.');\n}\n\nconst Convert = {\n  arrayBufferToString,\n  stringToArrayBuffer,\n  stringToUint8Array,\n\n  int8ToStr,\n  strToInt8,\n\n  int16ToStr,\n  strToInt16,\n\n  int24ToStr,\n  strToInt24,\n\n  int32ToStr,\n  strToInt32,\n  strToUInt32,\n\n  int64ToStr,\n  strToUInt64,\n\n  byteArrayToStr,\n  strToByteArray,\n\n  strToHexArray,\n\n  ucs2ToUtf8,\n  utf8ToUcs2,\n  anythingToBuffer,\n};\n\nmodule.exports.Convert = Convert;\n","function numToHex(n) {\n  if (typeof n !== 'number') {\n    return '';\n  }\n  const s = n.toString(16);\n  return (s.length < 2) ? `0${s}` : s;\n}\n\n\nfunction formatHexString(obj) {\n  if (typeof obj === 'number') {\n    return `0x${numToHex(obj)}`;\n  }\n\n  if (typeof obj === 'object' && Array.isArray(obj)) {\n    return obj.map(numToHex).join();\n  }\n\n  if (typeof obj === 'string') {\n    return Array.prototype.map.call(obj, (_, i) => numToHex(obj.charCodeAt(i))).join('');\n  }\n\n  return null;\n}\n\nconst Hex = {\n  formatHexString,\n};\n\nmodule.exports.Hex = Hex;\n","module.exports.Long = require('long');\n","/**\n * SolclientJS internal API for white-box integration testing\n * @private\n */\n\n/* _eslint-disable sort-requires/sort-requires */\n\nconst Convert = require('solclient-convert');\nconst Debug = require('solclient-debug');\nconst Destination = require('solclient-destination');\nconst Error = require('solclient-error');\nconst ESKit = require('solclient-eskit');\nconst Factory = require('solclient-factory');\nconst FSM = require('solclient-fsm');\nconst Log = require('solclient-log');\nconst Message = require('solclient-message');\nconst Publisher = require('solclient-message-publisher');\nconst SDT = require('solclient-sdt');\nconst Session = require('solclient-session');\nconst SMF = require('solclient-smf');\nconst SolcacheSession = require('solclient-solcache-session');\nconst TestEnv = require('solclient-env');\nconst Transport = require('solclient-transport');\nconst Util = require('solclient-util');\nconst Validate = require('solclient-validate');\n\nmodule.exports = {\n  Convert,\n  Debug,\n  Destination,\n  Error,\n  ESKit,\n  Factory,\n  FSM,\n  Log,\n  Message,\n  Publisher,\n  SDT,\n  Session,\n  SMF,\n  SolcacheSession,\n  TestEnv,\n  Transport,\n  Util,\n  Validate,\n};\n","/**\n * <h1> Overview </h1>\n *\n * This is the Solace Corporation Messaging API for JavaScript. Concepts defined in this API are\n * similar to those defined in other Solace Messaging APIs for Java, C, and .NET.\n *\n * <h1> Concepts </h1>\n *\n * Some general concepts:\n *\n * <li> All function calls are non-blocking; confirmation, if requested, is returned to the calling\n * client application in the form of callbacks. </li>\n *\n */\n\n/* _eslint-disable sort-requires/sort-requires */\n\n// -------------------------- Solclient Factory ------------------------------\n// Load me before the rest of the API as a plug-in point for modules\nconst FactoryLib = require('solclient-factory');\n// ---------------------------------------------------------------------------\n\nconst {\n  SolclientFactory,\n  SolclientFactoryProfiles,\n  SolclientFactoryProperties,\n} = FactoryLib;\n\nconst {\n  Long,\n} = require('solclient-convert');\nconst {\n  Destination,\n  DestinationType,\n  Topic,\n} = require('solclient-destination');\nconst {\n  ErrorSubcode,\n  NotImplementedError,\n  OperationError,\n  RequestError,\n  RequestEventCode,\n} = require('solclient-error');\nconst {\n  makeIterator,\n} = require('solclient-eskit');\nconst {\n  ConsoleLogImpl,\n  LogImpl,\n  LogLevel,\n} = require('solclient-log');\nconst {\n  Message,\n  MessageCacheStatus,\n  MessageDeliveryModeType,\n  MessageDumpFlag,\n  MessageType,\n  MessageUserCosType,\n  ReplicationGroupMessageId,\n} = require('solclient-message');\nconst {\n  MessageConsumer,\n  MessageConsumerAcknowledgeMode,\n  MessageConsumerEventName,\n  MessageConsumerProperties,\n  QueueBrowser,\n  QueueBrowserEventName,\n  QueueBrowserProperties,\n} = require('solclient-message-consumer');\nconst {\n  ReplayStartLocation,\n  ReplayStartLocationBeginning,\n} = require('solclient-replaystart');\nconst {\n  MessagePublisherAcknowledgeMode,\n  MessagePublisherProperties,\n} = require('solclient-message-publisher');\nconst {\n  AbstractQueueDescriptor,\n  QueueAccessType,\n  QueueDescriptor,\n  QueueDiscardBehavior,\n  QueuePermissions,\n  QueueProperties,\n  QueueType,\n} = require('solclient-queue');\nconst {\n  SDTField,\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n} = require('solclient-sdt');\nconst {\n  AuthenticationScheme,\n  CapabilityType,\n  MessageRxCBInfo,\n  MutableSessionProperty,\n  Session,\n  SessionEvent,\n  SessionEventCBInfo,\n  SessionEventCode,\n  SessionProperties,\n  SessionState,\n  SslDowngrade,\n} = require('solclient-session');\nconst {\n  CacheCBInfo,\n  CacheLiveDataAction,\n  CacheRequestResult,\n  CacheReturnCode,\n  CacheReturnSubcode,\n  CacheSession,\n  CacheSessionProperties,\n} = require('solclient-solcache-session');\nconst {\n  StatType,\n} = require('solclient-stats');\nconst {\n  TransportError,\n  TransportProtocol,\n} = require('solclient-transport');\nconst {\n  Version,\n} = require('solclient-util');\n\n// --------------------------- Internal API -- do not use --------------------\n// Load me last. I disappear in production mode\nconst _internal = require('./api-internal.js');\n// ---------------------------------------------------------------------------\n\n\n/**\n * @namespace\n * @public\n */\nconst solace = {\n  AbstractQueueDescriptor,\n  AuthenticationScheme,\n  CacheCBInfo,\n  CacheLiveDataAction,\n  CacheRequestResult,\n  CacheReturnCode,\n  CacheReturnSubcode,\n  CacheSession,\n  CacheSessionProperties,\n  CapabilityType,\n  ConsoleLogImpl,\n  Destination,\n  DestinationType,\n  ErrorSubcode,\n  LogImpl,\n  LogLevel,\n  Long,\n  Message,\n  MessageCacheStatus,\n  MessageConsumer,\n  MessageConsumerAcknowledgeMode,\n  MessageConsumerEventName,\n  MessageConsumerProperties,\n  MessageDeliveryModeType,\n  MessageDumpFlag,\n  MessagePublisherAcknowledgeMode,\n  MessagePublisherProperties,\n  MessageRxCBInfo,\n  MessageType,\n  MessageUserCosType,\n  MutableSessionProperty,\n  NotImplementedError,\n  OperationError,\n  QueueAccessType,\n  QueueBrowser,\n  QueueBrowserEventName,\n  QueueBrowserProperties,\n  QueueDescriptor,\n  QueueDiscardBehavior,\n  QueuePermissions,\n  QueueProperties,\n  QueueType,\n  ReplayStartLocation,\n  /*\n   * This should not be here ReplayStartLocationBeginning should not be a publicly exposed type.\n   * This type must remain for backwards compatibility however it was never indented for use\n   * by applications.\n   * */\n  ReplayStartLocationBeginning,\n  ReplicationGroupMessageId,\n  RequestError,\n  RequestEventCode,\n  SDTField,\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n  Session,\n  SessionEvent,\n  SessionEventCBInfo,\n  SessionEventCode,\n  SessionProperties,\n  SessionState,\n  SolclientFactory,\n  SolclientFactoryProfiles,\n  SolclientFactoryProperties,\n  SslDowngrade,\n  StatType,\n  Topic,\n  TransportError,\n  TransportProtocol,\n  Version,\n\n  makeIterator,\n\n  _internal, //\n};\n\nObject.assign(module.exports, solace);\n","const { Debug } = require('./lib/debug');\n\nmodule.exports.Debug = Debug;\n","/* eslint-disable global-require */\n// Do late binding for these debug utilities to break cyclic dependencies.\n\nconst PRINTABLE_LUT = (() => {\n  const tmp = [];\n  for (let c = 0; c < 256; ++c) {\n    tmp[c] = (c < 33 || c > 126) ? '.' : String.fromCharCode(c);\n  }\n  return tmp;\n})();\n\nconst SPACER = '   ';\nconst UNPRINTABLE = '.';\n\n\nfunction formatDumpBytes(data, showDecode, leftPadding) {\n  const { StringBuffer, StringUtils } = require('solclient-util');\n  const { isEmpty, padLeft, padRight } = StringUtils;\n\n  if (isEmpty(data)) {\n    return null;\n  }\n\n  const output = new StringBuffer();\n  const ascii = new StringBuffer();\n  const line = new StringBuffer();\n  let lineBytes = 0;\n  const asciiOffset = 54;\n\n  for (let i = 0, dataLen = data.length; i < dataLen; ++i) {\n    const ccode = data.charCodeAt(i);\n    //const ccode = dataBuf.readInt8(i);\n    line.append(padLeft(ccode.toString(16), 2, '0'), ' ');\n    ascii.append(PRINTABLE_LUT[ccode] || UNPRINTABLE);\n    lineBytes++;\n\n    if (lineBytes === 8) {\n      line.append(SPACER);\n    }\n\n    if (lineBytes === 16 || i === data.length - 1) {\n      if (leftPadding > 0) {\n        output.append(padRight('', leftPadding, ' '));\n      }\n\n      output.append(padRight(line.toString(), asciiOffset, ' '));\n\n      if (showDecode) {\n        output.append(ascii);\n      }\n\n      output.append('\\n');\n      line.clear();\n      ascii.clear();\n      lineBytes = 0;\n    }\n  }\n\n  return output.toString();\n}\n\nfunction parseSMFStream(data) {\n  const { Codec: { Decode: { decodeCompoundMessage } } } = require('solclient-smf');\n  const { LOG_WARN, LOG_ERROR } = require('solclient-log');\n\n  if (data === null) {\n    LOG_ERROR('data null in debugParseSmfStream');\n    return;\n  }\n  let pos = 0;\n  LOG_WARN(`parseSMFStream(): Starting parse, length ${data.length}`);\n  while (pos < data.length) {\n    const incomingMsg = decodeCompoundMessage(data, pos);\n    const smf = incomingMsg ? incomingMsg.smfHeader : null;\n    if (!(incomingMsg && smf)) {\n      // couldn't decode! Lost SMF framing.\n      LOG_WARN(\"parseSMFStream(): couldn't decode message.\");\n      LOG_WARN(`Position: ${pos} length: ${data.length}`);\n      return;\n    }\n\n    LOG_WARN(`>> Pos(${pos}) Protocol ${smf.smf_protocol}, Length: ${smf.messageLength}`);\n    pos += smf.messageLength;\n  }\n}\n\nconst Debug = {\n  formatDumpBytes,\n  parseSMFStream,\n};\n\nmodule.exports.Debug = Debug;\n","const { Destination } = require('./lib/destination');\nconst { DestinationFromNetwork } = require('./lib/destination-from-network');\nconst { DestinationType } = require('./lib/destination-type');\nconst { DestinationUtil } = require('./lib/destination-util');\nconst { Parameter } = require('solclient-validate');\nconst { Queue } = require('./lib/queue');\nconst { SolclientFactory } = require('solclient-factory');\nconst { Topic } = require('./lib/topic');\n\n\n/**\n * Creates a topic {@link solace.Destination} instance. When the returned Destination is set as\n * the destination of a message via {@link solace.Message#setDestination}, the message will be\n * delivered to direct subscribers or topic endpoints subscribed to the given topic.\n *\n * @param {String} topicName The topic string for the new topic.\n * @returns {solace.Destination} The newly created topic destination.\n * @method\n * @name solace.SolclientFactory.createTopicDestination\n */\nSolclientFactory.createTopicDestination = SolclientFactory.createFactory((topicName) => {\n  Parameter.isString('topicName', topicName);\n  return Topic.createFromName(topicName);\n});\n/* @deprecated @*/\nSolclientFactory.createTopic = SolclientFactory.createFactory(topicName => new Topic(topicName));\n\n/**\n * Creates a durable queue {@link solace.Destination} instance. When the returned Destination is\n * set as the destination of a message via {@link solace.Message#setDestination}, the message will\n * be delivered to the Guaranteed Message queue on the Solace Message Router of the same name.\n *\n * @since 10.0.0\n * @param {String} queueName The queueName of the queue\n * @returns {solace.Destination} The newly created queue destination.\n * @method\n * @name solace.SolclientFactory.createDurableQueueDestination\n */\nSolclientFactory.createDurableQueueDestination = SolclientFactory.createFactory((queueName) => {\n  Parameter.isString('queueName', queueName);\n  return Queue.createFromLocalName(queueName);\n});\n\nmodule.exports.Destination = Destination;\nmodule.exports.DestinationFromNetwork = DestinationFromNetwork;\nmodule.exports.DestinationType = DestinationType;\nmodule.exports.DestinationUtil = DestinationUtil;\nmodule.exports.Queue = Queue;\nmodule.exports.Topic = Topic;\n","const { DestinationType } = require('./destination-type');\nconst { DestinationUtil } = require('./destination-util');\nconst { Queue } = require('./queue');\nconst { Topic } = require('./topic');\n\nconst QUEUE_PREFIX = '#P2P/QUE/';\nconst QUEUE_PREFIX_LEN = QUEUE_PREFIX.length;\nconst TEMPORARY_QUEUE_PREFIX = '#P2P/QTMP/';\n\nfunction createDestinationFromName(networkTopicName, networkTopicBytes = undefined) {\n  if (networkTopicName === null || networkTopicName.length === 0) {\n    return null;\n  }\n\n  const spec = {\n    name:  networkTopicName,\n    bytes: networkTopicBytes || DestinationUtil.encodeBytes(networkTopicName),\n  };\n  if (networkTopicName[0] === '#') {\n    if (networkTopicName.startsWith(QUEUE_PREFIX)) {\n      const offset = QUEUE_PREFIX_LEN;\n      spec.name = networkTopicName.substr(offset);\n      spec.type = DestinationType.QUEUE;\n      spec.offset = offset;\n      return new Queue(spec);\n    } else if (networkTopicName.startsWith(TEMPORARY_QUEUE_PREFIX)) {\n      spec.name = networkTopicName;\n      spec.type = DestinationType.TEMPORARY_QUEUE;\n      spec.offset = 0;\n      return new Queue(spec);\n    }\n  }\n  return new Topic(spec);\n}\n\nfunction createDestinationFromBytes(networkTopicBytes) {\n  if (networkTopicBytes === null || networkTopicBytes.length === 0) {\n    return null;\n  }\n\n  const networkTopicName = DestinationUtil.decodeBytes(networkTopicBytes);\n  return createDestinationFromName(networkTopicName, networkTopicBytes);\n}\n\nconst DestinationFromNetwork = {\n  createDestinationFromBytes,\n  createDestinationFromName,\n};\n\nmodule.exports.DestinationFromNetwork = DestinationFromNetwork;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumerates destination types for destination objects.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst DestinationType = {\n  /**\n   * A Topic destination.\n   */\n  TOPIC:           'topic',\n  /**\n   * A queue destination.\n   */\n  QUEUE:           'queue',\n  /**\n   * A temporary queue destination.\n   */\n  TEMPORARY_QUEUE: 'temporary_queue',\n};\n\nmodule.exports.DestinationType = Enum.new(DestinationType);\n\n/* eslint-disable */\n// Manually demangle these names; bug 70131\nmodule.exports.DestinationType._setCanonical({\n  'TOPIC':           DestinationType.TOPIC,\n  'QUEUE':           DestinationType.QUEUE,\n  'TEMPORARY_QUEUE': DestinationType.TEMPORARY_QUEUE\n});\n/* eslint-enable */\n","const SolclientFactoryLib = require('solclient-factory');\nconst { Convert } = require('solclient-convert');\nconst { DestinationType } = require('./destination-type');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SubscriptionInfo } = require('./subscription-info');\nconst { UUID, StringUtils } = require('solclient-util');\n\nconst { ucs2ToUtf8, utf8ToUcs2 } = Convert;\nconst { ProfileBinding } = SolclientFactoryLib;\n\nconst { toSafeChars, stripNullTerminate } = StringUtils;\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst DESTINATION_PREFIX_FROM_TYPE = {\n  [DestinationType.QUEUE]:           '#P2P/QUE/',\n  [DestinationType.TEMPORARY_QUEUE]: '#P2P/QTMP/',\n};\n\nfunction createTemporaryName(type, vrid, name) {\n  const id = name || UUID.generateUUID();\n  switch (type) {\n    case DestinationType.TOPIC:\n      return `#P2P/TTMP/${vrid}/${id}`;\n    case DestinationType.TEMPORARY_QUEUE:\n      return `#P2P/QTMP/${vrid}/${id}`;\n    default:\n      LOG_ERROR('Unknown/invalid destination type', DestinationType.describe(type));\n  }\n  return undefined;\n}\n\nfunction createPrefix(type) {\n  return DESTINATION_PREFIX_FROM_TYPE[type] || '';\n}\n\nfunction createOperationError(type, errorStr) {\n  return new OperationError(`Invalid ${type}: ${errorStr}`, ErrorSubcode.INVALID_TOPIC_SYNTAX);\n}\n\n// This function validates topics in all code paths -- legacy code paths that relied on validating\n// topics as they were used, and newer code paths that validate Destinations on construction.  We\n// must not add validation here that could break legacy apps that used the deprecated 'new Topic'\n// interface that doesn't perform validation, and subsequently rely on validate-on-use.\n//\n// More strict checks done during Destination construction should be placed in validateAndEncode.\n// @return { error, isWildcarded }.  isWildcarded will not be defined if erorr is defined.\nfunction legacyValidate(type, bytes, name,\n                        exceptionCreator = createOperationError.bind(null, type)) {\n  let error;\n\n  /*\n    * TRB topics can contain any utf-8 character and must be <= 250 bytes\n    * in length.\n    * '*', if present in a level, must be the last character in that level.\n    * May not have empty levels.\n    */\n\n  // Check minimum length using name, since the bytes may include a destination type prefix.\n  // e.g. #P2P/QUE/ should fail on length, not empty level.\n  const nameLength = name.length;\n  if (nameLength < 1) {\n    error = exceptionCreator('Too short (must be >= 1 character).');\n    return { error };\n  }\n\n  // Check maximum length using encoded bytes, since UTF-8 is a variable length encoding.\n  const bytesLength = bytes.length;\n  if (bytesLength > 251) { // null terminator doesn't count\n    error = exceptionCreator(`Too long (encoding must be <= 250 bytes); name is ${\n                             bytesLength - 1} bytes: '${name}'`);\n    return { error };\n  }\n\n  let isWildcarded = false;\n  if (name.charAt(nameLength - 1) === '>') {\n    isWildcarded = true;\n  }\n\n  for (let i = 0; i < nameLength; ++i) {\n    switch (name.charAt(i)) {\n      case '/':\n        if (i === 0 || i === (nameLength - 1) || name.charAt(i - 1) === '/') {\n          error = exceptionCreator(`Empty level(s) in '${name}'@${i}.`);\n          return { error };\n        }\n        break;\n\n      case '*':\n        if ((i < (nameLength - 1)) && (name.charAt(i + 1) !== '/')) {\n          // must not have something other than '/' to the right\n          error = exceptionCreator(`Illegal wildcard(s) in '${name}'@${i}.`);\n          return { error };\n        }\n\n        isWildcarded = true;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  return { isWildcarded };\n}\n\nfunction encodeBytes(bytes) {\n  return ProfileBinding.value.topicUtf8Encode\n    ? `${ucs2ToUtf8(bytes)}\\u0000`\n    : `${bytes}\\u0000`;\n}\n\nfunction decodeBytes(bytes) {\n  return stripNullTerminate(ProfileBinding.value.topicUtf8Encode\n    ? utf8ToUcs2(bytes)\n    : bytes);\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @returns {Object} {bytes, offset, networkName} The result of the encoding.\n *\n * @private\n */\nfunction encode(type, name) {\n  const prefix = createPrefix(type);\n  const offset = prefix.length;\n  const networkName = prefix + name;\n  const bytes = encodeBytes(networkName);\n  return { bytes, offset, networkName };\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {Function} [exceptionCreator=createOperationError] A function to create an exception if an\n *   error is encountered.\n * @returns {Object} {bytes, error, offset, isWildcarded} The result of the encoding and any\n *      validation error\n *\n * @private\n */\nfunction validateAndEncode(type, name, exceptionCreator = createOperationError.bind(null, type)) {\n  const { bytes, offset } = encode(type, name);\n  const { error: constError, isWildcarded } = legacyValidate(type, bytes, name, exceptionCreator);\n  let error = constError;\n  let subscriptionInfo = {};\n  subscriptionInfo.isWildcarded = isWildcarded;\n\n  // If there was no 'legacy' error, perform an additional check to see if the provided name starts\n  // with a reserved prefix.  It shouldn't.  Prefixes should always be added by us by encode().\n  if (!error) {\n    Object.keys(DESTINATION_PREFIX_FROM_TYPE).some((prefixType) => {\n      const prefix = DESTINATION_PREFIX_FROM_TYPE[prefixType];\n      if (!name.startsWith(prefix)) {\n        return false; // keep processing more array elements.\n      }\n\n      error = exceptionCreator(`Reserved prefix '${prefix}' found at start of '${name}'`);\n      return true;\n    });\n  }\n\n  if (!error) {\n    // parse subscription information from destination name\n    const { error: errorConst, subInfo: subInfoConst } =\n      SubscriptionInfo.parseFromName(name, type);\n    error = errorConst;\n    subscriptionInfo = subInfoConst;\n  }\n\n  return { bytes, offset, error, isWildcarded, subscriptionInfo };\n}\n\nconst DestinationUtil = {\n  createPrefix,\n  createTemporaryName,\n  decodeBytes,\n  encode,\n  encodeBytes,\n  legacyValidate,\n  toSafeChars,\n  validateAndEncode,\n};\n\nmodule.exports.DestinationUtil = DestinationUtil;\n","const { DestinationType } = require('./destination-type');\nconst { DestinationUtil } = require('./destination-util');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instances from\n * one of the following:</b>\n * * {@link solace.SolclientFactory.createTopicDestination}\n * * {@link solace.SolclientFactory.createDurableQueueDestination}\n * * {@link solace.MessageConsumer#getDestination}\n * * {@link solace.SDTField#getValue} when {@link solace.SDTField#getType} returns\n *   {@link solace.SDTFieldType.DESTINATION}.\n *\n * Represents a message destination.\n *\n * Publishers can send messages to topics or queues, to which subscribers can subscribe or\n * bind. A Destination specifies the target of such an operation.\n * @hideconstructor\n * @memberof solace\n */\nclass Destination {\n\n  /*\n   * @constructor\n   * @param {String|solace.Destination|Object} spec The name of the destination, or, the\n   *  destination to copy. If this is a {@link solace.Destination} then all other parameters are\n   *  ignored.\n   * @param {solace.DestinationType} [type=solace.DestinationType.Topic] The type of destination\n   *  to create\n   * @deprecated since 10.0 Applications should not call this constructor.\n   *  Use the factory methods on {@link solace.SolclientFactory}.\n   **/\n  constructor(spec, type = DestinationType.TOPIC) {\n    if (typeof spec === 'object') {\n      this._name = spec.name;\n      this._type = spec.type;\n      this._bytes = spec.bytes;\n      this._offset = spec.offset;\n      if (spec.isValidated) {\n        this._isValidated = true;\n        this._isWildcarded = spec.isWildcarded;\n        this._subscriptionInfo = spec.subscriptionInfo || {};\n      } else {\n        this._isValidated = false;\n        this._subscriptionInfo = {};\n      }\n    } else {\n      this._name = spec;\n      this._type = type;\n\n      // Don't validate encoding for deprecated construction path.\n      // This path would have more restrictions now, and it allows\n      // sdkperf a path for arbitrary topic construction.\n      const result = DestinationUtil.encode(type, spec);\n      this._bytes = result.bytes;\n      this._offset = result.offset;\n      this._isValidated = false;\n      this._subscriptionInfo = {};\n    }\n  }\n\n  /**\n   * @returns {String} The destination name specified at creation time.\n   */\n  getName() {\n    return this._name;\n  }\n\n  /**\n   * @type {String}\n   * @readonly\n   */\n  get name() {\n    return this.getName();\n  }\n\n  /**\n   * @returns {solace.DestinationType} The destination type\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * @type {solace.DestinationType}\n   * @readonly\n   */\n  get type() {\n    return this.getType();\n  }\n\n  /**\n   * @returns {String} Returns the null-terminated UTF-8 encoded destination bytes.\n   *\n   * @private\n   */\n  getBytes() {\n    return this._bytes;\n  }\n  get bytes() {\n    return this.getBytes();\n  }\n\n  getOffset() {\n    return this._offset;\n  }\n  get offset() {\n    return this.getOffset();\n  }\n\n  /**\n   * This provides the legacy validation that was done post-creation and is used in some code paths\n   * on use.  It is preferred to use non-deprecated ways of creating destinations, which do\n   * validation on create instead.\n   * @throws OperationError if the destination is not valid.\n   * @private\n   */\n  validate() {\n    if (this._isValidated) {\n      if (this._error) throw this._error;\n      return;\n    }\n\n    const { error, isWildcarded } =\n      DestinationUtil.legacyValidate(this.type, this.bytes, this.name);\n    this._isValidated = true;\n    if (error) {\n      this._error = error;\n      throw error;\n    }\n    this._isWildcarded = isWildcarded;\n  }\n\n  /**\n   * This is really only useful for topics.  If a queue name contains a wildcarded construct, it is\n   * up to the router what to do -- it would either reject it or treat the wildcard as literal.  But\n   * it is included here for all destination types since we have the info.\n   * @returns {Boolean} True if the underlying name represents a wildcarded topic; false otherwise.\n   * @throws {OperationError} If the destination is not valid.\n   * @private\n   */\n  isWildcarded() {\n    this.validate();\n    return this._isWildcarded;\n  }\n\n  /**\n   * @returns {Object} subscriptionInfo object or empty object\n   * @private\n   */\n  getSubscriptionInfo() {\n    return this._subscriptionInfo || {};\n  }\n\n  /**\n   * @returns {String} A generic description of the Destination.\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  /**\n   * @param {*} other The other object for comparison\n   * @returns {Boolean} True if the passed destination is the same\n   * @private\n   */\n  equals(other) {\n    if (!(other instanceof Destination)) {\n      return false;\n    }\n    return (this.toString().valueOf() === other.toString().valueOf());\n  }\n}\n\nmodule.exports.Destination = Destination;\n","const DestinationUtilLib = require('./destination-util');\nconst { assert } = require('solclient-eskit');\nconst { Destination } = require('./destination');\nconst { DestinationType } = require('./destination-type');\n\n/**\n * @classdesc\n * Represents a Queue, which is a type of {@link solace.Destination}.\n *\n * Instances should be acquired through\n * {@link solace.SolclientFactory.createDurableQueueDestination} or by calling\n * {@link solace.MessageConsumer#getDestination} on a consumer bound to a temporary queue.\n *\n * @extends solace.Destination\n * @memberof solace\n * @private\n */\nclass Queue extends Destination {\n\n  /**\n   * @param {Object} spec The spec for this instance\n   * @private\n   */\n  constructor(spec) {\n    assert(spec.name, 'Queue name not supplied');\n    assert(spec.type === DestinationType.QUEUE\n           || spec.type === DestinationType.TEMPORARY_QUEUE, 'Queue spec.type is invalid');\n    assert(spec.bytes, 'Queue spec missing bytes');\n    assert(spec.offset !== undefined, 'Queue spec missing offset');\n    super(spec);\n  }\n\n  getOffset() {\n    return this._offset;\n  }\n  get offset() {\n    return this.getOffset();\n  }\n\n  [util_inspect_custom]() {\n    return `[Queue ${this.getName()}]`;\n  }\n\n  /**\n   * @static\n   * @param {String} queueName The name of the queue (no prefix)\n   * @returns {Queue} a Queue\n   * @private\n   */\n  static createFromLocalName(queueName) {\n    const encoding = DestinationUtilLib.DestinationUtil.validateAndEncode(\n      DestinationType.QUEUE, queueName);\n    if (encoding.error) {\n      throw encoding.error;\n    }\n    return new Queue({\n      name:             queueName,\n      type:             DestinationType.QUEUE,\n      isValidated:      true,\n      bytes:            encoding.bytes,\n      offset:           encoding.offset,\n      isWildcarded:     encoding.isWildcarded,\n      /* probably don't need this until queues get subscription attributes */\n      subscriptionInfo: encoding.subscriptionInfo,\n    });\n  }\n\n}\n\nmodule.exports.Queue = Queue;\n","const { DestinationType } = require('./destination-type');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n/**\n * determines if subscription has the #noexport/ prefix\n *\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {Number} offset The index offset into the name to parse\n * @param {solace.SubscriptionInfo} result The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, index, result} returns the parsing index and result\n *   where the result is a {solace.SubscriptionInfo} that contains information about the\n *   subscription like {Boolean} isNoExport\n * @private\n */\nfunction subscriptionParseNoExport(type, name, bytes, offset, result) {\n  const NOEXPORT_PREFIX = '#noexport/';\n  const NOEXPORT_PREFIX_LEN = NOEXPORT_PREFIX.length;\n  let index = offset;\n  let error;\n  if (name.length - index > NOEXPORT_PREFIX_LEN && !result.isNoExport) {\n    if (name.startsWith(NOEXPORT_PREFIX, index)) {\n      index += NOEXPORT_PREFIX_LEN;\n      result.isNoExport = true;\n    } else {\n      result.isNoExport = false;\n    }\n  } else {\n    result.isNoExport = false;\n  }\n  return { error, index, result };\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {Number} offset The index offset into the name to parse\n * @param {solace.SubscriptionInfo} result The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, index, result} returns the parsing index and result\n *   where the result is a {solace.SubscriptionInfo} that contains information about the\n *   subscription like {Boolean} isShared or {String} shareGroup or {Number}\n *   dispatchTopicIndex\n * @private\n */\nfunction subscriptionParseShare(type, name, bytes, offset,\n                                result, exceptionCreator) {\n  const SHARE_PREFIX = '#share/';\n  const SHARE_PREFIX_LEN = SHARE_PREFIX.length;\n  const LEVEL_DELIMETER = '/';\n  const LEVEL_DELIMETER_LEN = LEVEL_DELIMETER.length;\n  let index = offset;\n  let error;\n  let groupIndex = -1;\n  let shareGroup;\n  if (name.length - index > SHARE_PREFIX_LEN && !result.isShare) {\n    /* parse '#share/' prefix */\n    /*\n     * name starts with '#share/' prefix\n     * and has enough room for at least one character for share group\n     */\n    if (name.startsWith(SHARE_PREFIX, offset)\n        && (name.length - (index + SHARE_PREFIX_LEN)) > LEVEL_DELIMETER_LEN + 1) {\n      index += SHARE_PREFIX_LEN;\n      /* parse share group to next '/' */\n      groupIndex = index;\n      index = name.indexOf(LEVEL_DELIMETER, groupIndex);\n      if (index > 0) {\n        shareGroup = name.substring(groupIndex, index);\n        index += LEVEL_DELIMETER_LEN;\n        result.isShare = true;\n        result.shareGroup = shareGroup;\n        result.dispatchTopicIndex = index;\n      } else {\n        // error\n        error = exceptionCreator(`Illegal share Group in '${name}'@${groupIndex}.`);\n        result.isShare = true;\n      }\n    } else {\n      // not share subscription\n      result.isShare = false;\n    }\n  } else {\n    // not share subscription\n    result.isShare = false;\n  }\n  return { error, index, result };\n}\n\n/**\n * @param {Array.Function} layers The parsing functions executed from 0 to layers.length\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {solace.SubscriptionInfo} subInfo The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, result} returns the parsed information in the SubscriptionInfo\n * object and error, when error is set result's values may be partially set\n * @private\n */\nfunction subscriptionStringParse(layers, type, name, bytes, subInfo, exceptionCreator) {\n  const parseLayers = layers.length || 0;\n  let offset = 0;\n  let error;\n  let result = subInfo || {};\n  for (let i = 0; i < parseLayers; ++i) {\n    const { error: constError, index: constOffset, result: constResult } =\n      layers[i](type, name, bytes, offset, result, exceptionCreator);\n    offset = constOffset;\n    result = constResult;\n    error = constError;\n    if (error) break;\n  }\n  return { error, result };\n}\n\n// Subscription parser map by DestinationType\n// Currently only Topics have subscription information to parse, but more can be added as needed\n// The _layers attribute for the parser defines the order of parsing destination names\n// The _layers are made up of functions that can execute with the signature:\n//   { error, index, result } function funcName(type, name, bytes, result[, exceptionCreator])\n// To add more subscription information parsing add more layers to _layers of the DestinationType\nconst SUBSCRIPTION_LAYER_PARSER_FROM_TYPE = {\n  [DestinationType.TOPIC]: {\n    _layers: [subscriptionParseNoExport, subscriptionParseShare],\n    parse:   function subParse(type, name, bytes, subInfo, exceptionCreator) {\n      const { error, result } =\n        subscriptionStringParse(this._layers, type, name, bytes, subInfo, exceptionCreator);\n      return { error, result };\n    },\n  },\n};\n\nfunction createOperationError(type, errorStr) {\n  return new OperationError(`Invalid ${type}: ${errorStr}`, ErrorSubcode.INVALID_TOPIC_SYNTAX);\n}\n\n/**\n * @classdesc\n * <b> This class is not exposed. This object contains useful subscription information about\n * a {solace.Destination#name}</b>\n * @hideconstructor\n * @memberof solace\n * @private\n */\nclass SubscriptionInfo {\n  /**\n   * @constructor\n   * @param {String} name The name of the destination to be used as a subscription\n   * @private\n   */\n  constructor(name) {\n    this._name = name;\n    // set default values\n    this._isShare = false;\n    this._isNoExport = false;\n    this._dispatchTopicIndex = -1;\n    this._shareGroup = null;\n  }\n\n  /**\n   * @returns {String} The destination name specified at creation time\n   */\n  getName() {\n    return this._name;\n  }\n\n  /**\n   * @returns {String} subscription name\n   * @readonly\n   */\n  get name() {\n    return this.getName();\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#isShare\n   * @type {Boolean}\n   * @description Boolean Flag to indicate the {solace.SubscriptionInfo#name} is a shared\n   * subscription\n   * @default false\n   */\n  get isShare() {\n    return this._isShare;\n  }\n  set isShare(value) {\n    this._isShare = value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#isNoExport\n   * @type {Boolean}\n   * @description Boolean Flag to indicate the {solace.SubscriptionInfo#name} is a no export\n   * subscription\n   * @default false\n   */\n  get isNoExport() {\n    return this._isNoExport;\n  }\n  set isNoExport(value) {\n    this._isNoExport = value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#dispatchTopicIndex\n   * @type {Number}\n   * @description String index of the topic filter after subscription prefixes\n   * @default 0, the whole name as the topic filter\n   */\n  get dispatchTopicIndex() {\n    return this._dispatchTopicIndex < 0 ? 0 : this._dispatchTopicIndex;\n  }\n  set dispatchTopicIndex(value) {\n    this._dispatchTopicIndex = value < 0 ? -1 /* uninitialized*/ : value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#shareGroup\n   * @type {?String}\n   * @description The Share group of a shared subscription, should be null if\n   * {solace.SubscriptionInfo#isShare} is false\n   */\n  get shareGroup() {\n    return this.isShare ? this._shareGroup : null;\n  }\n  set shareGroup(value) {\n    if (this.isShare) {\n      this._shareGroup = value;\n    }\n  }\n\n  /**\n   * @returns {String} A generic description of the SubscriptionInfo\n   */\n  toString() {\n    return util_inspect(this);\n  }\n  /**\n   * @static\n   * @type {Object}\n   * @param {String} name The name of the destination\n   * @param {DestinationType} type The Destination type\n   * @returns {Object} the subscription infomation from the destination name\n   * @private\n   */\n  static parseFromName(name, type = DestinationType.TOPIC) {\n    let subInfo = new SubscriptionInfo(name);\n    let error = null;\n    const parser = SUBSCRIPTION_LAYER_PARSER_FROM_TYPE[type];\n    if (parser) {\n      const { error: errorConst, result: subInfoConst } =\n      parser.parse(type, name, null, subInfo, createOperationError.bind(null, type));\n      subInfo = subInfoConst;\n      error = errorConst;\n    }\n    return { error, subInfo };\n  }\n}\nmodule.exports.SubscriptionInfo = SubscriptionInfo;\n","const DestinationUtilLib = require('./destination-util');\nconst { Destination } = require('./destination');\nconst { DestinationType } = require('./destination-type');\n\n/**\n * @classdesc\n * Represents a Topic, which is a type of {@link solace.Destination}.\n *\n * @extends solace.Destination\n * @memberof solace\n * @deprecated since 10.0 Applications should not directly refer to this type.\n *  {@link solace.Destination} provides the full interface available to topic, and it can be\n *  determined whether the destination represents a topic if {@link solace.Destination#getType}\n *  returns {@link solace.DestinationType.TOPIC}.\n */\nclass Topic extends Destination {\n  /**\n   * @param {Object} spec The topic spec\n   * @private\n   */\n  constructor(spec) {\n    if (typeof spec === 'object') {\n      super({\n        type:             DestinationType.TOPIC,\n        name:             spec.name,\n        bytes:            spec.bytes,\n        offset:           spec.offset,\n        isValidated:      spec.isValidated,\n        isWildcarded:     spec.isWildcarded,\n        subscriptionInfo: spec.subscriptionInfo,\n      });\n    } else {\n      // Deprecated path -- super will do topic encode\n      super(spec, DestinationType.TOPIC);\n    }\n  }\n\n  [util_inspect_custom]() {\n    return `[Topic ${this.getName()}]`;\n  }\n\n  /**\n   * @static\n   * @param {String} topicName The name for the topic\n   * @returns {Topic} the Topic\n   * @private\n   */\n  static createFromName(topicName) {\n    const encoding = DestinationUtilLib.DestinationUtil.validateAndEncode(\n      DestinationType.TOPIC, topicName);\n    if (encoding.error) {\n      throw encoding.error;\n    }\n    return new Topic({\n      name:             topicName,\n      isValidated:      true,\n      bytes:            encoding.bytes,\n      offset:           encoding.offset,\n      isWildcarded:     encoding.isWildcarded,\n      subscriptionInfo: encoding.subscriptionInfo,\n    });\n  }\n}\n\nmodule.exports.Topic = Topic;\n","function apiEnv(envObject) {\n  if (typeof BUILD_ENV !== 'undefined' && !BUILD_ENV.TEST) {\n    throw new Error('Test environment will not override build environment');\n  }\n  global.BUILD_ENV = Object.assign({}, envObject, { TEST: true });\n  return global.BUILD_ENV;\n}\n\nif (typeof BUILD_ENV !== 'undefined' && BUILD_ENV.TEST === false) {\n  apiEnv.target = () => apiEnv();\n} else {\n  const configs = {\n    node: {\n      TARGET_NAME: 'node',\n      TARGET_NODE: true,\n    },\n    browser: {\n      TARGET_NAME:    'browser',\n      TARGET_BROWSER: true,\n    },\n    debug: {\n      MODE_NAME:    'debug',\n      MODE_DEBUG:   true,\n      MODE_RELEASE: false,\n    },\n    release: {\n      MODE_NAME:    'release',\n      MODE_DEBUG:   false,\n      MODE_RELEASE: true,\n    },\n  };\n\n  apiEnv.target = function named(...args) {\n    const objects = args.map((arg) => {\n      if (typeof arg === 'string') {\n        const obj = configs[arg];\n        if (!obj) {\n          throw new Error(`Environment ${arg} is not defined; use ${Object.keys(configs).join(', ')}`);\n        }\n        return obj;\n      } else if (arg && typeof arg === 'object') {\n        return arg;\n      }\n\n      throw new Error(`Unrecognized argument ${arg}`);\n    });\n    return apiEnv(Object.assign(...objects));\n  };\n}\nmodule.exports = apiEnv;\n","const { ErrorResponseSubcodeMapper } = require('./lib/error-response-subcode-mapper');\nconst { ErrorSubcode } = require('./lib/error-subcodes');\nconst { NotImplementedError } = require('./lib/not-implemented-error');\nconst { OperationError } = require('./lib/operation-error');\nconst { RequestError } = require('./lib/request-error');\nconst { RequestEventCode } = require('./lib/request-event-codes');\nconst { SolaceError } = require('./lib/solace-error');\n\nmodule.exports.ErrorResponseSubcodeMapper = ErrorResponseSubcodeMapper;\nmodule.exports.ErrorSubcode = ErrorSubcode;\nmodule.exports.NotImplementedError = NotImplementedError;\nmodule.exports.OperationError = OperationError;\nmodule.exports.RequestError = RequestError;\nmodule.exports.RequestEventCode = RequestEventCode;\nmodule.exports.SolaceError = SolaceError;\n","const { ErrorSubcode } = require('./error-subcodes');\nconst { makeMap } = require('solclient-eskit');\n\n/* eslint-disable max-len */\n\nconst SC = ErrorSubcode;\n\nconst ROOT_MAPPING = makeMap(\n  400, makeMap(\n    'client name parse error', SC.CLIENT_NAME_INVALID,\n    'document is too large', SC.MESSAGE_TOO_LARGE,\n    'inactivity timeout', SC.INACTIVITY_TIMEOUT,\n    'max num subscriptions exceeded', SC.SUBSCRIPTION_TOO_MANY,\n    'message too long', SC.MESSAGE_TOO_LARGE,\n    'nolocal discard', SC.NOLOCAL_DISCARD,\n    'not enough space', SC.OUT_OF_RESOURCES,\n    'subscription already exists', SC.SUBSCRIPTION_ALREADY_PRESENT,\n    'subscription attributes conflict with existing subscription', SC.SUBSCRIPTION_ATTRIBUTES_CONFLICT,\n    'subscription not found', SC.SUBSCRIPTION_NOT_FOUND,\n    'subscription parse error', SC.SUBSCRIPTION_INVALID,\n    'topic parse error', SC.INVALID_TOPIC_SYNTAX,\n    'unknown transport session identifier', SC.UNKNOWN_TRANSPORT_SESSION_ID,\n    'xml parse error', SC.XML_PARSE_ERROR,\n    'unsupported ssl downgrade value', SC.LOGIN_FAILURE\n  ),\n  401, makeMap(\n    '', SC.LOGIN_FAILURE\n  ),\n  403, makeMap(\n    'basic authentication is shutdown', SC.BASIC_AUTHENTICATION_IS_SHUTDOWN,\n    'client certificate authentication is shutdown', SC.CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN,\n    'client name already in use', SC.CLIENT_NAME_ALREADY_IN_USE,\n    'client username is shutdown', SC.CLIENT_USERNAME_IS_SHUTDOWN,\n    'dynamic clients not allowed', SC.DYNAMIC_CLIENTS_NOT_ALLOWED,\n    'invalid virtual router address', SC.INVALID_VIRTUAL_ADDRESS,\n    'forbidden', SC.CLIENT_ACL_DENIED,\n    'message vpn not allowed', SC.MESSAGE_VPN_NOT_ALLOWED,\n    'publish acl denied', SC.PUBLISH_ACL_DENIED,\n    'replication is standby', SC.REPLICATION_IS_STANDBY,\n    'selector does not match', SC.SELECTOR_DOES_NOT_MATCH,\n    'subscription acl denied', SC.SUBSCRIPTION_ACL_DENIED,\n    'subscription does not match', SC.SUBSCRIPTION_DOES_NOT_MATCH,\n    'compression is shutdown', SC.LOGIN_FAILURE,\n    'shared subscriptions not supported on topic endpoints', SC.SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED,\n    'shared subscriptions not supported on queues', SC.SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED,\n    'shared subscription permission denied', SC.SHARED_SUBSCRIPTIONS_NOT_ALLOWED\n  ),\n  404, makeMap(\n    '', SC.LOGIN_FAILURE\n  ),\n  503, makeMap(\n    'low priority msg congestion', SC.LOW_PRIORITY_MSG_CONGESTION,\n    'message vpn unavailable', SC.MESSAGE_VPN_UNAVAILABLE,\n    'replication is standby', SC.REPLICATION_IS_STANDBY,\n    'service unavailable', SC.GM_UNAVAILABLE,\n    'spool over quota', SC.SPOOL_OVER_QUOTA,\n    'subscriber delete in progress', SC.CLIENT_DELETE_IN_PROGRESS,\n    'too many clients', SC.TOO_MANY_CLIENTS,\n    'too many connections for vpn', SC.TOO_MANY_CLIENTS,\n    'max message usage exceeded', SC.MAX_MESSAGE_USAGE_EXCEEDED\n  ),\n  507, makeMap(\n    'ad not ready', SC.GM_NOT_READY\n  )\n);\n\nconst AD_MAPPING = makeMap(\n  'PARENT', ROOT_MAPPING,\n  400, makeMap(\n    'already bound', SC.ALREADY_BOUND,\n    'endpoint already exists', SC.ENDPOINT_ALREADY_EXISTS,\n    'subscription already exists', SC.SUBSCRIPTION_ALREADY_PRESENT,\n    'already exists', SC.ENDPOINT_ALREADY_EXISTS,\n    'endpoint property mismatch', SC.ENDPOINT_PROPERTY_MISMATCH,\n    'invalid durable topic endpoint name', SC.INVALID_DTE_NAME,\n    'invalid selector', SC.INVALID_SELECTOR,\n    'invalid topic name', SC.INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT,\n    'queue not found', SC.QUEUE_NOT_FOUND,\n    'quota out of range', SC.QUOTA_OUT_OF_RANGE,\n    'unknown flow name', SC.UNKNOWN_FLOW_NAME,\n    'unsubscribe not allowed', SC.UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND\n  ),\n  403, makeMap(\n    'permission not allowed', SC.PERMISSION_NOT_ALLOWED,\n    'client initiated replay not allowed on non-exclusive topic endpoint', SC.CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED,\n    'client initiated replay not allowed on non-exclusive queue', SC.CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED,\n    'client initiated replay from inactive flow not allowed', SC.CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED,\n    'client initiated replay from browser flow not allowed', SC.CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED,\n    'replay not supported on temporary topic endpoint', SC.REPLAY_TEMPORARY_NOT_SUPPORTED,\n    'replay not supported on temporary queue', SC.REPLAY_TEMPORARY_NOT_SUPPORTED,\n    'unknown start location type', SC.UNKNOWN_START_LOCATION_TYPE,\n    'mismatched endpoint error id', SC.MISMATCHED_ENDPOINT_ERROR_ID,\n    'replay start message unavailable', SC.REPLAY_START_MESSAGE_NOT_AVAILABLE\n  ),\n  503, makeMap(\n    'durable topic endpoint shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'endpoint shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'max clients exceeded for durable topic endpoint', SC.MAX_CLIENTS_FOR_TE,\n    'max clients exceeded for queue', SC.MAX_CLIENTS_FOR_QUEUE,\n    'no more non-durable queue or topic endpoint', SC.NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT,\n    'no subscription match', SC.NO_SUBSCRIPTION_MATCH,\n    'queue shutdown', SC.QUEUE_SHUTDOWN,\n    'te shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'unknown durable topic endpoint', SC.UNKNOWN_TOPIC_ENDPOINT_NAME,\n    'unknown queue', SC.UNKNOWN_QUEUE_NAME,\n    'replay disabled', SC.REPLAY_DISABLED,\n    'replay cancelled', SC.REPLAY_CANCELLED,\n    'replay message unavailable', SC.REPLAY_MESSAGE_UNAVAILABLE,\n    'replay started', SC.REPLAY_STARTED,\n    'replayed message rejected by topic endpoint', SC.REPLAY_MESSAGE_REJECTED,\n    'replayed message rejected by queue\"', SC.REPLAY_MESSAGE_REJECTED,\n    'replay log modified', SC.REPLAY_LOG_MODIFIED,\n    'mismatched endpoint error id', SC.MISMATCHED_ENDPOINT_ERROR_ID,\n    'out of replay resources', SC.OUT_OF_REPLAY_RESOURCES,\n    'topic or selector modified on durable topic endpoint', SC.TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT,\n    'replay failed', SC.REPLAY_FAILED,\n    'replay start time not available', SC.REPLAY_START_TIME_NOT_AVAILABLE,\n    'replay start message unavailable', SC.REPLAY_START_MESSAGE_NOT_AVAILABLE\n  )\n);\n\nfunction getSubcodeMappingInner(root, respErrorCode, respStr) {\n  if (respErrorCode === 200) {\n    // success response, error subcode is 0 -  transport session use 0 as OK\n    return 0;\n  }\n  const codeMap = root[respErrorCode] || {};\n  const searchKey = (respStr || '').toLowerCase();\n  const foundKey = Object.keys(codeMap)\n    .find(mapKey => mapKey === searchKey || searchKey.indexOf(mapKey) >= 0);\n\n  if (foundKey) {\n    return codeMap[foundKey];\n  }\n\n  if (codeMap['']) {\n    return codeMap[''];\n  }\n\n  /* eslint-disable dot-notation */\n  // Don't access string keys via dot properties\n  if (root['PARENT']) {\n    return getSubcodeMappingInner(root['PARENT'], respErrorCode, respStr);\n  }\n  /* eslint-enable dot-notation */\n\n  return undefined;\n}\n\nfunction getSubcodeMapping(root, respErrorCode, respStr) {\n  const result = getSubcodeMappingInner(root, respErrorCode, respStr);\n  if (result === undefined) {\n    return SC.UNKNOWN_ERROR;\n  }\n  return result;\n}\n\n/**\n * @classdesc\n * Return {ErrorSubcode} based on response code and response string\n * from the router.\n * @private\n */\nconst ErrorResponseSubcodeMapper = {\n  /**\n   * @param {Number} respErrorCode The response code (an HTTP-like integer) to use in the lookup.\n   * @param {String} respStr The response string to use in the lookup.\n   * @returns {solace.ErrorSubcode} The subcode found, or ErrorSubcode.UNKNOWN_ERROR if not found.\n   * @static\n   * @private\n   */\n  getErrorSubcode(respErrorCode, respStr) {\n    return getSubcodeMapping(ROOT_MAPPING, respErrorCode, respStr);\n  },\n\n  getADErrorSubcode(respErrorCode, respStr) {\n    return getSubcodeMapping(AD_MAPPING, respErrorCode, respStr);\n  },\n};\n\nmodule.exports.ErrorResponseSubcodeMapper = ErrorResponseSubcodeMapper;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Defines an error subcode enumeration which is returned as a property of\n * the errors/exceptions thrown by the API. The subcode provides more detailed\n * error information.\n *\n * The following subcodes can apply to error responses resulting from\n * any API method.\n * * {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}\n * * {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n * * {@link solace.ErrorSubcode.INTERNAL_ERROR}\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst ErrorSubcode = {\n  /////////////\n  // SESSION //\n  /////////////\n  /**\n   * Errors that do not have a proper subcode.\n   */\n  UNKNOWN_ERROR:                                 0xFFFFFFFF,\n  /**\n   * No error is associated with this event.\n   */\n  NO_ERROR:                                      0,\n  /**\n   * The session is already connected.\n   */\n  // SESSION_ALREADY_CONNECTED: 1,\n  /**\n   * The session is not connected.\n   */\n  SESSION_NOT_CONNECTED:                         2,\n  /**\n   * The performed session operation is invalid given the state\n   * or configuration of the session.\n   * @deprecated Use {@link solace.ErrorSubCode.INVALID_OPERATION}\n   */\n  INVALID_SESSION_OPERATION:                     3,\n  /**\n   * The performed session operation is invalid given the state\n   * or configuration of the session.\n   */\n  INVALID_OPERATION:                             3,\n  /**\n   * An API call failed due to a timeout.\n   */\n  TIMEOUT:                                       4,\n  /////////////////\n  // MESSAGE VPN //\n  /////////////////\n  /**\n   * The Message VPN name configured for the session does not exist.\n   *\n   * Causes:\n   *  * 403 Message VPN Not Allowed\n   */\n  MESSAGE_VPN_NOT_ALLOWED:                       5,\n  /**\n   * The Message VPN name set for the session (or the default VPN if none\n   * was set) is currently shutdown on the router.\n   *\n   * Causes:\n   *  * 503 Message VPN Unavailable\n   */\n  MESSAGE_VPN_UNAVAILABLE:                       6,\n  ////////////\n  // CLIENT //\n  ////////////\n  /**\n   * The username for the client is administratively shutdown\n   * on the router.\n   *\n   * Causes:\n   *  * 403 Client Username Is Shutdown\n   */\n  CLIENT_USERNAME_IS_SHUTDOWN:                   7,\n  /**\n   * The username for the session has not been set and dynamic\n   * clients are not allowed.\n   *\n   * Causes:\n   *  * 403 Dynamic Clients Not Allowed\n   */\n  DYNAMIC_CLIENTS_NOT_ALLOWED:                   8,\n  /**\n   * The session is attempting to use a client name that is\n   * in use by another client, and the router is configured to reject the\n   * new session.\n   * A client name cannot be used by multiple clients in the same Message\n   * VPN.\n   *\n   * Causes:\n   *  * 403 Client Name Already In Use\n   */\n  CLIENT_NAME_ALREADY_IN_USE:                    9,\n  /**\n   * The client name chosen has been rejected as invalid by the router.\n   *\n   * Causes:\n   *  * 400 Client Name Parse Error\n   */\n  CLIENT_NAME_INVALID:                           10,\n  /**\n   * The client login is not currently possible because a previous\n   * instance of same client was being deleted.\n   *\n   * Causes:\n   *  * 503 Subscriber Delete In Progress\n   */\n  CLIENT_DELETE_IN_PROGRESS:                     11,\n  /**\n   * The client login is not currently possible because the maximum\n   * number of active clients on router has already been reached.\n   *\n   * Causes:\n   *  * 503 Too Many Clients\n   *  * 503 Too Many Connections for VPN\n   */\n  TOO_MANY_CLIENTS:                              12,\n  /**\n   * The client could not log into the router.\n   *\n   * Causes:\n   *  * 401 error codes\n   *  * 404 error codes\n   *  * Failed to send a session setup message in the transport.\n   */\n  LOGIN_FAILURE:                                 13,\n  //////////\n  // VRID //\n  //////////\n  /**\n   * An attempt was made to connect to the wrong IP address on\n   * the router (must use CVRID if configured), or the router CVRID has\n   * changed and this was detected on reconnect.\n   *\n   * Causes:\n   *  * 403 Invalid Virtual Router Address\n   */\n  INVALID_VIRTUAL_ADDRESS:                       14,\n  /////////\n  // ACL //\n  /////////\n  /**\n   * The client login to the router was denied because the\n   * IP address/netmask combination used for the client is designated in the\n   * ACL (Access Control List) profile associated with that client.\n   *\n   * Causes:\n   *  * 403 Forbidden\n   */\n  CLIENT_ACL_DENIED:                             15,\n  /**\n   * Adding a subscription was denied because it matched a\n   * subscription that was defined as denied on the ACL (Access Control List)\n   * profile associated with the client.\n   *\n   * Causes:\n   *  * 403 Subscription ACL Denied\n   */\n  SUBSCRIPTION_ACL_DENIED:                       16,\n  /**\n   * A message could not be published because its topic matched\n   * a topic defined as denied on the ACL (Access Control List) profile\n   * associated with the client.\n   *\n   * Causes:\n   *  * 403 Publish ACL Denied\n   */\n  PUBLISH_ACL_DENIED:                            17,\n  ////////////////\n  // VALIDATION //\n  ////////////////\n  /**\n   * An API call was made with an out-of-range parameter.\n   */\n  PARAMETER_OUT_OF_RANGE:                        18,\n  /**\n   * An API call was made with a parameter combination\n   * that is not valid.\n   */\n  PARAMETER_CONFLICT:                            19,\n  /**\n   * An API call was made with a parameter of incorrect type.\n   */\n  PARAMETER_INVALID_TYPE:                        20,\n  //////////////////\n  // FATAL ERRORS //\n  //////////////////\n  /**\n   *  An API call had an internal error (not an application fault).\n   */\n  INTERNAL_ERROR:                                21,\n  /**\n   * An API call failed due to insufficient space in the transport\n   * buffer to accept more data,\n   * or due to exhaustion of the Guaranteed Messaging Window on a publisher.\n   * After an insufficient space error of either kind, the\n   * listeners on the {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}\n   * event are notified when it is possible to retry the failed operation.\n   */\n  INSUFFICIENT_SPACE:                            22,\n  /**\n   * The message router has rejected the request. All available\n   * resources of the requested type are in use.\n   *\n   * Causes:\n   *  * 400 Not Enough Space\n   */\n  OUT_OF_RESOURCES:                              23,\n  /**\n   * An API call failed due to a protocol error with the router\n   * (not an application fault).\n   */\n  PROTOCOL_ERROR:                                24,\n  /**\n   * An API call failed due to a communication error. This typically indicates the\n   * transport connection to the message router has been unexpectedly closed.\n   */\n  COMMUNICATION_ERROR:                           25,\n  ////////////////\n  // KEEP ALIVE //\n  ////////////////\n  /**\n   * The session keep-alive detected a failed session.\n   */\n  KEEP_ALIVE_FAILURE:                            26,\n  /////////////////////\n  // MESSAGE RELATED //\n  /////////////////////\n  /**\n   * An attempt was made to use a topic which is longer\n   * than the maximum that is supported.\n   */\n  // TOPIC_TOO_LARGE: 27,\n  /**\n   * A send call was made that did not have a topic in a mode\n   * where one is required (for example, client mode).\n   */\n  TOPIC_MISSING:                                 28,\n  /**\n   *  An attempt was made to send a message with a total\n   * size greater than that supported by the protocol. (???)\n   */\n  //  MAX_TOTAL_MSGSIZE_EXCEEDED: 29,\n  /**\n   * An attempt was made to send a message with user data larger\n   * than the maximum that is supported.\n   */\n  // USER_DATA_TOO_LARGE: 30,\n  /**\n   * An attempt was made to use a topic which has a syntax that\n   * is not supported.\n   *\n   * Causes:\n   *  * 400 Topic Parse Error\n   */\n  INVALID_TOPIC_SYNTAX:                          31,\n  /**\n   * The client attempted to send a message larger than that\n   * supported by the router.\n   *\n   * Causes:\n   *  * 400 Document Is Too Large\n   *  * 400 Message Too Long\n   */\n  MESSAGE_TOO_LARGE:                             32,\n  /**\n   * The router could not parse an XML message.\n   *\n   * Causes:\n   *  * 400 XML Parse Error\n   */\n  XML_PARSE_ERROR:                               33,\n  ///////////////////\n  // SUBSCRIPTIONS //\n  ///////////////////\n  /**\n   * The client attempted to add a subscription that already\n   * exists. This subcode is only returned if the session property\n   * 'IgnoreDuplicateSubscriptionError' is not enabled.\n   *\n   * Causes:\n   * 400 Subscription Already Exists)\n   */\n  SUBSCRIPTION_ALREADY_PRESENT:                  34,\n  /**\n   * The client attempted to remove a subscription which did not exist.\n   * This subcode is only returned if the session property\n   * 'IgnoreDuplicateSubscriptionError' is not enabled.\n   *\n   * Causes:\n   * 400 Subscription Not Found)\n   */\n  SUBSCRIPTION_NOT_FOUND:                        35,\n  /**\n   * The client attempted to add/remove a subscription that\n   * is not valid.\n   *\n   * Causes:\n   *  * 400 Subscription Parse Error\n   */\n  SUBSCRIPTION_INVALID:                          36,\n  /**\n   * The router rejected a subscription add or remove request\n   * for a reason not separately enumerated.\n   */\n  SUBSCRIPTION_ERROR_OTHER:                      37,\n  /**\n   * The client attempted to add a subscription that\n   * exceeded the maximum number allowed.\n   *\n   * Causes:\n   *  * 400 Max Num Subscriptions Exceeded\n   */\n  SUBSCRIPTION_TOO_MANY:                         38,\n  /**\n   *  The client attempted to add a subscription which already\n   * exists but it has different properties.\n   *\n   * Causes:\n   *  * 400 Subscription Attributes Conflict With Existing Subscription\n   */\n  SUBSCRIPTION_ATTRIBUTES_CONFLICT:              39,\n  /**\n   * The client attempted to establish a session with No Local\n   * enabled and the capability is not supported by the router.\n   */\n  NO_LOCAL_NOT_SUPPORTED:                        40,\n  ////////////////////\n  // UNKNOWN ERRORS //\n  ////////////////////\n  /**\n   * The router rejected a control message for another reason\n   * not separately enumerated.\n   */\n  // CONTROL_ERROR_OTHER: 41,\n  /**\n   * The router rejected a data message for a reason\n   * not separately enumerated.\n   */\n  DATA_ERROR_OTHER:                              42,\n  //////////////////////\n  // TRANSPORT ERRORS //\n  //////////////////////\n  /**\n   * Failed to create the HTTP connection.\n   */\n  CREATE_XHR_FAILED:                             43,\n  /**\n   * Failed to create the transport.\n   */\n  CONNECTION_ERROR:                              44,\n  /**\n   * Failed to decode the data.\n   */\n  DATA_DECODE_ERROR:                             45,\n  /**\n   * @deprecated\n   * The session was inactive for too long.\n   *\n   * Causes:\n   * * 400 Inactivity Timeout\n   */\n  INACTIVITY_TIMEOUT:                            46,\n  /**\n   * @deprecated\n   * The router does not know this session's identifier.\n   *\n   * Causes:\n   * * 400 Unknown Transport Session Identfier\n   */\n  UNKNOWN_TRANSPORT_SESSION_ID:                  47,\n  /**\n   * @deprecated This subcode is not used since 10.0.0.\n   * Guaranteed Messages (with a delivery mode other than DIRECT) are not supported.\n   */\n  AD_MESSAGING_NOT_SUPPORTED:                    48,\n  /**\n   * @deprecated\n   * Creating the WebSocket transport failed.\n   */\n  CREATE_WEBSOCKET_FAILED:                       49,\n  /**\n   * An attempt to perform an operation using a VPN that is configured to be\n   * STANDBY for replication.\n   *\n   * Causes:\n   * * 403 Replication Is Standby\n   */\n  REPLICATION_IS_STANDBY:                        50,\n  ////////////////////\n  // Authentication //\n  ////////////////////\n  /**\n   * Basic authentication is administratively shut down on the\n   * router.\n   *\n   * Causes:\n   *  * 403 Basic Authentication is Shutdown\n   */\n  BASIC_AUTHENTICATION_IS_SHUTDOWN:              51,\n  /**\n   * Client certificate authentication is administratively\n   * shut down on the router.\n   *\n   * Causes:\n   *  * 403 Client Certificate Authentication Is Shutdown\n   */\n  CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN: 52,\n  //////////////////////\n  // Guaranteed Messaging //\n  //////////////////////\n  /**\n   * Guaranteed Messaging services are not enabled on the router.\n   *\n   * Causes:\n   *  * 503 Service Unavailable\n   */\n  GM_UNAVAILABLE:                                100,\n  /**\n   * The session attempted to connect to a Guaranteed Message Publisher\n   * that does not exist on this router.\n   * All unacked messages held by the API are renumbered and redelivered. This subCode\n   * is handled internally and will not be seen by the application. After successfully\n   * renumbereing and redelivering the messages, if any messages are resent, listeners\n   * on the @{link solace.SessionEventCode#event:REPUBLISHING_UNACKED_MESSAGES} event are\n   * invoked.\n   *\n   * Causes:\n   * * 400 Unknown Flow Name\n   * @private\n   */\n  UNKNOWN_FLOW_NAME:                             111,\n  /**\n   * Already bound to the Queue or not authorized to bind to the Queue.\n   *\n   * Causes:\n   *  * 400 Already Bound\n   */\n  ALREADY_BOUND:                                 112,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Topic Endpoint with an\n   * invalid topic.\n   *\n   * Causes:\n   *  * 400 Invalid Topic Name\n   */\n  INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT:         113,\n  /**\n   * An attempt was made to bind to an unknown Queue name (for example, not\n   * configured on the router).\n   *\n   * Causes:\n   *  * 503 Unknown Queue\n   */\n  UNKNOWN_QUEUE_NAME:                            114,\n  /**\n   * An attempt was made to perform an operation on an unknown Guaranteed Messaging\n   * Topic Endpoint name (for example, not configured on router).\n   *\n   * Causes:\n   *  * 503 Unknown Durable Topic Endpoint\n   */\n  UNKNOWN_TOPIC_ENDPOINT_NAME:                   115,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Queue that has already reached\n   * its maximum number of clients.\n   *\n   * Causes:\n   *  * 503 Max clients exceeded for Queue\n   */\n  MAX_CLIENTS_FOR_QUEUE:                         116,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Topic Endpoint that has already\n   * reached its maximum number of clients.\n   *\n   * Causes:\n   *  * 503 Max clients exceeded for durable Topic Endpoint\n   */\n  MAX_CLIENTS_FOR_TE:                            117,\n  /**\n   * An unexpected unbind response was received for a Guaranteed Messaging Queue or Topic\n   * Endpoint (for example, the Queue or Topic Endpoint was deleted from the router).\n   */\n  UNEXPECTED_UNBIND:                             118,\n  /**\n   * The specified Guaranteed Messaging Queue was not found when publishing a message.\n   *\n   * Causes:\n   *  * 400 Queue Not Found\n   */\n  QUEUE_NOT_FOUND:                               119,\n  /**\n   * Message was not delivered because the Guaranteed Message spool is over its\n   * allotted space quota.\n   *\n   * Causes:\n   *  * 503 Spool Over Quota\n   */\n  SPOOL_OVER_QUOTA:                              120,\n  /**\n   * An attempt was made to operate on a shutdown Guaranteed Messaging queue.\n   *\n   * Causes:\n   *  * 503 Queue Shutdown\n   */\n  QUEUE_SHUTDOWN:                                121,\n  /**\n   * An attempt was made to operate on a shutdown Guaranteed Messaging Topic Endpoint.\n   *\n   * Causes:\n   *  * 503 Durable Topic Endpoint Shutdown\n   *  * 503 TE Shutdown\n   *  * 503 Endpoint Shutdown\n   */\n  TOPIC_ENDPOINT_SHUTDOWN:                       122,\n  /**\n   * An attempt was made to bind to a non-durable Guaranteed Messaging Queue or Topic\n   * Endpoint, and the router is out of resources.\n   *\n   * Causes:\n   *  * 503 No More Non-Durable Queue or Topic Endpoint\n   */\n  NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT:   123,\n  /**\n   * An attempt was made to create a Queue or Topic Endpoint that already exists.\n   * This subcode is only returned if\n   * {@link solace.SessionProperties.ignoreProvisionEndpointExists} was not set for the current\n   * session.\n   *\n   * Causes:\n   *  * 400 Endpoint Already Exists\n   */\n  ENDPOINT_ALREADY_EXISTS:                       124,\n  /**\n   * An attempt was made to delete or create a Queue or Topic Endpoint when the\n   * Session does not have authorization for the action. This subcode is also returned when an\n   * attempt is made to remove a message from an endpoint when the Session does not have 'consume'\n   * authorization, or when an attempt is made to add or remove a Topic subscription from a Queue\n   * when the Session does not have 'modify-topic' authorization.\n   *\n   * Causes:\n   *  * 403 Permission Not Allowed\n   */\n  PERMISSION_NOT_ALLOWED:                        125,\n  /**\n   * An attempt was made to bind to a Queue or Topic Endpoint with an invalid\n   * selector.\n   *\n   * Causes:\n   *  * 400 Invalid Selector\n   */\n  INVALID_SELECTOR:                              126,\n  /**\n   * Publishing the message was denied due to exceeding the maximum spooled message\n   * count.\n   *\n   * Causes:\n   *  * 503 Max message usage exceeded\n   */\n  MAX_MESSAGE_USAGE_EXCEEDED:                    127,\n  /**\n   * An attempt was made to create a dynamic durable endpoint, and it was found to\n   * exist with different properties.\n   *\n   * Causes:\n   *  * 400 Endpoint Property Mismatch\n   */\n  ENDPOINT_PROPERTY_MISMATCH:                    128,\n  /**\n   * The client attempted to publish an Guaranteed Messaging message to a topic that\n   * did not have any guaranteed subscription matches, or only matched a replicated topic.\n   *\n   * Causes:\n   *  * 503 No Subscription Match\n   */\n  NO_SUBSCRIPTION_MATCH:                         129,\n  /**\n   * The application attempted to acknowledge a message that arrived via a delivery\n   * mode that does not allow acknowledgements.\n   */\n  MESSAGE_DELIVERY_MODE_MISMATCH:                130,\n  /**\n   * The message was already acknowledged.\n   */\n  MESSAGE_ALREADY_ACKNOWLEDGED:                  131,\n  /**\n   * The API-supplied subscription did not match when attempting to bind to a\n   * non-exclusive durable topic endoint.\n   *\n   * Causes:\n   *  * 403 Subscription Does Not Match\n   */\n\n  SUBSCRIPTION_DOES_NOT_MATCH:                       133,\n  /**\n   * The API-supplied selector did not match when attempting to bind to a\n   * non-exclusive durable topic endpoint.\n   *\n   * Causes:\n   *  * 403 Selector Does Not Match\n   */\n  SELECTOR_DOES_NOT_MATCH:                           134,\n  /**\n   * The subscriber has provided an incorrectly formatted durable topic endpoint name.\n   *\n   * Causes:\n   *  * 400 Invalid Durable Topic Endpoint Name\n   */\n  INVALID_DTE_NAME:                                  135,\n  /**\n   * The unsubscribe request was denied by the router because the durable topic endpoint\n   * had one or more clients bound.\n   *\n   * Causes:\n   *  * 400 Unsubscribe Not Allowed, Client(s) Bound To DTE\n   */\n  UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND:             136,\n  /**\n   * An application callback threw an error back to the API. The reason property describes\n   * the error that occurred.\n   */\n  CALLBACK_ERROR:                                    137,\n  /**\n   * A published message was discarded by the router because it will not be published\n   * anywhere based on the NoLocal properties. This can be considered normal.\n   *\n   * Causes:\n   * * 400 Nolocal Discard\n   */\n  NOLOCAL_DISCARD:                                   138,\n  /**\n   * The operation is delayed because Guaranteed Messaging is not ready on the router.\n   *\n   * Causes:\n   * 507 Ad Not Ready\n   */\n  GM_NOT_READY:                                      140,\n  /**\n   * The message was rejected because one or more matching endpoints'\n   * reject-low-priority-msg-limit was exceeded.\n   *\n   * Causes:\n   * * 503 Low Priority Msg Congestion\n   */\n  LOW_PRIORITY_MSG_CONGESTION:                       141,\n  /**\n   * The specified endpoint quota was out of range.\n   *\n   * Causes:\n   * 400 Quota Out Of Range\n   */\n  QUOTA_OUT_OF_RANGE:                                142,\n  /**\n   * Unable to load the certificate from the TrustStore for a SSL\n   * secured session.\n   */\n  FAILED_LOADING_TRUSTSTORE:                         143,\n  /**\n   * The client failed to load certificate and/or private key files.\n   */\n  FAILED_LOADING_CERTIFICATE_AND_KEY:                144,\n  /**\n   * DNS resolution failed for all hostnames.\n   */\n  UNRESOLVED_HOSTS:                                  145,\n  /**\n   * Replay is not supported on the Solace Message Router\n   */\n  REPLAY_NOT_SUPPORTED:                              146,\n  /**\n   *  Replay is not enabled in the message-vpn\n   */\n  REPLAY_DISABLED:                                   147,\n  /**\n   *  The client attempted to start replay on a flow bound to a non-exclusive endpoint\n   */\n  CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED: 148,\n  /**\n   *  The client attempted to start replay on an inactive flow\n   */\n  CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED: 149,\n  /**\n   *  N/A - Browser Flows are not supported.\n   */\n  CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED:  150,\n  /**\n   *  Replay is not supported on temporary endpoints\n   */\n  REPLAY_TEMPORARY_NOT_SUPPORTED:                    151,\n  /**\n   *  The client attempted to start a replay but provided an unknown start location type.\n   */\n  UNKNOWN_START_LOCATION_TYPE:                       152,\n  /**\n   *  A replay in progress on a flow was administratively cancelled, causing the flow to be unbound\n   */\n  REPLAY_CANCELLED:                                  153,\n  /**\n   *  A replay in progress on a flow failed because messages to be replayed were trimmed\n   *  from the replay log\n   */\n  REPLAY_MESSAGE_UNAVAILABLE:                        154,\n  /**\n   *  A replay was requested but the requested start time is not available in the replay log\n   */\n  REPLAY_START_TIME_NOT_AVAILABLE:                   155,\n  /**\n   *  The Solace Message Router attempted to replay a message, but the queue/topic\n   *  endpoint rejected the message to the sender\n   */\n  REPLAY_MESSAGE_REJECTED:                           156,\n  /**\n   *  A replay in progress on a flow failed because the replay log was modified\n   */\n  REPLAY_LOG_MODIFIED:                               157,\n  /**\n   * Endpoint error ID in the bind request does not match the endpoint's error ID.\n   */\n  MISMATCHED_ENDPOINT_ERROR_ID:                      158,\n  /**\n   * A replay was requested, but the router does not have sufficient resources\n   * to fulfill the request, due to too many active replays.\n   */\n  OUT_OF_REPLAY_RESOURCES:                           159,\n\n  /**\n   * A replay was in progress on a Durable Topic Endpoint (DTE)\n   * when its topic or selector was modified, causing the replay to fail.\n   */\n  TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT: 160,\n  /**\n   *  A replay in progress on a flow failed\n   */\n  REPLAY_FAILED:                                        161,\n  /**\n   *  A replay was started on the queue or DTE, either by another client or by the router.\n   */\n  REPLAY_STARTED:                                       162,\n  /**\n   * Router does not support Compressed TLS\n   */\n  COMPRESSED_TLS_NOT_SUPPORTED:                         163,\n  /**\n   * The client attempted to add a shared subscription, but the capability is not supported\n   * by the appliance.\n   */\n  SHARED_SUBSCRIPTIONS_NOT_SUPPORTED:                   164,\n  /**\n   * The client attempted to add a shared subscription on a client that is not permitted to\n   * use shared subscriptions.\n   */\n  SHARED_SUBSCRIPTIONS_NOT_ALLOWED:                     165,\n  /**\n   * The client attempted to add a shared subscription to a queue or topic endpoint.\n   */\n  SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED:            166,\n  /**\n   * A replay was requested but the requested start message is not available in the replay log.\n   */\n  REPLAY_START_MESSAGE_NOT_AVAILABLE:                   167,\n  /**\n   * Replication Group Message Id are not comparable.\n   * Messages must be published to the same broker or HA pair for their Replicaton Group\n   * Message Id to be comparable.\n   */\n  MESSAGE_ID_NOT_COMPARABLE:                            168,\n};\n\nmodule.exports.ErrorSubcode = Enum.new(ErrorSubcode);\n","const { SolaceError } = require('./solace-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * An error thrown when calling an API that has not been implemented.\n * @hideconstructor\n * @extends {solace.SolaceError}\n *\n * @memberof solace\n */\nclass NotImplementedError extends SolaceError {\n  /*\n   * Creates an instance of NotImplementedError.\n   * @param {any} message The message to include in the error.\n   * @memberof NotImplementedError\n   */\n  constructor(message) {\n    super('NotImplementedError', message || '', NotImplementedError);\n  }\n  /**\n   * The name of the error.\n   * @name solace.NotImplementedError#name\n   * @type {String}\n   * @readonly\n   * @description 'NotImplementedError'\n   */\n}\n\nmodule.exports.NotImplementedError = NotImplementedError;\n\n","const { SolaceError } = require('./solace-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * An error thrown by the API when an operational error is encountered.\n * @memberof solace\n * @extends {solace.SolaceError}\n * @hideconstructor\n */\nclass OperationError extends SolaceError {\n\n  /*\n   * @constructor\n   * @param {String} message The message to include in the error.\n   * @param {Number} [subcode] The subcode. See {@link ErrorSubcode} for valid values\n   * @param {Object} [reason] Embedded error or exception (optional)\n   */\n  constructor(message, subcode, reason) {\n    /**\n     * The name of the error.\n     * @name solace.OperationError#name\n     * @type {String}\n     * @readonly\n     * @description 'OperationError'\n     */\n    super('OperationError', message, OperationError);\n    /**\n     * The subcode for the error. @see {@link solace.ErrorSubcode}\n     * @name solace.OperationError#subcode\n     * @type {solace.ErrorSubcode}\n     */\n    this.subcode = subcode;\n    /**\n     * The reason for the error: an embedded error object or exception.\n     * @name solace.OperationError#reason\n     * @type {Object}\n     */\n    this.reason = reason;\n  }\n\n}\n\nmodule.exports.OperationError = OperationError;\n","const { ErrorSubcode } = require('./error-subcodes');\nconst { OperationError } = require('./operation-error');\nconst { RequestEventCode } = require('./request-event-codes');\n\n\nconst SUBCODE_FROM_EC = {\n  [RequestEventCode.REQUEST_ABORTED]: ErrorSubcode.SESSION_NOT_CONNECTED,\n  [RequestEventCode.REQUEST_TIMEOUT]: ErrorSubcode.TIMEOUT,\n};\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a request failure event; request failure events are passed to the application\n * event handling callback provided when sending the request {@link solace.Session#sendRequest}\n * @memberof solace\n * @extends solace.OperationError\n * @hideconstructor\n */\nclass RequestError extends OperationError {\n  /*\n   * <b>This class is not exposed for construction by API users.</b> Instances of this object will\n   * be passed to the application in calls to the application's\n   * {@link solace.Session.requestFailedCallback}, provided when invoking\n   * {@link solace.Session.sendReqeust}.\n   * @constructor\n   * @param {String} message Information string\n   * @param {solace.RequestEventCode} eventCode The event code\n   * @param {Object} [correlationKey] Any associated correlation key\n   * @param {Object} [reason] Any additional information\n   * @private\n   */\n  constructor(message, eventCode, correlationKey, reason) {\n    super(message, SUBCODE_FROM_EC[eventCode], reason);\n    /**\n     * The name of the error.\n     * @name solace.RequestError#name\n     * @type {String}\n     * @readonly\n     * @description 'RequestError'\n     */\n    this.name = 'RequestError';\n    this._eventCode = eventCode;\n    this._correlationKey = correlationKey;\n  }\n\n  /**\n   * @type {solace.SessionEventCode}\n   * @name solace.RequestError#requestEventCode\n   * @description A code that provides more information about the error event.\n   */\n  get requestEventCode() {\n    return this._requestEventCode;\n  }\n\n  /**\n   * @deprecated Use {@link solace.RequestError#subcode}\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link ErrorSubcode}\n   */\n  get errorSubcode() {\n    return super.subcode;\n  }\n\n  [util_inspect_custom]() {\n    const superObj = super[util_inspect_custom] ? super[util_inspect_custom]() : {};\n    return Object.assign(superObj, {\n      'requestEventCode': RequestEventCode.describe(this.requestEventCode),\n      'infoStr':          this.infoStr,\n      'correlationKey':   this.correlationKey,\n    });\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n}\n\nmodule.exports.RequestError = RequestError;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An attribute of {@link solace.RequestError}. This enumeration represents the\n * different errors emitted by\n * {@link solace.Session.requestFailedCallback}\n * when a {@link solace.Session#sendRequest} fails.\n *\n * The client application receives a request error with event code\n * {@link solace.RequestEventCode.REQUEST_ABORTED}\n * when the underlying connection is successfully closed, or closed as a result\n * of a communication error.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst RequestEventCode = {\n  /**\n   * A request was aborted because the session is disconnected.\n   */\n  REQUEST_ABORTED: 8,\n  /**\n   * The event represents a timed-out request API call.\n   */\n  REQUEST_TIMEOUT: 9,\n};\n\nmodule.exports.RequestEventCode = Enum.new(RequestEventCode);\n","/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * The base class for all errors thrown by the API.\n * @hideconstructor\n * @extends {Error}\n *\n * @memberof solace\n */\nclass SolaceError extends Error {\n  constructor(type, message, constructor) {\n    super(message || '');\n    /**\n     * Error Message.\n     * @name solace.SolaceError#message\n     * @type {String}\n     */\n    this.message = message; // force set\n    /**\n     * The name of the error.\n     * @name solace.SolaceError#name\n     * @type {String}\n     */\n    this.name = type;\n\n    // ES6 error semantics are disappointing\n    // Cleaner stack capture for V8-based VMs\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, constructor);\n    } else {\n      this.stack = new Error().stack;\n    }\n  }\n\n}\n\nmodule.exports.SolaceError = SolaceError;\n","const { ArrayOperations } = require('./lib/array-operations');\nconst { assert } = require('./lib/assert');\nconst { BidiMap } = require('./lib/bidi-map');\nconst { Enum } = require('./lib/enum');\nconst { Iterator } = require('./lib/iterator');\nconst { Lazy } = require('./lib/lazy');\nconst { makeMap } = require('./lib/make-map');\nconst { Mixin } = require('./lib/mixin');\nconst { Resolver } = require('./lib/resolver');\nconst { SetOperations } = require('./lib/set-operations');\n\nmodule.exports.assert = assert;\nmodule.exports.ArrayOperations = ArrayOperations;\nmodule.exports.BidiMap = BidiMap;\nmodule.exports.Enum = Enum;\nmodule.exports.Iterator = Iterator;\nmodule.exports.Lazy = Lazy;\nmodule.exports.makeIterator = Iterator.makeIterator;\nmodule.exports.makeMap = makeMap;\nmodule.exports.Mixin = Mixin;\nmodule.exports.mixin = Mixin.mixin;\nmodule.exports.Resolver = Resolver;\nmodule.exports.resolve = Resolver.resolve;\nmodule.exports.SetOperations = SetOperations;\n","/* eslint-disable no-nested-ternary */\n\nfunction defaultComparator(a, b) {\n  const astr = String(a);\n  const bstr = String(b);\n  return astr > bstr ? 1 : (astr < bstr ? -1 : 0);\n}\n\nfunction insertOrdered(array, element, comparator = defaultComparator) {\n  const result = [...array];\n  return this.inplaceInsertOrdered(result, element, comparator);\n}\n\nfunction inplaceInsertOrdered(array, element, comparator = defaultComparator) {\n  let index = 0;\n  let min = 0;\n  let max = array.length;\n  // Optimize for empty array\n  if (max > 0) {\n    // Optimize for append\n    if (comparator(element, array[max - 1]) > 0) {\n      index = max;\n    } else {\n      // Binary search\n      index = (min + max) >> 1; // math.floor((min + max) / 2)\n      while (max > min) {\n        if (comparator(element, array[index]) < 0) {\n          max = index;\n        } else {\n          min = index + 1;\n        }\n        index = (min + max) >> 1; // math.floor((min + max) / 2)\n      }\n    }\n  }\n  array.splice(index, 0, element);\n}\n\nmodule.exports = {\n  ArrayOperations: {\n    defaultComparator,\n    insertOrdered,\n    inplaceInsertOrdered,\n  },\n};\n","let assert;\n\n/**\n * Browsers and Node share a common console.assert interface, console.assert(assertion, ...);\n * In Node, console.assert throws AssertionError if its assertion is falsy.\n * In browsers, they print to the console.\n * Extend browser behaviour to also throw.\n */\n\nif (BUILD_ENV.MODE_DEBUG) {\n  let internalAssert;\n  if (BUILD_ENV.TARGET_NODE) {\n    // _eslint-disable-next-line no-console\n    internalAssert = console.assert;\n  } else {\n    internalAssert = function browserAssert(assertion, ...args) {\n      if (!assertion) {\n        throw new Error(`Assertion error: ${typeof assertion} ${assertion} (${args.join(' ')})`);\n      }\n    };\n  }\n  // Now, wrap the assert in a catch and rethrow to give us a single place\n  // to set assert breakpoints.\n  assert = function outerAssert(...args) {\n    // eslint-disable-next-line no-useless-catch\n    try {\n      internalAssert(...args);\n    } catch (e) {\n      // if (BUILD_ENV.MODE_DEBUG) debugger;\n      throw (e);\n    }\n  };\n} else {\n  // In production mode, asserts are generally disabled.\n  assert = () => {};\n}\n\nmodule.exports.assert = assert;\n","/**\n * @private\n */\nclass BidiMap {\n  constructor(...pairs) {\n    this.forward = new Map();\n    this.reverse = new Map();\n    pairs.forEach((p) => {\n      this.setValues(p[0], p[1]);\n    });\n  }\n\n  /**\n   * Sets the key => value and value => key relationships for the supplied parameters.\n   *\n   * Method name is #set, not #put, for alignment with ES map method names.\n   * @param {*} key The key for the forward mapping (value in the reverse mapping)\n   * @param {*} value The value for the forward mapping (key in the reverse mapping)\n   */\n  setValues(key, value) {\n    this.forward.set(key, value);\n    this.reverse.set(value, key);\n  }\n\n}\n\nmodule.exports.BidiMap = BidiMap;\n","function enumName(instance, keys, value) {\n  const matches = keys.filter(k => instance[k] === value);\n  return matches.length ? matches[0] : null;\n}\n\nfunction enumValues(instance, keys) {\n  return Array.from(new Set(keys.map(k => instance[k])));\n}\n\n/**\n * The base for all enumerated types. Provides common functionality such as\n * collections of keys and values, reverse mapping, and readable descriptions. Also\n * supports overriding the canonical key-value mapping to maintain readability in\n * minified environments.\n *\n * @mixin\n * @memberof solace\n */\nclass Enum {\n\n  /**\n   * Creates an Enum with the given key-value mapping.\n   *\n   * @param {Object} values The key-value mapping to use. This mapping is set as the initial\n   * canonical key-value mapping. To override, use {@link solace.Enum#_setCanonical}.\n   */\n  constructor(values) {\n    Object.defineProperties(this, {\n      _canonical: {\n        value:        null,\n        enumerable:   false,\n        writable:     true,\n        configurable: true,\n      },\n    });\n    this._setCanonical(values);\n  }\n\n  /**\n   * Resets the canonical key value mapping for the enumeration. Using this method,\n   * you add additional sets of keys that map to the same values, and specify that\n   * these new keys take precedence for reverse mapping. Any older set of keys is made\n   * non-canonical and non-enumerable.\n   *\n   * @example\n   * const c = new Enum({ HELLO: 'world' });\n   * c._setCanonical({ MAD: 'world' });\n   * c.nameOf('world') === 'MAD'; // true\n   *\n   * @param {Object} values The new key-value mapping to add to the object and set as canonical.\n   * @param {Boolean} final Whether this enumeration should accept further reconfiguration.\n   * @private\n   */\n  _setCanonical(values, final = false) {\n    this._canonical = Object.assign({}, values);\n    Object.keys(this).forEach((key) => {\n      const descriptor = Object.getOwnPropertyDescriptor(this, key);\n      if (descriptor.value !== undefined) {\n        Object.defineProperty(this, key, {\n          enumerable:   false,\n          writable:     true,\n          configurable: true,\n          value:        descriptor.value,\n        });\n      }\n    });\n    Object.keys(values).forEach((key) => {\n      Object.defineProperty(this, key, {\n        enumerable:   true,\n        writable:     !final,\n        configurable: !final,\n        value:        values[key],\n      });\n    });\n  }\n\n  /**\n   * Create a human-readable string describing the given enumeration value. This\n   * result is informational and may vary between SDK versions.\n   *\n   * Currently, it either returns the value provided (if the associated key is\n   * the same), or a string of the form `key (value)`.\n   *\n   * @example\n   * console.log(new Enum({ ANSWER: 42 }).describe(42)); // ANSWER (42)\n   * console.log(new Enum({ ECHO: 'ECHO' })).describe('ECHO'); // ECHO\n   *\n   * @param {any} enumValue The value on which to perform reverse mapping.\n   * @param {String} [noneValue=''] The string to return if the enumeration value is\n   *    undefined or null.\n   * @param {String} [unknownValue='<unknown>'] The string to return if the enumeration\n   *    value was not found in any of the canonical keys.\n   * @returns {String} A human-readable description of the reverse mapping for the value.\n   */\n  describe(enumValue, noneValue = '<none>', unknownValue = '<unknown>') {\n    if (enumValue === null || enumValue === undefined) return noneValue;\n    const name = enumName(this._canonical,\n                          Object.keys(this._canonical || {}),\n                          enumValue)\n                 || unknownValue;\n    return name === enumValue ? name : `${name} (${enumValue})`;\n  }\n\n  /**\n   * Returns the canonical name in this enumeration for the given value. This function is\n   * designed to facilitate reflection, whereas for display\n   *\n   * @param {any} enumValue The value for which to get the enumeration key.\n   * @returns {String} The name for the given value.\n   */\n  nameOf(enumValue) {\n    return enumName(this._canonical, Object.keys(this._canonical || {}), enumValue);\n  }\n\n  /**\n   * Returns all canonical names/keys in this enumeration.\n   *\n   * @readonly\n   * @returns {Array.<String>} All canonical names in this enumeration.\n   */\n  get names() {\n    return Object.keys(this._canonical || {});\n  }\n\n  /**\n   * Returns all values assigned to canonical keys in this enumeration.\n   *\n   * @readonly\n   * @returns {Array} All values defined for enumeration keys.\n   */\n  get values() {\n    return enumValues(this._canonical, Object.keys(this._canonical || {}));\n  }\n\n  /**\n   * A property returning true to faciliate duck-typing with {solace.Enum} objects.\n   *\n   * @readonly\n   * @returns {Boolean} true This is an enumeration.\n   */\n  get isEnum() { // eslint-disable-line class-methods-use-this\n    return true;\n  }\n\n  /**\n   * Returns the name of an enuerated value given the\n   * enumeration and the value.\n   *\n   * @param {Object} instance The enumeration instance.\n   * @param {*} value The value for which to return the key name.\n   * @returns {String} The key name for the given enumeration value.\n   */\n  static nameOf(instance, value) {\n    return instance.nameOf(value);\n  }\n\n  /**\n   * Returns values defined on this enumeration for the given keys. To get the enumeration keys,\n   * use {@link Object#keys}.\n   * @param {Object} instance The enumeration on which to return values.\n   * @returns {Array} The values defined on the given enumeration.\n   **/\n  static values(instance) {\n    return instance.values();\n  }\n\n  /**\n   * Alternate construction method for enumerations.\n   *\n   * @static\n   * @param {Object} values Initial key-value mapping\n   * @returns {solace.Enum} A new enumeration instance\n   * @private\n   */\n  static new(values) {\n    return new Enum(values);\n  }\n\n  /**\n   * Constructs a private enumeration in which the values are equal to the keys.\n   *\n   * @static\n   * @param {Array.<String>} strings Key names. The values will be equal to the keys.\n   * @returns {solace.Enum} An enumeration instance of the given strings\n   * @private\n   */\n  static ofStrings(strings) {\n    const map = {};\n    strings.forEach((s) => {\n      map[s] = s;\n    });\n    return Enum.new(map);\n  }\n\n  /**\n   * Constructs an enumeration in which each key is assigned a distinct integer value.\n   * Enums created this way are subject to renumbering if keys are reordered.\n   *\n   * @static\n   * @param {Array.<String>} keys Key names. The values will be sequential from zero.\n   * @returns {solace.Enum} An enumeration instance of the given values\n   * @private\n   */\n  static ofNumbers(keys) {\n    const map = {};\n    keys.forEach((key, index) => {\n      map[key] = index;\n    });\n    return Enum.new(map);\n  }\n}\n\nmodule.exports.Enum = Enum;\n","/**\n * An object managing a traversal of an Array-like object.\n *\n * @memberof solace\n * @property {function} deref Returns the value the iterator is\n *      referencing.\n * @property {function} incr Increments the iterator's reference in the\n *      iterator's data set.\n * @property {function} end Tests whether the iterator is at the end of\n *      the data set.  This MUST return false when calling deref() or\n *      incr().\n * @private\n */\nclass Iterator {\n\n  /**\n   * Creates an iterator to forward iterate over a specific contiguous\n   * section of an array, specifically in the range [start, end)\n   * @param {Array} arr The array to iterate over\n   * @param {Number} [start=0] The first item the iterator should\n   *  dereference\n   * @param {Number} [end=arr.length] One beyond the last item in the array\n   *  that the iterator should dereference.\n   * @constructor\n   */\n  constructor(arr, start = 0, end = arr.length) {\n    /**\n     * The array being iterated.\n     * @type {Array}\n     * @private\n     */\n    this._arr = arr;\n    /**\n     * The current index of the enumeration.\n     * @private\n     * @type {Number}\n     */\n    this._index = start;\n    /**\n     * The exclusive end index, or the length, of the array.\n     * @type {Number}\n     */\n    this._end = end;\n  }\n\n  /**\n   * Returns the element at the iterator's position.\n   * @returns {Object} The array element at the current position.\n   */\n  deref() {\n    return this._arr[this._index];\n  }\n\n  /**\n   * Increments the iterator.\n   * @returns {Number} The new position of the iterator.\n   */\n  incr() {\n    return ++this._index;\n  }\n\n  /**\n   * Reports whether the iterator has completed its iteration.\n   * @returns {Boolean} True if the iterator has reached the end of the iteration.\n   */\n  end() {\n    return this._index >= this._end;\n  }\n\n  /**\n   * Creates an iterator to forward iterate over a specific contiguous\n   * section of an array, specifically in the range [start, end)\n   *\n   * @param {Array} arr The array to iterate over\n   * @param {Number} [start=0] The first item the iterator should\n   *  dereference\n   * @param {Number} [end=arr.length] One beyond the last item in the array\n   *  that the iterator should dereference.\n   * @returns {solace.Iterator} An iterator to the specified set of data.\n   */\n  static makeIterator(arr, start = 0, end = arr.length) {\n    return new Iterator(arr, start, end);\n  }\n\n}\n\n// Expose both the static constructor function and the class.\nmodule.exports.Iterator = Iterator;\n","const DEFAULT_PROPERTY_OPTIONS = {\n  enumerable: true,\n};\n\nfunction setPropertyValue(target, key, value, options = null) {\n  Object.defineProperty(\n          target,\n          key,\n          Object.assign({ value }, DEFAULT_PROPERTY_OPTIONS, options));\n}\n\n\nfunction lazyProperty(target, key, evalFn) {\n  Object.defineProperty(\n    target,\n    key,\n    Object.assign({\n      configurable: true, // Allow replacing this property with resolved value.\n      get:          () => {\n        // The getter evaluates the function provided.\n        // It replaces itself with the value it resolves.\n        const result = evalFn(target, key);\n        setPropertyValue(target, key, result);\n        return result;\n      },\n      set: (value) => {\n        setPropertyValue(target, key, value);\n      },\n    }, DEFAULT_PROPERTY_OPTIONS));\n  return target;\n}\n\nfunction lazyProperties(target, obj) {\n  Object.keys(obj).forEach((k) => {\n    lazyProperty(target, k, obj[k]);\n  });\n  return obj;\n}\n\nfunction lazyValue(evalFn) {\n  return lazyProperty({}, 'value', evalFn);\n}\n\nconst Lazy = {\n  lazyProperties,\n  lazyProperty,\n  lazyValue,\n};\n\nmodule.exports.Lazy = Lazy;\n","\n// Avoid closure compiler nonsense\nmodule.exports.makeMap = function makeMap(...keyValuePairs) {\n  const result = {};\n  for (let i = 0; i < keyValuePairs.length; i += 2) {\n    result[keyValuePairs[i]] = keyValuePairs[i + 1];\n  }\n  return result;\n};\n","const Mixin = {};\n\n  /**\n   * @param  {Object} target The class to augment\n   * @param  {Object} add The class to mix in.\n   * @returns {Object} The augmented class\n   */\nMixin.mixin = function mixin(target, add) {\n  const targetProto = target.prototype;\n  const addProto = add.prototype;\n  Object.getOwnPropertyNames(addProto).forEach((name) => {\n    if (name === 'constructor') return;\n    Object.defineProperty(targetProto, name, Object.getOwnPropertyDescriptor(addProto, name));\n  });\n  return target;\n};\n\nmodule.exports.Mixin = Mixin;\n","const { Lazy } = require('./lazy');\n\nconst { lazyProperty } = Lazy;\n\nfunction traversePath(commonSource, keySource, pathArr) {\n  return pathArr.reduce((source, value) => {\n    if (typeof value === 'string') {\n      return source[value];\n    }\n    return value;\n  }, keySource);\n}\n\n/**\n * @classdesc\n * Deferred resolution for imports. A heavyweight method of breaking circular dependencies.\n * Each specified key (see below) is resolved once by a function that lazily evaluates a\n * path.\n * <pre>\n * const resolved = new Resolver({\n *  foo: [FooLib, 'fooContainer'],        // Resolves foo from FooLib.fooContainer.foo lazily\n *  bar: ['foo'],                         // Resolves bar from previously defined foo lazily\n *  'baz,quux': [FooLib, 'bazsAndQuuxes'] // baz = FooLib.bazsAndQuuxes.baz,\n *                                        // quux = FooLib.bazsAndQuuxes.quux\n * });\n * </pre>\n * In most cases this is equivalent to using FooLib.fooContainer.foo, et cetera, directly.\n * Prefer that approach unless the dependencies are deeply hierarchical. Prefer the Resolver\n * when one-time evaluation and aliasing a path makes the code more DRY and readable.\n * @private\n */\nclass Resolver {\n  constructor(options, source) {\n    // For every key...\n    Object.keys(options).forEach((compoundKey) => {\n      // Split out key names if multiple were provided\n      compoundKey.split(',').map(k => k.trim()).forEach((key) => {\n        // Build a path array. The key name is the implicit last element.\n        const rawPath = options[compoundKey];\n        const path = typeof rawPath === 'string' ? rawPath.split('.') : rawPath;\n        const pathArr = (Array.isArray(path) ? path : [path]).concat(key);\n        // Create a defer for this key.\n        lazyProperty(this, key, () => traversePath(source, this, pathArr));\n      });\n    });\n  }\n\n  static resolve(options, source) {\n    return new Resolver(options, source);\n  }\n}\n\n\nmodule.exports.Resolver = Resolver;\n","/* eslint-disable no-restricted-syntax */\n\nfunction isSuperset(set, subset) {\n  return Array.from(subset).every(elem => set.has(elem));\n}\n\nfunction inplaceUnion(setA, setB) {\n  setB.forEach((elem) => {\n    setA.add(elem);\n  });\n  return setA;\n}\n\nfunction union(setA, setB) {\n  return inplaceUnion(new Set(setA), setB);\n}\n\nfunction inplaceIntersection(setA, setB) {\n  setA.forEach((elem) => {\n    if (!setB.has(elem)) {\n      setA.delete(elem);\n    }\n  });\n  return setA;\n}\n\nfunction intersection(setA, setB) {\n  return new Set(Array.from(setA).filter(elem => setB.has(elem)));\n}\n\nfunction inplaceDifference(setA, setB) {\n  setB.forEach((elem) => {\n    setA.delete(elem);\n  });\n  return setA;\n}\n\nfunction difference(setA, setB) {\n  return new Set(Array.from(setA).filter(elem => !setB.has(elem)));\n}\n\nmodule.exports = {\n  SetOperations: {\n    inplaceDifference,\n    inplaceIntersection,\n    inplaceUnion,\n    isSuperset,\n    difference,\n    intersection,\n    union,\n  },\n}\n;\n","const { EventEmitter } = require('./lib/event-emitter');\nconst { Timer } = require('./lib/timer');\n\nmodule.exports = {\n  EventEmitter,\n  Timer,\n};\n","const NodeEventEmitter = require('events').EventEmitter;\nconst { ArrayUtils } = require('solclient-util');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_WARN } = require('solclient-log');\n\nconst { flatten, includes } = ArrayUtils;\nconst NODE_DEFAULT_EVENTS = ['error', 'newListener', 'removeListener'];\nconst BLACKLIST_DIRECT = ['newListener', 'removeListener'];\n\nfunction buildFilter(emits) {\n  if (typeof emits === 'function') return k => includes(NODE_DEFAULT_EVENTS, k) || emits(k);\n  if (!Array.isArray(emits)) return null;\n  const emitSet = new Set(flatten(emits));\n  NODE_DEFAULT_EVENTS.forEach(el => emitSet.add(el));\n  const emitArray = Array.from(emitSet);\n  return k => includes(emitArray, k);\n}\n\nconst DISABLED_ACTIONS = {\n  ignore() {},\n  fail() {\n    throw new Error('Emitter disabled');\n  },\n};\n\nclass EventEmitter extends NodeEventEmitter {\n  /**\n   * Creates an instance of EventEmitter.\n   *\n   * An EventEmitter is an object that periodically emits events that cause function objects, known\n   * as listeners, to be called. It exposes functions to attach passed functions to named events.\n   *\n   * Typically, event names are camel-cased strings, but any valid JavaScript property key can be\n   * used.\n   *\n   * @param {?Object} options Options for the emitter\n   * @param {String} [options.direct] An event that is to be directly dispatched when possible.\n   *  Direct dispatch is a performance optimization that minimizes EventEmitter overhead. Direct\n   *  dispatch skips the safe error handling path; use _formatErrorEvent if required.\n   * @param {Array.<string>} [options.emits] Valid event names. If specified, listeners for other\n   *  events are rejected. Array can be nested, e.g. `['foo', ['bar1', 'bar2']]`\n   * @param {Boolean} [options.unsafe] Determines whether dispatch is less exception-safe.\n   *  * When `false`, if an event listener throws an error, the error is thrown all the way back\n   *    to the emitting stack frame. This makes it the emitter's responsibility to catch exceptions\n   *    in listeners. This avoids a try-catch frame and may be more performant.\n   *  * When `true`, if an event listener throws an error, and an `error` listener exists, the\n   *    exception is dispatched to that listener wrapped in an {@link solace.OperationError},\n   *    `subcode={@link solace.ErrorSubcode.CALLBACK_ERROR}`. The originating event and the error\n   *    thrown by the listener are available on `event` and `error` fields respectively.\n   *\n   *  In all cases, throwing an exception in a listener prevents the event being received by\n   *  later listeners.\n   *\n   *  This option does not affect any event selected for `options.direct`, which always uses\n   *  unsafe dispatch.\n   *\n   * @memberof solace\n   * @extends {EventEmitter}\n   * @private\n   */\n  constructor(options) {\n    super();\n    const { direct, emits, unsafe, formatEventName } = options || {};\n    this.formatEventName = formatEventName || (name => name);\n\n    // Direct mode path:\n    //  emit --> (direct emit || bareEmit).\n    const bareEmit = this.emit.bind(this);\n    this._installDirectFilter(direct, bareEmit);\n\n    // Indirect mode path:\n    //  verifier -> error handlers -> emit --> bareEmit\n    this._installErrorHandlers(unsafe);\n    this._installEmitVerifier();\n\n    this._listenerVerificationFilter = buildFilter(emits);\n    this._emits = emits;\n  }\n\n  _installDirectFilter(direct, bareEmit) {\n    if (!direct) return;\n      // Direct mode class instance modifications\n\n    if (includes(BLACKLIST_DIRECT, direct)) {\n      throw new OperationError(\n        `Cannot configure listener collection events [${BLACKLIST_DIRECT.join(', ')}] as direct`,\n        ErrorSubcode.INTERNAL_ERROR);\n    }\n\n    // The default direct emitter is the base emitter. Skip any overrides we installed.\n    this._defaultEmitDirect = (...args) => bareEmit(direct, ...args);\n\n    // Initally not direct for 0 listeners\n    this.emitDirect = this._defaultEmitDirect;\n    this._directEventName = direct;\n\n    this.on = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.on(eventName, listener);\n      this._setEmitDirect(eventName, true, listener);\n      return ret;\n    };\n\n    this.addListener = (eventName, listener) => this.on(eventName, listener);\n\n    this.once = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.once(eventName, listener);\n      this._setEmitDirect(eventName, false);\n      return ret;\n    };\n\n    this.prependListener = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.prependListener(eventName, listener);\n      this._setEmitDirect(eventName, true, listener);\n      return ret;\n    };\n\n    this.prependOnceListener = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.prependOnceListener(eventName, listener);\n      this._setEmitDirect(eventName, false);\n      return ret;\n    };\n\n    this.removeAllListeners = (eventName) => {\n      const ret = super.removeAllListeners(eventName);\n      if ((eventName === this._directEventName) || (eventName === undefined)) {\n        this.emitDirect = this._defaultEmitDirect;\n      }\n      return ret;\n    };\n\n    this.removeListener = (eventName, listener) => {\n      const ret = super.removeListener(eventName, listener);\n      if ((eventName === this._directEventName) && (this.listenerCount(eventName) === 0)) {\n        this.emitDirect = this._defaultEmitDirect;\n      }\n      return ret;\n    };\n\n    this.directListenerCount = () => this.listenerCount(this._directEventName);\n\n    this.setOnFirstDirectListener = (firstDirect) => {\n      this._onFirstDirectListener = firstDirect;\n    };\n  }\n\n  _setEmitDirect(eventName, onListener, listener) {\n    if (eventName !== this._directEventName) {\n      return;\n    }\n\n    if (onListener && (this.directListenerCount() === 1)) {\n      this.emitDirect = listener;\n    } else {\n      this.emitDirect = this._defaultEmitDirect;\n    }\n\n    if ((this.directListenerCount() === 1) && (this._onFirstDirectListener !== undefined)) {\n      this._onFirstDirectListener();\n    }\n  }\n\n  _verifyListenerEvent(event) {\n    if (!this._listenerVerificationFilter) return;\n\n    if (event === undefined || event === null) {\n      this.throwInternal(\n          new OperationError(`Emitter rejects listener for no-name event: ${event}`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n    }\n    if (!this._listenerVerificationFilter(event)) {\n      this.throwInternal(\n        new OperationError(`Emitter rejects listeners for ${event}, emits ${this._emits}`,\n                            ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n    }\n  }\n\n  _installEmitVerifier() {\n    if (BUILD_ENV.MODE_DEBUG) {\n      // Debug mode: always add assert for empty event name\n      const emitBase = this.emit.bind(this);\n      this.emit = (name, ...args) => {\n        if (name === undefined || name === null) {\n          this.throwInternal(new OperationError(`Emitter rejects no-name event: ${name}`));\n        }\n        emitBase(name, ...args);\n      };\n    }\n  }\n\n  _installErrorHandlers(unsafe) {\n    if (unsafe) {\n      // If unsafe, there's no try/catch/emit so throwInternal just throws\n      this.throwInternal = (err) => { throw err; };\n      return;\n    }\n\n    // Install try/catch/emit-as-event if not unsafe mode.\n    // Introduces throwInternal, which sets the _internalError flag restore\n    // orignal throw-to-emitter functionality in case of internal error\n\n    const emitBase = this.emit.bind(this);\n\n    this.throwInternal = function throwInternal(err) {\n      this._internalError = true;\n      throw err;\n    };\n\n    this.emit = (name, ...args) => {\n      try {\n        emitBase(name, ...args);\n      } catch (ex) {\n        if (this._internalError) {\n          this._internalError = undefined;\n          throw ex; // rethrow\n        }\n\n        const err = this.formatErrorEvent(ex, name, ...args);\n        try {\n          LOG_WARN(`Listener for '${err.info.event.formattedName}' threw exception, dispatching to 'error'`);\n          emitBase('error', err);\n        } catch (innerEx) {\n          LOG_WARN(\"Listener for 'error' threw exception:\", innerEx, '\\nOriginal exception:', ex);\n        }\n      }\n    };\n  }\n\n  get isDirect() {\n    return this.emitDirect && (this.emitDirect !== this._defaultEmitDirect);\n  }\n\n  formatErrorEvent(ex, name, ...args) {\n    const formattedName = this.formatEventName(name);\n    return Object.assign(new OperationError(\n      `Unhandled error in event handler for '${formattedName}'`,\n      ErrorSubcode.CALLBACK_ERROR,\n      `On event: ${[name, ...args]} ${ex}`\n    ), {\n      stack: ex.stack,\n      info:  {\n        event: { name, formattedName, args },\n        error: ex,\n      },\n    });\n  }\n\n  disableEmitter() {\n    this._defaultEmitDirect = DISABLED_ACTIONS.ignore;\n    // If this is a direct-enabled emitter, this will also cause emitDirect to be set to\n    // _defaultEmitDirect, which is now DISALBED_ACTIONS.ignore.\n    this.removeAllListeners();\n    this.emit = DISABLED_ACTIONS.ignore;\n    // Freeze listeners by first disabling remove, then add.\n    this.addListener('removeListener', DISABLED_ACTIONS.fail);\n    this.addListener('newListener', DISABLED_ACTIONS.fail);\n  }\n\n}\n\nmodule.exports.EventEmitter = EventEmitter;\n","/**\n * @private\n */\nclass Timer {\n  /**\n   * Creates an instance of Timer.\n   * @param {function} cancel The action to perform on cancellation\n   */\n  constructor(cancel) {\n    this.cancel = () => {\n      this.cancel = () => {}; // change to no-op\n      cancel();\n    };\n  }\n\n  /**\n   * @static\n   * @param {Number} interval The interval for the timer, in milliseconds.\n   * @param {function} onInterval The function to invoke on expiration.\n   * @param {any} [args] Any arguments to pass to the onExpire callback.\n   * @returns {Timer} A new timer object.\n   */\n  static newInterval(interval, onInterval, ...args) {\n    const timerRef = setInterval(onInterval, interval, ...args);\n    return new Timer(() => clearInterval(timerRef));\n  }\n\n  /**\n   * @static\n   * @param {Number} timeout The timeout for the timer, in milliseconds.\n   * @param {function} onExpire The function to invoke on expiration.\n   * @param {any} [args] Any arguments to pass to the onExpire callback.\n   * @returns {Timer} A new timer object.\n   */\n  static newTimeout(timeout, onExpire, ...args) {\n    const timerRef = setTimeout(onExpire, timeout, ...args);\n    return new Timer(() => clearTimeout(timerRef));\n  }\n}\n\nmodule.exports.Timer = Timer;\n","const { FactoryProfile, SolclientFactoryProfiles } = require('./lib/solclient-factory-profiles');\nconst { ProfileBinding } = require('./lib/profile-binding');\nconst { SolclientFactory } = require('./lib/solclient-factory');\nconst { SolclientFactoryProperties } = require('./lib/solclient-factory-properties');\n\nmodule.exports.FactoryProfile = FactoryProfile;\nmodule.exports.ProfileBinding = ProfileBinding;\nmodule.exports.SolclientFactoryProfiles = SolclientFactoryProfiles;\nmodule.exports.SolclientFactoryProperties = SolclientFactoryProperties;\nmodule.exports.SolclientFactory = SolclientFactory;\n\n","const { OperationError } = require('solclient-error');\n\nlet binding = null;\n\nconst ProfileBinding = {\n  get value() {\n    if (binding === null) {\n      throw new OperationError('Profile binding not initialized. Call solace.SolclientFactory.init');\n    }\n    return binding;\n  },\n  set value(value) {\n    // private, so we'll allow it for testing\n    binding = value;\n  },\n};\n\nmodule.exports.ProfileBinding = ProfileBinding;\n","// Preferred configuration for the profile system:\n\n// End user:\n//  opaque profiles, property-style access\n// API implementation:\n//  inherited properties, property-style access\n// A root, forward compatible profile\n// A legacy, backwards compatible profile\n// Feature/milestone profiles that inherit from one of these two configurations\n\n// The lowest-friction way of doing this is using prototype inheritance.\n// Also considered:\n//  getProperty() with child->parent pointers -- mixes string\n//    and property access\n//  ES6 proxies -- not universal and not shimmable\n\n// Necessary to abuse prototype inheritance for static property inheritance:\n/* eslint-disable class-methods-use-this */\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.SolclientFactoryProfiles}.</b>\n *\n * A factory profile determines the default functionality of the API. Profiles are predefined\n * combinations of capabilities that represent a mutually-consistent, valid configuration state\n * for API features.\n *\n * The factory may be initialized exactly once, with a single factory profile.\n *\n * Changing which factory profile is used by {@link solace.SolclientFactory.init} may result in\n * different default property values, validation, function signatures and implementations.\n *\n * Changing the factory profile will not change relationships between API methods. That is,\n * assuming all properties and arguments are explicitly set, an application may call the\n * API with the same values as before to cause the same result, unless explicitly noted.\n *\n * If no profile is specified, the default will provide equivalent functionality to\n * SolclientJS version 7.x. New applications are encouraged to use the\n * {@link solace.SolclientFactoryProfiles.version10_5} profile for the best compatibility with\n * other APIs (excluding 7.x JavaScript APIs).\n *\n * @memberof solace\n * @private\n */\nclass FactoryProfile {\n  /**\n   * Returns whether Guaranteed Messaging is enabled for the API. When `true`,\n   * AD publishing capability is enabled by default.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get guaranteedMessagingEnabled() { return undefined; }\n\n  /**\n   * Returns whether the API will allow Comet (long-held HTTP request) transports\n   * to be used. If this is `true`, transport protocols may fall back to HTTP\n   * if a connection cannot be established with a preferred protocol.\n   *\n   *  * NOTE: Guaranteed Messaging cannot be enabled if Comet is enabled.\n   *\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  get cometEnabled() { return undefined; }\n\n  /**\n   * Returns whether the API performs UTF-8 encoding on user strings where the SMF\n   * spec requires it.\n   *  * When this is `true`, the API will correctly interoperate with other Solace APIs that send\n   *    UTF-8 encoded topics.\n   *  * When this is `false`, the API will interoperate correctly with 7.x and earlier JavaScript\n   *    APIs, that used an arbitrary encoding for such strings.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() { return undefined; }\n\n  /**\n   * Returns whether the API returns BYTEARRAY SDT values as Strings.\n   *\n   * In older versions (before 10.5) of the API,\n   * an SDTField with type BYTEARRAY returned a String from getValue().\n   * Newer versions (since 10.5),\n   * getValue() for the same type returns an actual ByteArray, unless this property is `true`.\n   *\n   *  * When this is `true`, SDTField.getValue() returns a String for a BYTEARRAY.\n   *  * When this is `false`, SDTField.getValue() returns a ByteArray for a BYTEARRAY.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return undefined; }\n\n  [util_inspect_custom]() {\n    return {\n      'guaranteedMessagingEnabled': this.guaranteedMessagingEnabled,\n      'cometEnabled':               this.cometEnabled,\n      'topicUtf8Encode':            this.topicUtf8Encode,\n      'byteArrayAsString':          this.byteArrayAsString,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\n/**\n * The Version 7 profile for SolclientJS. This profile sets factory and session default values\n * that provide SolclientJS 7.x behaviour, and interoperability with SolclientJS 7.x clients.\n *\n * @namespace\n * @type {solace.FactoryProfile}\n * @name version7\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version7Profile extends FactoryProfile {\n  /**\n   * Returns `false`: Guaranteed Messaging is disabled by default to maintain availability of Comet\n   * HTTP transports by default.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API. Note that version 7.x SolclientJS\n   * clients cannot send or receive any messages using Guaranteed Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() { return !!BUILD_ENV.TARGET_NODE; }\n\n  /**\n   * Returns true: Comet HTTP transports are enabled for the API. The API user may, by default,\n   * select Comet HTTP transport protocol, and the API may fall back to these protocols during a\n   * connection attempt.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() { return !!BUILD_ENV.TARGET_BROWSER; }\n  /**\n   * Returns false: topic UTF-8 encoding is disabled for the API. The network encoding of topics is\n   * compatible with other SolclientJS 7.x clients, and may not be interoperable with other\n   * Solace Messaging APIs.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() { return false; }\n\n  /**\n   * Returns true: getValue() of SDTFields of type BYTEARRAY return a string,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version7.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return true; }\n}\nconst legacyInstance = new Version7Profile();\n\n/**\n * The Version 10 profile for SolclientJS. This profile sets factory and session default values\n * that provide the full capability of the API as of version 10.0, including interoperability with\n * other Solace Messaging products.\n *\n * @namespace\n * @name version10\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version10Profile extends FactoryProfile {\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API,\n   * with the result that {@link solace.MessagePublisherProperties#enabled} is `true` by default\n   * on platforms that support Guaranteed Messaging publishing.\n   *\n   * Where the {@link solace.TransportType.WS_BINARY} transport is unavailable,\n   * {@link solace.MessagePublisherProperties#enabled} is `false` by\n   * default.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled by default for the API.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() {\n    return true;\n  }\n  /**\n   * Returns `false`: Comet HTTP transports are disabled for the API. The API will not select or\n   * fall back to HTTP Comet transport protocols, which are mutually exclusive of Guaranteed\n   * Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() {\n    return false;\n  }\n  /**\n   * Returns `true`: the API will encode topics for interoperability with other Solace Messaging\n   * products. SolclientJS 7.x clients may fail to correctly decode when topic names that include\n   * multi-byte UTF-8 code points.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() {\n    return true;\n  }\n\n  /**\n   * Returns true: getValue() of SDTFields of type BYTEARRAY return a string,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version10.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return true; }\n}\n\nconst v10Instance = new Version10Profile();\n\n/**\n * The Version 10.5 profile for SolclientJS. This profile sets factory and session default values\n * that provide the full capability of the API as of version 10.5, including interoperability with\n * other Solace Messaging products.\n *\n * @namespace\n * @name version10_5\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version105Profile extends FactoryProfile {\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API,\n   * with the result that {@link solace.MessagePublisherProperties#enabled} is `true` by default\n   * on platforms that support Guaranteed Messaging publishing.\n   *\n   * Where the {@link solace.TransportType.WS_BINARY} transport is unavailable,\n   * {@link solace.MessagePublisherProperties#enabled} is `false` by\n   * default.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled by default for the API.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() {\n    return true;\n  }\n  /**\n   * Returns `false`: Comet HTTP transports are disabled for the API. The API will not select or\n   * fall back to HTTP Comet transport protocols, which are mutually exclusive of Guaranteed\n   * Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() {\n    return false;\n  }\n  /**\n   * Returns `true`: the API will encode topics for interoperability with other Solace Messaging\n   * products. SolclientJS 7.x clients may fail to correctly decode when topic names that include\n   * multi-byte UTF-8 code points.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() {\n    return true;\n  }\n\n  /**\n   * Returns false: getValue() of SDTFields of type BYTEARRAY return a Uint8Array,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return false; }\n}\n\n\nconst forwardInstance = new Version105Profile();\n\n/**\n * The collection of predefined factory profiles available for application use.\n *\n * See each member for a description of its configuration.\n *\n * @namespace\n * @memberof solace\n * @FactoryProfile\n */\nconst SolclientFactoryProfiles = {\n  _legacy:  legacyInstance,\n  _v10:     v10Instance,\n  _forward: forwardInstance,\n  _default: legacyInstance,\n\n  /**\n   * The version 7 profile for browsers. {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * The version 7 profile configures API defaults for interoperability with the\n   * SolclientJS 7.x API, and applications that use it.\n   *\n   * {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * @name version7\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  /**\n   * The version 7 profile for Node.JS. {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * A version 7 profile configures API defaults for interoperability with the\n   * SolclientJS 7.x API, and applications that use it.\n   *\n   * {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * @name version7\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  version7: legacyInstance,\n\n  /**\n   * The version 10 profile for Node.JS.\n   *\n   * The version 10 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   * It provides a backwards-compatibility mode for existing applications\n   * expecting SDTField.getValue() to return a string for BYTEARRAYs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10}\n   *\n   * @name version10\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  /**\n   * The version 10 profile for browsers.\n   *\n   * The version 10 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   * It provides a backwards-compatibility mode for existing applications\n   * expecting SDTField.getValue() to return a string for BYTEARRAYs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10}\n   *\n   * @name version10\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  version10: v10Instance,\n\n  /**\n   * The version 10.5 profile for browsers.\n   *\n   * The version 10.5 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10_5}\n   *\n   * @name version10_5\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  /**\n   * The version 10.5 profile for Node.JS.\n   *\n   * The version 10.5 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10_5}\n   *\n   * @name version10_5\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  version10_5: forwardInstance,\n\n  [util_inspect_custom]() {\n    return {\n      'version7':    this.version7,\n      'version10':   this.version10,\n      'version10_5': this.version10_5,\n    };\n  },\n\n  toString() {\n    return util_inspect(this);\n  },\n};\n\nmodule.exports.FactoryProfile = FactoryProfile;\nmodule.exports.SolclientFactoryProfiles = SolclientFactoryProfiles;\n","const { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\n\nfunction getDefaultLogLevel() {\n  // break dependency loop\n  // eslint-disable-next-line global-require\n  const { LogLevel } = require('solclient-log');\n  return LogLevel.INFO;\n}\n\n/**\n * @classdesc\n * Properties used during initialization of {@link solace.SolclientFactory}.\n *\n * @memberof solace\n */\nclass SolclientFactoryProperties extends APIProperties {\n  /**\n   * Creates an instance of SolclientFactoryProperties.\n   *\n   * @param {Object} [options] The property names and values to apply to this instance\n   * @param {solace.LogLevel} [options.logLevel]  logLevel (default={@link solace.LogLevel.INFO}\n   * @param {solace.LogImpl} [options.logger]     log implementation (default=NULL)\n   * @param {solace.SolclientFactoryProfiles} [options.profile] Javascript profile\n   *  (default={@link solace.SolclientFactoryProfiles.version7})\n   * @memberOf SolclientFactoryProperties\n   */\n  constructor(options) {\n    super({\n      logLevel: getDefaultLogLevel(),\n      logger:   null,\n    }, options);\n  }\n\n  /**\n   * The factory profile to use. The following factory profiles are available:\n   * * {@link solace.SolclientFactoryProfiles.version7}, a backwards-compatible profile\n   *      for existing solClientJS 7.x applications\n   * * {@link solace.SolclientFactoryProfiles.version10}, the recommended profile\n   *      for new applications\n   *\n   * @type {solace.SolclientFactoryProfiles}\n   */\n  get profile() {\n    return this._profile;\n  }\n  set profile(profile) {\n    this._profile = profile;\n  }\n\n  /**\n   * The logging level to use for filtering log events. Messages with a level of lesser importance\n   * than this will be filtered out and not logged.\n   * @type {solace.LogLevel}\n   */\n  get logLevel() {\n    return Check.number(this._logLevel) ? this._logLevel : getDefaultLogLevel();\n  }\n  set logLevel(val) {\n    this._logLevel = val;\n  }\n\n  /**\n   * The logging implementation to use. In the debug API, the log implementation will be called\n   * for every log statement not filtered out by the log level. If no implementation is supplied,\n   * the default implementation will be used, which logs to the global console object.\n   * @type {solace.LogImpl}\n   */\n  get logger() {\n    return this._logger || null;\n  }\n  set logger(val) {\n    this._logger = val;\n  }\n\n  [util_inspect_custom]() {\n    // break dependency loop\n    // eslint-disable-next-line global-require\n    const { LogLevel } = require('solclient-log');\n    return {\n      'logLevel': LogLevel.describe(this._logLevel),\n      'profile':  this._profile,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.SolclientFactoryProperties = SolclientFactoryProperties;\n","const {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst { FactoryProfile, SolclientFactoryProfiles } = require('./solclient-factory-profiles');\nconst { Parameter } = require('solclient-validate');\nconst { ProfileBinding } = require('./profile-binding');\nconst { SolclientFactoryProperties } = require('./solclient-factory-properties');\n\nconst factoryState = {\n  initializeCount: 0,\n  initializers:    [],\n};\n/**\n * @global\n * @name solClientJS\n * @description\n * <b>solClientJS</b> is a full functioned Solace Messaging API written entirely in JavaScript.\n * Applications using the <i>solClientJS</i> API can access all the features of a\n * Solace Message Router.\n *\n * The API is intended for use by applications written in JavaScript, targetting\n * either <b>NODE</b> or a traditional web browser.\n *\n * All classes, objects, methods of the API are encapsulated in the {@link solace} namespace.\n * The starting point for all applications is {@link solace.SolclientFactory}. This factory object\n * generates the {@link solace.Session} for connecting to the Solace Message Router.\n * {@link solace.SolclientFactory} also generates the {@link solace.Message} object\n * which enncapsulates the messages and {@link solace.Destination} the application will use\n * to send and receive data.\n * @summary The Solace Message Router Messaging API for Javascript.\n * @importTypeDefinitions import {EventEmitter} from 'events';\n * @importTypeDefinitions import {Long} from 'long';\n */\n\n/**\n * A singleton used as the main factory for the messaging APIs. The very first operation by\n * any application must be to initialize the API:\n * * {@link solace.SolclientFactory.init}\n *\n * <i>SolclientFactory</i> provides methods to construct:\n * * {@link solace.Session}\n * * {@link solace.Message}\n * * {@link solace.Destination}\n *\n * Additionally <i>SolclientFactory</i> manages the\n * logging level in the API.\n * @namespace\n * @public\n * @memberof solace\n */\nconst SolclientFactory = {\n\n  /**\n   * Adds a function to be called on factory initialization\n   * @param {function(factoryProps, factoryState)} func initializer function to be called\n   * @internal\n   */\n  addInitializer(func) {\n    factoryState.initializers.push(func);\n  },\n\n  /**\n   * @param {function} func function to wrap\n   * @returns {function} new factory method\n   * @internal\n   */\n  createFactory(func) {\n    return function factoryMethod(...args) {\n      if (factoryState.initializeCount === 0) {\n        throw new OperationError('SolclientFactory not initialized', ErrorSubcode.INVALID_OPERATION);\n      }\n      return func(...args);\n    };\n  },\n\n  /**\n   * Initialize global properties. This function must be called before any other API call is made.\n   *\n   * Note: After the first call to this method, subsequent calls have no effect.\n   *\n   * @param {solace.SolclientFactoryProperties} [factoryProps] The initialization properties for\n   *  the factory, if required.\n   * @param {solace.LogImpl} [factoryProps.logger] A logging implementation\n   * @param {solace.LogLevel}[factoryProps.logLevel] The logging level to use\n   *  for filtering log events.\n   * @param {solace.SolclientFactoryProfiles}\n   *  [factoryProps.profile=solace.SolclientFactoryProfiles.version7]\n   *     The factory profile. This class cannot be created by an API user; choose one of the static\n   *     instances from {@link solace.SolclientFactoryProfiles}.\n   * @throws {solace.OperationError} Invalid logger implementation\n   * @returns {solace.SolclientFactory} For method chaining\n   */\n  init(factoryProps) {\n    if (factoryState.initializeCount > 0) {\n      return this;\n    }\n\n    const props = new SolclientFactoryProperties(factoryProps);\n    const profile = factoryProps && factoryProps.profile || SolclientFactoryProfiles.version7;\n    Parameter.isInstanceOf('factoryProps.profile', profile, FactoryProfile);\n    ProfileBinding.value = profile;\n\n    factoryState.initializers.forEach((initializer) => {\n      initializer.call(this, props, factoryState);\n    });\n    ++factoryState.initializeCount;\n\n    if ((factoryProps !== undefined) && (factoryProps !== null)) {\n      // Factory should not depend on other packages at file scope\n      // eslint-disable-next-line global-require\n      const { LOG_DEBUG } = require('solclient-log');\n      LOG_DEBUG('Factory properties:\\n', factoryProps);\n    }\n    return this;\n  },\n\n  /**\n   * @private\n   */\n  reset() {\n    factoryState.initializeCount = 0;\n  },\n\n\n  /**\n   * @returns {Number} Count of factory initializations.\n   *    Nonzero means cannot be initialized again.\n   * @internal\n   */\n  _getInitializeCount() {\n    return factoryState.initializeCount;\n  },\n\n  /**\n   * @private\n   * @name solace.SolclientFactory.profiles\n   * @type {solace.SolclientFactoryProfiles}\n   * @readonly\n   * @description The collection of {@link solace.FactoryProfile}. See a description of\n   * each in {@link solace.SolclientFactoryProfiles}.\n   */\n  get profiles() {\n    return SolclientFactoryProfiles;\n  },\n};\n\nmodule.exports.SolclientFactory = SolclientFactory;\n","const { Flow } = require('./lib/flow');\nconst { FlowOperation } = require('./lib/flow-operation');\nconst { PrivateFlowEventName } = require('./lib/private-flow-event-names');\n\nmodule.exports.Flow = Flow;\nmodule.exports.FlowOperation = FlowOperation;\nmodule.exports.PrivateFlowEventName = PrivateFlowEventName;\n","const { Enum } = require('solclient-eskit');\n\nconst FlowOperation = {\n  CONNECT:         'FlowOperation_CONNECT',\n  DISCONNECT:      'FlowOperation_DISCONNECT',\n  START:           'FlowOperation_START',\n  STOP:            'FlowOperation_STOP',\n  DISPOSE:         'FlowOperation_DESTROY',\n  GET_STATS:       'FlowOperation_GET_STATS',\n  RESET_STATS:     'FlowOperation_RESET_STATS',\n  GET_PROPERTIES:  'FlowOperation_GET_PROPERTIES',\n  GET_DESTINATION: 'FlowOperation_GET_DESTINATION',\n};\n\nmodule.exports.FlowOperation = Enum.new(FlowOperation);\n","const {\n  ErrorSubcode,\n  NotImplementedError,\n  OperationError,\n} = require('solclient-error');\nconst { EventEmitter } = require('solclient-events');\nconst { FlowOperation } = require('./flow-operation');\nconst { LogFormatter } = require('solclient-log');\nconst { PrivateFlowEventName } = require('./private-flow-event-names');\nconst { Stats } = require('solclient-stats');\n\n// Unless flow is disposed, these operations are always allowed\nconst ALWAYS_OPS = [\n  FlowOperation.DISPOSE,\n  FlowOperation.GET_STATS,\n  FlowOperation.GET_PROPERTIES,\n  FlowOperation.RESET_STATS,\n];\n\n\n/**\n * @classdesc Flow\n * * <b>This class is not exposed for construction by API users.</b>\n * A Flow is an abstract base class. A Flow represents a guaranteed message connection to the\n * Solace Message Router. There may be many Guaranteed Message\n * Consumers on a {@link solace.Session}, each\n * instantiated as a {@link solace.MessageConsumer}.\n * @memberof solace\n * @extends {solace.EventEmitter}\n * @private\n */\nclass Flow extends EventEmitter {\n\n  /**\n   * Creates a Flow instance.\n   * @constructor Flow\n   * @param {APIProperties} flowProperties The properties object for this flow.\n   * @param {Object} sessionInterfaceFactory Function that creates session interface methods\n   * @param {Object} [emitterOptions] The options to pass to the EventEmitter constructor.\n   * @private\n   */\n  constructor(flowProperties, sessionInterfaceFactory, emitterOptions) {\n    const emitterOptionsFull = Object.assign({}, emitterOptions);\n    emitterOptionsFull.emits = (emitterOptionsFull.emits || []).concat(\n      PrivateFlowEventName.values\n    );\n    super(emitterOptionsFull);\n    const sessionInterface = sessionInterfaceFactory(this);\n    const self = this;\n    this.logger = new LogFormatter((...args) =>\n      [`[session=${sessionInterface.sessionIdHex}]`, `[flow=${self.flowIdDec}]`, ...args]);\n    this.log = this.logger.wrap(this.log, this);\n    // dispose() was called on this flow.\n    // It is not always executed immediately, leaving time for the auto-ack.\n    this._disposing = false;\n    // The flow truly was destroyed, no more delays.\n    this._disposed = false;\n    this._userDisconnected = true;\n    this._properties = flowProperties;\n    this._sessionInterface = sessionInterface;\n    this._stats = new Stats(sessionInterface);\n    this._privateEventEmitter = new EventEmitter(emitterOptionsFull);\n  }\n\n  // Private event emitter functions, hidden from the public interface.\n  _emit(type, ...args) {\n    this._privateEventEmitter.emit(type, ...args);\n    this.emit(type, ...args);\n  }\n  _on(type, listener) {\n    this._privateEventEmitter.on(type, listener);\n  }\n  _once(type, listener) {\n    this._privateEventEmitter.once(type, listener);\n  }\n  _removeListener(type, listener) {\n    this._privateEventEmitter.removeListener(type, listener);\n  }\n\n  /**\n   * Clears all statistics for this Guaranteed Message Connection. All previous Guaranteed\n   * Message Connection statistics are lost\n   * when this is called.\n   * @throws {solace.OperationError}\n   *  * if the Message Consumer is disposed. subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  clearStats() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Clearing stats');\n    this._operationCheck(FlowOperation.RESET_STATS);\n    this._stats.resetStats();\n  }\n\n  /**\n   * Establish a Guaranteed Messaging connection.\n   * The Messge Consumer may immediately begin emitting events. The application is expected to\n   * add listeners for events on this Message Consumer before calling this method.\n   */\n  connect() {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Connecting');\n    this.userDisconnected = false;\n    this._operationCheck(FlowOperation.CONNECT);\n  }\n\n  /**\n   * Disposes the Guaranteed Message connection, removing all listeners and releasing references.\n   */\n  dispose() {\n    const { LOG_TRACE, LOG_DEBUG } = this.logger;\n    // The session may dispose the publisher or consumer, so be tolerant of\n    // multiple attempts to do so.\n    if (this._disposed || this._disposing) {\n      LOG_TRACE('Ignoring #dispose on disposed Guaranteed Message connection');\n      return;\n    }\n    LOG_TRACE('Disposing');\n\n    this._operationCheck(FlowOperation.DISPOSE);\n\n    this._disposing = true;\n\n    const terminate = () => {\n      this._disposed = true;\n      this._properties = null;\n      this._userDisconnected = true;\n      this._emit(this.getDisposedEvent());\n      this.disableEmitter();\n      this._privateEventEmitter.disableEmitter();\n      LOG_DEBUG('Disposed');\n    };\n    if (this._fsm._midDispatch) {\n      // weird case, dispose was called by the user from a message callback:\n      // Guard this in a timeout\n      const terminateWithRunningFSM = () => {\n        this._fsm.terminateFsm();\n        terminate();\n      };\n      //setImmediate(() => terminateWithRunningFSM());\n      setTimeout(() => terminateWithRunningFSM(), 0);\n    } else {\n      // normal case:\n      terminate();\n    }\n  }\n\n  /**\n   * Disconnects the Message Consumer in such a way that it can be reconnected.\n   */\n  disconnect() {\n    this._operationCheck(FlowOperation.DISCONNECT);\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Disconnecting');\n    this.userDisconnected = true;\n  }\n\n  /**\n   *\n   * Begins a disconnect that is not user-initiated.\n   *\n   * Must be overridden.\n   *\n   * @private\n   * @memberof Flow\n   */\n  _disconnectSession() {\n    this._operationCheck(FlowOperation.DISCONNECT);\n  }\n\n  /**\n   * Gets the event to be returned when the Consumer or Publisher is disposed.\n   *\n   * Must be overridden.\n   *\n   * @private\n   * @memberof Flow\n   */\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Abstract method');\n  }\n\n  /**\n   * Creates and returns copy of the properties for this object.\n   * @returns {?} The properties object\n   * @internal\n   */\n  getProperties() {\n    this._operationCheck(FlowOperation.GET_PROPERTIES);\n    return this._properties.clone();\n  }\n\n  /**\n   * Returns a statistic for this Guaranteed Message connection.\n   *\n   * @param {solace.StatType} statType The statistic to return.\n   * @returns {Number} The value for the statistic.\n   */\n  getStat(statType) {\n    this._operationCheck(FlowOperation.GET_STATS);\n    return this._stats.getStat(statType);\n  }\n\n  /**\n   * @param {AdMessage} message The message to be handled by this Consumer or Publisher\n   * @private\n   */\n  handleUncorrelatedControlMessage(message) { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Guaranteed Message Connection does not implement a control message handler', message);\n  }\n\n  /**\n   * @param {StatType} statType The stat to increment\n   * @param {Number} [value] The value to add to the statistic.\n   * @private\n   */\n  incStat(statType, value) {\n    this._stats.incStat(statType, value);\n  }\n\n  /**\n   * @param {any} event The event to be handled by this objects's FSM\n   * @private\n   */\n  processFSMEvent(event) {\n    this._fsm.processEvent(event);\n  }\n\n  /**\n   * @returns {String} An inspection of this object's properties\n   * @private\n   */\n  [util_inspect_custom]() {\n    return {\n      'flowId': this.flowIdDec,\n    };\n  }\n\n  /**\n   * @returns {String} A description of this Guaranteed Message Connection\n   */\n  toString() {\n    return this[util_inspect_custom]();\n  }\n\n  /**\n   * @returns {Boolean} Whether this Publisher or Consumer can be connected.\n   * @readonly\n   * @private\n   */\n  get canAck() {\n    return !this.disposed;\n  }\n\n  /**\n   * Returns true if this Guaranteed Message Consumer was disposed.\n   */\n  get disposed() {\n    return this._disposed;\n  }\n\n  get flowIdDec() {\n    return this.flowId || '(N/A)';\n  }\n\n  /**\n   * @returns {Number} The ID for this flow\n   * @readonly\n   * @private\n   */\n  get flowId() { // eslint-disable-line class-methods-use-this\n    return new NotImplementedError('Flow does not implement ID accessor');\n  }\n\n  /**\n   * @returns {solace.Session} The owning session for this MessageConsumer.\n   * @readonly\n   */\n  get session() {\n    return this._session;\n  }\n\n  get userDisconnected() {\n    return this._userDisconnecte;\n  }\n  set userDisconnected(value) {\n    this._userDisconnected = value;\n  }\n\n  /**\n   * @param {FlowOperation} operation The operation to check\n   * @returns {Boolean} `true` if the operation is allowed.\n   * @throws {@link solace.OperationError} if the operation is not allowed.\n   * @private\n   */\n  _operationCheck(operation) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Checking operation ${FlowOperation.describe(operation)}`);\n    if (this._disposed) {\n      throw new OperationError('Operation is invalid for Message Consumer in disposed state',\n                               ErrorSubcode.INVALID_OPERATION);\n    }\n\n    // Any read-only operation is always valid unless the object was disposed\n    // (which purges properties)\n    if (ALWAYS_OPS.some(v => v === operation)) return true;\n\n    if (operation === FlowOperation.DISCONNECT && this._isDisconnected()) {\n      throw new OperationError(\n        'Operation is invalid for Message Consumer in disconnected state',\n        ErrorSubcode.INVALID_OPERATION\n      );\n    }\n\n    return undefined;\n  }\n\n  _isDisconnected() { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Flow#_isDisconnected not implemented');\n  }\n\n}\n\nmodule.exports.Flow = Flow;\n","const { Enum } = require('solclient-eskit');\n\nconst PrivateFlowEventName = {\n  BIND_WAITING: 'PrivateFlowEventName_bindWaiting',\n};\n\nmodule.exports.PrivateFlowEventName = Enum.new(PrivateFlowEventName);\n","/**\n * @module solace/fsm\n */\n\nconst { FsmEvent } = require('./lib/event');\nconst { State } = require('./lib/state');\nconst { StateMachine } = require('./lib/state-machine');\n\nmodule.exports.FsmEvent = FsmEvent;\nmodule.exports.State = State;\nmodule.exports.StateMachine = StateMachine;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\n\n/**\n * @classdesc\n * This object type represents an entryPoint for a particular FSM state.\n *\n * Note this initial implementation isn't particularly efficient, but it is\n * very simple by making use of two state objects (one just inside of and\n * one just outside of) the state the entryPoint belongs to.  If necessary, we\n * could optimize this if we wish.\n * @extends FsmObject\n * @private\n */\nclass EntryPoint extends FsmObject {\n\n  /**\n  * @constructor\n  * @param {Object} spec The object specifier used to implement the named\n  *      parameter idiom.\n  * @param {fsm.State} spec.state The state that the entryPoint belongs\n  *      to.\n  * @param {String} spec.entryPointName The name of the entryPoint.\n  * @param {fsm.StateContext~reactionCallback} spec.func The reaction\n  *      function for the entryPoint, which defines where to transition to\n  *      after state has been entered.\n  */\n  constructor(spec) {\n    super({ name: spec.entryPointName });\n\n    let innerState;\n    this.impl = this.impl || {};\n    // The outer portion of the entryPoint accepts incoming transitions before\n    // entering the entryPoint's state.  Then the entryPoint's state is\n    // entered through the use of the outerEntryPoint's initial transition.\n    this.impl.outerState = new StateLib.State({\n      name:          `${spec.state.getName()} outerEntryPoint: ${spec.entryPointName}`,\n      parentContext: spec.state.getParent(),\n    }).initial(() => spec.state.transitionTo(innerState));\n\n    // The job of the inner portion of the entryPoint is to follow a\n    // transition as specified by the application's reaction function.\n    innerState = new StateLib.State({\n      name:          `${spec.state.getName()} innerEntryPoint: ${spec.entryPointName}`,\n      parentContext: spec.state,\n    }).initial(spec.func);\n  }\n\n  /**\n   * @returns {fsm.State} The destination state for a transition to the\n   *      EntryPoint.\n   */\n  getDestState() {\n    return this.impl.outerState;\n  }\n}\n\nmodule.exports.EntryPoint = EntryPoint;\n","const { FsmObject } = require('./object');\n\nclass FsmEvent extends FsmObject {\n}\n\nmodule.exports.FsmEvent = FsmEvent;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\n\n/**\n * @classdesc\n * This object type represents an exitPoint for a particular FSM state.\n *\n * Note this initial implementation isn't particularly efficient, but it is\n * very simple by making use of two state objects (one just inside of and\n * one just outside of) the state the exitPoint belongs to.  If necessary, we\n * could optimize this if we wish.\n * @private\n */\nclass ExitPoint extends FsmObject {\n\n  /**\n  * @constructor\n  * @param {Object} spec The object specifier used to implement the named\n  *      parameter idiom.\n  * @param {fsm.State} spec.state The state that the exitPoint belongs\n  *      to.\n  * @param {String} spec.exitPointName The name of the exitPoint.\n  * @param {fsm.StateContext~reactionCallback} spec.func The reaction\n  *      function for the exitPoint, which defines where to transition to\n  *      after state has been exited.\n  */\n  constructor(spec) {\n    super({ name: spec.exitPointName });\n\n    let outerState;\n    // The inner portion of the exitPoint accepts incoming transitions before\n    // exiting the exitPoint's state.  Then the exitPoint's state is exited\n    // through the use of the innerExitPoint's initial transition.\n    this.impl.innerState = new StateLib.State({\n      name:          `${spec.state.getName()} innerExitPoint: ${spec.exitPointName}`,\n      parentContext: spec.state,\n    }).initial(() => spec.state.transitionTo(outerState));\n\n        // The job of the outer portion of the exitPoint is to follow a\n        // transition as specified by the application's reaction function.\n    outerState = new StateLib.State({\n      name:          `${spec.state.getName()} outerExitPoint: ${spec.exitPointName}`,\n      parentContext: spec.state.getParent(),\n    }).initial(spec.func);\n  }\n\n  getDestState() {\n    return this.impl.innerState;\n  }\n}\n\nmodule.exports.ExitPoint = ExitPoint;\n","const { OperationError } = require('solclient-error');\n\n/**\n * @classdesc\n * This is a base class for various FSM-related objects.\n * @private\n */\nclass FsmObject {\n\n  /**\n   * @constructor\n   * @param {Object} spec The object specifier used to implement the named\n   *      parameter idiom.\n   * @param {String} spec.name The name of the object.\n   */\n  constructor(spec) {\n    if (!spec) {\n      throw new OperationError('No spec provided');\n    }\n    if (!spec.name) {\n      throw new OperationError('No name provided for spec');\n    }\n    this.impl = {\n      name: spec.name,\n    };\n  }\n\n  /**\n   * @returns {String} A string representation of the object.\n   */\n  toString() {\n    let extraStringInfo = this.getExtraStringInfo();\n    if (extraStringInfo.length > 0) {\n      extraStringInfo = `; ${extraStringInfo}`;\n    }\n    return `{${this.constructor.name}: ${this.getName()}${extraStringInfo}}`;\n  }\n\n  /**\n   * This is overridden by classes wanting to add more data, typically in the\n   * form of 'name: value; name: value'.\n   * @returns {String} Extra string information to be included in the object's\n   *      toString() output.\n   */\n  getExtraStringInfo() { // eslint-disable-line class-methods-use-this\n    return '';\n  }\n\n  /**\n   * @returns {?String} The name passed into the object specifier.\n   */\n  getName() {\n    return this.impl.name;\n  }\n\n}\n\nmodule.exports.FsmObject = FsmObject;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\nconst { Iterator } = require('solclient-eskit');\nconst { LOG_TRACE } = require('solclient-log');\n\nconst { makeIterator } = Iterator;\n\n/**\n * React to an event.\n * @callback StateContext.reactionCallback\n * @param {FsmEvent} event The event to react to.\n * @returns {StateContext.ReactionResult} One of the many possible\n *      reaction results that can be created by one of the following methods:\n *          - {@link StateContext#transitionTo}\n *          - {@link FsmState#internalTransition}\n *          - {@link FsmState#externalTransitionTo}\n *          - {@link FsmState#terminate}\n *          - {@link FsmState#eventUnhandled}\n */\n\n\n/**\n * @classdesc\n * This abstract class can host one or more states.  Concrete examples would\n * be a state, which can host one or more inner states, or a state machine,\n * which would typically have multiple top-level states.  It also serves as a\n * context in which transitions can occur.\n * @memberof solace\n * @private\n */\nclass StateContext extends FsmObject {\n  /**\n   * @constructor\n   * @param {Object} spec Object specifier used to implement the named parameter\n   *  idiom.\n   * @param {String} spec.name The name of the context.\n   */\n  constructor(spec) {\n    super(spec);\n    this.impl = this.impl || {};\n    this.impl.logPadding = '';\n  }\n\n  /**\n   * Gets the state-machine that hosts this state context.\n   * @returns {StateMachine} The FSM that hosts this context.\n   */\n  getStateMachine() {\n    return this.impl.ancestorList[0];\n  }\n\n  /**\n   * Sets the initial reaction for the state context.\n   * @param {StateContext.reactionCallback} func The reaction callback to be\n   *      called after the state is entered as the deepest state of a\n   *      transition, or for a state machine when it is started.\n   * @returns {StateContext} The object this function was called on\n   */\n  initial(func) {\n    if (this.impl.initialReaction) {\n      this.log(`Replacing ${this} initialReaction ${this.impl.initialReaction} with ${func}`);\n    }\n    this.impl.initialReaction = func.bind(this);\n    return this;\n  }\n\n  /**\n   * This is used for 'local' transitions.  However, we extend the formal\n   * definition of local transitions here.  The formal definition is that\n   * the dest state is within the src state, and the src state is not\n   * exited.  We extend this definition to include states where the src\n   * state is within dest. In this case, a local transition means that dest\n   * will not be exited and entered and the transition will occur in the\n   * context of dest before executing dest's initial transition.  Note that\n   * this definition of local transition matches that of\n   * {@link https://en.wikipedia.org/wiki/UML_state_machine#Local_versus_external_transitions|Wikipedia}.\n   * But it does not match figure 14.34 or section 14.5.12 of the\n   * {@link http://www.omg.org/spec/UML/2.5/PDF/|Formal UML Specification v2.5}.\n   * Nevertheless, it does seem helpful to be able to express a transition\n   * that does leave the destination state vs. a transition that does not.\n   *\n   * If neither the source nor the dest states are within the other, the\n   * behaviour is the same as an external transition -- src is always exited\n   * and dest is always entered.\n   *\n   * This is included in the StateContext instead of within the State itself\n   * since this can be used by the initial reaction for a state machine.\n   *\n   * @param {State} state The state to transition to.\n   * @param {StateContext.actionCallback} [action] Optional The action to perform as\n   *      part of the transition, if desired.\n   * @returns {StateContext.ReactionResult} the result object used\n   *      internally for further processing of the event.\n   */\n  transitionTo(state, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state,\n      action,\n    });\n  }\n\n  /**\n   * Used to terminate the FSM.\n   * @param {StateContext.actionCallback} action An optional action to\n   *      take within the FSM context after all states have been exited.\n   * @returns {StateContext.ReactionResult} The reaction result for the termination.\n   */\n  terminate(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getFinalState(),\n      action,\n    });\n  }\n\n  /**\n   * A callback to execute an action as part of a transition in the\n   * appropriate context.\n   *\n   * To be used only by the FSM infrastructure or unit tests.\n   *\n   * @callback StateContext.actionCallback\n   * @param {StateContext} context The context within which the action is\n   *      executed.  When the active state changes, this is done after\n   *      states are exited and before states are entered.  It is the\n   *      deepest context that contains the last exited and first entered\n   *      state as part of the transition.\n   * @param {FsmEvent} event The event that triggered the transition.\n   * @returns {Array.<StateContext>} The context's ancestor list.\n   * @protected\n   */\n  getAncestorList() {\n    return this.impl.ancestorList;\n  }\n\n  /**\n   * Perform a debug log with appropriate padding for the context.  The padding\n   * helps to visualize the level within the hierarchical state machine.\n   * @protected\n   */\n  log(...args) {\n    LOG_TRACE(this.impl.logPadding, ...args);\n  }\n\n  /**\n   * Called when the initial transition for the context needs to be taken.\n   * @param {FsmEvent} [event] The event causing this transition; undefined for the\n   *      FSM's initial transition.\n   * @returns {StateContext.ReactionResult} the result to be processed by\n   *      the FSM infrastructure.\n   * @protected\n   */\n  onInitial(event) {\n    let result;\n\n    if (this.impl.initialReaction) {\n      this.log(`Initial: for ${this}`);\n      result = this.impl.initialReaction(event);\n      if (result.external) {\n        throw new Error(`Initial reaction for ${this} returned external transitions`);\n      }\n      return result;\n    }\n\n    if (!(this instanceof (StateLib.State))) {\n      throw new Error(`Missing initial reaction for ${this}`);\n    }\n\n    // If there is no initial reaction, then we just enter this state.\n    // Technically this is a malformed FSM if there are inner states and\n    // this state has no initial reaction.  We won't police this since it\n    // isn't easily done with the data we are otherwise maintaining (we only\n    // know about parent states, not children), and such a problem would be\n    // easily caught by testing of the FSM.\n    return this.transitionTo(this);\n  }\n\n  /**\n   * After a reaction function has been called, this function processes the\n   * returned {@link StateContext.ReactionResult}.\n   * @param {StateContext.ReactionResult} result The result of a reaction.\n   * @param {FsmEvent|undefined} e The event that triggered the reaction;\n   *      undefined if this was due to the initial reaction.\n   * @returns {State} The active state of the FSM after the ReactionResult was\n   *      processed.\n   * @protected\n   */\n  processReactionResult(result, e) {\n    let curContext = this;\n\n    if (!result.destState) {\n      return this;\n    }\n\n    const destStateIter = this.lowestCommonAncestor(result);\n\n    // exit states until we get to the LCA\n    while (curContext !== destStateIter.deref()) {\n      curContext.onExit();\n      curContext = curContext.getParent();\n    }\n\n    // perform the transition\n    if (result.action) {\n      result.action(curContext, e);\n    }\n\n    curContext.log(`Action: transition to ${result.destState} in context ${curContext}`);\n\n    // Start by incrementing the iterator so we don't enter the\n    // context, which we are already in.  Then enter remaining states\n    // in the list.\n    for (destStateIter.incr(); !destStateIter.end(); destStateIter.incr()) {\n      curContext = destStateIter.deref();\n      curContext.onEntry();\n    }\n\n    // execute the initial transition in the destState.\n    const destInitial = curContext.onInitial(e);\n    if (destInitial.destState !== curContext) {\n      return curContext.processReactionResult(destInitial, e);\n    }\n    return curContext;\n  }\n\n  /**\n   * For a given reactionResult, this function returns an iterator to the\n   * context in which to process a transition from 'self' to\n   * 'reactionResult.destState'.  Advancing the iterator provides the states\n   * that need to be entered after the transition is processed.\n   * @param {ReactionResult} reactionResult An object created with one of the\n   *                                        reaction result methods defined in\n   *                                        either a state context or a state.\n   * @returns {Iterator} The iterator where the first element is the\n   * context in which to execute the transaction, and subsequent elements are\n   * to be entered after executing the transaction.\n   * @protected\n   */\n  lowestCommonAncestor(reactionResult) {\n    const ancestorList = this.impl.ancestorList;\n    const destAncestorList = reactionResult.destState.getAncestorList();\n    let i;\n\n    // Make sure the states belong to the same state machine\n    if (ancestorList[0] !== destAncestorList[0]) {\n      throw new Error(`No common ancestor between (${this} in ${ancestorList[0]}) and (${reactionResult.destState} in ${destAncestorList[0]})`);\n    }\n\n    // Optimize case where the two states are the same.  This would be the\n    // case for internal and self-transitions.\n    if (this === reactionResult.destState) {\n      i = ancestorList.length;\n      if (reactionResult.external) {\n        // self-transition, must exit then re-enter state.  Therefore,\n        // the context is our parent.\n        --i;\n      }\n    } else {\n      for (i = 1; i < ancestorList.length; ++i) {\n        if (ancestorList[i] !== destAncestorList[i]) {\n          break;\n        }\n      }\n\n      // Check if one state is within the other state.\n      if ((i === ancestorList.length) || (i === destAncestorList.length)) {\n        // One state within the other. Check whether this is a local\n        // or an external transition.\n        if (reactionResult.external) {\n          --i;    // Need to exit/re-enter the outermost state\n        }\n      }\n    }\n\n    // Here 'i' points to the first state to be entered after executing the\n    // transition.  We make the iterator with 'i-1' so that the first element\n    // is the context within which to execute the transition.\n    return makeIterator(destAncestorList, i - 1);\n  }\n\n  setLogPadding(padding) {\n    this.impl.logPadding = padding;\n  }\n}\n\n/**\n * @classdesc\n * A ReactionResult is suitable as a return value from a reaction function\n * or an initial reaction.\n * @private\n */\nStateContext.ReactionResult = class {\n  /**\n   * The ReactionResult constructor should never be invoked by users of the\n   * infrastructure. It should only be used by various public methods of\n   * StateContext or State, which return a ReactionResult.\n   *\n   * @param {Object} spec Defined according to members described below for\n   *      events that are handled by the reaction function; undefined if the\n   *      event was not handled by the reaction function.  For initial\n   *      reactions, spec must NOT be undefined.\n   * @param {StateContext} spec.caller The state context from which\n   *      {StateContext.ReactionResult} is being constructed.\n   * @param {State} spec.destState The destination state to\n   *      transition to.\n   * @param {StateContext.actionCallback} [spec.action] The function to call in\n   *      the transition context after the appropriate states have been\n   *      exited, if desired; undefined if no action is to be performed as a\n   *      result of the transition.\n   * @param {Boolean} spec.external True if the transition is an external\n   *      transition; false or undefined otherwise.\n   * @constructor\n   */\n  constructor(spec) {\n    if (!spec || !spec.caller || !(spec.caller instanceof StateContext)) {\n      throw new Error('spec.caller is required to be a StateContext');\n    }\n\n    if (!spec.caller.getStateMachine().isRunning()) {\n      throw new Error('ReactionResult objects can only be created while processing events');\n    }\n    if (spec.destState) {\n      if (!(spec.destState instanceof StateLib.State)) {\n        throw new Error('destState must be a State object');\n      }\n      if (spec.action && (typeof (spec.action) !== 'function')) {\n        throw new Error('action must be a function');\n      }\n      this.destState = spec.destState;\n      this.action = spec.action;\n      this.external = spec.external;\n    }\n  }\n};\n\nmodule.exports.StateContext = StateContext;\n","const { LOG_ERROR } = require('solclient-log');\nconst { State } = require('./state');\nconst { StateContext } = require('./state-context');\n\n/**\n * @classdesc\n * This is a state machine that can host states.  States themselves can also\n * host inner states in a hierarchical manner.  This class also provides the\n * basic interface for manipulating the current state via processing of\n * events, and querying the current state through 'getActiveState' methods.\n *\n * @private\n * @memberof solace\n */\nclass StateMachine extends StateContext {\n  /**\n   * @constructor\n   *\n   * @param {Object} spec The object specifier for the FSM.\n   * @param {String} spec.name The name of the FSM, used in debug logs.\n   */\n  constructor(spec) {\n    if (spec.parentContext) {\n      throw new Error(`State machine cannot have parent state: ${spec.parentContext}`);\n    }\n    super(spec);\n    this.impl.ancestorList = [this];\n    this.impl.eventQueue = [];\n    this.impl.finalState = new State({ name: 'impl.final', parentContext: this });\n    this.impl.handleUncaughtException = (ev, exc) => {\n      LOG_ERROR(`Uncaught exception in ${this} while processing ${ev}: ${exc.stack}`);\n      return this.terminate();\n    };\n  }\n\n  /**\n   * This method enqueues the given function, and begins execution of queued functions if\n   * they aren't already executing.\n   * @param {Function} func The function to enqueue and execute.\n   * @returns {Boolean} `true` if the supplied function has completed; false if it was deferred.\n   */\n  process(func) {\n    const { impl } = this;\n    const { eventQueue } = impl;\n\n    eventQueue.push(func);\n    if (impl.processingEvents) {\n      return false;\n    }\n    impl.processingEvents = true;\n\n    while (eventQueue.length) {\n      const evt = eventQueue.shift();\n      evt.apply(this);\n    }\n\n    impl.processingEvents = false;\n    this._onEventCompletion();\n    return true;\n  }\n\n  /**\n   * This method starts a state machine after it has been created and states\n   * have been associated and configured any time getCurrentState() returns\n   * undefined.  This would be after initial creation and after the state\n   * machine has terminated (i.e. transitioned to the final state).\n   */\n  start() {\n    if (this.getCurrentState()) {\n      throw new Error(`Cannot start ${this.getName()}; it is already started.`);\n    }\n\n    this.process(() => {\n      const result = this.onInitial();\n\n      // A state machine's onInitial must specify a destState, the state\n      // cannot be the state machine itself, and the state must have the\n      // state machine as the top ancestor.\n      if (result.destState === undefined) {\n        throw new Error(`Missing destination state from initial transition for ${this}`);\n      }\n\n      if (result.destState === this) {\n        throw new Error(`Destination state for initial transition for ${this} cannot be the FSM.`);\n      }\n\n      const destAncestorList = result.destState.getAncestorList();\n      if (destAncestorList[0] !== this) {\n        throw new Error(`Invalid destination state (${result.destState\n          }) from initial transition for state machine (${this\n          }); destState ancestor (${destAncestorList[0]})`);\n      }\n\n      this.impl.currentState = this.processReactionResult(result);\n    });\n  }\n\n  /**\n   * Used to query whether the state machine is currently running\n   * @returns {Boolean} `true` if the state machine is processing events; false otherwise.\n   */\n  isRunning() {\n    return this.impl.processingEvents;\n  }\n\n  /**\n   * This is the main function to invoke an FSM with an event.\n   * @param {FsmEvent} evt The event to be processed by the FSM.\n   */\n  processEvent(evt) {\n    const { impl } = this;\n    if (!this.process(() => {\n      this.log(`Processing event ${evt}`);\n      let result;\n      if (impl.currentState) {\n        try {\n          result = impl.currentState.handleEvent(evt);\n          impl.currentState = impl.currentState.processReactionResult(result, evt);\n        } catch (exc) {\n          this.log(`Caught exception ${exc}, continuing`);\n          result = impl.handleUncaughtException.call(impl.currentState,\n                                                     evt,\n                                                     exc);\n          impl.currentState = impl.currentState.processReactionResult(result, evt);\n        }\n      }\n    })) {\n      // Didn't run immediately\n      this.log(`Deferring event ${evt}`);\n    }\n  }\n\n  /**\n   * Terminates the FSM by transitioning the FSM to its final state. After\n   * this returns, the FSM may be started again with @link start.  This method\n   * should only be called externally from the FSM, not from within a reaction.\n   * To terminate the FSM within a reaction, use the\n   * {@link StateContext.ReactionResult} returned by {@link State#terminate}.\n   */\n  terminateFsm() {\n    const curState = this.getCurrentState();\n    if (!curState) {\n      return;\n    }\n    if (this.impl.processingEvents) {\n      throw new Error('Cannot terminate state machine while FSM is processing ' +\n            'events. To terminate the FSM from within a reaction, return ' +\n            'State~terminate() from a reaction.');\n    }\n    this.process(() => {\n      const result = curState.terminate();\n      this.impl.currentState = curState.processReactionResult(result);\n    });\n  }\n\n  /**\n   * This should only be called from within the context of a reaction\n   * function, which is to say a function called by the FSM infrastructure\n   * that returns {@link StateContext~ReactionResult}.  The purpose of this\n   * function is to set a function to be called after the currently\n   * executing event is completely handled, which includes the execution of\n   * any events that have been or will be queued as a result of processing\n   * the current event.\n   *\n   * Typical uses of this would be to set a function that does one of:\n   * 1. Throws an exception to the caller.\n   * 2. Calls an application callback.\n   * @param {Function} postEventAction function to call when the FSM has finished\n   *  processing events.  The context (i.e. 'this') will be the FSM when it\n   *  is called.\n   */\n  setPostEventAction(postEventAction) {\n    if (!this.impl.processingEvents) {\n      throw new Error('Cannot set post event hook unless FSM is processing events.');\n    }\n    if (!postEventAction || typeof postEventAction !== 'function') {\n      // TBD: Do we need to allow clearing of the hook?  Not that\n      // I'm aware of for the known use cases.  If we want to allow\n      // it, I propose adding a 'clearPostEventAction' rather than\n      // allowing null or undefined as the argument.\n      throw new Error(`postEventAction must be a function; got (${postEventAction})`);\n    }\n    this.impl.postEventAction = postEventAction.bind(this);\n  }\n\n  /**\n   * Called by the FSM when it finishes processing events.  If a\n   * postEventAction had been set, it will be called, then cleared.\n   * @private\n   */\n  _onEventCompletion() {\n    const action = this.impl.postEventAction;\n    if (action) {\n      this.impl.postEventAction = undefined;\n      this.log('Running post event action');\n      action.apply(this);\n    }\n  }\n\n  /**\n   * Returns the innermost active state.\n   *\n   * If regions were implemented, this would return an iterator to innermost\n   * active states.\n   *\n   * @returns {StateContext} The innermost active state.\n   */\n  getCurrentState() {\n    return this.impl.currentState;\n  }\n\n  /**\n   * Gets an active state by name.  Returns undefined if the named state is\n   * not currently active.\n   *\n   * Note the returned state may not be the innermost state as returned by\n   * {@link StateMachine#getCurrentState}.  If the innermost active state is not\n   * returned, the returned state is guaranteed to contain the innermost active\n   * state.\n   *\n   * @param {String} name The name of the state to be retrieved.\n   * @returns {?StateContext} The state with the specified name, if the\n   *      state is active; undefined otherwise.  Note the returned state may not\n   *      be the innermost active state.\n   */\n  getActiveState(name) {\n    const activeStates = this.impl.currentState.getAncestorList();\n    // Don't include the first ancestor in the loop since it is the state\n    // machine itself, not a state.\n    for (let i = 1; i < activeStates.length; ++i) {\n      if (activeStates[i].getName() === name) {\n        return activeStates[i];\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Checks if the named state is currently active.\n   * @param {String} name The name of the state to be queried.\n   * @returns {Boolean} Whether or not the named state is active.\n   */\n  isStateActive(name) {\n    return this.getActiveState(name) !== undefined;\n  }\n\n  /**\n   * Allows a reaction to be registered for unhandled events in the FSM.  The\n   * default reaction is to log the unhandled event at debug and remain in the\n   * current state with no other side effects.\n   * @param {StateContext.reactionCallback} r The reaction to be invoked when an\n   *      event is unhandled by the FSM.\n   * @returns {StateMachine} This StateMachine object.\n   */\n  unhandledEventReaction(r) {\n    if (typeof r !== 'function') {\n      throw new Error(`In ${this}: unhandled event reaction must be a function; got ${r}`);\n    }\n    this.impl.handleUnhandledEvent = r.bind(this);\n    return this;\n  }\n\n  /**\n   * This allows a reaction to be registered for uncaught exceptions while\n   * processing events.  Generally, it is preferred to catch exceptions from\n   * within reaction functions.  However, this is a good way to safeguard\n   * against missed exceptions.  Usually an error should be logged here,\n   * which is the default behaviour.\n   *\n   * Also note that this is only called for either:\n   * - an exception thrown from an event reaction;\n   * - an exception thrown from a transition action\n   * If exceptions are thrown from within state entry, exit, initials, etc,\n   * this function is not invoked.  These functions may end up getting\n   * invoked from the transition taken as a result of the exception in the\n   * first place.  The generate another exception would be difficult to\n   * handle in a sensible way.  Users of this infrastructure must always\n   * catch exceptions from these functions.\n   *\n   * @param {fsm.StateContext.reactionCallback} r The reaction to be\n   *      invoked when an exception has not been caught by another of the\n   *      FSM's reactionCallbacks.  When this function is invoked, 'this'\n   *      will be the FSM's current state.\n   * @returns {StateMachine} `this`, for method chaining.\n   */\n  uncaughtExceptionReaction(r) {\n    if (typeof r !== 'function') {\n      throw new Error(`In ${this}: Uncaught exception reaction must be a function; got ${r}`);\n    }\n    this.impl.handleUncaughtException = r;\n    return this;\n  }\n\n  /**\n   * Used by the implementation to get the final state.  This should never be\n   * used by applications.  Their only need to reference this state should be\n   * indirectly via the {@link State#terminate} function.\n   * @returns {State} The FSM's final state, which is a hidden implementation\n   *      detail of the FSM.\n   * @protected\n   */\n  getFinalState() {\n    return this.impl.finalState;\n  }\n}\n\nmodule.exports.StateMachine = StateMachine;\n","const { EntryPoint } = require('./entry-point');\nconst { ExitPoint } = require('./exit-point');\nconst { StateContext } = require('./state-context');\n\n/**\n * @classdesc\n * This class represents a state in a state machine.\n * @private\n */\nclass State extends StateContext {\n  /**\n   * @constructor\n   * @param {Object} spec Object specifier used to implement the named parameter\n   *  idiom.  In addition to the properties documented here, it is also expected\n   *  to have properties required by the [StateContext base class]{@link StateContext}.\n   * @param {String} spec.name The name of the state, used in debug logs.\n   * @param {State|StateMachine} spec.parentContext One of:\n   *  - The parent state object or;\n   *  - The stateMachine object for top-level states.\n   * @param {Object} [extensions] Additional methods to add to the state.\n   */\n  constructor(spec, extensions = null) {\n    super(spec);\n\n    const parentContext = spec.parentContext;\n    Object.assign(this.impl, {\n      parentContext,\n      reactions:            {},\n      entryPoints:          {},\n      exitPoints:           {},\n      ancestorList:         [...parentContext.getAncestorList(), this],\n      handleUnhandledEvent: e => (\n        parentContext.handleEvent\n          ? parentContext.handleEvent(e)\n          : parentContext.impl.handleUnhandledEvent(e)\n      ),\n    });\n    if (parentContext) this.log = parentContext.log.bind(this);\n\n    // Extend and bind functions\n    Object.keys(extensions || {}).forEach((k) => {\n      const extension = extensions[k];\n      this[k] = typeof extension === 'function' ? extension.bind(this) : extension;\n    });\n\n    this.setLogPadding(' '.repeat(this.impl.ancestorList.length));\n  }\n\n  /**\n   * Register a reaction function for a particular event.\n   * @param {String} eventName The name of the event func is to react to.\n   * @param {StateContext.reactionCallback} func The function to call when\n   *  the state processes an event with the name eventName.  The function is\n   *  bound to this object so that this refers to this state object when it\n   *  is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  reaction(eventName, func) {\n    if (!eventName) throw new Error('No event name for reaction');\n    if (!func) throw new Error(`No reaction function for reaction ${eventName}`);\n\n    this.log(`Adding reaction to ${this} for event ${eventName}`);\n\n    if (this.impl.reactions[eventName]) {\n      this.log(`Replacing reaction ${this.impl.reactions[eventName]} with ${func}`);\n    }\n    this.impl.reactions[eventName] = func.bind(this);\n    return this;\n  }\n\n  /**\n   * Create an entryPoint for this state.\n   * @param {String} entryPointName The name of the entryPoint being created.\n   * @param {StateContext.reactionCallback} func The reaction to invoke after\n   *  the state is entered via this entryPoint\n   * @returns {State} This state object.\n   * @public\n   */\n  entryPoint(entryPointName, func) {\n    if (!entryPointName) throw new Error('No entry point name for entry point');\n    if (!func) throw new Error(`No reaction function for entry point ${entryPointName}`);\n\n    this.log(`Adding entryPoint ${entryPointName} to ${this}`);\n\n    if (this.impl.entryPoints[entryPointName]) {\n      this.log(`EntryPoint ${entryPointName} already exists in ${this}`);\n      return this;\n    }\n\n    this.impl.entryPoints[entryPointName] = new EntryPoint({\n      state: this,\n      entryPointName,\n      func,\n    });\n\n    return this;\n  }\n\n  /**\n   * Create an exitPoint for this state.\n   * @param {String} exitPointName The name of the exitPoint being created.\n   * @param {StateContext.reactionCallback} func The reaction to invoke after\n   *  the state is exited via this exitPoint.\n   * @returns {State} This state object.\n   * @public\n   */\n  exitPoint(exitPointName, func) {\n    if (!exitPointName) throw new Error('No exit point name for entry point');\n    if (!func) throw new Error(`No reaction function for exit point ${exitPointName}`);\n\n    this.log(`Adding exitPoint ${exitPointName} to ${this}`);\n\n    if (this.impl.exitPoints[exitPointName]) {\n      this.log(`ExitPoint ${exitPointName} already exists in  ${this}`);\n      return this;\n    }\n\n    this.impl.exitPoints[exitPointName] = new ExitPoint({\n      state: this,\n      exitPointName,\n      func,\n    });\n\n    return this;\n  }\n\n  /**\n   * @param {String} entryPointName The name of the entry point to be\n   *      transitioned to.\n   * @returns { StateContext } The state context to transition to when\n   *      entering via the state's entryPoint named entryPointName.\n   * @protected\n   */\n  getEntryPointDestState(entryPointName) {\n    if (this.impl.entryPoints[entryPointName] === undefined) {\n      this.log(`${this}: EntryPoint ${entryPointName} does not exist.`);\n      return this;\n    }\n\n    return this.impl.entryPoints[entryPointName].getDestState();\n  }\n\n  /**\n   * @param {String} exitPointName The name of the exit point to be\n   *      transitioned to.\n   * @returns {StateContext} The state context to transition to when\n   *      exiting via the state's exitPoint named exitPointName.\n   * @protected\n   */\n  getExitPointDestState(exitPointName) {\n    if (this.impl.exitPoints[exitPointName] === undefined) {\n      this.log(`${this}: ExitPoint ${exitPointName} does not exist.`);\n      return this;\n    }\n\n    return this.impl.exitPoints[exitPointName].getDestState();\n  }\n\n  /**\n   * Register a function to be called when the state is entered.\n   * @param {function} func The function to call when the state is entered.\n   *  The function is bound to this object so that this refers to this\n   *  state object when it is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  entry(func) {\n    if (this.impl.appEntryFunc) {\n      this.log(`Replacing entry function ${this.impl.appEntryFunc} with ${func}`);\n    }\n    this.impl.appEntryFunc = func.bind(this);\n    return this;\n  }\n\n  /**\n   * Register a function to be called when the state is exited.\n   * @param {function} func The function to call when the state is exited.\n   *  The function is bound to this object so that this refers to this\n   *  state object when it is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  exit(func) {\n    if (this.impl.appExitFunc) {\n      this.log(`Replacing exit function ${this.impl.appExitFunc} with ${func}`);\n    }\n    this.impl.appExitFunc = func.bind(this);\n    return this;\n  }\n\n  /**\n   * This is the same as [transitionTo]{@link StateContext#transitionTo},\n   * except the outermost state is exited if the source state is within the\n   * dest state or vice versa.  If one state is not within the other, this\n   * is equivalent to [transitionTo]{@link StateContext#transitionTo}.\n   * @param {State} state The state to transition to; if undefined, it is\n   *      a self-transition.\n   * @param {StateContext.actionCallback} [action] Optional The action to perform as part\n   *      of the transition, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition.\n   */\n  externalTransitionTo(state, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state,\n      action,\n      external:  true,\n    });\n  }\n\n  /**\n   * This is similar to [transitionTo]{@link StateContext#transitionTo}, except\n   * that this is a transition to a named entryPoint created on state.  If the\n   * named entryPoint does not exist, this is a malformed FSM and the behaviour\n   * is undefined.\n   * @param {State} state The state that has the named entryPoint.\n   * @param {String} entryPointName The name of the entryPoint of state.\n   * @param {StateContext.actionCallback} action The action to perform as part of\n   *      the transaction, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  transitionToEntryPoint(state, entryPointName, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state.getEntryPointDestState(entryPointName),\n      action,\n    });\n  }\n\n  /**\n   * This is similar to [transitionTo]{@link StateContext#transitionTo}, except\n   * that this is a transition to a named exitPoint created on state.  If the\n   * named exitPoint does not exist, this is a malformed FSM and the behaviour\n   * is undefined.\n   * @param {State} state The state that has the named exitPoint.\n   * @param {String} exitPointName The name of the exitPoint of state.\n   * @param {StateContext.actionCallback} [action] Optional The\n   * action to perform as part of the transaction, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  transitionToExitPoint(state, exitPointName, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state.getExitPointDestState(exitPointName),\n      action,\n    });\n  }\n\n  /**\n   * If a reaction evaluates the guard conditions for the reaction and none\n   * succeed, the eventUnhandled\n   * [ReactionResult]{@link StateContext.ReactionResult} should be\n   * returned.  This causes the FSM to continue looking for a reaction to\n   * process the event.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  eventUnhandled() {\n    return new StateContext.ReactionResult({\n      caller: this,\n    });\n  }\n\n  /**\n   * This [ReactionResult]{@link StateContext.ReactionResult} is used\n   * when an event has been handled in a state and the transition is a local\n   * transition back to itself.  Note that internal transitions never cause\n   * state exits or entries -- if the internal transition is defined in an\n   * outer state that contains the active state, then the behaviour is as if the\n   * active state has inherited the internal transition from the outer state.\n   * @param {?Function} action The action to perform in the transition.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  internalTransition(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getCurrentState(),\n      action,\n    });\n  }\n\n  /**\n   * Used to terminate the FSM.\n   * @param {StateContext.actionCallback} action An optional action to\n   *      take within the FSM context after all states have been exited.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  terminate(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getFinalState(),\n      action,\n    });\n  }\n\n\n  /**\n   * @returns {StateContext} The parent state context for this state, which\n   *      could either be an outer state, or the state machine for top-level\n   *      states.\n   * @protected\n   */\n  getParent() {\n    return this.impl.parentContext;\n  }\n\n  /**\n   * Called when a state is being entered.  Calls the app's registered entry\n   * function, if any.\n   * @protected\n   */\n  onEntry() {\n    this.log(`Entering: ${this}`);\n    if (this.impl.appEntryFunc) {\n      this.impl.appEntryFunc();\n    }\n  }\n\n  /**\n   * Called when a state is being exited.  Calls the app's registered exit\n   * function, if any.\n   * @protected\n   */\n  onExit() {\n    this.log(`Exiting: ${this}`);\n    if (this.impl.appExitFunc) {\n      this.impl.appExitFunc();\n    }\n  }\n\n  /**\n   * Called when a state is to handle an event.\n   * @param {FsmEvent} e The event to handle.\n   * @returns {ReactionResult} The result of handling the event.\n   * @protected\n   */\n  handleEvent(e) {\n    this.log(`Process: ${e}`);\n    const reaction = this.impl.reactions[e.getName()];\n    if (reaction) {\n      const result = reaction(e);\n      // All ReactionResults in which an event is considered handled\n      // have a destState defined.\n      if (!result) {\n        this.log(`Reaction returned undefined: ${e} in ${this}`);\n      }\n      if (result.destState) {\n        this.log(`Handled: ${e}`);\n        return result;\n      }\n      this.log(`Unhandled: ${e} in ${this}`);\n    } else {\n      this.log(`No reaction: ${e} in ${this}`);\n    }\n\n    return this.impl.handleUnhandledEvent(e);\n  }\n}\n\nmodule.exports.State = State;\n","const { ConsoleLogImpl } = require('./lib/console-log-impl');\nconst { GlobalBinding } = require('./lib/global-binding');\nconst { LogImpl } = require('./lib/log-impl');\nconst { LogLevel } = require('./lib/log-levels');\n\nconst { Parameter } = require('solclient-validate');\nconst { SolclientFactory } = require('solclient-factory');\n\nconst {\n  isEnumMember,\n  isFunction,\n} = Parameter;\n\nconst {\n  getImpl,\n  getLogLevel,\n  setImpl,\n  setLogLevel,\n} = GlobalBinding;\n\nconst forwarder = {};\nfunction buildLogForwarder() {\n  Object.assign(forwarder, {\n    trace(...args) {\n      const impl = getImpl();\n      if (impl && impl.trace && getLogLevel() >= LogLevel.TRACE) {\n        impl.trace.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    debug(...args) {\n      const impl = getImpl();\n      if (impl && impl.debug && getLogLevel() >= LogLevel.DEBUG) {\n        impl.debug.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    info(...args) {\n      const impl = getImpl();\n      if (impl && impl.info && getLogLevel() >= LogLevel.INFO) {\n        impl.info.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    warn(...args) {\n      const impl = getImpl();\n      if (impl && impl.warn && getLogLevel() >= LogLevel.WARN) {\n        impl.warn.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    error(...args) {\n      const impl = getImpl();\n      if (impl && impl.error && getLogLevel() >= LogLevel.ERROR) {\n        impl.error.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    fatal(...args) {\n      const impl = getImpl();\n      if (impl && impl.fatal) {\n        impl.fatal.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n  });\n}\nbuildLogForwarder(); // stripped by production build\n\nfunction addGlobalFuncs(source, target) {\n  Object.keys(forwarder).forEach((k) => {\n    target[`LOG_${k.toUpperCase()}`] = source[k];\n  });\n}\n\nclass LogFormatter {\n  constructor(formatter) {\n    this._formatter = (() => {\n      if (typeof formatter === 'function') return formatter;\n      if (typeof formatter === 'string') return function prepend(...args) { return [formatter, ...args]; };\n      if (!formatter) return function passthrough(...args) { return [...args]; };\n      return formatter;\n    })();\n    const self = this;\n    Object.keys(forwarder).forEach((key) => {\n      this[key] = function forward(...args) {\n        return forwarder[key].apply(null, self._formatter(...args));\n      };\n    });\n    addGlobalFuncs(this, this);\n  }\n\n  get formatter() {\n    return this._formatter;\n  }\n  set formatter(func) {\n    this._formatter = func;\n  }\n\n  wrap(genericFunction, targetSelf) {\n    const self = this;\n    return function genericLogWrapper(...args) {\n      return genericFunction.apply(targetSelf, self._formatter(...args));\n    };\n  }\n\n}\n\n/**\n * Gets the current log level, which was set by {@link solace.SolclientFactory.init} or a\n * subsequent call to {@link solace.SolclientFactory.setLogLevel}.\n *\n * @returns {solace.LogLevel} The current log level.\n */\nSolclientFactory.getLogLevel = () => getLogLevel();\n\n  /**\n   * This method changes the current log level from the level set when\n   * {@link solace.SolclientFactory.init} was called.\n   *\n   * @param {solace.LogLevel} newLevel The new log level to set.\n   * @throws {solace.OperationError} Invalid log level\n   */\nSolclientFactory.setLogLevel = (newLevel) => {\n  isEnumMember('logLevel', newLevel, LogLevel);\n  setLogLevel(newLevel);\n};\n\nSolclientFactory.addInitializer((props) => {\n  setLogLevel(props.logLevel);\n\n  const logger = props.logger || getImpl() || new ConsoleLogImpl();\n  // Validate that the supplied log implementation is a superset of LogImpl\n  Object.keys(new LogImpl()).forEach(key => isFunction(`logger.${key}`, logger[key]));\n\n  setImpl(logger);\n});\n\naddGlobalFuncs(forwarder, module.exports);\nmodule.exports.LogImpl = LogImpl;\nmodule.exports.LogLevel = LogLevel;\nmodule.exports.Binding = GlobalBinding;\nmodule.exports.ConsoleLogImpl = ConsoleLogImpl;\nGlobalBinding.setImpl(new ConsoleLogImpl());\nmodule.exports.LogFormatter = LogFormatter;\n","const { LogImpl } = require('./log-impl');\n\nconst STUB = () => undefined;\n\nfunction generateLogHeader(levelStr) {\n  const date = new Date();\n  const levelStrPadding = ' '.repeat(6 - levelStr.length);\n  let YY = String(date.getFullYear());\n  let MM = String(date.getMonth() + 1);\n  let DD = String(date.getDate());\n  let hh = String(date.getHours());\n  let mm = String(date.getMinutes());\n  let ss = String(date.getSeconds());\n  let ms = String(date.getMilliseconds());\n\n  YY = '0'.repeat(4 - YY.length) + YY;\n  MM = MM.length < 2 ? `0${MM}` : MM;\n  DD = DD.length < 2 ? `0${DD}` : DD;\n  hh = hh.length < 2 ? `0${hh}` : hh;\n  mm = mm.length < 2 ? `0${mm}` : mm;\n  ss = ss.length < 2 ? `0${ss}` : ss;\n  ms = ms.length < 3 ? `0${ms}` : ms;\n  ms = ms.length < 3 ? `0${ms}` : ms; // twice: pad to 3\n\n  return [`${YY}-${MM}-${DD} ${hh}:${mm}:${ss}.${ms}`, `${levelStr}${levelStrPadding}`];\n}\n\n/**\n * @classdesc\n * A log implementation that uses the global or window console.\n *\n * This is the default log implementation used by the API if no logger was\n * supplied via {@link solace.SolclientFactoryProperties}.\n *\n * @memberof solace\n * @private\n */\nclass ConsoleLogImpl extends LogImpl {\n  /**\n   * @constructor\n   * @param {Object} [consoleIn] The console to which to apply this implementation. If\n   *  not specified, uses the global or window console.\n   */\n  constructor(consoleIn) {\n    /**\n     * Logs the given arguments at TRACE level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.log\n     *  * console.debug\n     *\n     * @name solace.ConsoleLogImpl#trace\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _trace = STUB;\n\n    /**\n     * Logs the given arguments at DEBUG level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.log\n     *  * console.debug\n     *\n     * @name solace.ConsoleLogImpl#debug\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _debug = STUB;\n\n    /**\n     * Logs the given arguments at INFO level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#info\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _info = STUB;\n\n    /**\n     * Logs the given arguments at WARN level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.warn\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#warn\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _warn = STUB;\n\n\n    /**\n     * Logs the given arguments at ERROR level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#error\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _error = STUB;\n\n    /**\n     * Logs the given arguments at FATAL level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#fatal\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _fatal = STUB;\n\n    const console = consoleIn || (\n      typeof window === 'undefined'\n        /* eslint-env node */ ? global\n        /* eslint-env browser */ : window\n      ).console;\n    /* eslint-env shared-node-browser */\n\n    if (console && (console.log || console.warn)) {\n      /* eslint-disable no-console */\n      // Where console.log is supported, it is preferred over console.debug\n      // https://developer.mozilla.org/en-US/docs/DOM/console\n      // console methods in IE9 are object, not function, unfortunately\n      //\n      // Also, console.trace outputs a stack trace on some platforms.  So we\n      // use the same underlying logger as debug for trace to avoid the\n      // excessive verbosity that would result.\n      if (console.log && console.log !== undefined) {\n        _trace = Function.prototype.bind.call(console.log, console);\n        _debug = Function.prototype.bind.call(console.log, console);\n      } else if (console.debug && typeof console.debug === 'function') {\n        _trace = Function.prototype.bind.call(console.debug, console);\n        _debug = Function.prototype.bind.call(console.debug, console);\n      }\n\n      // Where console.info exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      if (console.info && console.info !== undefined) {\n        _info = Function.prototype.bind.call(console.info, console);\n      } else {\n        _info = Function.prototype.bind.call(console.log, console);\n      }\n\n      // Where console.warn exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      if (console.warn && console.warn !== undefined) {\n        _warn = Function.prototype.bind.call(console.warn, console);\n      } else {\n        _warn = Function.prototype.bind.call(console.log, console);\n      }\n\n      // Where console.error exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      //\n      // console.fatal is not present in any known console implementation. Use\n      // console.error or console.log.\n      if (console.error && console.error !== undefined) {\n        _error = Function.prototype.bind.call(console.error, console);\n        _fatal = Function.prototype.bind.call(console.error, console);\n      } else {\n        _error = Function.prototype.bind.call(console.log, console);\n        _fatal = Function.prototype.bind.call(console.log, console);\n      }\n\n      /* eslint-enable no-console */\n    } // else no console implementation was found, so the default (stub) is used for each level.\n\n    super((...args) => { _trace(...generateLogHeader('TRACE'), ...args); },\n          (...args) => { _debug(...generateLogHeader('DEBUG'), ...args); },\n          (...args) => { _info(...generateLogHeader('INFO'), ...args); },\n          (...args) => { _warn(...generateLogHeader('WARN'), ...args); },\n          (...args) => { _error(...generateLogHeader('ERROR'), ...args); },\n          (...args) => { _fatal(...generateLogHeader('FATAL'), ...args); });\n  }\n\n\n}\n\nmodule.exports.ConsoleLogImpl = ConsoleLogImpl;\n","const { LogLevel } = require('./log-levels');\n\nconst state = {\n  impl:  null,\n  level: LogLevel.INFO,\n};\n\nconst LogBinding = {};\nLogBinding.getImpl = function getImpl() {\n  return state.impl;\n};\n\nLogBinding.setImpl = function setImpl(impl) {\n  state.impl = impl;\n};\n\nLogBinding.getLogLevel = function getLogLevel() {\n  return state.level;\n};\n\nLogBinding.setLogLevel = function setLogLevel(level) {\n  state.level = level;\n};\n\nmodule.exports.GlobalBinding = LogBinding;\n","/* eslint-disable class-methods-use-this */ // declare prototype stubs\n\n/**\n * A logging callback. It must accept any valid number of arguments of any type. It must not throw.\n *\n * @callback\n * @function\n * @name solace.LogImpl.loggingCallback\n * @param {...*} args The arguments to log. Typically this is a mixture of strings and\n *  objects to be inspected. A simple implementation might call .toString() on each\n *  argument.\n */\n\n/**\n * @classdesc\n * A class that provides a binding to a log implementation. Applications that need to\n * control API logging must construct a LogImpl\n * instance, a log implementation that can be set in\n * {@link solace.SolclientFactoryProperties#logger}.\n * The binding will call the supplied log methods with the\n * parameters supplied to each.\n * @memberof solace\n */\nclass LogImpl {\n  /**\n   * @param {solace.LogImpl.loggingCallback} trace Callback for {@link solace.LogLevel.TRACE} logs.\n   * @param {solace.LogImpl.loggingCallback} debug Callback for {@link solace.LogLevel.DEBUG} logs.\n   * @param {solace.LogImpl.loggingCallback} info Callback for {@link solace.LogLevel.INFO} logs.\n   * @param {solace.LogImpl.loggingCallback} warn Callback for {@link solace.LogLevel.WARN} logs.\n   * @param {solace.LogImpl.loggingCallback} error Callback for {@link solace.LogLevel.ERROR} logs.\n   * @param {solace.LogImpl.loggingCallback} fatal Callback for {@link solace.LogLevel.FATAL} logs.\n   *\n   * @constructor\n   */\n  constructor(trace, debug, info, warn, error, fatal) {\n    Object.assign(this, {\n      trace,\n      debug,\n      info,\n      warn,\n      error,\n      fatal,\n    });\n  }\n\n  trace() {}\n  debug() {}\n  info() {}\n  warn() {}\n  error() {}\n  fatal() {}\n}\n\nmodule.exports.LogImpl = LogImpl;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents a log level enumeration.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst LogLevel = {\n  /**\n   * Fatal. Rserved for unrecoverable errors.\n   * @type {Number}\n   */\n  FATAL: 0,\n  /**\n   * Error. An internal error to the API or Solace Message Router.\n   * @type {Number}\n   */\n  ERROR: 1,\n  /**\n   * Warn. An external error which may be caused by the application passing invalid\n   * arguments or objects to the API. Often accompanied by an thrown exception.\n   * @type {Number}\n   */\n  WARN:  2,\n  /**\n   * Info. An unexpected event or occurrence that does not affect the sane\n   * operation of the SDK or application.\n   * @type {Number}\n   */\n  INFO:  3,\n  /**\n   * Debug. The highest (least) level of debug logs. Debug logs provide an overview of\n   * the API operation.\n   * @type {Number}\n   */\n  DEBUG: 4,\n  /**\n   * Trace. The loweest (most verbose) level of debug logs.\n   * @type {Number}\n   */\n  TRACE: 5,\n};\n\nmodule.exports.LogLevel = Enum.new(LogLevel);\n","const { ConsumerFlows } = require('./lib/consumer-flows');\nconst { ConsumerFSMEvent } = require('./lib/consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./lib/consumer-fsm-event-names');\nconst { MessageConsumer } = require('./lib/message-consumer');\nconst { MessageConsumerAcknowledgeMode } = require('./lib/message-consumer-acknowledge-modes');\nconst { MessageConsumerEvent } = require('./lib/message-consumer-event');\nconst { MessageConsumerEventName } = require('./lib/message-consumer-event-names');\nconst { MessageConsumerProperties } = require('./lib/message-consumer-properties');\nconst { QueueBrowser } = require('./lib/queue-browser');\nconst { QueueBrowserEventName } = require('./lib/queue-browser-event-names');\nconst { QueueBrowserProperties } = require('./lib/queue-browser-properties');\n\nmodule.exports.ConsumerFlows = ConsumerFlows;\nmodule.exports.ConsumerFSMEvent = ConsumerFSMEvent;\nmodule.exports.ConsumerFSMEventNames = ConsumerFSMEventNames;\nmodule.exports.MessageConsumer = MessageConsumer;\nmodule.exports.MessageConsumerEvent = MessageConsumerEvent;\nmodule.exports.MessageConsumerAcknowledgeMode = MessageConsumerAcknowledgeMode;\nmodule.exports.MessageConsumerEventName = MessageConsumerEventName;\nmodule.exports.MessageConsumerProperties = MessageConsumerProperties;\nmodule.exports.QueueBrowser = QueueBrowser;\nmodule.exports.QueueBrowserEventName = QueueBrowserEventName;\nmodule.exports.QueueBrowserProperties = QueueBrowserProperties;\n","const { Enum, assert } = require('solclient-eskit');\nconst { LOG_DEBUG, LOG_ERROR } = require('solclient-log');\n\n/**\n * @private\n */\nconst ApplicationAckState = Enum.new({\n  UNACKED:        'UNACKED',\n  ACKED_NOT_SENT: 'ACKED_NOT_SENT',\n  ACKED_SENT:     'ACKED_SENT',\n});\n\n// For the ring buffer update index, we have two key-value options:\n//  Map() - generally faster where supported\n//  Object - seems to automatically coerce keys to string, which is what we want in this case\n// By using Map and explicly creating a .key attribute and using it whenever possible,\n// we should get performance that is no worse than Object, which may have to perform that\n// coercion more often.\n\n/**\n * @private\n */\nclass ApplicationAck {\n  constructor(id, state) {\n    if (id) {\n      this.exists = true;\n      this.id = id;\n      this.key = id.toString();\n      this.state = state || ApplicationAckState.UNACKED;\n    } else {\n      this.exists = false;\n    }\n  }\n\n  set(id, state) {\n    this.exists = true;\n    this.id = id;\n    this.key = id.toString();\n    this.state = state || ApplicationAckState.UNACKED;\n  }\n\n  clear() {\n    this.exists = false;\n    this.id = null;\n    this.key = null;\n    this.state = null;\n  }\n}\n\n/**\n * @private\n */\nclass ApplicationAckRingBuffer {\n  /**\n   * Creates an instance of ApplicationAckRingBuffer. A standard ring buffer except that\n   * it reserves an empty entry so that an operation can occur during insert that includes\n   * both the new element and any element to be evicted. Also includes an ID-to-index map\n   * to speed updates.\n   *\n   * @param {Number} size The number of entries in the ring. Effective size is (size - 1).\n   * @memberof ApplicationAckRingBuffer\n   */\n  constructor(size) {\n    LOG_DEBUG('Creating application ack ring buffer with size ', size, ' retained size', size - 1);\n    assert(size >= 2); // one always free doesn't work with < 2 elements\n    this._size = size;\n    this._insertIndex = 0;\n    /**\n     * @property {Array.<?ApplicationAck>}\n     */\n    this._buffer = Array(size).fill(null).map(() => new ApplicationAck());\n    /**\n     * @property {Map.<String, Number>}\n     */\n    this._index = new Map();\n  }\n\n  reset() {\n    this._insertIndex = 0;\n    this._buffer.forEach((ack) => { ack.exists = false; });\n    this._index.clear();\n  }\n\n  /**\n   * @param {Long} id The id of the new entry\n   * @param {function(ApplicationAck)} beforeEvictCallback Call this before operation completes\n   * @returns {any} Return value of beforeEvictCallback\n   * @private\n   */\n  insert(id, beforeEvictCallback) {\n    assert(beforeEvictCallback);\n    assert(id);\n\n    const size = this._size;\n    const buffer = this._buffer;\n    const index = this._index;\n    const insertIndex = this._insertIndex;\n\n    /*\n     * Because of the postprocessing step, we are not re-entrant safe. It is expected\n     * that we are called from TCP -> Transport -> Session -> acceptMessage().\n     * This assert verifies that the postprocess cleanup has happened.\n     */\n    assert(!buffer[insertIndex].exists, 'Invariant not enforced (before): insert index not empty');\n\n    // First, insert.\n    const inserting = buffer[insertIndex];\n    inserting.set(id, ApplicationAckState.UNACKED);\n    if (index.has(inserting.key)) {\n      LOG_ERROR(`Duplicate ID: ${index.get(inserting.key)} insertIndex: ${insertIndex}`);\n    }\n    index.set(inserting.key, insertIndex);\n\n    const evictingIndex = (insertIndex + 1) % size;\n    const evicting = buffer[evictingIndex];\n    let result;\n    try {\n      result = beforeEvictCallback(evicting.exists ? evicting : null);\n    } finally {\n      // Always clean up to keep the RB in a consistent state.\n      // If inProgressCallback threw, this runs before the exception propagates.\n\n      // Update insert index for next operation.\n      this._insertIndex = (insertIndex + 1) % size;\n\n      if (evicting.exists) {\n        index.delete(evicting.key);\n        evicting.clear();\n      }\n    }\n\n    assert(!buffer[this._insertIndex].exists, 'Invariant not enforced (after): insert index not empty');\n    return result;\n  }\n\n  /**\n   * Returns the number of elements in this ringbuffer. Will increase to\n   * one less than the size provided to the constructor as the buffer is used.\n   *\n   * @readonly\n   * @memberof ApplicationAckRingBuffer\n   */\n  get length() {\n    return this._index.size;\n  }\n\n  /**\n   * Returns the first element in the ring buffer.\n   *\n   * This could be called from the evict callback, so insert needs to be sure\n   * that internal state is correct for that scenario.\n   *\n   * The expected case is that the first element is at insertIndex + 1, but if the\n   * buffer has not been filled yet, we will iterate the buffer and skip nonexistent\n   * elements to find it.\n   *\n   * This is a little inefficient until we have received this._size messages, but after\n   * that it is more efficient than maintaining a read pointer.\n   *\n   * @returns {?ApplicationAck} The first ack in the buffer.\n   */\n  front() {\n    if (this.length === 0) return null;\n\n    const buffer = this._buffer;\n    const insertIndex = this._insertIndex;\n    const size = this._size;\n    const firstIndex = (insertIndex + 1) % size;\n    // Cannot assert invariant here: insert is usually in progress.\n\n    // Buffer full case\n    if (buffer[firstIndex].exists) return buffer[firstIndex];\n\n    // Not yet filled case\n    // The last checked element for the iteration is the start point,\n    //  plus size, a full lap including the start index,\n    //  minus 1, to exclude the start\n    //  minus 1, to exclude the invariant null entry\n    for (let rawIndex = firstIndex, lastIndex = firstIndex + size - 1;\n         rawIndex <= lastIndex;\n         ++rawIndex) {\n      const readIndex = rawIndex % size;\n      const element = buffer[readIndex];\n      if (element.exists) {\n        return element;\n      }\n    }\n\n    // Buffer is completely empty\n    assert(this._index.size === 0, '#front() failed so buffer must be empty');\n    return null;\n  }\n\n  /**\n   * Rather than implementing the iterator protocol, which requires Symbol support,\n   * we'll implement a forEach that behaves as though this is an array.\n   *\n   * @param {function(ApplicationAppState, index, collection)} callback The iteration callback\n   */\n  forEach(callback) {\n    if (this.length === 0) return;\n\n    const buffer = this._buffer;\n    const size = this._size;\n    let index = 0;\n\n    for (let rawIndex = this._insertIndex + 1, lastIndex = this._insertIndex + size;\n         rawIndex <= lastIndex;\n         ++rawIndex) {\n      const readIndex = rawIndex % size;\n      const element = buffer[readIndex];\n      if (element.exists) {\n        callback(element, index++, this);\n      }\n    }\n\n    assert(index > 0, 'Not empty but did not dispatch');\n  }\n\n  /**\n   * @param {Long} id The ID to update\n   * @param {ApplicationAckState} state The new state for the ID\n   * @private\n   */\n  updateAckState(id, state) {\n    const key = id.toString(); assert(this._index.has(key), 'Ack key not found');\n    const buffer = this._buffer;\n    const updateIndex = this._index.get(key);\n    const existing = buffer[updateIndex]; assert(existing, 'Ack key has no entry');\n    existing.state = state;\n  }\n\n  /**\n   * @param {Long} id The ID to look up\n   * @returns {Boolean} `true` if this ID exists in the ringbuffer\n   */\n  has(id) {\n    const key = id.toString();\n    return this._index.has(key);\n  }\n}\n\nObject.assign(module.exports, {\n  ApplicationAckState,\n  ApplicationAck,\n  ApplicationAckRingBuffer,\n});\n","const { assert } = require('solclient-eskit');\nconst { MessageConsumer } = require('./message-consumer');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\n\nclass ConsumerFlows {\n  /**\n   * Defines a set of Guaranteed Messaging Flows.  There are two sets allocated, one\n   * for publishers (typically just one entry) and one for Subscribers.\n   * There is a separate set for flows in RECONNECTING state.\n   * These need special treatment during SESSION_DOWN:\n   * they need to be notified, but not waited on by the session FSM.\n   * Flows in _reconnectingFlows are not in _allFLows.\n   * @param {any} options Construction options\n   * @private\n   */\n  constructor() {\n    this._allFlows = new Set();\n    this._reconnectingFlows = new Set();\n    // Flows by id (UP)\n    this._flowsById = {};\n  }\n\n  add(flow) {\n    assert(flow instanceof MessageConsumer, 'Flow was not a consumer');\n    if (this._allFlows.has(flow)) {\n      return flow;\n    }\n\n    const flowUp = () => {\n      // Don't worry about flow collisions -- the router assigned the new flow to the same ID\n      // so it won't address the old flow. Retain the old flow in _allFlows and make sure we\n      // dispose the right flow.\n      this._flowsById[flow.flowId] = flow;\n    };\n    const flowDisposed = () => {\n      const flowId = flow.flowId;\n      this._allFlows.delete(flow);\n      this._reconnectingFlows.delete(flow);\n      const flowById = this._flowsById[flowId];\n      // If this test fails, the router reassigned the flow ID, and we were only keeping the\n      // _allFlows set reference for blanket cleanup.\n      if (flowById === flow) {\n        delete this._flowsById[flowId];\n      }\n      // Flow will be disposed and this will happen automatically\n    };\n    const flowReconnecting = () => {\n      flowDisposed();\n      this._reconnectingFlows.add(flow);\n    };\n    const flowReconnected = () => {\n      flowUp();\n      this._allFlows.add(flow);\n      this._reconnectingFlows.delete(flow);\n    };\n    const flowDown = () => {\n      this._reconnectingFlows.delete(flow);\n    };\n\n    flow._on(MessageConsumerEventName.UP, flowUp);\n    flow._on(MessageConsumerEventName.RECONNECTED, flowReconnected);\n    flow._on(MessageConsumerEventName.DISPOSED, flowDisposed);\n    flow._on(MessageConsumerEventName.RECONNECTING, flowReconnecting);\n    flow._on(MessageConsumerEventName.DOWN, flowDown);\n    flow._on(MessageConsumerEventName.DOWN_ERROR, flowDown);\n\n    this._allFlows.add(flow);\n    return flow;\n  }\n\n  get flows() {\n    return Array.from(this._allFlows);\n  }\n  get reconnectingFlows() {\n    return Array.from(this._reconnectingFlows);\n  }\n\n  getFlowById(flowId) {\n    return this._flowsById[flowId];\n  }\n\n  disposeAll() {\n    this._allFlows.forEach(flow => flow.dispose());\n  }\n\n}\n\nmodule.exports.ConsumerFlows = ConsumerFlows;\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * Events on the Consumer FSM\n * @enum {string}\n ********************************************************************************/\nconst ConsumerFSMEventNames = {\n  SESSION_UP:                 'SESSION_UP',\n  SESSION_UP_NO_AD:           'SESSION_UP_NO_AD',\n  SESSION_DOWN:               'SESSION_DOWN',\n  SESSION_DISCONNECT:         'SESSION_DISCONNECT',\n  FLOW_FAILED:                'FLOW_FAILED',\n  FLOW_UP:                    'FLOW_UP',\n  FLOW_ACTIVE_IND:            'FLOW_ACTIVE_IND',\n  FLOW_CLOSE:                 'FLOW_CLOSE',\n  FLOW_OPEN:                  'FLOW_OPEN',\n  FLOW_UNBOUND:               'FLOW_UNBOUND',\n  ACK:                        'ACK',\n  ACK_TIMEOUT:                'ACK_TIMEOUT',\n  BIND_TIMEOUT:               'BIND_TIMEOUT',\n  CREATE_TIMEOUT:             'CREATE_TIMEOUT',\n  UNBIND_TIMEOUT:             'UNBIND_TIMEOUT',\n  CAN_SEND:                   'CAN_SEND',\n  TRANSPORT_ERROR:            'TRANSPORT_ERROR',\n  DISPOSE:                    'DISPOSE',\n  VIRTUALROUTER_NAME_CHANGED: 'VIRTUALROUTER_NAME_CHANGED',\n  RECONNECT_INTERVAL_TIMEOUT: 'RECONNECT_INTERVAL_TIMEOUT',\n  BIND_RESPONSE:              'BIND_RESPONSE',\n  CREATE_FAILED:              'CREATE_FAILED',\n  CREATE_SUCCESS:             'CREATE_SUCCESS',\n};\n\nmodule.exports.ConsumerFSMEventNames = Enum.new(ConsumerFSMEventNames);\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { FsmEvent } = require('solclient-fsm');\n\n/**\n *\n * ConsumerFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the Subscriber FSM.  This extension provides members to carry information specfic to\n * the Subscriber FSM transitions.\n *\n * @extends FsmEvent\n * @private\n */\nclass ConsumerFSMEvent extends FsmEvent {\n  constructor(spec, details) {\n    super(spec);\n    this.details = details;\n  }\n}\n\nmodule.exports.ConsumerFSMEvent = ConsumerFSMEvent;\n","const SMFLib = require('solclient-smf');\nconst { ApplicationAck,\n        ApplicationAckRingBuffer,\n        ApplicationAckState } = require('./application-acks');\nconst { assert } = require('solclient-eskit');\nconst { CapabilityType } = require('solclient-session');\nconst { ConsumerFSMEvent } = require('./consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./consumer-fsm-event-names');\nconst { ConsumerStateNames } = require('./consumer-state-names');\nconst { DestinationFromNetwork,\n        DestinationType,\n        Queue,\n        Topic } = require('solclient-destination');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { LogFormatter } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { MessageDispatcher } = require('./message-dispatcher');\nconst { PrivateFlowEventName } = require('solclient-flow');\nconst { QueueAccessType,\n        QueueDescriptor,\n        QueuePermissions,\n        QueueProperties,\n        QueueType } = require('solclient-queue');\nconst { RgmidFactory } = require('solclient-message');\nconst { State, StateMachine } = require('solclient-fsm');\nconst { Stats } = require('solclient-stats');\nconst { StatType } = require('solclient-stats');\nconst { Timer } = require('solclient-events');\nconst { TransportAcks,\n        TransportAckResult } = require('./transport-acks');\n\nconst RING_BUFFER_SIZE = 512;\nconst ZERO_APP_ACK = new ApplicationAck(Long.UZERO, ApplicationAckState.ACKED_SENT);\n\nclass ConsumerFSM extends StateMachine {\n  constructor({ name, consumer, sessionInterface, properties } = {}) {\n    super({ name });\n\n    const fsm = this;\n    const formatter = function formatter(...args) {\n      return [\n        `[session=${sessionInterface.sessionIdHex}]`,\n        `[message-consumer-fsm=${consumer.flowIdDec}]`,\n        ...args,\n      ];\n    };\n    const logger = this.logger = new LogFormatter(formatter);\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n      LOG_ERROR,\n    } = logger;\n    this.log = logger.wrap(this.log, this);\n\n    const autoAck = properties.acknowledgeMode === MessageConsumerAcknowledgeMode.AUTO;\n\n    this._consumer = consumer;\n    this._sessionInterface = sessionInterface;\n\n    // Save copies of properties accessed outside the constructor\n    this._acknowledgeTimeoutInMsecs = properties.acknowledgeTimeoutInMsecs;\n    this._acknowledgeThreshold = properties.acknowledgeThreshold;\n    this._localPreferredWindowSize = properties.windowSize;\n    this._localMaxWindowSize = properties.windowSize;\n\n    this._messageDispatch = new MessageDispatcher({ emitter: consumer, autoAck, logger });\n\n    this._stats = new Stats();\n\n    this._resetRemoteConnectionState();\n    this._resetLocalConnectionState();\n\n    // Flag to delay flow dispose() for autoAck.\n    this._midDispatch = false;\n    // Save a copy to clear out on first successful bind\n    this._replayStartLocation = properties.replayStartLocation;\n\n    this._errorCausingReconnect = null;\n    //**********************************************************************************************\n    // A bit of infrastructure around post-event actions, which includes maintaining a queue of\n    // pending actions, and some logic to pre-process the actions before performing them.\n\n    // These should not be the same as any MessageConsumerEventName value or they will collide in\n    // the actionLocations object during event pre-processing.\n    const emitEventActionType = 'EMIT';\n    const startDispatchActionType = 'DISPATCH';\n    const stopDispatchActionType = 'NO_DISPATCH';\n\n    let postEventActions = [];\n    function preprocessPostEventActions(startIndex) {\n      // first pre-process post event actions.  This isn't an exhaustive search of every possible\n      // combination of event sequences, as many are practically impossible, and therefore\n      // impossible to test.  We only handle sequences that are known to be possible.  If there\n      // are other sequences that need to be considered, we can add processing for them when we\n      // know they are possible.\n      LOG_TRACE(`Pre-processing post event action list @${startIndex}`, postEventActions);\n      const actionLocations = {};\n      postEventActions.forEach((action, i, arr) => {\n        function cancelAction(firstActionName, cancellingActionName) {\n          if (actionLocations[firstActionName] === undefined) {\n            return;\n          }\n          const firstLocation = actionLocations[firstActionName];\n          LOG_TRACE(`Cancelling post event action ${firstActionName}@${firstLocation} with ${\n            cancellingActionName}@${i}`);\n          actionLocations[firstActionName] = undefined;\n          arr[firstLocation] = null;\n          arr[i] = null;\n        }\n        if ((i < startIndex) || (!action)) {\n          LOG_TRACE(`Skip n/a action@${i}, start: ${startIndex}, action:`, action);\n          return;\n        }\n        switch (action.type) {\n          case emitEventActionType:\n            switch (action.data) {\n              case MessageConsumerEventName.UP:\n              case MessageConsumerEventName.ACTIVE:\n              case MessageConsumerEventName.RECONNECTED:\n                actionLocations[action.data] = i;\n                break;\n\n              case MessageConsumerEventName.DOWN:\n              case MessageConsumerEventName.DOWN_ERROR:\n              //case MessageConsumerEventName.RECONNECTED: // I can't get this to work :-/\n                cancelAction(MessageConsumerEventName.UP, action.data);\n                break;\n\n              case MessageConsumerEventName.INACTIVE:\n                cancelAction(MessageConsumerEventName.ACTIVE, action.data);\n                break;\n\n              default:\n                LOG_ERROR(`Unexpected event in post-event action: ${action.data}`);\n                break;\n            }\n            break;\n\n          case startDispatchActionType:\n            actionLocations[action.type] = i;\n            break;\n\n          case stopDispatchActionType:\n            cancelAction(startDispatchActionType, action.type);\n            break;\n\n          default:\n            break;\n        }\n      });\n    }\n\n    function processPostEventActions() {\n      let preprocessedActions = 0;\n      let i;\n\n      // Now we've pre-processed the list, execute any remaining non-null entries.  We don't use a\n      // foreach loop since foreach won't include elements added after processing has started.  This\n      // can occur if a callback causes more postEventActions to be added.\n      LOG_TRACE('Executing post event action list', postEventActions);\n      for (i = 0; i < postEventActions.length; ++i) {\n        if (preprocessedActions < postEventActions.length) {\n          preprocessPostEventActions(i);\n          preprocessedActions = postEventActions.length;\n        }\n        const action = postEventActions[i];\n        LOG_TRACE(`Action ${i}:`, action);\n        if (!action) {\n          continue;\n        }\n        switch (action.type) {\n          case emitEventActionType:\n            if (action.error !== undefined) {\n              consumer._emit(action.data, action.error);\n            } else {\n              consumer._emit(action.data);\n            }\n            break;\n\n          case stopDispatchActionType:\n            // We don't actually do the stop here -- it is always done when this is enqueued.\n            // The reason for enqueuing this event is to that it can cencel a startDispatch, if\n            // present.\n            break;\n\n          case startDispatchActionType:\n            this.requestStartDispatchFSM();\n            break;\n\n          default:\n            LOG_ERROR(`Unhandled post event action type: ${action.type}`);\n            break;\n        }\n      }\n      postEventActions = [];\n    }\n\n    function addPostEventAction(type, data, error) {\n      let newEvent;\n      if (data !== undefined) {\n        newEvent = { type, data, error };\n      } else {\n        newEvent = { type };\n      }\n      postEventActions.push(newEvent);\n      LOG_TRACE(`Added post event action ${postEventActions.length}:`, newEvent);\n      if (postEventActions.length === 1) {\n        fsm.setPostEventAction(processPostEventActions);\n      }\n    }\n\n    const addEventToEmit = (event, error) => {\n      if (!properties.activeIndicationEnabled) {\n        if ((event === MessageConsumerEventName.INACTIVE) ||\n            (event === MessageConsumerEventName.ACTIVE)) {\n          LOG_TRACE(`Skip emitting ${event} due to disabled flow active indications`);\n          return;\n        }\n      }\n      addPostEventAction(emitEventActionType, event, error);\n    };\n    const requestStartDispatch = () => {\n      addPostEventAction(startDispatchActionType);\n    };\n    const requestStopDispatch = () => {\n      // We do the stop inline, then add a post-event action so that it can have the effect of\n      // cancelling a previous start.  It will not execute the stop when processed however since we\n      // have already done it here.\n      this.requestStopDispatchFSM();\n      addPostEventAction(stopDispatchActionType);\n    };\n\n    this._addEventToEmit = addEventToEmit;\n    this._requestStartDispatch = requestStartDispatch;\n    this._requestStopDispatch = requestStopDispatch;\n\n    // End of post-event action infrastructure\n\n    // Utility functions\n    function emitBindFailed(error) {\n      assert(error instanceof OperationError);\n      consumer._emit(MessageConsumerEventName.CONNECT_FAILED_ERROR, error);\n    }\n\n    function emitRebindFailed(error) {\n      assert(error instanceof OperationError);\n      consumer._emit(MessageConsumerEventName.DOWN_ERROR, error);\n    }\n\n    function verifyEndpointSubscription(destination) {\n      let error = null;\n      if (destination) {\n        const subInfo = destination.getSubscriptionInfo();\n        if (subInfo && (subInfo.isShare || subInfo.isNoExport) &&\n            !fsm._sessionInterface.isCapable(CapabilityType.SHARED_SUBSCRIPTIONS)) {\n          error = new OperationError('Shared Subscriptions not Supported',\n                                     ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED);\n        }\n      }\n      return error;\n    }\n    //**********************************************************************************************\n    // ChoicePoints on transitions.\n    // Not every transition is  unilateral. In some cases, particularly with session-up/flow-open\n    // we want to check the session capabilities, which will effect which transition is taken.\n    // The following choicePoints are NOT generic, they may only be used in the documented states\n    // to control the transition out of that state.\n    // ChoicePoints must return a new state (this.transitionTo())\n    //\n    // checkCapabiltiesChoicePoint - Check the session capabilities against the consumer properties.\n    // If all requested properties are supported by the session capabilties, transitionTo(BindSent).\n    // otherwise emitError and transitionTo unbound.\n    // Used in:  fsm.Unbound.AwaitFlowOpen\n    //           fsm.Unbound.AwaitSessionUp\n    //\n    function checkCapabilitiesChoicePoint(curState) {\n      let error = null;\n      if (fsm._replayStartLocation !== undefined &&\n        !fsm._sessionInterface.isCapable(CapabilityType.MESSAGE_REPLAY)) {\n        error = new OperationError('Message Replay Not Supported',\n              ErrorSubcode.REPLAY_NOT_SUPPORTED);\n      } else if (properties.topicEndpointSubscription) {\n        error = verifyEndpointSubscription(properties.topicEndpointSubscription);\n      }\n\n      if (error) {\n        // Transition to Unbound means we wait for both SessionUp and flow open, which is rare.\n        // It makes sense here though, because the next session might be capable,\n        // but this one surely isn't.\n        // (and FLOW_DOWN is emitted, so we are waiting for both.)\n        return curState.transitionTo(fsm.Unbound, () =>\n              emitBindFailed(error));\n      }\n      // OK to bind\n      if (properties.createIfMissing &&\n        properties.queueDescriptor &&\n        properties.queueDescriptor.durable) {\n        return curState.transitionTo(fsm.CreateSent);\n      }\n      return curState.transitionTo(fsm.BindSent);\n    }\n    // End of ChoicePoints\n    //*********************************************************************************************\n    // FSM config\n\n    function handleAccidentalBind(msg) {\n      // Unbind with timout-recursion using flowid.\n\n      LOG_TRACE(`handleAccidentalBind mssg: ${msg}`);\n      const correlationTag = sessionInterface.getCorrelationTag();\n      const message = SMFLib.AdProtocolMessage.getCloseMessageConsumer(msg.flowId, correlationTag);\n      sessionInterface.sendControl(message);\n      sessionInterface.enqueueRequest(\n        correlationTag,\n        () => this.handleAccidentalBind(msg),\n        properties.connectTimeoutInMsecs,\n        null,\n        null); //ignore response. Maybe log?\n    }\n\n    this.unhandledEventReaction(function onUnhandledEvent(event) {\n      switch (event.getName()) {\n        case ConsumerFSMEventNames.VIRTUALROUTER_NAME_CHANGED:\n          LOG_INFO('VirtualRouter name change: clearing all acknowledgement state');\n          fsm._resetRemoteConnectionState();\n          return this;\n        case ConsumerFSMEventNames.FLOW_UNBOUND:\n          LOG_INFO('Received unsolicited unbind. Flow may be manually reconnected.');\n          return this.transitionToUnbound(MessageConsumerEventName.DOWN_ERROR, event.details);\n        case ConsumerFSMEventNames.DISPOSE:\n          fsm._dispose();\n          return fsm.getCurrentState().terminate();\n        case ConsumerFSMEventNames.BIND_RESPONSE:\n          LOG_TRACE('Unhandled bind, assuming accidental BIND duplication');\n          handleAccidentalBind(event.details);\n          return this;\n        default:\n          LOG_TRACE(`Ignoring event ${event.getName()} in state ${this.getCurrentState().getName()}`);\n          return this;\n      }\n    });\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.Unbound, (context) => {\n        LOG_INFO(`Starting ${context.getStateMachine().getName()}`);\n      });\n    });\n\n    /*\n      We don't transition directly from Unbound to BindSent.\n      We need the following events:\n       * FLOW_OPEN\n       * SESSION_UP\n      (The session ensures we get SESSION_UP or SESSION_UP_NO_AD if we are created\n      and there is a session already up.)\n      The Unbound base state implements transitions to its wait state children:\n       * FLOW_OPEN -> AwaitSessionUp\n       * SESSION_UP -> AwaitFlowOpen\n      It also has the following transitions that pull the FSM out of its children\n      and back to itself:\n       * FLOW_CLOSE\n       * SESSION_DOWN\n      The child states can override these with internal transitions.\n     */\n    this.Unbound = new State({\n      name:          ConsumerStateNames.UNBOUND,\n      parentContext: fsm,\n    }, {\n      emitDisabledEvent() {\n        consumer._emit(MessageConsumerEventName.GM_DISABLED);\n      },\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSesssionDisconnect() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_OPEN, function onFlowOpen() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp); // Enter child state\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        if (fsm._sessionInterface.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME)) {\n          return this.transitionTo(fsm.Unbound.AwaitFlowOpen); // Enter child state\n        }\n        LOG_WARN(`Consumer is not supported by router for this client on sessionId 0x${\n                 fsm._sessionInterface.sessionIdHex}`);\n        // Act as if the child state handled this\n        return this.internalTransition(() => this.emitDisabledEvent());\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP_NO_AD, function onSessionUpNoAD() {\n        // Act as if the child state handled this\n        return this.internalTransition(() => this.emitDisabledEvent());\n      })\n      .exit(() => {\n        fsm._connectAttempts = properties.connectAttempts;\n      });\n\n    /*\n      In this state, we have received FLOW_OPEN, but no SESSION_UP.\n      SESSION_DOWN does not cancel this wait, so we must override the\n      parent and explicitly do nothing.\n    */\n    this.Unbound.AwaitSessionUp = new State({\n      name:          ConsumerStateNames.UNBOUND_AWAIT_SESSION_UP,\n      parentContext: this.Unbound,\n    }, {\n      emitBindWaiting() {\n        consumer._emit(PrivateFlowEventName.BIND_WAITING);\n      },\n    })\n      .entry(function onEntry() {\n        this.emitBindWaiting();\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.internalTransition(); // Don't exit; continue waiting\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.internalTransition(); // Don't exit; continue waiting\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        return checkCapabilitiesChoicePoint(this);\n      });\n\n    /*\n      In this state, we have received SESSION_UP but not FLOW_OPEN.\n      If we get FLOW_OPEN, attempt to bind. Any other event is handled\n      by the parent.\n     */\n    this.Unbound.AwaitFlowOpen = new State({\n      name:          ConsumerStateNames.UNBOUND_AWAIT_FLOWOPEN,\n      parentContext: this.Unbound,\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_OPEN, function onFlowOpen() {\n        return checkCapabilitiesChoicePoint(this);\n      });\n    // Factored out the extension object from the State constructor for reuse in\n    // flow auto-reconnect sister-states.\n    this.BindSentExtensions = {\n      sendBindRequest() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const transportAcks = fsm._transportAcks;\n\n        fsm._endpointEnsure();\n        const endpoint = fsm._endpoint;\n        const subscription = fsm._subscription;\n\n        const message = SMFLib.AdProtocolMessage.getOpenMessageConsumer(\n          properties.queueDescriptor,\n          properties.queueProperties,\n          endpoint,\n          subscription,\n          correlationTag,\n          properties.windowSize,\n          properties.noLocal,\n          properties.activeIndicationEnabled,\n          transportAcks.lastAcked,\n          transportAcks.lastReceived,\n          properties.browser,\n          fsm._replayStartLocation,\n          consumer.endpointErrorId);\n        sessionInterface.sendControl(message);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        this.handleBindTimeout.bind(this),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        this.handleBindResponse.bind(this));\n        LOG_TRACE('Sent consumer bind request with arguments', [\n          properties.queueDescriptor,\n          properties.queueProperties,\n          endpoint,\n          subscription,\n          correlationTag,\n          properties.windowSize,\n          properties.noLocal,\n          properties.activeIndicationEnabled,\n          transportAcks.lastAcked,\n          transportAcks.lastReceived,\n          properties.browser,\n          fsm._replayStartLocation,\n          consumer.endpointErrorId]);\n      },\n      cancelBindRequestTimer() {\n        LOG_TRACE('Cancelling bindRequestTimer.');\n        this.bindRequestTimer.cancel();\n      },\n      handleBindTimeout() {\n        LOG_INFO('Bind timeout');\n        fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.BIND_TIMEOUT }));\n      },\n      handleExpectedBind(msg) {\n        const accessTypeOrDefault = x => (x === undefined ? QueueAccessType.EXCLUSIVE : x);\n\n        const attrs = {\n          lastMsgIdAcked:       msg.getLastMsgIdAcked(),\n          flowId:               msg.getFlowId(),\n          accessType:           accessTypeOrDefault(msg.getAccessType()),\n          topicEndpointBytes:   msg.getTopicEndpointBytes(),\n          grantedPermissions:   msg.getGrantedPermissions(),\n          allOthersPermissions: msg.getAllOthersPermissions(),\n          respectsTTL:          msg.getRespectsTTL(),\n          activeFlow:           msg.getActiveFlow(),\n          wantFlowChangeNotify: msg.getWantFlowChangeNotify(),\n          discardBehavior:      msg.getQueueDiscardBehavior(),\n          deliveryCountSent:    msg.getEndpointDeliveryCountSent(),\n          endpointId:           msg.getEndpointId(),\n          maxUnackedMessages:   msg.getMaxUnackedMessages(),\n          endpointErrorId:      msg.getEndpointErrorId(),\n          spoolerUniqueId:      msg.getSpoolerUniqueId(),\n          quota:                msg.getQuota(),\n          maxMsgSize:           msg.getMaxMsgSize(),\n          maxRedelivery:        msg.getMaxRedelivery(),\n        };\n        LOG_DEBUG('BIND response attributes:', attrs);\n\n        Object.assign(consumer, {\n          accessType:           attrs.accessType,\n          queueDiscardBehavior: attrs.discardBehavior,\n          deliveryCountSent:    attrs.deliveryCountSent,\n          endpointId:           attrs.endpointId,\n          respectsTTL:          attrs.respectsTTL,\n          flowId:               attrs.flowId,\n          permissions:          attrs.grantedPermissions,\n          wantFlowChangeNotify: attrs.wantFlowChangeNotify,\n          endpointErrorId:      attrs.endpointErrorId,\n          spoolerUniqueId:      attrs.spoolerUniqueId,\n        });\n        if (fsm._sessionInterface.isCapable(CapabilityType.BR_REPLAY_ERRORID)) {\n          consumer.endpointErrorId = attrs.endpointErrorId;\n        }\n\n        if (attrs.topicEndpointBytes && attrs.topicEndpointBytes.length) {\n          attrs.endpoint = DestinationFromNetwork.createDestinationFromBytes(\n            attrs.topicEndpointBytes);\n          LOG_DEBUG('Overwriting local endpoint:', fsm._endpoint, 'with remote:', attrs.endpoint);\n          fsm._endpoint = attrs.endpoint;\n          const consumerProperties = fsm._consumer._properties;\n          consumerProperties.queueDescriptor = new QueueDescriptor({\n            name:    attrs.endpoint.name,\n            type:    consumerProperties.queueDescriptor.type,\n            durable: consumerProperties.queueDescriptor.durable,\n          });\n        }\n\n        const consumerProperties = fsm._consumer._properties;\n        consumerProperties.queueProperties = new QueueProperties({\n          respectsTTL:          attrs.respectsTTL,\n          permissions:          attrs.allOthersPermissions,\n          quotaMB:              attrs.quota,\n          maxMessageSize:       attrs.maxMsgSize,\n          discardBehavior:      attrs.discardBehavior,\n          maxMessageRedelivery: attrs.maxRedelivery,\n          accessType:           attrs.accessType,\n        });\n        if (!consumerProperties.queueProperties.permissions) {\n          consumerProperties.queueProperties.permissions = QueuePermissions.NONE;\n        }\n\n\n        Object.assign(fsm, {\n          _active:           attrs.activeFlow,\n          _remoteWindowSize: attrs.maxUnackedMessages,\n        });\n\n        if (Long.UZERO.eq(fsm._transportAcks.lastAcked)) {\n          fsm._transportAcks.lastAcked = attrs.lastMsgIdAcked || Long.UZERO;\n        } else {\n          LOG_DEBUG(`Retaining last acked/last received: ${fsm._transportAcks}`);\n        }\n        //return this.transitionTo(fsm.FlowUp);\n        //return fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_UP }));\n      },\n      handleBindResponse(msg) {\n        LOG_TRACE(`handleBindResponse called for message ${msg}`);\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.BIND) {\n          LOG_INFO(`Unexpected message type in bind response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n          return fsm.processEvent(\n            new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.FLOW_FAILED },\n              new OperationError(`Unexpected bind response: ${\n                                 SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`,\n                                 ErrorSubcode.PROTOTOCOL_ERROR)));\n        }\n\n        const header = msg.smfHeader;\n        const responseCode = header.pm_respcode;\n\n        if (responseCode === null) {\n          // Drop message and increment stats. Flow will time out\n          this._consumer.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Open-Publisher-Flow Request message on sessionId 0x${\n                    this._sessionInterface.sessionIdHex}`);\n          return undefined;\n        }\n\n        if (responseCode !== 200) {\n          const description = header.pm_respstr;\n          const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                            description);\n          LOG_INFO('Flow failed (bind):', responseCode, description, ErrorSubcode.describe(errorSubcode));\n          LOG_DEBUG('subcode:', errorSubcode);\n          return fsm.processEvent(new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.FLOW_FAILED },\n              new OperationError(description, errorSubcode, { responseCode })));\n        }\n\n        const respEvent = { name: ConsumerFSMEventNames.BIND_RESPONSE };\n        return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n      },\n    };\n    this.BindSent = new State({\n      name:          ConsumerStateNames.BIND_SENT,\n      parentContext: fsm,\n    }, this.BindSentExtensions)\n      .entry(function onEntry() {\n        fsm._connectAttempts--;\n        this.sendBindRequest();\n        this.bindRequestTimer = Timer.newTimeout(properties.connectTimeoutInMsecs,\n                                                 this.handleBindTimeout);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.DOWN));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.BIND_TIMEOUT, function onBindTimeout() {\n        LOG_TRACE(`Bind timeout, connectAttempts left: ${fsm._connectAttempts}`);\n        if (fsm._connectAttempts > 0) {\n          return this.externalTransitionTo(fsm.BindSent);\n        }\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen,\n                                 () => emitBindFailed(\n                                    new OperationError('Bind failed due to timeout',\n                                                       ErrorSubcode.TIMEOUT)));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_FAILED, function onFlowFailed(evt) {\n        // Act like a newly created flow\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitBindFailed(evt.details));\n      })\n      .reaction(ConsumerFSMEventNames.BIND_RESPONSE, function onBindResponse(event) {\n        this.handleExpectedBind(event.details);\n        //return this;\n        return this.transitionTo(fsm.FlowUp);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.FlowUp);\n      })\n      .exit(function onExit() {\n        this.cancelBindRequestTimer();\n      });\n    this.Reconnecting = new State({\n      name:          ConsumerStateNames.RECONNECTING,\n      parentContext: fsm,\n    })\n      .entry(function onEntry() {\n        LOG_TRACE('RECONNECTING onEntry: emitting RECONNECTING, resetting attempt counters');\n        LOG_TRACE(`this._errorCausingReconnect: ${this._errorCausingReconnect}`);\n        LOG_TRACE(`fsm._errorCausingReconnect: ${fsm._errorCausingReconnect}`);\n        consumer._emit(MessageConsumerEventName.RECONNECTING, fsm._errorCausingReconnect);\n        fsm._connectAttempts = properties.connectAttempts;\n        fsm.reconnectAttempts = properties.reconnectAttempts;\n      })\n      .initial(\n        function onInitial() {\n          return this.transitionTo(fsm.Reconnecting.RBindSent);\n        })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.transitionTo(fsm.Reconnecting.RAwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Reconnecting.RAwaitSessionUp);\n      });\n    this.Reconnecting.RAwaitSessionUp = new State({\n      name:          ConsumerStateNames.RECONNECTING_AWAIT_SESSION_UP,\n      parentContext: this.Reconnecting,\n    })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        fsm._connectAttempts = properties.connectAttempts;\n        return this.transitionTo(fsm.Reconnecting.RBindSent);\n      });\n    this.Reconnecting.RBindSent = new State({\n      name:          ConsumerStateNames.RECONNECTING_BIND_SENT,\n      parentContext: this.Reconnecting,\n    }, this.BindSentExtensions)\n      .entry(function onEntry() {\n        fsm._connectAttempts--;\n        this.sendBindRequest();\n        this.bindRequestTimer = Timer.newTimeout(properties.connectTimeoutInMsecs,\n                                                 this.handleBindTimeout);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        // TODO: This is probably wrong in the original state machine too:\n        // flowid is either missing or stale. Keeping it the same as there for now.\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.BIND_TIMEOUT, function onBindTimeout() {\n        LOG_TRACE(`Bind timeout during reconnect, connectAttempts left: ${fsm._connectAttempts}`);\n        if (fsm._connectAttempts > 0) {\n          return this.externalTransitionTo(fsm.Reconnecting.RBindSent);\n        }\n        // Running out of rebinds is a non rebindable failure, so break the reconect loop.\n        LOG_TRACE('Running out of rebinds is a non rebindable failure, so break the reconect loop.');\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen,\n                                 () => emitBindFailed(\n                                    new OperationError('Rebind failed due to timeout',\n                                                       ErrorSubcode.TIMEOUT)));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_FAILED, function onFlowFailed(evt) {\n        // These three reconnect-errors are \"rebindable\",\n        // anything else breaks the reconnect loop.\n        if (fsm.reconnectAttempts > 0 || fsm.reconnectAttempts === -1) {\n          if (evt && evt.details && evt.details.subcode) {\n            if (evt.details.subcode === ErrorSubcode.QUEUE_SHUTDOWN ||\n              evt.details.subcode === ErrorSubcode.TOPIC_ENDPOINT_SHUTDOWN ||\n              evt.details.subcode === ErrorSubcode.GM_UNAVAILABLE) {\n              LOG_TRACE(`ReconnectAttempts left: ${fsm.reconnectAttempts} subcode: ${evt.details.subcode}, giving it another shot.`);\n              return this.transitionTo(fsm.Reconnecting.RAwaitTimer);\n            }\n          } else {\n            LOG_DEBUG(`Hmm, no subcode in FLOW_FAILED? ${evt}`);\n          }\n        } else {\n          LOG_TRACE(`Ran out of reconnectAttempts: ${fsm.reconnectAttempts}`);\n        }\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitRebindFailed(evt.details));\n      })\n      .reaction(ConsumerFSMEventNames.BIND_RESPONSE, function onBindResponse(event) {\n        this.handleExpectedBind(event.details);\n        //return this;\n        return this.transitionTo(fsm.FlowUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.RECONNECTED));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.FlowUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.RECONNECTED));\n                                 //() => consumer._emit(MessageConsumerEventName.RECONNECTING));\n      })\n      .exit(function onExit() {\n        this.cancelBindRequestTimer();\n      });\n    this.Reconnecting.RAwaitTimer = new State({\n      name:          ConsumerStateNames.RECONNECTING_AWAIT_TIMER,\n      parentContext: this.Reconnecting,\n    }, {\n      handleReconnectIntervalTimeout() {\n        LOG_DEBUG('Reconnect interval timeout (expected)');\n        fsm.processEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.RECONNECT_INTERVAL_TIMEOUT }));\n      },\n      cancelReconnectIntervalTimer() {\n        this.reconnectIntervalTimer.cancel();\n      },\n\n    }).entry(function onEntry() {\n      if (fsm.reconnectAttempts > 0) {\n        --fsm.reconnectAttempts;\n      }\n      LOG_TRACE(`Setting up timer for ${properties.reconnectIntervalInMsecs}. reconnectAttempts left: ${fsm.reconnectAttempts}`);\n      this.reconnectIntervalTimer = Timer.newTimeout(properties.reconnectIntervalInMsecs,\n                                                     this.handleReconnectIntervalTimeout);\n    }).exit(function onExit() {\n      this.cancelReconnectIntervalTimer();\n    }).reaction(ConsumerFSMEventNames.RECONNECT_INTERVAL_TIMEOUT, function onTimeout() {\n      fsm._connectAttempts = properties.connectAttempts;\n      return this.transitionTo(fsm.Reconnecting.RBindSent);\n    })\n    ;\n\n    const flowUpFSM = this.FlowUp = new State({\n      name:          ConsumerStateNames.FLOW_UP,\n      parentContext: fsm,\n    })\n      .initial(\n        function onInitial() {\n          return this.transitionTo(fsm._active === 0\n            ? flowUpFSM.XferInactive\n            : flowUpFSM.Xfer);\n        }\n      )\n      .entry(() => {\n        fsm._replayStartLocation = undefined; //SOL-12945: only replay once.\n        // This is ugly, but I can't coerce the post event action queue to work with me:\n        // RECONNECTING should suppress UP.\n        if (!fsm._errorCausingReconnect) {\n          LOG_TRACE('Emittging UP, because there is no errorCausingReconnect');\n          fsm._addEventToEmit(MessageConsumerEventName.UP);\n        } else {\n          LOG_TRACE('Not emittging UP, because there is errorCausingReconnect');\n          fsm._errorCausingReconnect = null;\n        }\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDisconnect() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.DOWN));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        // Acks will be sent by UnbindSent\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UNBOUND, event =>\n        // Acks will be sent by UnbindSent\n        fsm.transitionToUnboundFromUp(\n          properties,\n          MessageConsumerEventName.DOWN_ERROR,\n          event.details)\n      );\n\n    flowUpFSM.Xfer = new State({\n      name:          ConsumerStateNames.FLOW_UP_XFER,\n      parentContext: flowUpFSM,\n    })\n      .entry(() => {\n        fsm._addEventToEmit(MessageConsumerEventName.ACTIVE);\n        fsm._sendAcks(true);\n        fsm._requestStartDispatch();\n      })\n      .exit(() => {\n        fsm._addEventToEmit(MessageConsumerEventName.INACTIVE);\n        fsm._requestStopDispatch();\n      })\n      // Here we send acks on disconnect.  Acks for the FLOW_CLOSE event are coupled to the sending\n      // of the unbind.\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        fsm._sendAcks(true);            // send acks, then...\n        return this.eventUnhandled();   // let the parent state handle the remaining steps.\n      });\n\n    flowUpFSM.XferInactive = new State({\n      name:          ConsumerStateNames.FLOW_UP_XFER_INACTIVE,\n      parentContext: flowUpFSM,\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_ACTIVE_IND, function onFlowActiveIndication() {\n        return this.transitionTo(flowUpFSM.Xfer);\n      });\n\n    this.UnbindSent = new State({\n      name:          ConsumerStateNames.UNBIND_SENT,\n      parentContext: fsm,\n    }, {\n\n      sendUnbindRequest() {\n        // Don't do this on entry to UNBIND, do it when the user\n        // wants to unbind\n\n        fsm._endpointClear();\n        try {\n          const correlationTag = sessionInterface.getCorrelationTag();\n          const message = SMFLib.AdProtocolMessage.getCloseMessageConsumer(consumer.flowId,\n                                                                           correlationTag);\n          sessionInterface.sendControl(message);\n          sessionInterface.enqueueRequest(\n            correlationTag,\n            () => this.handleUnbindTimeout(),\n            properties.connectTimeoutInMsecs,\n            null,\n            response => this.handleUnbindResponse(response));\n          LOG_INFO('Sent consumer unbind request with arguments',\n                   {\n                     flowId: consumer.flowId,\n                     correlationTag,\n                   });\n        } catch (e) {\n          LOG_INFO(`Exception in sendUnbindRequest while trying to send unbind request: ${e}`);\n          LOG_DEBUG(`Session (${sessionInterface.getCurrentStateName()}) assumed lost before flow unbind could be sent. Considering this flow unbound.`);\n          fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_UNBOUND }));\n        }\n      },\n\n      handleUnbindTimeout() {\n        LOG_INFO('Unbind timeout');\n        return fsm.processEvent(\n          new ConsumerFSMEvent({ name: ConsumerFSMEventNames.UNBIND_TIMEOUT })\n        );\n      },\n\n      handleUnbindResponse(msg) {\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.UNBIND) {\n          LOG_INFO(`Unexpected message type in bind response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n        }\n        const responseCode = msg.smfHeader.pm_respcode;\n        const description = msg.smfHeader.pm_respstr;\n        const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                          description);\n        consumer.endpointErrorId = msg.getEndpointErrorId();\n        LOG_INFO('Flow failed (unbind):', responseCode, description, ErrorSubcode.describe(errorSubcode));\n        return fsm.processEvent(new ConsumerFSMEvent(\n          { name: ConsumerFSMEventNames.FLOW_UNBOUND },\n          new OperationError(description, errorSubcode, responseCode)));\n      },\n\n    })\n      .entry(function onEntry() {\n        this.sendUnbindRequest();\n      })\n      .reaction(ConsumerFSMEventNames.UNBIND_TIMEOUT, function onUnbindTimeout() {\n        return this.externalTransitionTo(fsm.UnbindSent);\n      })\n      // The choice point will emit on this transition, not on exit, which is OK:\n      // we don't want to repeatedly dispatch \"unbound\" when the unbinds are timing out\n      .reaction(ConsumerFSMEventNames.FLOW_UNBOUND,\n                () => fsm.transitionToUnbound(MessageConsumerEventName.DOWN));\n\n\n    this.CreateSent = new State({\n      name:          ConsumerStateNames.CREATE_SENT,\n      parentContext: fsm,\n    }, {\n      sendCreateRequest() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const message = SMFLib.AdProtocolMessage.getCreate(\n          properties.queueDescriptor,\n          properties.queueProperties,\n          correlationTag);\n        sessionInterface.sendControl(message);\n        sessionInterface.enqueueRequest(\n          correlationTag,\n          this.handleCreateTimeout.bind(this),\n          properties.connectTimeoutInMsecs,\n          null,\n          this.handleCreateResponse.bind(this));\n      },\n      handleCreateTimeout() {\n        LOG_INFO('Create timeout');\n        fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.CREATE_TIMEOUT }));\n      },\n      handleCreateResponse(msg) {\n        LOG_TRACE(`handleCreateResponse called for message ${msg}`);\n\n\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.CREATE) {\n          LOG_INFO(`Unexpected message type in create response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n          return fsm.processEvent(\n            new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.CREATE_FAILED },\n              new OperationError(`Unexpected create response: ${\n                                 SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`,\n                                 ErrorSubcode.PROTOTOCOL_ERROR)));\n        }\n\n        const header = msg.smfHeader;\n        const responseCode = header.pm_respcode;\n\n        if (responseCode !== 200) {\n          const description = header.pm_respstr;\n          const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                            description);\n          LOG_INFO('Endpoint create failed:', responseCode, description, ErrorSubcode.describe(errorSubcode));\n          LOG_DEBUG('subcode:', errorSubcode);\n          if (errorSubcode === ErrorSubcode.ENDPOINT_ALREADY_EXISTS) {\n            LOG_TRACE('subcode recognized as ALREADY EXISTS:', errorSubcode);\n            const respEvent = { name: ConsumerFSMEventNames.CREATE_SUCCESS };\n            return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n          }\n          LOG_TRACE('subcode not recognized as ALREADY EXISTS:', errorSubcode);\n          return fsm.processEvent(new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.CREATE_FAILED },\n              new OperationError(description, errorSubcode, { responseCode })));\n        }\n\n        const respEvent = { name: ConsumerFSMEventNames.CREATE_SUCCESS };\n        return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n      },\n    }\n    )\n      .entry(function onEntry() {\n        //send create request\n        this.sendCreateRequest();\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_TIMEOUT, function onCreateTimeout() {\n        LOG_DEBUG('Create timeout, just moving on to bind and hoping for the best.');\n        return this.externalTransitionTo(fsm.BindSent);\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_SUCCESS, function onCreateSuccess() {\n        return this.externalTransitionTo(fsm.BindSent);\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_FAILED, function onCreateFailed(evt) {\n        // \"queue exists\" should be noticed in the response handler and emit CREATE_SUCCESS.:\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitBindFailed(evt.details));\n      });\n  }\n\n  /**\n   *\n   * @param {solace.Message} message The message being accepted by the flow.\n   * @returns {Boolean} True if the message was accepted.\n   * @private\n   */\n  acceptMessage(message) {\n    const { LOG_TRACE, LOG_DEBUG } = this.logger;\n    const messageID = message.getGuaranteedMessageId();\n    const idstr = messageID.toString();\n    const consumer = this._consumer;\n\n    if (!this._fsmDispatch) {\n      // We're disconnecting. Drop the message.\n      LOG_TRACE('Dropping message because this flow cannot acknowledge it');\n      consumer.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n      return false;\n    }\n    //Booby trap getDeliveryCount() on the message if the flow doesn't support it:\n    if (!consumer.deliveryCountSent) {\n      message.setDeliveryCount(-1);\n    }\n    // SMF flow suid can be updated via data message if there is a\n    // header parameter containing the suid. All subsequent data messages\n    // without suid must have the stored Flow suid set on data message.\n    //\n    // Update flow with message suid if and only if there was an initialized\n    // suid from the flow bind response.\n    // There is a legacy router case where suid are passed opaquely through the\n    // network of brokers on the message. In the case where a suid is present\n    // on a message without a suid on the bind response this indicates the suid\n    // is not an update to subsequent messages suid values. As the current broker\n    // connected does not support suid generation or assignment.\n    //\n    // Note a spooler unique id is only set if the message SMF\n    // contained the SpoolerUniqueId header parameter.\n    // See decode for details.\n    const messageSuid = message._getSpoolerUniqueId();\n    if (RgmidFactory.INVALID_SUID.eq(messageSuid)) {\n      // set the message suid value to stored consumer suid value\n      message._setSpoolerUniqueId(consumer.spoolerUniqueId);\n    } else if (consumer.spoolerUniqueId !== undefined\n        && !RgmidFactory.INVALID_SUID.eq(consumer.spoolerUniqueId)) {\n      // otherwise update the consumer with new suid value if consumer suid was initialized\n      const consumerSuidStr = consumer.spoolerUniqueId.toString();\n      const msgSuidStr = messageSuid.toString();\n      LOG_DEBUG('Updating Consumer message spoolerUniqueId from ', consumerSuidStr,\n                ' to ', msgSuidStr);\n      consumer.spoolerUniqueId = messageSuid;\n    } else if ((consumer.spoolerUniqueId === undefined\n        || RgmidFactory.INVALID_SUID.eq(consumer.spoolerUniqueId))\n        && !RgmidFactory.INVALID_SUID.eq(messageSuid)) {\n      // clear the message spooler unique id on flows without initial spooler\n      // unique id as rmid is not supported\n      message._setSpoolerUniqueId(RgmidFactory.INVALID_SUID);\n    }\n\n    const transportAcks = this._transportAcks;\n    const ackResult = transportAcks.tryReceive(messageID,\n                                               message.getGuaranteedPreviousMessageId());\n    const transportAckRequired = transportAcks.acksPending > this.maxPendingAcks;\n    switch (ackResult) {\n      case TransportAckResult.OK:\n        break; // carry on\n      case TransportAckResult.DUPLICATE:\n        consumer.incStat(StatType.RX_DISCARD_DUPLICATE);\n        // Two options here: could check membership in the ringbuffer,\n        // or could check whether the ID is less than ringbuffer.front().\n        // Untested assumption: arithmetic comparison on boxed Long at front()\n        // is more computationally expensive than native Map() lookup.\n        if (!this._applicationAcks.has(messageID) &&\n            !this._oldUnacked.has(idstr)) {\n          LOG_TRACE('Will application ack unknown duplicate ID', idstr);\n          this._sendAck([[messageID, messageID]]);\n        } else if (transportAckRequired) {\n          this._sendAcks(transportAckRequired);\n        } else {\n          // if we are receiving dups we should make sure we send\n          // and ack in case we don't receive any non duplicates\n          // and we don't receive enough duplicates to exceed\n          // maxPendingAcks.  Eventually we would but only after\n          // the  router retransmitted many times.\n          this._setTransportAckTimer();\n        }\n        return false;\n      case TransportAckResult.OUT_OF_ORDER:\n        consumer.incStat(StatType.RX_DISCARD_OUT_OF_ORDER);\n        return false;\n      default:\n        assert(false, 'Unhandled transport ack result', ackResult);\n        return false;\n    }\n\n    return this._applicationAcks.insert(messageID, (evicting) => {\n      let applicationAckRequired = false;\n      if (evicting) {\n        switch (evicting.state) {\n          case ApplicationAckState.UNACKED:\n            this._oldUnacked.add(evicting.key);\n            break;\n          case ApplicationAckState.ACKED_NOT_SENT:\n            applicationAckRequired = true;\n            break;\n          case ApplicationAckState.ACKED_SENT:\n            // OK to evict\n            break;\n          default:\n            assert(false,\n                   'Unhandled application ack state',\n                   ApplicationAckState.describe(evicting.state));\n        }\n      }\n\n      this._midDispatch = true;\n      this._messageDispatch.push(message);\n      this._midDispatch = false;\n\n      if (transportAckRequired || applicationAckRequired) {\n        LOG_TRACE('Need to send acks:',\n                  'transport', transportAckRequired,\n                  'application', applicationAckRequired);\n        this._sendAcks(transportAckRequired);\n      } else {\n        this._setTransportAckTimer();\n      }\n\n      return true;\n    });\n  }\n\n  applicationAck(messageId) {\n    const { LOG_TRACE } = this.logger;\n\n    const idstr = messageId.toString();\n    this._consumer.incStat(StatType.RX_ACKED);\n\n    // Was the message old, and demoted to _oldUnacked?\n    if (this._oldUnacked.delete(idstr)) { // True if idstr was member\n      // It was old. Ack immediatesly.\n      LOG_TRACE('Application acking old message immediately');\n      this._sendAck([[messageId, messageId]]);\n      return;\n    }\n\n    // We can't regress the ack_state this way; message.acknowledge() throws if called\n    // more than once.\n    this._applicationAcks.updateAckState(messageId, ApplicationAckState.ACKED_NOT_SENT);\n    this._setTransportAckTimer();\n  }\n\n  getDestination() {\n    this._endpointEnsure();\n    return this._destination;\n  }\n\n  isDisconnected() {\n    if (!this.getCurrentState()) return true;\n    return (\n      this.getActiveState(ConsumerStateNames.UNBOUND) ||\n      this.getActiveState(ConsumerStateNames.UNBOUND_AWAITING_FLOWOPEN)\n    );\n  }\n\n  requestStartDispatchUser() {\n    this._userDispatch = true;\n    this.applyStartDispatch();\n  }\n\n  requestStartDispatchFSM() {\n    this._fsmDispatch = true;\n    this.applyStartDispatch();\n  }\n\n  applyStartDispatch() {\n    if (this._userDispatch && this._fsmDispatch) {\n      this.log(`Starting message dispatch (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n      this._messageDispatch.start();\n      this._localMaxWindowSize = this._localPreferredWindowSize;\n      this._sendAcks(true);\n    } else {\n      this.log(`Not starting message dispatch (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    }\n  }\n\n  transitionToUnbound(eventName, error) {\n    const consumer = this._consumer;\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Flow down, user disconnected?', consumer.userDisconnected);\n\n    return this.transitionTo(this.Unbound.AwaitFlowOpen, () =>\n      this._addEventToEmit(eventName, error));\n  }\n\n  transitionToUnboundFromUp(properties, eventName, error) {\n    const consumer = this._consumer;\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Choice point for FLOW_UNBOUND in FlowUp state.');\n    // Always clear duplicate filter state on \"Replay started\"\n    // (no way to maintain it and drop the replayed messages as duplicates)\n    if (error && error instanceof OperationError && error.subcode) {\n      if (error.subcode === ErrorSubcode.REPLAY_STARTED) {\n        // \"this\" is the fsm.\n        this._transportAcks.reset();\n        this._applicationAcks.reset();\n      }\n    }\n    if (consumer.endpointErrorId &&\n      this._sessionInterface.isCapable(CapabilityType.MESSAGE_REPLAY)) {\n      LOG_TRACE(`Acking unsolicited unbind with endpointErrorId ${consumer.endpointErrorId}`);\n      const unbindAck = SMFLib.AdProtocolMessage.getUnbindAck(consumer._flowId,\n                                                              consumer.endpointErrorId,\n                                                              this._transportAcks.lastAcked);\n      this._sessionInterface.sendControl(unbindAck); // Must succeed or throw\n    }\n    if (properties.reconnectAttempts === -1 || properties.reconnectAttempts > 0) {\n      if (error && error instanceof OperationError && error.subcode) {\n        if (error.subcode === ErrorSubcode.REPLAY_STARTED ||\n          error.subcode === ErrorSubcode.GM_UNAVAILABLE) {\n          LOG_TRACE(`Saving errorCausingReconnect: ${error}`);\n          this._errorCausingReconnect = error;\n          // Reconnecting state emits the RECONNECTING event.\n          return this.transitionTo(this.Reconnecting);\n        }\n      }\n    } //else: flow reconnect feature disabled, or not applicable.\n    return this.transitionTo(this.Unbound.AwaitFlowOpen, () =>\n      this._addEventToEmit(eventName, error));\n  }\n\n  requestStopDispatchUser() {\n    this._userDispatch = false;\n    this.log(`Stop dispatch user (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    this._messageDispatch.stop();\n  }\n\n  requestStopDispatchFSM() {\n    this._fsmDispatch = false;\n    this.log(`Stop dispatch FSM (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    this._sendAcks(true);\n  }\n\n  _clearTransportAckTimer() {\n    if (!this._transportAckTimer) return;\n\n    clearTimeout(this._transportAckTimer);\n    this._transportAckTimer = null;\n  }\n\n  _dispose() {\n    this._clearTransportAckTimer();\n    this._endpointClear();\n    this._destination = undefined;\n    this._unacked = null;\n    this._messageDispatch = null;\n    this._transportAcks = null;\n    this._consumer = null;\n    this._sessionInterface = null;\n  }\n\n  _endpointClear() {\n    this._endpoint = undefined;\n    this._subscription = undefined;\n  }\n\n  _endpointEnsure() {\n    if (this._endpoint) {\n      // The endpoint, destination and any possible topic subscription are generated\n      // at the same time. Use the presence of the endpoint to determine whether\n      // any of this has already been done.\n      return;\n    }\n\n    const sessionInterface = this._sessionInterface;\n    const properties = this._consumer._properties;\n    const { queueDescriptor } = properties;\n\n    let destination;\n    let endpoint;\n    let subscription;\n    if (queueDescriptor.type === QueueType.QUEUE) {\n      // The publish destination needs a prefix. Create a destination from\n      // the descriptor, then derive the endpoint name from that.\n      destination = sessionInterface.createDestinationFromDescriptor(queueDescriptor);\n\n      // The bind target is the queue name encoded as though a topic -- no prefix\n      // Use the offset information to build a bind target\n      endpoint = new Queue({\n        name:   destination.name,\n        type:   DestinationType.QUEUE,\n        offset: 0,\n        bytes:  destination.bytes.substr(destination.offset),\n      });\n\n      subscription = undefined;\n    } else {\n      // QueueType.TOPIC_ENDPOINT\n      endpoint = queueDescriptor.name\n        ? sessionInterface.createDestinationFromDescriptor(queueDescriptor)\n        : new Topic({ name: '\\0?', offset: 0, bytes: '\\0' });\n      subscription = properties.topicEndpointSubscription ||\n        sessionInterface.createTemporaryDestination(DestinationType.TOPIC);\n      destination = subscription;\n    }\n\n    // Using Object.assign to enforce the invariant that these three properties are set together\n    // or not at all.\n    Object.assign(this, {\n      _destination:  destination,\n      _endpoint:     endpoint,\n      _subscription: subscription,\n    });\n\n    // Update the properties object (if TTMP, we may modify it again)\n    properties.queueDescriptor = new QueueDescriptor({\n      name:    endpoint.name,\n      type:    queueDescriptor.type,\n      durable: queueDescriptor.durable,\n    });\n  }\n\n  _resetLocalConnectionState() {\n    Object.assign(this, {\n      _remoteWindowSize: 0,\n      _active:           undefined,\n      _fsmDispatch:      false,\n      _userDispatch:     true, // User flow is initially started\n    });\n  }\n\n  _resetRemoteConnectionState() {\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Initializing transport acks');\n    this._transportAcks = new TransportAcks();\n\n    LOG_TRACE('Initializing application acks');\n    this._applicationAcks = new ApplicationAckRingBuffer(RING_BUFFER_SIZE);\n    this._oldUnacked = new Set();\n\n    LOG_TRACE('Initializing endpointErrorId');\n    this._consumer.endpointErrorId = undefined;\n  }\n\n  /**\n   * Sends a single ack.\n   *\n   * @param {Array.<ackpair>} applicationAcks The application ack ranges to send\n   * @memberof ConsumerFSM\n   * @private\n   */\n  _sendAck(applicationAcks) {\n    const transportAck = SMFLib.AdProtocolMessage.getAck(\n      this._consumer.flowId,\n      this._transportAcks.lastReceived,\n      this.windowSize,\n      applicationAcks);\n    this._sessionInterface.sendControl(transportAck); // Must succeed or throw\n  }\n\n  /**\n   * Adds the current ack ranges to an accumulator. Call this for each applicationAck.\n   * When a range ends (we receive an unacked), or we are explictly flushing\n   * (applicationAck === null), we convert the accumulator to acks, send them, update state,\n   * and reset accumulators.\n   *\n   * This should be called at least once with the last invocation having ackRange = null.\n   * This invokes the flush path, which is necessary if any ranges were in progress,\n   * and this is the only path that repects the forceTransportAck flag.\n   *\n   * @param {Object} acksPendingState State associated with this activity\n   * @param {ApplicationAck} applicationAck The ack to process for ack ranges.\n   *    If `null`, any pending acks are flushed and a transport ack is sent, if\n   *    required.\n   * @private\n   */\n  _addAckToRanges(acksPendingState, applicationAck = null) {\n    const currentRange = acksPendingState.currentRange;\n    const ackRanges = acksPendingState.ackRanges;\n\n    if (applicationAck && applicationAck.state !== ApplicationAckState.UNACKED) {\n      currentRange.push(applicationAck);\n      return; // Wait for end of range or flush\n    }\n\n    // We received an UNACKED or a null ack (flush). Complete this range.\n    if (currentRange.length) {\n      ackRanges.push(currentRange);\n    }\n\n    // If we're flushing or we've hit the protocol limit for ranges in a single ack,\n    // we send ack messages, update ack states and clear the accumulator.\n    // This condition will be true at least once (must flush at the end).\n    if (applicationAck === null ||\n        ackRanges.length === SMFLib.AdProtocolMessage.MAX_CLIENT_ACK_RANGES) {\n      // Reduce each range to a first and last ID.\n      const bareRanges = ackRanges.map(range => [range[0].id, range[range.length - 1].id]);\n\n      if (bareRanges.length || acksPendingState.forceTransportAck) {\n        // We send the ranges. This could throw.\n        const { LOG_TRACE } = this.logger;\n        this._sendAck(bareRanges);\n        // Warning: this log statement reduces debug performance by 25%!\n        LOG_TRACE(\n          'Sent ack: ',\n          `Transport ack: ${this._transportAcks.lastReceived}`,\n          `Application acks: ${bareRanges.length\n            ? bareRanges.map(g => `[${g[0]}..${g[1]}]`)\n            : '[]'}`\n        );\n        // If the intent was to force a transport ack, that condition is fulfilled.\n        this._transportAcks.setAcked();\n        acksPendingState.forceTransportAck = false;\n      }\n\n      // Since the range send succeeded, update the ack states.\n      ackRanges.forEach((ackRange) => {\n        ackRange.forEach((ack) => {\n          if (ack.state !== ApplicationAckState.ACKED_SENT) {\n            try {\n              this._applicationAcks.updateAckState(ack.id,\n                                                   ApplicationAckState.ACKED_SENT);\n            } catch (e) {\n              const { LOG_ERROR } = this.logger;\n              LOG_ERROR(`Marking ack ${ack.id} as sent failed: ${e}`);\n            }\n          }\n        });\n      });\n\n      // Clear the main accumulator since it has hit the wire.\n      acksPendingState.ackRanges = [];\n    }\n    // Clear the accumulator for this range.\n    acksPendingState.currentRange = [];\n  }\n\n  /**\n   * Sends acknowledgements, along with a window update for this flow.\n   *\n   * @param {Boolean} forceTransportAck `true` sends transport ack even if no acks pending\n   * @private\n   */\n  _sendAcks(forceTransportAck = false) {\n    this._clearTransportAckTimer();\n\n    const applicationAcks = this._applicationAcks;\n    const transportAcks = this._transportAcks;\n\n    // This state is temporary and shared with the ack generating function.\n    const acksPendingState = {\n      forceTransportAck: forceTransportAck || (transportAcks.acksPending > 0),\n      ackRanges:         [],\n      currentRange:      [],\n    };\n\n    // If the first ringbuffer ack state is acked and there are no unacked before this,\n    // we can create an ack range that includes zero.\n    // If the first ringbuffer ack state is unacked, we can say nothing about the\n    // range before the first acked ID in the ringbuffer.\n    const front = this._applicationAcks.front();\n    if (this._oldUnacked.size === 0 && front && front.state !== ApplicationAckState.UNACKED) {\n      // State is acked_sent so we don't try to update the ring buffer.\n      this._addAckToRanges(acksPendingState, ZERO_APP_ACK);\n      // We know that front will be added to this range by the iteration.\n    }\n\n    // Build ack ranges using the accumulator\n    applicationAcks.forEach(ack => this._addAckToRanges(acksPendingState, ack));\n    // Flush the last pending ack range.\n    this._addAckToRanges(acksPendingState);\n\n    // On successful exit, we've sent and cleared all accumulators, and we've sent\n    // a transport ack if we were supposed to do that.\n    assert(acksPendingState.forceTransportAck === false);\n    assert(acksPendingState.currentRange.length === 0);\n    assert(acksPendingState.ackRanges.length === 0);\n  }\n\n  _setTransportAckTimer() {\n    if (this._transportAckTimer) return;\n    if (this._consumer.disposed) return;\n    this._transportAckTimer = setTimeout(\n      () => this._sendAcks(true),\n      this._acknowledgeTimeoutInMsecs\n    );\n  }\n\n  get maxWindowSize() {\n    return Math.min(this._localMaxWindowSize,\n                    this._remoteWindowSize || Number.POSITIVE_INFINITY);\n  }\n\n  get windowSize() {\n    return this.maxWindowSize - this._messageDispatch.length;\n  }\n\n  get maxPendingAcks() {\n    return this.windowSize * this._acknowledgeThreshold / 100.0;\n  }\n\n}\n\nmodule.exports.ConsumerFSM = ConsumerFSM;\n","const { Enum } = require('solclient-eskit');\n\nconst ConsumerStateNames = {\n  UNBOUND:                       'UNBOUND',\n  UNBOUND_AWAIT_SESSION_UP:      'UNBOUND_AWAIT_SESSION_UP',\n  UNBOUND_AWAIT_FLOWOPEN:        'UNBOUND_AWAIT_FLOWOPEN',\n  UNBOUND_AWAIT_ANY:             'UNBOUND_AWAIT_ANY',\n  BIND_SENT:                     'BIND_SENT',\n  FLOW_UP:                       'FLOW_UP',\n  FLOW_UP_XFER:                  'FLOW_UP_XFER',\n  FLOW_UP_XFER_INACTIVE:         'FLOW_UP_XFER_INACTIVE',\n  UNBIND_SENT:                   'UNBIND_SENT',\n  RECONNECTING:                  'RECONNECTING',\n  RECONNECTING_BIND_SENT:        'RECONNECTING_BIND_SENT',\n  RECONNECTING_AWAIT_SESSION_UP: 'RECONNECTING_AWAIT_SESSION_UP',\n  RECONNECTING_AWAIT_TIMER:      'RECONNECTING_AWAIT_TIMER',\n  CREATE_SENT:                   'CREATE_SENT',\n};\n\nmodule.exports.ConsumerStateNames = Enum.new(ConsumerStateNames);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of consumer acknowledgement modes. The corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#acknowledgeMode}\n * configures how acknowledgments are generated for received Guaranteed messages.\n *\n * When received messages are acknowledged they are removed from the Guaranteed\n * Message storage on the Solace Message Router. Message Consumer acknowledgements,\n * <b>only</b> remove messages from the Solace Message Router.\n *\n * In particular, withholding Message Consumer Acknowledgemnts does not stop\n * message delivery. For Message Consumer flow control see\n * {@link solace.MessageConsumer.stop}/{@link solace.MessageConsumer.start}. Message Consumer\n * flow control may also be imlpemented by removing the\n * {@link solace.MessageConsumerEventName#event:MESSAGE} listener.\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst MessageConsumerAcknowledgeMode = {\n  /**\n   * The API automatically acknowledges any message that was delivered to all\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} listeners with no exception thrown\n   * on any of them.\n   */\n  AUTO:   'AUTO',\n  /**\n   * The API acknowledges a message only when the application calls\n   * {@link solace.Message#acknowledge}.\n   */\n  CLIENT: 'CLIENT',\n};\n\nmodule.exports.MessageConsumerAcknowledgeMode = Enum.new(MessageConsumerAcknowledgeMode);\n","const { Enum } = require('solclient-eskit');\n/**\n * An enumeration of message consumer event names. A {@link solace.MessageConsumer} will emit\n * these events as part of its lifecycle.  Applications, having created a MessageConsumer can\n * choose to listen to all of the events described here, or any subset of these events. For Example:\n * <pre>\n *   <code>\n *     mc = solace.Session.createMessageConsumer(...);\n *     mc.on(solace.MessageConsumerEventName.CONNECT_FAILED_ERROR,\n *           function connectFailedErrorEventCb(error) {\n *             // error can be used as an OperationError object\n *           });\n *   </code>\n * </pre>\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst MessageConsumerEventName = {\n  /**\n   * The message consumer is established.\n   * @event solace.MessageConsumerEventName#UP\n   */\n  UP:                   'MessageConsumerEventName_up',\n  /**\n   * The message consumer is successfully disconnected.\n   * The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#DOWN\n   */\n  DOWN:                 'MessageConsumerEventName_down',\n /**\n   * The message consumer has become active.\n   *\n   * @event solace.MessageConsumerEventName#ACTIVE\n   */\n  ACTIVE:               'MessageConsumerEventName_active',\n  /**\n   * The message consumer has become inactive.\n   *\n   * @event solace.MessageConsumerEventName#INACTIVE\n   */\n  INACTIVE:             'MessageConsumerEventName_inactive',\n  /**\n   * The message consumer was established and then disconnected by the router,\n   * likely due to operator intervention. The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#DOWN_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  DOWN_ERROR:           'MessageConsumerEventName_downError',\n  /**\n   * The message consumer was established and then disconnected by the router,\n   * likely due to operator intervention, but flow auto reconnect is active.\n   * The message consumer is disabled, but actively reconnecting.\n   * Expect a RECONNECTED or DOWN_ERROR on success of failure. respectively.\n   * See also MessageConsumerProperties.reconnectAttempts and reconnectIntervalInMsecs.\n   *\n   * @event solace.MessageConsumerEventName#RECONNECTING\n   * @param {solace.OperationError} error Details of the error that triggered the reconnect.\n   */\n  RECONNECTING:         'MessageConsumerEventName_reconnecting',\n  /**\n   * The message consumer successfully auto-reconnected.\n   *\n   * @event solace.MessageConsumerEventName#RECONNECTED\n   */\n  RECONNECTED:          'MessageConsumerEventName_reconnected',\n  /**\n   * The message consumer attempted to connect but was unsuccessful.\n   * The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  CONNECT_FAILED_ERROR: 'MessageConsumerEventName_connectFailedError',\n  /**\n   * The message consumer will not connect because the current session is incompatible\n   * with Guaranteed Messaging. The message consumer is disabled until a compatible session\n   * is available.\n   *\n   * @event solace.MessageConsumerEventName#GM_DISABLED\n   */\n  GM_DISABLED:          'MessageConsumerEventName_GMDisabled',\n  /**\n   * The message consumer is being disposed. No further events will be emitted.\n   *\n   * @event solace.MessageConsumerEventName#DISPOSED\n   */\n  DISPOSED:             'MessageConsumerEventName_disposed',\n  /**\n   * A message was received on the message consumer.\n   *\n   * If the application throws an exception in this listener, and the consumer was configured\n   * to automatically acknowledge messages\n   * (see {@link solace.MessageConsumerProperties#acknowledgeMode}),\n   * the API will not acknowledge the message, since it\n   * may not have been successfully processed by the application. Such a message must be\n   * acknowledged manually. If the application did not retain a reference to the message, it\n   * may be redelivered by calling {@link solace.MessageConsumer#disconnect} followed by\n   * {@link solace.MessageConsumer#connect} depending on the configuration of the queue.\n   *\n   * When there is no listener for <i>MESSAGE</i> on a MessageConsumer, messages are queued\n   * internally until a listener is added.\n   *\n   * @event solace.MessageConsumerEventName#MESSAGE\n   * @param {solace.Message} message The received message being delivered in this event.\n   */\n  MESSAGE:              'MessageConsumerEventName_message',\n  /**\n   * The subscribe or unsubscribe operation succeeded on the queue.\n   * @event solace.MessageConsumerEventName#SUBSCRIPTION_OK\n   * @param {solace.MessageConsumerEvent} event The details related\n   * to the successful subscription update.\n   */\n  SUBSCRIPTION_OK:      'MessageConsumerEventName_ok',\n  /**\n   * The Solace Message Router rejected a queue subscription (add or remove).\n   * @event solace.MessageConsumerEventName#SUBSCRIPTION_ERROR\n   * @param {solace.MessageConsumerEvent} error The details related\n   * to the failed subscription update.\n   */\n  SUBSCRIPTION_ERROR:   'MessageConsumerEventName_error',\n\n};\n\nmodule.exports.MessageConsumerEventName = Enum.new(MessageConsumerEventName);\n","const { ErrorSubcode } = require('solclient-error');\n\n\n/**\n * Message consumer event objects. A {@link solace.MessageConsumer} will emit\n * these events related to queue subscription management:\n * MessageConsumerEventName.SUBSCRIPTION_OK and\n * MessageConsumerEventName.SUBSCRIPTION_ERROR.\n *\n * Similar to SessionEvent.\n * Also compatible with RequestError.\n *\n * @memberof solace\n */\nclass MessageConsumerEvent {\n  /**\n   * @constructor\n   * @param {String} messageConsumerEventName one of the MessageConsumerEventNames.\n   * @param {String} infoStr Information string\n   * @param {Number} [responseCode] Any associated router response code\n   * @param {solace.ErrorSubcode} [errorSubcode] Any associated error subcode\n   * @param {Object} [correlationKey] Any associated correlation key\n   * @param {String} [reason] Any additional information\n   * @private\n   */\n  constructor(\n    messageConsumerEventName,\n    infoStr,\n    responseCode = undefined,\n    errorSubcode = 0,\n    correlationKey = undefined,\n    reason = undefined) {\n    this._messageConsumerEventName = messageConsumerEventName;\n    this._infoStr = infoStr;\n    this._responseCode = responseCode;\n    this._errorSubcode = errorSubcode;\n    this._correlationKey = correlationKey; // optional\n    this._reason = reason; // optional\n  }\n\n  /**\n   * @type {String}\n   * @description the appropriate MessageConsumerEventName\n   *\n   *   MessageConsumerEventName.SUBSCRIPTION_OK or\n   *   MessageConsumerEventName.SUBSCRIPTION_ERROR.\n   */\n  get messageConsumerEventName() {\n    return this._messageConsumerEventName;\n  }\n\n  /**\n   * @type {String}\n   * @description the appropriate MessageConsumerEventName\n   *\n   *   MessageConsumerEventName.SUBSCRIPTION_OK or\n   *   MessageConsumerEventName.SUBSCRIPTION_ERROR.\n   */\n  get name() {\n    return this._messageConsumerEventName;\n  }\n\n  /**\n   * @type {String}\n   * @description if applicable, an information string returned by the Solace Message Router.\n   */\n  get infoStr() {\n    return this._infoStr;\n  }\n\n  /**\n   * @type {?Number}\n   * @description if applicable, a response code returned by the Solace Message Router.\n   */\n  get responseCode() {\n    return this._responseCode;\n  }\n\n  /**\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n   * same as subcode.\n   */\n  get errorSubcode() {\n    return this._errorSubcode;\n  }\n\n  /**\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n   * Same as errorSubcode.\n   */\n  get subcode() {\n    return this._errorSubcode;\n  }\n\n  /**\n   * @type {?Object}\n   * @description A user-specified object\n   * made available in the response or confirmation event by including it as a\n   * parameter in the orignal API call.  If the user did not specify a\n   * correlationKey, it will be <code>null</code>.\n   */\n  get correlationKey() {\n    return this._correlationKey;\n  }\n\n  /**\n   * @type {?String}\n   * @description Additional information if it is applicable.\n   *\n   * In case of subscribe or publish events, it constains the topic.\n   */\n  get reason() {\n    return this._reason;\n  }\n  /**\n   * @param {Object} value The reason info object\n   * @internal\n   */\n  set reason(value) {\n    this._reason = value;\n  }\n\n  /**\n   * @type {?solace.SessionEventCode}\n   * @description Only here for compatibility with the RequestError exception class.\n   * Always returns undefined for a MessageConsumerEvent.\n   */\n  // eslint-disable-next-line class-methods-use-this\n  get requestEventCode() {\n    return undefined;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'messageConsumerEventName': this.messageConsumerEventName,\n      'infoStr':                  this.infoStr,\n      'responseCode':             this.responseCode,\n      'errorSubcode':             ErrorSubcode.describe(this.errorSubcode),\n      'correlationKey':           this.correlationKey ? this.correlationKey.toString() : null,\n      'reason':                   this.reason ? this.reason : null,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.MessageConsumerEvent = MessageConsumerEvent;\n","const {\n  AbstractQueueDescriptor,\n  QueueDescriptor,\n  QueueDescriptorValidator,\n  QueueProperties,\n  QueuePropertiesValidator,\n  QueueType,\n} = require('solclient-queue');\nconst { APIPropertiesValidators } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { OperationError, ErrorSubcode } = require('solclient-error');\nconst { ReplayStartLocation } = require('solclient-replaystart');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valInstance,\n  valIsMember,\n  valNumber,\n  valRange,\n  valTopicStringOrEmpty,\n} = APIPropertiesValidators;\n\nfunction valTopicEndpointSubscription(typeDesc, instance) {\n  if (instance.queueDescriptor.getType() === QueueType.TOPIC_ENDPOINT) {\n    if (instance.queueDescriptor.isDurable() && !instance.createIfMissing) {\n      if (!instance.topicEndpointSubscription) {\n        throw new OperationError('topicEndpointSubscription must be set when queueDescriptor ' +\n                                'refers to a durable topic endpoint and not allowed to create.',\n                                ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    }\n  } else if (instance.topicEndpointSubscription) {\n    // is QueueType.QUEUE\n    throw new OperationError('topicEndpointSubscription is set, but queueDescriptor ' +\n                              'refers to a queue that is not of type QueueType.TOPIC_ENDPOINT',\n                              ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nconst MessageConsumerPropertiesValidator = {\n  validate(prefix, instance, rawProperties) {\n    if (Object.prototype.hasOwnProperty.call(rawProperties, 'transportAcknowledgeTimeoutInMsecs') &&\n        Object.prototype.hasOwnProperty.call(rawProperties, 'acknowledgeTimeoutInMsecs')) {\n      throw new OperationError(`${prefix} validation: transportAcknowledgeTimeoutInMsecs and acknowledgeTimeoutInMsecs are mutually exclusive`,\n                                ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n    if (Object.prototype.hasOwnProperty.call(rawProperties, 'transportAcknowledgeThresholdPercentage') &&\n        Object.prototype.hasOwnProperty.call(rawProperties, 'acknowledgeThreshold')) {\n      throw new OperationError(`${prefix} validation: transportAcknowledgeThresholdPercentage and acknowledgeThreshold are mutually exclusive`,\n          ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n\n    const v = validateInstance.bind(null, prefix, instance);\n    if (!(instance.queueDescriptor instanceof AbstractQueueDescriptor ||\n          instance.queueDescriptor instanceof QueueDescriptor)) {\n      throw new OperationError(`${prefix} validation: queue descriptor must be ` +\n                                'an AbstractQueueDescriptor or a QueueDescriptor',\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    QueueDescriptorValidator.validate(instance.queueDescriptor);\n\n    if (instance.queueProperties) {\n      if (instance.queueDescriptor.durable && !instance.createIfMissing) {\n        throw new OperationError(`${prefix} validation: queueProperties cannot be set unless ` +\n          'queueDescriptor refers to a temporary queue, or createIfMissing is set.',\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      v('queueProperties', [valInstance, QueueProperties, 'QueueProperties']);\n      QueuePropertiesValidator.validate(instance.queueProperties);\n      if (!instance.queueDescriptor.durable &&\n        Check.something(instance.queueProperties.accessType)) {\n        throw new OperationError(`${prefix} validation: queueProperties cannot specify accessType ` +\n                                 'in creation of a temporary queue',\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    }\n\n    // Validate TE subscription\n\n    if (instance.queueDescriptor.type === QueueType.TOPIC_ENDPOINT) {\n      // QueueType.TOPIC_ENDPOINT\n      if (instance.queueDescriptor.durable &&\n        !instance.createIfMissing &&\n        !instance.topicEndpointSubscription) {\n        throw new OperationError(`${prefix} validation: topicEndpointSubscription must be set for durable ` +\n          'topic endpoints unless creation is allowed.',\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    } else if (instance.topicEndpointSubscription) {\n      throw new OperationError(`${prefix} validation: topicEndpointSubscription cannot be set unless ` +\n        'descriptor.type is TOPIC_ENDPOINT',\n        ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n    v('connectAttempts', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('topicEndpointSubscription', [valTopicEndpointSubscription], [valTopicStringOrEmpty]);\n\n    v('acknowledgeMode', [valIsMember, MessageConsumerAcknowledgeMode, 'MessageConsumerAcknowledgeMode']);\n    v('transportAcknowledgeTimeoutInMsecs', [valNumber], [valRange, 20, 1500]);\n    v('transportAcknowledgeThresholdPercentage', [valNumber], [valRange, 1, 75]);\n\n    v('activeIndicationEnabled', [valBoolean]);\n    v('noLocal', [valBoolean]);\n    v('windowSize', [valNumber], [valRange, 1, 255]);\n    v('reconnectIntervalInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n\n    if (instance.activeIndicationEnabled &&\n      instance.queueDescriptor.type !== QueueType.QUEUE) {\n      throw new OperationError(\n        `${prefix} validation: activeIndicationEnabled may only be true for ` +\n        'QUEUE destinations',\n        ErrorSubcode.PARAMETER_CONFLICT\n      );\n    }\n    if (instance.replayStartLocation &&\n      !(instance.replayStartLocation instanceof ReplayStartLocation)) {\n      throw new OperationError(`${prefix} validation: replayStartLocation must be ` +\n        'an instance of ReplayStartLocation',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n};\n\nmodule.exports.MessageConsumerPropertiesValidator = MessageConsumerPropertiesValidator;\n","const QueueLib = require('solclient-queue');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { Topic } = require('solclient-destination');\n\nconst DEFAULTS = {\n  queueDescriptor:                         undefined,\n  queueProperties:                         undefined,\n  connectTimeoutInMsecs:                   10000,\n  connectAttempts:                         3,\n  topicEndpointSubscription:               undefined,\n  // selector: undefined,\n  acknowledgeMode:                         MessageConsumerAcknowledgeMode.AUTO,\n  transportAcknowledgeTimeoutInMsecs:      1000,\n  transportAcknowledgeThresholdPercentage: 60,\n  activeIndicationEnabled:                 false,\n  noLocal:                                 false,\n  windowSize:                              255,\n  _browser:                                false,\n  replayStartLocation:                     undefined,\n  reconnectAttempts:                       -1,\n  reconnectIntervalInMsecs:                3000,\n  createIfMissing:                         false,\n};\n\n/**\n * @classdesc\n * Defines the properties for a {@link solace.MessageConsumer}.\n *\n * @memberof solace\n */\nclass MessageConsumerProperties extends APIProperties {\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Defines the queue from which to consume.\n   *  * For durable queues and durable topic endpoints, this must be a\n   *    {@link solace.QueueDescriptor} unless\n   *    {@link solace.MessageConsumerProperties#createIfMissing} is set.\n   *  * When an {@link solace.AbstractQueueDescriptor} is used, the name is generated when\n   *    the {@link solace.MessageConsumer} is connected. The generated descriptor can be queried\n   *    from the consumer after it has successfully connected by calling\n   *    {@link solace.MessageConsumer#getProperties}.\n   * @type {solace.QueueDescriptor}\n   */\n  get queueDescriptor() {\n    return Check.something(this._queueDescriptor)\n      ? this._queueDescriptor\n      : DEFAULTS.queueDescriptor;\n  }\n  set queueDescriptor(value) {\n    if (value instanceof QueueLib.AbstractQueueDescriptor) {\n      this._queueDescriptor = value;\n    } else if (value) {\n      this._queueDescriptor = value.name\n        ? new QueueLib.QueueDescriptor(value)\n        : new QueueLib.AbstractQueueDescriptor(value);\n    } else {\n      this._queueDescriptor = value;\n    }\n  }\n\n  /**\n   * Gets the properties of the remote queue.\n   *  * For temporary queues and temporary topic endpoints,\n   *    or if {@link solace.MessageConsumerProperties#createIfMissing} is true,\n   *    these properties define the endpoint that is created.\n   *  * For durable queues, these must be unset on consumer creation\n   *    unless {@link solace.MessageConsumerProperties#createIfMissing} is set.\n   *    The values will be populated\n   *    after the queue is connected and can be retrieved by calling\n   *    {@link solace.MessageConsumer#getProperties}.\n   * @type {solace.QueueProperties}\n   */\n  get queueProperties() {\n    return Check.something(this._queueProperties)\n      ? this._queueProperties\n      : DEFAULTS.queueProperties;\n  }\n  set queueProperties(value) {\n    if (value) {\n      this._queueProperties = new QueueLib.QueueProperties(value);\n    } else {\n      this._queueProperties = value;\n    }\n  }\n\n  // ------------ Properties controlling connection of the consumer ----------------\n  /**\n   * The bind timeout in milliseconds when creating a connection to the Solace Message Router.\n   *  * The valid range is >= 50.\n   * @type {Number}\n   * @default 10000\n   */\n  get connectTimeoutInMsecs() {\n    return Check.something(this._bindTimeoutInMsecs)\n      ? this._bindTimeoutInMsecs\n      : DEFAULTS.connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(value) {\n    this._bindTimeoutInMsecs = value;\n  }\n\n  /**\n   * Gets and sets the maximum number of bind attempts when creating a connection to the\n   * Solace Message Router.\n   *  * The valid range is >= 1.\n   * @type {Number}\n   * @default 3\n   */\n  get connectAttempts() {\n    return Check.something(this._connectAttempts)\n      ? this._connectAttempts\n      : DEFAULTS.connectAttempts;\n  }\n  set connectAttempts(val) {\n    this._connectAttempts = val;\n  }\n\n  // ------------ Properties applied to the queue when connecting ----------------\n\n  /**\n   * This must be undefined if the type of the\n   * {@link solace.MessageConsumerProperties#queueDescriptor} is not\n   * {@link solace.QueueType.TOPIC_ENDPOINT}.\n   *\n   * If {@link solace.MessageConsumerProperties#queueDescriptor} is\n   * not durable, or {@link solace.MessageConsumerProperties#createIfMissing} is true,\n   * this may be left undefined to generate the topic endpoint's\n   * destination. When generated, the destination can be obtained from\n   * the {@link solace.MessageConsumer} after it is connected by calling\n   * {@link solace.MessageConsumer#getDestination}.\n   *\n   * @type {solace.Destination}\n   * @default undefined\n   */\n  get topicEndpointSubscription() {\n    return this._topicEndpointSubscription;\n  }\n  set topicEndpointSubscription(val) {\n    // Avoid instanceof check failing on Node 4?\n    if (typeof val === 'string') {\n      this._topicEndpointSubscription = Topic.createFromName(val);\n    } else {\n      this._topicEndpointSubscription = val;\n    }\n  }\n\n  // ----------- Properties controlling an established connection to a queue --------------\n\n  /**\n   * The Application Acknowledgement mode for the Message Consumer.\n   *\n   * When the acknowledgement mode is {@link solace.MessageConsumerAcknowledgeMode.CLIENT},\n   * a message is Application Acknowledged when the application calls\n   * {@link solace.Message#acknowledge} on that message.\n   *\n   * When the acknowledge mode is {@link solace.MessageConsumerAcknowledgeMode.AUTO}, a message is\n   * Application Acknowledged by the API after all\n   * {@link solace.MessageConsumerEventName#event:MESSAGE}\n   * listeners are called and none throw an exception. If a message handler throws, the message\n   * can still be acknowledged by calling {@link solace.Message#acknowledge}, but this would not be\n   * a recommended practice.\n   *\n   * When received messages are Application Acknowledged they are removed from the Guaranteed\n   * Message storage on the Solace Message Router. Message Consumer Application Acknowledged,\n   * <b>only</b> remove messages from the Solace Message Router.\n   *\n   * In particular, withholding Message Consumer Acknowledgemnts does not stop\n   * message delivery. For Message Consumer flow control (aka transport acknowledgemeent) see\n   * {@link solace.MessageConsumer#stop}/{@link solace.MessageConsumer#start}. Message Consumer\n   * flow control may also be imlpemented by removing the\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} listener.\n   *\n   * Flow control and transport acknowledgements characteristics are defined by\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeThresholdPercentage} and\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeTimeoutInMsecs}\n   *\n   * @type {solace.MessageConsumerAcknowledgeMode}\n   * @default solace.MessageConsumerAcknowledgeMode.AUTO\n   */\n  get acknowledgeMode() {\n    return Check.something(this._acknowledgeMode)\n      ? this._acknowledgeMode\n      : DEFAULTS.acknowledgeMode;\n  }\n  set acknowledgeMode(value) {\n    this._acknowledgeMode = value;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging.\n   * When the {@link solace.MessageConsumerProperties#transportAcknowledgeTimeoutInMsecs}\n   * is not exceeded, acknowledgements will be returned to the router at intervals not\n   * less than this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   * @deprecated\n   */\n  get acknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set acknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   * @deprecated\n   */\n  get acknowledgeThreshold() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set acknowledgeThreshold(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging.\n   * When the {@link solace.MessageConsumerProperties.transportAcknowledgeTimeoutInMsecs}\n   * is not exceeded, acknowledgements will be returned to the router at intervals not less than\n   * this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   */\n  get transportAcknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set transportAcknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   */\n  get transportAcknowledgeThresholdPercentage() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set transportAcknowledgeThresholdPercentage(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n  /**\n   * @description When enabled, a Guaranteed Messaging Consumer requests Active and Inactive\n   * events from the router and emits them to interested listeners.\n   * @type {Boolean}\n   * @default false\n   * @see {@link solace.MessageConsumerEventName.ACTIVE}\n   * @see {@link solace.MessageConsumerEventName.INACTIVE}\n   */\n  get activeIndicationEnabled() {\n    return Check.something(this._activeIndicationEnabled)\n      ? this._activeIndicationEnabled\n      : DEFAULTS.activeIndicationEnabled;\n  }\n  set activeIndicationEnabled(newValue) {\n    this._activeIndicationEnabled = newValue;\n  }\n\n  /**\n   * When enabled, a Guaranteed Messaging Consumer does not receive messages published\n   * in the same Session, even if the endpoint contains a subscription that matches the published\n   * message.\n   * @type {Boolean}\n   * @default false\n   */\n  get noLocal() {\n    return Check.something(this._noLocal)\n      ? this._noLocal\n      : DEFAULTS.noLocal;\n  }\n  set noLocal(newValue) {\n    this._noLocal = newValue;\n  }\n\n  /**\n   * The window size for Guaranteed Message delivery.  This is the maximum number of messages that\n   * will be prefetched from the Solace Messaging Router and queued internally by the API while\n   * waiting for the application to accept delivery of the messages.\n   *   * The valid range is 1 <= windowSize <= 255.\n   * @type {Number}\n   * @default 255\n   */\n  get windowSize() {\n    return Check.something(this._windowSize)\n      ? this._windowSize :\n      DEFAULTS.windowSize;\n  }\n  set windowSize(val) {\n    this._windowSize = val;\n  }\n\n  /**\n   * When enabled, a Guaranteed Messaging Consumer will connect as a queue browser\n   * @type {Boolean}\n   * @default false\n   * @private\n   * @internal\n   */\n  get browser() {\n    return Check.something(this._browser)\n      ? this._browser :\n      DEFAULTS._browser;\n  }\n  set browser(newValue) {\n    this._browser = newValue;\n  }\n  /**\n   * When a Flow is created, the application may request replay of messages from the replay log,\n   * even messages that have been previously delivered and removed the from topic endpoint or queue.\n   * The default is undefined, and indicates that no replay is requested.\n   *\n   * When defined the replay start location must be a {@link solace.ReplayStartLocation} object\n   * as returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationBeginning} or\n   * {@link solace.SolClientFactory.createReplayStartLocationDate}.\n   *\n   * The {@link solace.ReplayStartLocation} returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationBeginning}\n   * indicate that all messages available should be replayed.\n   *\n   * The replay start location returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationDate}\n   * indicates that all messages logged since a given date must be retrieved.\n   * @type {solace.ReplayStartLocation}\n   * @default undefined.\n   */\n  get replayStartLocation() {\n    return Check.something(this._replayStartLocation)\n      ? this._replayStartLocation :\n        DEFAULTS.replayStartLocation;\n  }\n  set replayStartLocation(newValue) {\n    this._replayStartLocation = newValue;\n  }\n\n  /**\n   * When a connected flow receives an unsolicited unbind event with subcode\n   * REPLAY_STARTED or GM_UNAVAILABLE, the SDK can reconnect the flow automatically.\n   * This property controls the flow auto reconnect feature:\n   * 0: Disable flow auto reconnect for this consumer flow.\n   * -1: Enable flow auto reconnect for this consumer flow, infiinite retries (default)\n   * <n, positive number>: Enable flow auto reconnect for this consumer flow, n retries.\n   *\n   * When the flow auto rebind is enabled, DOWN_ERRORs with REPLAY_STARTED and GM_UNAVAILABLE\n   * are handled internally, and not (immediately) emitted to the application.\n   * A RECONNECTING event (with the same subcode) is emitted instead,\n   * ideally followed by a RECONNECTED event when the reconnect succeedes.\n   * In case of REPLAY_STARTED, the window of message IDs and acknowledgements are reset\n   * to allow replay packets to be passed to the application without marking them as duplicates.\n   * In case of GM_UNAVAILABLE, flow state is preserved.\n   *\n   * If reconnecting fails after exhausting the number of retries, a DOWN_ERROR is emitted\n   * with the details of the last retry.\n   *\n   *\n   * @type {Number}\n   * @default -1\n   */\n  get reconnectAttempts() {\n    return Check.something(this._reconnectAttempts)\n      ? this._reconnectAttempts :\n        DEFAULTS.reconnectAttempts;\n  }\n  set reconnectAttempts(newValue) {\n    this._reconnectAttempts = newValue;\n  }\n\n  /**\n   * Time to wait between flow auto reconnect attempts, in milliseconds.\n   * See {@link solace.MessageConsumerProperties.reconnectAttempts}\n   * Defaults to 3 seconds (3000)\n   *  * The valid range is >= 50.\n   *\n   * @type {Number}\n   * @default 3000\n   */\n  get reconnectIntervalInMsecs() {\n    return Check.something(this._reconnectIntervalInMsecs)\n      ? this._reconnectIntervalInMsecs :\n        DEFAULTS.reconnectIntervalInMsecs;\n  }\n  set reconnectIntervalInMsecs(newValue) {\n    this._reconnectIntervalInMsecs = newValue;\n  }\n\n  /**\n   * If the endpoint is durable, it won't be auto-created unless this flag is set.\n   * This flag has no effect for temporary endpoints, those are always created if missing.\n   * This flag has no effect for existing endpoints.\n   *\n   * Off by default for backwards compatibility.\n   *\n   * @type {Boolean}\n   * @default false\n   *\n   */\n  get createIfMissing() {\n    return Check.something(this._createIfMissing)\n      ? this._createIfMissing :\n        DEFAULTS.createIfMissing;\n  }\n\n  set createIfMissing(newValue) {\n    this._createIfMissing = newValue;\n  }\n\n}\nmodule.exports.MessageConsumerProperties = MessageConsumerProperties;\n","const SMFLib = require('solclient-smf');\nconst { CapabilityType } = require('solclient-session');\nconst { ConsumerFSM } = require('./consumer-fsm');\nconst { ConsumerFSMEvent } = require('./consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./consumer-fsm-event-names');\nconst { ErrorResponseSubcodeMapper,\n  ErrorSubcode,\n  OperationError } = require('solclient-error');\nconst { Flow, FlowOperation } = require('solclient-flow');\nconst { MessageConsumerEvent } = require('./message-consumer-event');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { MessageConsumerProperties } = require('./message-consumer-properties');\nconst { MessageConsumerPropertiesValidator } = require('./message-consumer-properties-validator');\nconst { Queue, Topic } = require('solclient-destination');\nconst { QueueAccessType, QueuePermissions, QueueDiscardBehavior } = require('solclient-queue');\n\n\nfunction formatEventName(eventName) {\n  return `MessageConsumerEventName.${MessageConsumerEventName.describe(eventName)}`;\n}\n\nlet localCounter = 0;\nfunction getConsumerLocalName() {\n  return `ConsumerFSM ${localCounter++}`;\n}\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * A Message Consumer is created by calling {@link solace.Session#createMessageConsumer}.\n *\n * A MessageConsumer controls Guaranteed Message delivery to this client.\n *\n * Consumer characteristics and behavior are defined by {@link solace.MessageConsumerProperties}.\n * The properties can also be supplied as a simple key-value {Object}. The queue descriptor,\n * {@link solace.MessageConsumerProperties#queueDescriptor} must be specified to identify the\n * Guaranteed Message Queue or Guaranteed Message Topic Endpoint on the Solace Message Router.\n *\n * The MessageConsumer object is an EventEmitter, and will emit events to which the\n * application may choose to subscribe, such as the connection to the Solace Message Router\n * going up or down.\n *\n * If a registered listener for an emitted event throws an exception, this is caught and emitted as\n * an 'error'.\n *\n * @fires solace.MessageConsumerEventName#ACTIVE\n * @fires solace.MessageConsumerEventName#CONNECT_FAILED_ERROR\n * @fires solace.MessageConsumerEventName#DISPOSED\n * @fires solace.MessageConsumerEventName#DOWN\n * @fires solace.MessageConsumerEventName#DOWN_ERROR\n * @fires solace.MessageConsumerEventName#GM_DISABLED\n * @fires solace.MessageConsumerEventName#INACTIVE\n * @fires solace.MessageConsumerEventName#MESSAGE\n * @fires solace.MessageConsumerEventName#UP\n * @fires solace.MessageConsumerEventName#SUBSCRIPTION_OK\n * @fires solace.MessageConsumerEventName#SUBSCRIPTION_ERROR\n *\n *\n * @hideconstructor\n * @extends solace.Flow\n * @memberof solace\n */\nclass MessageConsumer extends Flow {\n  constructor({ properties, sessionInterfaceFactory } = {}) {\n    const applyProperties = new MessageConsumerProperties(properties);\n    MessageConsumerPropertiesValidator.validate(applyProperties.browser ?\n      'QueueBrowserProperties' : 'MessageConsumerProperties',\n                                                applyProperties, properties);\n    super(applyProperties, sessionInterfaceFactory, {\n      direct: MessageConsumerEventName.MESSAGE,\n      emits:  MessageConsumerEventName.values,\n      formatEventName,\n    });\n\n    const superFormatter = this.logger.formatter;\n    this.logger.formatter = (...args) => superFormatter('[message-consumer]', ...args);\n\n    this._active = undefined;\n    this._fsm = this._makeFSM();\n    this.endpointErrorId = undefined;\n\n    this._on(MessageConsumerEventName.ACTIVE, () => this._onFlowActive(true));\n    this._on(MessageConsumerEventName.INACTIVE, () => this._onFlowActive(false));\n    this._on(MessageConsumerEventName.DOWN_ERROR, this._onFlowDisconnected.bind(this));\n    this._on(MessageConsumerEventName.UP, this._onFlowUp.bind(this));\n    this._fsm.start(); // Subscriber flows self-manage, so they start immediately\n  }\n\n  _makeFSM() {\n    const properties = this._properties;\n    const name = `${getConsumerLocalName()}`;\n    return new ConsumerFSM({\n      name,\n      consumer:         this,\n      sessionInterface: this._sessionInterface,\n      properties,\n    });\n  }\n\n  /**\n   * Begins delivery of messages to this consumer. This method opens the protocol window\n   * to the Solace Message Router so further messages can be received.\n   *\n   * A newly created consumer is in started state.\n   *\n   * If the consumer was already started, this method has no effect.\n   *\n   * A consumer is stopped by calling {@link solace.MessageConsumer.stop}\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disposed.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  start() {\n    this._operationCheck(FlowOperation.START);\n    this._fsm.requestStartDispatchUser();\n  }\n\n  /**\n   * Stops messages from being delivered to this consumer from the Solace Message Router.\n   * Messages may continue to be prefetched by the API and queued internally\n   * until {@link solace.MessageConsumer#start} is called.\n   *\n   * If the consumer was already stopped, this method has no effect.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  stop() {\n    this._operationCheck(FlowOperation.STOP);\n    this._fsm.requestStopDispatchUser();\n  }\n\n  /**\n   * Connects the consumer immediately. The application should add event listeners (see\n   * {@link solace.MessageConsumerEventName}). If there is no listener added for\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} then up to a window\n   * {@link solace.MessageConsumerProperties.windowSize} of messages can be queued internally.\n   * to the {@link solace.MessageConsumer} before calling this method.\n   *\n   * @throws {solace.OperationError}\n   *  * if consumer is not supported by router for this client.\n   *  subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   *\n   */\n  connect() {\n    if ((this._sessionInterface.getCapability(CapabilityType.GUARANTEED_MESSAGE_CONSUME)\n        !== null) &&\n        (!this._sessionInterface.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME))) {\n      throw new OperationError('Consumer is not supported by router for this client',\n              ErrorSubcode.INVALID_OPERATION, null);\n    }\n    super.connect();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_OPEN }));\n  }\n\n  /**\n   * Initiates an orderly disconnection of the Message Consumer. The API will send any pending\n   * client acknowledgements on the Message Consumer, then send an unbind request.\n   * Any messages subsequently\n   * received are discarded silently. When the unbind message is acknowledged, the application\n   * receives a {@link solace.MessageConsumerEventName#event:DOWN} event if it has set a listener\n   * for that event.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  disconnect() {\n    super.disconnect();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_CLOSE }));\n  }\n\n  /**\n   * Returns the destination that should be used to publish messages that this consumer\n   * will receive.\n   * * For topic endpoints, this is the topic to which the topic endpoint is subscribed.\n   * * For queues, this is the associated queue destination.\n   *\n   * The destination returned can\n   * be used to set the ReplyTo field in a message, or otherwise communicated\n   * to partners that need to send messages to this Message Consumer. This is especially useful\n   * for temporary endpoints (Queues and Topic Endpoints), as the destination\n   * is unknown before the endpoint is created.\n   *\n   * This method will succeed after {@link solace.MessageConsumerEventName#event:UP} for temporaries\n   * with generated destinations.\n   *\n   * @throws {solace.OperationError}\n   * * if the {@link solace.MessageConsumer} is disconnected and the destination is temporary.\n   *\n   * @returns {solace.Destination} The publishing destination that delivers to this consumer.\n   */\n  getDestination() {\n    const destination = this._fsm.getDestination();\n    if (destination instanceof Queue) {\n      return new Queue(destination);\n    }\n    return new Topic(destination);\n  }\n\n  // Application has disconnected the session, we must continue to orderly shut down\n  // unbinding Message Consumers,\n  // but Message Consumers that are up merely treat this as a 'down' event and\n  // transition to awaitingSessionUp\n  _disconnectSession() {\n    super._disconnectSession();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DISCONNECT }));\n  }\n\n  _operationCheck(operation) {\n    super._operationCheck(operation);\n    switch (operation) {\n      case FlowOperation.GET_DESTINATION:\n        if (this._isDisconnected()) {\n          throw new OperationError('Cannot get destination of a disconnected flow',\n                                   ErrorSubcode.INVALID_OPERATION);\n        }\n        break;\n      default:\n    }\n  }\n\n  // ----\n\n  /**\n   * @param {any} messageId The message ID to ack\n   * @internal\n   */\n  applicationAck(messageId) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Adding application ack for ${messageId}`);\n    this._fsm.applicationAck(messageId);\n  }\n\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    return MessageConsumerEventName.DISPOSED;\n  }\n\n  /**\n   * @param {solace.Message} message The data message to handle\n   * @internal\n   */\n  handleDataMessage(message) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Handling data message');\n    message.setMessageConsumer(this);\n    this._fsm.acceptMessage(message);\n  }\n\n  /**\n   * @override\n   * @param {solace.AdProtocolMessage} message The control message to handle\n   * @internal\n   */\n  handleUncorrelatedControlMessage(message) {\n    const { LOG_INFO, LOG_DEBUG, LOG_TRACE } = this.logger;\n    LOG_INFO('Handling uncorrelated control message');\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.UNBIND: {\n        const responseCode = message.smfHeader.pm_respcode;\n        const description = message.smfHeader.pm_respstr;\n        const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                          description);\n        LOG_TRACE(`Handling uncorrelated UNBIND. endpointErrorId: ${message.getEndpointErrorId()}`);\n        if (message.getEndpointErrorId() !== undefined) {\n          this.endpointErrorId = message.getEndpointErrorId();\n        }\n        this.processFSMEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.FLOW_UNBOUND,\n        },\n          new OperationError(description, errorSubcode, responseCode)\n        ));\n      }\n        break;\n      case SMFAdProtocolMessageType.FLOWCHANGEUPDATE:\n        this.processFSMEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.FLOW_ACTIVE_IND,\n        }, {\n          active: message.getActiveFlow(),\n        }));\n        break;\n      default:\n        LOG_DEBUG('Dropping unhandled AD control message: ',\n                  SMFAdProtocolMessageType.describe(msgType));\n    }\n  }\n\n  /**\n   * Creates and returns copy of the properties for this MessageConsumer.\n   *\n   * If the object was constructed using an {@link solace.AbstractQueueDescriptor},\n   * and the queue descriptor was subsequently connected to an endpoint, the\n   * `MessageConsumerProperties` returned will include a {@link solace.QueueDescriptor}\n   * that contains the resolved name.\n   *\n   * A new copy of the properties object is returned each time this property is accessed.\n   * The returned object cannot be polled for mutations such as the one described above.\n   *\n   * @returns {solace.MessageConsumerProperties} The properties associated with this object.\n   */\n  getProperties() {\n    return super.getProperties();\n  }\n\n  /**\n   * Resets the router state contained in the consumer, e.g. on VRN change\n   *\n   * @memberof MessageConsumer\n   * @internal\n   */\n  onVRNChanged() {\n    this.processFSMEvent(new ConsumerFSMEvent({\n      name: ConsumerFSMEventNames.VIRTUALROUTER_NAME_CHANGED,\n    }));\n  }\n\n  /**\n   * After the MessageConsumer has connected to an endpoint\n   * ({@link solace.MessageConsumerEventName#UP}), accesstype represents\n   *  the access type for the endpoint to which this Message Consumer is bound.\n   * @name solace.MessageConsumer.accessType\n   * @type {solace.QueueAccessType}\n   */\n  get accessType() {\n    return this._accessType;\n  }\n  /**\n   * @param {solace.QueueAccessType} value The value to set\n   * @internal\n   */\n  set accessType(value) {\n    this._accessType = value;\n  }\n\n  /**\n   * Whether the consumer is active. If active indications for the consumer are not\n   * enabled, this will return undefined.\n   * @type {?Boolean}\n   * @internal\n   */\n  get active() {\n    return this._active;\n  }\n  /**\n   * @param {Boolean} value The value to set\n   * @internal\n   */\n  set active(value) {\n    if (value !== this._active) {\n      this._emit(value ? MessageConsumerEventName.ACTIVE : MessageConsumerEventName.INACTIVE);\n    }\n    this._active = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}, queueDiscardBehavior represents\n   * the discard behavior flags for the endpoint to which this Message Consumer is bound.\n   * @name solace.MessageConsumer.queueDiscardBehaviour\n   * @type {solace.QueueDiscardBehavior}\n   */\n  get queueDiscardBehavior() {\n    return this._queueDiscardBehavior;\n  }\n  /**\n   * @param {solace.QueueDiscardBehavior} value The value to set\n   * @internal\n   */\n  set queueDiscardBehavior(value) {\n    this._queueDiscardBehavior = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}\n   * respectsTTL is `true` when the endpoint respects Time To Live on messages\n   * and 'false' otherwise.\n   * @name solace.MessageConsumer.respectsTTL\n   * @type {Boolean}\n   */\n  get respectsTTL() {\n    return this._respectsTTL;\n  }\n  /**\n   * @param {Boolean} value The value to set\n   * @internal\n   */\n  set respectsTTL(value) {\n    this._respectsTTL = value;\n  }\n\n  /**\n   * Gets the flow ID for this consumer. This number will change between reconnects\n   * and is purely informational.\n   * @type {Long}\n   * @internal\n   */\n  get flowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The value to set\n   * @internal\n   */\n  set flowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}, this property represents\n   * permissions granted by the router to this user on this Message Consumer\n   * @name solace.MessageConsumer.permissions\n   * @type {solace.QueuePermissions}\n   */\n  get permissions() {\n    return this._permissions || 0;\n  }\n  /**\n   * @param {Number} value The value to set\n   * @internal\n   */\n  set permissions(value) {\n    this._permissions = value;\n  }\n\n  _onFlowActive(isActive) {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG(`Flow (flowId = ${this._flowId}) became ${isActive ? 'active' : 'inactive'}`);\n    this._active = isActive;\n  }\n\n  _onFlowDisconnected(error) {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`${this} disconnected: ${error}.message`);\n  }\n\n  _disposeFSM() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Disposing FSM');\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.DISPOSE }));\n  }\n\n  _onFlowUp() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`Flow is up: flowId = ${this._flowId}`);\n  }\n\n  [util_inspect_custom]() {\n    return Object.assign(super[util_inspect_custom](), {\n      'destination':          this._destination,\n      'accessType':           QueueAccessType.describe(this.accessType),\n      'permissions':          QueuePermissions.describe(this.permissions),\n      'respectsTTL':          this.respectsTTL,\n      'active':               this.wantFlowChangeNotify ? this.active : '(indications disabled)',\n      'wantFlowChangeNotify': this.wantFlowChangeNotify,\n      'queueDiscardBehavior': QueueDiscardBehavior.describe(this.queueDiscardBehavior),\n      'maxWindowSize':        this._fsm.maxWindowSize,\n    });\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n  _isDisconnected() {\n    return this._fsm.isDisconnected();\n  }\n\n  /**\n   * Subscribe the queue to a topic, always requesting confirmation from the router.\n   *\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_OK} is generated when subscription is\n   * added successfully; otherwise, session event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR} is generated.\n   *\n   * When the application receives the event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.MessageConsumerEvent#reason}.\n   * The returned string is in the format of \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to add.\n   * @param {Object} correlationKey If specified, this value is\n   *                                echoed in the messageConsumer event within\n   *                                {@link MessageConsumerEvent}.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected,\n   *   or the consumer is inactive, down, disconnected, or disposed.\n   *   Or if the consumer is bound to a topic endpoint instead of a queue.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  addSubscription(topic, correlationKey, requestTimeout) {\n    const callback = (success, subCode, respCode, respText) => {\n      if (success) {\n        const event = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_OK, event);\n      } else {\n        const error = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_ERROR,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_ERROR, error);\n      }\n    };\n\n    this._sessionInterface.updateQueueSubscription(\n      topic,\n      this._fsm.getDestination(),\n      true,\n      this,\n      callback,\n      requestTimeout);\n  }\n  /**\n   * Unsubscribe the queue from a topic, requesting confirmation from the router.\n   *\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_OK} is generated when subscription is\n   * removed successfully; otherwise, session event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR} is generated.\n   *\n   * When the application receives the message consumer event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.MessageConsumerEvent#reason}. The returned\n   * string is in the format \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to remove.\n   * @param {Object} correlationKey If <code>null</code> or undefined, a Correlation Key is not set\n   *                                in the confirmation session event.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected,\n   *   or the consumer is inactive, down, disconnected, or disposed.\n   *   Or if the consumer is bound to a topic endpoint instead of a queue.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  removeSubscription(topic, correlationKey, requestTimeout) {\n    const callback = (success, subCode, respCode, respText) => {\n      if (success) {\n        const event = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_OK, event);\n      } else {\n        const error = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_ERROR,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_ERROR, error);\n      }\n    };\n\n    this._sessionInterface.updateQueueSubscription(\n      topic,\n      this._fsm.getDestination(),\n      false,\n      this,\n      callback,\n      requestTimeout);\n  }\n}\n\nmodule.exports.MessageConsumer = MessageConsumer;\n","const { MessageConsumerEventName } = require('./message-consumer-event-names');\n\nfunction formatEventName(x) {\n  return `MessageConsumerEventName.${MessageConsumerEventName.describe(x)}`;\n}\n\nclass MessageDispatcher {\n  constructor({ emitter, autoAck, logger } = {}) {\n    Object.assign(this, {\n      emitter,\n      queue:    [],\n      dispatch: true,\n      formatEventName,\n      logger,\n    });\n    this._dispatchOne = autoAck ? this._dispatchOneAutoAck : this._dispatchOneBare;\n    this.emitter.setOnFirstDirectListener(this._onFirstMessageListener.bind(this));\n    // Although a listener may not be available, we set it to true so that we detect a transition to\n    // false when we attempt to dispatch the first message, which will generate a log that\n    // dispatching is stopped due to a missing listener.\n    this._availableListener = true;\n  }\n\n  start() {\n    this.dispatch = true;\n    this._flush();\n  }\n\n  stop() {\n    this.dispatch = false;\n  }\n\n  get length() {\n    return this.queue.length;\n  }\n\n  push(message) {\n    const { LOG_TRACE } = this.logger;\n    this.queue.push(message);\n\n    if (this.dispatch) {\n      this._flush();\n    } else {\n      LOG_TRACE(`Dispatch disabled, message ${message.getGuaranteedMessageId()} queued locally`);\n    }\n  }\n\n  _onFirstMessageListener() {\n    const { LOG_DEBUG } = this.logger;\n    if (!this._availableListener) {\n      LOG_DEBUG(`Message listener available for dispatcher, ${this.queue.length} messages queued`);\n      LOG_DEBUG(`Dispatcher started and connected: ${this.dispatch ? 'true' : 'false'}`);\n      this._availableListener = true;\n    }\n    this._flush();\n  }\n\n  _flush() {\n    const { LOG_DEBUG } = this.logger;\n    // Check whether dispatch enabled for every element,\n    // to handle when #stop is called from a message handler\n    while (this.queue.length && this.dispatch && (this.emitter.directListenerCount() > 0)) {\n      this._dispatchOne(this.queue.shift());\n    }\n\n    if (this.queue.length && this.dispatch &&\n        (this.emitter.directListenerCount() === 0) && this._availableListener) {\n      LOG_DEBUG('Message dispatching stopped: No message listener registered');\n      this._availableListener = false;\n    }\n  }\n\n  _dispatchOneAutoAck(message) {\n    const { LOG_WARN } = this.logger;\n    // Set the current outbound message, dispatch it, and clear the current outbound message\n    let caught = null;\n\n    // Auto-ack unless the receiver throws.\n    caught = this._dispatchOneBare(message);\n    // Outside of exception block because we want to throw normally from message.acknowledge()\n    if (caught) {\n      LOG_WARN(`Suppressing message acknowledgement for message ${message.getGuaranteedMessageId()\n               } because client threw exception from listener`, caught);\n    } else {\n      // Did the user manually ack for some reason?\n      if (message.isAcknowledged) {\n        LOG_WARN(`Consumer configured to auto-acknowledge messages, but message ${\n                 message.getGuaranteedMessageId()} was application acknowledged`);\n        return;\n      }\n      message.acknowledge(); // No, so ack the message\n    }\n  }\n\n  _dispatchOneBare(message) {\n    const { LOG_WARN } = this.logger;\n    let caught;\n    // Requires the emitter's direct option to be MessageConsumerEventName.MESSAGE\n    if (this.listenerCount === 0) {\n      LOG_WARN(`No listeners to dispatch message ${message.getGuaranteedMessageId()}`);\n    }\n    // Since _dispatchOneBare uses emitDirect, this behaviour is not affected by the presence\n    // of an 'error' handler.\n    try {\n      this.emitter.emitDirect(message);\n    } catch (ex) {\n      // User code threw an exception\n      caught = this.emitter.formatErrorEvent(ex, MessageConsumerEventName.MESSAGE, message);\n      // Also propagating to the common error handler\n      this.emitter.emit('error', caught);\n    }\n    return caught;\n  }\n\n}\n\nmodule.exports = { MessageDispatcher };\n","const { Enum } = require('solclient-eskit');\n/**\n * An enumeration of queue browser event names. A {@link solace.QueueBrowser} will emit\n * these events as part of its lifecycle.  Applications, having created a QueueBrowser can\n * choose to listen to all of the events described here, or any subset of these events. For Example:\n * <pre>\n *   <code>\n *     qb = solace.Session.createQueueBrowser(...);\n *     qb.on(solace.QueueBrowserEventName.CONNECT_FAILED_ERROR,\n *           function connectFailedErrorEventCb(error) {\n *             // details is an OperationError object\n *           });\n *   </code>\n * </pre>\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst QueueBrowserEventName = {\n  /**\n   * The queue browser is established.\n   * @event solace.QueueBrowserEventName#UP\n   */\n  UP:                   'QueueBrowserEventName_up',\n  /**\n   * The queue browser is successfully disconnected.\n   * The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#DOWN\n   */\n  DOWN:                 'QueueBrowserEventName_down',\n /**\n   * The queue browser was established and then disconnected by the router,\n   * likely due to operator intervention. The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#DOWN_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  DOWN_ERROR:           'QueueBrowserEventName_downError',\n  /**\n   * The queue browser attempted to connect but was unsuccessful.\n   * The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  CONNECT_FAILED_ERROR: 'QueueBrowserEventName_connectFailedError',\n  /**\n   * The queue browser will not connect because the current session is incompatible\n   * with Guaranteed Messaging. The queue browser is disabled until a compatible session\n   * is available.\n   *\n   * @event solace.QueueBrowserEventName#GM_DISABLED\n   */\n  GM_DISABLED:          'QueueBrowserEventName_GMDisabled',\n  /**\n   * The queue browser is being disposed. No further events will be emitted.\n   *\n   * @event solace.QueueBrowserEventName#DISPOSED\n   */\n  DISPOSED:             'QueueBrowserEventName_disposed',\n  /**\n   * A message was received on the queue browser.\n   *\n   * If the application did not retain a reference to the message, it\n   * may be redelivered by calling {@link solace.QueueBrowser#disconnect} followed by\n   * {@link solace.QueueBrowser#connect} depending on the configuration of the queue.\n   *\n   * When there is no listener for <i>MESSAGE</i> on a QueueBrowser, messages are queued\n   * internally until a listener is added.\n   *\n   * @event solace.QueueBrowserEventName#MESSAGE\n   * @param {solace.Message} message The received message being delivered in this event.\n   */\n  MESSAGE:              'QueueBrowserEventName_message',\n};\n\nmodule.exports.QueueBrowserEventName = Enum.new(QueueBrowserEventName);\n","const QueueLib = require('solclient-queue');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\n\nconst DEFAULTS = {\n  queueDescriptor:                         undefined,\n  connectTimeoutInMsecs:                   10000,\n  connectAttempts:                         3,\n  windowSize:                              255,\n  transportAcknowledgeTimeoutInMsecs:      1000,\n  transportAcknowledgeThresholdPercentage: 60,\n};\n\n/**\n * @classdesc\n * Defines the properties for a {@link solace.QueueBrowser}.\n *\n * @memberof solace\n */\nclass QueueBrowserProperties extends APIProperties {\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Defines the queue from which to consume.\n   *  * For durable queues and durable topic endpoints, this must be a\n   *    {@link solace.QueueDescriptor}.\n   * @type {solace.QueueDescriptor}\n   */\n  get queueDescriptor() {\n    return Check.something(this._queueDescriptor)\n      ? this._queueDescriptor\n      : DEFAULTS.queueDescriptor;\n  }\n  set queueDescriptor(value) {\n    if (value) {\n      this._queueDescriptor = new QueueLib.QueueDescriptor(value);\n    } else {\n      this._queueDescriptor = value;\n    }\n  }\n\n  // ------------ Properties controlling connection of the consumer ----------------\n  /**\n   * The bind timeout in milliseconds when creating a connection to the Solace Message Router.\n   *  * The valid range is >= 50.\n   * @type {Number}\n   * @default 10000\n   */\n  get connectTimeoutInMsecs() {\n    return Check.something(this._bindTimeoutInMsecs)\n      ? this._bindTimeoutInMsecs\n      : DEFAULTS.connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(value) {\n    this._bindTimeoutInMsecs = value;\n  }\n\n  /**\n   * Gets and sets the maximum number of bind attempts when creating a connection to the\n   * Solace Message Router.\n   *  * The valid range is >= 1.\n   * @type {Number}\n   * @default 3\n   */\n  get connectAttempts() {\n    return Check.something(this._connectAttempts)\n      ? this._connectAttempts\n      : DEFAULTS.connectAttempts;\n  }\n  set connectAttempts(val) {\n    this._connectAttempts = val;\n  }\n\n  // ----------- Properties controlling an established connection to a queue --------------\n  /**\n   * The window size for Guaranteed Message delivery.  This is the maximum number of messages that\n   * will be prefetched from the Solace Messaging Router and queued internally by the API while\n   * waiting for the application to accept delivery of the messages.\n   *   * The valid range is 1 <= windowSize <= 255.\n   * @type {Number}\n   * @default 255\n   */\n  get windowSize() {\n    return Check.something(this._windowSize)\n      ? this._windowSize :\n      DEFAULTS.windowSize;\n  }\n  set windowSize(val) {\n    this._windowSize = val;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging in milliseconds.\n   * When the {@link solace.QueueBrowserProperties.transportAcknowledgeTimeoutInMsecs} is not\n   * exceeded, acknowledgements will be returned to the router at intervals not less than\n   * this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   */\n  get transportAcknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set transportAcknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   */\n  get transportAcknowledgeThresholdPercentage() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set transportAcknowledgeThresholdPercentage(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n}\n\nmodule.exports.QueueBrowserProperties = QueueBrowserProperties;\n","const { EventEmitter } = require('solclient-events');\nconst { LogFormatter } = require('solclient-log');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { QueueBrowserEventName } = require('./queue-browser-event-names');\n\nfunction formatEventName(eventName) {\n  return `QueueBrowserEventName.${QueueBrowserEventName.describe(eventName)}`;\n}\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * A Queue Browser is created by calling {@link solace.Session#createQueueBrowser}.\n *\n * A Queue Browser allows client applications to look at messages spooled on Endpoints\n * without removing them. Messages are browsed from oldest to newest.\n * After being browsed, messages are still available for consumption over normal flows.\n * However, it is possible to selectively remove messages from the persistent store of an Endpoint.\n * In this case, these removed messages will no longer be available for consumption.\n\n * Note: If browsing a queue with an active consumer, no guarantee is made that the browser will\n * receive all messages published to the queue. The consumer can receive and acknowledge messages\n * before they are delivered to the browser.\n *\n * One typical application is to use Browsers to allow message bus administrators to remove “stuck”\n * Guaranteed messages from an Endpoint without having to modify or disrupt existing applications.\n * A message can get stuck if:\n *\n *  1) It has been received by an application, but for some reason, that application has failed to\n *     acknowledge it.\n *  2) All active message selectors have failed to match this particular message and therefore the\n *     message bus has not delivered it to any client yet. The current release only supports\n *     browsing Endpoints of type Queue.\n *\n * Note that the delivery restrictions imposed by the queue’s Access type\n * (exclusive or non-exclusive), do not apply when browsing messages with a Browser.\n *\n * Browser characteristics and behavior are defined by {@link solace.QueueBrowserProperties}.\n * The properties can also be supplied as a simple key-value {Object}. The queue descriptor,\n * {@link solace.QueueBrowserProperties#queueDescriptor} must be specified to identify the\n * Guaranteed Message Queue on the Solace Message Router.\n *\n * The Browser is an EventEmitter, and will emit events to which the application may choose to\n * subscribe, such as the connection to the Solace Message Router going up or down.\n *\n * If a registered listener for an emitted event throws an exception, this is caught and emitted as\n * an 'error'.\n *\n * @fires solace.QueueBrowserEventName#CONNECT_FAILED_ERROR\n * @fires solace.QueueBrowserEventName#DISPOSED\n * @fires solace.QueueBrowserEventName#DOWN\n * @fires solace.QueueBrowserEventName#DOWN_ERROR\n * @fires solace.QueueBrowserEventName#GM_DISABLED\n * @fires solace.QueueBrowserEventName#MESSAGE\n * @fires solace.QueueBrowserEventName#UP\n *\n * @hideconstructor\n * @memberof solace\n */\nclass QueueBrowser extends EventEmitter {\n  constructor(messageConsumer) {\n    super({\n      direct: QueueBrowserEventName.MESSAGE,\n      emits:  QueueBrowserEventName.values,\n      formatEventName,\n    });\n\n    this._messageConsumer = messageConsumer;\n    this.logger = new LogFormatter((...args) =>\n      ['[queue-browser]', ...args]);\n\n    this._setupEventListers();\n  }\n\n  _setupEventListers() {\n    // Listen to message consumer events, redispatch as queue browser events\n    this._messageConsumer.on(MessageConsumerEventName.UP, this._onConsumerUp.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.CONNECT_FAILED_ERROR,\n                             this._onConsumerConnectFailed.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DOWN, this._onConsumerDown.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DOWN_ERROR,\n                             this._onConsumerDownError.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.MESSAGE, this._onConsumerMessage.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DISPOSED,\n                             this._onConsumerDisposed.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.GM_DISABLED,\n                             this._onConsumerGMDisabled.bind(this));\n  }\n\n  _onConsumerMessage(event) {\n    this.emit(QueueBrowserEventName.MESSAGE, event);\n  }\n\n  _onConsumerUp(event) {\n    this.emit(QueueBrowserEventName.UP, event);\n  }\n\n  _onConsumerConnectFailed(event) {\n    this.emit(QueueBrowserEventName.CONNECT_FAILED_ERROR, event);\n  }\n\n  _onConsumerDown(event) {\n    this.emit(QueueBrowserEventName.DOWN, event);\n  }\n\n  _onConsumerDownError(event) {\n    this.emit(QueueBrowserEventName.DOWN_ERROR, event);\n  }\n\n  _onConsumerDisposed(event) {\n    this.emit(QueueBrowserEventName.DISPOSED, event);\n  }\n\n  _onConsumerGMDisabled(event) {\n    this.emit(QueueBrowserEventName.GM_DISABLED, event);\n  }\n\n  /**\n   * Connects the queue browser immediately. The application should add event listeners (see\n   * {@link solace.QueueBrowserEventName}). If there is no listener added for\n   * {@link solace.QueueBrowserEventName#event:MESSAGE} then up to a window\n   * {@link solace.QueueBrowserProperties.windowSize} of messages can be queued internally.\n   * before calling this method.\n   *\n   * @throws {solace.OperationError}\n   *  * if consumer is not supported by router for this client.\n   *  subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   *\n   */\n  connect() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Connecting the queue browser\\'s message consumer');\n      this._messageConsumer.connect();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Initiates an orderly disconnection of the queue browser. The API will send an unbind request.\n   * Any messages subsequently received are discarded silently.\n   * When the unbind message is acknowledged, the application\n   * receives a {@link solace.QueueBrowserEventName#event:DOWN} event if it has set a listener\n   * for that event.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  disconnect() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n\n    try {\n      LOG_DEBUG('Disconnecting the queue browser\\'s message consumer');\n      this._messageConsumer.disconnect();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Begins delivery of messages to this queue browser. This method opens the protocol window\n   * to the Solace Message Router so further messages can be received.\n   *\n   * A newly created queue browser is in started state.\n   *\n   * If the queue browser was already started, this method has no effect.\n   *\n   * A consumer is stopped by calling {@link solace.QueueBrowser.stop}\n   *\n   * @throws {solace.OperationError}\n   * * if the Queue BrowserMessage Consumer is disposed.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  start() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Starting the queue browser\\'s message consumer');\n      this._messageConsumer.start();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Stops messages from being delivered to this queue browser from the Solace Message Router.\n   * Messages may continue to be prefetched by the API and queued internally\n   * until {@link solace.QueueBrowser#start} is called.\n   *\n   * If the queue browser was already stopped, this method has no effect.\n   *\n   * @throws {solace.OperationError}\n   * * if the Queue Browser is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  stop() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Stopping the queue browser\\'s message consumer');\n      this._messageConsumer.stop();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Removes a message from the queue by acknowledging it.\n   *\n   * The {@link solace.QueueBrowser} does not automatically acknowledge messages.\n   * once they have been received.\n   *\n   * The API does not send acknowledgments immediately. It stores the state for\n   * acknowledged messages internally and acknowledges messages, in bulk, when a\n   * threshold or timer is reached.\n   *\n   * @param {Message} message The message to remove\n   */\n  removeMessageFromQueue(message) {\n    // ack the message to delete it\n    this._messageConsumer.applicationAck(message._guaranteedMsgId);\n    message._acked = true;\n  }\n\n}\n\nmodule.exports.QueueBrowser = QueueBrowser;\n","const { Enum } = require('solclient-eskit');\nconst { LOG_TRACE,\n        LOG_DEBUG } = require('solclient-log');\nconst { Long } = require('solclient-convert');\n\nconst TransportAckResult = Enum.new({\n  OK:           0,\n  DUPLICATE:    1,\n  OUT_OF_ORDER: 2,\n});\n\nclass TransportAcks {\n  constructor(id = 0) {\n    const base = typeof id === 'number' ? Long.fromNumber(id, true) : Long.fromValue(id);\n    this.lastAcked = base;\n    this._acksPending = 0;\n  }\n\n  reset() {\n    this._acksPending = 0;\n    this.lastAcked = Long.ZERO;\n  }\n\n  tryReceive(messageID, prevMessageID) {\n    if (this._lastReceived.lt(prevMessageID)) {\n      LOG_DEBUG(`Rejecting out of order message: ${prevMessageID} (last received: ${this._lastReceived})`);\n      return TransportAckResult.OUT_OF_ORDER;\n    }\n    if (this._lastReceived.gte(messageID)) {\n      LOG_DEBUG(`Rejecting duplicate message: ${messageID} (last received: ${this._lastReceived})`);\n      // duplicate messages indicate the router is retransmitting because it expects a transport ack\n      this._acksPending++;\n      return TransportAckResult.DUPLICATE;\n    }\n    LOG_TRACE(`Accepting message: ${messageID}`);\n    this._lastReceived = messageID;\n    this._acksPending++;\n    return TransportAckResult.OK;\n  }\n\n  setAcked() {\n    this._lastAcked = Long.fromValue(this._lastReceived);\n    this._acksPending = 0;\n  }\n\n  get acksPending() {\n    return this._acksPending;\n  }\n\n  get lastAcked() {\n    return this._lastAcked;\n  }\n\n  /**\n   * Resets the beginning of the ack sequence to the given value.\n   * @param {Long} value The value to set as last acknowledged ID.\n   */\n  set lastAcked(value) {\n    LOG_TRACE('Setting last acked:', value.toString());\n    Object.assign(this, {\n      _lastAcked:    Long.fromValue(value),\n      _lastReceived: Long.fromValue(value),\n    });\n  }\n\n  get lastReceived() {\n    return this._lastReceived;\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports = {\n  TransportAcks,\n  TransportAckResult,\n};\n","const { MessagePublisher } = require('./lib/message-publisher');\nconst { MessagePublisherAcknowledgeMode } = require('./lib/message-publisher-acknowledge-modes');\nconst { MessagePublisherEventName } = require('./lib/message-publisher-event-names');\nconst { MessagePublisherProperties } = require('./lib/message-publisher-properties');\nconst { MessagePublisherPropertiesValidator } = require('./lib/message-publisher-properties-validator');\nconst { PublisherFSMEvent } = require('./lib/publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./lib/publisher-fsm-event-names');\n\nmodule.exports.MessagePublisherAcknowledgeMode = MessagePublisherAcknowledgeMode;\nmodule.exports.MessagePublisher = MessagePublisher;\nmodule.exports.MessagePublisherProperties = MessagePublisherProperties;\nmodule.exports.PublisherFSMEvent = PublisherFSMEvent;\nmodule.exports.PublisherFSMEventNames = PublisherFSMEventNames;\nmodule.exports.MessagePublisherPropertiesValidator = MessagePublisherPropertiesValidator;\nmodule.exports.MessagePublisherEventName = MessagePublisherEventName;\n","const { Long } = require('solclient-convert');\n\nconst DEFAULTS = {\n  _lastAcked: Long.fromNumber(0, true),\n  _lastSent:  Long.fromNumber(0, true),\n  _next:      Long.fromNumber(1, true),\n};\n\nconst longToString = v => v.toString(10);\n\nclass MessageIds {\n  constructor(attrs) {\n    Object.assign(this, DEFAULTS, attrs);\n  }\n\n  get lastAcked() {\n    return this._lastAcked;\n  }\n  set lastAcked(value) {\n    this._lastAcked = Long.fromValue(value);\n  }\n\n  get lastSent() {\n    return this._lastSent;\n  }\n  setLastSent(id) {\n    this._lastSent = Long.fromValue(id);\n    this._next = this._lastSent.add(1);\n  }\n\n  get next() {\n    return this._next;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'lastAcked': longToString(this.lastAcked),\n      'lastSent':  longToString(this.lastSent),\n      'next':      longToString(this.next),\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.MessageIds = MessageIds;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents authentication scheme enumeration.\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst MessagePublisherAcknowledgeMode = {\n  /**\n   * @description Applications receive an acknowledgement for every\n   * message.\n   * @type {String}\n   */\n  PER_MESSAGE: 'PER_MESSAGE',\n  /**\n   * @description Applications receive a windowed acknowledgement that\n   * acknowledges the returned correlation identifier and every message sent prior.\n   * @type {String}\n   */\n  WINDOWED:    'WINDOWED',\n};\n\nmodule.exports.MessagePublisherAcknowledgeMode = Enum.new(MessagePublisherAcknowledgeMode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * The publisher currently isn't exposed, and its events are dispatched\n * via the Session. These events are therefore private. They should\n * be moved to MessageConsumerEventName when they are made public.\n * @private\n */\nconst MessagePublisherEventName = Enum.new({\n  ACKNOWLEDGED_MESSAGE:      'MessagePublisherEventName_acknowledgedMessage',\n  CONNECT_FAILED_ERROR:      'MessagePublisherEventName_connectFailedError',\n  CAN_SEND:                  'MessagePublisherEventName_canSend',\n  DISPOSED:                  'MessagePublisherEventName_disposed',\n  DOWN:                      'MessagePublisherEventName_down',\n  FLOW_NAME_CHANGED:         'MessagePublisherEventName_flowNameChanged',\n  GUARANTEED_MESSAGING_DOWN: 'MessagePublisherEventName_guaranteedMessagingDown',\n  REJECTED_MESSAGE:          'MessagePublisherEventName_rejectedMessage',\n  DISCONNECT_FAILED_ERROR:   'MessagePublisherEventName_disconnectFailedError',\n  UP:                        'MessagePublisherEventName_up',\n  TRANSPORT_FULL:            'MessagePublisherEventName_transportFull',\n});\n\nmodule.exports.MessagePublisherEventName = MessagePublisherEventName;\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valNumber,\n  valRange,\n} = APIPropertiesValidators;\n\n\nconst MessagePublisherPropertiesValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'MessagePublisherProperties', instance);\n    v('enabled', [valBoolean]);\n    v('windowSize', [valNumber], [valRange, 1, 255]);\n    v('acknowledgeTimeoutInMsecs', [valNumber], [valRange, 20, 60000]);\n    v('acknowledgeMode', [valIsMember, MessagePublisherAcknowledgeMode, 'MessagePublisherAcknowledgeMode']);\n    v('connectRetryCount', [valNumber], [valRange, 0, Number.MAX_VALUE]);\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n  },\n};\n\nmodule.exports.MessagePublisherPropertiesValidator = MessagePublisherPropertiesValidator;\n","const SolclientFactoryLib = require('solclient-factory');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\nconst { TransportCapabilities } = require('solclient-transport');\n\nfunction defaultEnablePublisher() {\n  const { ProfileBinding } = SolclientFactoryLib;\n  const binding = ProfileBinding.value;\n  const globallyEnabled = binding.guaranteedMessagingEnabled;\n  const webSocketAvailable = TransportCapabilities.web.webSocket();\n  return globallyEnabled && webSocketAvailable;\n}\n\nfunction getDefaults() {\n  return {\n    enabled:                   defaultEnablePublisher(),\n    windowSize:                50,\n    acknowledgeTimeoutInMsecs: 2000,\n    acknowledgeMode:           MessagePublisherAcknowledgeMode.PER_MESSAGE,\n    connectRetryCount:         3,\n    connectTimeoutInMsecs:     5000,\n  };\n}\n\n/**\n * @classdesc\n * Properties that define the configuration for a guaranteed message publisher.\n *\n * @memberof solace\n */\nclass MessagePublisherProperties extends APIProperties {\n  /**\n   * @constructor\n   * @param {Object} options Properties to apply to the newly constructed object.\n   */\n  constructor(options) {\n    super(getDefaults(), options || {});\n  }\n  /**\n   * @name solace.MessagePublisherProperties#enabled\n   * @type {Boolean}\n   * @description When enabled, a Guaranteed Messaging Publisher\n   * is automatically created when a session is connected.\n   *\n   * The default value is the same as the value provided to\n   * {@link solace.SolclientFactory.init},\n   * in the profile, {@link solace.SolclientFactoryProperties#profile},\n   * in the field {@link solace.FactoryProfile#guaranteedMessagingEnabled}.\n   */\n  get enabled() {\n    return this._enabled;\n  }\n  set enabled(newValue) {\n    this._enabled = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#windowSize\n   * @default 50\n   * @type {Number}\n   * @description  Maximum number of messages that can be published\n   * without acknowledgment.\n   *  * The valid range is 1 <= value <= 255\n   */\n  get windowSize() {\n    return Check.defined(this._windowSize)\n      ? this._windowSize\n      : getDefaults().windowSize;\n  }\n  set windowSize(newValue) {\n    this._windowSize = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#acknowledgeTimeoutInMsecs\n   * @type {Number}\n   * @default 2000\n   * @description  The time to wait for an acknowledgement,\n   * in milliseconds, before retransmitting unacknowledged\n   * messages.\n   *  * The valid range is 20 <= value <= 60000.\n   */\n  get acknowledgeTimeoutInMsecs() {\n    return Check.defined(this._acknowledgeTimeoutInMsecs)\n      ? this._acknowledgeTimeoutInMsecs\n      : getDefaults().acknowledgeTimeoutInMsecs;\n  }\n  set acknowledgeTimeoutInMsecs(newValue) {\n    this._acknowledgeTimeoutInMsecs = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#acknowledgeMode\n   * @type {solace.MessagePublisherAcknowledgeMode}\n   * @default {@link solace.MessagePublisherAcknowledgeMode.PER_MESSAGE}\n   * @description  The message-router sends windowed acknowledgements\n   * which the API converts to per-message acknowledgement by default. If\n   * acknowledgeMode is Windowed, then the API will simply pass through\n   * the message-router acknowledgements.\n   */\n  get acknowledgeMode() {\n    return this._acknowledgeMode || MessagePublisherAcknowledgeMode.PER_MESSAGE;\n  }\n  set acknowledgeMode(newValue) {\n    this._acknowledgeMode = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#connectRetryCount\n   * @type {Number}\n   * @default 3\n   * @description The number of times to retry a bind (aka open-flow) request\n   * before deciding the the Guaranteed Message Publisher cannot be started.\n   *  * The valid range 0 <= value.\n   * @private\n   */\n  get connectRetryCount() {\n    return Check.defined(this._connectRetryCount)\n      ? this._connectRetryCount\n      : getDefaults().connectRetryCount;\n  }\n  set connectRetryCount(newValue) {\n    this._connectRetryCount = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @default 5000\n   * @description  The time to wait for an bind response,\n   * in milliseconds, before retransmitting the bind request.\n   *  * The valid range is 50 <= value</li>\n   * @private\n   */\n  get connectTimeoutInMsecs() {\n    return Check.defined(this._connectTimeoutInMsecs)\n      ? this._connectTimeoutInMsecs\n      : getDefaults().connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(newValue) {\n    this._connectTimeoutInMsecs = newValue;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      enabled:                   this.enabled,\n      windowSize:                this.windowSize,\n      acknowledgeTimeoutInMsecs: this.acknowledgeTimeoutInMsecs,\n      acknowledgeMode:           MessagePublisherAcknowledgeMode.describe(this.acknowledgeMode),\n      connectRetryCount:         this.connectRetryCount,\n      connectTimeoutInMsecs:     this.connectTimeoutInMsecs,\n    };\n  }\n}\n\nmodule.exports.MessagePublisherProperties = MessagePublisherProperties;\n","const SMFLib = require('solclient-smf');\nconst { Flow, PrivateFlowEventName } = require('solclient-flow');\nconst { LogFormatter } = require('solclient-log');\nconst { MessagePublisherEventName } = require('./message-publisher-event-names');\nconst { MessagePublisherProperties } = require('./message-publisher-properties');\nconst { PublisherFSM } = require('./publisher-fsm');\nconst { PublisherFSMEvent } = require('./publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./publisher-fsm-event-names');\n\nconst { LOG_WARN } = new LogFormatter();\n\nclass MessagePublisher extends Flow {\n  /**\n   * Represents a Guaranteed Message Publisher.  This object must be used to publish\n   * Guaranteed Messages on a session.\n   *\n   * Publishers are created on sessions.  In this implementation the session functions are provided\n   * by the sessionFSM.  Publishers require the session to provide\n   * basic communications functions:\n   *  * send - send a message to the transport\n   *  * getCorrelationTag - return a unique transport correlation tag\n   *  * enqueueOutstandingCorrelatedReq - enqueue a callback for a received message\n   *    on a correlation tag\n   *\n   * @constructor\n   * @param {Object} properties Expected schema is\n   *  {@link solace.MessagePublisherProperties}\n   * @param {Object} sessionInterfaceFactory The session for the Guaranteed Message Publisher\n   * @private\n   */\n  constructor({ properties, sessionInterfaceFactory } = {}) {\n    const applyProperties = new MessagePublisherProperties(properties);\n    super(applyProperties, sessionInterfaceFactory, {\n      direct: MessagePublisherEventName.ACKNOWLEDGED_MESSAGE,\n      emits:  MessagePublisherEventName.values, // super adds MessageConsumerEventName\n    });\n    this._fsm = this._makeFSM();\n    const logger = new LogFormatter();\n    logger.formatter = function formatter(...args) {\n      return [\n        '[message-publisher]',\n        ...args,\n      ];\n    };\n    this.log = logger.wrap(this.log, this);\n\n    // Doesn't emit anything unless started; won't start unless bindWaiting\n    this._bindWaiting = true;\n\n    this.on(PrivateFlowEventName.BIND_WAITING, this._onBindWaiting.bind(this));\n    this.on(MessagePublisherEventName.CONNECT_FAILED_ERROR, this._onBindFailed.bind(this));\n    this.on(MessagePublisherEventName.DOWN, this._onDown.bind(this));\n    this.on(MessagePublisherEventName.UP, this._onUp.bind(this));\n  }\n\n  _onBindFailed() {\n    this._bindWaiting = false;\n  }\n\n  _onBindWaiting() {\n    this._bindWaiting = true;\n  }\n\n  _onDown() {\n    this._bindWaiting = false;\n  }\n\n  _onUp() {\n    this._bindWaiting = false;\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  _makeFSM() {\n    return new PublisherFSM({\n      publisher:        this,\n      name:             'PublisherFSM',\n      sessionInterface: this._sessionInterface,\n      properties:       this._properties,\n    });\n  }\n\n  /**\n   * @returns {Long} The flow ID of this flow\n   */\n  get flowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The flow ID for this flow\n   * @private\n   */\n  set flowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * @returns {String} The publisher name set for this flow\n   */\n  get name() {\n    return this._flowName;\n  }\n  /**\n   * @param {String} value The name to set on this flow\n   * @private\n   */\n  set name(value) {\n    this._flowName = value;\n  }\n\n  /**\n   * @returns {Number} The publisher ID set on this flow\n   */\n  get publisherId() {\n    return this._publisherId;\n  }\n  /**\n   * @param {Number} value The publisher ID to set on this flow\n   */\n  set publisherId(value) {\n    this._publisherId = value;\n  }\n\n  /**\n   * @readonly\n   * @returns {solace.MessagePublisherProperties} A clone of the publisher's properties.\n   */\n  get properties() {\n    return this._properties.clone();\n  }\n\n  /**\n   *\n   * @override\n   * @memberof MessagePublisher\n   */\n  connect() {\n    super.connect();\n    if (!this._fsm.getCurrentState()) {\n      this._fsm.start();\n    }\n  }\n\n  /**\n   * Application has disconnected the session, so\n   * disconnects the Guaranteed Message Publisher.\n   * @private\n   */\n  _disconnectSession() {\n    super._disconnectSession();\n    this.processFSMEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_CLOSE }));\n  }\n\n  /**\n   * @returns {solace.MessagePublisherEventName} The name of the disposed event for this flow\n   * @private\n   */\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    return MessagePublisherEventName.DISPOSED;\n  }\n\n  /**\n   * Handles an incoming ACK for the given message ID.\n   * @param {Long} id The message id for acknowledgement.\n   * @private\n   */\n  handleAck(id) {\n    this.processFSMEvent(new PublisherFSMEvent(\n      { name: PublisherFSMEventNames.ACK },\n      { ack: id }\n    ));\n  }\n\n  /**\n   * Handles an incoming NACK for the given message ID.\n   * @param {Long} id The message id for acknowledgement.\n   * @param {AdCtrlMessage} ctrlMessage The NACK message\n   * @private\n   */\n  handleNack(id, ctrlMessage) {\n    this.processFSMEvent(new PublisherFSMEvent(\n      { name: PublisherFSMEventNames.ACK },\n      { nack: id, ctrlMessage }\n    ));\n  }\n\n  /**\n   * @override\n   */\n  handleUncorrelatedControlMessage(message) {\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.CLIENTACK:\n        {\n          const id = message.getLastMsgIdAcked();\n          if (message.smfHeader.pm_respcode > 299) {\n            this.handleNack(id, message);\n          } else {\n            this.handleAck(id);\n          }\n          break;\n        }\n      case SMFAdProtocolMessageType.CLIENTNACK:\n        {\n          const id = message.getLastMsgIdAcked();\n          this.handleNack(id, message);\n          break;\n        }\n      case SMFAdProtocolMessageType.CLOSEPUBFLOW:\n        this.processFSMEvent(new PublisherFSMEvent(\n          { name: PublisherFSMEventNames.FLOW_UNBOUND })\n        );\n        break;\n      default:\n        LOG_WARN(`Dropping unhandled AD control message for ${this}`,\n                 SMFAdProtocolMessageType.describe(msgType));\n    }\n  }\n\n  /**\n   * Prepares an AD message for publishing on this flow.\n   * @param {Message} dataMsg The message to be prepared for publishing.\n   * @returns {TransportReturnCode} transport level returnCode\n   * @private\n   */\n  prepareAdMessageAndSend(dataMsg) {\n    return this._fsm.prepareAdMessageAndSend(dataMsg);\n  }\n\n  isBindWaiting() {\n    return this._bindWaiting;\n  }\n\n  /**\n   * @returns {String} Formatted inspector output\n   * @private\n   */\n  [util_inspect_custom]() {\n    return Object.assign(super[util_inspect_custom](), {\n      'name':        this.name,\n      'publisherId': this.publisherId,\n    });\n  }\n\n  /**\n   * @override\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  /**\n   * Disposes the FSM associated with this flow.\n   *\n   * @private\n   */\n  _disposeFSM() {\n    this.processFSMEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.DISPOSE }));\n  }\n\n  _isDisconnected() {\n    return this._fsm.isDisconnected();\n  }\n\n}\n\nmodule.exports.MessagePublisher = MessagePublisher;\n","const { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * Events on the Publisher FSM\n * @enum {string}\n ********************************************************************************/\nconst PublisherFSMEventNames = {\n  SESSION_UP:       'PublisherSessionUp',\n  SESSION_UP_NO_AD: 'PublisherSessionUpNoAD',\n  SESSION_DOWN:     'PublisherSessionDown',\n  FLOW_FAILED:      'MessagePublisherFailed',\n  FLOW_UP:          'MessagePublisherUp',\n  FLOW_CLOSE:       'MessagePublisherClose',\n  FLOW_UNBOUND:     'MessagePublisherUnbound',\n  TRANSPORT_FULL:   'PublisherTransportFull',\n  ACK:              'PublisherAck',\n  ACK_TIMEOUT:      'PublisherAckTimeout',\n  BIND_TIMEOUT:     'PublisherBindTimeout',\n  UNBIND_TIMEOUT:   'PublisherUnbindTimeout',\n  CAN_SEND:         'PublisherCanSend',\n  TRANSPORT_ERROR:  'PublisherTransportError',\n  RESEND_COMPLETE:  'PublisherResendComplete',\n  DISPOSE:          'PublisherDispose',\n};\n\nmodule.exports.PublisherFSMEventNames = Enum.new(PublisherFSMEventNames);\n","const { FsmEvent } = require('solclient-fsm');\n\n/**\n *\n * PublisherFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the SessionFSM.  This extension provides members to carry information specfic to\n * the SessionFSM transitions.\n * @extends {FsmEvent}\n * @private\n */\nclass PublisherFSMEvent extends FsmEvent {\n  /**\n   * @constructor\n   * @param {Object} spec The specification for this event\n   * @param {?Object} details The details to assign to this event object\n   * @param {Message|BaseMessage} smfmessage The message associated with this event\n   */\n  constructor(spec, details, smfmessage) {\n    super(spec);\n    Object.assign(this, details);\n    Object.assign(this, smfmessage);\n  }\n  getEventText() {\n    return this._eventText;\n  }\n}\n\nmodule.exports.PublisherFSMEvent = PublisherFSMEvent;\n","const SMFLib = require('solclient-smf');\n// No idea why the usual import idiom does not work.\n//const { CapabilityType } = require('solclient-session');\nconst SolclientSession = require('solclient-session');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { LogFormatter } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageIds } = require('./message-ids');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\nconst { MessagePublisherEventName } = require('./message-publisher-event-names');\nconst { PrivateFlowEventName } = require('solclient-flow');\nconst { PublisherFSMEvent } = require('./publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./publisher-fsm-event-names');\nconst { PublisherStateNames } = require('./publisher-state-names');\nconst { State, StateMachine } = require('solclient-fsm');\nconst { StatType } = require('solclient-stats');\nconst { TransportReturnCode } = require('solclient-transport');\n\nconst ConnectReason = {\n  INIT:     0, // never connected: message renumbering required\n  RESUME:   1, // connected before\n  FAILOVER: 2, // after a DR failover: message renumbering and message republish event required\n};\n\nclass PublisherFSM extends StateMachine {\n  constructor({ publisher, name, sessionInterface, properties } = {}) {\n    super({ name });\n    /** @type {MessagePublisher} */\n    const fsm = this;\n    const currentState = () => {\n      const state = fsm.getCurrentState();\n      return state ? state.getName() : '<not running>';\n    };\n    this.logger = new LogFormatter((...args) => [\n      `[session=${sessionInterface.sessionIdHex}]`,\n      `[message-publisher-fsm=${publisher.flowIdDec}]`,\n      `[${currentState()}]`,\n      ...args,\n    ]);\n    this.log = this.logger.wrap(this.log, this);\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n    } = this.logger;\n\n    Object.assign(this, {\n      _publisher:                 publisher,\n      _acknowledgeMode:           properties.acknowledgeMode,\n      _acknowledgeTimeoutInMsecs: properties.acknowledgeTimeoutInMsecs,\n      _sessionInterface:          sessionInterface,\n      _windowSize:                properties.windowSize,\n      _stateEvents:               [],\n    });\n    // The publisher is not even constructed when publisherProperties.enabled is false\n    // so we could just set _guaranteedEnabled to true, but lets be thorough as at\n    // some point we may want to have sendADMessage() be responsible for throwing all\n    // errors. As it is, when publisher properties enabled is false, the session-fsm\n    // throws an error and when the message-spool is shutdown (close-flow received) the\n    // publisher-fsm thtows and error.\n    this._guaranteedEnabled = properties.enabled;\n    this._sendWindow = properties.windowSize;\n    this._resetConnectedInfo();\n    this._notifiedWindowClosed = false;\n    // We need a boolean to track the transport flow\n    // controlled state. prepareAdMessageAndSend is called by the\n    // session to prepare a message for publish and we\n    // need to return whether or not we are flow controlled\n    // without invoking the FSM or calling methods on the\n    // FSM.\n    // We consider all down states and all resending states equal\n    // to flow-controlled as in all states me must queue the message\n    // to the unacked list and not attempt to send directly.\n    // This is strictly a performance issue.\n    this._transportFlowControlled = true;\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.PublisherUnbound,\n                               (context) => {\n                                 LOG_TRACE(`Starting ${context.getStateMachine().getName()}`);\n                               }\n      );\n    });\n\n    fsm.unhandledEventReaction(function onUnhandledEvent(event) {\n      switch (event.getName()) {\n        case PublisherFSMEventNames.FLOW_UNBOUND:\n          // the router has closed the flow, likely due to operator\n          // shutdown on the message spool. Throw on any attempt\n          // to publish\n          this._guaranteedEnabled = false;\n          this._publisher.emit(MessagePublisherEventName.GUARANTEED_MESSAGING_DOWN);\n          return this.transitionTo(\n            fsm.PublisherUnbound,\n            (context) => {\n              LOG_TRACE(`Received close publisher for ${context.getStateMachine().getName()}`);\n            });\n        case PublisherFSMEventNames.DISPOSE:\n          LOG_TRACE('Received dispose request');\n          break;\n        case PublisherFSMEventNames.TRANSPORT_FULL:\n          LOG_TRACE('Received TRANSPORT_FULL');\n          break;\n        case PublisherFSMEventNames.CAN_SEND:\n          // This is ok because the session just sends the publisher CAN_SEND whenever received\n          // from transport, even if the publisher is not in use, or hasn't caused the flow control\n          LOG_TRACE('Received CAN_SEND when not flow controlled');\n          break;\n        default:\n          LOG_TRACE(`Ignoring event ${event.getName()}`);\n      }\n      return this;\n    });\n\n    fsm.PublisherUnbound = new State({\n      name:          PublisherStateNames.UNBOUND,\n      parentContext: fsm,\n    }, {\n      emitDownAndBindWaiting() {\n        LOG_TRACE('Emit down and bind waiting');\n        publisher.emit(MessagePublisherEventName.DOWN);\n        publisher.emit(PrivateFlowEventName.BIND_WAITING);\n      },\n    })\n      .entry(function onEntry() {\n        this.emitDownAndBindWaiting();\n        fsm._connectRetryCount = properties.connectRetryCount;\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UNBOUND, function onFlowUnbind() {\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.SESSION_UP, function onSessionUp() {\n        return this.transitionTo(fsm.PublisherOpenFlowSent);\n      });\n\n    fsm.PublisherOpenFlowSent = new State({\n      name:          PublisherStateNames.OPENFLOWSENT,\n      parentContext: fsm,\n    }, {\n      emitOpenFlowFailedError(details) {\n        publisher.emit(MessagePublisherEventName.CONNECT_FAILED_ERROR, details);\n      },\n      /**\n       * @param {AdProtocolMessage} adpMsg An OPENFLOW response.\n       * @description Handle an incoming Guaranteed Messaging Protocol Message.\n       * @returns {?} The result of processing an event, or null if no event was dispatched.\n       * @private\n       */\n      handleOpenFlowResponse(adpMsg) {\n        const smfRespHeader = adpMsg.smfHeader;\n        const respCode = smfRespHeader.pm_respcode;\n        /*\n         * Assured Control Protocol messages are received on publisher and consumer flows. The\n         * message types for each are unique, so we can determine whether it is a publisher or\n         * consumer by message type.  A specific publisher or consumer is found by the flowId, or\n         * by the correlation tag in the case of OPEN-FLOW (publisher) or BIND (consumer) responses.\n         */\n        if (adpMsg.msgType !== SMFLib.SMFAdProtocolMessageType.OPENPUBFLOW) {\n          return fsm.processEvent(new PublisherFSMEvent(\n              { name: PublisherFSMEventNames.FLOW_FAILED },\n              {\n                returnCode:  respCode,\n                description: `Unexpected response: ${SMFLib.SMFAdProtocolMessageType.describe(adpMsg.msgType)}`,\n              }\n          ));\n        }\n\n        /*\n         * The response code will indicate whether we create a PUB_FLOW_UP (200 OK) event\n         * or a PUB_FLOW_FAIL (any other response) event, or treat this as an invalid\n         * message (received a OPEN-PUB-FLOW request).\n         */\n\n        if (respCode === null) {\n          // Drop message and increment stats\n          publisher.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Open-Publisher-Flow Request message on sessionId 0x${\n                    sessionInterface.sessionIdHex}`);\n          return null;\n        }\n\n        if (respCode !== 200) {\n          const respStr = smfRespHeader.pm_respstr;\n          const mappedSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(respCode, respStr);\n          return fsm.processEvent(new PublisherFSMEvent(\n            { name: PublisherFSMEventNames.FLOW_FAILED },\n            {\n              subcode:     mappedSubcode,\n              returnCode:  respCode,\n              description: respStr,\n            })\n          );\n        }\n\n        LOG_TRACE('Handling OPENPUBFLOW message');\n\n        // typical response: { lastmsgidacked window flowid flowname publisher_id }\n\n        const lastMsgIDAcked = adpMsg.getLastMsgIdAcked();\n        const window = adpMsg.getWindow();\n        const flowId = adpMsg.getFlowId();\n        const flowName = adpMsg.getFlowName();\n        const publisherId = adpMsg.getPublisherId();\n\n        LOG_DEBUG(`OPENPUBFLOW response attributes: lastMsgIDAcked=${lastMsgIDAcked} window=${window} flowId=${flowId} flowName=${flowName} publisherId=${publisherId}`);\n\n        LOG_TRACE(`Local before handling response: ${fsm._messageIds}`);\n\n        if (window === undefined) {\n          return fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  { description: 'Window parameter not found' })\n          );\n        }\n        if (window > this._windowSize) {\n          return fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  { description: 'Invalid window negotiation' })\n          );\n        }\n        // reduce sendWindow by the size of unAckedList but do not reduce below zero\n        fsm._sendWindow = window - fsm._unackedList.length;\n        if (fsm._sendWindow < 0) fsm._sendWindow = 0;\n\n        // update publisher info before renumbering\n        Object.assign(fsm._publisher, {\n          name: flowName,\n          flowId,\n          publisherId,\n        });\n        // we may have been disabled by a previous closeFlow messsage, now that\n        // we know hte message spool is enabled again, set _guaranteedEnabled back\n        // to true\n        fsm._guaranteedEnabled = true;\n\n        if ((fsm._connectReason === ConnectReason.INIT) ||\n          (fsm._connectReason === ConnectReason.FAILOVER)) {\n          // reset 'lastSent' before renumbering\n          fsm._messageIds.setLastSent(lastMsgIDAcked);\n\n          LOG_DEBUG(`Renumbering unacked/unsent messages: fsm._messageIds=${fsm._messageIds}, lastMsgIDAcked=${lastMsgIDAcked}, type=${fsm._connectReason}`);\n          if (fsm._connectReason === ConnectReason.FAILOVER) {\n            publisher.emit(MessagePublisherEventName.FLOW_NAME_CHANGED, {\n              messages: [...fsm._unackedList],\n              count:    fsm._unackedList.length,\n            });\n          }\n          fsm._connectReason = ConnectReason.RESUME;\n          fsm._unackedList.forEach((message) => {\n            const oldId = message.getGuaranteedMessageId();\n            fsm._renumber(message);\n            LOG_TRACE(`Renumbering message ID: from ${oldId} to ${message.getGuaranteedMessageId()}`);\n            fsm._messageIds.setLastSent(message.getGuaranteedMessageId());\n          });\n        } else {\n          fsm._unackedList.forEach((message) => {\n            message.setFlowId(flowId);\n            message.setPublisherId(publisher.publisherId);\n            LOG_TRACE(`Set FlowId to ${flowId} in msg# ${message.getGuaranteedMessageId()}`);\n          });\n        }\n        // Either way, make sure none of the messages is above the size limit:\n        const payloadSizeLimit = fsm._sessionInterface.getCapability(SolclientSession.CapabilityType.MAX_GUARANTEED_MSG_SIZE).getValue();\n        fsm._unackedList.forEach((message) => {\n          if (payloadSizeLimit < message._memoized_payload.length) {\n            LOG_WARN(`Message size ${message._memoized_payload.length} above broker limit ${payloadSizeLimit}`);\n          }\n        });\n\n\n        if (fsm._unackedList.length) {\n          fsm._handleAck(lastMsgIDAcked, false, adpMsg, true);\n          // the starting point for retransmitting.  If lastMsgIdAcked doesn't\n          // ack anything this does not get updates, causing us to possible send\n          // messages out of order, or not start sending at all\n          fsm._firstUnackedToSend = fsm._unackedList[0];\n        } else {\n          fsm._messageIds.lastAcked = Long.fromValue(lastMsgIDAcked);\n        }\n        LOG_TRACE(`Local after applying lastMsgIDAcked: ${fsm._messageIds}`);\n\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_UP }));\n      },\n      /**\n       * @returns {?} The result of processing an BIND_TIMEOUT event\n       * @private\n       */\n      handleOpenFlowTimeout() {\n        LOG_INFO('Open publisher connection timeout');\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.BIND_TIMEOUT }));\n      },\n      handleUnknownFlowName() {\n        LOG_INFO('Flow name unknown, republish required');\n        // Don't send the FLOW_NAME_CHANGED message yet -- it specifically indicates\n        // that duplicate messages should be expected. Wait until the flow is successfully\n        // connected and messages are being renumbered.\n        fsm._resetConnectedInfo(true);\n        return this.externalTransitionTo(fsm.PublisherOpenFlowSent);\n      },\n      /**\n       * Send a Publisher Open Flow Request.\n       * @private\n       */\n      sendOpenFlow() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        LOG_TRACE(`sendOpenFlow correlationTag: ${correlationTag}`);\n        const openPubFlowMsg = SMFLib.AdProtocolMessage.getOpenMessagePublisher(\n          fsm._messageIds.lastAcked,\n          fsm._messageIds.lastSent,\n          properties.windowSize,\n          fsm._publisher._flowName,\n          correlationTag\n        );\n        LOG_TRACE('sendOpenFlow openPubFlowMsg constituents:');\n        LOG_TRACE(`fsm._messageIds.lastAcked:${fsm._messageIds.lastAcked} fsm._messageIds.lastSent:${fsm._messageIds.lastSent} properties.windowSize:${properties.windowSize} fsm._publisher._flowName:${fsm._publisher._flowName} `);\n        sessionInterface.sendControl(openPubFlowMsg);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        () => this.handleOpenFlowTimeout(),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        rxMsgObj => this.handleOpenFlowResponse(rxMsgObj));\n        LOG_TRACE('Sent open publisher connection');\n      },\n    })\n      .entry(function onEntry() {\n        try {\n          this.sendOpenFlow();\n        } catch (e) {\n          LOG_WARN(`Exception during bind attempt: ${e}`);\n          fsm.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.SESSION_DOWN }));\n        }\n      })\n      .reaction(PublisherFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(fsm.PublisherCloseFlowSent);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.PublisherUp);\n      })\n      .reaction(PublisherFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.BIND_TIMEOUT, function onOpenFlowTimeout() {\n        if (fsm._connectRetryCount > 0) {\n          fsm._connectRetryCount--;\n          return this.externalTransitionTo(fsm.PublisherOpenFlowSent);\n        }\n        this.emitOpenFlowFailedError({\n          subcode:     ErrorSubcode.TIMEOUT,\n          description: 'Open publisher connection failed due to timeout',\n        });\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_FAILED, function onFlowFailed(pEvent) {\n        const { subcode, returnCode, description } = pEvent;\n        LOG_TRACE(`FLOW_FAILED in PublisherOpenFlowSent state: subcode: ${subcode}, returnCode: ${returnCode}, description: ${description}`);\n        switch (pEvent.subcode) {\n          case ErrorSubcode.UNKNOWN_FLOW_NAME:\n            // DR or long HA failover\n            return this.handleUnknownFlowName();\n          // case ErrorSubcode.GM_NOT_READY: Fail the session\n          default:\n            this.emitOpenFlowFailedError({\n              event: pEvent,\n              subcode,\n              returnCode,\n              description,\n            });\n            // Otherwise, the flow is invalid\n            fsm._resetConnectedInfo();\n        }\n        return this.transitionTo(fsm.PublisherUnbound);\n      });\n\n    fsm.PublisherCloseFlowSent = new State({\n      name:          PublisherStateNames.CLOSEFLOWSENT,\n      parentContext: fsm,\n    }, {\n      handleCloseFlowResponse(response) {\n        const smfRespHeader = response.smfHeader;\n        const respCode = smfRespHeader.pm_respcode;\n\n        if (response.msgType !== SMFLib.SMFAdProtocolMessageType.CLOSEPUBFLOW) {\n          return fsm.processEvent(new PublisherFSMEvent(\n            { name: PublisherFSMEventNames.FLOW_FAILED },\n            {\n              returnCode:  respCode,\n              description: `Unexpected response: ${SMFLib.SMFAdProtocolMessageType.describe(response.msgType)}`,\n            }));\n        }\n\n        if (respCode === null) {\n          // Drop message  and increment stats\n          publisher.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Close-Publisher-Flow Request message on sessionId 0x${\n                    sessionInterface.sessionIdHex}`);\n          return null;\n        }\n\n        if (respCode !== 200) {\n          fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  {\n                                    returnCode:  respCode,\n                                    description: smfRespHeader.pm_respstr,\n                                  }));\n        }\n\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_UNBOUND }));\n      },\n\n      handleCloseFlowTimeout() {\n        LOG_INFO('Close publisher connection timeout.');\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.UNBIND_TIMEOUT }));\n      },\n\n      sendCloseFlow() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const closePubFlowMsg = SMFLib.AdProtocolMessage.getCloseMessagePublisher(\n          fsm._publisher.flowId,\n          correlationTag\n        );\n        sessionInterface.sendControl(closePubFlowMsg);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        () => this.handleCloseFlowTimeout(),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        rxMsgObj => this.handleCloseFlowResponse(rxMsgObj));\n        LOG_TRACE('Sent close publisher connection');\n      },\n    })\n      .entry(function onEntry() {\n        this.sendCloseFlow();\n        return this;\n      })\n      .reaction(PublisherFSMEventNames.ACK, function onAck(event) {\n        fsm._handleAckEvent(event);\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UNBOUND, function onFlowUnbound() {\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_FAILED, function onCloseFlowFailed(/*pEvent*/) {\n        this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.UNBIND_TIMEOUT, function onCloseFlowTimeout() {\n        return this.transitionTo(fsm.PublisherCloseFlowSent);\n      });\n\n    fsm.PublisherUp = new State({\n      name:          PublisherStateNames.UP,\n      parentContext: fsm,\n    }, {\n      emitFlowUp() {\n        publisher.emit(MessagePublisherEventName.UP);\n      },\n    })\n      .initial(function initial() {\n        return this.transitionTo(\n          fsm._unackedList.length\n            ? fsm.PublisherRetransmitting\n            : fsm.PublisherDataXfer\n        );\n      })\n      .entry(function onEntry() {\n        // The state isn't changed on entry, so don't emit yet.\n        LOG_DEBUG('Flow is UP');\n        fsm._scheduleStateEvents(fsm.PublisherUp, () => this.emitFlowUp());\n        return this;\n      })\n      .reaction(PublisherFSMEventNames.ACK, function onAck(event) {\n        LOG_DEBUG('Ack received');\n        fsm._handleAckEvent(event);\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.ACK_TIMEOUT, function onAckTimeout() {\n        // the starting point when we get the CAN_SEND\n        fsm._firstUnackedToSend = fsm._unackedList[0];\n        return this.transitionTo(fsm.PublisherRetransmitting);\n      })\n        .reaction(PublisherFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n          return this.transitionTo(fsm.PublisherCloseFlowSent);\n        })\n        .reaction(PublisherFSMEventNames.SESSION_DOWN, function onSessionDown() {\n          return this.transitionTo(fsm.PublisherUnbound);\n        })\n        .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onWindowClosed() {\n          return this.internalTransition();\n        });\n\n    fsm.PublisherDataXfer = new State({\n      name:          PublisherStateNames.DATA_XFER,\n      parentContext: fsm.PublisherUp,\n    })\n      .entry(() => {\n        // publisher is up and capable of sending GM messages directly from the application\n        fsm._transportFlowControlled = false;\n        fsm._scheduleStateEvents(fsm.PublisherDataXfer, () => fsm._maybeEmitCanSend());\n      })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        return this.transitionTo(fsm.PublisherFlowControlled);\n      })\n      .exit(() => {\n        // publisher cannot send messages to transport and must queue in unAckedList until\n        // re-entering PublisherDataXfer\n        // set a FSM boolean that is checked in prepareADMessageAndSend() we\n        // need to avoid FSM interactions on the fast path so resort to\n        // this boolean.\n        fsm._transportFlowControlled = true;\n      });\n\n    fsm.PublisherFlowControlled = new State({\n      name:          PublisherStateNames.FLOW_CONTROLLED,\n      parentContext: fsm.PublisherUp,\n    })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        // Unusual event, as only the FSM can send messages when we're in flow-controlled state\n        LOG_INFO('Attempt to send while flow controlled');\n        // Fall out and do the action for PublisherUp\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.CAN_SEND, function onCanSend() {\n        //\n        // start sending from tune unAcked list.\n        return this.transitionTo(fsm.PublisherRetransmitting);\n      });\n\n    fsm.PublisherRetransmitting = new State({\n      name:          PublisherStateNames.RETRANSMITTING,\n      parentContext: fsm.PublisherUp,\n    }, {\n      retransmit() {\n        try {\n          fsm._resendFromUnacked();\n        } catch (ex) {\n          // Resend failed:\n          if (ex instanceof OperationError && ex.subcode === ErrorSubcode.INSUFFICIENT_SPACE) {\n            LOG_DEBUG('Publisher resendFromUnacked blocked due to insufficient space, wait for CAN_SEND');\n            fsm.processEvent(\n              new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n          } else {\n            // send failed.  Fail the publisher\n            LOG_INFO(`Publisher resendFromUnacked failed: ${ex}`);\n            fsm.processEvent(\n              new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED }));\n          }\n        }\n      },\n    })\n      .entry(function onEntry() {\n        this.retransmit();\n      })\n      .reaction(PublisherFSMEventNames.RESEND_COMPLETE, function onResendComplete() {\n        return this.transitionTo(fsm.PublisherDataXfer);\n      })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        // Transport flow controlled while resending/recovering from flow control. Go\n        // to flow controlled state and wait for CAN_SEND\n        LOG_DEBUG(`Transport full while retransmitting, unacked remaining: ${fsm._unackedList.length}`);\n        // Fall out and do the action for PublisherUp\n        return this.transitionTo(fsm.PublisherFlowControlled);\n      });\n  }\n\n  isDisconnected() {\n    if (!this.getCurrentState()) return true;\n    return !!this.getActiveState(PublisherStateNames.UNBOUND);\n  }\n\n  /**\n\n   * Prepare and send a Guaranteed Message. This method updates FSM variables including\n   * lastSendMessage.\n   *\n   * @private\n   * @param {Message} dataMsg The message to prepare\n   * @returns {TransportReturnCode} return the status from the transport send\n   */\n  prepareAdMessageAndSend(dataMsg) {\n    if (!this._guaranteedEnabled) {\n      throw new OperationError('Session does not provide Guaranteed Message Publish capability',\n        ErrorSubcode.GM_UNAVAILABLE,\n        'close flow received from message-router');\n    }\n    if (this._sendWindow <= 0) {\n      this._publisher.incStat(StatType.TX_WINDOW_CLOSED);\n      this._notifiedWindowClosed = true;\n      throw new OperationError(\n        'Guaranteed Message Window Closed',\n        ErrorSubcode.INSUFFICIENT_SPACE\n      );\n    }\n\n\n    const unackedList = this._unackedList;\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n    } = this.logger;\n\n    if (dataMsg._payload_is_memoized) {\n      dataMsg._payload_is_memoized = false;\n      dataMsg._memoized_csumm = undefined;\n      dataMsg._memoized_payload = undefined;\n    }\n    const dupMsg = dataMsg.clone();\n    const payloadSize = SMFLib.Codec.Encode.adaptMessageToSmf_payloadMemoize(dupMsg);\n    var payloadSizeLimit = 0;\n    try {\n      payloadSizeLimit = this._sessionInterface.getCapability(SolclientSession.CapabilityType.MAX_GUARANTEED_MSG_SIZE).getValue();\n      LOG_TRACE(`Payload size limit: ${payloadSizeLimit}`);\n    } catch (e) {\n      LOG_INFO('Can\\'t pre-check payload size, broker not connected yet?');\n      LOG_TRACE(e.stack);\n    }\n    if ((0 < payloadSizeLimit) && (payloadSize > payloadSizeLimit)) {\n      throw new OperationError(\n        `Encoded payload size (${payloadSize}) exceeds broker size limit (MAX_GUARANTEED_MSG_SIZE, ${payloadSizeLimit})`,\n        ErrorSubcode.MESSAGE_TOO_LARGE\n      );\n    }\n\n    --this._sendWindow;\n    this._renumber(dupMsg);\n    this._cloneNumbers(dupMsg, dataMsg);\n\n    unackedList.push(dupMsg);\n    // Update the messgeIds, lastSend/next values only on a successful send or enqueue,\n    // from this point on we will return OK from this send method.\n    const msgId = dupMsg.getGuaranteedMessageId();\n    this._messageIds.setLastSent(msgId);\n    LOG_TRACE(`Prepare and send AD message ID = ${msgId}, \n      unackedListSize = ${unackedList.length}, sendWindow = ${this._sendWindow}`);\n    // Note that the transport sender can be flow controlled at the transport\n    // level, which means the message should not be sent. So simply return\n    // We also consider set-up/down-states as _transportFlowControlled. We must be up\n    // and not retransmitting to\n    // send directly from application space.\n    if (this._transportFlowControlled) {\n      // we may receive acknowledgements while transport flow controlled which can\n      // cause our firstUnAckedToSend to become undefined, if this is the first message\n      // queued in that case, set firstUnAckedToSend\n      if (this._firstUnackedToSend === undefined) {\n        this._firstUnackedToSend = dupMsg;\n      }\n      return TransportReturnCode.OK;\n    }\n    // We use the session sendToTransport directly which may throw or  otherwise\n    // return an error. If so, catch the eror and remove the message from the unackedlist\n    // before rethrowing the error.\n    let returnCode;\n    try {\n      returnCode = this._sessionInterface.sendToTransport(dupMsg);\n      if (returnCode !== TransportReturnCode.OK) {\n        if (returnCode === TransportReturnCode.NO_SPACE) {\n          returnCode = TransportReturnCode.OK;\n          this._firstUnackedToSend = dupMsg;  // the starting point when we get the CAN_SEND\n          this.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n        } else {\n          //\n          LOG_DEBUG(`prepareAdMessageAndSend: saw returnCode = ${returnCode}`);\n        }\n      } else {\n        // The message has successfully been sent once. Set the redelivered flag in case we need to\n        // resend it later.\n        dupMsg.setRedelivered(true);\n      }\n      // TBD: Should we start AckTimer when flow controlled?\n      this._startAckTimer();\n    } catch (ex) {\n      if (ex instanceof OperationError) {\n        LOG_DEBUG(`prepareAdMessageAndSend: caught OperationError: ${ErrorSubcode.describe(ex.subcode)} - ${ex.message}`);\n        // OperationErrors are encoding or other errors caused by the field contents the\n        // application has set on the message.  So we throw the error back at the\n        // application after undoing the queueing operations.\n        unackedList.pop();\n        this._messageIds.setLastSent(dupMsg.getGuaranteedPreviousMessageId());\n        ++this._sendWindow;\n        throw (ex);\n      } else {\n        LOG_DEBUG(`prepareAdMessageAndSend: caught ${ex.message}`);\n        throw ex;\n      }\n    }\n    return TransportReturnCode.OK;\n  }\n\n  _handleAckEvent(event) {\n    this._publisher.incStat(StatType.TX_ACKS_RXED);\n    this._handleAck(event.ack || event.nack, !!event.nack, event.ctrlMessage);\n  }\n\n  _handleAck(id, nack, ctrlMessage = undefined, openFlow = false) {\n    const {\n      _messageIds: messageIds,\n      _unackedList: unackedList,\n    } = this;\n    const { LOG_DEBUG, LOG_INFO } = this.logger;\n\n    if (messageIds.lastAcked.gte(id)) {\n      if (openFlow) {\n        LOG_DEBUG(`Implicit acks up to date: remote ack for ${id}, local ids ${this._messageIds}`);\n      } else {\n        LOG_INFO(`Dropping ack: remote ack for ${id}, local ids ${this._messageIds}`);\n      }\n      return;\n    }\n\n    const reportAcked = [];\n\n    // Assumption: the unacked message list is in increasing order of message ID.\n    // The assured message ID should be automatically generated, immutable and\n    // monotonically increasing.\n\n    // While the acked ID is greater than an element at the beginning of the unacked list...\n    while (unackedList.length &&\n           id.gte(unackedList[0].getGuaranteedMessageId())) {\n      // That unacked message is now acked. Shift it off and append to list of acked.\n      reportAcked.push(unackedList.shift());\n    }\n\n    // if we have removed the firstUnacked, reset it to the beginning of the list\n    if (unackedList.indexOf(this._firstUnackedToSend) === -1) {\n      this._firstUnackedToSend = unackedList[0];\n    }\n\n\n    // Recover some window space from the acked IDs.\n    this._sendWindow += reportAcked.length;\n    LOG_DEBUG('Send window size is now', this._sendWindow);\n\n\n    // The last acked ID is now the one we received.\n    // Don't let an exception in event dispatching prevent this from being set -- do it now.\n    messageIds.lastAcked = id;\n\n    // If we're NACKing, it's only the last message.\n    const reportNacked = nack ? reportAcked.pop() : null;\n\n    // Any ACKs?\n    // reportAcked is constant from here on\n    const numAcked = reportAcked.length;\n    if (numAcked) {\n      if (this._acknowledgeMode === MessagePublisherAcknowledgeMode.PER_MESSAGE) {\n        LOG_DEBUG(`Ack received: lastAckedMsgId=${id}, numAckedMsgs=${numAcked}, numUnackedMsgs=${unackedList.length}`);\n        for (let i = 0; i < numAcked; ++i) {\n          this._publisher.emit(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, reportAcked[i]);\n        }\n      } else {\n        const lastAckedMessage = reportAcked[numAcked - 1];\n        LOG_DEBUG(`Acking single message with ID ${lastAckedMessage.getGuaranteedMessageId()} from router ack on ${id}`);\n        this._publisher.emit(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, lastAckedMessage);\n      }\n    }\n\n    // Terminating NACK?\n    if (reportNacked) {\n      LOG_DEBUG(`Nacking single message with ID ${reportNacked.getGuaranteedMessageId()} from router ack on ${id}`);\n      this._publisher.emit(MessagePublisherEventName.REJECTED_MESSAGE, reportNacked, ctrlMessage);\n    }\n\n    LOG_DEBUG('Unacked messages remaining: ', unackedList.length);\n\n    if (unackedList.length) {\n      // There are more messages to be acked. Reset the ack timer.\n      this._resetAckTimer();\n    } else {\n      this._clearAckTimer();\n    }\n    //\n    // send can-send to applicatino if necessary.\n    this._maybeEmitCanSend();\n  }\n\n  _maybeEmitCanSend() {\n    const { LOG_TRACE } = this.logger;\n    if (!this._notifiedWindowClosed) return;\n    if (this._sendWindow === 0) {\n      // Should log this since it is called AFTER the state change\n      LOG_TRACE('Suppressing CAN_SEND with zero window available');\n      return;\n    }\n    this._notifiedWindowClosed = false; // Set before emitting in case we re-enter\n    this._publisher.emit(MessagePublisherEventName.CAN_SEND);\n  }\n\n  _resendFromUnacked() {\n    const { LOG_ERROR, LOG_INFO, LOG_DEBUG } = this.logger;\n    // We choose to start the ack timer after the message resend. The resend could\n    // take longer than the ack timeout in poor conditions.\n    //\n    // If any message is successfully resent, we need to restart the ack timer,\n    // even if we are throwing.\n    const list = this._unackedList;\n    let resendIndex = list.indexOf(this._firstUnackedToSend);\n    if (resendIndex === -1) {\n      // first Unacked may be null if all have been resent alreadygrunt -\n      // in which case the list  should be empty\n      if (this._firstUnackedToSend) {\n        LOG_ERROR(`Could not find first Unacked Messages in unacked message list: msgId = ${this._firstUnackedToSend.getGuaranteedMessageId}`);\n      }\n      if (list.length === 0) {\n        // Nothing to resend: return to DataXfer\n        LOG_DEBUG(`Nothing to resend: ${this._messageIds.toString()}`);\n        this.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.RESEND_COMPLETE })\n        );\n      }\n      return;\n    }\n    LOG_DEBUG(`Resending unacked messages from ${resendIndex} to ${list.length - 1}: `,\n              list.map(m => m.getGuaranteedMessageId().toString()));\n    while (resendIndex < list.length) {\n      if (list[resendIndex].getPublisherId() !== this._publisher.publisherId) {\n        LOG_ERROR(`Resending on invalid publisherId '${list[resendIndex].getPublisherId()}'when it should be '${this._publisher.publisherId}'`);\n      }\n      const returnCode = this._sessionInterface.sendData(list[resendIndex]);\n      if (returnCode === TransportReturnCode.NO_SPACE) {\n        // the starting point when we get the CAN_SEND from the transport\n        this._firstUnackedToSend = list[resendIndex];\n        LOG_INFO('Publisher sendMessage blocked due to insufficient space, wait for CAN_SEND');\n        this.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n        return;\n      }\n      if (returnCode !== TransportReturnCode.OK) {\n        // session-FSM is already processing the error\n        return;\n      }\n      // The message has successfullly been sent once. Set the redelivered flag in case we need to\n      // resend it later\n      list[resendIndex].setRedelivered(true);\n      resendIndex++;\n      this._startAckTimer();\n    }\n    // Resend successful: return to DataXfer\n    LOG_DEBUG(`Resend complete: ${this._messageIds.toString()}`);\n    this.processEvent(\n      new PublisherFSMEvent({ name: PublisherFSMEventNames.RESEND_COMPLETE })\n    );\n  }\n\n  _resetConnectedInfo(failover = false) {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Resetting connected flow info');\n\n    if (this._ackTimer) this._clearAckTimer();\n\n    Object.assign(this, {\n      _messageIds: new MessageIds(),\n    });\n\n    Object.assign(this._publisher, {\n      publisherId: undefined,\n      flowId:      undefined,\n      flowName:    null,\n    });\n\n    if (failover) {\n      this._connectReason = ConnectReason.FAILOVER;\n    } else {\n      // Full reset\n      this._unackedList = [];\n      this._connectReason = ConnectReason.INIT;\n    }\n  }\n\n  _clearAckTimer() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Clear ack timer ${this._ackTimer ? this._ackTimer : 'undefined or null or zero'}`);\n    if (!this._ackTimer) return;\n    clearTimeout(this._ackTimer);\n    this._ackTimer = null;\n  }\n\n  _emitStateEvents() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Emitting deferred state events');\n    while (this._stateEvents.length) {\n      const pair = this._stateEvents.shift();\n      const state = pair[0];\n      const event = pair[1];\n      // If the state requesting this event is still active...\n      if (this.getActiveState(state.getName())) {\n        // then do its action\n        event.apply(state);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  _handleAckTimeout() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Ack Timeout');\n    this._ackTimer = null;\n    this._publisher.incStat(StatType.TX_ACK_TIMEOUT);\n    this.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.ACK_TIMEOUT }));\n  }\n\n  /**\n   * If the remote flow changes, any remote state applied to the unacked messages needs to\n   * be reapplied.\n   *\n   * @param {solace.Message} message The message to renumber.\n   * @private\n   */\n  _renumber(message) {\n    const messageIds = this._messageIds;\n    const current = messageIds.next;\n    message.setGuaranteedPreviousMessageId(messageIds.lastSent);\n    message.setGuaranteedMessageId(current);\n\n    const publisher = this._publisher;\n    message.setFlowId(publisher.flowId);\n    message.setPublisherId(publisher.publisherId);\n  }\n\n  _cloneNumbers(fromMsg, toMsg) {\n    toMsg.setGuaranteedPreviousMessageId(fromMsg.getGuaranteedPreviousMessageId());\n    toMsg.setGuaranteedMessageId(fromMsg.getGuaranteedMessageId());\n    toMsg.setFlowId(fromMsg.getFlowId());\n    toMsg.setPublisherId(fromMsg.getPublisherId());\n  }\n\n  _resetAckTimer() {\n    this._clearAckTimer();\n    this._startAckTimer();\n  }\n\n  _scheduleStateEvents(state, event) {\n    this._stateEvents.push([state, event]);\n    this._setPostEventAction(() => this._emitStateEvents(), 'Emit state events');\n  }\n\n  _setPostEventAction(action, desc = 'No action') {\n    const { LOG_DEBUG, LOG_WARN } = this.logger;\n    if (this._postEventAction && this._postEventAction.desc === desc) {\n      LOG_DEBUG('Keeping same post event action');\n      return;\n    }\n\n    if (this._postEventAction && this._postEventAction.desc) {\n      LOG_WARN(`Replacing post event action ${this._postEventAction.desc} with ${desc}`);\n    }\n    this._postEventAction = { action: action || (() => {}), desc };\n    this.setPostEventAction(() => {\n      this._postEventAction.action();\n      this._postEventAction = null;\n    });\n  }\n\n  /**\n   * @private\n   */\n  _startAckTimer() {\n    // const { LOG_TRACE } = this.logger;\n    // LOG_TRACE(`Start ack timer ${this._ackTimer ? this._ackTimer : 'undefined or null or zero'\n    //           }: ${this._acknowledgeTimeoutInMsecs} ms`);\n    if (this._ackTimer) return;\n    this._ackTimer = setTimeout(() => this._handleAckTimeout(),\n                                this._acknowledgeTimeoutInMsecs);\n  }\n\n}\n\nmodule.exports.PublisherFSM = PublisherFSM;\n","const { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * @enum {string}\n * State names on the Publisher FSM\n ********************************************************************************/\nconst PublisherStateNames = {\n  UNBOUND:         'PublisherUnbound',\n  OPENFLOWSENT:    'PublisherOpenFlowSent',\n  UP:              'PublisherUp',\n  FAILED:          'PublisherFailed',\n  CLOSEFLOWSENT:   'PublisherCloseFlowSent',\n  DATA_XFER:       'PublisherDataXfer',\n  FLOW_CONTROLLED: 'MessagePublisherFlowControlled',\n  RETRANSMITTING:  'PublisherRetransmitting',\n};\n\nmodule.exports.PublisherStateNames = Enum.new(PublisherStateNames);\n","const {\n  ReplicationGroupMessageId,\n  RgmidFactory,\n} = require('./lib/replication-group-message-id');\nconst { Message } = require('./lib/message');\nconst { MessageCacheStatus } = require('./lib/message-cache-status');\nconst { MessageDeliveryModeType } = require('./lib/message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./lib/message-dump-flags');\nconst { MessageDumpStandardProvider } = require('./lib/message-dump-standard-provider');\nconst { MessageDumpUtil } = require('./lib/message-dump-util');\nconst { MessageType } = require('./lib/message-types');\nconst { MessageUserCosType } = require('./lib/message-user-cos-types');\nconst { SolclientFactory } = require('solclient-factory');\n\n/**\n * Creates a {@link solace.Message} instance.\n * @returns {solace.Message} a new message instance.\n * @method\n * @name solace.SolclientFactory.createMessage\n */\nSolclientFactory.createMessage = SolclientFactory.createFactory(() => new Message());\n\n/**\n * Creates a {@link solace.ReplicationGroupMessageId} instance from string.\n * A ReplicationGroupMessageId is also a {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that only messages spooled\n * in the replay log since the message after the given ReplicationGroupMesageId\n * should be replayed.\n * @param {string} id a serialized ReplicationGroupMessageId had previously been returned\n *   from {@link solace.ReplicationGroupMessageId.toString}.\n * @returns {solace.ReplicationGroupMessageId} a new ReplicationGroupMessageId instance\n * @method\n * @name solace.SolclientFactory.createReplicationGroupMessageId\n * @throws {solace.OperationError}\n * * if parameter is not a string.\n *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n * * if incorrect format is detected.\n *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n */\nSolclientFactory.createReplicationGroupMessageId = SolclientFactory.createFactory(id =>\n  RgmidFactory.fromString(id));\n\nmodule.exports.Message = Message;\nmodule.exports.MessageCacheStatus = MessageCacheStatus;\nmodule.exports.MessageDeliveryModeType = MessageDeliveryModeType;\nmodule.exports.MessageDumpFlag = MessageDumpFlag;\nmodule.exports.MessageDumpStandardProvider = MessageDumpStandardProvider;\nmodule.exports.MessageDumpUtil = MessageDumpUtil;\nmodule.exports.MessageType = MessageType;\nmodule.exports.MessageUserCosType = MessageUserCosType;\nmodule.exports.ReplicationGroupMessageId = ReplicationGroupMessageId;\nmodule.exports.RgmidFactory = RgmidFactory;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An attribue of a {@link solace.Message}. Applications receive messages due to subscriptions on\n * topics, or consumers connected to durable objects.  The MessageCacheStatus of such messages is:\n * {@link solace.MessageCacheStatus.LIVE}.\n *\n * Message are also delivered to an application\n * as a result of a cache request (see {@link solace.CacheSession#sendCacheRequest}) which\n * have a MessageCacheStatus that is {@link solace.MessageCacheStatus.CACHED} or\n * {@link solace.MessageCacheStatus.SUSPECT}.\n *\n * The MessageCacheStatus is retrieved with {@link solace.Message#getCacheStatus}.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageCacheStatus = {\n  /**\n   * The message is live.\n   * @type {Number}\n   */\n  LIVE:    0,\n  /**\n   * The message was retrieveed from a solCache Instance.\n   * @type {Number}\n   */\n  CACHED:  1,\n  /**\n   * The message was retrieved from a suspect solCache Instance.\n   * @type {Number}\n   */\n  SUSPECT: 2,\n\n};\n\nmodule.exports.MessageCacheStatus = Enum.new(MessageCacheStatus);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message delivery modes.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageDeliveryModeType = {\n  /**\n   * This mode provides at-most-once message delivery. Direct messages have\n   * the following characteristics:\n   *   * They are not retained for clients that are not connected to a Solace Message Router.\n   *   * They can be discarded when congestion or system failures are encountered.\n   *   * They can be reordered in the event of network topology changes.\n   *\n   * Direct messages are most appropriate for messaging applications that require very\n   * high-rate or very low-latency message transmission. Direct Messaging enables\n   * applications to efficiently publish messages to a large number of clients\n   * with matching subscriptions.\n   */\n  DIRECT:         0,\n  /**\n   * A Persistent delivery mode is used for Guaranteed Messaging, and this delivery mode\n   * is most appropriate for applications that require persistent storage of the messages\n   * they send or intend to receive. Persistent messages have the following characteristics:\n   *\n   *  * They cannot be discarded or lost (once they are acknowledged by the Solace Message Router).\n   *  * They cannot be reordered in the event of network topology changes.\n   *  * They cannot be delivered more than once to a single client (unless the redelivered\n   *    message flag is applied).\n   *  * When they match subscriptions on durable endpoints, they are retained for a client\n   *    when that client is not connected.\n   *\n   * Persistent messages are most appropriate for applications that require persistent storage\n   * of the messages they send or intend to receive.\n   */\n  PERSISTENT:     1,\n  /**\n   * This mode is functionally the same as Persistent. It exists to facilitate interaction\n   * with JMS applications. In most situations where you want to use Guaranteed Messaging,\n   * it is recommended that you use {@link solace.MessageDeliveryModeType.PERSISTENT}.\n   */\n  NON_PERSISTENT: 2,\n};\n\nmodule.exports.MessageDeliveryModeType = Enum.new(MessageDeliveryModeType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message dump formats. It controls\n * the output of {@link solace.Message#dump}.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageDumpFlag = {\n  /**\n   * Display only the length of the binary attachment, XML content and user property maps.\n   */\n  MSGDUMP_BRIEF: 0,\n  /**\n   * Display the entire message contents.\n   */\n  MSGDUMP_FULL:  1,\n};\n\nmodule.exports.MessageDumpFlag = Enum.new(MessageDumpFlag);\n","const DebugLib = require('solclient-debug');\nconst MessageDumpUtilLib = require('./message-dump-util');\nconst { Destination } = require('solclient-destination');\nconst { LOG_ERROR } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageCacheStatus } = require('./message-cache-status');\nconst { MessageDeliveryModeType } = require('./message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { MessageUserCosType } = require('./message-user-cos-types');\nconst { SDTMapContainer, SDTFieldType } = require('solclient-sdt');\nconst { StringUtils } = require('solclient-util');\n\n\nconst MessageDumpStandardProvider = {\n\n  fpDestination(message/* , flags*/) {\n    const dest = message.getDestination();\n    if (dest !== null && dest instanceof Destination) {\n      return ['Destination', true, dest.toString(), null];\n    }\n    return ['Destination', false, '', null];\n  },\n\n  fpSenderId(message/* , flags*/) {\n    return ['SenderId', (message.getSenderId() !== undefined && message.getSenderId() !== null), message.getSenderId(), null];\n  },\n\n  fpAppmsgType(message/* , flags*/) {\n    return ['AppMessageType', (message.getApplicationMessageType() !== undefined && message.getApplicationMessageType() !== null),\n      message.getApplicationMessageType(), null];\n  },\n\n  fpAppMsgId(message/* , flags*/) {\n    return ['AppMessageID', (message.getApplicationMessageId() !== undefined && message.getApplicationMessageId() !== null),\n      message.getApplicationMessageId(), null];\n  },\n\n  fpSequenceNumber(message/* , flags*/) {\n    const sequenceNum = message.getSequenceNumber();\n    if (typeof sequenceNum === 'number') {\n      return ['SequenceNumber', true, sequenceNum, null];\n    }\n    return ['SequenceNumber', false, '', null];\n  },\n\n  fpTopicSequenceNumber(message/*, flags */) {\n    const topicSeqNo = message.getTopicSequenceNumber();\n    if (Long.isLong(topicSeqNo)) {\n      return ['TopicSequenceNumber', true, topicSeqNo.toString(), null];\n    }\n    return ['TopicequenceNumber', false, '', null];\n  },\n\n  fpCorrelationId(message/* , flags*/) {\n    return ['CorrelationId', (message.getCorrelationId() !== undefined && message.getCorrelationId() !== null),\n      message.getCorrelationId(), null];\n  },\n\n  fpHttpContentType(/*message*/ /*, flags*/) {\n    return ['HTTP Content Type', false, undefined, null];\n  },\n\n  fpHttpContentEncoding(/*message*/ /*, flags*/) {\n    return ['HTTP Content Encoding', false, undefined, null];\n  },\n\n  fpSendTimestamp(message/* , flags*/) {\n    const timestamp = message.getSenderTimestamp();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['SendTimestamp', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['SendTimestamp', false, '', null];\n  },\n\n  fpRcvTimestamp(message/* , flags*/) {\n    const timestamp = message.getReceiverTimestamp();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['RcvTimestamp', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['RcvTimestamp', false, '', null];\n  },\n\n  fpClassOfService(message/* , flags*/) {\n    const cos = message.getUserCos();\n    if (typeof cos === 'number') {\n      return ['Class Of Service', true, MessageUserCosType.nameOf(message.getUserCos()), null];\n    }\n    return ['Class Of Service', false, '', null];\n  },\n\n//  fpPriority(message/* , flags*/) {\n//    const prio = message.getPriority() !== undefined ? message.getPriority() : 'undefined';\n//    return ['Message Priority', true, prio, null];\n//  },\n\n  fpDeliveryMode(message/* , flags*/) {\n    const mode = message.getDeliveryMode();\n    if (typeof mode === 'number') {\n      return ['DeliveryMode', true, MessageDeliveryModeType.nameOf(message.getDeliveryMode()), null];\n    }\n    return ['DeliveryMode', false, '', null];\n  },\n\n  fpGuaranteedMsgId(message/*, flags*/) {\n    const msgId = message.getGuaranteedMessageId();\n    if (Long.isLong(msgId)) {\n      return ['Message Id', true, msgId.toString(10), null];\n    }\n    return ['Message Id', false, '', null];\n  },\n\n  fpReplicationGroupMessageId(message/* , flags*/) {\n    const rgmid = message.getReplicationGroupMessageId();\n    if (rgmid === undefined) {\n      return ['Replication Group Message Id', false, '', null];\n    }\n    return ['Replication Group Message Id', true, rgmid.toString(), null];\n  },\n\n  fpTimeToLive(message/* , flags */) {\n    const timeToLive = message.getTimeToLive();\n    if (typeof timeToLive === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      const d = new Date();\n      return ['TimeToLive', true,\n        `${timeToLive} (${mdu.formatDate(d.getTime() + timeToLive)})`, null];\n    }\n    return ['TimeToLive', false, '', null];\n  },\n\n  fpExpiration(message/*, flags*/) {\n    const timestamp = message.getGMExpiration();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['Expiration', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['Expiration', false, '', null];\n  },\n\n  fpMessageDMQEligible(message/* , flags*/) {\n    return ['DMQ Eligible', message.isDMQEligible(), '', null];\n  },\n\n  fpMessageRedelivered(message/* , flags*/) {\n    return ['Message Re-delivered', message.isRedelivered(), '', null];\n  },\n\n  fpMessageDeliveryCount(message/* , flags*/) {\n    //TODO: exception handling!\n    try {\n      return ['Message Delivery Count', true, message.getDeliveryCount(), null];\n    } catch (e) {\n      return ['Message Delivery Count', false, '', null];\n    }\n  },\n\n  fpDiscardIndication(message/* , flags*/) {\n    return ['Discard Indication', message.isDiscardIndication(), '', null];\n  },\n\n  fpAckImmediately(message/* , flags*/) {\n    return ['ACK Immediately', message.isAcknowledgeImmediately(), '', null];\n  },\n\n  fpElidingEligible(message/* , flags*/) {\n    return ['Eliding Eligible', message.isElidingEligible(), '', null];\n  },\n\n  fpReplyMessage(message/* , flags*/) {\n    return ['Reply Message', message.isReplyMessage(), '', null];\n  },\n\n  fpReplyTo(message/* , flags*/) {\n    const replyTo = message.getReplyTo();\n    if (replyTo !== null && replyTo instanceof Destination) {\n      return ['ReplyTo', true, replyTo.toString(), null];\n    }\n    return ['ReplyTo', false, '', null];\n  },\n\n  fpDeliverToOne(message/* , flags*/) {\n    return ['Deliver To One', message.isDeliverToOne(), '', null];\n  },\n\n  fpCacheMessage(message/* , flags*/) {\n    return ['Message from cache', message.getCacheStatus() !== MessageCacheStatus.LIVE, '', null];\n  },\n\n  fpCacheRequestId(message/*, flags */) {\n    const cacheRequestId = message.getCacheRequestId();\n    if (Long.isLong(cacheRequestId)) {\n      return ['Cache Request Id', true, cacheRequestId.toString, null];\n    }\n    return ['Cache Request Id', false, '', null];\n  },\n\n  fpUserPropertyMap(message, flags) {\n    const propMap = message.getUserPropertyMap();\n    if (propMap !== null && propMap instanceof SDTMapContainer) {\n      const value = `${propMap.getKeys().length} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          const mdu = MessageDumpUtilLib.MessageDumpUtil;\n          detailValue = mdu.printMap(propMap, 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['User Property Map', true, value, detailValue];\n    }\n    return ['User Property Map', false, '', null];\n  },\n\n  fpCorrelationTag(message/*, flags*/) {\n    const strValue = message.getCorrelationKey();\n    return ['Correlation Tag Pointer', (strValue !== undefined && strValue !== null),\n      strValue, null];\n  },\n\n  fpUserData(message/* , flags*/) {\n    if (StringUtils.notEmpty(message.getUserData())) {\n      return ['User Data', true, `len=${message.getUserData().length}`,\n        DebugLib.Debug.formatDumpBytes(message.getUserData(), true, 2)];\n    }\n    return ['User Data', false, '', null];\n  },\n\n  fpSdtStream(message, flags) {\n    const sdtFieldValue = message.getSdtContainer();\n    if (sdtFieldValue !== null && sdtFieldValue.getType() === SDTFieldType.STREAM) {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      const value = `${mdu.countItems(sdtFieldValue.getValue())} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          detailValue = mdu.printStream(sdtFieldValue.getValue(), 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['SDT Stream', true, value, detailValue];\n    }\n    return ['SDT Stream', false, '', null];\n  },\n\n  fpSdtMap(message, flags) {\n    const sdtFieldValue = message.getSdtContainer();\n    if (sdtFieldValue !== null && sdtFieldValue.getType() === SDTFieldType.MAP) {\n      const value = `${sdtFieldValue.getValue().getKeys().length} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          const mdu = MessageDumpUtilLib.MessageDumpUtil;\n          detailValue = mdu.printMap(sdtFieldValue.getValue(), 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['SDT Map', true, value, detailValue];\n    }\n    return ['SDT Map', false, '', null];\n  },\n\n  fpBinaryAttachment(message, flags) {\n    if (!message._binaryAttachment || message._binaryAttachment.length < 1) {\n      return ['Binary Attachment', false, '', null];\n    }\n    const att = message._binaryAttachment.toString('latin1');\n    const value = `len=${att.length}`;\n    let detailValue = null;\n    if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n      detailValue = DebugLib.Debug.formatDumpBytes(att, true, 2);\n    }\n    return ['Binary Attachment', true, value, detailValue];\n  },\n\n  fpXmlContent(message, flags) {\n    const xml = message.getXmlContent();\n    if (StringUtils.notEmpty(xml)) {\n      const value = `len=${xml.length}`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        detailValue = DebugLib.Debug.formatDumpBytes(xml, true, 2);\n      }\n      return ['XML', true, value, detailValue];\n    }\n    return ['XML', false, '', null];\n  },\n\n  fpXmlMetadata(message, flags) {\n    const xmlMetadata = message.getXmlMetadata();\n    if (StringUtils.notEmpty(xmlMetadata)) {\n      const value = `len=${xmlMetadata.length}`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        detailValue = DebugLib.Debug.formatDumpBytes(xmlMetadata, true, 2);\n      }\n      return ['XML Metadata', true, value, detailValue];\n    }\n    return ['XML Metadata', false, '', null];\n  },\n};\n\nmodule.exports.MessageDumpStandardProvider = MessageDumpStandardProvider;\n","const DebugLib = require('solclient-debug');\nconst MessageDumpStandardProviderLib = require('./message-dump-standard-provider');\nconst {\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n} = require('solclient-sdt');\nconst { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { StringBuffer, StringUtils } = require('solclient-util');\n\nconst MessageDumpState = {\n  get dumpProviders() {\n    const providers = MessageDumpStandardProviderLib.MessageDumpStandardProvider;\n    return Object.keys(providers).map(k => providers[k]);\n  },\n};\n\nconst MessageDumpUtil = {\n  getOutOfRangeValue(rawData) {\n    if (typeof rawData === 'string') {\n      return `<out of range>\\n${DebugLib.Debug.formatDumpBytes(rawData)}`;\n    }\n    return `<out of range>\\n${DebugLib.Debug.formatDumpBytes(rawData.toString('latin1'))}`;\n  },\n\n  getValue(sdtField) {\n    let value = null;\n    try {\n      value = sdtField.getValue();\n      return value;\n    } catch (e) {\n      if (e instanceof SDTUnsupportedValueError) {\n        if (e.getSubcode() === SDTValueErrorSubcode.VALUE_OUTSIDE_SUPPORTED_RANGE) {\n          return this.getOutOfRangeValue(e.getSourceData());\n        }\n      } else if (e instanceof OperationError && e.subcode === ErrorSubcode.PARAMETER_INVALID_TYPE) {\n        return '<invalid type>';\n      }\n      throw e;\n    }\n  },\n\n  printMap(sdtMap, indent) {\n    if (Check.nothing(sdtMap) || !(sdtMap instanceof SDTMapContainer)) {\n      return null;\n    }\n    const lines = [];\n    const strIndent = StringUtils.padRight('', indent, ' ');\n    const keys = sdtMap.getKeys().sort();\n    keys.forEach((key) => {\n      const sdtFieldValue = sdtMap.getField(key);\n      const type = sdtFieldValue.getType();\n      const value = this.getValue(sdtFieldValue);\n      let strValue;\n      switch (type) {\n        case SDTFieldType.MAP:\n          strValue = `\\n${this.printMap(value, indent + 2)}`;\n          break;\n        case SDTFieldType.STREAM:\n          strValue = `\\n${this.printStream(value, indent + 2)}`;\n          break;\n        case SDTFieldType.BYTEARRAY:\n          strValue = DebugLib.Debug.formatDumpBytes(value.toString('latin1'), false, 0);\n          if (strValue !== null && strValue.substr(-1) === '\\n') {\n            strValue = strValue.substring(0, strValue.length - 1);\n          }\n          break;\n        default:\n          strValue = (value !== null) ? value.toString() : null;\n      }\n      lines.push(`${strIndent}Key '${key}' (${SDTFieldType.nameOf(type)}): ${strValue}`);\n    });\n    return lines.join('\\n');\n  },\n\n  printStream(sdtStream, indent) {\n    if (Check.nothing(sdtStream) || !(sdtStream instanceof SDTStreamContainer)) {\n      return null;\n    }\n    sdtStream.rewind();\n    const lines = [];\n    const strIndent = StringUtils.padRight('', indent, ' ');\n    while (sdtStream.hasNext()) {\n      const sdtFieldValue = sdtStream.getNext();\n      const type = sdtFieldValue.getType();\n      const value = this.getValue(sdtFieldValue);\n\n      let strValue;\n      switch (type) {\n        case SDTFieldType.MAP:\n          strValue = `\\n${this.printMap(value, indent + 2)}`;\n          break;\n        case SDTFieldType.STREAM:\n          strValue = `\\n${this.printStream(value, indent + 2)}`;\n          break;\n        case SDTFieldType.BYTEARRAY:\n          strValue = DebugLib.Debug.formatDumpBytes(value.toString('latin1'), false, 0);\n          if (strValue !== null && strValue.substr(-1) === '\\n') {\n            strValue = strValue.substring(0, strValue.length - 1);\n          }\n          break;\n        case SDTFieldType.DESTINATION:\n          strValue = value.toString();\n          break;\n        default:\n          strValue = (value !== null) ? value.toString() : null;\n      }\n      lines.push(`${strIndent}(${SDTFieldType.nameOf(type)}): ${strValue}`);\n    }\n    sdtStream.rewind();\n    return lines.join('\\n');\n  },\n\n  countItems(sdtStream) {\n    if (Check.nothing(sdtStream) || (!(sdtStream instanceof SDTStreamContainer))) {\n      return 0;\n    }\n    sdtStream.rewind();\n    let count = 0;\n    while (sdtStream.hasNext()) {\n      sdtStream.getNext();\n      count++;\n    }\n    sdtStream.rewind();\n    return count;\n  },\n\n  formatDate(timeStamp) {\n    return new Date(timeStamp).toString();\n  },\n\n  dump(message, flags, separator, colPadding) {\n    const sb = new StringBuffer();\n    let theSeparator = '\\n';\n    let needSeparator = false;\n    let theColPadding = 40;\n    if (separator !== undefined && separator !== null && typeof separator === 'string') {\n      theSeparator = separator;\n    }\n    if (colPadding !== undefined && colPadding !== null && typeof colPadding === 'number') {\n      theColPadding = colPadding;\n    }\n\n    MessageDumpState.dumpProviders.forEach((provider, index) => {\n      const [key, isPresent, value, detailValue] = provider(message, flags);\n      if (!isPresent) {\n        return;\n      }\n      if (needSeparator) {\n        sb.append(theSeparator);\n      }\n\n      if (value === null || value.length === 0) {\n        // If we have no VALUE field, this is probably a boolean flag\n        // and we just end up displaying the key and a newline.\n        sb.append(key);\n      } else {\n        sb.append(StringUtils.padRight(`${key}:`, theColPadding, ' '));\n        sb.append(value);\n      }\n\n      if (detailValue !== null && (flags & MessageDumpFlag.MSGDUMP_FULL)) {\n        sb.append('\\n');\n        if (detailValue.indexOf('  ') !== 0) {\n          sb.append('  ');\n        }\n        sb.append(detailValue);\n        if (detailValue.substr(-1) !== '\\n' && index < (MessageDumpState.dumpProviders.length - 1)) {\n          sb.append('\\n');\n        }\n      }\n      needSeparator = true;\n    });\n    return sb.toString();\n  },\n};\n\nmodule.exports.MessageDumpUtil = MessageDumpUtil;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message payload types\n * (see {@link solace.Message#getBinaryAttachment})\n *\n * A message may contain unstructured byte data, or a structured container.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageType = {\n  /**\n   * Binary message (unstructured bytes stored in the binary attachment message part).\n   * @type {Number}\n   */\n  BINARY: 0,\n  /**\n   * Structured map message.\n   * @type {Number}\n   */\n  MAP:    1,\n  /**\n   * Structured stream message.\n   * @type {Number}\n   */\n  STREAM: 2,\n  /**\n   * Structured text message.\n   * @type {Number}\n   */\n  TEXT:   3,\n};\n\nmodule.exports.MessageType = Enum.new(MessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of user Class of Service (COS) levels. The COS is set\n * on a Message with {@link solace.Message#setUserCos}\n * The Class of Service has different semantics for direct and guaranteed messages.\n *\n * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n * class of service selects the weighted round-robin delivery queue when the\n * message is forwarded to a consumer.  {@link solace.MessageUserCosType.COS1} are the\n * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n *\n * For messages published as guaranteed messages\n * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n * {@link solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n * with {@link solace.MessageUserCosType.COS1} can be rejected by the Solace Message Router if\n * that message would cause any queue or topic-endpoint to exceed its configured\n * low-priority-max-msg-count.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageUserCosType = {\n  /**\n   * Direct Messages: Lowest priority, use Solace Message Router client D-1 queues for delivery.\n   *\n   * Guaranteed Messages: Messages can be rejected if the message would cause any\n   * queue or topic-endpoint to exceed its configured <i>low-priority-max-msg-count</i>.\n   * @type {Number}\n   */\n  COS1: 0,\n  /**\n   * Direct Messages: Medium priority, use Solace Message Router client D-2 queues for delivery.\n   *\n   * Guaranteed Messages: N/A (same as COS3)\n   * @type {Number}\n   */\n  COS2: 1,\n  /**\n   * Direct Messages: Highest priority, use Solace Message Router client D-3 queues for delivery.\n   *\n   * Guaranteed Messages: Messages are not rejected for exceeding <i>low-priority-max-msg-count</i>.\n   * Messages may still be rejected for other reasons such as Queue 'Spool Over Quota'.\n   * @type {Number}\n   */\n  COS3: 2,\n};\n\nmodule.exports.MessageUserCosType = Enum.new(MessageUserCosType);\n","const clone = require('clone');\nconst SolclientFactoryLib = require('solclient-factory');\nconst { Codec: SDTCodec } = require('solclient-sdt');\nconst { Convert } = require('solclient-convert');\nconst { Destination } = require('solclient-destination');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_DEBUG } = require('solclient-log');\nconst { MessageCacheStatus } = require('./message-cache-status');\nconst { MessageDeliveryModeType } = require('./message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { MessageDumpUtil } = require('./message-dump-util');\nconst { MessageType } = require('./message-types');\nconst { MessageUserCosType } = require('./message-user-cos-types');\nconst { Parameter } = require('solclient-validate');\nconst { RgmidFactory } = require('./replication-group-message-id');\nconst { SDTField, SDTFieldType, SDTMapContainer, SDTUnsupportedValueError } = require('solclient-sdt');\n\nconst { ProfileBinding } = SolclientFactoryLib;\n\nconst {\n  utf8ToUcs2,\n  anythingToBuffer,\n} = Convert;\nconst {\n  isBoolean,\n  isEnumMember,\n  isInstanceOf,\n  isInstanceOfOrNothing,\n  isNumberOrNothing,\n  isStringOrNothing,\n} = Parameter;\n\n// When a message is cloned for sending,\n// * We assume that it may NOT include circular references.\n//   These are also unsupported in the encoder.\n// * We assume that all properties to be cloned are enumerable.\n//   This has significant (~10% AD send rate) performance impact.\n\nconst MESSAGE_CLONE_OPTIONS = { circular: false, includeNonEnumerable: false };\n\n/**\n * Function called on construct/reset. Sets the initial values for fields that have them.\n * @param {Message} message The message to initialize\n * @internal\n */\nfunction initMessage(message) {\n  message._deliveryMode = MessageDeliveryModeType.DIRECT;\n  message._userCos = MessageUserCosType.COS1;\n  message._cacheStatus = MessageCacheStatus.LIVE;\n  message._spoolerUniqueId = undefined;\n  /* message._spoolerMessageId does not to be set to undefined\n   * message._spoolerMessageId should only be set when\n   * message._spoolerUniqueId is set to a value\n   * other than undefined or RgmidFactory.INVALID_SUID\n   */\n  message._priority = undefined;\n  message._deliveryCount = -1; //Makes the accessor throw, never returned to user.\n}\n\n/**\n * Function called on reset only. Clears every field in the message. Call #initMessage\n * to set initial values.\n * @param {Message} message The message to clear\n * @internal\n */\nfunction clearMessage(message) {\n  const fields = Object.keys(message);\n  fields.forEach(f => delete message[f]);\n}\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.SolclientFactory.createMessage}</b>\n * <p>\n * A message is a container that can be used to store and send messages to and from the\n * Solace Message Router.\n *\n * Applications manage the lifecycle of a message; a message is created by calling\n * {@link solace.SolclientFactory.createMessage} and is freed by dereferencing it.\n *\n * API operations that cache or mutate messages always take a copy. A message may\n * be created, mutated by the API user, and sent multiple times.\n *\n * The Message Object provides methods to manipulate the common Solace\n * message header fields that are optionally sent in the binary metadata\n * portion of the Solace message.\n *\n * Applications can also use the structured data API {@link solace.Message#setSdtContainer}\n * to add containers (maps or streams) and their fields to the binary payload or\n * to the User Property map contained within the binary metadata.\n *\n * This does not prevent applications from ignoring these\n * methods and sending payload in the binary payload as an opaque binary field for\n * end-to-end communications\n *\n * @memberof solace\n */\nclass Message {\n\n  /**\n   * @constructor\n   * @hideconstructor\n   **/\n  constructor() {\n    initMessage(this);\n  }\n\n  /**\n   * Gets the payload type ({@link solace.MessageType}) of the message. A message has a\n   * structured payload if one was attached via {@link solace.Message#setSdtContainer} otherwise\n   * if the payload is attached via {@link Message@setBinaryAttachment} then it\n   * is unstructured ({@link solace.MessageType#BINARY})\n   *\n   * @returns {solace.MessageType} The structured payload type.\n   * @default {solace.MessageType.BINARY}\n   */\n  getType() {\n    return this._messageType || MessageType.BINARY; // This is OK; BINARY === 0.\n  }\n\n  /**\n   * Sets the application-provided message ID.\n   * @param {?String} value The new value for the application-provided message ID.\n   */\n  setApplicationMessageId(value) {\n    this._applicationMessageId = isStringOrNothing('applicationMessageId', value);\n  }\n\n  /**\n   * Gets the application-provided message ID.\n   * @returns {?String} The application provided message ID.\n   */\n  getApplicationMessageId() {\n    return this._applicationMessageId;\n  }\n\n  /**\n   * Sets the application message type. This value is used by applications\n   * only, and is passed through the API and Solace Message Router untouched.\n   * @param {?String} value The application message type.\n   */\n  setApplicationMessageType(value) {\n    this._applicationMessageType = isStringOrNothing('applicationMessageType', value);\n  }\n\n  /**\n   * Gets the application message type. This value is used by applications\n   * only, and is passed through the API and Solace Message Router untouched.\n   * @returns {?String} The application message type.\n   */\n  getApplicationMessageType() {\n    return this._applicationMessageType;\n  }\n\n  /**\n   * Gets the binary attachment part of the message.\n   *\n   * Backward compatibility note: Using the version10 factory profile or older,\n   * the binary attachment is returned as a 'latin1' String:\n   * Each character has a code in the range * 0-255\n   * representing the value of a single received byte at that position.\n   *\n   * @returns {?Uint8Array} A TypedArray view of the binary attachment.\n   */\n  getBinaryAttachment() {\n    if (this._binaryAttachment && ProfileBinding.value.byteArrayAsString) {\n      return this._binaryAttachment.toString('latin1');\n    }\n    return this._binaryAttachment;\n  }\n\n  /**\n   * Sets the binary attachment part of the message.\n   *\n   * The binary attachment is conceptually an array of bytes.\n   * When this method is used, the message payload type is {@link solace.MessageType#BINARY}\n   * See {@link solace.Message#getType}.\n   *\n   * Applications may set the binary attachment to NULL or undefined to\n   * remove the binary attachment and create a message with no payload.\n   *\n   * The following types are accepted:\n   *   Buffer (the nodeJS native type or equivalent)\n   *   ArrayBuffer,\n   *   Any DataView or TypedArray,\n   *   'latin1' String for backwards compatibility:\n   *     each character has a code in the range 0-255\n   *     representing exactly one byte in the attachment.\n   *\n   * @param {?Uint8Array} value Sets the binary attachment part of the message.\n   */\n  setBinaryAttachment(value) {\n    if (value) {\n      this._messageType = MessageType.BINARY;\n    }\n    this._setBinaryAttachment(anythingToBuffer(value));\n  }\n  _setBinaryAttachment(value) {\n    this._binaryAttachment = value;\n  }\n\n  /**\n   * Given a Message containing a cached message, return the cache Request Id that\n   * the application set in the call to {@link solace.CacheSession#sendCacheRequest}.\n   *\n   * @returns {?Number} The request ID of the cache request associated with this message.\n   */\n  getCacheRequestId() {\n    return this._cacheRequestId;\n  }\n\n  /**\n   * @private\n   * @param {Number} cacheRequestID The cache request ID associated with this message\n   */\n  _setCacheRequestID(cacheRequestID) {\n    this._cacheRequestId = cacheRequestID;\n  }\n\n  /**\n   * Gets the correlation ID.  The message Correlation Id\n   * is carried in the Solace message headers unmodified by the API and\n   * the Solace Message Router. This field may be used for peer-to-peer\n   * message synchronization and is commonly used for correlating\n   * a request to a reply. See {@link solace.Session#sendRequest}.\n   * @returns {?String} The correlation ID associated with the message.\n   */\n  getCorrelationId() {\n    return this._correlationId;\n  }\n\n  /**\n   * Sets the correlation ID. The message Correlation Id\n   * is carried in the Solace message headers unmodified by the API and\n   * the Solace Message Router. This field may be used for peer-to-peer\n   * message synchronization and is commonly used for correlating\n   * a request to a reply. See {@link solace.Session#sendRequest}.\n   * @param {?String} value The correlation ID to associate with the message.\n   */\n  setCorrelationId(value) {\n    this._correlationId = isStringOrNothing('correlationId', value);\n  }\n\n  /**\n   * Gets the correlation Key. A correlation key is used to correlate\n   * a message with its acknowledgement or rejection. The correlation key is an object that is\n   * passed back to the client during the router acknowledgement or rejection.\n   *\n   * The correlation key is a local reference\n   * used by applications generating Guaranteed messages. Messages that are\n   * sent in either {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT} mode may set the correlation key.\n   * @returns {?Object} The correlation Key associated with the message,\n   * or <code>null</code>, if unset.\n   */\n  getCorrelationKey() {\n    return this._correlationKey || null;\n  }\n\n  /**\n   * Sets the correlation Key. A correlation key is used to correlate\n   * a message with its acknowledgement or rejection. The correlation key is an object that is\n   * passed back to the client during the router acknowledgement or rejection.\n   *\n   * The correlation key is a local reference\n   * used by applications generating Guaranteed Messages. Messages that are\n   * sent in either {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT} mode may set the correlation key. If this\n   * method is used, the correlation information is returned\n   * when the {@link solace.SessionEventCode#event:ACKNOWLEDGED_MESSAGE} event\n   * is later received for an acknowledged message or when the\n   * {@link solace.SessionEventCode#event:REJECTED_MESSAGE_ERROR} is received for a rejected\n   * message.\n   *\n   * The API only maintains a reference to the passed object.  If the application requires the\n   * contents are unmodified for proper correlation, then it is the application's responsibility\n   * to ensure the contents of the object are not modified.\n   *\n   * Important: <b>The Correlation Key is not included in the\n   * transmitted message and is only used with the local API</b>\n   * @param {Object} value The correlation Key to associate with the message.\n   */\n  setCorrelationKey(value) {\n    this._correlationKey = value;\n  }\n\n  /**\n   * Gets whether the message is configured for delivering to one client only.\n   * @returns {Boolean} indicates whether the message is configured for\n   * delivering to one client only.\n   * @deprecated use Shared Subscriptions instead.\n   */\n  isDeliverToOne() {\n    return this._deliverToOne || false;\n  }\n\n  /**\n   * Sets whether the message is configured for delivering to one client only.\n   * @param {Boolean} value whether the message is configured for delivering to one client only.\n   * @deprecated use Shared Subscriptions instead.\n   */\n  setDeliverToOne(value) {\n    this._setDeliverToOne(this._deliverToOne = isBoolean('deliverToOne', value));\n  }\n  _setDeliverToOne(value) {\n    this._deliverToOne = value;\n  }\n\n  /**\n   * Gets the delivery mode of the message.\n   * @returns {solace.MessageDeliveryModeType} representing the delivery mode of the message.\n   */\n  getDeliveryMode() {\n    return this._deliveryMode;\n  }\n\n  /**\n   * Sets the delivery mode of the message.\n   * @param {solace.MessageDeliveryModeType} value The message delivery mode.\n   */\n  setDeliveryMode(value) {\n    this._setDeliveryMode(isEnumMember('deliveryMode', value, MessageDeliveryModeType));\n  }\n  _setDeliveryMode(value) {\n    this._deliveryMode = value;\n  }\n\n  /**\n   * Gets the destination to which the message was published.\n   * @returns {?Destination} The destination to which a message was published.\n   */\n  getDestination() {\n    return this._destination;\n  }\n\n  /**\n   * Sets the destination ({@link solace.DestinationType#Topic} or\n   * {@link solace.DestinationType#Queue}) to publish the message to.\n   * @param {Destination} value The destination to publish the message to.\n   */\n  setDestination(value) {\n    this._setDestination(isInstanceOf('destination', value, Destination));\n  }\n  _setDestination(value) {\n    this._destination = value;\n  }\n\n  /**\n   * Indicates whether one or more messages have been discarded prior\n   * to the current message. This indicates congestion discards only and\n   * is not affected by message eliding.\n   * @returns {Boolean} Returns true if one or more messages have been\n   * discarded prior to the current message; otherwise, it returns false.\n   */\n  isDiscardIndication() {\n    return this._discardIndication || false;\n  }\n\n  /**\n   * @private\n   * @param {Boolean} value The new value for discard indication\n   */\n  setDiscardIndication(value) {\n    this._setDiscardIndication(isBoolean('discardIndication', value));\n  }\n  _setDiscardIndication(value) {\n    this._discardIndication = value;\n  }\n\n  /**\n   * Returns whether the message is eligible for eliding.\n   * <p>\n   * Message eliding enables filtering of data to avoid transmitting\n   * every single update to a subscribing client.\n   * <p>\n   * This property does not indicate whether the message was elided.\n   *\n   * @returns {Boolean} indicates whether the message is eligible for eliding.\n   */\n  isElidingEligible() {\n    return this._elidingEligible || false;\n  }\n\n  /**\n   * Sets whether the message is eligible for eliding.\n   * <p>\n   * Message eliding enables filtering of data to avoid transmitting\n   * every single update to a subscribing client.\n   * <p>\n   * This property does not indicate whether the message was elided.\n   *\n   * @param {Boolean} value sets whether the message is eligible for eliding.\n   */\n  setElidingEligible(value) {\n    this._setElidingEligible(isBoolean('setElidingEligible', value));\n  }\n  _setElidingEligible(value) {\n    this._elidingEligible = value;\n  }\n\n  /// ---------------------------------------------------------\n  // * Internal use only methods on the message, for fields set by the internal\n  // * publisher\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {Number} The publisher ID\n   * @private\n   */\n  getPublisherId() {\n    return this._publisherId;\n  }\n  /**\n   * @param {Number} value  The publisher ID to set\n   * @private\n   */\n  setPublisherId(value) {\n    this._publisherId = value;\n  }\n\n  /**\n   * @returns {Number} The publisher message ID\n   * @private\n   */\n  getPublisherMessageId() {\n    return this._publisherMsgId;\n  }\n  /**\n   * @param {Number} value The publisher message ID to set\n   * @private\n   */\n  setPublisherMessageId(value) {\n    this._publisherMsgId = value;\n  }\n\n  /// -------------------------------------------------------------\n  // * User-settable properties for publishing\n  /// -------------------------------------------------------------\n\n  /**\n   * @returns {Number} The Guaranteed Message TTL, in milliseconds.\n   */\n  getTimeToLive() {\n    return this._timeToLive;\n  }\n  /**\n   * @param {Number} value The Guaranteed Message TTL to set, in milliseconds.\n   *\n   * The time to live is the number of milliseconds the message may be stored on the\n   * Solace Message Router before the message is discarded or moved to a Dead Message\n   * Queue. See {@link solace.Message.setDMQEligible}.\n   *\n   * Setting the Time To Live to zero disables TTL for the message.\n   *\n   * This property is only valid for Guaranteed messages (Persistent and Non-Persistent).\n   * It has no effect when used in conjunction with other message types unless the message\n   * is promoted by the appliance to a Guaranteed message.\n   *\n   * The maxium allowed time to live is 3.1536E11 (315360000000) which is\n   * approximately 10 years.\n   */\n  setTimeToLive(value) {\n    const MAX_MESSAGE_TTL_MS = (10 * 365 * 24 * 60 * 60 * 1000); // approximately 10 years\n\n    // Allow parser and initializer to set timeToLive to undefined\n    if (value === null || value === undefined) {\n      this._timeToLive = value;\n      return;\n    }\n    if (typeof value !== 'number' || isNaN(value)) {\n      throw new OperationError('Invalid type for time to live',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (value < 0 || value > MAX_MESSAGE_TTL_MS) {\n      throw new OperationError('Invalid time to live value',\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._timeToLive = value;\n  }\n\n  /**\n   * @returns {?Number} The Guaranteed Message expiration value.\n   * The expiration time is the UTC time\n   * (that is, the number of milliseconds from midnight January 1, 1970 UTC) when the\n   * message is to expire.\n   */\n  getGMExpiration() {\n    return this._expiration;\n  }\n  /**\n   * Set the expiration time field. The expiration time is the UTC time\n   * (that is, the number of milliseconds from midnight January 1, 1970 UTC) when the\n   * message is to expire. The expiration time is carried in the message when set to\n   * a non-zero value. Expiration time is not included when this value is set to zero or\n   * undefined\n   *\n   * The message expiration time is carried to clients that receive the message\n   * unmodified and does not effect the life cycle of the message. Use\n   * {@link solace.Message#setTimeToLive} to enforce message expiry in the network.\n   *\n   * @param {?Number} value The new Guaranteed Message expiration value\n   */\n  setGMExpiration(value) {\n    this._expiration = isNumberOrNothing('GMExpiration', value);\n  }\n\n  /**\n   * @returns {Boolean} Whether this message is Guaranteed Message DMQ eligible\n   */\n  isDMQEligible() {\n    return this._dmqEligible || false;\n  }\n  /**\n   * @param {Boolean} value The new value for Guaranteed Message DMQ (Dead Message Queue) Eligible.\n   * When this property is set, when the message expires in the network\n   * the message is saved on a appliance dead message queue. Otherwise the expired message is\n   * discarded. See {@link solace.Message#setTimeToLive}.\n   * @default false\n   */\n  setDMQEligible(value) {\n    this._setDMQEligible(isBoolean('DMQEligible', value));\n  }\n  _setDMQEligible(value) {\n    this._dmqEligible = value;\n  }\n\n  /// ---------------------------------------------------------\n  // * Internal use only methods on the message, for fields set by the consumer flow\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {Long} The ID of the flow that received this message\n   * @private\n   */\n  getFlowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The flow ID that received this message\n   * @private\n   */\n  setFlowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * @returns {Long} The Guaranteed Message prevMsgId\n   * @private\n   */\n  getGuaranteedPreviousMessageId() {\n    return this._guaranteedPrevMsgId;\n  }\n  /**\n   * @param {Long} value The Guaranteed Message prevMsgId to set\n   * @private\n   */\n  setGuaranteedPreviousMessageId(value) {\n    this._guaranteedPrevMsgId = value;\n  }\n\n  /**\n   * @param {Long} value Spooler unique id value\n   * @private\n   */\n  _setSpoolerUniqueId(value) {\n    this._spoolerUniqueId = value;\n  }\n\n  /**\n   * @returns {?Long} value of Spooler unique id\n   * @private\n   */\n  _getSpoolerUniqueId() {\n    // This can be set via the smf header or by the message consumer\n    // using _setSpoolerUniqueId.\n    // The message consumer check if a data message has a suid set\n    // the updates the consumer stored value for suid from the message value.\n    // If the message does not have a suid the message consumer sets the suid\n    // of the message using _setSpoolerUniqueId.\n    // See consumer-fsm.acceptMessage for details.\n    if (this._spoolerUniqueId === undefined) {\n      return RgmidFactory.INVALID_SUID;\n    }\n    return this._spoolerUniqueId;\n  }\n\n  /// ---------------------------------------------------------\n  // * Properties set by the Message Consumer\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {?solace.MessageConsumer} The associated Message Consumer, if received by a consumer\n   */\n  getMessageConsumer() {\n    return this._consumer;\n  }\n  /**\n   * @param {solace.MessageConsumer} value The Message Consumer to associate with this message\n   * @private\n   */\n  setMessageConsumer(value) {\n    this._consumer = value;\n  }\n\n  /**\n   * This message ID is NOT a universal unique identifier for the message.\n   * There is no use for this message ID in an application.\n   * Internally this message ID is used when a message is acknowledged\n   * calling Message.acknowledge().\n   * No other meaning should be inferred from the value of this message ID.\n   * @returns {?Long} A field in the message structure intended for internal use.\n   * @deprecated There is no useful purpose for this method. Do not use it.\n   */\n  getGuaranteedMessageId() {\n    return this._guaranteedMsgId;\n  }\n  /**\n   * @param {Long} value The Guaranteed Message msgId to set\n   * @private\n   */\n  setGuaranteedMessageId(value) {\n    this._guaranteedMsgId = value;\n  }\n\n  /**\n   * @param {Long} value Spooler message id value, this can be the mateAckId or the AckId\n   * @private\n   */\n  _setSpoolerMessageId(value) {\n    this._spoolerMessageId = value;\n  }\n\n  /**\n   * Returns the Replication Group Message Id\n   * @returns {?solace.ReplicationGroupMessageId} The replication group message id\n   *  assigned by the router.\n   */\n  getReplicationGroupMessageId() {\n    if (this._spoolerUniqueId === undefined\n       || RgmidFactory.INVALID_SUID.eq(this._spoolerUniqueId)) {\n      return undefined;\n    }\n    /* use this._spoolerMessageId if possible otherwise use this._guaranteedMsgId */\n    const smid = this._spoolerMessageId || this._guaranteedMsgId;\n    /* Note smid as this._guaranteedMsgId must have a value\n     * if this._spoolerUniqueId is not RgmidFactory.INVALID_SUID */\n    return RgmidFactory.from({ suid: this._spoolerUniqueId, msgid: smid });\n  }\n\n  /**\n   * Returns the Topic Sequence Number.  If there is no topic sequence number\n   * undefined is returned.\n   * @returns {?Long} The Topic Sequence number assigned to this message by the Message Router.\n   */\n  getTopicSequenceNumber() {\n    return this._topicSequenceNumber;\n  }\n\n  /**\n   * @param {Long} topicSeqNo The Topic Sequence Number to set\n   * @private\n   */\n  setTopicSequenceNumber(topicSeqNo) {\n    this._topicSequenceNumber = topicSeqNo;\n  }\n\n  /**\n   * Returns the delivery count.\n   * @returns {?Number} The delivery count reported by the broker.\n   */\n\n  getDeliveryCount() {\n    if (this._deliveryCount === -1) {\n      throw new OperationError('Endpoint does not report delivery count.',\n        ErrorSubcode.INVALID_OPERATION);\n    } // else\n    return this._deliveryCount;\n  }\n\n  /**\n   * @param {Number} deliveryCount on this message.\n   * @private\n   */\n  setDeliveryCount(deliveryCount) {\n    this._deliveryCount = deliveryCount;\n  }\n\n  /**\n   * Acknowledges this message.\n   *\n   * If the {@link solace.MessageConsumer} on which this message was received is configured to use\n   * {@link solace.MessageConsumerAckMode.CLIENT}, then when a message is received by an\n   * application, the application must call this method to explicitly acknowledge reception of the\n   * message. This frees local and router resources associated with an unacknowledged message.\n   *\n   * The API does not send acknowledgments immediately. It stores the state for\n   * acknowledged messages internally and acknowledges messages, in bulk, when a\n   * threshold or timer is reached.\n   *\n   * @throws {@link solace.OperationError}\n   *  * if this message was not received via Guaranteed Message;\n   *    subcode: {@link solace.ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH}\n   *  * if the associated {@link solace.Session} is not connected;\n   *    subcode: {@link solace.ErrorSubcode.SESSION_NOT_CONNECTED}\n   *  * if the associated {@link solace.MessageConsumer} is not connectedl\n   *    subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  acknowledge() {\n    if (this._consumer.getProperties().browser) {\n      throw new OperationError('Messages delivered to a Queue Browser can only be deleted by calling QueueBrowser.removeMessageFromQueue()',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    if (this._acked) {\n      throw new OperationError('Message can only be acknowledged once',\n        ErrorSubcode.MESSAGE_ALREADY_ACKNOWLEDGED);\n    }\n    if (this._deliveryMode === MessageDeliveryModeType.DIRECT) {\n      throw new OperationError('Cannot acknowledge a DIRECT message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer) {\n      throw new OperationError('Cannot acknowledge a locally-created message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer._sessionInterface.canAck) {\n      throw new OperationError('Cannot acknowledge using associated session',\n        ErrorSubcode.SESSION_NOT_CONNECTED);\n    }\n    if (!this._consumer.canAck) {\n      throw new OperationError('Cannot acknowledge using associated Message Consumer',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    this._consumer.applicationAck(this._guaranteedMsgId);\n    this._acked = true;\n  }\n\n  /**\n   * Returns whether acknowledge() has been called on this message.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n  get isAcknowledged() {\n    return this._acked || false;\n  }\n\n  /**\n   * Test if the Acknowledge Immediately message property is set or not.\n   * When the Acknowledge Immediately property is set to true on an outgoing\n   * Guaranteed Message,\n   * it indicates that the Solace Message Router should Acknowledge this message\n   * immediately upon receipt.\n   *\n   * This property, when set by a publisher, may or may not be removed by the\n   * Solace Message Router prior to delivery to a consumer, so message consumers\n   * must not expect the property value indicates how the message was\n   * originally published\n   * @returns {Boolean} Whether this message was set to acknowledge immediately.\n   */\n  isAcknowledgeImmediately() {\n    return this._ackImmediately || false;\n  }\n  /**\n   * Set the optional Acknoweledge Immediately message property.\n   * When the Acknowledge Immediately property is set to true on an outgoing Guaranteed Message,\n   * it indicates that the Solace Message Router should acknoweledge this message\n   * immediately upon receipt. By default the property is set to false on newly created messages.\n   *\n   * This property, when set by a publisher, may or may not be removed by the appliance\n   * prior to delivery to a consumer, so message consumers must not expect the property value\n   * indicates how the message was originally published. Therefore if a received message\n   * is forwarded by the application, the Acknowledge Immediately property should be\n   * explicitly set to the desired value (true or false).\n   *\n   * Setting this property on an outgoing direct message has no effect.\n   *\n   * @param {Boolean} value Whether to acknowledge this message immediately.\n   */\n  setAcknowledgeImmediately(value) {\n    this._setAcknowledgeImmediately(isBoolean('acknowledgeImmediately', value));\n  }\n  _setAcknowledgeImmediately(value) {\n    this._ackImmediately = value;\n  }\n\n  /**\n   * Gets the cache status of this message.\n   *\n   * @returns {?solace.MessageCacheStatus} The cache status of this message. The status\n   * will be MessageCacheStatus.LIVE unless the message was returned in a\n   * reply to a cache request.\n   */\n  getCacheStatus() {\n    return this._cacheStatus;\n  }\n\n  /**\n   * @param {solace.MessageCacheStatus} cacheStatus The new cache status for this message\n   * @private\n   */\n  _setCacheStatus(cacheStatus) {\n    this._cacheStatus = cacheStatus;\n  }\n\n  /**\n   * Returns whether the message's reply field is set, indicating\n   * that this message is a reply to a previous request. See {@link solace.Session#sendRequest}.\n   * @returns {Boolean} Indicates the state of the reply field.\n   */\n  isReplyMessage() {\n    return this._replyMessage || false;\n  }\n\n  /**\n   * Indicates whether the message has been marked as redelivered by the Solace Message Router.\n   * @returns {Boolean} Indicates whether the redelivered flag is set.\n   */\n  isRedelivered() {\n    return this._redelivered || false;\n  }\n  /**\n   * @param {Boolean} value The redelivered flag\n   * @private\n   */\n  setRedelivered(value) {\n    this._redelivered = value;\n  }\n\n  /**\n   * Sets the <i>reply</i> field of the message.\n   * @param {Boolean} value Sets whether to flag the message as a reply.\n   */\n  setAsReplyMessage(value) {\n    this._replyMessage = isBoolean('asReplyMessage', value);\n  }\n\n  /**\n   * Gets the receive timestamp (in milliseconds, from midnight, January 1, 1970 UTC).\n   * @returns {?Number} The receive timestamp, if set.\n   */\n  getReceiverTimestamp() {\n    return this._receiverTimestamp;\n  }\n\n  /**\n   * Gets the replyTo destination\n   * @returns {?solace.Destination} The value of the replyTo destination, if set.\n   */\n  getReplyTo() {\n    return this._replyTo;\n  }\n\n  /**\n   * Sets the replyTo destination\n   * @param {solace.Destination} value The replyTo destination.\n   */\n  setReplyTo(value) {\n    this._replyTo = isInstanceOfOrNothing('replyTo', value, Destination);\n  }\n\n  /**\n   * Returns the Sender's ID.\n   * @returns {?String} The Sender's ID, if set.\n   */\n  getSenderId() {\n    return this._senderId;\n  }\n\n  /**\n   * Sets the Sender ID for the message\n   * @param {String} value The Sender ID for the message.\n   */\n  setSenderId(value) {\n    this._senderId = isStringOrNothing('senderId', value);\n  }\n\n  /**\n   * Gets the send timestamp (in milliseconds, from midnight, January 1,\n   * 1970 UTC).\n   * @returns {?Number} The send timestamp, if set.\n   */\n  getSenderTimestamp() {\n    return this._senderTimestamp;\n  }\n\n  /**\n   * Sets the send timestamp (in milliseconds, from midnight, January 1,\n   * 1970 UTC). This field can be generated automatically during message\n   * publishing, but it will not be generated if previously set to a non-null value by this method.\n   * See {@link solace.SessionProperties#generateSendTimestamps}.\n   *\n   * An application that publishes the same {@link solace.Messsage} multiple times and\n   * also wants generted timestamps on each messages, should set the sender timestamp\n   * to undefined after each call to {@link solace.Session#send}.\n   * @param {?Number} value The value to set as the send timestamp.\n   */\n  setSenderTimestamp(value) {\n    this._senderTimestamp = isNumberOrNothing('senderTimestamp', value);\n  }\n\n  /**\n   * Gets the sequence number.\n   * <p>\n   * This is an application-defined field,\n   * see <code>{@link solace.Message#setSequenceNumber}()</code>.\n   * @returns {?Number} The sequence number, if set\n   * @throws {@link solace.SDTUnsupportedValueError} in case the sequence number is out of range.\n   */\n  getSequenceNumber() {\n    if (this._sequenceNumberError) {\n      throw this._sequenceNumberError;\n    }\n    return this._sequenceNumber;\n  }\n\n  /**\n   * Sets the application-defined sequence number. If the sequence number\n   * is not set, or set to undefined, and {@link solace.SessionProperties#generateSequenceNumber}\n   * is true, then a sequence number is automatically generated for each sent message.\n   * @param {?Number} value The sequence number.\n   */\n  setSequenceNumber(value) {\n    if (value instanceof SDTUnsupportedValueError) {\n      this._sequenceNumberError = value;\n    } else {\n      this._sequenceNumber = isNumberOrNothing('sequenceNumber', value);\n      this._sequenceNumberError = undefined;\n      //TODO: this is probably wrong. Shouldn't it be cleared if value === undefined?\n      this._autoSequenceNumber = false;\n    }\n  }\n\n  /**\n   * Gets the Class of Service (CoS) value for the message.\n   * The Class of Service has different semantics for direct and guaranteed messages.\n   *\n   * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * class of service selects the weighted round-robin delivery queue when the\n   * message is forwarded to a consumer.  {@link solace.MessageUserCosType.COS1} are the\n   * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n   *\n   * For messages published as guaranteed messages\n   * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n   * with {@link solace.MessageUserCosType.COS1} can be rejected by the Solace Message Router if\n   * that message would cause any queue or topic-endpoint to exceed its configured\n   * low-priority-max-msg-count.\n   *\n   * @returns {solace.MessageUserCosType} The COS value.\n   */\n  getUserCos() {\n    return this._userCos;\n  }\n\n  /**\n   * Gets the Message Priority Parameter (JMS Priority) value for the message.\n   * Numerical values between 0 and 255 are valid return values,\n   * undefined means the parameter is not present.\n   *\n   * If destination queues and topic endpoints for this message\n   * are configured to respect message priority,\n   * the values 0 through 9 can be used to affect the priority\n   * of delivery to consumers of those queues or topic endpoints.\n   * For the purposes of prioritized message delivery,\n   * values larger than 9 are treated the same as 9.\n   *\n   * @returns {?Number} The Message Priority Parameter value.\n   */\n  getPriority() {\n    return this._priority;\n  }\n\n  /**\n   * Sets the Class of Service (CoS) value for the message.\n   *\n   * The Class of Service has different semantics for direct and guaranteed messages.\n   *\n   * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * class of service selects the weighted round-robin delivery queue when the\n   * message is forwarded to a consumer.  {@link solace.MessageUserCosType#COS1} are the\n   * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n   *\n   * For messages published as guaranteed messages\n   * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n   * with {@link solace.MessageUserCosType#COS1} can be rejected by the Solace Message Router if\n   * that message would cause any queue or topic-endpoint to exceed its configured\n   * low-priority-max-msg-count.\n   *\n   * @param {solace.MessageUserCosType} value The COS value.\n   * @default {solace.MessageUserCosType#COS1}\n   */\n  setUserCos(value) {\n    this._setUserCos(isEnumMember('userCos', value, MessageUserCosType));\n  }\n  _setUserCos(value) {\n    this._userCos = value;\n  }\n\n  /**\n   * Sets the Message Priority Parameter (JMS Priority) value for the message.\n   * Numerical values between 0 and 255 are accepted,\n   * use undefined to unset.\n   *\n   * If destination queues and topic endpoints for this message\n   * are configured to respect message priority,\n   * the values 0 through 9 can be used to affect the priority\n   * of delivery to consumers of those queues or topic endpoints.\n   * For the purposes of prioritized message delivery, values larger than 9\n   * are treated the same as 9.\n   *\n   * @param {?Number} value The priority value.\n   */\n  setPriority(value) {\n    if (value === undefined || value === null) {\n      this._setPriority(undefined);\n      return;\n    }\n    if (typeof value !== 'number' || isNaN(value)) {\n      throw new OperationError('Invalid type for message priority',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (value < 0 || value > 255) {\n      throw new OperationError('Invalid priority value',\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._setPriority(value);\n  }\n\n  _setPriority(value) {\n    this._priority = value;\n  }\n\n  /**\n   * Gets the user data part of the message.\n   * @returns {String} The user data part of the message, if set.\n   */\n  getUserData() {\n    return this._userData;\n  }\n\n  /**\n   * Sets the user data part of the message.\n   * @param {String} value The user data part of the message.\n   */\n  setUserData(value) {\n    this._setUserData(isStringOrNothing('userData', value));\n  }\n  _setUserData(value) {\n    this._userData = value;\n  }\n\n  /**\n   * Gets the XML content part of the message.\n   * Notice that the content is encoded as UTF-8 characters,\n   * it needs to be decoded as JavaScript surrogate pair: decodeURIComponent(escape(value))\n   * @returns {?String} The XML content part of the message, if set.\n   */\n  getXmlContent() {\n    return this._xmlContent;\n  }\n\n  /**\n   * Gets the XML content part of the message decoded from UTF-8 encoding of the characters.\n   * @returns {?String} The XML content part of the message. Returns <code>null</code> if not\n   * present.\n   */\n  getXmlContentDecoded() {\n    return this._xmlContent ? utf8ToUcs2(this._xmlContent) : this._xmlContent;\n  }\n\n  /**\n   * Sets the XML content part of the message.\n   * The content is encoded by replacing each instance of certain characters\n   * by one, two, three, or four escape sequences representing the\n   * UTF-8 encoding of the character.\n   * @param {String} value The XML content part of the message.\n   */\n  setXmlContent(value) {\n    const setValue = isStringOrNothing('xmlContent', value);\n    this._xmlContent = setValue ? unescape(encodeURIComponent(setValue)) : setValue;\n  }\n\n  /**\n   * Internal set for the XML content part of the message.\n   * @param {String} value The XML content part of the message.\n   * @private\n   */\n  _setXmlContentInternal(value) {\n    this._xmlContent = isStringOrNothing('xmlContentInternal', value);\n  }\n\n  /**\n   * Sets the message's XML metadata section.\n   * @param {String} value The XML metadata.\n   */\n  setXmlMetadata(value) {\n    this._setXmlMetadata(isStringOrNothing('xmlMetadata', value));\n  }\n  _setXmlMetadata(value) {\n    this._xmlMetadata = value;\n  }\n\n  /**\n   * Gets the message's XML metadata section.\n   * @returns {?String} The XML metadata, if set.\n   */\n  getXmlMetadata() {\n    return this._xmlMetadata;\n  }\n\n  /**\n   * @private\n   */\n  get binaryMetadataChunk() {\n    return this._binaryMetaChunk || null;\n  }\n  /**\n   * @param {?String} meta The meta chunk to set\n   * @private\n   */\n  set binaryMetadataChunk(meta) {\n    this._binaryMetaChunk = meta;\n  }\n\n  /**\n   * @private\n   */\n  get smfHeader() {\n    return this._smfHeader;\n  }\n  /**\n   * @param {SMFHeader} val The SMF header to set\n   * @private\n   */\n  set smfHeader(val) {\n    this._smfHeader = val;\n  }\n\n  /**\n   * @private\n   */\n  get hasAutoSequenceNumber() {\n    return this._autoSequenceNumber || false;\n  }\n  /**\n   * @param {Boolean} value Value to set\n   * @private\n   */\n  set hasAutoSequenceNumber(value) {\n    this._autoSequenceNumber = value;\n  }\n\n  /**\n   * @private\n   */\n  get hasAutoSenderTimestamp() {\n    return this._autoSenderTimestamp || false;\n  }\n  /**\n   * @param {Number} value Value to set\n   * @private\n   */\n  set hasAutoSenderTimestamp(value) {\n    this._autoSenderTimestamp = value;\n  }\n\n  /**\n   * Gets the user property map carried in the message binary metadata.\n   *\n   * @returns {?solace.SDTMapContainer} The user properties map, if set.\n   */\n  getUserPropertyMap() {\n    return this._userPropertyMap;\n  }\n\n  /**\n   * Allows users to specify their own user properties to be carried\n   * in the message binary metadata separate from the payload.\n   * @param {?SDTMapContainer} value The user property map.\n   */\n  setUserPropertyMap(value) {\n    this._userPropertyMap = isInstanceOfOrNothing('userPropertyMap', value, SDTMapContainer);\n  }\n\n  /**\n   * Makes this message a strutured data message by assigning it a\n   * structured data type (SDT) container payload (such as a\n   * {@link solace.SDTMapContainer}, {@link solace.SDTStreamContainer}\n   * or a {@link solace.SDTFieldType.String}, which is transported in the binary attachment field.\n   *\n   * Assigning a SDT container updates the message's Type property to\n   * the appropriate value.\n   *\n   * The container argument must be a {@link solace.SDTField} with a type\n   * of {@link solace.SDTFieldType.MAP}, {@link solace.SDTFieldType.STREAM},\n   * or {@link solace.SDTFieldType.STRING}.\n   *\n   * @param {?solace.SDTField} container The SDTField container to send in this message.\n   */\n  setSdtContainer(container) {\n    const structuredContainer = isInstanceOfOrNothing('sdtContainer', container, SDTField);\n    if (structuredContainer === null || structuredContainer === undefined) {\n      // clear\n      this._structuredContainer = null;\n      this.setBinaryAttachment(null);\n      return;\n    }\n\n    this._setBinaryAttachment(null);\n    const sdtType = structuredContainer.getType();\n    switch (sdtType) {\n      case SDTFieldType.MAP:\n        this._messageType = MessageType.MAP;\n        break;\n      case SDTFieldType.STREAM:\n        this._messageType = MessageType.STREAM;\n        break;\n      case SDTFieldType.STRING:\n        this._messageType = MessageType.TEXT;\n        break;\n      default:\n        throw new OperationError('Invalid parameter: expected SDTField Type of ' +\n          'MAP, STREAM, or STRING.',\n          ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    this._structuredContainer = structuredContainer;\n  }\n\n  /**\n   * Gets the message's structured data container, if this is a structured data message.\n   *\n   * @returns {SDTField|null} A field with a payload of {String}, {@link SDTMapContainer},\n   * or {@link SDTStreamContainer} if one was set in the message; otherwise, null.\n   */\n  getSdtContainer() {\n    const msgType = this.getType();\n    const binaryAttachment = this._binaryAttachment;\n    const binaryAttachmentLength = binaryAttachment ? binaryAttachment.length : 0;\n\n    if (msgType === MessageType.BINARY) {\n      LOG_DEBUG(`getSdtContainer returned null, reason: msgType=${msgType}`);\n      return null;\n    }\n\n    // MAP, STREAM or TEXT\n    // Use cached structured container if available\n    if (typeof this._structuredContainer !== 'undefined') {\n      return this._structuredContainer;\n    }\n\n    if (binaryAttachmentLength === 0) {\n      LOG_DEBUG(`getSdtContainer returned null, reason: len=${binaryAttachmentLength}`);\n      this._structuredContainer = null;\n    } else {\n      // Last resort: Decode binary attachment.\n      // Cache structured container for later access\n      this._structuredContainer = SDTCodec.parseSingleElement(binaryAttachment, 0);\n    }\n\n\n    return this._structuredContainer;\n  }\n\n  /**\n   * Produces a human-readable dump of the message's properties and\n   * contents. Applications must not parse the output, as its format is\n   * not a defined part of the API and subject to change.\n   *\n   * <p>\n   * Output can be controlled by the <code>flags</code> parameter. The values are:\n   * <ul>\n   * <li>{@link MessageDumpFlag.MSGDUMP_BRIEF} Display only the length of the\n   *                          binary attachment, xml attachment, and user property map\n   * <li>{@link MessageDumpFlag.MSGDUMP_FULL} Display the entire message.\n   * </ul>\n   * </p>\n   *\n   * @param {Number} [flags]  Optional flags controlling the output, such as whether\n   *                          to include verbose (binary dump) information\n   * @returns {String} A string representation of the message.\n   */\n  dump(flags = MessageDumpFlag.MSGDUMP_FULL) {\n    const validFlags = isEnumMember('flags', flags, MessageDumpFlag);\n    return MessageDumpUtil.dump(this, validFlags);\n  }\n\n  /**\n   * Clones the message\n   * @returns {Message} A clone of this message\n   * @private\n   */\n  clone() {\n    return clone(this, MESSAGE_CLONE_OPTIONS);\n  }\n\n  /**\n   * Releases all memory associated with this message. All values are reinitialized\n   * to defaults. The message is no longer associated with any session or consumer.\n   */\n  reset() {\n    clearMessage(this);\n    initMessage(this);\n  }\n}\n\nmodule.exports.Message = Message;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Long } = require('solclient-convert');\nconst { Parameter } = require('solclient-validate');\nconst { ReplayStartLocation, ReplayStartType } = require('solclient-replaystart');\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\nconst RMID_VERSION_1_PREFIX = 'rmid1:';\n/* prefix length + 3 '-' + 16 bytes of hex (32) */\nconst RMID_LEN = RMID_VERSION_1_PREFIX.length + 3 + 16 * 2; // 41\n/* regex for testing if data component of the rmid string parsing is valid */\nconst validRmidHexRegex = /^[0-9a-fA-F]{32}$/g;\nconst INVALID_SUID = Long.UZERO;\n\nconst {\n  isString,\n  isValue,\n  isInstanceOf,\n} = Parameter;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n *  {@link solace.SolclientFactory.createReplicationGroupMessageId} or from\n *  {@link solace.Message.getReplicationGroupMessageId}</b>\n * <p>\n * ReplicationGroupMessageId specifies a Replication Group Message ID.\n * Can be used to specify a {@link solace.ReplayStartLocation} for the message after this id.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}.\n *\n * @extends solace.ReplayStartLocation\n * @memberof solace\n * @hideconstructor\n */\nclass ReplicationGroupMessageId extends ReplayStartLocation {\n  /**\n   *@param {Long} spoolerUniqueId spooler id component of rgmid\n   *@param {Long} effectiveMessageId message id component of rgmid\n   *@private\n   */\n  constructor(spoolerUniqueId, effectiveMessageId) {\n    super({\n      _replayStartValue: {\n        suid:      spoolerUniqueId,\n        messageId: effectiveMessageId,\n      },\n      _type: ReplayStartType.RGMID,\n    });\n    /**\n     * _suid {Long} spoolerUniqueId component of the replication group message id\n     *              this should be unique to the replaication group\n     * @private\n     */\n    this._suid = spoolerUniqueId;\n    /**\n     * _messageId {Long} effectiveMessageId component of the replication group message id\n     *              this should be unique to the message in the replication group\n     * @private\n     */\n    this._messageId = effectiveMessageId;\n  }\n  /**\n   * Compares with other ReplicationGroupMessageId\n   * @param {ReplicationGroupMessageId} otherReplicationGroupMessageId the other id to compare\n   * @returns {Number} 0 if the ReplicationGroupMessageId is equal to the other\n   *   ReplicationGroupMessageId.\n   *   < 0 if the ReplicationGroupMessageId is less than the other ReplicationGroupMessageId.\n   *   \\> 0 if the ReplicationGroupMessageId is greater than the other ReplicationGroupMessageId.\n   * @throws {solace.OperationError}\n   * * if the otherReplicationGroupMessageId is not a ReplicationGroupMessageId type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the otherReplicationGroupMessageId is not comparable as it is from different origins\n   *   and can not be compared.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_ID_NOT_COMPARABLE}.\n   */\n  compare(otherReplicationGroupMessageId) {\n    isInstanceOf('otherReplicationGroupMessageId', otherReplicationGroupMessageId, ReplicationGroupMessageId);\n    const oId = otherReplicationGroupMessageId;\n    if (!this._suid.equals(oId._suid)) {\n      const message = 'Unable to compare Replication Group Message ID from different origins';\n      throw new OperationError(`Parameter otherReplicationGroupMessageId[${oId.toString()\n        }] failed validation`,\n        ErrorSubcode.MESSAGE_ID_NOT_COMPARABLE, message);\n    }\n    if (this._messageId.gt(oId._messageId)) {\n      return 1;\n    } else if (this._messageId.lt(oId._messageId)) {\n      return -1;\n    }\n    return 0;\n  }\n  [util_inspect_custom]() {\n    return `[Replication Group Message Id: ${this.toString()}]`;\n  }\n  /**\n   * @override\n   * @description\n   * The ReplicationGroupMessageId toString() method returns a string that can later be passed to\n   * {@link solace.SolclientFactory.createReplicationGroupMessageId} to create a\n   * ReplicationGroupMessageId object.\n   * @returns {String} serialized string of the ReplicationGroupMessageId\n   */\n  toString() {\n    const idBuffer = BufferImpl.from(this._suid.toBytesBE().concat(this._messageId.toBytesBE()));\n    const hexString = idBuffer.toString('hex');\n    const sep = '-';\n    return `${RMID_VERSION_1_PREFIX}${hexString.substring(0, 5)}${sep\n    }${hexString.substring(5, 16)}${sep}${hexString.substring(16, 24)}${sep\n    }${hexString.substring(24, 32)}`;\n  }\n}\n\n/**\n * factory method for creating Replication Group Message Ids\n * @param {Object} spec object specification for building\n * @returns {ReplicationGroupMessageId} id instance for spec.\n * @private\n */\nfunction createReplicationGroupMessageId(spec) {\n  /* later this can be enhanced for other implementations of rgmids */\n  return new ReplicationGroupMessageId(spec.suid, spec.msgid);\n}\n\nfunction fromString(rgmidStr) {\n  /* check parameter type */\n  isString('id', rgmidStr);\n  /* validate rmid string to represent 128 bits of id data\n   * must be of format:\n   * rmid1:ttttt-rrrrrrrrrrr-mmmmmmmm-llllllll\n   *\n   * Where:\n   *\n   * * rmid1: This indicates it is a Replication Group Message ID (allows for some sanity\n   *    checking that the bytes to follow are in fact a Replication Group Message ID).\n   *    The '1' is a version to differentiate from a new type of Replication Group Message ID\n   *    that may be introduced later.\n   * * ttttt: Timestamp portion of SUID, 20 bits.\n   * * rrrrrrrrrrr: Random portion of SUID, 44 bits.\n   * * mmmmmmmm: Most significant 32-bits of ack message ID.\n   * * llllllll: Least significant 32-bits of ack message ID.\n   */\n  isValue('id', rgmidStr.length, RMID_LEN, ErrorSubcode.PARAMETER_OUT_OF_RANGE, `length expected: ${RMID_LEN} but is ${rgmidStr.length}`);\n  if (!rgmidStr.startsWith(RMID_VERSION_1_PREFIX)) {\n    /* raise invalid format error */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, does not start with ${RMID_VERSION_1_PREFIX}`);\n  }\n  const rmidBufs = rgmidStr.substring(RMID_VERSION_1_PREFIX.length).split('-');\n  if (rmidBufs.length !== 4 ||\n      rmidBufs[0].length !== 5 ||\n      rmidBufs[1].length !== 11 ||\n      rmidBufs[2].length !== 8 ||\n      rmidBufs[3].length !== 8) {\n    /* raise invalid format error */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, does not have valid separation of components`);\n  }\n  /* convert rmid data string (hex) to bytes\n   * note use Buffer to read hex string to bytes as Long.from(str, 16) uses inaccurate\n   *  calculation and loses precision, while Buffer.from(str, 'hex') does not.\n   * Browser BufferImpl is dependent on parseInt reading the string text 2 characters\n   *  at a time letting a hex string chuck of [0-9][notHex], eg '9G', is parsed as a\n   *  value 9 not NaN leading to a \"valid\" read. This means data integrity is lost\n   *  on browser buffer parsing of hex. An independent string check is required to avoid this.\n   */\n  /* valid rmid component concatenated are hex only string with 32 character length */\n  const rmidHex = rmidBufs.join('').trim();\n  /* validRmidHexRegex uses the global flag and must be reset to advance the global regex\n   * lastIndex.\n   * reset regex\n   */\n  validRmidHexRegex.test('');\n  if (!validRmidHexRegex.test(rmidHex)) {\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, invalid data string value`);\n  }\n  /* convert hex string to bytes */\n  let rmidBuffer;\n  try {\n    rmidBuffer = BufferImpl.from(rmidHex, 'hex');\n  } catch (ex) {\n    /* error parsing hex string into buffer */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, failed to read data, cause: ${ex.message}`);\n  }\n  /* validate read data len is expected for 128 bits of data */\n  const buflen = rmidBuffer ? rmidBuffer.length : 0;\n  if (buflen !== 16) {\n    /* error occured during read */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, failed to read data from id expected length of 16 got ${buflen}`);\n  }\n  /* extract components into long storage */\n  const suid = Long.fromBits(rmidBuffer.readUInt32BE(4), rmidBuffer.readUInt32BE(0), true);\n  if (suid.eq(INVALID_SUID)) {\n    /* invalid suid detected raise out of range parameter OperationError */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, has invalid origin`);\n  }\n  const msgid = Long.fromBits(rmidBuffer.readUInt32BE(12), rmidBuffer.readUInt32BE(8), true);\n  /* return created id object with Long values */\n  return createReplicationGroupMessageId({ suid, msgid });\n}\n\nconst RgmidFactory = {};\nRgmidFactory.fromString = fromString;\nRgmidFactory.from = createReplicationGroupMessageId;\nRgmidFactory.INVALID_SUID = INVALID_SUID;\n\nmodule.exports.ReplicationGroupMessageId = ReplicationGroupMessageId;\nmodule.exports.RgmidFactory = RgmidFactory;\n","const { AbstractQueueDescriptor } = require('./lib/abstract-queue-descriptor');\nconst { QueueAccessType } = require('./lib/queue-access-types');\nconst { QueueDescriptor } = require('./lib/queue-descriptor');\nconst { QueueDescriptorValidator } = require('./lib/queue-descriptor-validator');\nconst { QueueDiscardBehavior } = require('./lib/queue-discard-behaviors');\nconst { QueuePermissions } = require('./lib/queue-permissions');\nconst { QueueProperties } = require('./lib/queue-properties');\nconst { QueuePropertiesValidator } = require('./lib/queue-properties-validator');\nconst { QueueType } = require('./lib/queue-types');\n\nmodule.exports.AbstractQueueDescriptor = AbstractQueueDescriptor;\nmodule.exports.QueueAccessType = QueueAccessType;\nmodule.exports.QueueDescriptor = QueueDescriptor;\nmodule.exports.QueueDescriptorValidator = QueueDescriptorValidator;\nmodule.exports.QueueDiscardBehavior = QueueDiscardBehavior;\nmodule.exports.QueuePermissions = QueuePermissions;\nmodule.exports.QueueProperties = QueueProperties;\nmodule.exports.QueuePropertiesValidator = QueuePropertiesValidator;\nmodule.exports.QueueType = QueueType;\n","const { APIProperties } = require('solclient-util');\nconst { DestinationType } = require('solclient-destination');\nconst { OperationError, ErrorSubcode } = require('solclient-error');\nconst { QueueType } = require('./queue-types');\n\nconst DEFAULTS = {\n  durable: true,\n  type:    undefined,\n};\n\nconst TYPE_DESCRIPTION = {\n  [QueueType.QUEUE]:          'queue',\n  [QueueType.TOPIC_ENDPOINT]: 'topic endpoint',\n};\n\nconst DESINATION_TYPE_TO_DESCRIPTOR_TYPE = {\n  [DestinationType.TOPIC]:           null,\n  [DestinationType.QUEUE]:           QueueType.QUEUE,\n  [DestinationType.TEMPORARY_QUEUE]: QueueType.QUEUE,\n};\n\nfunction maybeAdaptFromDestination(spec) {\n  if (spec && spec.name && spec.type && DestinationType.values.includes(spec.type)) {\n    const targetType = DESINATION_TYPE_TO_DESCRIPTOR_TYPE[spec.type];\n    if (!targetType) {\n      throw new OperationError(`Cannot create a descriptor from a ${\n                               DestinationType.describe(spec.type)} destination`,\n                               ErrorSubcode.PARAMETER_CONFLICT);\n    }\n    return {\n      name:    spec.name,\n      type:    QueueType.QUEUE,\n      durable: spec.type !== DestinationType.TEMPORARY_QUEUE,\n    };\n  }\n  return spec;\n}\n\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * <p>\n * This is a base class for {@link solace.QueueDescriptor}. API users should access the\n * methods described here through a {@link solace.QueueDescriptor}.\n * @memberof solace\n * @hideconstructor\n */\nclass AbstractQueueDescriptor extends APIProperties {\n  /*\n   * @param {Object|solace.AbstractQueueDescriptor} queueSpec A specification for this descriptor.\n   * @param {solace.QueueType} queueSpec.type The type of queue for this specification.\n   * @param {Boolean} [queueSpec.durable=true] Whether this spec refers to a durable queue.\n   * @constructor\n   */\n  constructor(queueSpec) { // eslint-disable-line no-useless-constructor\n    super(DEFAULTS, maybeAdaptFromDestination(queueSpec));\n  }\n\n  /**\n   * Gets the queue type to which this descriptor refers.\n   * @returns {solace.QueueType} The queue type that this object describes\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * @type {solace.QueueType}\n   * @description The Queue Type.\n   */\n  get type() {\n    return this.getType();\n  }\n  set type(value) {\n    this._type = value;\n  }\n\n  /**\n   * Gets whether this descriptor refers to a durable queue.\n   *\n   * @returns {Boolean} `true` if this describes a durable queue\n   */\n  isDurable() { // eslint-disable-line class-methods-use-this\n    return this._durable;\n  }\n  /**\n   * @type {Boolean}\n   * @description True if this descriptor refers to a durable queue.\n   */\n  get durable() {\n    return this.isDurable();\n  }\n  set durable(value) {\n    this._durable = value;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'type':    this.type,\n      'durable': this.durable,\n    };\n  }\n\n  /**\n   * An informational summary of this object, subject to change.\n   * @returns {String} A summary of this object.\n   */\n  toString() {\n    return `${!this.isDurable() ? 'non' : ''}-durable ` +\n           `${TYPE_DESCRIPTION[this.getType()]}`;\n  }\n\n}\n\nmodule.exports.AbstractQueueDescriptor = AbstractQueueDescriptor;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents the possible endpoint access types. The corresponding endpoint property is\n * {@link solace.QueueProperties#accessType}.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueAccessType = {\n  /**\n   * @description An exclusive endpoint. The first client to bind\n   * receives the stored messages on the Endpoint.\n   * @type {String}\n   */\n  EXCLUSIVE:    'EXCLUSIVE',\n  /**\n   * @description A non-exclusive (shared) Queue. Each client to bind\n   * receives messages in a round robin fashion.\n   * @type {String}\n   */\n  NONEXCLUSIVE: 'NONEXCLUSIVE',\n};\n\nmodule.exports.QueueAccessType = Enum.new(QueueAccessType);\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { QueueDescriptor } = require('./queue-descriptor');\nconst { QueueType } = require('./queue-types');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valTopicString,\n} = APIPropertiesValidators;\n\n\nconst QueueDescriptorValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'QueueDescriptor', instance);\n    if (instance instanceof QueueDescriptor) {\n      v('name', [valTopicString]);\n    } // else is abstract; don't check name\n    v('type', [valIsMember, QueueType, 'QueueType']);\n    v('durable', [valBoolean]);\n  },\n};\n\nmodule.exports.QueueDescriptorValidator = QueueDescriptorValidator;\n","const { AbstractQueueDescriptor } = require('./abstract-queue-descriptor');\nconst { Destination } = require('solclient-destination');\n\nconst DEFAULTS = {\n  name:    undefined,\n  durable: true,\n};\n\n/**\n * This class identifies a queue or topic endpoint on the message router.\n *\n * Operations that make use of queue descriptors include\n *  * {@link solace.Session#createMessageConsumer}\n *  * {@link solace.Session#dteUnsubscribe}\n *\n * @classdesc QueueDescriptor\n * @extends {AbstractQueueDescriptor}\n * @memberof solace\n */\nclass QueueDescriptor extends AbstractQueueDescriptor {\n\n  /**\n   * Creates an instance of {@link solace.QueueDescriptor}.\n   *\n   * @param {Object|solace.QueueDescriptor} queueSpec A specification for this descriptor.\n   * @param {String} queueSpec.name The remote name to which this specification refers.\n   * @param {solace.QueueType} queueSpec.type The type of queue for this specification.\n   * @param {Boolean} [queueSpec.durable=true] `true` if this refers to a durable queue.\n   */\n  constructor(queueSpec) {\n    super(queueSpec instanceof Destination\n            ? { name: queueSpec.name, type: queueSpec.type } // synthesize durable later\n            : Object.assign({ }, DEFAULTS, queueSpec));\n  }\n\n  /**\n   * Gets/sets the remote name to which this descriptor refers.\n   * @returns {String} The name of the queue.\n   */\n  getName() {\n    return this._name;\n  }\n  get name() {\n    return this.getName();\n  }\n  set name(value) {\n    this._name = value;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'name':    this.name,\n      'type':    this.type,\n      'durable': this.durable,\n    };\n  }\n\n  /**\n   * An informational summary of this object, subject to change.\n   * @returns {String} A summary of this object.\n   */\n  toString() {\n    return `${super.toString()} '${this.getName()}'`;\n  }\n\n  /**\n   * @static\n   * @param {any} spec The descriptor spec\n   * @returns {QueueDescriptor|AbstractQueueDescriptor} A new descriptor for the spec\n   * @private\n   */\n  static createFromSpec(spec) {\n    if (spec.name) return new QueueDescriptor(spec);\n    return AbstractQueueDescriptor(spec);\n  }\n}\n\nmodule.exports.QueueDescriptor = QueueDescriptor;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumerates the behavior options when a message cannot be added to an endpoint\n * (for example, the maximum quota {@link solace.QueueProperties#quotaMB} was exceeded).\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueDiscardBehavior = {\n  /**\n   * @description Send the publisher a message reject notification.\n   * @type {String}\n   */\n  NOTIFY_SENDER_ON:  'NOTIFY_SENDER_ON',\n  /**\n   * @description Discard the message and acknowledge it.\n   * @type {String}\n   */\n  NOTIFY_SENDER_OFF: 'NOTIFY_SENDER_OFF',\n};\n\nmodule.exports.QueueDiscardBehavior = Enum.new(QueueDiscardBehavior);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents the permissions applicable to a queue.\n *\n * The corresponding endpoint property is\n * {@link solace.QueueProperties#permissions}.\n *\n * The access controls:\n *  * the permissions for all other users of the queue, this only applies to\n *  non-durable queues {@link solace.QueueProperties#permissions};\n *  * for the current Message Consumer  on a queue or endpoint,\n *    {@link solace.MessageConsumer.permissions}\n *\n * For example, creating a temporary topic endpoint with MODIFY_TOPIC will allow\n * other users to modify the topic subscribed to that endpoint.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueuePermissions = {\n  /**\n   * @description No client other than the queue's owner may access the endpoint.\n   */\n  NONE:         'NONE',\n  /**\n   * @description Client may read messages but not consume them.\n   * @type {String}\n   */\n  READ_ONLY:    'READ_ONLY',\n  /**\n   * @description  Client may read and consume messages.\n   * @type {String}\n   */\n  CONSUME:      'CONSUME',\n  /**\n   * @description Client may read and consume messages, and modify topic(s) associated with the\n   * queue.\n   * @type {String}\n   */\n  MODIFY_TOPIC: 'MODIFY_TOPIC',\n  /**\n   * @description Client may read and consume messages, modify topic(s) associated with the\n   * queue, and delete the queue.\n   * @type {String}\n   */\n  DELETE:       'DELETE',\n};\n\nmodule.exports.QueuePermissions = Enum.new(QueuePermissions);\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { QueueAccessType } = require('./queue-access-types');\nconst { QueueDiscardBehavior } = require('./queue-discard-behaviors');\nconst { QueuePermissions } = require('./queue-permissions');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valNumber,\n  valRange,\n} = APIPropertiesValidators;\n\n\nconst QueuePropertiesValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'QueueProperties', instance);\n    if (instance.permissions !== undefined && instance.permissions !== null) {\n      v('permissions', [valIsMember, QueuePermissions, 'QueuePermissions']);\n    }\n    if (instance.accessType !== undefined && instance.accessType !== null) {\n      v('accessType', [valIsMember, QueueAccessType, 'QueueAccessType']);\n    }\n    if (instance.quotaMB !== undefined && instance.quotaMB !== null) {\n      v('quotaMB', [valNumber], [valRange, 0, Number.POSITIVE_INFINITY]);\n    }\n    if (instance.maxMessageSize !== undefined && instance.maxMessageSize !== null) {\n      v('maxMessageSize', [valNumber], [valRange, 0, Number.POSITIVE_INFINITY]);\n    }\n    if (instance.respectsTTL !== undefined && instance.respectsTTL !== null) {\n      v('respectsTTL', [valBoolean]);\n    }\n    if (instance.discardBehavior !== undefined && instance.discardBehavior !== null) {\n      v('discardBehavior', [valIsMember, QueueDiscardBehavior, 'QueueDiscardBehavior']);\n    }\n    if (instance.maxMessageRedelivery !== undefined && instance.maxMessageRedelivery !== null) {\n      v('maxMessageRedelivery', [valNumber], [valRange, 0, 255]);\n    }\n  },\n};\n\nmodule.exports.QueuePropertiesValidator = QueuePropertiesValidator;\n","const { APIProperties } = require('solclient-util');\nconst { QueueAccessType } = require('./queue-access-types');\nconst { QueueDiscardBehavior } = require('./queue-discard-behaviors');\nconst { QueuePermissions } = require('./queue-permissions');\n\nconst DEFAULTS = {\n  permissions:          undefined,\n  accessType:           undefined,\n  quotaMB:              undefined,\n  maxMessageSize:       undefined,\n  respectsTTL:          undefined,\n  discardBehavior:      undefined,\n  maxMessageRedelivery: undefined,\n};\n\n/**\n * @classdesc\n * Represents a queue properties object. May be passed in to\n * {@link solace.Session#createMessageConsumer} when creating a\n * {@link solace.MessageConsumer} object.  Upon creation of a queue, undefined queue\n * properties are set to default values chosen by the router.\n *\n * @memberof solace\n */\nclass QueueProperties extends APIProperties {\n\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Gets/sets permissions for this queue.\n   *\n   * When creating a temporary queue, these are the permissions that apply\n   * to all other users; the user creating the temporary queue is always\n   * granted DELETE permissions.\n   *\n   * @type {solace.QueuePermissions}\n   * @default undefined\n   */\n  get permissions() {\n    return this._permissions;\n  }\n  set permissions(newValue) {\n    this._permissions = newValue;\n  }\n\n  /**\n   * Gets/sets the access type for this queue.\n   *\n   * This parameter must NOT be set when creating a temporary queue via\n   * {@link solace.Session#createMessageConsumer}. Such a queue has its\n   * access type determined by the remote message router.\n   *\n   * @type {solace.QueueAccessType}\n   * @default undefined\n   */\n  get accessType() {\n    return this._accessType || DEFAULTS.accessType;\n  }\n  set accessType(newValue) {\n    this._accessType = newValue;\n  }\n\n  /**\n   * Gets/sets the quota, in megabytes, for this queue.\n   *  * The allowed values are (0 <= quotaMB) || undefined.\n   *  * A value of 0 configures the queue to act as a Last-Value-Queue (LVQ), where the router\n   *    enforces a Queue depth of one, and only the most current message is spooled by the\n   *    queue. When a new message is received, the current queued message is first\n   *    automatically deleted from the queue, then the new message is spooled.\n   * @type {?Number}\n   * @default undefined\n   */\n  get quotaMB() {\n    return this._quotaMB;\n  }\n  set quotaMB(newValue) {\n    this._quotaMB = newValue;\n  }\n\n  /**\n   * Gets/sets the maximum message size, in bytes, for any single message spooled on this queue.\n   * @type {Number}\n   * @default undefined\n   */\n  get maxMessageSize() {\n    return this._maxMessageSize;\n  }\n  set maxMessageSize(newValue) {\n    this._maxMessageSize = newValue;\n  }\n\n  /**\n   * Gets/sets whether this queue respects Time To Live on messages.\n   * @type {Boolean}\n   * @default false\n   */\n  get respectsTTL() {\n    return this._respectsTTL;\n  }\n  set respectsTTL(newValue) {\n    this._respectsTTL = newValue;\n  }\n\n  /**\n   * Gets/sets the discard behavior for this queue.\n   * @type {solace.QueueDiscardBehavior}\n   * @default {solace.QueueDiscardBehavior.NOTIFY_SENDER_OFF}\n   */\n  get discardBehavior() {\n    return this._discardBehavior;\n  }\n  set discardBehavior(newValue) {\n    this._discardBehavior = newValue;\n  }\n\n  /**\n   * Gets/sets the maximum number of times to attempt message redelivery for this queue.\n   *  * The valid range is 0 <= maxMessageRedelivery <= 255\n   *  * A value of 0 means retry forever.\n   * @type {Number}\n   * @default undefined\n   */\n  get maxMessageRedelivery() {\n    return this._maxMessageRedelivery;\n  }\n  set maxMessageRedelivery(newValue) {\n    this._maxMessageRedelivery = newValue;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'permissions':     QueuePermissions.describe(this.permissions),\n      'accessType':      QueueAccessType.describe(this.accessType),\n      'quotaMB':         this.quotaMB,\n      'maxMessageSize':  this.maxMessageSize,\n      'respectsTTL':     this.respectsTTL,\n      'discardBehavior': this.discardBehavior\n                            ? QueueDiscardBehavior.describe(this.discardBehavior)\n                            : 'undefined',\n      'maxMessageRedelivery': this.maxMessageRedelivery,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.QueueProperties = QueueProperties;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Specifies the type of remote resource to which an\n * {@link solace.AbstractQueueDescriptor} refers.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueType = {\n  /**\n   * @description The queue descriptor refers to a queue endpoint.\n   * @type {String}\n   */\n  QUEUE:          'QUEUE',\n  /**\n   * @description The queue descriptor refers to a topic endpoint.\n   * @type {String}\n   */\n  TOPIC_ENDPOINT: 'TOPIC_ENDPOINT',\n};\n\nmodule.exports.QueueType = Enum.new(QueueType);\n","const { Parameter } = require('solclient-validate');\nconst { ReplayStartLocation, ReplayStartType } = require('./lib/replayStartLocation');\nconst { ReplayStartLocationBeginning } = require('./lib/replayStartLocationBeginning');\nconst { ReplayStartLocationDate } = require('./lib/replayStartLocationDate');\nconst { SolclientFactory } = require('solclient-factory');\n\n\nmodule.exports.ReplayStartLocation = ReplayStartLocation;\nmodule.exports.ReplayStartLocationBeginning = ReplayStartLocationBeginning;\nmodule.exports.ReplayStartLocationDate = ReplayStartLocationDate;\nmodule.exports.ReplayStartType = ReplayStartType;\n\n/**\n * Creates a ReplayStartLocation {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that all messages available\n * in the replay log should be retrieved.\n *\n *\n * @returns {solace.ReplayStartLocation} The newly created ReplayStartLocation\n * @method\n * @name solace.SolclientFactory.createReplayStartLocationBeginning\n */\nSolclientFactory.createReplayStartLocationBeginning = SolclientFactory.createFactory(() =>\n  new ReplayStartLocationBeginning()\n);\n/**\n * Creates a ReplayStartLocation {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that only messages spooled\n * in the replay log since the given Date should be retrieved.\n *\n * @param {Date} dateTime The Date object the represents the date and time of the replay\n * start location.  dateTime is always converted to UTC time if not already a UTC time.\n * @returns {solace.ReplayStartLocation} The newly created ReplayStartLocation\n * @method\n * @name solace.SolclientFactory.createReplayStartLocationDate\n */\nSolclientFactory.createReplayStartLocationDate = SolclientFactory.createFactory(dateTime =>\n  ReplayStartLocationDate.createReplayStartLocationDate(Parameter.isInstanceOf('date', dateTime, Date))\n);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration for smf replay start location value type\n *@private\n */\nconst ReplayStartType = Enum.new({\n  // the value of the Enum is the value of the smf type\n  BEGINNING: 0x00,\n  DATE:      0x01,\n  RGMID:     0x02,\n});\n\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from one of the following:</b>\n * * {@link solace.SolclientFactory.createReplayStartLocationBeginning}\n * * {@link solace.SolclientFactory.createReplayStartLocationDate}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n * The single member variable, _replayStartTime is undefined in ReplayStartLocationBeginning and\n * contains the elapsed time in milliseconds since the epoch in ReplayStartLocationDate\n *\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocation {\n  /**\n   * @constructor\n   * @param {SObject} spec The ReplayStartLocation spec\n   * Use the factory methods on {@link solace.SolclientFactory}.\n   * @private\n   */\n  constructor(spec) {\n    Object.assign(this, spec);\n    if (this._type === undefined) {\n      // use default replay start location type when not specified\n      this._type = ReplayStartType.BEGINNING;\n    }\n  }\n  /**\n   * @returns {String} A generic description of the Destination.\n   */\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.ReplayStartLocation = ReplayStartLocation;\nmodule.exports.ReplayStartType = ReplayStartType;\n","const { ReplayStartLocation, ReplayStartType } = require('./replayStartLocation');\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from the following:</b>\n *  * {@link solace.SolclientFactory.createReplayStartLocationBeginning}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n *\n * @extends {ReplayStartLocation}\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocationBeginning extends ReplayStartLocation {\n  /**\n   * @private\n   */\n  constructor() {\n    super({\n      _type: ReplayStartType.BEGINNING,\n    });\n  }\n  static [util_inspect_custom]() {\n    return 'BEGINNING';\n  }\n}\n\nmodule.exports.ReplayStartLocationBeginning = ReplayStartLocationBeginning;\n","const { ReplayStartLocation, ReplayStartType } = require('./replayStartLocation');\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from the following:</b>\n *  * {@link solace.SolclientFactory.createReplayStartLocationDate}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n *\n * @extends ReplayStartLocation\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocationDate extends ReplayStartLocation {\n  /**\n   * @param {Object} spec The topic spec\n   * @private\n   */\n  constructor(spec) {\n    super({\n      _replayStartValue: spec.getTime(),\n      _type:             ReplayStartType.DATE,\n    });\n  }\n  [util_inspect_custom]() {\n    return `[Epoch Time: ${this._replayStartValue}]`;\n  }\n  /**\n   * @static\n   * @param {Date} dateTime The Date for the replay start location\n   * @returns {ReplayStartLocation} the ReplayStartLocation\n   * @private\n   */\n  static createReplayStartLocationDate(dateTime) {\n    return new ReplayStartLocationDate(dateTime);\n  }\n}\n\nmodule.exports.ReplayStartLocationDate = ReplayStartLocationDate;\n","const { Codec } = require('./lib/codec');\nconst { SDTDestType } = require('./lib/sdt-destination-types');\nconst { SDTField } = require('./lib/sdt-field');\nconst { SDTFieldType } = require('./lib/sdt-field-types');\nconst { SDTMapContainer } = require('./lib/sdt-map-container');\nconst { SDTStreamContainer } = require('./lib/sdt-stream-container');\nconst { SDTUnsupportedValueError } = require('./lib/sdt-unsupported-value-error');\nconst { SDTValueErrorSubcode } = require('./lib/sdt-value-error-subcodes');\n\nmodule.exports.Codec = Codec;\nmodule.exports.SDTDestType = SDTDestType;\nmodule.exports.SDTField = SDTField;\nmodule.exports.SDTFieldType = SDTFieldType;\nmodule.exports.SDTMapContainer = SDTMapContainer;\nmodule.exports.SDTStreamContainer = SDTStreamContainer;\nmodule.exports.SDTUnsupportedValueError = SDTUnsupportedValueError;\nmodule.exports.SDTValueErrorSubcode = SDTValueErrorSubcode;\n","const { EncodeSingleElement } = require('./encode-single-element');\nconst { IEEE754LIB } = require('./ieee754lib');\nconst { ParseSingleElement, StringToBuffer } = require('./parse-single-element');\n\nconst { encodeSingleElement } = EncodeSingleElement;\nconst { parseSingleElement } = ParseSingleElement;\nconst { stringToBuffer } = StringToBuffer;\n\nconst Codec = {\n  encodeSingleElement,\n  parseSingleElement,\n  stringToBuffer,\n  IEEE754LIB,\n};\n\nmodule.exports.Codec = Codec;\n","const { Convert } = require('solclient-convert');\nconst { SDTDataTypes } = require('../sdt-data-types');\n\nconst EncodeHeader = {};\nEncodeHeader.encodeHeader = function encodeHeader(tag, valueLen) {\n  // Tag in first 6 bits, then (lenbytes-1) in 2 bits\n  let byte0 = (tag << 2) & 0xFF;\n  let strSdtLen = null;\n\n  if (tag === SDTDataTypes.Map || tag === SDTDataTypes.Stream) {\n    // force 4 bytes\n    strSdtLen = Convert.int32ToStr(valueLen + 5);\n    byte0 |= 3; // 4 length bytes\n  } else if (valueLen + 2 <= 255) {\n    strSdtLen = Convert.int8ToStr(valueLen + 2);\n    byte0 |= 0; // 1 length byte\n  } else if (valueLen + 3 <= 65535) {\n    strSdtLen = Convert.int16ToStr(valueLen + 3);\n    byte0 |= 1; // 2 length bytes\n  } else {\n    strSdtLen = Convert.int32ToStr(valueLen + 5);\n    byte0 |= 3; // 4 length bytes\n  }\n  const ret = Convert.int8ToStr(byte0) + strSdtLen;\n  return ret;\n};\n\nmodule.exports.EncodeHeader = EncodeHeader;\n","\nconst EncodeInteger = {};\n\nEncodeInteger.int48ToStr = function int48ToStr(vIn) {\n  let v = vIn;\n  const bytes = [];\n  for (let i = 0; i < 6; i++) {\n    const byteI = (v % 256);\n    v = Math.floor(v / 256);\n    bytes.push(String.fromCharCode(byteI));\n  }\n  bytes.reverse();\n  return bytes.join('');\n};\n\nmodule.exports.EncodeInteger = EncodeInteger;\n","const EncodeSingleElementLib = require('./encode-single-element');\nconst UtilLib = require('solclient-util');\nconst { EncodeHeader } = require('./encode-header');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTMapContainer } = require('../sdt-map-container');\n\nconst { encodeHeader } = EncodeHeader;\n\nconst EncodeMap = {\n  /**\n   * Encodes an SDT map.\n   * @param  {Object} sdtmap The map to parse\n   * @returns {String}        The map in binary string format\n   */\n  encodeMap(sdtmap) {\n    const buf = [];\n    if (!(sdtmap instanceof SDTMapContainer)) {\n      return null; // skip!\n    }\n    const keys = sdtmap.getKeys();\n    let sdtfield = null;\n    let strKeyField = null;\n    let strKeyName = null;\n    let i;\n    for (i = 0; i < keys.length; i++) {\n      sdtfield = sdtmap.getField(keys[i]);\n      if (sdtfield) {\n        // === KEY ===\n        strKeyName = UtilLib.StringUtils.nullTerminate(keys[i]);\n        strKeyField = encodeHeader(SDTDataTypes.String, strKeyName.length);\n        strKeyField += strKeyName;\n        buf.push(strKeyField);\n\n        // === VALUE ===\n        EncodeSingleElementLib.EncodeSingleElement.encodeSingleElementToBuf(sdtfield, buf);\n      }\n    } // end iter over keys\n    return buf.join('');\n  },\n};\n\nmodule.exports.EncodeMap = EncodeMap;\n","const DestinationLib = require('solclient-destination');\nconst { Convert } = require('solclient-convert');\nconst { EncodeHeader } = require('./encode-header');\nconst { EncodeInteger } = require('./encode-integer');\nconst { EncodeMap } = require('./encode-map');\nconst { EncodeStream } = require('./encode-stream');\nconst { IEEE754LIB } = require('./ieee754lib');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTDestType } = require('../sdt-destination-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { StringUtils } = require('solclient-util');\n\nconst { encodeHeader } = EncodeHeader;\nconst { int48ToStr } = EncodeInteger;\nconst { encodeMap } = EncodeMap;\nconst { encodeStream } = EncodeStream;\n\nconst { nullTerminate } = StringUtils;\n\nconst C_2_48 = Math.pow(2, 48);\n\n// UCS-2 --> UTF-8 conversion\nfunction strencode(data) {\n  return unescape(encodeURIComponent(data));\n}\n\n// Encode an SDTField into provided buffer buf\nfunction encodeSingleElementToBuf(sdtfield, buf) {\n  if (!(sdtfield instanceof SDTField)) {\n    return false;\n  }\n  // we write the header at the end, once we know the size\n  const value = sdtfield.getValue();\n  let fieldVal = null;\n  let tag = 0; // SMF TAG\n  switch (sdtfield.getType()) {\n    case SDTFieldType.BOOL:\n      tag = SDTDataTypes.Boolean;\n      fieldVal = Convert.int8ToStr(value ? 1 : 0);\n      break;\n    case SDTFieldType.UINT8:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int8ToStr(value);\n      break;\n    case SDTFieldType.INT8:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int8ToStr(value);\n      break;\n    case SDTFieldType.UINT16:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int16ToStr(value);\n      break;\n    case SDTFieldType.INT16:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int16ToStr(value);\n      break;\n    case SDTFieldType.UINT32:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int32ToStr(value);\n      break;\n    case SDTFieldType.INT32:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int32ToStr(value);\n      break;\n    case SDTFieldType.UINT64:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = String.fromCharCode(0) + String.fromCharCode(0) + int48ToStr(value);\n      break;\n    case SDTFieldType.INT64:\n      tag = SDTDataTypes.Integer;\n      if (value >= 0) {\n        fieldVal = String.fromCharCode(0) + String.fromCharCode(0) + int48ToStr(value);\n      } else {\n        fieldVal = (String.fromCharCode(0xFF) +\n                    String.fromCharCode(0xFF) +\n                    int48ToStr(C_2_48 + value));\n      }\n      break;\n    case SDTFieldType.WCHAR:\n      tag = SDTDataTypes.Char;\n      fieldVal = Convert.int16ToStr(value.charCodeAt(0));\n      break;\n    case SDTFieldType.STRING:\n      tag = SDTDataTypes.String;\n      fieldVal = nullTerminate(strencode(value));\n      break;\n    case SDTFieldType.BYTEARRAY:\n      tag = SDTDataTypes.ByteArray;\n      fieldVal = value.toString('latin1');\n      break;\n    case SDTFieldType.FLOATTYPE:\n      tag = SDTDataTypes.Float;\n      fieldVal = IEEE754LIB.toIEEE754Single(value);\n      break;\n    case SDTFieldType.DOUBLETYPE:\n      tag = SDTDataTypes.Float;\n      fieldVal = IEEE754LIB.toIEEE754Double(value);\n      break;\n    case SDTFieldType.MAP:\n      tag = SDTDataTypes.Map;\n      fieldVal = encodeMap(value);\n      break;\n    case SDTFieldType.STREAM:\n      tag = SDTDataTypes.Stream;\n      fieldVal = encodeStream(value);\n      break;\n    case SDTFieldType.DESTINATION:\n      tag = SDTDataTypes.Destination;\n      if (value instanceof DestinationLib.Destination) {\n        fieldVal = Convert.int8ToStr(SDTDestType[value.getType()])\n          + value.getBytes();\n      }\n      break;\n    case SDTFieldType.NULLTYPE:\n      tag = SDTDataTypes.Null;\n      fieldVal = '';\n      break;\n    case SDTFieldType.UNKNOWN:\n      fieldVal = null;\n      break;\n    default:\n  }\n  if (fieldVal !== null) {\n    const hdr = encodeHeader(tag, fieldVal.length);\n    buf.push(hdr);\n    buf.push(fieldVal);\n    return true;\n  }\n\n  return false;\n}\n\nfunction encodeSingleElement(sdtfield) {\n  const buf = [];\n  encodeSingleElementToBuf(sdtfield, buf);\n  return buf.join('');\n}\n\nconst EncodeSingleElement = {\n  encodeSingleElement,\n  encodeSingleElementToBuf,\n};\n\nmodule.exports.EncodeSingleElement = EncodeSingleElement;\n","const EncodeSingleElementLib = require('./encode-single-element');\nconst { SDTStreamContainer } = require('../sdt-stream-container');\n\nconst EncodeStream = {};\nEncodeStream.encodeStream = function encodeStream(sdtstream) {\n  const buf = [];\n  if (!(sdtstream instanceof SDTStreamContainer)) {\n    return null; // skip!\n  }\n  let sdtfield = null;\n  while (sdtstream.hasNext()) {\n    sdtfield = sdtstream.getNext();\n    if (sdtfield) {\n      EncodeSingleElementLib.EncodeSingleElement.encodeSingleElementToBuf(sdtfield, buf);\n    }\n  } // end iter over stream entries\n  return buf.join('');\n};\n\nmodule.exports.EncodeStream = EncodeStream;\n","const IEEE754LIB = {\n  /**\n   * @preserve\n   * The MIT License\n   *\n   * Copyright (c) 2010 Alan Gutierrez\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\n   * of this software and associated documentation files (the \"Software\"), to deal\n   * in the Software without restriction, including without limitation the rights\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall be included in\n   * all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   * THE SOFTWARE.\n   */\n\n  toIEEE754(vIn, ebits, fbits) {\n    let v = vIn;\n    const bias = (1 << (ebits - 1)) - 1;\n\n    // Compute sign, exponent, fraction\n    let s;\n    let e;\n    let f;\n    if (isNaN(v)) {\n      e = (1 << bias) - 1;\n      f = 1;\n      s = 0;\n    } else if (v === Infinity || v === -Infinity) {\n      e = (1 << bias) - 1;\n      f = 0;\n      s = (v < 0) ? 1 : 0;\n    } else if (v === 0) {\n      e = 0;\n      f = 0;\n      s = (1 / v === -Infinity) ? 1 : 0;\n    } else {\n      s = v < 0;\n      v = Math.abs(v);\n\n      if (v >= Math.pow(2, 1 - bias)) {\n        const ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n        e = ln + bias;\n        f = (v * Math.pow(2, fbits - ln)) - Math.pow(2, fbits);\n      } else {\n        e = 0;\n        f = v / Math.pow(2, 1 - bias - fbits);\n      }\n    }\n\n    // Pack sign, exponent, fraction\n    const bits = [];\n    for (let i = fbits; i; i -= 1) {\n      bits.push(f % 2 ? 1 : 0);\n      f = Math.floor(f / 2);\n    }\n    for (let i = ebits; i; i -= 1) {\n      bits.push(e % 2 ? 1 : 0);\n      e = Math.floor(e / 2);\n    }\n    bits.push(s ? 1 : 0);\n    bits.reverse();\n    let str = bits.join('');\n\n    // Bits to bytes\n    const bytes = [];\n    while (str.length) {\n      bytes.push(parseInt(str.substring(0, 8), 2));\n      str = str.substring(8);\n    }\n    return bytes;\n  },\n\n  fromIEEE754(bytes, ebits, fbits) {\n    // Bytes to bits\n    const bits = [];\n    for (let i = bytes.length; i; i -= 1) {\n      let byteI = bytes[i - 1];\n      for (let j = 8; j; j -= 1) {\n        bits.push(byteI % 2 ? 1 : 0);\n        byteI >>= 1;\n      }\n    }\n    bits.reverse();\n    const str = bits.join('');\n\n    // Unpack sign, exponent, fraction\n    const bias = (1 << (ebits - 1)) - 1;\n    const s = parseInt(str.substring(0, 1), 2) ? -1 : 1;\n    const e = parseInt(str.substring(1, 1 + ebits), 2);\n    const f = parseInt(str.substring(1 + ebits), 2);\n\n    // Produce number\n    if (e === (1 << ebits) - 1) {\n      return f !== 0 ? NaN : s * Infinity;\n    }\n    if (e > 0) {\n      return s * Math.pow(2, e - bias) * (1 + f / Math.pow(2, fbits));\n    }\n    if (f !== 0) {\n      return s * Math.pow(2, -(bias - 1)) * (f / Math.pow(2, fbits));\n    }\n    return 0;\n  },\n  strToByteArr(str) {\n    const bytes = [];\n    for (let i = 0; i < str.length; i++) { bytes.push(str.charCodeAt(i) & 0xFF); }\n    return bytes;\n  },\n  byteArrToStr(bytes) {\n    const str = [];\n    for (let i = 0; i < bytes.length; i++) { str.push(String.fromCharCode(bytes[i] & 0xFF)); }\n    return str.join('');\n  },\n  fromIEEE754Double(b) { return this.fromIEEE754(this.strToByteArr(b), 11, 52); },\n  toIEEE754Double(v) { return this.byteArrToStr(this.toIEEE754(v, 11, 52)); },\n  fromIEEE754Single(b) { return this.fromIEEE754(this.strToByteArr(b), 8, 23); },\n  toIEEE754Single(v) { return this.byteArrToStr(this.toIEEE754(v, 8, 23)); },\n};\n\nmodule.exports.IEEE754LIB = IEEE754LIB;\n","const { DestinationFromNetwork, DestinationType, Queue } = require('solclient-destination');\nconst { LOG_DEBUG, LOG_INFO } = require('solclient-log');\nconst { SDTDestType } = require('../sdt-destination-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { Topic } = require('solclient-destination');\n\nconst ParseDestination = {};\nParseDestination.parseDestination = function parseDestination(dataBuf, pos, len) {\n  const destType = dataBuf.readUInt8(pos);\n  const destBytes = dataBuf.toString('latin1', pos + 1, pos + len);\n  // first try to create a destination from the string, this handles strings with\n  // the preamble ('#P2P/QUE' or '#P2P/TQUE').\n  let destination = DestinationFromNetwork.createDestinationFromBytes(destBytes);\n  if (SDTDestType[destination.type] !== destType) {\n    // SDT destination type does not match the string format. This means either:\n    //    * that the string contains a queue preamble and the type is topic,\n    //      so just make it a topic\n    //    * that the type is queue and the string does not have the preamble, which means we\n    //      should construct a queue.\n    if (SDTDestType[DestinationType.QUEUE] === destType) {\n      destination = Queue.createFromLocalName(destBytes); //createFromLocal has issue with buffer\n    } else if (SDTDestType[DestinationType.TOPIC] === destType) {\n      LOG_DEBUG(`Found and allowed SDT field with  destination type ${destType} when decoding ${destBytes} to ${destination.type}`);\n      //\n      // override the format and set destType as specified in the SMF (i.e. TOPIC)\n      destination = new Topic(destBytes);\n    } else {\n      LOG_INFO(`Drop SDT field with invalid destination type ${destType} when decoding ${destBytes} to ${destination.type}`);\n      return null;\n    }\n  }\n  return SDTField.create(SDTFieldType.DESTINATION, destination);\n};\n\nmodule.exports.ParseDestination = ParseDestination;\n","const { ParseInteger } = require('./parse-integer');\n\nconst { autoDecodeVarLengthNumber } = ParseInteger;\n\nconst ParseFieldHeader = {};\n// Parse the header part of an SDT field.\n// Returns [TYPE, DECLARED_LENGTH, VALUE_DATA_LENGTH, CONSUMED_BYTES]\nParseFieldHeader.parseFieldHeader = function parseFieldHeader(dataBuf, offset) {\n  let pos = offset;\n  const onebyte = dataBuf.readUInt8(pos);\n  const elemType = (onebyte & 0xFC) >> 2;\n  const lenBytes = (onebyte & 0x03) + 1;\n  pos++;\n  const elemLen = autoDecodeVarLengthNumber(dataBuf, pos, lenBytes);\n  pos += lenBytes;\n  const elemValLen = elemLen - (1 + lenBytes);\n  return [elemType, elemLen, elemValLen, pos - offset];\n};\n\nmodule.exports.ParseFieldHeader = ParseFieldHeader;\n","const { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\n\nconst ParseFloat = {};\nParseFloat.parseFloatField = function parseFloatField(buf, pos, len) {\n  switch (len) {\n    case 4:\n      return SDTField.create(SDTFieldType.FLOATTYPE, buf.readFloatBE(pos));\n    case 8:\n      return SDTField.create(SDTFieldType.DOUBLETYPE, buf.readDoubleBE(pos));\n    default:\n      return SDTField.create(SDTFieldType.UNKNOWN, buf.toString('latin1', pos, pos + len));\n  }\n};\n\nmodule.exports.ParseFloat = ParseFloat;\n","const Long = require('long');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTUnsupportedValueError } = require('../sdt-unsupported-value-error');\nconst { SDTValueErrorSubcode } = require('../sdt-value-error-subcodes');\n\nconst { create: createField } = SDTField;\n\nconst ParseInteger = {};\n\n// Util: decode 1, 2, 3, 4 byte UINT.\nParseInteger.autoDecodeVarLengthNumber = function autoDecodeVarLengthNumber(dataBuf, pos, len) {\n  if ([1, 2, 3, 4].includes(len)) {\n    return dataBuf.readUIntBE(pos, len);\n  }\n  return false;\n};\n\n// Parse an integer SDT Field: [U]INT 8, 16, 32, 64.\nParseInteger.parseIntegerField = function parseIntegerField(isSigned, dataBuf, pos, len) {\n  let val = 0;\n\n  switch (len) {\n    case 1:\n      if (isSigned) {\n        val = dataBuf.readInt8(pos);\n        return createField(SDTFieldType.INT8, val);\n      } // else unsigned:\n      val = dataBuf.readUInt8(pos);\n      return createField(SDTFieldType.UINT8, val);\n\n    case 2:\n      if (isSigned) {\n        val = dataBuf.readInt16BE(pos);\n        return createField(SDTFieldType.INT16, val);\n      } // else signed:\n      val = dataBuf.readUInt16BE(pos);\n      return createField(SDTFieldType.UINT16, val);\n\n    case 4:\n      if (isSigned) {\n        val = dataBuf.readInt32BE(pos);\n        return createField(SDTFieldType.INT32, val);\n      } // else signed:\n      val = dataBuf.readUInt32BE(pos);\n      return createField(SDTFieldType.UINT32, val);\n\n    case 8:\n      {\n        let error = null;\n        const longValue =\n          Long.fromBits(dataBuf.readUInt32BE(pos + 4), dataBuf.readUInt32BE(pos), !isSigned);\n        if (longValue.getNumBitsAbs() > 48) {\n          error = new SDTUnsupportedValueError('Value is not supported',\n            SDTValueErrorSubcode.VALUE_OUTSIDE_SUPPORTED_RANGE,\n            dataBuf.toString('latin1', pos, len));\n        }\n        val = longValue.toNumber();\n        const field = createField(isSigned ? SDTFieldType.INT64 : SDTFieldType.UINT64, val);\n        if (error) {\n          field.setError(error);\n        }\n\n        return field;\n      }\n\n    default:\n      return null;\n  }\n};\n\nmodule.exports.ParseInteger = ParseInteger;\n","const ParseSingleElementLib = require('./parse-single-element');\nconst { LOG_ERROR } = require('solclient-log');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTMapContainer } = require('../sdt-map-container');\n\nconst ParseMap = {};\nParseMap.parseMapAt = function parseMapAt(dataBuf, offset, datalen) {\n  const mapObj = new SDTMapContainer();\n  let pos = offset;\n  while (pos < offset + datalen) {\n    // === key field ===\n    const keyFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    pos += keyFieldHeader[3]; // consumed bytes\n    // pos now points to start of string\n    if (keyFieldHeader[0] !== SDTDataTypes.String) {\n      // Fail!\n      LOG_ERROR(\"Error parsing SDTMAP, expected to find a string field as map key, and didn't\");\n      LOG_ERROR(`Type of key: ${keyFieldHeader[0]}`);\n      return SDTField.create(SDTFieldType.MAP, null);\n    }\n    const keyString = dataBuf.toString('latin1', pos, pos + keyFieldHeader[2] - 1);\n    pos += keyFieldHeader[2];\n\n    // === value field ===\n    // pos now points to start of next value\n    const valueFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    const valueField = ParseSingleElementLib.ParseSingleElement.parseSingleElement(dataBuf, pos);\n    pos += valueFieldHeader[1]; // declared field length\n    if (valueField) {\n      mapObj.addField(keyString, valueField);\n    }\n  }\n  return SDTField.create(SDTFieldType.MAP, mapObj);\n};\n\nmodule.exports.ParseMap = ParseMap;\n","const { Convert } = require('solclient-convert');\nconst { LOG_DEBUG } = require('solclient-log');\nconst { ParseDestination } = require('./parse-destination');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { ParseFloat } = require('./parse-float');\nconst { ParseInteger } = require('./parse-integer');\nconst { ParseMap } = require('./parse-map');\nconst { ParseStream } = require('./parse-stream');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\n\nconst {\n  utf8ToUcs2,\n} = Convert;\nconst { parseFieldHeader } = ParseFieldHeader;\nconst { parseFloatField } = ParseFloat;\nconst { parseIntegerField } = ParseInteger;\nconst { parseMapAt } = ParseMap;\nconst { parseStreamAt } = ParseStream;\nconst { parseDestination } = ParseDestination;\n\nconst ParseSingleElement = {\n  // Parse single SDT element, returns SDTField\n  parseSingleElement(dataBuf, offset) {\n    const fieldHeader = parseFieldHeader(dataBuf, offset);\n    if (!fieldHeader) {\n      LOG_DEBUG(`parseSingleElement return false, fieldHeader=${fieldHeader}`);\n      return null;\n    }\n\n    const pos = offset + fieldHeader[3];\n\n    // For use inside switch\n    const elemValLen = fieldHeader[2];\n\n    switch (fieldHeader[0]) {\n      case SDTDataTypes.Null:\n        return SDTField.create(SDTFieldType.NULLTYPE, null);\n      case SDTDataTypes.Boolean:\n        return SDTField.create(SDTFieldType.BOOL, dataBuf.readUInt8(pos) !== 0);\n      case SDTDataTypes.Integer:\n        return parseIntegerField(true, dataBuf, pos, elemValLen);\n      case SDTDataTypes.UnsignedInteger:\n        return parseIntegerField(false, dataBuf, pos, elemValLen);\n      case SDTDataTypes.Float:\n        return parseFloatField(dataBuf, pos, elemValLen);\n      case SDTDataTypes.Char:\n        return SDTField.create(SDTFieldType.WCHAR,\n                               String.fromCharCode(dataBuf.readUInt16BE(pos)));\n      case SDTDataTypes.ByteArray:\n        return SDTField.create(SDTFieldType.BYTEARRAY,\n                               dataBuf.slice(pos, pos + elemValLen));\n      case SDTDataTypes.String:\n        // strip last byte (null-terminator)\n        return SDTField.create(SDTFieldType.STRING,\n                               utf8ToUcs2(dataBuf.toString('latin1', pos, pos + elemValLen - 1)));\n      case SDTDataTypes.Destination:\n        return parseDestination(dataBuf, pos, elemValLen);\n      case SDTDataTypes.SMFMessage:\n        return SDTField.create(SDTFieldType.SMF_MESSAGE, dataBuf.slice(pos, pos + elemValLen));\n      case SDTDataTypes.Map:\n        return parseMapAt(dataBuf, pos, elemValLen);\n      case SDTDataTypes.Stream:\n        return parseStreamAt(dataBuf, pos, elemValLen);\n      default:\n        // removed toString conversion as a test\n        return SDTField.create(SDTFieldType.UNKNOWN,\n                               dataBuf.toString('latin1', pos, pos + elemValLen));\n    }\n  },\n};\n\nconst StringToBuffer = {\n  stringToBuffer(str) {\n    const BufferImpl = require('buffer').Buffer;\n    return BufferImpl.from(str, 'latin1');\n  },\n};\n\nmodule.exports.ParseSingleElement = ParseSingleElement;\nmodule.exports.StringToBuffer = StringToBuffer;\n","const ParseSingleElementLib = require('./parse-single-element');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTStreamContainer } = require('../sdt-stream-container');\n\nconst ParseStream = {};\nParseStream.parseStreamAt = function parseStreamAt(dataBuf, offset, datalen) {\n  const streamObj = new SDTStreamContainer();\n  let pos = offset;\n  while (pos < offset + datalen) {\n    const valueFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    const valueField = ParseSingleElementLib.ParseSingleElement.parseSingleElement(dataBuf, pos);\n    pos += valueFieldHeader[1]; // declared field length\n    if (valueField) {\n      streamObj.addField(valueField);\n    }\n  }\n  return SDTField.create(SDTFieldType.STREAM, streamObj);\n};\n\nmodule.exports.ParseStream = ParseStream;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SDTDataTypes = {\n  Null:            0x00,\n  Boolean:         0x01,\n  Integer:         0x02,\n  UnsignedInteger: 0x03,\n  Float:           0x04,\n  Char:            0x05,\n  ByteArray:       0x06,\n  String:          0x07,\n  Destination:     0x08,\n  SMFMessage:      0x09,\n  Map:             0x0A,\n  Stream:          0x0B,\n};\n\nmodule.exports.SDTDataTypes = Enum.new(SDTDataTypes);\n","const { DestinationType } = require('solclient-destination');\nconst { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of all SDT data types.\n * @enum {number}\n * @namespace\n * @memberof solace\n * @private\n */\nconst SDTDestType = {\n  [DestinationType.TOPIC]:           0x00,\n  [DestinationType.QUEUE]:           0x01,\n  [DestinationType.TEMPORARY_QUEUE]: 0x01,\n};\n\nmodule.exports.SDTDestType = Enum.new(SDTDestType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of all SDT data types.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SDTFieldType = {\n  /**\n   * @type {Number}\n   * @description Maps to a boolean.\n   */\n  BOOL:        0,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT8:       1,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  INT8:        2,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT16:      3,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  INT16:       4,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT32:      5,\n  /**\n   *@type {Number}\n   * @description Maps to a number.\n   */\n  INT32:       6,\n  /**\n   * @type {Number}\n   * @description Maps to a number. <br>\n   * <strong>Warning:</strong> Supports 48-bit integers (range: 0 to 2<sup>48</sup>-1).\n   * When decoding, only the lower 48 bits are considered significant.\n   */\n  UINT64:      7,\n  /**\n   * @type {Number}\n   * @description Maps to a number. <br>\n   * <strong>Warning:</strong> Supports 48-bit integers + sign (range: -(2<sup>48</sup>-1) to\n   * 2<sup>48</sup>-1). When decoding, only the lower 48 bits are considered significant.\n   */\n  INT64:       8,\n  /**\n   * @type {Number}\n   * @description A single character; maps to a string.\n   */\n  WCHAR:       9,\n  /**\n   * @type {Number}\n   * @description Maps to a string.\n   */\n  STRING:      10,\n  /**\n   * @type {Number}\n   * @description Maps to a Uint8Array.\n   *\n   * Backward compatibility note:\n   * Using the version_10 factory profile or older, the getValue() method of a BYTEARRAY sdtField\n   * returns the byte array in 'latin1' String representation.\n   * Later profiles return a Uint8Array (in the form of a nodeJS Buffer instance in fact)\n   *\n   * When creating a field of type BYTEARRAY, the following datatypes are all accepted as value:\n   *   Buffer (the nodeJS native type or equivalent)\n   *   ArrayBuffer,\n   *   Any DataView or TypedArray,\n   *   'latin1' String for backwards compatibility:\n   *     each character has a code in the range 0-255\n   *     representing exactly one byte in the attachment.\n   */\n  BYTEARRAY:   11,\n  /**\n   * @type {Number}\n   * @description Single-precision float; maps to a number.\n   */\n  FLOATTYPE:   12,\n  /**\n   * @type {Number}\n   * @description Double-precision float; maps to a number.\n   */\n  DOUBLETYPE:  13,\n  /**\n   * @type {Number}\n   * @description Maps to {@link SDTMapContainer}.\n   */\n  MAP:         14,\n  /**\n   * @type {Number}\n   * @description Maps to {@link SDTStreamContainer}.\n   */\n  STREAM:      15,\n  /**\n   * @type {Number}\n   * @description Maps to {@link Destination}.\n   */\n  DESTINATION: 16,\n  /**\n   * @type {Number}\n   * @description Maps to <code>null</code>.\n   */\n  NULLTYPE:    17,\n  /**\n   * @type {Number}\n   * @description Maps to an unknown type.\n   */\n  UNKNOWN:     18,\n  /**\n   * @type {Number}\n   * @description Maps to an encoded SMF message.\n   */\n  SMF_MESSAGE: 19,\n};\n\nmodule.exports.SDTFieldType = Enum.new(SDTFieldType);\n","const SolclientFactoryLib = require('solclient-factory');\nconst { Convert } = require('solclient-convert');\nconst { SDTFieldType } = require('./sdt-field-types');\nconst { validateSdtField } = require('./validate-sdt-field');\n\nconst { anythingToBuffer } = Convert;\nconst { ProfileBinding } = SolclientFactoryLib;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a SDT (Structured Data Type) field. To create an instance of an <code>SDTField</code>,\n * call {@link solace.SDTField.create}.\n *\n * SDTField objects are used in Solace Containers ({@link solace.SDTMapContainer}\n * and {@link solace.SDTStreamContainer}). The <b>deprecated</b> usage of\n * {@link solace.SDTMapContainer#addField} and {@link solace.SDTStreamContainer#addField}\n * take a SDTField object as an argument. The preferred usage is to pass a\n * {@link solace.SDTFieldType} and value as arguments.\n *\n * SDTField objectts must be used as an argument to {@link solace.Message#setSdtContainer}.\n * The only valid SDTField objects for {@link solace.Message#setSdtContainer} are:\n * * {@link solace.SDTFieldType.STREAM}\n * * {@link solace.SDTFieldType.MAP}\n * * {@link solace.SDTFieldType.STRING}\n * @hideconstructor\n * @memberof solace\n */\nclass SDTField {\n\n  /*\n   * @constructor\n   * @param {SDTFieldType} [type=SDTFieldType.NULLTYPE] The field type to construct\n   * @param {*} value The value to be encapsulated\n   * @throws {solace.OperationError} if value does not match type\n   * @private\n   */\n  constructor(type = SDTFieldType.NULLTYPE, value = null) {\n    const err = validateSdtField(type, value);\n    if (err !== null) {\n      throw (err);\n    }\n    this._type = type;\n    if (type === SDTFieldType.BYTEARRAY) {\n      this._value = anythingToBuffer(value);\n    } else {\n      this._value = value;\n    }\n    this._error = undefined;\n  }\n\n  /**\n   * Gets the type of field represented.\n   * @returns {solace.SDTFieldType} The type of field represented.\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * Gets the field value.\n   * @returns {*} Field value (as one of the supported data types).\n   * @throws {solace.SDTUnsupportedValueError} if value found in the field\n   * is not in range supported by the platform/runtime.\n   */\n  getValue() {\n    if (this._error !== undefined) {\n      throw (this._error);\n    }\n    return this.getValueNoThrow();\n  }\n\n  /**\n   * Gets the field value or error object.\n   * @returns {*} Field value (as one of the supported data types) or\n   * {solace.SDTUnsupportedValueError} if value found in the field\n   * is not in range supported by the platform/runtime.\n   * @private\n   */\n  getValueNoThrow() {\n    if (this._error !== undefined) {\n      return this._error;\n    }\n    if (this._type === SDTFieldType.BYTEARRAY && ProfileBinding.value.byteArrayAsString) {\n      return this._value.toString('latin1');\n    }\n    return this._value;\n  }\n\n  /**\n   * Sets an error on the object to be thrown on getValue().\n   * Used only by parse-integer, as it is possible to receive\n   * 64 bit integers that cannot be represented in a javaScript number.\n   * JavaScript numbers are floats and can only hold a 48 bit integer.\n   * @private\n   * @param {solace.SDTUnsupportedValueError} err error object.\n   */\n  setError(err) {\n    this._error = err;\n  }\n\n  toString() {\n    return `[SDTField type:${this._type} value:${this._value}]`;\n  }\n\n  /**\n   * Create a new SDTField instance representing a Value of a given Type.\n   *\n   * @param {solace.SDTFieldType} type The type of field represented.\n   * @param {*} value The corresponding value to store in the field.\n   * @returns {solace.SDTField} The new SDT field with the given type and value\n   * @throws {solace.OperationError} if value does not match type\n   * @static\n   */\n  static create(type, value) {\n    return new SDTField(type, value);\n  }\n\n}\n\nmodule.exports.SDTField = SDTField;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { SDTField } = require('./sdt-field');\n\n/**\n * @classdesc\n * Defines a Structured Data Type (SDT) map container.\n * @memberof solace\n */\nclass SDTMapContainer {\n  /**\n   * @constructor\n   */\n  constructor() {\n    this._map = []; // key-value mappings (keys are strings)\n  }\n\n  /**\n   * Get the list of keys in this map, in unspecified order.\n   * @returns {Array.<String>} Array of defined keys in the map.\n   */\n  getKeys() {\n    return Object.keys(this._map);\n  }\n\n  /**\n   * Return the SDTField with the given key.\n   * @param {String} key The key to look up.\n   * @returns {solace.SDTField} The field referenced by key.\n   */\n  getField(key) {\n    return this._map[key];\n  }\n\n  /**\n   * Delete an SDTField with the given key.\n   * @param {String} key The field key to delete.\n   */\n  deleteField(key) {\n    delete this._map[key];\n  }\n\n  /**\n   * Adds a field to this map. If a key:value mapping already exists for this key, it is replaced.\n   * <p>\n   * @deprecated If <code>typeOrField</code> is a {@link solace.SDTField} instance,\n   * it is added to the map.\n   *\n   * The preferred usage is to pass a {@link solace.SDTFieldType}, then the API will create a\n   * SDTField of this type using <code>value</code> before adding it to the map.\n   *\n   * @param {String} key The key by which to store the given value.\n   * @param {solace.SDTField|solace.SDTFieldType} typeOrField A SDTField instance or SDTFieldType.\n   * @param {*} [value] The value to wrap as an SDTField.\n   * @throws {solace.OperationError} if value does not match type\n   * @throws {solace.SDTUnsupportedValueError} if value is not in range\n   *  supported by the platform/runtime\n   */\n  addField(key, typeOrField, value = undefined) {\n    if (typeOrField instanceof SDTField) {\n      this._map[key] = typeOrField;\n      return;\n    } else if (typeof value !== 'undefined') {\n      this._map[key] = SDTField.create(typeOrField, value);\n      return;\n    }\n    throw new OperationError('Invalid parameters to addField: expected SDTField, or type and value',\n      ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nmodule.exports.SDTMapContainer = SDTMapContainer;\n","const SDTFieldLib = require('./sdt-field');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n/**\n * @classdesc\n * Defines a Structured Data Type (SDT) stream container. A stream is an iterable collection of\n * {@link solace.SDTField}s.\n * @memberof solace\n */\nclass SDTStreamContainer {\n  /**\n   * @constructor\n   */\n  constructor() {\n    this._stream = [];\n    this._writable = true;\n    this._readPt = 0;\n  }\n\n  /**\n   * Returns true if the stream has at least one more {@link solace.SDTField}\n   * at the current position.\n   * @returns {Boolean} true, if there is an available field at the read pointer; false, otherwise.\n   */\n  hasNext() {\n    return (this._stream.length > this._readPt);\n  }\n\n  /**\n   * Returns the next field in the stream and advances the read pointer.\n   * If the end of the stream is reached, it returns undefined.\n   * @returns {solace.SDTField} The next field in the stream.\n   */\n  getNext() {\n    return (this._readPt < this._stream.length) ? this._stream[this._readPt++] : undefined;\n  }\n\n  /**\n   * Rewinds the read pointer to the beginning of the stream. Normally when {@link hasNext}\n   * returns false, a client application must call rewind() to reiterate over the stream's fields.\n   * @throws {@link solace.OperationError} if the stream cannot be rewound.\n   */\n  rewind() {\n    this._readPt = 0;\n  }\n\n  /**\n   * Appends a SDTField to the stream.\n   * <p>\n   * If <code>field</code> is a {@link solace.SDTField}, this field is appended to the stream.\n   * <br>\n   * If <code>field</code> is a {@link solace.SDTFieldType},\n   * then the API will create a SDTField of this\n   * type with a value of <code>optValue</code> and append this new SDTField to\n   * the stream.\n   *\n   * @param {solace.SDTField|solace.SDTFieldType} field The field to append to the stream.\n   * @param {*} [optValue] The value to wrap as an SDTField.\n   */\n  /**\n   * Appends a field to this stream.\n   * <p>\n   * @deprecated If <code>typeOrField</code> is a {@link solace.SDTField} instance,\n   * it is appended to the stream.\n   *\n   * The preferred usage is to pass a {@link solace.SDTFieldType}, then the API will create a\n   * SDTField of this type using <code>value</code> and append this new SDTField\n   * to the stream.\n   *\n   * @param {solace.SDTField|solace.SDTFieldType} typeOrField A SDTField instance or SDTFieldType.\n   * @param {*} [value] The value to wrap as an SDTField.\n   * @throws {@link solace.OperationError} if value does not match type\n   * @throws {@link solace.SDTUnsupportedValueError} if value is not in range\n   *  supported by the platform/runtime\n   */\n  addField(typeOrField, value = undefined) {\n    if (!this._writable) return;\n\n    if (typeOrField instanceof SDTFieldLib.SDTField) {\n      this._stream.push(typeOrField);\n      return;\n    }\n\n    if (typeof value !== 'undefined') {\n      this._stream.push(SDTFieldLib.SDTField.create(typeOrField, value));\n      return;\n    }\n\n    throw new OperationError('Invalid parameters to addField: expected SDTField, or type and value',\n      ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nmodule.exports.SDTStreamContainer = SDTStreamContainer;\n","const DebugLib = require('solclient-debug');\nconst { SolaceError } = require('solclient-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a SDT unsupported value error.  An SDT field was assigned a value that is within\n * the type range for the given SDT type, but is not supported on this platform/runtime.\n * This occurs when a received {@link solace.SDTContainerMap} or {@link solace.SDTContainerStream}\n * contains a field with a value that can not represented in the local architecture.\n * Possible causes include:\n * * receive 64 bit integer that cannot be represented accurately in a javaScript number. JavaScript\n *   numbers are floats and can only hold a 48 bit integer without loss of precission. Any integer\n *   greater than 281474976710655 or less than -281474976710655 will cause this exception.\n * @hideconstructor\n * @extends solace.SolaceError\n * @memberof solace\n */\nclass SDTUnsupportedValueError extends SolaceError {\n  /*\n   * @constructor\n   * @param {String} message The message associated with this error\n   * @param {SDTValueErrorSubcode} subcode The subcode associated with this error\n   * @param {Object} sourceData The original representation of the value\n   */\n  constructor(message, subcode, sourceData) {\n    /**\n     * The name of the error.\n     * @name solace.SDTUnsupportedValueError#name\n     * @type {String}\n     * @readonly\n     * @description 'SDTUnsupportedValue'\n     */\n    super('SDTUnsupportedValue', message);\n    /**\n     * The subcode for the error. see {@link solace.SDTValueErrorSubcode}\n     * @name solace.SDTUnsupportedValueError#subcode\n     * @type {solace.SDTValueErrorSubcode}\n     */\n    this.subcode = subcode;\n    this.sourceData = sourceData || '';\n  }\n\n  inspect() {\n    return super.inspect({\n      subcode:    null,\n      sourceData: v => DebugLib.Debug.formatDumpBytes(v, false, 0),\n    });\n  }\n\n  getSubcode() {\n    return this.subcode;\n  }\n\n  getSourceData() {\n    return this.sourceData;\n  }\n}\n\n\nmodule.exports.SDTUnsupportedValueError = SDTUnsupportedValueError;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of {@link solace.SDTUnsuportedValueError} causes.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SDTValueErrorSubcode = {\n  /**\n   * @type {Number}\n   * @description\n   * The value for this field may be valid on other platforms, but is outside the\n   * range that is supported on this platform for the given type.\n   */\n  VALUE_OUTSIDE_SUPPORTED_RANGE: 1,\n};\n\nmodule.exports.SDTValueErrorSubcode = Enum.new(SDTValueErrorSubcode);\n","const DestinationLib = require('solclient-destination');\nconst SDTMapContainerLib = require('./sdt-map-container');\nconst SDTStreamContainerLib = require('./sdt-stream-container');\nconst ValidateLib = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { SDTFieldType } = require('./sdt-field-types');\n\nconst baseTypes = (() => {\n  const result = [];\n  result[SDTFieldType.BOOL] = 'boolean';\n  result[SDTFieldType.UINT8] = 'number';\n  result[SDTFieldType.INT8] = 'number';\n  result[SDTFieldType.UINT16] = 'number';\n  result[SDTFieldType.INT16] = 'number';\n  result[SDTFieldType.UINT32] = 'number';\n  result[SDTFieldType.INT32] = 'number';\n  result[SDTFieldType.UINT64] = 'number';\n  result[SDTFieldType.INT64] = 'number';\n  result[SDTFieldType.WCHAR] = 'string';\n  result[SDTFieldType.STRING] = 'string';\n  result[SDTFieldType.BYTEARRAY] = 'object'; // Uint8Array\n  result[SDTFieldType.FLOATTYPE] = 'number';\n  result[SDTFieldType.DOUBLETYPE] = 'number';\n  return result;\n})();\n\nfunction failInvalidParameter(valueType) {\n  return new OperationError(\n            `Invalid SDT type:value combination, expected value type ${valueType}`,\n            ErrorSubcode.PARAMETER_INVALID_TYPE);\n}\n\nfunction validateSdtField(type, value) {\n  if (baseTypes[type]) {\n    if ((baseTypes[type] === 'boolean' && typeof value !== 'boolean') ||\n            (baseTypes[type] === 'number' && typeof value !== 'number') ||\n            (baseTypes[type] === 'string' && typeof value !== 'string')) {\n      return failInvalidParameter(baseTypes[type]);\n    }\n  }\n  if (type === SDTFieldType.MAP &&\n      !ValidateLib.Check.instanceOf(value, SDTMapContainerLib.SDTMapContainer)) {\n    return failInvalidParameter('SDTMapContainer');\n  }\n  if (type === SDTFieldType.STREAM &&\n      !ValidateLib.Check.instanceOf(value, SDTStreamContainerLib.SDTStreamContainer)) {\n    return failInvalidParameter('SDTStreamContainer');\n  }\n  if (type === SDTFieldType.DESTINATION &&\n      !ValidateLib.Check.instanceOf(value, DestinationLib.Destination)) {\n    return failInvalidParameter('Destination');\n  }\n  return null;\n}\n\nmodule.exports.validateSdtField = validateSdtField;\n","const { AuthenticationScheme } = require('./lib/authentication-schemes');\nconst { CapabilityType, ClientCapabilityType } = require('./lib/capability-types');\nconst { MessageRxCBInfo } = require('./lib/message-rx-cb-info');\nconst { MutableSessionProperty } = require('./lib/mutable-session-properties');\nconst { Session } = require('./lib/session');\nconst { SessionEvent } = require('./lib/session-event');\nconst { SessionEventCBInfo } = require('./lib/session-event-cb-info');\nconst { SessionEventCode } = require('./lib/session-event-codes');\nconst { SessionEventName } = require('./lib/session-event-names');\nconst { SessionProperties } = require('./lib/session-properties');\nconst { SessionState } = require('./lib/session-states');\n\nconst { SolclientFactory } = require('solclient-factory');\nconst { SslDowngrade } = require('./lib/ssl-downgrades');\n\n/**\n * Creates a session instance.\n * @param {solace.SessionProperties} sessionProperties Properties to configure the session.\n * @param {solace.MessageRxCBInfo} [messageCallbackInfo] <b>Deprecated:</b>\n *    Callback method for messages.  Instead applications should receive message events via\n *    `session.on(solace.SessionEventCode.MESSAGE, (message) => { ... });`\n * @param {solace.SessionEventCBInfo} [eventCallbackInfo] <b>Deprecated:</b> Callback method for\n *    events on the <i>Session</i>. Instaead applications should receive session events via\n *    `session.on(solace.SessionEventCode.<code>, (event) => { ... });`\n * @returns {solace.Session} The newly-created session.\n * @throws {solace.OperationError} if the parameters have an invalid type or value.\n *                          Subcode: {@link ErrorSubcode.PARAMETER_INVALID_TYPE}.\n * @method\n * @name solace.SolclientFactory.createSession\n */\nSolclientFactory.createSession = SolclientFactory.createFactory(\n  (sessionProperties, messageCallbackInfo, eventCallbackInfo) =>\n    new Session(sessionProperties, messageCallbackInfo, eventCallbackInfo));\n\nmodule.exports.AuthenticationScheme = AuthenticationScheme;\nmodule.exports.CapabilityType = CapabilityType;\nmodule.exports.ClientCapabilityType = ClientCapabilityType;\nmodule.exports.MessageRxCBInfo = MessageRxCBInfo;\nmodule.exports.MutableSessionProperty = MutableSessionProperty;\nmodule.exports.Session = Session;\nmodule.exports.SessionEventCBInfo = SessionEventCBInfo;\nmodule.exports.SessionEventCode = SessionEventCode;\nmodule.exports.SessionEvent = SessionEvent;\nmodule.exports.SessionEventName = SessionEventName;\nmodule.exports.SessionProperties = SessionProperties;\nmodule.exports.SessionState = SessionState;\nmodule.exports.SslDowngrade = SslDowngrade;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents authentication schemes that can be used. The corresponding session\n * property is {@link solace.SessionProperties#authenticationScheme}.\n *\n * @readonly\n * @enum {String}\n * @memberof solace\n * @namespace\n */\nconst AuthenticationScheme = {\n  /**\n   * @description Username/Password based authentication scheme.\n   * @type {String}\n   */\n  BASIC:                       'AuthenticationScheme_basic',\n  /**\n   * @name solace.AuthenticationScheme.CLIENT_CERTIFICATE\n   * @default AuthenticationScheme_clientCertificate\n   * @description Client-side certificate based authentication scheme.\n   * @see {@link solace.SessionProperties#sslPfx}\n   * @see {@link solace.SessionProperties#sslPfxPassword}\n   * @see {@link solace.SessionProperties#sslPrivateKey}\n   * @see {@link solace.SessionProperties#sslPrivateKeyPassword}\n   * @see {@link solace.SessionProperties#sslCertificate}\n   * @type {String}\n   * @target node\n   */\n  /**\n   * @description Client-side certificate based authentication scheme.  The certificate and\n   *   private key are provided by the browser.\n   * @type {String}\n   * @target browser\n   */\n  CLIENT_CERTIFICATE:          'AuthenticationScheme_clientCertificate',\n  /**\n   * @deprecated Use {@link solace.AuthenticationScheme.BASIC} instead.\n   * @type {String}\n   */\n  AUTHENTICATION_SCHEME_BASIC: 'AuthenticationScheme_basic',\n\n  /**\n   * @deprecated Use {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} instead.\n   * @type {String}\n   */\n  AUTHENTICATION_SCHEME_CLIENT_CERTIFICATE: 'AuthenticationScheme_clientCertificate',\n\n  /**\n   * @default AuthenticationScheme_oauth2\n   * @description Oauth2 authentication scheme.\n   * @see {@link solace.SessionProperties#accessToken}\n   * @see {@link solace.SessionProperties#idToken}\n   * @see {@link solace.SessionProperties#issuerIdentifier}\n   * @type {String}\n   */\n  OAUTH2: 'AuthenticationScheme_oauth2',\n};\n\nmodule.exports.AuthenticationScheme = Enum.new(AuthenticationScheme);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of peer capabilities.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CapabilityType = {\n  /**\n   * Peer's software load version. Type: string.\n   */\n  PEER_SOFTWARE_VERSION:        0,\n  /**\n   * Peer's software release date. Type: string.\n   */\n  PEER_SOFTWARE_DATE:           1,\n  /**\n   * Peer's platform. Type: string.\n   */\n  PEER_PLATFORM:                2,\n  /**\n   * Speed (in Mbps) of the port the client connects to. Type: number.\n   */\n  PEER_PORT_SPEED:              3,\n  /**\n   * Type of the port the client has connected to (currently 0: Ethernet). Type: number.\n   */\n  PEER_PORT_TYPE:               4,\n  /**\n   * Maximum size of a Direct message (in bytes), including all optional message headers and data.\n   * Type: number.\n   */\n  MAX_DIRECT_MSG_SIZE:          5,\n  /**\n   * Peer's router name. Type: string.\n   *\n   * This property is useful when sending SEMP requests to a peer's SEMP topic, which may be\n   * constructed as `#P2P/routername/#client/SEMP`.\n   */\n  PEER_ROUTER_NAME:             6,\n  /**\n   * Peer supports message eliding. Type: boolean.\n   */\n  MESSAGE_ELIDING:              7,\n  /**\n   * Peer supports NoLocal option (client may avoid receiving messages published by itself).\n   */\n  NO_LOCAL:                     8,\n  /**\n   * Peer supports Guaranteed Message Consumer connections for receiving guaranteed messages.\n   */\n  GUARANTEED_MESSAGE_CONSUME:   9,\n  /**\n   * Peer supports temporary endpoints.\n   */\n  TEMPORARY_ENDPOINT:           10,\n  /**\n   * Peer supports Guaranteed Message Publisher connections for sedning guaranteed messages.\n   */\n  GUARANTEED_MESSAGE_PUBLISH:   11,\n  /**\n   * Peer supports Guaranteed Messages Browser connections for receiving guaranteed messages\n   */\n  GUARANTEED_MESSAGE_BROWSE:    12,\n  /**\n   * Peer supports creating/modify/disposing endpoints.\n   */\n  ENDPOINT_MGMT:                13,\n  /**\n   * Peer supports selectors on Guaranteed Message Consumers.\n   */\n  SELECTOR:                     14,\n  /**\n   * Maximum size of a Direct message (in bytes), including all optional message headers and data.\n   * Type: number.\n   */\n  MAX_GUARANTEED_MSG_SIZE:      15,\n  /**\n   * Peer supports Guaranteed Messaging Consumer state change updates. Type: boolean\n   */\n  ACTIVE_CONSUMER_INDICATION:   16,\n  /**\n   * Peer accepts compressed (DEFLATE) data. Type: boolean.\n   */\n  COMPRESSION:                  17,\n  /**\n   * Peer supports Guaranteed Messaging cut-through. Type: boolean\n   */\n  CUT_THROUGH:                  18,\n  /**\n   * Peer supports provisioned queue and topic-endpoint discard behavior. Type: boolean\n   */\n  ENDPOINT_DISCARD_BEHAVIOR:    19,\n  /**\n   * Peer supports Guaranteed Messaging message TTL and Dead-Message Queues. Type: boolean\n   */\n  ENDPOINT_MESSAGE_TTL:         20,\n  /**\n   * Peer accepts JNDI queries. Type: boolean.\n   */\n  JNDI:                         21,\n  /**\n   * Peer supports per topic sequence numbering for Guaranteed Messaging messages. Type: boolean\n   */\n  PER_TOPIC_SEQUENCE_NUMBERING: 22,\n  /**\n   * Peer supports QueueSubscriptionAdd for managing subscriptions on queue endpoints.\n   * Type: boolean\n   */\n  QUEUE_SUBSCRIPTIONS:          23,\n  /**\n   * Peer supports add/remove subscriptions for a specified clientName. Type: boolean\n   */\n  SUBSCRIPTION_MANAGER:         24,\n  /**\n   * Peer supports transacted sessions. Type: boolean.\n   */\n  TRANSACTED_SESSION:           25,\n  /**\n   * Peer support Message Replay. Type: boolean.\n   */\n  MESSAGE_REPLAY:               26,\n  /**\n   * Peer supports TLS downgrade to compression (encrypted and plaintext) Type: boolean\n   */\n  COMPRESSED_SSL:               27,\n  /**\n   * The peer can support \\#share and \\#noexport subscriptions\n   * Type: Boolean\n   */\n  SHARED_SUBSCRIPTIONS:         28,\n  /**\n   * The EndpointErrorId in replay bind responses can be trusted.\n   */\n  BR_REPLAY_ERRORID:            29,\n};\n\n/**\n * Represents an enumeration of client capabilities.\n * These are sent in the ClientCtrl login messages.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst ClientCapabilityType = {\n  /**\n   * Client implements acknowledgements to router unsolicited unbinds.\n   * Always true.\n   */\n  UNBIND_ACK: 0,\n  /**\n   * Indicates whether a client will process an EndpointErrorId in a BindResponse message.\n   * Always true\n   */\n  BR_ERRORID: 1,\n};\nmodule.exports.CapabilityType = Enum.new(CapabilityType);\nmodule.exports.ClientCapabilityType = Enum.new(ClientCapabilityType);\n","class CorrelatedRequest {\n  /**\n   * Creates an instance of CorrelatedRequest.\n   * @param {String} correlationTag The associated tag\n   * @param {?} timer The opaque timer handle\n   * @param {String} correlationKey The associated key\n   * @param {function} respRecvdCallback The associated callback\n   * @memberof CorrelatedRequest\n   * @private\n   */\n  constructor(correlationTag, timer, correlationKey, respRecvdCallback) {\n    this.correlationTag = correlationTag;\n    this.timer = timer;\n    this.correlationKey = correlationKey;\n    this.respRecvdCallback = respRecvdCallback;\n  }\n}\n\nmodule.exports.CorrelatedRequest = CorrelatedRequest;\n","const { CapabilityType } = require('./capability-types');\n\nmodule.exports.DefaultCapabilities = {\n  createDefaultCapabilities(sessionProperties) {\n    const defaultCapabilities = {\n      [CapabilityType.GUARANTEED_MESSAGE_CONSUME]: true,\n      [CapabilityType.GUARANTEED_MESSAGE_PUBLISH]: true,\n      [CapabilityType.SHARED_SUBSCRIPTIONS]:       true,\n      // The others are set TRUE by CCSMP, but not relevant for us yet\n      // [CapabilityType.TEMPORARY_ENDPOINT]:   true,\n      // [CapabilityType.GUARANTEED_MESSAGE_BROWSE]:         true,\n      // [CapabilityType.ENDPOINT_MGMT]:        true,\n      // [CapabilityType.SELECTOR]:             true,\n      // [CapabilityType.COMPRESSION]:          true,\n      // [CapabilityType.CUT_THROUGH]:          true,\n      // [CapabilityType.QUEUE_SUBSCRIPTIONS]:  true,\n      // [CapabilityType.SUBSCRIPTION_MANAGER]: true,\n      [CapabilityType.MAX_GUARANTEED_MSG_SIZE]: sessionProperties.assumedMaxAdSize,\n    };\n    return defaultCapabilities;\n  },\n};\n","const { Process } = require('solclient-util');\n\nconst C_2_32 = Math.pow(2, 32);\n\nfunction leftPad(str, len) {\n  if (len > str.length) {\n    return '0'.repeat(len - str.length) + str;\n  }\n  return str;\n}\n\nfunction generateRandomId() {\n  const rand = (Math.random() * C_2_32).toFixed(0);\n  return leftPad(rand.toString(), 10);\n}\n\n/**\n * @private\n */\nconst GlobalContext = {\n\n  sessionCounter: 0,\n  idCounter:      0,\n\n  RandId: generateRandomId(),\n\n  NextSessionCounter() {\n    const count = ++this.sessionCounter;\n    return leftPad(count.toString(), 4);\n  },\n\n  NextId() {\n    return ++this.idCounter;\n  },\n\n  GenerateClientName() {\n    const { product, platform } = Process;\n    const result = `${product}/${platform}/${this.RandId}/${this.NextSessionCounter()}`;\n    return result;\n  },\n\n  GenerateUserIdentification() {\n    const { product, platform } = Process;\n    return `${product}/${platform}/${this.RandId}`;\n  },\n\n  GenerateClientDescription() {\n    return `solclientjs/${Process.description}`.substring(0, 254);\n  },\n};\n\nmodule.exports.GlobalContext = GlobalContext;\n","const { LOG_TRACE } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\n\nlet hostListDNSFilter;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-env node */\n  /* eslint-disable global-require */\n  const dns = require('dns');\n  /* eslint-enable global-require */\n\n  // util.promisify is Node 8. This converts an (err, result) callback to a promise.\n  // The purpose is to allow us to use Promise.all, which deals with waiting until\n  // all promises are resolved, and returning the results in correctly ordered array.\n  const dnsLookupPromise = (url, options) => new Promise((resolve) => {\n    const host = parseURL(url).hostname;\n    LOG_TRACE('looking up', url, '=>', host);\n    dns.lookup(host, options, (error, result) => {\n      LOG_TRACE('DNS result', error, result);\n      return error === null\n        ? resolve({ url, host, address: result, resolved: true })\n        : resolve(\n          { url,\n            host,\n            resolved: true,\n            error:    {\n              code:     error['code'], // eslint-disable-line dot-notation\n              errno:    error['errno'], // eslint-disable-line dot-notation\n              hostname: error['hostname'], // eslint-disable-line dot-notation\n              syscall:  error['syscall'], // eslint-disable-line dot-notation\n            },\n          });\n    });\n  });\n\n  /**\n   * Resolution calls back with an array of the following:\n   * `{ url: 'http://example.com/foo', host: 'example.com', address: '10.0.0.1', resolved: true }`\n   * or, on error\n   * `{ url: 'http://example.com/foo', host: 'example.com', resolved: true, error: {\n   *    code: 'ENOTFOUND', errno: 'ENOTFOUND', syscall: 'getaddrinfo'\n   *  } }`\n   *\n   * If resolution could not be performed, because of platform limitations, the callback receives\n   * the following:\n   * `{ url: 'http://example.com/foo', host: 'example.com', address: 'example.com', resolved: false }`\n   *\n   * Even if no DNS lookup is performed, the function can still fail if an invalid URL is provided.\n   *\n   * The function always calls back asynchronously.\n   *\n   * @param {Array.<String>} urls Array of URLs to resolve\n   * @param {function} cb A function called back with results as described above\n   * @private\n   */\n  hostListDNSFilter = function hostListDNSFilterNode(urls, cb) {\n    const promises = urls.map(url => dnsLookupPromise(\n      url,\n      { 'verbatim': true }\n    ));\n    // Call back (null, [{host:, address:}, ...]) if all successful\n    // Call back (err, undefined) fast if any error\n    Promise.all(promises).then(resolved => cb(null, resolved)).catch(err => cb(err));\n  };\n} else {\n  /* eslint-env browser */\n  // Create an always-async callback that allows all hosts.\n  //hostListDNSFilter = (urls, cb) => setImmediate(() => {\n  hostListDNSFilter = (urls, cb) => setTimeout(() => {\n    try {\n      const result = urls.map((url) => {\n        const host = parseURL(url).host;\n        return { url, host, address: host, resolved: false };\n      });\n      return cb(null, result);\n    } catch (e) {\n      return cb(e);\n    }\n  }, 0);\n}\n\nmodule.exports.hostListDNSFilter = hostListDNSFilter;\n","const { assert } = require('solclient-eskit');\nconst { hostListDNSFilter } = require('./host-list-dns-filter');\nconst { LogFormatter } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\n\nfunction parseURLs(rawURLs) {\n  if (Array.isArray(rawURLs)) {\n    return rawURLs.map(rawURL => parseURL(rawURL));\n  }\n  return parseURLs(rawURLs.split(/[,;]/));\n}\n\n/*\n *   \"When using a host list, each time the API works through the host list without establishing\n *    a connection is considered an connect retry.\"\n *   SESSION_CONNECT_RETRIES: \"When using a host list, this property defines how many times to\n *    try to connect or reconnect to a single host before moving to the next host in the list.\"\n *   Details: http://docs.solace.com/Solace-Messaging-APIs/Configuring-Connection-T.htm\n*/\n\n// In general:\n// * set initial state to invalid so that we begin needing a transition.\n// * preincrement all try counts on transition.\n// Specifics:\n// * Select try count for entire list based on whether we were connected.\n// * Try count per host is the same for both connect and reconnect.\n// * When the host changes, the waitTime is 0.\n// * Overriding the above, when the host pointer wraps to 0, the waitTime is nonzero.\n\nclass HostInfo {\n  constructor(props = { url: null, waitTime: 0 }) {\n    Object.assign(this, props);\n  }\n}\n\n/**\n * @private\n */\nclass HostList {\n  constructor({\n    url,\n    connectRetries,\n    reconnectRetries,\n    connectRetriesPerHost,\n    reconnectRetryWaitInMsecs,\n  } = {}) {\n    Object.assign(this, {\n      hosts: parseURLs(url).map(e => e.href),\n\n      // How many times will we traverse the host list without success?\n      // Try to connect one more than the 'retryCount' because we always try once.\n      connectTryCount: (connectRetries === -1\n        ? Number.POSITIVE_INFINITY\n        : connectRetries + 1\n      ),\n\n      // How many times will we traverse the host list after success?\n      reconnectTryCount: (reconnectRetries === -1\n        ? Number.POSITIVE_INFINITY\n        : reconnectRetries\n      ),\n\n      // A value of –1 in the next assignements means retry forever - \"null\" will mean that\n      // try to connect one more than the 'retryCount' because we always try once.\n      connectTryCountPerHost: (connectRetriesPerHost === -1\n        ? Number.POSITIVE_INFINITY\n        : connectRetriesPerHost + 1\n      ),\n\n      // How long do we wait before reattempting the same host or wrapping around the list?\n      reconnectRetryWaitInMsecs,\n\n      // Mutating operations affect only this.\n      _mutableState: {},\n\n      logger: new LogFormatter('[host-list]'),\n    });\n\n    assert(this.hosts.length >= 1);\n    assert(this.connectTryCount >= 1);\n    assert(this.reconnectTryCount >= 0);\n    assert(this.connectTryCountPerHost >= 1);\n  }\n\n  /**\n   * Call before first getNextHost() to validate that at least one URL contains a reachable\n   * hostname.\n   * @param {function(Error)} callback The callback to invoke when DNS resolution completes\n   */\n  resolveHosts(callback) {\n    const { LOG_TRACE, LOG_WARN } = this.logger;\n    hostListDNSFilter(this.hosts, (err, resolved) => {\n      // Exit immediately if the filter threw.\n      if (err) return callback(err);\n      assert(resolved.length === this.hosts.length, 'Resolve did not return a result for all hosts');\n\n      LOG_TRACE('Resolve result', resolved);\n      let succeeded = 0;\n      resolved.forEach((result) => {\n        if (result.address) {\n          ++succeeded;\n        }\n        if (!result.resolved) {\n          // Only log if the lookup was actually performed\n          return;\n        }\n        if (result.address) {\n          LOG_TRACE('DNS resolve OK:    ', result.address, 'for', result.url);\n        } else {\n          LOG_WARN('DNS resolve FAILED:', result.error.code,\n                   `${result.error.syscall}('${result.error.hostname}')`, 'for', result.url);\n        }\n      });\n      return callback(succeeded === 0 ? 'All hosts failed DNS resolution' : null);\n    });\n  }\n\n  /**\n   * @param {Object} state Properties for host selection logic\n   * @memberof HostList\n   */\n  reset(state = { wasConnected: false, disconnected: false }) {\n    // On reset, we always return to the beginning of the host list.\n    // This facilitates DR recovery by returning to the primary router.\n    // Set an invalid initial state that will trigger our first try.\n    Object.assign(this._mutableState, {\n      wasConnected: state.wasConnected,\n      disconnected: state.disconnected,\n      hostPointer:  0,\n      hostTries:    0,\n      listTries:    1,\n      exhausted:    false,\n      lastHostInfo: new HostInfo(),\n    });\n  }\n\n  /**\n   * !returns {HostInfo} Connection information for the next host.\n   * @returns {String} The URL for the next host\n   * @memberof HostList\n   */\n  getNextHost() {\n    const { LOG_TRACE } = this.logger;\n\n    const state = this._mutableState;\n    const wasConnected = state.wasConnected;\n    const lastHostInfo = state.lastHostInfo;\n\n    assert(lastHostInfo, 'Next host request with no prior host info -- did you call reset()?');\n    // Using a try/finally as a \"goto end\" to always log final state. Exceptions not expected\n    // here, although if an assertion fails, the finally log should be helpful.\n    try {\n      // If this was passed into reset, the session is telling us to enforce no more hosts.\n      if (state.disconnected) {\n        LOG_TRACE('Host list set to disconnected, providing null next host');\n        return null;\n      }\n\n      // If exhausted, this function has returned a null url already.\n      assert(!state.exhausted, 'Next host request after host list exhausted');\n\n      // Pull immutable properties from the instance\n      const properties = Object.assign({\n        hosts:        this.hosts,\n        hostTriesMax: this.connectTryCountPerHost,\n        listTriesMax: wasConnected ? this.reconnectTryCount : this.connectTryCount,\n      });\n\n      LOG_TRACE('Getting next host\\n', 'properties', properties, '\\nstate', state);\n      LOG_TRACE('Last host', lastHostInfo);\n\n      // Initial state was valid. This is a host try. Increment.\n      ++state.hostTries;\n      if (state.hostTries > properties.hostTriesMax) {\n        // Increment host pointer, possibly putting it out of bounds.\n        LOG_TRACE(`Exhausted ${state.hostTries} host tries for host ${lastHostInfo.url}.`);\n        ++state.hostPointer;\n        // If the host pointer is out of bounds, we are beginning a new list try.\n        // It was either set out of bounds deliberately by reset() or it was\n        // incremented out of bounds above.\n        if (state.hostPointer >= properties.hosts.length) {\n          // This is a new list try.\n          ++state.listTries;\n          if (state.listTries > properties.listTriesMax) {\n            // Beginning this list try has exceeded our inclusive max. The host list is\n            // exhausted.\n            LOG_TRACE(`Exhausted host list at ${properties.listTriesMax} traversals.`);\n            state.exhausted = true;\n          } else {\n            // Resetting the host pointer to begin this list try.\n            LOG_TRACE(`Host list try (${state.listTries}/${properties.listTriesMax})`);\n            state.hostPointer = 0;\n            state.hostTries = 1; // this is the first try for this host\n          }\n        } else {\n          state.hostTries = 1; // this is the first try for this host\n        }\n      } else {\n        // Continue with this host.\n        LOG_TRACE(`Host try (${state.hostTries}/${properties.hostTriesMax})`);\n      }\n\n      if (state.exhausted) {\n        LOG_TRACE('All hosts exhausted');\n        return null;\n      }\n\n      // Beyond this point, expect a valid host to be returned.\n\n      const url = properties.hosts[state.hostPointer];\n      assert(url, `No host at the host pointer! ${properties.hosts}[${state.hostPointer}]`);\n\n      // Wait time conditions:\n      // 1. On a new list (invalid lastHostInfo), zero waitTime.\n      const isNewList = lastHostInfo.url === null;\n      // 2a. On a new host, zero waitTime...\n      const isNewHost = lastHostInfo.url !== url;\n      // 2b. ...unless we are just restarting the list.\n      const didJustFinishList = lastHostInfo.url !== url && state.hostPointer === 0;\n      // (2b negates 2a for a new list)\n\n      const waitTime = (isNewList || (isNewHost && !didJustFinishList))\n        ? 0\n        : this.reconnectRetryWaitInMsecs;\n\n      // Session FSM was intended to use all of these, but handles its own events presently\n      // and expects waitTime to be a property of the list that mutates per host, so that is\n      // what is done.\n      const hostInfo = new HostInfo({\n        url,\n        waitTime,\n      });\n\n      // Set last host for next time, and return\n      LOG_TRACE('Returning host from', hostInfo);\n      state.lastHostInfo = hostInfo;\n      return hostInfo.url;\n    } finally {\n      LOG_TRACE('Final list state\\n', state);\n    }\n  }\n\n  get connectWaitTimeInMsecs() {\n    assert(this._mutableState.lastHostInfo.url, 'Getting connectWaitTimeInMsecs having never called getNextHostInfo');\n    return this._mutableState.lastHostInfo.waitTime;\n  }\n\n  currentHostToString() {\n    const state = this._mutableState;\n    const wasConnected = state.wasConnected;\n    // Pull immutable properties from the instance\n    const properties = Object.assign({\n      hosts:        this.hosts,\n      hostTriesMax: this.connectTryCountPerHost,\n      listTriesMax: wasConnected ? this.reconnectTryCount : this.connectTryCount,\n    });\n    // host pointer is zero based index into the host list\n    // so translate it to a human readable index\n    const hostNumber = state.hostPointer + 1;\n    return `host '${state.lastHostInfo.url}' (host ${hostNumber} of ${properties.hosts.length})(host connection attempt ${state.hostTries} of ${properties.hostTriesMax})(total ${wasConnected ? 'reconnection' : 'connection'} attempt ${state.listTries} of ${properties.listTriesMax})`;\n  }\n}\n\nmodule.exports.HostList = HostList;\n","/**\n * @classdesc\n *\n * Encapsulates the session's message receive callback function and\n * an optional user-specified object.\n *\n * This class is passed to {@link solace.SolclientFactory.createSession} when creating a session.\n * @deprecated The {@link solace.Session} is an <b>EventEmitter</b>.\n * Use <tt>sessionObject.on({@link solace.SessionEventCode.MESSAGE})</tt> instead.\n *\n * @memberof solace\n */\nclass MessageRxCBInfo {\n\n  /**\n   * Creates an instance of MessageRxCBInfo.\n   *\n   * @param {function(Session, Message, Object)} messageRxCBFunction\n   *          Invoked by the API when a message is received\n   *          over the session. The prototype of this function is the\n   *          following: ({@link solace.Session},\n   *                      {@link solace.Message},\n   *                      {Object})\n   * @param {Object} userObject\n   *          An optional user-specified object passed on every message receive callback.\n   *\n   * @memberof solace\n   */\n  constructor(messageRxCBFunction, userObject) {\n    /**\n     * @type {function(Session, Message, Object)}\n     * @description The prototype of this function is the\n     * following: ({@link solace.Session}, {@link solace.Message}, userObject {Object})\n     */\n    this.messageRxCBFunction = messageRxCBFunction;\n\n    /**\n     * @type {Object}\n     * @description user-specified object\n     */\n    this.userObject = userObject;\n  }\n}\n\nmodule.exports.MessageRxCBInfo = MessageRxCBInfo;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of session properties that can be modified by\n * {@link solace.Session.updateProperty} after the {@link solace.Session} is originally\n * created.\n *\n * These correspond to session properties in {@link solace.SessionProperties}.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MutableSessionProperty = {\n  /**\n   * Client name: {@link solace.SessionProperties#clientName}\n   * @type {Number}\n   */\n  CLIENT_NAME:        1,\n  /**\n   * Application description: {@link solace.SessionProperties#applicationDescription}\n   * @type {Number}\n   */\n  CLIENT_DESCRIPTION: 2,\n};\n\nmodule.exports.MutableSessionProperty = Enum.new(MutableSessionProperty);\n","/**\n * @private\n */\nclass OutstandingDataRequest {\n  constructor(correlationId, timer, replyReceivedCBFunction, reqFailedCBFunction, userObject) {\n    this.correlationId = correlationId;\n    this.timer = timer;\n    this.replyReceivedCBFunction = replyReceivedCBFunction;\n    this.reqFailedCBFunction = reqFailedCBFunction;\n    this.userObject = userObject;\n  }\n}\n\nmodule.exports.OutstandingDataRequest = OutstandingDataRequest;\n","const P2PUtil = {\n  getP2PInboxTopic(base) {\n    return (`${base}/_`);\n  },\n  getP2PTopicSubscription(base) {\n    return (`${base}/>`);\n  },\n};\n\nmodule.exports.P2PUtil = P2PUtil;\n","/**\n * @classdesc\n * Encapsulates the session's event callback function and an optional user-specified object.\n *\n * This class is passed to {@link solace.SolclientFactory.createSession} when creating a session.\n * @deprecated The {@link solace.Session} is an <b>EventEmitter</b>.  Register event handlers\n * against {@link solace.SessionEventCode} events instead.\n *\n * @memberof solace\n */\n\nclass SessionEventCBInfo {\n\n  /**\n   * Creates an instance of SessionEventCBInfo.\n   *\n   * @param {function(Session, SessionEvent, Object, Object)} sessionEventCBFunction\n   *  invoked by the Messaging API when a session event occurs. The prototype\n   *  of this function is the following: ({@link solace.Session},\n   *                                      {@link solace.SessionEvent},\n   *                                      {Object}})\n   * @param {Object} userObject An optional user-specified object passed on\n   * every session event callback.\n   */\n  constructor(sessionEventCBFunction, userObject) {\n    /**\n     * @type {Object}\n     * @description user-specified object\n     */\n    this.userObject = userObject;\n\n    /**\n     * @type {function}\n     * @description The prototype of this function is the\n     * following:\n     * ({@link solace.Session}, {@link solace.SessionEvent},\n     * userObject {Object}, RFUObject {Object})\n     */\n    this.sessionEventCBFunction = sessionEventCBFunction;\n  }\n}\n\nmodule.exports.SessionEventCBInfo = SessionEventCBInfo;\n","const { Enum } = require('solclient-eskit');\n\n\n/**\n * @callback solace.SessionEventCodes.sessionEvent\n * @function\n * @this {solace.Session} The message consumer for the event\n * @param {solace.SessionEvent|solace.OperationError} event The event. If the event is an\n *  error, the event will be an instance of {@link solace.OperationError} but will also be\n *  interface-compatible with {@link solace.SessionEvent}.\n */\n\n\n/**\n * An attribute of {@link SessionEvent}. This enumeration represents the\n * different events emitted by {@link Session} through the session event\n * callback.\n *\n * When a session is no longer in a usable state, the API tears down the underlying\n * connection and notifies the application with one of the following session events:\n *  * {@link solace.SessionEventCode#event:DOWN_ERROR}\n *  * {@link solace.SessionEventCode#event:CONNECT_FAILED_ERROR}\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SessionEventCode = {\n  /**\n   * The Session is ready to send/receive messages and perform control operations.\n   *\n   * At this point the transport session is up, the Session has logged in, and the\n   * P2PInbox subscription is added.\n   *\n   * The session is established.\n   * @event solace.SessionEventCode#UP_NOTICE\n   */\n  UP_NOTICE:                         0,\n  /**\n   * The session was established and then went down.\n   * @event solace.SessionEventCode#DOWN_ERROR\n   * @param {solace.OperationError} error The details related to the session failure.\n   */\n  DOWN_ERROR:                        1,\n  /**\n   * The session attempted to connect but was unsuccessful.\n   * @event solace.SessionEventCode#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error The details related to the failed connection attempt.\n   */\n  CONNECT_FAILED_ERROR:              2,\n  /**\n   * The Solace Message Router rejected a published message.\n   * @event solace.SessionEventCode#REJECTED_MESSAGE_ERROR\n   * @param {solace.RequestError} error The details related to the rejected message.\n   */\n  REJECTED_MESSAGE_ERROR:            4,\n  /**\n   * The Solace Message Router rejected a subscription (add or remove).\n   * @event solace.SessionEventCode#SUBSCRIPTION_ERROR\n   * @param {solace.RequestError} error The details related to the failed subscription update.\n   */\n  SUBSCRIPTION_ERROR:                5,\n  /**\n   * The subscribe or unsubscribe operation succeeded.\n   * @event solace.SessionEventCode#SUBSCRIPTION_OK\n   * @param {solace.SessionEvent} event The details related to the successful subscription update.\n   */\n  SUBSCRIPTION_OK:                   6,\n  /**\n   * The Solace Message Router's Virtual Router Name changed during a reconnect operation.\n   * @event solace.SessionEventCode#VIRTUALROUTER_NAME_CHANGED\n   * @param {solace.SessionEvent} event Information related to the event.\n   */\n  VIRTUALROUTER_NAME_CHANGED:        7,\n  /**\n   * @deprecated\n   * A request was aborted because the session is being disconnected.\n   * Use {@link solace.RequestFailEvent} instead.\n   */\n  REQUEST_ABORTED:                   8,\n  /**\n   * @deprecated\n   * The event represents a timed-out request API call.\n   * Use {@link solace.RequestFailEvent} instead.\n   */\n  REQUEST_TIMEOUT:                   9,\n  /**\n   * The event represents a successful update of a mutable session property.\n   * @event solace.SessionEventCode#PROPERTY_UPDATE_OK\n   * @param {solace.SessionEvent} event Information related to the successful property update.\n   */\n  PROPERTY_UPDATE_OK:                10,\n  /**\n   * The event represents a failed update of a mutable session property.\n   * @event solace.SessionEventCode#PROPERTY_UPDATE_ERROR\n   * @param {solace.RequestError} error The details related to the failed property update.\n   */\n  PROPERTY_UPDATE_ERROR:             11,\n  /**\n   * The session transport can accept data again.  This event will occur after an\n   * {@link solace.OperationError} is thrown from an API call with a subcode of\n   * {@link solace.ErrorSubcode.INSUFFICIENT_SPACE} to indicate the operation can be retried.\n   * This event is used both after session-level transport buffer exhaustion,\n   * and Guaranteed Messaging Window exhaustion.\n   * @event solace.SessionEventCode#CAN_ACCEPT_DATA\n   */\n  CAN_ACCEPT_DATA:                   13,\n  /**\n   * The session connect operation failed, or the session that was once up,\n   * is now disconnected.\n   * @event solace.SessionEventCode#DISCONNECTED\n   */\n  DISCONNECTED:                      14,\n  /**\n   * The session has gone down, and an automatic reconnection attempt is in progress.\n   * @event solace.SessionEventCode#RECONNECTING_NOTICE\n   * @param {solace.SessionEvent} event The details related to the cause of the connection\n   *    interruption.\n   */\n  RECONNECTING_NOTICE:               22,\n  /**\n   * The automatic reconnect of the Session was successful, and the session is established again.\n   * @event solace.SessionEventCode#RECONNECTED_NOTICE\n   * @param {solace.SessionEvent} event The details related to the re-establishment of the\n   *    connection.\n   */\n  RECONNECTED_NOTICE:                23,\n  /**\n   * The session has automatically recovered after the Guaranteed Message publisher\n   * failed to reconnect.\n   * Messages sent but not acknowledged are being renumbered and retransmitted.\n   * Some messages may be duplicated in the system.\n   * @event solace.SessionEventCode#REPUBLISHING_UNACKED_MESSAGES\n   * @param {solace.SessionEvent} event The details related to the republishing of messages on the\n   *    session.  {@link solace.SessionEvent#infoStr} will indicate the number of messages being\n   *    republished, which is an upper bound on the number of messages that could be duplicated due\n   *    to this action.\n   */\n  REPUBLISHING_UNACKED_MESSAGES:     24,\n  /**\n   * A message was acknowledged by the router.\n   * @event solace.SessionEventCode#ACKNOWLEDGED_MESSAGE\n   * @param {solace.SessionEvent} event Allows the acknowledgement to be correlated to the sent\n   *    message.\n   */\n  ACKNOWLEDGED_MESSAGE:              25,\n  /**\n   * Unsubscribing the topic from the Durable Topic Endpoint succeeded.\n   * @event solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_OK\n   */\n  UNSUBSCRIBE_TE_TOPIC_OK:           26,\n  /**\n   * Unsubscribing the topic from the Durable Topic Endpoint failed.\n   * @event solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_ERROR\n   * @param {solace.OperationError} error The details related to the failed attempt to remove the\n   *    subscription from a topic endpoint.\n   */\n  UNSUBSCRIBE_TE_TOPIC_ERROR:        27,\n  /**\n   * A Direct message was received on the session. This event code is only used\n   * on the <b>EventEmitter</b> session interface.  If using the deprecated callback interface,\n   * messages are received via the callback provided in {@link solace.MessageRxCBInfo}.\n   * @event solace.SessionEventCode#MESSAGE\n   * @param {solace.Message} message The message received on the session.\n   */\n  MESSAGE:                           28,\n  /**\n   * Guaranteed Messaging Publisher has been closed by the Solace\n   * message router. This usually indicates an operator has disabled the\n   * message spool.\n   * @event solace.SessionEventCode#GUARANTEED_MESSAGE_PUBLISHER_DOWN\n   * @param {solace.OperationError} error Information related to the error.\n   */\n  GUARANTEED_MESSAGE_PUBLISHER_DOWN: 29,\n};\n\nmodule.exports.SessionEventCode = Enum.new(SessionEventCode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionEventName = {\n  CONNECT:                       'SessionConnect',\n  DISCONNECT:                    'SessionDisconnect',\n  DISPOSE:                       'SessionDispose',\n  CONNECT_TIMEOUT:               'SessionConnectTimeout',\n  CONNECT_WAIT_TIMEOUT:          'SessionConnectWaitTimeout',\n  DOWNGRADE_TIMEOUT:             'SessionDowngradeTimeout',\n  TRANSPORT_UP:                  'SessionTransportUp',\n  TRANSPORT_DESTROYED:           'SessionTransportDestroyed',\n  TRANSPORT_CAN_ACCEPT_DATA:     'SessionTransportCanAcceptData',\n  TRANSPORT_PARSE_ERROR:         'SessionTransportParseError',\n  TRANSPORT_PROTOCOL_SMP:        'SessionSMPMessage',\n  TRANSPORT_PROTOCOL_CLIENTCTRL: 'SessionClientCtrlMessage',\n  EXCEPTION:                     'SessionException',\n  SUBSCRIBE_TIMEOUT:             'SessionSubscribeTimeout',\n  CREATE_SUBSCRIBER:             'SessionCreateSubscriber',\n  FLOW_UP:                       'SessionFlowUp',\n  FLOW_FAILED:                   'SessionFlowFailed',\n  SEND_ERROR:                    'SessionSendError',\n  FLOWS_DISCONNECTED:            'SessionFlowsDisconnected',\n  TRANSPORT_FLUSHED:             'SessionTransportFlushed',\n  DNS_RESOLUTION_COMPLETE:       'SessionDNSResolutionComplete',\n  TRANSPORT_CHANGE_DONE:         'SessionTransportChangeDone',\n};\n\nmodule.exports.SessionEventName = Enum.new(SessionEventName);\n","const { ErrorSubcode,\n        OperationError,\n        RequestError,\n        RequestEventCode } = require('solclient-error');\nconst { SessionEventCode } = require('./session-event-codes');\n\nfunction buildType(Superclass) {\n  /**\n   * @classdesc\n   * Represents a session event; events are passed to the application-provided\n   * event handling callback provided when creating the session.\n   * @memberof solace\n   * @hideconstructor\n   */\n  class SessionEvent extends Superclass {\n    /**\n     * @constructor\n     * @param {Array} superclassArgs Args to pass to super\n     * @param {solace.SessionEventCode} sessionEventCode The event code\n     * @param {String} infoStr Information string\n     * @param {Number} [responseCode] Any associated router response code\n     * @param {solace.ErrorSubcode} [errorSubcode] Any associated error subcode\n     * @param {Object} [correlationKey] Any associated correlation key\n     * @param {String} [reason] Any additional information\n     * @private\n     */\n    constructor(superclassArgs,\n                sessionEventCode,\n                infoStr,\n                responseCode = undefined,\n                errorSubcode = 0,\n                correlationKey = undefined,\n                reason = undefined) {\n      super(...superclassArgs);\n      this._sessionEventCode = sessionEventCode;\n      this._infoStr = infoStr;\n      this._responseCode = responseCode;\n      this._errorSubcode = errorSubcode;\n      this._correlationKey = correlationKey; // optional\n      this._reason = reason; // optional\n    }\n\n    /**\n     * @type {solace.SessionEventCode}\n     * @description Further qualifies the session event.\n     */\n    get sessionEventCode() {\n      return this._sessionEventCode;\n    }\n\n    /**\n     * @type {String}\n     * @description if applicable, an information string returned by the Solace Message Router.\n     */\n    get infoStr() {\n      return this._infoStr;\n    }\n\n    /**\n     * @type {?Number}\n     * @description if applicable, a response code returned by the Solace Message Router.\n     */\n    get responseCode() {\n      return this._responseCode;\n    }\n\n    /**\n     * @type {?solace.ErrorSubcode}\n     * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n     */\n    get errorSubcode() {\n      // _eslint-disable-next-line quote-property\n      return this.subcode || this._errorSubcode;\n    }\n\n    /**\n     * @deprecated Use {@link solace.SessionEvent#errorSubcode} instead.\n     * @readonly\n     */\n    // coverity[identifier_typo]\n    get errorSubCode() {\n      return this.errorSubcode;\n    }\n\n    /**\n     * @type {?Object}\n     * @description A user-specified object\n     * made available in the response or confirmation event by including it as a\n     * parameter in the orignal API call.  If the user did not specify a\n     * correlationKey, it will be <code>null</code>.\n     */\n    get correlationKey() {\n      return this._correlationKey;\n    }\n\n    /**\n     * @type {?String}\n     * @description Additional information if it is applicable.\n     * In case of subscribe or publish errors, it constains the topic.\n     */\n    get reason() {\n      return this._reason;\n    }\n    /**\n     * @param {Object} value The reason info object\n     * @internal\n     */\n    set reason(value) {\n      this._reason = value;\n    }\n\n    [util_inspect_custom]() {\n      // Is this supposed to invoke the custom inspect function of the superclass if it exists?\n      return Object.assign(super[util_inspect_custom] || {}, {\n        'sessionEventCode': SessionEventCode.describe(this.sessionEventCode),\n        'infoStr':          this.infoStr,\n        'responseCode':     this.responseCode,\n        'errorSubcode':     ErrorSubcode.describe(this.errorSubcode),\n        'correlationKey':   this.correlationKey ? this.correlationKey.toString() : null,\n        'reason':           this.reason ? this.reason : null,\n      });\n    }\n\n    toString() {\n      return util_inspect(this);\n    }\n  }\n\n  return SessionEvent;\n}\n\nconst SUPERCLASS_FOR_SESSION_EVENT = {\n  [SessionEventCode.CONNECT_FAILED_ERROR]:              OperationError,\n  [SessionEventCode.DOWN_ERROR]:                        OperationError,\n  [SessionEventCode.GUARANTEED_MESSAGE_PUBLISHER_DOWN]: OperationError,\n  [SessionEventCode.PROPERTY_UPDATE_ERROR]:             RequestError,\n  [SessionEventCode.REJECTED_MESSAGE_ERROR]:            RequestError,\n  [SessionEventCode.SUBSCRIPTION_ERROR]:                RequestError,\n  [SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR]:        OperationError,\n  [RequestEventCode.REQUEST_ABORTED]:                   RequestError,\n  [RequestEventCode.REQUEST_TIMEOUT]:                   RequestError,\n};\n\nconst SUPERCLASS_ARGS = new Map()\n  .set(Object, () => [])\n  .set(OperationError, (sec, infoStr, rc, subcode, ck, reason) => [infoStr, subcode, reason])\n  .set(RequestError, (sec, infoStr, rc, subcode, ck, reason) => [infoStr, sec, ck, reason]);\n\nconst TYPE_CACHE = new Map();\n\nfunction build(sessionEventCode,\n               infoStr,\n               responseCode = undefined,\n               errorSubcode = 0,\n               correlationKey = undefined,\n               reason = undefined) {\n  const Superclass = SUPERCLASS_FOR_SESSION_EVENT[sessionEventCode] || Object;\n  const SessionEvent = (() => {\n    let result = TYPE_CACHE.get(Superclass);\n    if (result) return result;\n    result = buildType(Superclass);\n    TYPE_CACHE.set(Superclass, result);\n    return result;\n  })();\n  const superclassArgsBuilder = (SUPERCLASS_ARGS.get(Superclass) || (() => []));\n  const superclassArgs = superclassArgsBuilder(sessionEventCode,\n                                               infoStr,\n                                               responseCode,\n                                               errorSubcode,\n                                               correlationKey,\n                                               reason);\n  return new SessionEvent(superclassArgs,\n                          sessionEventCode,\n                          infoStr,\n                          responseCode,\n                          errorSubcode,\n                          correlationKey,\n                          reason);\n}\n\n// Expose a type\nconst SessionEvent = buildType(Object);\nSessionEvent.build = build;\n\nmodule.exports.SessionEvent = SessionEvent;\n","const { ErrorSubcode } = require('solclient-error');\nconst { FsmEvent } = require('solclient-fsm');\nconst { Hex } = require('solclient-convert');\n\nconst { formatHexString } = Hex;\n/**\n * SessionFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the SessionFSM.  This extension provides members to carry information specfic to\n * the SessionFSM transitions.\n * @extends FsmEvent\n * @private\n */\nclass SessionFSMEvent extends FsmEvent {\n  constructor(spec, fields) {\n    super(spec);\n    /**\n     * @type {String}\n     * @description Information String for the {SessionEvent}\n     */\n    this.eventText = null;\n    /**\n     * @type {ErrorSubcode}\n     * @description The Solace ErrorSubcode for any generated {SessionEvent}\n     */\n    this.errorSubcode = null;\n    /**\n     * @type {String}\n     * @description The reason string to be included in any generated {SessionEvent}\n     */\n    this.eventReason = null;\n    /**\n     * @type {TransportSMFMessage}\n     * @description A decoded SMF message received from the transport. May be\n     * either a {ClientCtrlMessage} or a {SMPMessage}\n     */\n    this.smfMsg = null;\n    /**\n     * @type {Object}\n     * @description The Transport SessionId retrieved from a {TransportSessionEvent}\n     */\n    this.sessionId = null;\n    /**\n     * @type {Object}\n     * @description The Publisher or Consumer object associated with a GM event.\n     */\n    this.guaranteedFlowObject = null;\n\n    Object.assign(this, fields);\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'eventText':    this.eventText,\n      'eventReason':  this.eventReason,\n      'errorSubcode': ErrorSubcode.describe(this.errorSubcode),\n      'sessionId':    this.sessionId && formatHexString(this.sessionId) || 'N/A',\n    };\n  }\n\n  getExtraStringInfo() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.SessionFSMEvent = SessionFSMEvent;\n","const ConsumerLib = require('solclient-message-consumer');\nconst PublisherLib = require('solclient-message-publisher');\nconst SMFLib = require('solclient-smf');\nconst SolclientFactoryLib = require('solclient-factory');\nconst TransportLib = require('solclient-transport');\n\nconst { assert } = require('solclient-eskit');\nconst { CapabilityType } = require('./capability-types');\nconst { Check } = require('solclient-validate');\nconst { CorrelatedRequest } = require('./correlated-request');\nconst { Destination } = require('solclient-destination');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { FsmEvent,\n        State,\n        StateMachine } = require('solclient-fsm');\nconst { Hex } = require('solclient-convert');\nconst { LogFormatter } = require('solclient-log');\nconst { Message,\n        MessageDeliveryModeType } = require('solclient-message');\nconst { P2PUtil } = require('./p2p-util');\nconst { SessionEvent } = require('./session-event');\nconst { SessionEventCode } = require('./session-event-codes');\nconst { SessionEventName } = require('./session-event-names');\nconst { SessionFSMEvent } = require('./session-fsm-event');\nconst { SessionRequestType } = require('./session-request-types');\nconst { SessionStateName } = require('./session-state-names');\nconst { SslDowngrade } = require('./ssl-downgrades');\nconst { StatType,\n        StatsByMode } = require('solclient-stats');\nconst { StringUtils } = require('solclient-util');\nconst { SubscriptionUpdateTimeoutMessages } = require('./subscription-update-timeout-messages');\n\nconst { formatHexString } = Hex;\nconst { stripNullTerminate } = StringUtils;\nconst { STAT_TX_BYMODE_BYTES,\n        STAT_TX_BYMODE_MSGS,\n        STAT_RX_BYMODE_BYTES,\n        STAT_RX_BYMODE_MSGS,\n        STAT_TX_BYMODE_REDELIVERED,\n        STAT_TX_BYMODE_BYTES_REDELIVERED } = StatsByMode;\n\n/**\n * @param {SessionProperties} sessionProperties The shared reference to the properties of the\n *  owning session\n * @param {Session} session The session owning this FSM\n * @extends StateMachine\n * @private\n */\nclass SessionFSM extends StateMachine {\n  constructor(sessionProperties, session, stats, hosts) {\n    super({ name: 'SessionFSM' });\n    const fsm = this;\n    const logFormatter = function logFormatter(...args) {\n      return [\n        `[session-fsm=${fsm.sessionIdHex || '(N/A)'}]`,\n        `[${fsm.getCurrentStateName()}]`,\n        ...args,\n      ];\n    };\n    const logger = this.logger = new LogFormatter(logFormatter);\n    const { LOG_TRACE, LOG_DEBUG, LOG_INFO } = logger;\n    this.log = logger.wrap(this.log, this);\n    this._sessionProperties = sessionProperties;\n    this._session = session;\n    this._sessionStatistics = stats;\n    this._hosts = hosts;\n    this._consumers = new ConsumerLib.ConsumerFlows();\n    // This is a function that generates this interface. It takes the flow as a construction\n    // parameter, and for some methods, produces a partial application using that flow.\n\n    this._flowInterfaceFactory = flow => ({\n      getCorrelationTag:               this.getCorrelationTag.bind(this),\n      incStat:                         this.incStat.bind(this),\n      sendData:                        message => this.send(message, flow, false),\n      sendToTransport:                 message => this.sendToTransport(message, flow, false),\n      sendControl:                     message => this.send(message, flow, true),\n      enqueueRequest:                  this.enqueueOutstandingCorrelatedReq.bind(this),\n      createDestinationFromDescriptor: session.createDestinationFromDescriptor.bind(session),\n      createTemporaryDestination:      session.createTemporaryDestination.bind(session),\n      isCapable:                       session.isCapable.bind(session),\n      getCapability:                   session.getCapability.bind(session),\n      getCurrentStateName:             this.getCurrentStateName.bind(this),\n      updateQueueSubscription:         session.updateQueueSubscription.bind(session),\n\n      get sessionIdHex() {\n        return fsm.sessionIdHex;\n      },\n      get canAck() {\n        return session.canAck;\n      },\n    });\n\n    // Keeping track of transport backpressure (but not AD window exhaustion),\n    // so we can relieve it on transport reconnect:\n    this._userBackpressured = false;\n\n    this.clearCurrentError();\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.SessionDisconnected,\n                               context => context.getStateMachine().reset());\n    });\n\n    /**\n     * Handles events in the unhandledEventHandler callback\n     * @param {SessionFSMEvent} sEvent\n     * @private\n     */\n    this.unhandledEventReaction(function onUnhandledEvent(sEvent) {\n      const curState = fsm.getCurrentState();\n      switch (sEvent.getName()) {\n        case SessionEventName.CREATE_SUBSCRIBER:\n          // CREATE_SUBSCRIBER is only handled in CONNECTED state.\n          // In all other states we just add the consumer to our\n          // list of unbound consumers that need to be bound when\n          // the session up occurs.\n          assert(fsm._consumers, 'collection has lifetime of FSM instance');\n          fsm._consumers.add(sEvent.guaranteedFlowObject);\n          return this;\n        case SessionEventName.DISPOSE:\n          LOG_DEBUG('Handling DISPOSE');\n          return curState.terminate(() => fsm.disposeInternal());\n        case SessionEventName.FLOW_UP:\n          LOG_DEBUG(`Ignoring FLOW_UP event from ${sEvent.guaranteedFlowObject}`);\n          return this;\n        default:\n          LOG_TRACE(`Ignoring event ${sEvent.getName()} in state ${fsm.getCurrentStateName()}`);\n          return this;\n      }\n    });\n\n    this.SessionConnecting = new State({\n      name:          SessionStateName.CONNECTING,\n      parentContext: fsm,\n    }, {\n      //\n      //  handleTransportDestroyed is called in response to TRANSPORT_DESTROYED\n      //  event and if transport create throws an exception. In both case there is\n      //  no underlying transport and the FSM must move on to the next host.\n      handleTransportDestroyed() {\n        fsm._currentHost = fsm._hosts.getNextHost();\n        if (fsm._currentHost === null) {\n          return this.transitionToExitPoint(fsm.SessionConnecting, 'ErrorExit');\n        }\n\n        const { connectWaitTimeInMsecs } = fsm._hosts;\n        LOG_TRACE(`Wait time for this host is ${connectWaitTimeInMsecs}`);\n        if (connectWaitTimeInMsecs > 0 && !fsm._connectWaitTimer) {\n          fsm._connectWaitTimer = setTimeout(() => {\n            fsm._connectWaitTimer = null;\n            fsm.processEvent(new SessionFSMEvent({ name: SessionEventName.CONNECT_WAIT_TIMEOUT }));\n          }, connectWaitTimeInMsecs);\n          return this.transitionTo(fsm.WaitingForInterConnectTimeout);\n        }\n        return this.transitionTo(fsm.WaitingForTransport);\n      },\n    })\n      .entry(() => {\n        fsm.setConnectTimer();\n      })\n      .entryPoint('DisconnectTransport', function onDisconnectTransport() {\n        fsm._hosts.reset({ wasConnected: undefined, disconnected: true });\n        //\n        // Set the error event, as we have reset the\n        // host list with disconnected:true, we always take the\n        // errorExit path to DISCONNECTED state after this entryPoint.\n        //\n        fsm._connectFailEvent = SessionEventCode.DISCONNECTED;\n        fsm._connectSuccessEvent = SessionEventCode.DISCONNECTED;\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .entryPoint('ReconnectTransport', function onReconnectTransport() {\n        //\n        // Set the error event, this is only used\n        // if we take the errorExit path\n        //\n        fsm._connectFailEvent = SessionEventCode.DOWN_ERROR;\n        fsm._connectSuccessEvent = SessionEventCode.RECONNECTED_NOTICE;\n        // Should we try to reconnect?\n        const disconnected = fsm._sessionProperties._reconnectRetries === 0;\n        fsm._hosts.reset({ wasConnected: true, disconnected });\n        if (!disconnected) {\n          // workaround to make sure session state is changed to connecting when\n          // application gets the session event\n          // positional parameters for SessionEvent constructor\n          // make sure we get the args and err setup now as by the time\n          // the postEventAction runs currentError will be reset.\n          const err = fsm._currentError || {};\n          const args = [err.eventText,    // infoString\n            err.responseCode,             // responseCode\n            err.errorSubcode,             // errorSubcode\n            undefined,                    // correlationKey ... N/A\n            err.eventReason];             // eventReason\n          fsm.setPostEventAction(() => {\n            fsm.setConnectTimer();\n            fsm.emitSessionEvent(SessionEvent.build(SessionEventCode.RECONNECTING_NOTICE, ...args));\n          });\n        }\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .initial(() => {\n        fsm.clearCurrentError();\n        //\n        // Set the error event this is only used\n        // if we take the errorExit path\n        //\n        fsm._connectFailEvent = SessionEventCode.CONNECT_FAILED_ERROR;\n        fsm._connectSuccessEvent = SessionEventCode.UP_NOTICE;\n\n        // Perform host resolution (guaranteed async; replaces a postEventAction)\n        // Do not perform host list operations until this completes (moved to callback)\n        fsm._hosts.resolveHosts((err) => {\n          if (!fsm._hosts) {\n            LOG_TRACE('Ignoring host filter fail because session was disposed');\n            return null;\n          }\n          if (err) {\n            LOG_TRACE('DNS filter failed:', err);\n            fsm.setCurrentError({\n              errorSubcode: ErrorSubcode.UNRESOLVED_HOSTS,\n              eventText:    err,\n            });\n            fsm._hosts.reset({ disconnected: true });\n            return this.processEvent(new SessionFSMEvent({ name: SessionEventName.EXCEPTION }));\n          }\n\n          // Now that the host list has been scanned, we can reset and get next host\n          fsm._hosts.reset({ wasConnected: false });\n          fsm._currentHost = fsm._hosts.getNextHost();\n          return this.processEvent(new SessionFSMEvent(\n            { name: SessionEventName.DNS_RESOLUTION_COMPLETE }\n          ));\n        });\n        return this.transitionTo(fsm.WaitingForDNS);\n      })\n      .reaction(SessionEventName.DNS_RESOLUTION_COMPLETE, function onDNSComplete() {\n        return this.transitionTo(fsm.WaitingForTransport);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* event */) {\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      })\n      .reaction(SessionEventName.CONNECT_TIMEOUT, function onConnectTimeout(/* event */) {\n        fsm.setCurrentError({\n          errorSubcode: ErrorSubcode.TIMEOUT,\n          eventText:    'Connect timeout',\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.SEND_ERROR, function onSendError(sessionEvent) {\n        LOG_INFO(`SEND_ERROR reached SessionConnecting. ${sessionEvent}`);\n        fsm.setCurrentError(sessionEvent);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(errEvent) {\n        fsm.setCurrentError(errEvent);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sessionEvent) {\n        fsm.setCurrentError(sessionEvent);\n        LOG_INFO('TRANSPORT_DESTROYED event');\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .exit(() => {\n        fsm.clearConnectTimer();\n        if (fsm._connectWaitTimer) {\n          clearTimeout(fsm._connectWaitTimer);\n          fsm._connectWaitTimer = null;\n        }\n      })\n      .exitPoint('ConnectedExit', (/* event */) => {\n        // Normal exit to TransportUp.\n        // We need to notify the application they are connected. Use postEventAction to make sure\n        // session state has already changed to TransportUp when application gets the callback.\n        // Use _connectSuccessEvent to send RECONNECTED vs UP depending on entry point.\n        // The text included in the event is currently different for\n        // connect vs reconnect. We should store with as part of _connectSuccessEvent in\n        // the entry point.\n        fsm.setPostEventAction(() => {\n          fsm.emitSessionEvent(SessionEvent.build(fsm._connectSuccessEvent,\n                                                  `'${fsm._hosts.currentHostToString()}'`,\n                                                  200, 0, null, null));\n          if (fsm._userBackpressured) {\n            const sessionEvent = SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                                                    '', null, 0, null, '');\n            fsm.emitSessionEvent(sessionEvent);\n            fsm._userBackpressured = false;\n          }\n        });\n        // Clear current error as we have successfully connected or\n        // reconnected.\n        fsm.clearCurrentError();\n        return this.transitionTo(fsm.SessionTransportUp);\n      })\n      .exitPoint('ErrorExit', function onExit(/* event */) {\n        // Notify the application they are disconnected. Use postEventAction to make sure session\n        // state has already changed to disconnected when application gets the callback.\n        fsm.setPostEventAction(() => {\n          const err = fsm._currentError || {};\n          // positional parameters for SessionEvent constructor\n          const args = [err.eventText,    // infoString\n            err.responseCode,             // responseCode\n            err.errorSubcode,             // errorSubcode\n            undefined,                    // correlationKey ... N/A\n            err.eventReason];             // eventReason\n          fsm.emitSessionEvent(SessionEvent.build(fsm._connectFailEvent, ...args));\n        });\n        return this.transitionTo(fsm.SessionDisconnected);\n      });\n\n    this.WaitingForDNS = new State({\n      name:          SessionStateName.WAITING_FOR_DNS,\n      parentContext: fsm.SessionConnecting,\n    });\n\n    this.DestroyingTransport = new State({\n      name:          SessionStateName.DESTROYING_TRANSPORT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        LOG_INFO('Connecting, disposing transport');\n        fsm.destroyTransportSession('Disconnecting session', 0);\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sessionEvent) {\n        fsm.setCurrentError(sessionEvent);\n        return fsm.SessionConnecting.handleTransportDestroyed.call(this);\n      });\n\n    this.WaitingForInterConnectTimeout = new State({\n      name:          SessionStateName.WAITING_FOR_INTERCONNECT_TIMEOUT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .reaction(SessionEventName.CONNECT_WAIT_TIMEOUT, function onConnectWaitTimeout(/*event*/) {\n        return this.transitionTo(fsm.WaitingForTransport);\n      });\n\n    this.WaitingForTransport = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .initial(() => {\n        const errorMessage = 'Cannot establish transport session: creation failed';\n        fsm.setConnectTimer();\n        fsm.clearCurrentError();\n        try {\n          fsm.initTransport();\n        } catch (e) {\n          this.setCurrentError({\n            eventText:    e.message === errorMessage ? errorMessage : `${errorMessage}: ${e.message}`,\n            errorSubcode: e.subcode || ErrorSubcode.INTERNAL_ERROR,\n            eventReason:  e });\n          return fsm.SessionConnecting.handleTransportDestroyed.call(this);\n        }\n        return this.transitionTo(fsm.WaitingForTransportUp);\n      });\n\n    this.WaitingForTransportUp = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT_UP,\n      parentContext: this.WaitingForTransport,\n    })\n      // This way the code is run only on actual state entry,\n      // not on null transitions (staying in this state)\n      .entry(() => { this._justEntered = true; })\n      .initial(() => {\n        if (!this._justEntered) { return this; }\n        this._justEntered = false;\n        const errorMessage = 'Cannot establish transport session: connection failed';\n        try {\n          const returnCode = fsm._transport.connect();\n          if (returnCode !== TransportLib.TransportReturnCode.OK) {\n            throw new OperationError(\n              errorMessage,\n              ErrorSubcode.CONNECTION_ERROR,\n              TransportLib.TransportReturnCode.describe(returnCode)\n            );\n          }\n          LOG_INFO(`Attempting to connect session '${fsm.sessionId}' to ${fsm._hosts.currentHostToString()}`);\n        } catch (e) {\n          this.setCurrentError({\n            eventText:    e.message === errorMessage ? errorMessage : `${errorMessage}: ${e.message}`,\n            errorSubcode: e.subcode || ErrorSubcode.INTERNAL_ERROR,\n            eventReason:  e });\n          return fsm.SessionConnecting.handleTransportDestroyed.call(this);\n        }\n        return this;\n      })\n      .reaction(SessionEventName.SEND_ERROR, function doNothing(sEvent) {\n        LOG_INFO(`SEND_ERROR while waiting for transport up, doing nothing. ${sEvent}`);\n        return this.internalTransition(null);\n      }\n      )\n      .reaction(SessionEventName.TRANSPORT_UP, function onTransportUp(sEvent) {\n        fsm.sessionId = sEvent.sessionId || '';\n        const returnCode = fsm.sendClientCtrlLogin();\n        if (returnCode === TransportLib.TransportReturnCode.OK) {\n          return this.transitionTo(fsm.WaitingForLogin);\n        }\n        const err = {\n          eventText:    'Failed to send Client Control Login',\n          errorSubcode: ErrorSubcode.LOGIN_FAILURE,\n          responseCode: 400,\n        };\n        fsm.setCurrentError(err);\n        return this.transitionTo(fsm.DestroyingTransport);\n      });\n\n    this.WaitingForLogin = new State({\n      name:          SessionStateName.WAITING_FOR_LOGIN,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        fsm.setClientCtrlTimer();\n      })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_CLIENTCTRL, function onClientCtrl(sEvent) {\n        const clientCtrlMsg = sEvent.smfMsg;\n        const response = clientCtrlMsg.getResponse();\n        const respCode = response.responseCode;\n        const err = {\n          responseCode: respCode,\n        };\n        fsm._responseCode = respCode;\n        if (respCode === 200) {\n          if (!fsm.checkNoLocal(clientCtrlMsg)) {\n            Object.assign(err, {\n              eventText:    'No Local is not supported by the Solace Message Router',\n              errorSubcode: ErrorSubcode.NO_LOCAL_NOT_SUPPORTED,\n            });\n          } else if (!fsm.checkCompressedSsl(clientCtrlMsg)) {\n            Object.assign(err, {\n              eventText:    'Compressed TLS is not supported by the Solace Message Router',\n              errorSubcode: ErrorSubcode.COMPRESSED_TLS_NOT_SUPPORTED,\n            });\n          } else { // Happy path\n            fsm.updateReadonlySessionProps(clientCtrlMsg);\n            return this.transitionTo(fsm.WaitForTransportChange);\n          }\n        } else {\n          const rawSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode,\n                                                                        response.responseString);\n          const subcode = (rawSubcode === ErrorSubcode.UNKNOWN_ERROR) ?\n            ErrorSubcode.LOGIN_FAILURE : rawSubcode;\n          LOG_INFO(`Login failed. Subcode: ${subcode} respCode: ${respCode} ` +\n            `respString: ${response.responseString}`);\n          Object.assign(err, {\n            eventText:    response.responseString,\n            errorSubcode: subcode,\n          });\n        }\n        LOG_TRACE('ClientCtrl error', err);\n        fsm.setCurrentError(err);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.DOWNGRADE_TIMEOUT, function onDowngradeTimeout(/* event */) {\n        if (!fsm._transport.requestDowngrade || fsm._transport.requestDowngrade('ClientCtrl timeout', ErrorSubcode.TIMEOUT) === false) {\n          fsm.setCurrentError({\n            eventText:    'ClientCtrl timeout',\n            errorSubcode: ErrorSubcode.TIMEOUT,\n          });\n          return this.transitionTo(fsm.DestroyingTransport);\n        }\n        // Don't recreate the transport, just try to connect it\n        LOG_TRACE('Downgrade accepted, returning to WaitingForTransportUp');\n        return this.transitionTo(fsm.WaitingForTransportUp);\n      })\n      .exit(() => {\n        fsm.clearClientCtrlTimer();\n      });\n\n    // This is an intermediate state after a successful login.\n    // It gives time to the transport factory (more like a dealership at this point)\n    // to enable compression and/or shut down tls.\n    // The factory may return a new transport immediately,\n    // in which case there is no need to stay in this state.\n    // Or it may return null, and pass the new transport to the callback later.\n    // No messages can be sent while waiting for the callback.\n    this.WaitForTransportChange = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT_CHANGE,\n      parentContext: fsm.SessionConnecting,\n    })\n      .initial(function onInitial() {\n        // Operates on the FSM, must be bound to it.\n        const callback = function onTransportChange(newTransport) {\n          this._transport = newTransport;\n          this.processEvent(new SessionFSMEvent(\n                            { name: SessionEventName.TRANSPORT_CHANGE_DONE }\n          ));\n        };\n        const rc = fsm.updateTransportCompression(callback.bind(fsm));\n        if (rc === null) {\n          // Factory needs time, stay in this state.\n          return this;\n        }\n        fsm._transport = rc;\n        return this.transitionTo(fsm.ReapplyingSubscriptions);\n      })\n      .reaction(SessionEventName.TRANSPORT_CHANGE_DONE, function onTransportChangeDone() {\n        return this.transitionTo(fsm.ReapplyingSubscriptions);\n      });\n\n    this.ReapplyingSubscriptions = new State({\n      name:          SessionStateName.REAPPLYING_SUBSCRIPTIONS,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        LOG_INFO('ReapplyingSubscriptions: entry');\n        fsm.copySubscriptionCacheKeys();\n      })\n      .initial(function onInitial() {\n        if (fsm.reapplySubscriptions() === true) {\n          // all subscriptions applied and waiting for a subscription confirm\n          return this.transitionTo(fsm.WaitForSubConfirm);\n        }\n        // flow controlled while reapplying\n        return this.transitionTo(fsm.WaitForCanAcceptData);\n      })\n      .reaction(SessionEventName.SUBSCRIBE_TIMEOUT, function onSubscribeTimeout() {\n        const respText = 'Subscription timeout while reapplying';\n        const subcode = ErrorSubcode.TIMEOUT;\n        fsm.setCurrentError({\n          eventText:    respText,\n          errorSubcode: subcode,\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .exit(function onExit() {\n        fsm.clearSubscriptionCacheKeys();\n        return this;\n      });\n\n    this.WaitForSubConfirm = new State({\n      name:          SessionStateName.WAITING_FOR_SUBCONFIRM,\n      parentContext: fsm.ReapplyingSubscriptions,\n    })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        // process rxMsgObj\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n        if (respCode !== 200) {\n          const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n          LOG_INFO(`Waiting for subscription confirmation, got ${respCode} (${errorSubcode}) ` +\n                    `'${respText}' on subscription ${subscriptionStr}`);\n          fsm.setCurrentError({\n            eventText:    respText,\n            responseCode: respCode,\n            errorSubcode,\n          });\n          return this.transitionTo(fsm.DestroyTransport);\n        }\n\n        if (fsm._session.canConnectPublisher &&\n            fsm._defaultPublisher &&\n            fsm._defaultPublisher.isBindWaiting()) {\n          return this.transitionTo(fsm.WaitingForMessagePublisher);\n        }\n        return this.transitionToExitPoint(fsm.SessionConnecting, 'ConnectedExit');\n      });\n\n    this.WaitForCanAcceptData = new State({\n      name:          SessionStateName.WAITING_FOR_CAN_ACCEPT_DATA,\n      parentContext: fsm.ReapplyingSubscriptions,\n    })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        // process rxMsgObj\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n        // We are not expecting a SMP response as we have not sent a request-confirm\n        // so this is almost assuredly an error response to a subscription add\n        // check respCode anyway.  if its '200 OK' just ignore it.\n        if (respCode !== 200) {\n          const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n          LOG_DEBUG(`Waiting for can accept data, got ${respCode} (subcode ${errorSubcode}) ` +\n            `'${respText}' on subscription ${subscriptionStr}`);\n          fsm.setCurrentError({\n            eventText:    respText,\n            responseCode: respCode,\n            errorSubcode,\n          });\n          return this.transitionTo(fsm.DestroyingTransport);\n        }\n        // unexpected 200 OK repsonse, log it and continue\n        LOG_INFO(`Unexpected 200 OK response to subscription add for ${subscriptionStr}`);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_CAN_ACCEPT_DATA, function onTransportCanAcceptData() {\n        if (fsm.reapplySubscriptions() === true) {\n          // all subscriptions applied and waiting for a subscription confirm\n          return this.transitionTo(fsm.WaitForSubConfirm);\n        }\n        // flow controlled while reapplying\n        return this.internalTransition(null);\n      });\n\n    this.WaitingForMessagePublisher = new State({\n      name:          SessionStateName.WAITING_FOR_PUBFLOW,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        // Inform the publisher that the session is up and the flow establishment can begin.\n        fsm._defaultPublisher.connect();\n        fsm.sendPublisherSessionUpEvent(fsm._defaultPublisher);\n      })\n      .reaction(SessionEventName.FLOW_UP, function onEvent() {\n        LOG_TRACE(`Flow up ${this}`);\n        if (!fsm._defaultPublisher.isBindWaiting()) {\n          LOG_TRACE('Publisher up');\n          return this.transitionToExitPoint(fsm.SessionConnecting, 'ConnectedExit');\n        }\n        LOG_TRACE('Waiting for more publishers');\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.FLOW_FAILED, function onEvent(sEvent) {\n        fsm.setCurrentError({\n          eventText:    `Guaranteed Message Publisher Failed: ${sEvent.eventText}`,\n          errorSubcode: ErrorSubcode.LOGIN_FAILURE,\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      });\n\n    this.SessionTransportUp = new State({\n      name:          SessionStateName.TRANSPORT_UP,\n      parentContext: fsm,\n    })\n      .entry(function onEntry() {\n        return this;\n      })\n      .initial(function onInitial() {\n        if (fsm._session.canConnectConsumer) {\n          // Inform the subscribers that the session is up and the flow establishment can begin.\n          fsm._consumers.flows.forEach(consumer => fsm.sendConsumerSessionUpEvent(consumer));\n          // Reconnecting flows need session state notification too.\n          fsm._consumers.reconnectingFlows.forEach(\n            consumer => fsm.sendConsumerSessionUpEvent(consumer));\n        }\n        return this.transitionTo(fsm.FullyConnected);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        return this.transitionTo(fsm.SessionDisconnecting);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(sEvent) {\n        fsm.setCurrentError(sEvent);\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.SEND_ERROR, function onSendError(sEvent) {\n        fsm.setCurrentError(sEvent);\n        fsm.cleanupSession();\n        LOG_TRACE('Reconnecting transport after SEND_ERROR (not fully connected)');\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sEvent) {\n        fsm.setCurrentError(sEvent);\n        LOG_INFO('Received unsolicited TRANSPORT_DESTROYED event while transport is up');\n        LOG_TRACE(`TRANSPORT_DESTROYED details: ${sEvent}`);\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n\n        fsm.handleSubscriptionUpdateError(respCode, respText, subscriptionStr, undefined, false);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_CAN_ACCEPT_DATA, function onCanAcceptData(sEvent) {\n        // Notify client for republishing\n        const sessionEvent = SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                                                '', null, 0, null, sEvent.toString());\n        fsm.emitSessionEvent(sessionEvent);\n        fsm._userBackpressured = false;\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.CREATE_SUBSCRIBER, function onCreateSubscriber(sEvent) {\n        // Inform the consumer that the session is up and the flow establishment can begin.\n        const consumer = fsm._consumers.add(sEvent.guaranteedFlowObject);\n        fsm.sendConsumerSessionUpEvent(consumer);\n        return this;\n      })\n      .exit(function onExit() {\n        fsm.clearKeepAlive();\n        return this;\n      });\n\n    this.FullyConnected = new State({\n      name:          SessionStateName.FULLY_CONNECTED,\n      parentContext: fsm.SessionTransportUp,\n    })\n      .entry(() => {\n        fsm._connectFailEvent = SessionEventCode.DOWN_ERROR;\n        fsm.scheduleKeepAlive();\n      });\n\n    this.SessionDisconnected = new State({\n      name:          SessionStateName.DISCONNECTED,\n      parentContext: fsm,\n    })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        fsm.setPostEventAction(() => {\n          fsm.emitSessionEvent(SessionEvent.build(SessionEventCode.DISCONNECTED));\n        });\n\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.CONNECT, function onConnect(/* sEvent */) {\n        return this.transitionTo(fsm.SessionConnecting);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(/* sEvent */) {\n        // do nothing\n        return this.internalTransition(null);\n      });\n    this.SessionDisconnecting = new State({\n      name:          SessionStateName.DISCONNECTING,\n      parentContext: fsm,\n    })\n      .initial(() => {\n        LOG_INFO(`Disconnecting session ${fsm}`);\n        return this.transitionTo(fsm.DisconnectingFlows);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(errEvent) {\n        //\n        // As we are in disconnecting state we have initiated the\n        // disconnect and need to preserve the error subcode that\n        // we set before destroying the transport. The transport, having\n        // no error, will usually return a subcode of zero here.\n        //\n        // This only changes the eventCode, not the subcode. Other properties\n        // are preserved.\n        //\n        fsm.setCurrentError({ errEvent });\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(/* sEvent */) {\n        LOG_INFO('Received unsolicited TRANSPORT_DESTROYED while disconnecting transport');\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      });\n\n    this.DisconnectingFlows = new State({\n      name:          SessionStateName.DISCONNECTING_FLOWS,\n      parentContext: fsm.SessionDisconnecting,\n    }, {\n      // Get all flows to disconnect. This will need to be called at least once.\n      gatherPendingFlows() {\n        const { MessageConsumerEventName } = ConsumerLib;\n\n        // Don't re-enter synchronously to look for new flows.\n        // Flows disconnect synchronously when they are already disconnected.\n        // If this is the case, they throw; they do not emit an event.\n        // If a consumer flow is up, it will immediately emit a BIND_WAITING event and we\n        // handle that.\n        // Since we know that flow#_disconnectSession neither creates a new flow\n        // nor calls a user callback that could do so, we need not look for new\n        // flows that were created.\n        assert(!this.isGathering);\n        this.isGathering = true;\n\n        const adaptedListenForDestroy = (flow, installfn, downEvents) => {\n          assert(flow, 'Trying to listen to undefined flow');\n          // If we already know about this flow, skip it.\n          if (this.known.has(flow)) return;\n          LOG_TRACE(`Adding pending flow ${flow}`);\n          this.known.add(flow);\n          this.pending.add(flow);\n          const onFlowDown = () => {\n            LOG_TRACE(`Removing flow from pending ${flow}`);\n            downEvents.forEach(event => flow._removeListener(event, onFlowDown));\n            this.pending.delete(flow);\n            if (!this.isGathering) this.checkPendingFlows();\n          };\n          downEvents.forEach(event => installfn.call(flow, event, onFlowDown));\n          try {\n            flow._disconnectSession(); // Session has been disconnected by user\n          } catch (ex) {\n             // Synchronously down\n            LOG_TRACE('Flow disconnect threw');\n            LOG_TRACE(ex);\n            onFlowDown();\n          }\n        };\n\n        // See SOL-13556: sending CloseFlow makes it impossible to recover the flow.\n        // This was the code that sent CloseFlow. I'm leaving it here temporarily\n        // in case we want a clean shutdown that waits for acks.\n        /*\n        const { MessagePublisherEventName } = PublisherLib;\n        if (fsm._defaultPublisher) {\n          adaptedListenForDestroy(fsm._defaultPublisher,\n                                  fsm._defaultPublisher.once,\n                                  [MessagePublisherEventName.DOWN]);\n        }\n        */\n        if (fsm._consumers) {\n          fsm._consumers.flows.forEach((flow) => {\n            adaptedListenForDestroy(flow,\n                                    flow._once,\n                                    [\n                                      MessageConsumerEventName.DOWN,\n                                      MessageConsumerEventName.DOWN_ERROR,\n                                    ]);\n          });\n        }\n\n        this.isGathering = false;\n      },\n      // This function is called whenever a flow comes down, whether sync or async.\n      // The body is wrapped in a basic debounce: if we are re-entering (synchronously),\n      // no new flows will be added.\n      checkPendingFlows() {\n        LOG_TRACE('Waiting for disconnects on', this.pending);\n        if (this.pending.size === 0) {\n          // We are out of pending flows, but look for new flows that were just added\n          this.gatherPendingFlows();\n          // Were any flows just added?\n          if (this.pending.size === 0) {\n            this.proceed();\n          }\n        }\n      },\n      proceed() {\n        // All done!\n        // Clear flow sets so they can be disposed\n        this.known = null;\n        this.pending = null;\n        LOG_INFO('All flows disconnected');\n        fsm.processEvent(new FsmEvent({ name: SessionEventName.FLOWS_DISCONNECTED }));\n      },\n    })\n      .entry(function onEntry() {\n        this.known = new Set();\n        this.pending = new Set();\n        this.checkPendingFlows();\n      })\n      .reaction(SessionEventName.FLOWS_DISCONNECTED, function onFlowsDisconnected() {\n        return this.transitionTo(fsm.FlushingTransport);\n      });\n\n    this.FlushingTransport = new State({\n      name:          SessionStateName.FLUSHING_TRANSPORT,\n      parentContext: fsm.SessionDisconnecting,\n    }, {\n      flushTransport() {\n        fsm.cleanupSession();\n        fsm.flushTransportSession(() => this.onTransportFlushed());\n        this.sessionId = null;\n      },\n      onTransportFlushed() {\n        fsm.processEvent(new FsmEvent({ name: SessionEventName.TRANSPORT_FLUSHED }));\n      },\n    })\n      .entry(function onEntry() {\n        LOG_INFO('Flushing transport');\n        this.flushTransport();\n      })\n      .reaction(SessionEventName.TRANSPORT_FLUSHED, function onTransportFlushed() {\n        LOG_INFO('Handle Transport Flushed');\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      });\n  }\n\n  /**\n   * @param {Destination} destination The topic to add\n   * @private\n   */\n  addToSubscriptionCache(destination) {\n    if (Check.nothing(destination) || !this._subscriptionCache) {\n      return;\n    }\n\n    const { LOG_DEBUG } = this.logger;\n    const key = destination.name;\n    if (this._subscriptionCache[key] === null ||\n        this._subscriptionCache[key] === undefined) {\n      LOG_DEBUG(`Cache subscription ${key}`);\n      this._subscriptionCache[key] = destination;\n      LOG_DEBUG('Increment cache count');\n      this._subscriptionCacheCount++;\n    } else {\n      LOG_DEBUG(`Cache subscription ${key}`);\n      this._subscriptionCache[key] = destination;\n    }\n  }\n\n  /**\n   * @param {String} correlationTag The tag of the request to cancel\n   * @returns {CorrelatedRequest} The cancelled request\n   * @private\n   */\n  cancelOutstandingCorrelatedReq(correlationTag) {\n    if (Check.nothing(correlationTag) || !this._correlatedReqs) {\n      return null;\n    }\n    const req = this._correlatedReqs[correlationTag];\n    if (req === null || req === undefined) {\n      return null;\n    }\n\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    LOG_DEBUG(`Cancel outstanding ctrl request correlationTag=${correlationTag\n      }`);\n    if (req.timer) {\n      clearTimeout(req.timer);\n      req.timer = null;\n    }\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`, e);\n    }\n    return req;\n  }\n\n\n  /**\n   * @private\n   */\n  cleanupSession() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Clean up session');\n\n    const {\n      ConsumerFSMEvent,\n      ConsumerFSMEventNames,\n    } = ConsumerLib;\n\n    if (this._correlatedReqs) {\n      Object.keys(this._correlatedReqs).forEach(key =>\n        this.cancelOutstandingCorrelatedReq(key));\n    }\n\n    this.clearConnectTimer();\n    this.clearClientCtrlTimer();\n    this.clearKeepAlive();\n    this._consumers.flows.forEach((consumer) => {\n      consumer.processFSMEvent(\n        new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DOWN })\n      );\n    });\n    // Reconnecting flows need session state notification too.\n    this._consumers.reconnectingFlows.forEach((consumer) => {\n      consumer.processFSMEvent(\n        new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DOWN })\n      );\n    });\n    if (this._defaultPublisher) {\n      this._defaultPublisher.processFSMEvent(\n        new PublisherLib.PublisherFSMEvent({\n          name: PublisherLib.PublisherFSMEventNames.SESSION_DOWN,\n        })\n      );\n    }\n    this._session.cleanupSession();\n  }\n\n  /**\n   * @private\n   */\n  clearClientCtrlTimer() {\n    if (!this._clientCtrlTimer) {\n      return;\n    }\n\n    clearTimeout(this._clientCtrlTimer);\n    this._clientCtrlTimer = null;\n  }\n\n\n  /**\n   * @private\n   */\n  clearConnectTimer() {\n    if (!this._connectTimer) {\n      return;\n    }\n\n    clearTimeout(this._connectTimer);\n    this._connectTimer = undefined;\n  }\n\n  /**\n   * Cancel keep alive task\n   * @private\n   */\n  clearKeepAlive() {\n    const { LOG_INFO } = this.logger;\n\n    if (this._keepAliveTimer) {\n      LOG_INFO('Cancel keepalive timer');\n      clearInterval(this._keepAliveTimer);\n      this._keepAliveTimer = null;\n    }\n\n    this.resetKeepAliveCounter();\n  }\n\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to parse\n   * @returns {Boolean} true if No Local is supported by the router\n   * @private\n   */\n  checkNoLocal(clientCtrlMsg) {\n    let noLocalSupported = true;\n    if (this._sessionProperties.noLocal === true) {\n      const caps = clientCtrlMsg.getRouterCapabilities();\n      if (!caps) {\n        noLocalSupported = false;\n      } else {\n        // Guard for undefined OR non-boolean capability\n        noLocalSupported = (typeof caps[CapabilityType.NO_LOCAL] === 'boolean') ? caps[CapabilityType.NO_LOCAL] : false;\n      }\n    }\n    return noLocalSupported;\n  }\n\n  /**\n   * Check against an odd router version which OKs logins with TLS downgrade to compression,\n   * but does not actually support it, and just downgrades to plain text instead.\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to parse\n   * @returns {Boolean} false if router should have rejected login for unsupported compressed TLS.\n   * @private\n   */\n  checkCompressedSsl(clientCtrlMsg) {\n    const { LOG_TRACE } = this.logger;\n    if (this._compressedTLS) {\n      const caps = clientCtrlMsg.getRouterCapabilities();\n      if (!caps || typeof caps[CapabilityType.COMPRESSED_SSL] !== 'boolean') {\n        LOG_TRACE('Compressed SSL capability missing.');\n        return false;\n      }\n      return caps[CapabilityType.COMPRESSED_SSL] === true;\n    }\n    return true;\n  }\n\n  /**\n   * Check destination against router capablilities\n   * @param {Destination} destination to verify\n   * @returns {?solace.OperationError} error for caller to throw otherwise null\n   * @private\n   */\n  checkSessionDestinationCapability(destination) {\n    let error = null;\n    if (destination && destination.getType()) {\n      if (destination.getSubscriptionInfo()\n          && (destination.getSubscriptionInfo().isShare\n              || destination.getSubscriptionInfo().isNoExport)\n          && !this._session.isCapable(CapabilityType.SHARED_SUBSCRIPTIONS)) {\n        error = new OperationError(\n          'Shared subscriptions are not allowed by router for this client',\n          ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED,\n          null);\n      }\n    }\n    return error;\n  }\n\n  /**\n   * Clears the current error exit information for the FSM.\n   */\n  clearCurrentError() {\n    this._currentError = null;\n  }\n\n  /**\n   * @private\n   */\n  clearSubscriptionCacheKeys() {\n    this._subscriptionCacheKeys = null;\n  }\n\n  /**\n   * @private\n   */\n  copySubscriptionCacheKeys() {\n    // reapply subscriptions if applicable\n    this.clearSubscriptionCacheKeys();\n    this._subscriptionCacheKeys = Object.keys(this._subscriptionCache || {});\n\n    // Add the P2P Inbox subscription, so the subscriptionCache always has\n    // at least one subscription.\n    const p2pTopic = P2PUtil.getP2PTopicSubscription(this._sessionProperties.p2pInboxBase);\n    this._subscriptionCacheKeys.push(p2pTopic);\n  }\n\n  createMessagePublisher() {\n    const { LOG_DEBUG } = this.logger;\n    if (!this._sessionProperties.publisherProperties.enabled) {\n      LOG_DEBUG('Publisher is disabled');\n      return;\n    }\n\n    const {\n      MessagePublisher,\n      MessagePublisherEventName,\n    } = PublisherLib;\n    const publisher = new MessagePublisher({\n      properties:              this._sessionProperties.publisherProperties,\n      sessionInterfaceFactory: this._flowInterfaceFactory,\n    });\n    publisher.on(\n      MessagePublisherEventName.UP,\n      () => this.processEvent(new SessionFSMEvent(\n        { name: SessionEventName.FLOW_UP },\n        { guaranteedFlowObject: publisher })));\n    publisher.on(\n      MessagePublisherEventName.CONNECT_FAILED_ERROR,\n      event => this.processEvent(\n        new SessionFSMEvent(\n          { name: SessionEventName.FLOW_FAILED },\n          {\n            guaranteedFlowObject: publisher,\n            event,\n            eventText:            event.description,\n          })));\n\n    publisher.on(MessagePublisherEventName.REJECTED_MESSAGE, (message, ctrlMessage) => {\n      const header = ctrlMessage.smfHeader;\n      const respCode = header.pm_respcode;\n      const respText = header.pm_respstr;\n      const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(respCode, respText);\n      const event = SessionEvent.build(SessionEventCode.REJECTED_MESSAGE_ERROR,\n                                       respText,\n                                       respCode,\n                                       errorSubcode,\n                                       message.getCorrelationKey());\n      event['message'] = message; // eslint-disable-line dot-notation\n      this.emitSessionEvent(event);\n    });\n    publisher.on(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, (message) => {\n      const event = SessionEvent.build(SessionEventCode.ACKNOWLEDGED_MESSAGE,\n                                       'Message(s) acknowledged',\n                                       undefined,\n                                       0,\n                                       message.getCorrelationKey());\n      event['message'] = message; // eslint-disable-line dot-notation\n      this.emitSessionEvent(event);\n    });\n    publisher.on(MessagePublisherEventName.FLOW_NAME_CHANGED, (data) => {\n      const { messages, count } = data;\n      if (count > 0) {\n        const event = SessionEvent.build(SessionEventCode.REPUBLISHING_UNACKED_MESSAGES,\n                                         `Republishing ${count} messages due to ` +\n          'Guaranteed Message Publisher failed to reconnect');\n        event['messages'] = messages; // eslint-disable-line dot-notation\n        event['count'] = count; // eslint-disable-line dot-notation\n        this.emitSessionEvent(event);\n      }\n    });\n    publisher.on(MessagePublisherEventName.CAN_SEND, () => {\n      this.emitSessionEvent(\n        SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                           `${publisher} window is now open and can send`));\n    });\n    publisher.on(MessagePublisherEventName.GUARANTEED_MESSAGING_DOWN, () => {\n      this.emitSessionEvent(\n        SessionEvent.build(\n          SessionEventCode.GUARANTEED_MESSAGE_PUBLISHER_DOWN,\n          'Guaranteed Message Publishing shut down'));\n    });\n    this._defaultPublisher = publisher;\n  }\n\n  sendConsumerSessionUpEvent(consumer) {\n    const {\n      ConsumerFSMEvent,\n      ConsumerFSMEventNames,\n    } = ConsumerLib;\n    const isAD = this._session.canConnectConsumer;\n    const event = new ConsumerFSMEvent({\n      name: isAD\n        ? ConsumerFSMEventNames.SESSION_UP\n        : ConsumerFSMEventNames.SESSION_UP_NO_AD,\n    });\n    event.guaranteedFlowObject = consumer;\n    consumer.processFSMEvent(event);\n  }\n\n  sendPublisherSessionUpEvent(publisher) {\n    const isAD = this._session.canConnectPublisher;\n    const event = new PublisherLib.PublisherFSMEvent({\n      name: isAD\n        ? PublisherLib.PublisherFSMEventNames.SESSION_UP\n        : PublisherLib.PublisherFSMEventNames.SESSION_UP_NO_AD,\n    });\n    event.guaranteedFlowObject = publisher;\n    publisher.processFSMEvent(event);\n  }\n\n  /**\n   * Creates a Guaranteed Messaging Subscriber.\n   *\n   * @param {Object|MessageConsumerProperties} properties Properties for the flow.\n   *  Expected fields: {@link solace.MessageConsumerProperties}\n   * @returns {solace.MessageConsumer} The newly constructed consumer\n   * @private\n   */\n  createMessageConsumer(properties) {\n    const { MessageConsumer } = ConsumerLib;\n    const consumer = new MessageConsumer({\n      properties,\n      sessionInterfaceFactory: this._flowInterfaceFactory,\n    });\n    // use the conusmer properties instead of properties to ensure the topicEndpointSubscription\n    // has a Topic object\n    const conusmerProperties = consumer.getProperties();\n    if (conusmerProperties.topicEndpointSubscription) {\n      //check topic supported\n      const error =\n          this.checkSessionDestinationCapability(conusmerProperties.topicEndpointSubscription);\n      if (error) {\n        throw error;\n      }\n    }\n    const info = { guaranteedFlowObject: consumer };\n    // Will be added to the guaranteed flow collection by dispatching\n    this.processEvent(\n      new SessionFSMEvent({ name: SessionEventName.CREATE_SUBSCRIBER }, info)\n    );\n    return consumer;\n  }\n\n/**\n   * Creates a Queue Browser.\n   *\n   * @param {Object|QueueBrowserProperties} properties Properties for the queue browser.\n   *  Expected fields: {@link solace.QueueBrowserProperties}\n   * @returns {solace.QueueBrowser} The newly constructed queue browser\n   * @private\n   */\n  createQueueBrowser(properties) {\n    const { MessageConsumerAcknowledgeMode, QueueBrowser } = ConsumerLib;\n    const { LOG_DEBUG } = this.logger;\n\n    LOG_DEBUG(`Creating queue browser with properties:  ${properties}`);\n\n    const consumerProperties = {};\n    consumerProperties.queueDescriptor = properties.queueDescriptor;\n    consumerProperties.acknowledgeMode = MessageConsumerAcknowledgeMode.CLIENT;\n    consumerProperties.browser = true;\n\n    // Optional properties\n    if (Object.prototype.hasOwnProperty.call(properties, 'connectTimeoutInMsecs')) {\n      consumerProperties.connectTimeoutInMsecs = properties.connectTimeoutInMsecs;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'connectAttempts')) {\n      consumerProperties.connectAttempts = properties.connectAttempts;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'windowSize')) {\n      consumerProperties.windowSize = properties.windowSize;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'transportAcknowledgeTimeoutInMsecs')) {\n      consumerProperties.transportAcknowledgeTimeoutInMsecs =\n        properties.transportAcknowledgeTimeoutInMsecs;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'transportAcknowledgeThresholdPercentage')) {\n      consumerProperties.transportAcknowledgeThresholdPercentage =\n        properties.transportAcknowledgeThresholdPercentage;\n    }\n\n    const consumer = this.createMessageConsumer(consumerProperties);\n    const browser = new QueueBrowser(consumer);\n    return browser;\n  }\n\n  /**\n   * @param {String} msg The status message for the operation\n   * @param {Subcode} subcode The subcode reason for the operation\n   * @private\n   */\n  destroyTransportSession(msg, subcode) {\n    if (Check.nothing(this._transport)) {\n      // Just send the event\n      this.processEvent(\n        new SessionFSMEvent({ name: SessionEventName.TRANSPORT_DESTROYED })\n      );\n      return;\n    }\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    LOG_INFO('Destroy transport session');\n\n    const returnCode = this._transport.destroy(msg, subcode);\n    this._smfClient = null;\n\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      LOG_ERROR(`Failed to destroy transport session, return code: ${\n        TransportLib.TransportReturnCode.describe(returnCode)}`);\n    }\n  }\n\n\n  /**\n   * Release all resources associated with the session.\n   * @private\n   */\n  disposeInternal() {\n    if (this._disposed) {\n      return;\n    }\n\n    const operations = {\n      'transport': () => {\n        this.destroyTransportSession('Disposing', 0);\n        this._transport = null;\n        this._smfClient = null;\n      },\n      'session': () => {\n        this.cleanupSession();\n        this._session = null;\n        this._sessionProperties = null;\n        this._correlatedReqs = null;\n        this._flowInterfaceFactory = null;\n      },\n      'statistics': () => {\n        if (this._sessionStatistics) {\n          this._sessionStatistics.resetStats();\n          this._sessionStatistics = null;\n        }\n        this._kaStats = null;\n      },\n      'subscription cache': () => {\n        if (this._subscriptionCache) {\n          Object.keys(this._subscriptionCache).forEach(\n            key => this.removeFromSubscriptionCache(key)\n          );\n          this._subscriptionCache = null;\n        }\n        this.clearSubscriptionCacheKeys();\n        this._subscriptionCacheCount = 0;\n      },\n      'MessagePublishers': () => {\n        if (this._defaultPublisher) {\n          this._defaultPublisher.dispose();\n          this._defaultPublisher = null;\n        }\n      },\n      'MessageConsumers': () => {\n        this._consumers.disposeAll();\n        this._consumers = null;\n      },\n      'host list': () => {\n        this._currentHost = null;\n        this._hosts = null;\n      },\n    };\n\n    Object.keys(operations).forEach((operationKey) => {\n      const { LOG_TRACE, LOG_INFO } = this.logger;\n      const operation = operations[operationKey];\n      try {\n        LOG_TRACE(`Dispose: ${operationKey}`);\n        operation();\n        LOG_TRACE(`Dispose: ${operationKey} succeeded`);\n      } catch (ex) {\n        LOG_INFO(`Dispose: ${operationKey} failed:`, ex, '...continuing');\n      }\n    });\n    this._disposed = true;\n  }\n\n  emitSessionEvent(event) {\n    // Don't log here; callee does it\n    this._session.sendEvent(event);\n  }\n\n  /**\n   * @param {Number} correlationTag The correlation tag\n   * @param {function} reqTimeoutCb The timeout callback\n   * @param {Number} reqTimeout The timeout in milliseconds\n   * @param {Object} correlationKey The correlation key\n   * @param {function} respRecvCallback The success callback\n   * @private\n   */\n  enqueueOutstandingCorrelatedReq(correlationTag,\n                                  reqTimeoutCb,\n                                  reqTimeout,\n                                  correlationKey,\n                                  respRecvCallback) {\n    if (Check.nothing(correlationTag)) {\n      return;\n    }\n\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`Enqueue outstanding ctrl request correlationTag=${correlationTag}`);\n    let timer = null;\n    if (reqTimeoutCb) {\n      timer = setTimeout(reqTimeoutCb, reqTimeout || this._sessionProperties.readTimeoutInMsecs);\n    }\n\n    const outstandingReq = new CorrelatedRequest(correlationTag,\n      timer,\n      correlationKey,\n      respRecvCallback);\n    this._correlatedReqs[correlationTag] = outstandingReq;\n  }\n\n  /**\n   * @param {String} errorEventText Description of the error\n   * @param {ErrorSubcode} errorSubcode Subcode for the error\n   * @param {String} [eventReason] The reason for the error\n   * @returns {undefined}\n   * @memberof SessionFSM\n   * @private\n   */\n  errorInFsm(errorEventText, errorSubcode, eventReason = null) {\n    const { LOG_INFO } = this.logger;\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.EXCEPTION });\n    LOG_INFO(`Handling error in FSM: ${errorEventText} ${eventReason && eventReason.stack}`);\n    this.setCurrentError({\n      eventText: errorEventText,\n      errorSubcode,\n      eventReason,\n    });\n    return this.processEvent(sEvent);\n  }\n\n  flushTransportSession(callback) {\n    if (this._transport) {\n      this._transport.flush(callback);\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * @returns {Number} The next correlation tag\n   * @private\n   */\n  getCorrelationTag() {\n    return this._smfClient.nextCorrelationTag();\n  }\n\n  /**\n   * Get current state name\n   * @returns {String} The name of the current state, or SessionStateName.DISPOSED if the\n   *  FSM is terminated\n   * @private\n   */\n  getCurrentStateName() {\n    const currentState = this.getCurrentState();\n\n    if (!currentState) return null;\n    if (currentState === this.getFinalState()) return SessionStateName.DISPOSED;\n    return this.getCurrentState().getName();\n  }\n\n  /**\n   * Returns the value of a given {@link StatType}.\n   *\n   * @param {StatType} statType The statistic to query.\n   * @returns {?Number} The value for the given stat, if available\n   * @private\n   */\n  getStat(statType) {\n    if (this._sessionStatistics === undefined) {\n      return undefined;\n    }\n    //\n    // TX_TOTAL_DATA_MSGS and TX_TOTAL_DATA_BYTES are summary counters\n    // These stats are calculated as the sum of DIRECT/PERSISTENT/NONPERSISTENT\n    // counters.  This is by design since day one.  As such they do not include\n    // the count of redelivered messages/bytes as TX_PERSISTENT_MSGS and TX_NONPERSISTENT_MSGS\n    // only includes the counts of messages successfully delivered. This is not consistent\n    // with receive stats but it is what it is. This definition is consistent with the other\n    // existing APIs (CCSMP and JCSMP).\n    //\n    if (statType === StatType.TX_TOTAL_DATA_MSGS) {\n      return this._sessionStatistics.getStat(StatType.TX_DIRECT_MSGS) +\n        this._sessionStatistics.getStat(StatType.TX_PERSISTENT_MSGS) +\n        this._sessionStatistics.getStat(StatType.TX_NONPERSISTENT_MSGS);\n    } else if (statType === StatType.TX_TOTAL_DATA_BYTES) {\n      return this._sessionStatistics.getStat(StatType.TX_DIRECT_BYTES) +\n        this._sessionStatistics.getStat(StatType.TX_PERSISTENT_BYTES) +\n        this._sessionStatistics.getStat(StatType.TX_NONPERSISTENT_BYTES);\n    }\n    return this._sessionStatistics.getStat(statType);\n  }\n\n  /**\n   * Gets a transport session information string.\n   * This string is informative only, and applications should not attempt to parse it.\n   *\n   * @returns {String} The current status of the transport\n   */\n  getTransportInfo() {\n    if (Check.nothing(this._transport)) {\n      return 'Not connected.';\n    }\n    return this._transport.getInfoStr();\n  }\n\n  /**\n   * Handle an AD CTRL message given the message, its header, and the previously-identified\n   * candidate flow, which is used if the message has no correlation tag.\n   *\n   * @param {AdProtocolMessage} message The message to handle\n   * @param {SMFHeader} header The header of the message\n   * @returns {SessionFSM} This FSM.\n   * @private\n   */\n  handleADCtrlMessage(message, header) {\n    const flowId = message.getFlowId();\n    const respText = header.pm_respstr;\n    const correlationTag = header.pm_corrtag;\n    const { LOG_INFO, LOG_DEBUG, LOG_WARN } = this.logger;\n\n    if (correlationTag) {\n      // Correlation tag is non-null\n      // Session handles correlated request-reply\n      this.updateRxStats(message);\n\n      LOG_INFO(`Handle SMF response for correlationTag ${correlationTag}`);\n      // find matching correlationTag to cancel timer\n      const cancelledRequest = this.cancelOutstandingCorrelatedReq(correlationTag);\n      if (Check.nothing(cancelledRequest)) {\n        return this.errorInFsm(`Cannot find matching request for response: ${respText}`,\n                               ErrorSubcode.INTERNAL_ERROR);\n      }\n\n      if (cancelledRequest.respRecvdCallback) {\n        // call callback referenced by cancelledRequest\n        // login or update property\n        cancelledRequest.respRecvdCallback(message, cancelledRequest);\n        return this;\n      }\n\n      LOG_DEBUG(`Dropping ADCTRL message due to mismatched correlation tag ${correlationTag}`);\n      this.incStat(StatType.RX_REPLY_MSG_DISCARD);\n      return this;\n    }\n\n    // Unsolicited control message\n    let flow;\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.CLIENTACK:\n      case SMFAdProtocolMessageType.CLIENTNACK:\n      case SMFAdProtocolMessageType.CLOSEPUBFLOW:\n        if (this._defaultPublisher.flowId === flowId) {\n          flow = this._defaultPublisher;\n        } // else drop.\n        break;\n      default:\n        flow = this._consumers.getFlowById(flowId);\n    }\n\n    if (flow && !flow.disposed) {\n      // Found a matching flow\n      this.updateRxStats(message, flow);\n      flow.handleUncorrelatedControlMessage(message);\n      return this;\n    }\n\n    // No matching flow\n    const response = message.getResponse();\n    const rc = response ? `\"${response.responseCode} ${response.responseString}\" ` : '';\n    LOG_WARN(\n      `Dropping ADCTRL.${SMFLib.SMFAdProtocolMessageType.describe(message.msgType)\n      } ${rc}for unknown flow ${flowId}`\n    );\n    this.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n\n    return this;\n  }\n\n  /**\n   * @param {solace.Message} message The AD data message to handle\n   * @param {SMFHeader} header The header for the message\n   * @returns {MessageConsumer} The flow that handled the message, or `null`\n   * @private\n   */\n  handleADTrMessage(message, header) {\n    const { LOG_DEBUG } = this.logger;\n    const flowId = header.pm_ad_flowid;\n    // Get a flow from that ID if possible.\n    const flow = this._consumers.getFlowById(flowId);\n    if (!flow || flow.disposed) {\n      LOG_DEBUG('Dropped incoming AD message for ' +\n                `${flow ? 'disposed' : 'unknown'} flow ID ${flowId}`);\n      this.updateRxStats(message, this._sessionStatistics);\n      this.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n      return null;\n    }\n    this.updateRxStats(message, flow);\n    flow.handleDataMessage(message);\n    return flow;\n  }\n\n  /**\n   * @param {String} correlationTag The correlation tag for the timed out subscription request\n   * @param {String} [timeoutMsg] The reason for the timeout\n   * @private\n   */\n  handleApiSubscriptionTimeout(correlationTag, timeoutMsg) {\n    // remove request from queue\n    if (this._correlatedReqs[correlationTag] === undefined ||\n        this._correlatedReqs[correlationTag] === null) {\n      return;\n    }\n\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    LOG_INFO(`${timeoutMsg || 'Subscription timeout'} for correlationTag=${correlationTag}`);\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}, exception: ${e.message}`);\n    }\n  }\n\n  /**\n   * @param {ClientCtrlMessage} message The message to handle\n   * @param {SMFHeader} header The header from the message\n   * @returns {undefined}\n   * @private\n   */\n  handleClientCtrlMessage(message, header) {\n    let correlationTag;\n    const { LOG_INFO } = this.logger;\n    this.updateRxStats(message);\n    if (message.msgType === SMFLib.SMFClientCtrlMessageType.LOGIN) {\n      // Currently, login requests don't use a correlation tag.\n      // Using here a fake internal one to match the request.\n      correlationTag = TransportLib.SMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG;\n      LOG_INFO('Handle SMF response for ClientCTRL Login');\n    } else {\n      correlationTag = header.pm_corrtag;\n      LOG_INFO(`Handle SMF response for correlationTag ${correlationTag}`);\n    }\n    // find matching correlationTag to cancel timer\n    const cancelledRequest = this.cancelOutstandingCorrelatedReq(correlationTag);\n    if (Check.nothing(cancelledRequest)) {\n      const respText = header.pm_respstr;\n      return this.errorInFsm(`Cannot find matching request for response: ${respText}`,\n                             ErrorSubcode.INTERNAL_ERROR);\n    } else if (cancelledRequest.respRecvdCallback) {\n      // call callback referenced by cancelledRequest\n      // login or update property\n      return cancelledRequest.respRecvdCallback(message);\n    }\n\n    LOG_INFO(`Dropping ClientCtrl message due to mismatched correlation tag ${correlationTag}`);\n    return this.incStat(StatType.RX_REPLY_MSG_DISCARD);\n  }\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to handle\n   * @private\n   */\n  handleClientCtrlResponse(clientCtrlMsg) {\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_PROTOCOL_CLIENTCTRL });\n    sEvent.smfMsg = clientCtrlMsg;\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * @private\n   */\n  handleClientCtrlTimeout() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('ClientCtrl timeout for session');\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.DOWNGRADE_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n\n  /**\n   * @private\n   */\n  handleConnectTimeout() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Connection timeout. Disconnecting');\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.CONNECT_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * Handle control request timeout\n   * @param {String} correlationTag The correlation tag for the timed out operation\n   * @param {String} timeoutMsg The message associated with the timeout\n   * @private\n   */\n  handleUpdatePropertyTimeout(correlationTag, timeoutMsg) {\n    const { LOG_ERROR } = this.logger;\n    // remove request from queue\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}, exception: ${e.message}`);\n    }\n\n    // notify client\n    const sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                            timeoutMsg,\n                                            null,\n                                            ErrorSubcode.TIMEOUT,\n                                            null,\n                                            null);\n    this.sendEvent(sessionEvent);\n  }\n\n  /**\n   * @param {SMFHeader} header The header from the rejected message\n   * @private\n   */\n  handleRejectedTrMessage(header) {\n    // It is trmsg response. For direct message, it must be a failure response\n    const respCode = header.pm_respcode;\n    // Strip a trailing null character.\n    const topicNameRaw = header.pm_tr_topicname_bytes;\n    const topicName = topicNameRaw ? topicNameRaw.replace(/\\0/g, '') : '';\n    const respText = header.pm_respstr;\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n    this.emitSessionEvent(SessionEvent.build(\n      SessionEventCode.REJECTED_MESSAGE_ERROR,\n      respText,\n      respCode,\n      errorSubcode,\n      null, //correlation key\n      `Topic: ${topicName}`)\n    );\n  }\n\n  /**\n   * @param {solace.Message} message The SMF message to handle\n   * @returns {undefined}\n   * @private\n   */\n  handleSMFMessage(message) {\n    try {\n      // Stats for this message might affect both the session and the flow. Need to\n      // determine where the message is handled before handling stats.\n      // Some ADCTRL messages have no flow ID but only a correlation tag.\n      // These are OPENFLOW and we count them as handled by the session.\n\n      const header = message.smfHeader;\n\n      if (header.discardMessage) {\n        // UH==2 on an unknown parameter\n        if (this._sessionStatistics) {\n          this._sessionStatistics.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n        }\n        // do nothing.\n        return null;\n      }\n\n      // Each message type handler must call this.updateRxStats(message, target).\n      // The direct/TRmsg path includes the call here in the switch.\n      switch (header.smf_protocol) {\n        case SMFLib.SMFProtocol.TRMSG:\n          if (header.smf_adf) {\n            return this.handleADTrMessage(message, header);\n          }\n          this.updateRxStats(message, this._sessionStatistics);\n          return header.pm_respcode === 0\n            ? this._session.handleDataMessage(message)\n            : this.handleRejectedTrMessage(header);\n\n        case SMFLib.SMFProtocol.ADCTRL:\n          return this.handleADCtrlMessage(message, header);\n\n        case SMFLib.SMFProtocol.CLIENTCTRL:\n          return this.handleClientCtrlMessage(message, header);\n\n        case SMFLib.SMFProtocol.SMP:\n          return this.handleSMPMessage(message, header);\n\n        case SMFLib.SMFProtocol.KEEPALIVE:\n        case SMFLib.SMFProtocol.KEEPALIVEV2:\n          // do nothing\n          return null;\n\n        default:\n          return this.handleUnknownProtocolMessage(message, header);\n      }\n    } catch (e) {\n      const { LOG_ERROR } = this.logger;\n      LOG_ERROR(`Exception in handleSMFMessage, exception: ${e.stack}`);\n      return this.errorInFsm(`Exception in handleSMFMessage: ${e.message}`,\n                             e.subcode || ErrorSubcode.INTERNAL_ERROR,\n                             e);\n    }\n  }\n\n  /**\n   * @param {TransportError} transportError The SMF parsing error passed from the transport\n   * @returns {undefined}\n   * @private\n   */\n  handleSMFParseError(transportError) {\n    // fatal connection error\n\n    // notify client\n    return this.errorInFsm(transportError,\n                           ErrorSubcode.PROTOCOL_ERROR);\n  }\n\n  handleSMPMessage(message, header) {\n    this.updateRxStats(message);\n\n    // find matching correlationTag to cancel timer\n    const cancelledRequest = this.cancelOutstandingCorrelatedReq(header.pm_corrtag || '');\n    /*\n     * If we find the correlationTag and it has a callback associated with it\n     * then call that callback.  It is likely calling back straight to the application\n     * due to a call to session.subscribe() or session.unsubscribe() or\n     * session.updateProperty().\n     * Otherwise just send a TRANSPORT_PROTOCOL_SMP event to the FSM.\n     */\n    if (Check.nothing(cancelledRequest) || Check.nothing(cancelledRequest.respRecvdCallback)) {\n      /*\n       * correlation tag not found, probably an error response to a subscription\n       * request that did not request-confirm,  or it could be one of the\n       * FSM generated subscriptions and the callback is the anonymous function\n       * in state WaitingForSubConfirmm\n       */\n      const sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_PROTOCOL_SMP });\n      sEvent.smfMsg = message;\n      return this.processEvent(sEvent);\n    }\n\n    // calling through the callback, this should  be a callback in the _session for\n    // applicated generated subscribe/unsubscribe/updateProperty(clientName)\n    return cancelledRequest.respRecvdCallback(message, cancelledRequest);\n  }\n\n  /**\n   * @param {Number} respCode The router response code\n   * @param {String} respText The router response text\n   * @param {String} subscriptionStr The subscription cache key\n   * @param {CorrelatedRequest} request The associated request\n   * @param {Boolean} confirm Whether the user wanted confirmation for the request\n   * @private\n   */\n  handleSubscriptionUpdateError(respCode, respText, subscriptionStr, request, confirm) {\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n\n    //\n    // if it is a not-found or already-present error, it does not affect our subscription\n    // cache, otherwise remove it from the cache.\n    //\n    if (!(errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT ||\n      errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND)) {\n      // remove from cache\n      this.removeFromSubscriptionCache(subscriptionStr);\n    }\n\n    //\n    // notify the client\n    //\n    this._session.handleSubscriptionUpdateError(respCode,\n                                                respText,\n                                                subscriptionStr,\n                                                request,\n                                                confirm);\n  }\n\n  /**\n   * @param {String} correlationTag The correlation tag for the timed out request\n   * @private\n   */\n  handleSubscriptionTimeout(correlationTag) {\n    // remove request from queue\n    const { LOG_ERROR } = this.logger;\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`, e);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.SUBSCRIBE_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * @param {TransportSessionEvent} transportEvent The event to handle\n   * @returns {undefined}\n   * @private\n   */\n  handleTransportEvent(transportEvent) {\n    const { LOG_INFO, LOG_WARN } = this.logger;\n    const infoStr = transportEvent.getInfoStr() || '';\n    LOG_INFO(`Receive transport event: ${transportEvent}`);\n\n    let sEvent;\n\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportLib.TransportSessionEventCode.UP_NOTICE:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_UP });\n        sEvent.sessionId = transportEvent.getSessionId();\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.DESTROYED_NOTICE:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_DESTROYED });\n        sEvent.sessionId = transportEvent.getSessionId();\n        sEvent.eventText = infoStr;\n        sEvent.errorSubcode = transportEvent.getSubcode();\n        sEvent.eventReason = transportEvent;\n        this._smfClient = null; // calling reset does nothing useful here\n        this._transport = null; // transport has been destroyed\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.CAN_ACCEPT_DATA:\n        //\n        // unblock the publisher too\n        this.GuaranteedFlowControlledRelief();\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_CAN_ACCEPT_DATA });\n        sEvent.sessionId = transportEvent.getSessionId();\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.SEND_ERROR:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.SEND_ERROR });\n        sEvent.sessionId = transportEvent.getSessionId();\n        sEvent.eventText = transportEvent.getInfoStr();\n        sEvent.errorSubcode = transportEvent.getSubcode();\n        sEvent.eventReason = transportEvent;\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.DATA_DECODE_ERROR:\n      case TransportLib.TransportSessionEventCode.PARSE_FAILURE:\n        // fatal connection error\n        return this.errorInFsm(transportEvent.getInfoStr(),\n                               transportEvent.getSubcode());\n      default:\n        LOG_WARN('Received unknown transport session event', transportEvent);\n    }\n\n    return true;\n  }\n\n  /**\n   * @param {BaseMessage|Message} message The message to handle\n   * @param {SMFHeader} [header] The SMF header from the message, if available\n   * @returns {undefined}\n   * @private\n   */\n  handleUnknownProtocolMessage(message, header) {\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    // unknown protocol\n    this.updateRxStats(message);\n    if (header && header.smf_protocol === SMFLib.SMFProtocol.TSESSION) {\n      // change state\n      LOG_ERROR(`Received transport session message instead of SMF message, protocol 0x${\n        formatHexString(header.smf_protocol)}`);\n      LOG_ERROR(`Transport MessageType=${message.messageType}, target sessionId=${\n        formatHexString(message.sessionId)}`);\n      // notify client\n      return this.errorInFsm('Received message with unknown protocol',\n                             ErrorSubcode.PARSE_FAILURE);\n    }\n\n    // Drop message of unknown protocol and increment stats\n    if (this._sessionStatistics) {\n      this._sessionStatistics.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n    }\n    LOG_INFO(`Drop message with unknown protocol 0x${formatHexString(header.smf_protocol)}`);\n    return null;\n  }\n\n\n  /**\n   * Increments a session statistic\n   *\n   * @param {StatType} statType The key to increment\n   * @param {?Number} value The amount to increment the value by\n   * @returns {?Number} The new value for the statistic\n   * @private\n   */\n  incStat(statType, value) {\n    return this._sessionStatistics ? this._sessionStatistics.incStat(statType, value) : undefined;\n  }\n\n  /**\n   * @private\n   */\n  initTransport() {\n    const { LOG_INFO } = this.logger;\n    const host = this._currentHost;\n    LOG_INFO(`Creating transport session ${host}`);\n    this._kaStats = { lastMsgWritten: 0, lastBytesWritten: 0 };\n\n    this._smfClient = new TransportLib.SMFClient(\n      rxData => this.handleSMFMessage(rxData),\n      rxError => this.handleSMFParseError(rxError),\n      this\n    );\n\n    this._transport = TransportLib.TransportFactory.createTransport(\n      host,\n      transportEvent => this.handleTransportEvent(transportEvent),\n      this._smfClient,\n      this._sessionProperties.clone(),\n      () => this.sessionIdHex\n    );\n    this.injectTransportInterceptor(this._transportInterceptor);\n  }\n\n  /**\n   * Installs a transport interceptor for the current and any future transports.\n   *\n   * The object methods .installed(instance) and .removed(instance) will be called if present, with\n   * the transport instance as a parameter.\n   *\n   * To stop using transport interceptors, supply a null interceptor argument.\n   *\n   * @param {Object} interceptor An object given access to the internals of the transport instance.\n   * @private\n   */\n  injectTransportInterceptor(interceptor) {\n    this._transportInterceptor = interceptor;\n    if (this._transport) {\n      this._transport.setInterceptor(interceptor);\n    }\n  }\n\n  /**\n   * Call from keep alive scheduled task\n   * @returns {undefined}\n   * @private\n   */\n  keepAliveTimeout() {\n    const { LOG_TRACE, LOG_DEBUG, LOG_INFO } = this.logger;\n    LOG_TRACE('KeepAlive timeout');\n\n    // session is in connected state but hasn't received keep alive response\n    // Less than or equal to because this is the number of *already sent* KAs\n    if (this._keepAliveCounter >= this._sessionProperties.keepAliveIntervalsLimit) {\n      LOG_INFO(`Exceed maximum keep alive intervals limit ${\n                this._sessionProperties.keepAliveIntervalsLimit}`);\n      // stop timers\n      LOG_DEBUG('Stop keep alive timer');\n      if (this._keepAliveTimer) {\n        clearInterval(this._keepAliveTimer);\n      }\n\n      // change session state\n      return this.errorInFsm('Exceed maximum keep alive intervals limit',\n                             ErrorSubcode.KEEP_ALIVE_FAILURE);\n    }\n\n    LOG_TRACE('About to send keep alive');\n\n    const clientStats = this._transport.getClientStats();\n    const prestatMsgWritten = clientStats.msgWritten;\n    const prestatBytesWritten = clientStats.bytesWritten;\n\n    const kaMsg = new SMFLib.KeepAliveMessage();\n    const returnCode = this.send(kaMsg, null, true);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      /*\n       * TransportReturnCode.NO_SPACE is not possible.\n       * Send is called with the forceAllowEnqueue parameter.\n       * So whatever error is returned is fatal\n       */\n      return this.errorInFsm('Cannot send keep alive message',\n                             ErrorSubcode.KEEP_ALIVE_FAILURE);\n    }\n\n    // We need to avoid incrementing the KA counter if we're in the process of\n    // sending a huge message and we've had no opportunity to write a KA message.\n    // Detection: last KA's snapshot of messages written is unchanged, but number of bytes\n    // written has gone up.\n    if (this._kaStats.lastMsgWritten === prestatMsgWritten &&\n      this._kaStats.lastBytesWritten < prestatBytesWritten) {\n      LOG_DEBUG('Keep alive sent',\n                'Not incrementing keep alive counter due to large message send',\n                `KA count = ${this._keepAliveCounter}`\n      );\n    } else {\n      this._keepAliveCounter++;\n      LOG_TRACE(`Last message written: ${this._kaStats.lastMsgWritten}`);\n      LOG_TRACE(`Last bytes written: ${this._kaStats.lastBytesWritten}`);\n      LOG_TRACE(`Keep alive sent, increment keep alive counter, keep alive count = ${\n        this._keepAliveCounter}`);\n    }\n    this._kaStats.lastBytesWritten = clientStats.bytesWritten;\n    this._kaStats.lastMsgWritten = clientStats.msgWritten;\n\n    return true;\n  }\n\n  /**\n   * Prepares a message for sending and then invoke the transport\n   * send method. For guaranteed messages, pass the transport send\n   * method to the publisher so it can be invoked from there and errors\n   * handled within the publisher FSM.\n   * @param {BaseMessage} message The message to prepare.\n   * @private\n   */\n  prepareAndSendMessage(message) {\n    if (message instanceof Message) {\n      let returnCode;\n      // Delegate message preparation where appropriate\n      const deliveryMode = message.getDeliveryMode();\n      switch (deliveryMode) {\n\n        case MessageDeliveryModeType.DIRECT:\n          if (!this._transport) return;\n          message._payload_is_memoized = false;\n          message._memoized_csumm = null;\n          message._memoized_payload = null;\n          returnCode = this.sendToTransport(message);\n          break;\n\n        case MessageDeliveryModeType.PERSISTENT:\n        case MessageDeliveryModeType.NON_PERSISTENT:\n          if (!this._defaultPublisher) {\n            const reason = this._session.adLocallyDisabled\n                ? 'locally disabled'\n                : 'remotely unsupported';\n            throw new OperationError('Session does not provide Guaranteed Message Publish capability',\n                                       ErrorSubcode.GM_UNAVAILABLE,\n                                       reason);\n          } else {\n            if (this._gmSendDisallowed) this._gmSendDisallowed(); // throws if present\n            returnCode = this._defaultPublisher.prepareAdMessageAndSend(message);\n          }\n          break;\n\n        default: {\n          const { LOG_ERROR } = this.logger;\n          LOG_ERROR('Unhandled message delivery mode', MessageDeliveryModeType.describe(deliveryMode));\n        }\n      }\n\n      if (returnCode !== TransportLib.TransportReturnCode.OK) {\n        if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n          // Must be DIRECT message because the Publisher handles NO_SPACE returnCode\n          // internally\n          this._userBackpressured = true;\n          throw new OperationError('Cannot send message - no space in transport',\n            ErrorSubcode.INSUFFICIENT_SPACE,\n            TransportLib.TransportReturnCode.describe(returnCode));\n        }\n\n        // This is a fatal session error\n        this.setCurrentError(new OperationError('Cannot send message',\n            ErrorSubcode.INVALID_OPERATION,\n            TransportLib.TransportReturnCode.describe(returnCode)));\n        this.processEvent(new SessionFSMEvent({ name: SessionEventName.EXCEPTION }));\n      }\n    }\n  }\n\n  GuaranteedFlowControlledRelief() {\n    if (this._defaultPublisher) {\n      this._defaultPublisher.processFSMEvent(\n        new PublisherLib.PublisherFSMEvent({\n          name: PublisherLib.PublisherFSMEventNames.CAN_SEND }));\n    }\n  }\n  /**\n   * Reapply subscriptions.\n   * @returns {Boolean} True if all subscriptions were reapplied. False if WOULD_BLOCK.\n   * @private\n   */\n  reapplySubscriptions() {\n    const { LOG_INFO, LOG_DEBUG } = this.logger;\n    const { SolclientFactory: { createTopicDestination } } = SolclientFactoryLib;\n    LOG_INFO(`Reapplying subscriptions, count=${this._subscriptionCacheKeys.length}`);\n    // add subscriptions and ask for confirm on last one\n\n    if (!this._subscriptionCacheKeys) {\n      // Nothing to do\n      return true;\n    }\n\n    try {\n      while (this._subscriptionCacheKeys.length) {\n        //\n        // The key is the the topic string (topic.getName()).\n        // sendSubscribe() requires a destination, so we encode it here.\n        //\n        // on entry to reapplySubscriptions we added the P2P topic to\n        // subscriptionCacheKeys but there is no corresponding entry in\n        // _subscriptionCache so we no longer use the key to index that actual\n        // cache.\n        // If it becomes necesary to pass the Topic object to sendSubscribe in a\n        // a future enhancement (perhaps to remember flags like request-confirm) then\n        // this logic here needs to be revisisted.\n        const key = this._subscriptionCacheKeys.shift();\n        const requestConfirmation = this._subscriptionCacheKeys.length === 0;\n        const topicDestination = createTopicDestination(key);\n        const rc = this.sendSubscribe(topicDestination,\n                                      requestConfirmation,\n                                      null,\n                                      this._sessionProperties.readTimeoutInMsecs,\n                                      null);\n        if (rc !== TransportLib.TransportReturnCode.OK) {\n          this.errorInFsm(\n            `Error occurred sending subscription: ${TransportLib.TransportReturnCode.describe(rc)}`,\n            ErrorSubcode.INTERNAL_ERROR\n          );\n        }\n      }\n    } catch (e) {\n      if (e instanceof OperationError && e.subcode === ErrorSubcode.INSUFFICIENT_SPACE) {\n        LOG_DEBUG('Apply subscriptions blocked due to insufficient space, wait for can accept data event');\n        return false;\n      }\n      this.errorInFsm(`Unexpected expection occurred while reapplying subscriptions: ${e}`,\n                      e.subcode || ErrorSubcode.INTERNAL_ERROR,\n                      e);\n    }\n    return true;    // sent all subscriptions\n  }\n\n\n  /**\n   * @param {Destination} topic The topic to remove from the subscription cache\n   * @returns {?Destination} The value in the subscription cache at that key\n   * @private\n   */\n  removeFromSubscriptionCache(topic) {\n    if (Check.nothing(topic) || !this._subscriptionCache) {\n      return null;\n    }\n\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    const key = (topic instanceof Destination) ? topic.name : topic;\n    LOG_DEBUG(`Remove subscription ${key}`);\n    const sub = this._subscriptionCache[key];\n    if (sub === undefined || sub === null) {\n      return null;\n    }\n\n    try {\n      const result = delete this._subscriptionCache[key];\n      if (!result) {\n        LOG_ERROR(`Cannot remove subscription ${key}`);\n      } else {\n        this._subscriptionCacheCount--;\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot remove subscription ${key}`, e);\n    }\n    return sub;\n  }\n\n\n  /**\n   * Reset the FSM state and release all objects. This method is called once from\n   * SessionFSM.onInitial\n   * @private\n   */\n  reset() {\n    this.resetStats();\n\n    /**\n     * The following fields are disposed when disconnect is called\n     * and recreated when connect is called again.\n     */\n    this.sessionId = null;\n\n    // Need to reschedule keepAliveTimer when some other write operation happens\n    this._keepAliveTimer = null;\n    this.resetKeepAliveCounter();\n    this._correlatedReqs = {};\n\n    this._disposed = false;\n\n    this._smfClient = null;\n    this._kaStats = { lastMsgWritten: 0, lastBytesWritten: 0 };\n\n    /**\n     * The following fields are destroyed when dispose is called\n     * and cannot be reinitialized.\n     */\n    this._subscriptionCache = null;\n    this._subscriptionCacheKeys = null;\n    this._subscriptionCacheCount = 0;\n    if (this._sessionProperties.reapplySubscriptions) {\n      this._subscriptionCache = {};\n    }\n\n    // When negotiating the initial transport, we can fail and transparently reconnect.\n    // this.resetTransportProtocolHandler();\n    // this._lastKnownGoodTransport = null;\n\n    // event and error information\n    this._eventCode = null;\n    this._responseCode = null;\n    this.eventText = null;\n    this.errorSubcode = null;\n    this.eventReason = null;\n  }\n\n  /**\n   * @private\n   */\n  resetKeepAliveCounter() {\n    // Reset the KA counter. Called by the SMFClient on each SMF chunk received (whether full\n    // message or not).\n    this._keepAliveCounter = 0;\n  }\n\n  /**\n   * @returns {?} The result of calling resetStats().\n   * @private\n   */\n  resetStats() {\n    return this._sessionStatistics ? this._sessionStatistics.resetStats() : undefined;\n  }\n\n\n  /**\n   * Schedule keep alive task\n   * @private\n   */\n  scheduleKeepAlive() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    const { keepAliveIntervalInMsecs } = this._sessionProperties;\n    if (keepAliveIntervalInMsecs === 0) {\n      // Keepalives disabled\n      return;\n    }\n\n    if (this._keepAliveTimer) {\n      clearInterval(this._keepAliveTimer);\n    }\n\n    this._keepAliveTimer = setInterval(() => {\n      try {\n        this.keepAliveTimeout();\n      } catch (e) {\n        LOG_ERROR('Error occurred in keepAliveTimeout', e);\n      }\n    }, keepAliveIntervalInMsecs);\n\n    LOG_DEBUG(`Create Keepalive timer with interval: ${keepAliveIntervalInMsecs}ms`);\n  }\n\n  /**\n   * Provide a method for the session object to use to send\n   * messages to the transport.  This method is only used internally by\n   * the FSM.  The session send() API should invoke sendToTransport() directly\n   * so errors are thrown back to the application.\n   *\n   * @param {solace.Message} message The message to send\n   * @param {Object} [statTarget=this._sessionStatistics] The sender of this message, for stats.\n   * @param {Boolean} [forceAllowEnqueue=false] Set to true to force enqueueing of control messages\n   *\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  send(message, statTarget = this._sessionStatistics, forceAllowEnqueue = false) {\n    try {\n      return this.sendToTransport(message, statTarget, forceAllowEnqueue);\n    } catch (ex) {\n      const { LOG_TRACE } = this.logger;\n      // The send operation threw (or we threw locally), which is always a SessionException.\n      LOG_TRACE(`Error sending message: ${ex.message}: ${ex.stack}`);\n      this.errorInFsm(`Send operation failed: ${ex.message}`,\n                      ex.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    return TransportLib.TransportReturnCode.CONNECTION_ERROR;\n  }\n\n  /**\n   * Provide a method for the session object to use to send\n   * messages to the transport.\n   *\n   * @param {solace.Message} message The message to send\n   * @param {Object} [statTarget=this._sessionStatistics] The sender of this message, for stats.\n   * @param {Boolean} [forceAllowEnqueue=false] Set to true to force enqueueing of control messages\n   *\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendToTransport(message, statTarget = this._sessionStatistics, forceAllowEnqueue = false) {\n    let returnCode = TransportLib.TransportReturnCode.CONNECTION_ERROR;\n\n    if (!this._transport) {\n      throw new OperationError('Transport has been destroyed', ErrorSubcode.INTERNAL_ERROR);\n    }\n    const content = SMFLib.Codec.Encode.encodeCompoundMessage(message);\n    returnCode = this._transport.send(content, forceAllowEnqueue);\n    switch (returnCode) {\n      case TransportLib.TransportReturnCode.OK:\n        this.updateTxStats(message, statTarget);\n        break;\n      case TransportLib.TransportReturnCode.NO_SPACE:\n        if (!forceAllowEnqueue) {\n          // This is allowed.\n          break;\n        }\n      // Else fall through\n      default:\n        throw new OperationError(`Transport returned ${TransportLib.TransportReturnCode.describe(returnCode)}`,\n          ErrorSubcode.INTERNAL_ERROR);\n    }\n\n    return returnCode;\n  }\n\n\n  /**\n   * Initiates the ClientCtrl handshake, called from transportSessionEvent callback\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendClientCtrlLogin() {\n    const { LOG_INFO, LOG_DEBUG, LOG_TRACE } = this.logger;\n\n    this._compressedTLS =\n      ((this._sessionProperties.compressionLevel > 0) &&\n        (this._currentHost.match(/tcps:/i) !== null));\n    this._plaintextTLS =\n      ((this._currentHost.match(/tcps:/i) !== null) &&\n        (this._sessionProperties.sslConnectionDowngradeTo === SslDowngrade.PLAINTEXT));\n    LOG_TRACE(`sendClientLogin plaintextTLS: ${this._plaintextTLS} _compressedTLS: ${this._compressedTLS}`);\n\n    // Don't use the correlation tag. For Login only, the router won't return it.\n    const clientCtrlMsg = SMFLib.ClientCtrlMessage.getLogin(this._sessionProperties,\n                                                            this._compressedTLS,\n                                                            this._plaintextTLS);\n    const returnCode = this.send(clientCtrlMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      this._responseCode = null;\n      this.eventReason = null;\n      // notify client\n      if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n        this.eventText = 'Cannot send client control - no space in transport';\n        this.errorSubcode = ErrorSubcode.INSUFFICIENT_SPACE;\n      } else {\n        LOG_INFO(`Cannot send client ctrl, return code\n          ${TransportLib.TransportReturnCode.describe(returnCode)}`);\n        this.eventText = 'Cannot send client ctrl';\n        this.errorSubcode = ErrorSubcode.INVALID_OPERATION;\n      }\n    } else {\n      // enqueue outstanding request, use a fake correlation tag for Login only\n      const correlationTag = TransportLib.SMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG;\n      LOG_INFO(`Using internally correlationTag=${correlationTag} for tracking ClientCTRL Login`);\n      this.enqueueOutstandingCorrelatedReq(correlationTag,\n                                           null,\n                                           null,\n                                           null,\n                                           rxMsgObj => this.handleClientCtrlResponse(rxMsgObj));\n\n      LOG_DEBUG('Sent client ctrl');\n    }\n    return returnCode;\n  }\n\n  /**\n   *\n   * Internal method for sending subscriptions from SessionConnecting state (reapply or P2P-inbox)\n   *\n   * @param {Destination} topic The topic to subscribe\n   * @param {Boolean} requestConfirmation If true, expect a reply on success also\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout for the request\n   * @param {function} respRecvdCallback The callback on reply received\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendSubscribe(topic, requestConfirmation, correlationKey, requestTimeout, respRecvdCallback) {\n    const { LOG_INFO, LOG_DEBUG } = this.logger;\n    assert(topic instanceof Destination, 'sendSubscribe requires a Destination, not a string');\n    LOG_DEBUG('Sending subscribe: ', topic, requestConfirmation, correlationKey);\n    const correlationTag = this.getCorrelationTag();\n    const smpMsg = SMFLib.SMPMessage.getSubscriptionMessage(correlationTag,\n                                                            topic,\n                                                            true, // set add == true\n                                                            requestConfirmation);\n    assert(smpMsg.encodedUtf8Subscription, 'Encoded SMP message was invalid');\n    const returnCode = this.send(smpMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      LOG_INFO('Subscribe failed', TransportLib.TransportReturnCode.describe(returnCode));\n      return returnCode;\n    }\n    if (requestConfirmation) {\n      this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        () => this.handleSubscriptionTimeout(correlationTag),\n        requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n        correlationKey,\n        respRecvdCallback);\n    }\n    return returnCode;\n  }\n\n  /**\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property key to change\n   * @param {?} newValue The new value for the property\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout for the request\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendUpdateProperty(mutableSessionProperty,\n                     newValue,\n                     correlationKey,\n                     requestTimeout,\n                     respRecvdCallback) {\n    const correlationTag = this._smfClient.nextCorrelationTag();\n    const smpMsg = SMFLib.ClientCtrlMessage.getUpdate(mutableSessionProperty,\n                                                      newValue,\n                                                      correlationTag);\n\n    const returnCode = this.send(smpMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      return returnCode;\n    }\n\n    this.enqueueOutstandingCorrelatedReq(\n      correlationTag,\n      () => this.handleUpdatePropertyTimeout(correlationTag),\n      requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n      correlationKey,\n      respRecvdCallback);\n    return returnCode;\n  }\n\n  /**\n   * @private\n   */\n  setClientCtrlTimer() {\n    this.clearClientCtrlTimer();\n\n    this._clientCtrlTimer = setTimeout(() => this.handleClientCtrlTimeout(),\n                                       this._sessionProperties.transportDowngradeTimeoutInMsecs);\n  }\n\n  /**\n   * @private\n   */\n  setConnectTimer() {\n    this.clearConnectTimer();\n    // The hosts lists provides the wait time for inter-host timeouts.\n    // This timeout is for the entire list.\n    this._connectTimer = setTimeout(() => this.handleConnectTimeout(),\n                                    this._sessionProperties.connectTimeoutInMsecs);\n  }\n\n  /**\n   * Sets the error exit information for the FSM.\n   *\n   * This applies key-value pairs from properties to the current error object,\n   * but does not allow overwriting and does not allow assignment of null or undefined values.\n   *\n   * Only the following fields are relevant, any other fields transferred to currentError by this\n   * method are eventually ignored:\n   *    * eventText\n   *    * responseCode\n   *    * errorSubcode\n   *    * eventReason\n   *\n   * See SessionConnecting exitPoint 'errorExit'. This is the only place the information in\n   * currentError is extracted.\n   *\n   * Could be implemented as `\n   * this._currentError = Object.assign({}, filter(properties), this._currentError)\n   * `\n   * where `filter` is a key-value filter that works as described above.\n   *\n   * @param {Object} source An object with properties to be applied\n   */\n  setCurrentError(source) {\n    const target = this._currentError || {};\n    const { LOG_TRACE } = this.logger;\n    Object.keys(source).forEach((key) => {\n      if (source[key] === null || source[key] === undefined) return false;\n      if (target[key] !== null && target[key] !== undefined) {\n        LOG_TRACE(`Attempt to overwrite property {key=${key}, current value=${target[key]}, incoming value=${source[key]}}`);\n        return false;\n      }\n      target[key] = source[key];\n      return true;\n    });\n    this._currentError = target;\n  }\n\n\n  /**\n   * Send a subscribe or unsubscribe request on behalf of the API.\n   * @param {Destination} subject The target for the update\n   * @param {Boolean} requestConfirmation Request a success message if true\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout in milliseconds\n   * @param {SessionRequestType} requestType The request type\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  subscriptionUpdate(subject,\n                     requestConfirmation,\n                     correlationKey,\n                     requestTimeout,\n                     requestType,\n                     respRecvdCallback) {\n    //check topic supported\n    const error = this.checkSessionDestinationCapability(subject);\n    if (error) {\n      throw error;\n    }\n    const timeoutMsg =\n      SubscriptionUpdateTimeoutMessages[requestType] ||\n      SubscriptionUpdateTimeoutMessages.default;\n    const isSMP = (requestType !== SessionRequestType.REMOVE_DTE_SUBSCRIPTION);\n    const add = (requestType === SessionRequestType.ADD_SUBSCRIPTION ||\n      requestType === SessionRequestType.ADD_P2PINBOX);\n    const correlationTag = this.getCorrelationTag();\n\n    const generateMessage = isSMP\n      ? SMFLib.SMPMessage.getSubscriptionMessage\n      : SMFLib.AdProtocolMessage.getDTEUnsubscribeMessage;\n    const msg = generateMessage(correlationTag,\n                                subject,\n                                add,\n                                requestConfirmation);\n    const returnCode = this.send(msg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      return returnCode;\n    }\n\n    if (requestConfirmation) {\n      this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        () => this.handleApiSubscriptionTimeout(correlationTag,\n                                                timeoutMsg),\n        requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n        correlationKey,\n        respRecvdCallback);\n    }\n    if (requestType === SessionRequestType.ADD_SUBSCRIPTION &&\n      this._sessionProperties.reapplySubscriptions) {\n      this.addToSubscriptionCache(subject);\n    } else if (requestType === SessionRequestType.REMOVE_SUBSCRIPTION &&\n      this._sessionProperties.reapplySubscriptions) {\n      this.removeFromSubscriptionCache(subject);\n    }\n    return returnCode;\n  }\n\n  /**\n   * Send a queue subscribe or unsubscribe request.\n   * @param {Destination} subject The target for the update\n   * @param {Destination} queue The queue where the subscription is added/removed\n   * @param {Number} requestTimeout The timeout in milliseconds\n   * @param {Boolean} add (if true) or remove (if false).\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  queueSubscriptionUpdate(subject,\n                          queue,\n                          requestTimeout,\n                          add,\n                          respRecvdCallback) {\n    const timeoutMsg =\n      add ? SubscriptionUpdateTimeoutMessages[SessionRequestType.ADD_SUBSCRIPTION] :\n      SubscriptionUpdateTimeoutMessages[SessionRequestType.REMOVE_SUBSCRIPTION];\n    const correlationTag = this.getCorrelationTag();\n\n    const msg = SMFLib.SMPMessage.getQueueSubscriptionMessage(\n      correlationTag,\n      subject,\n      queue,\n      add);\n    const returnCode = this.send(msg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      //TODO: act on this.\n      // (throw.)\n      return returnCode;\n    }\n\n    this.enqueueOutstandingCorrelatedReq(\n      correlationTag,\n      () => {\n        const origReq = this._correlatedReqs[correlationTag];\n        //TODO maybe just use the cancel method instead (which returns the original request)\n        this.handleApiSubscriptionTimeout(correlationTag,\n                                          timeoutMsg);\n        respRecvdCallback(null, origReq);\n      },\n      requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n      null, // no need for session machinery to track flow correlationKey.\n      respRecvdCallback);\n    return returnCode;\n  }\n\n  /**\n   * @param {BaseMessage|Message} smfMessage The message received\n   * @param {Stats} [target] The statistics target to update, default is session stats\n   * @private\n   */\n  updateRxStats(smfMessage, target = this._sessionStatistics) {\n    if (!target) {\n      return;\n    }\n    const smfHeader = smfMessage.smfHeader;\n    if (!smfHeader) {\n      return;\n    }\n    const deliveryMode = smfHeader.pm_deliverymode || 0;\n    const msgStatKey = STAT_RX_BYMODE_MSGS[deliveryMode];\n    const bytesStatKey = STAT_RX_BYMODE_BYTES[deliveryMode];\n    const msgLength = smfHeader.messageLength;\n\n    switch (smfHeader.smf_protocol) {\n      case SMFLib.SMFProtocol.TRMSG:\n        if (smfHeader.pm_respcode === 0) {\n          target.incStat(StatType.RX_TOTAL_DATA_MSGS);\n          target.incStat(msgStatKey);\n          target.incStat(StatType.RX_TOTAL_DATA_BYTES, msgLength);\n          target.incStat(bytesStatKey, msgLength);\n          if (smfHeader.smf_di) {\n            target.incStat(StatType.RX_DISCARD_MSG_INDICATION);\n          }\n        }\n        break;\n      case SMFLib.SMFProtocol.CLIENTCTRL:\n      case SMFLib.SMFProtocol.SMP:\n      case SMFLib.SMFProtocol.KEEPALIVE:\n      case SMFLib.SMFProtocol.KEEPALIVEV2:\n      case SMFLib.SMFProtocol.ADCTRL:\n        target.incStat(StatType.RX_CONTROL_MSGS);\n        target.incStat(StatType.RX_CONTROL_BYTES, msgLength);\n        break;\n      default:\n    }\n  }\n\n  /**\n  * @param {BaseMessage|Message} smfMessage The message sent\n  * @param {Stats} [target] The statistics target to update, default is session stats\n  * @private\n  */\n  updateTxStats(smfMessage, target = this._sessionStatistics) {\n    if (!target) {\n      return;\n    }\n    if (smfMessage.getReplyTo !== undefined && smfMessage.getReplyTo()) {\n      // update stats\n      target.incStat(StatType.TX_REQUEST_SENT);\n    }\n    const smfHeader = smfMessage.smfHeader;\n    if (!smfHeader) {\n      return;\n    }\n\n    const deliveryMode = smfHeader.pm_deliverymode || 0;\n    let msgStatKey = STAT_TX_BYMODE_MSGS[deliveryMode];\n    let bytesStatKey = STAT_TX_BYMODE_BYTES[deliveryMode];\n    //\n    // If this is a Guaranteed Message we may need to further refine the stats by the redelivered\n    // status\n    if (deliveryMode !== MessageDeliveryModeType.DIRECT) {\n      if (smfMessage.isRedelivered()) {\n        msgStatKey = STAT_TX_BYMODE_REDELIVERED[deliveryMode];\n        bytesStatKey = STAT_TX_BYMODE_BYTES_REDELIVERED[deliveryMode];\n      }\n    }\n    const msgLength = smfHeader.messageLength;\n\n    switch (smfHeader.smf_protocol) {\n      case SMFLib.SMFProtocol.TRMSG:\n        target.incStat(msgStatKey);\n        target.incStat(bytesStatKey, msgLength);\n        break;\n      case SMFLib.SMFProtocol.CLIENTCTRL:\n      case SMFLib.SMFProtocol.SMP:\n      case SMFLib.SMFProtocol.KEEPALIVE:\n      case SMFLib.SMFProtocol.KEEPALIVEV2:\n      case SMFLib.SMFProtocol.ADCTRL:\n        target.incStat(StatType.TX_CONTROL_MSGS);\n        target.incStat(StatType.TX_CONTROL_BYTES, msgLength);\n        break;\n      default:\n    }\n  }\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlRespMsg The client control message with props\n   * @private\n   */\n  updateReadonlySessionProps(clientCtrlRespMsg) {\n    const props = this._sessionProperties; // Modify session properties in place\n\n    props._setVpnNameInUse(clientCtrlRespMsg.getVpnNameInUseValue() || '');\n    const oldVirtualRouterName = props.virtualRouterName;\n    const newVirtualRouterName = clientCtrlRespMsg.getVridInUseValue() || '';\n    props._setVirtualRouterName(newVirtualRouterName);\n    if (oldVirtualRouterName !== '' && oldVirtualRouterName !== newVirtualRouterName) {\n      this.handleVirtualRouterNameChange(oldVirtualRouterName, newVirtualRouterName);\n    }\n\n    // The Solace Message Router login response should always contain a P2P topic for this client\n    // name. If it doesn't that's an error (and we store \"\").\n    props._setP2pInboxBase(clientCtrlRespMsg.getP2PTopicValue() || '');\n    props._setP2pInboxInUse(P2PUtil.getP2PInboxTopic(props.p2pInboxBase));\n    this._session.updateCapabilities(clientCtrlRespMsg.getRouterCapabilities());\n\n    // Create and cache a guard for GM sending.\n    const gmCap = this._session._getCapability(CapabilityType.GUARANTEED_MESSAGE_PUBLISH);\n    this._gmSendDisallowed = (typeof gmCap === 'boolean' && !gmCap)\n      ? () => {\n        throw new OperationError(\n        'Sending guaranteed message is not allowed by router for this client',\n        ErrorSubcode.INVALID_OPERATION,\n        null);\n      }\n      : null;\n  }\n\n  handleVirtualRouterNameChange(oldName, newName) {\n    if (this._consumers) {\n      this._consumers.flows.forEach(consumer => consumer.onVRNChanged());\n      this._consumers.reconnectingFlows.forEach(consumer => consumer.onVRNChanged());\n    }\n    this.emitSessionEvent(\n      SessionEvent.build(SessionEventCode.VIRTUALROUTER_NAME_CHANGED,\n                         `Virtual router name is changed from ${oldName} to ${newName}`,\n                         null,\n                         0,\n                         null,\n                         null));\n  }\n\n  /**\n   * @returns {String} The session's ID in hexadecimal format\n   * @private\n   */\n  get sessionIdHex() {\n    return this.sessionId && formatHexString(this.sessionId) || 'N/A';\n  }\n\n  updateTransportCompression(callback) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('updateTransportCompression called. ' +\n      `plaintextTLS: ${this._plaintextTLS} _compressedTLS: ${this._compressedTLS}`);\n    if (this._plaintextTLS) {\n      TransportLib.TransportFactory.severTls(this._transport, this._compressedTLS, callback);\n      return null;\n    }\n    if (this._compressedTLS) {\n      const newTransport = TransportLib.TransportFactory.startCompression(this._transport);\n      return newTransport;\n    }\n    // nothing to do.\n    return this._transport;\n  }\n}\n\nmodule.exports.SessionFSM = SessionFSM;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionOperation = {\n  CONNECT:         'CONNECT',\n  DISCONNECT:      'DISCONNECT',\n  CTRL:            'CTRL',\n  SEND:            'SEND',\n  QUERY_OPERATION: 'QUERY_OPERATION',\n};\n\nmodule.exports.SessionOperation = Enum.new(SessionOperation);\n","const PublisherLib = require('solclient-message-publisher');\nconst SessionPropertiesLib = require('./session-properties');\nconst SMFLib = require('solclient-smf');\nconst { APIPropertiesValidators, parseURL } = require('solclient-util');\nconst { AuthenticationScheme } = require('./authentication-schemes');\nconst { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_WARN, LOG_INFO } = require('solclient-log');\nconst { SslDowngrade } = require('./ssl-downgrades');\nconst { TransportProtocol } = require('solclient-transport');\n\nconst {\n  validateInstance,\n  valArrayIsMember,\n  valArrayOfString,\n  valBoolean,\n  valLength,\n  valNotEmpty,\n  valNumber,\n  valRange,\n  valString,\n  valStringOrArray,\n} = APIPropertiesValidators;\n\nconst ALLOWED_PROTOCOLS = ['http:', 'https:', 'ws:', 'wss:', 'tcp:', 'tcps:'];\n\nfunction valClientName(typeDesc, instance, name) {\n  // valString and valLength(160) have already been called.\n  const error =\n    SMFLib.ClientCtrlMessage.validateClientName(\n      instance[name],\n      errorMessage =>\n        new OperationError(`${typeDesc} validation: Property '${name}': ${errorMessage}`,\n                           ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n  if (error) {\n    throw error;\n  }\n}\n\nfunction valIsMember(typeDesc, instance, key, enumInstance, enumName, allowNull) {\n  const val = instance[key];\n  if (allowNull && val === null) return;\n  if (typeof (val) !== 'undefined' && !enumInstance.values.some(v => v === val)) {\n    throw new OperationError(`${typeDesc} validation: Property '${key\n                             }' must be a member of ${enumName}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n  }\n}\n\nfunction valSslExcludedProtocols(typeDesc, instance, name) {\n  const val = instance[name];\n  if (Check.array(val)) {\n    if (val.length > 0) {\n      const supported = SessionPropertiesLib.SessionProperties.SUPPORTED_SSL_PROTOCOLS;\n      val.forEach((protocol) => {\n        const prtcl = protocol.toLowerCase();\n        if (supported.indexOf(prtcl) < 0) {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                                   }' contains unsupported protocol: ${protocol}`,\n                                    ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      });\n    }\n  }\n}\n\nfunction valSslCipherSuites(typeDesc, instance, name) {\n  const val = instance[name];\n  if (val && Check.string(val) && !Check.empty(val)) {\n    const ciphers = val.split(',');\n    const supported = SessionPropertiesLib.SessionProperties.SUPPORTED_CIPHER_SUITES;\n    ciphers.forEach((cipher) => {\n      if (supported.indexOf(cipher.trim()) < 0) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                        }' contains unsupported cipher suite: '${cipher}'`,\n                        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n    });\n  }\n}\n\n// maximum number of common names is 16\nfunction valSslTrustedCommonNameList(typeDesc, instance, name) {\n  const val = instance[name];\n  if (Check.something(val) && Check.array(val) && val.length > 16) {\n    throw new OperationError(`${typeDesc} validation: Property '${name\n                }' length exceeds limit of 16`,\n                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n}\n\nfunction valUrlList(typeDesc, instance, name) {\n  const val = instance[name];\n  const valArray = typeof val === 'string' ? val.split(',') : val;\n  if (!Check.array(valArray)) {\n    throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' not an array or comma-delimited string`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n  }\n  valArray.forEach((el) => {\n    let url = null;\n    try {\n      url = parseURL(el);\n    } catch (ex) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' contained an invalid URL: ${el}`,\n                                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (!Check.included(url.protocol, ALLOWED_PROTOCOLS)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' contained a URL'${url.href\n                                }' with an invalid protocol: '${url.protocol}'`,\n                                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  });\n}\n\nfunction isHttpTransport(transportProtocol) {\n  return (transportProtocol && (\n          transportProtocol === TransportProtocol.HTTP_BINARY_STREAMING ||\n          transportProtocol === TransportProtocol.HTTP_BINARY ||\n          transportProtocol === TransportProtocol.HTTP_BASE64));\n}\n\nfunction validatePropsSupportedByTransport(transportProtocol, nonHttpPropsSet) {\n  if (nonHttpPropsSet.length > 0 && isHttpTransport(transportProtocol)) {\n    const propNames = nonHttpPropsSet.length <= 5 ? nonHttpPropsSet : nonHttpPropsSet.slice(0, 5);\n    throw new OperationError(`SessionProperties validation: properties that are not supported by transport protocol ${\n                    transportProtocol} have been set: ${propNames}`, ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n}\n\nfunction matchUrl(instance, name, regex, all) {\n  const val = instance[name];\n  if (val instanceof Array) {\n    // host list is used, iterate to find at least one entry\n    const arrayLength = val.length;\n    for (let i = 0; i < arrayLength; i++) {\n      const currententry = val[i];\n      if (!all) {\n        if (Check.string(currententry) && currententry.match(regex)) {\n          return true;\n        }\n      } else if (all) {\n        if (!Check.string(currententry) || !currententry.match(regex)) {\n          return false;\n        }\n      }\n    }\n    if (!all) {\n      return false;\n    } else if (all) {\n      return true;\n    }\n  }\n  return (Check.string(val) && val.match(regex));\n}\n\nfunction useSsl(instance, name, all) {\n  return matchUrl(instance, name, /^(https|wss|tcps):/i, all);\n}\n\nconst SessionPropertiesValidator = {\n  validate(props) {\n    // Validation rules: same as JCSMP\n    const v = validateInstance.bind(null, 'SessionProperties', props);\n    v('url', [valNotEmpty], [valStringOrArray], [valUrlList]);\n    v('userName', [valString], [valLength, 189]);\n    v('password', [valString], [valLength, 128]);\n    v('clientName', [valString], [valLength, 160], [valClientName]);\n    v('applicationDescription', [valString], [valLength, 254]);\n    v('vpnName', [valString], [valLength, 32]);\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('connectRetriesPerHost', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('connectRetries', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('reconnectRetries', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('reconnectRetryWaitInMsecs', [valNumber], [valRange, 0, 60000]);\n    v('readTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('sendBufferMaxSize', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('maxWebPayload', [valNumber], [valRange, 100, Number.MAX_VALUE]);\n    if (BUILD_ENV.TARGET_BROWSER) {\n      v('bufferedAmountQueryIntervalInMsecs', [valNumber], [valRange, 4, Number.MAX_VALUE]);\n    }\n    v('generateSendTimestamps', [valBoolean]);\n    v('generateReceiveTimestamps', [valBoolean]);\n    v('includeSenderId', [valBoolean]);\n    v('keepAliveIntervalInMsecs', [valNumber], [valRange, 0, Number.MAX_VALUE]);\n    v('keepAliveIntervalsLimit', [valNumber], [valRange, 3, Number.MAX_VALUE]);\n    v('generateSequenceNumber', [valBoolean]);\n    v('subscriberLocalPriority', [valNumber], [valRange, 1, 4]);\n    v('subscriberNetworkPriority', [valNumber], [valRange, 1, 4]);\n    v('ignoreDuplicateSubscriptionError', [valBoolean]);\n    v('ignoreSubscriptionNotFoundError', [valBoolean]);\n    v('reapplySubscriptions', [valBoolean]);\n    v('noLocal', [valBoolean]);\n    v('transportDowngradeTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('idToken', [valString]);\n    v('accessToken', [valString]);\n\n    if (props.transportProtocol && props.webTransportProtocolList) {\n      throw new OperationError(\"SessionProperties validation: Property 'transportProtocol' and \" +\n                               \"'webTransportProtocolList' cannot be set at the same time\",\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (props.webTransportProtocolList !== null && props.webTransportProtocolList !== undefined) {\n      if (!Array.isArray(props.webTransportProtocolList)) {\n        throw new OperationError(\"Property 'webTransportProtocolList' must be an array if set\",\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (props.webTransportProtocolList.length === 0) {\n        throw new OperationError(\"Property 'webTransportProtocolList' must be non-empty if set\",\n                                 ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n    }\n\n    v('authenticationScheme', [valIsMember, AuthenticationScheme, 'AuthenticationScheme', false]);\n    const useClientCert = props.authenticationScheme === AuthenticationScheme.CLIENT_CERTIFICATE;\n    if (!useSsl(props, 'url', true) && useClientCert) {\n      throw new OperationError(\"SessionProperties validation: Property 'authenticationScheme' cannot be set to client certificate \" +\n                               'for unsecured sessions', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (Check.equal(props.authenticationScheme, AuthenticationScheme.OAUTH2)) {\n      if (!useSsl(props, 'url', true)) {\n        throw new OperationError(`SessionProperties validation: Property 'authenticationScheme' ${''\n                                 }cannot be set to '${AuthenticationScheme.OAUTH2}' unless the ${''\n                                 }session property 'url' is written to use a secure ${''\n                                 }communication protocol like tcps or https.`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      if (Check.empty(props.idToken) && Check.empty(props.accessToken)) {\n        throw new OperationError(`SessionProperties validation: Property 'authenticationScheme' ${''\n                                 }can be set to ${''\n                                 }'${AuthenticationScheme.OAUTH2}' only if there ${''\n                                 }is an accompanying token set as a session property. The ${''\n                                 }token types that are ${''\n                                 }supported for OAuth authentication are OAuth2.0 Access ${''\n                                 }Tokens and OpenID Connect ID Tokens. To set an access token ${''\n                                 }you can use the accessToken session property. To set an id ${''\n                                 }you can use the idToken session property.`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    } else if (!Check.empty(props.idToken) || !Check.empty(props.accessToken)) {\n      LOG_INFO(`SessionProperties validation: Property ${''\n               }'authenticationScheme' must be set to ${''\n               }'${AuthenticationScheme.OAUTH2}'in order to use either ${''\n               } an OAUTH2 access token or an OpenID Connect ID token.`);\n    }\n\n\n    if (BUILD_ENV.TARGET_NODE) {\n      // should not happen since transportProtocol and webTransportProtocolList are not public\n      if (Check.something(props.transportProtocol) &&\n          props.transportProtocol !== TransportProtocol.WS_BINARY) {\n        throw new OperationError(\"SessionProperties validation: properties 'transportProtocol' \" +\n                                 'can only be WS_BINARY',\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (Check.something(props.webTransportProtocolList)) {\n        if (!Check.array(props.webTransportProtocolList)) {\n          throw new OperationError('SessionProperties validation: Property ' +\n                                   \"'webTransportProtocolList' should be type Array\",\n                                   ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n        if (props.webTransportProtocolList.length !== 1 ||\n            props.webTransportProtocolList[0] !== TransportProtocol.WS_BINARY) {\n          throw new OperationError('SessionProperties validation: properties ' +\n                                   \"'webTransportProtocolList' can only contain element WS_BINARY\",\n                                   ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n      }\n\n      v('sslExcludedProtocols', [valArrayOfString], [valSslExcludedProtocols]);\n      v('sslCipherSuites', [valString], [valSslCipherSuites]);\n      v('sslValidateCertificate', [valBoolean]);\n\n      if (props.sslValidateCertificate || useClientCert) {\n        v('sslTrustStores', [valArrayOfString]);\n        v('sslTrustedCommonNameList', [valArrayOfString], [valSslTrustedCommonNameList]);\n      }\n\n      if (useClientCert) {\n        v('sslPfx', [valString]);\n        v('sslPfxPassword', [valString]);\n        v('sslPrivateKey', [valString]);\n        v('sslPrivateKeyPassword', [valString]);\n        v('sslCertificate', [valString]);\n        // either sslPfx or sslPrivateKey and sslCertificate must be specified,\n        // but not at the same time\n        const sslPfxSet = Check.something(props.sslPfx) && props.sslPfx.length;\n        const sslPrivateKeySet = (\n          Check.something(props.sslPrivateKey) &&\n          props.sslPrivateKey.length\n        );\n        const sslCertSet = (\n          Check.something(props.sslCertificate) &&\n          props.sslCertificate.length\n        );\n        if (!sslPfxSet && !sslPrivateKeySet && !sslCertSet) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Either property 'sslPfx', or 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'must be set when authenticationScheme is client certificate',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n        if (sslPfxSet && (sslPrivateKeySet || sslCertSet)) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Property 'sslPfx' can only be set when 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'are not set',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n        if ((sslPrivateKeySet && !sslCertSet) || (!sslPrivateKeySet && sslCertSet)) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Property 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'must be set at the same time',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n\n      v('compressionLevel', [valNumber], [valRange, 0, 9]);\n      // Compression and web protocols do not mix.\n      if (props.compressionLevel > 0) {\n        if (props.url instanceof Array) {\n          const allTcp = props.url.every(url => Check.string(url) && url.match(/tcps?:/i));\n          if (!allTcp) {\n            throw new OperationError('SessionProperties validation: Property ' +\n                                     \"'compressionLevel' is non-zero, \" +\n                                     'but not all URLs in the host list ' +\n                                     'support compression. (tcp:// or tcps:// expected)',\n                                     ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n          }\n        } else if (Check.string(props.url)) {\n          if (!props.url.match(/tcps?:/i)) {\n            throw new OperationError('SessionProperties validation: Property ' +\n                                     \"'compressionLevel' is non-zero, \" +\n                                     'but the url does not ' +\n                                     'support compression. (tcp:// or tcps:// expected)',\n                                     ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n          }\n        } else {\n          throw new OperationError('SessionProperties validation: Property' +\n                                   \"'url' must be string or array of strings.\" +\n                                   ` instead got ${props.url} ` +\n                                   `of type ${typeof props.url}`,\n                                    ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n\n      v('sslConnectionDowngradeTo', [valIsMember, SslDowngrade, 'SslDowngrade', false]);\n    }\n    v('transportProtocol', [valIsMember, TransportProtocol, 'TransportProtocol', true]);\n    v('webTransportProtocolList',\n      [valArrayIsMember, TransportProtocol, 'TransportProtocol',\n        true, false, false]);\n\n    validatePropsSupportedByTransport(props.transportProtocol,\n                                      props.nonHTTPTransportPropsSet);\n\n    if (props.publisherProperties) {\n      PublisherLib.MessagePublisherPropertiesValidator.validate(props.publisherProperties);\n    }\n\n    // Non-errors\n\n    const recommendedMin = props.defaultConnectTimeoutInMsecs;\n    const connectTimeout = props.connectTimeoutInMsecs;\n    const transportCount = props.webTransportProtocolList\n      ? props.webTransportProtocolList.length\n      : 1;\n    if (transportCount > 1 && connectTimeout < recommendedMin) {\n      LOG_WARN(\n        `Connect timeout of ${connectTimeout} msecs is less than default and recommended ` +\n        `minimum of ${recommendedMin} msecs for current transport selection. Transport ` +\n        'downgrades may not complete.');\n    }\n  },\n};\n\nmodule.exports.SessionPropertiesValidator = SessionPropertiesValidator;\n\n","const NodeSslConstants = require('constants');\nconst PublisherLib = require('solclient-message-publisher');\nconst { APIProperties } = require('solclient-util');\nconst { AuthenticationScheme } = require('./authentication-schemes');\nconst { Check } = require('solclient-validate');\nconst { LOG_WARN } = require('solclient-log');\nconst { SslDowngrade } = require('./ssl-downgrades');\n\nfunction makeDefaults() {\n  // Defer binding. Publisher constructor may rely on profile.\n  const { MessagePublisherProperties } = PublisherLib;\n  return {\n    _vpnNameInUse:        '',\n    _virtualRouterName:   '',\n    _p2pInboxInUse:       '',\n    _p2pInboxBase:        '',\n    _userIdentification:  '',\n    _tpProtocolInUse:     null,\n    _tpContentType:       'text/plain',\n    _publisherProperties: new MessagePublisherProperties(),\n  };\n}\n\nconst DEFAULT_CIPHER_SUITES = BUILD_ENV.TARGET_NODE ? [\n  'ECDHE-RSA-AES256-GCM-SHA384',\n  'ECDHE-RSA-AES256-SHA384',\n  'ECDHE-RSA-AES256-SHA',\n  'AES256-GCM-SHA384',\n  'AES256-SHA256',\n  'AES256-SHA',\n  'ECDHE-RSA-DES-CBC3-SHA',\n  'DES-CBC3-SHA',\n  'ECDHE-RSA-AES128-GCM-SHA256',\n  'ECDHE-RSA-AES128-SHA256',\n  'ECDHE-RSA-AES128-SHA',\n  'AES128-GCM-SHA256',\n  'AES128-SHA256',\n  'AES128-SHA',\n].join(',') : null;\n\nconst SUPPORTED_CIPHER_SUITES = BUILD_ENV.TARGET_NODE ? [\n  'AES128-GCM-SHA256',\n  'AES128-SHA',\n  'AES128-SHA256',\n  'AES256-GCM-SHA384',\n  'AES256-SHA',\n  'AES256-SHA256',\n  'DES-CBC3-SHA',\n  'ECDHE-RSA-AES128-GCM-SHA256',\n  'ECDHE-RSA-AES128-SHA',\n  'ECDHE-RSA-AES128-SHA256',\n  'ECDHE-RSA-AES256-GCM-SHA384',\n  'ECDHE-RSA-AES256-SHA',\n  'ECDHE-RSA-AES256-SHA384',\n  'ECDHE-RSA-DES-CBC3-SHA',\n] : null;\n\nconst SUPPORTED_SSL_PROTOCOLS = BUILD_ENV.TARGET_NODE\n? [\n  'tlsv1',\n  'tlsv1.1',\n  'tlsv1.2',\n]\n: null;\n\n/**\n * @lends SessionProperties\n *\n */\nclass SessionPropertiesBrowser extends APIProperties {\n  /**\n   * This property is deprecated.  It is recommended to use\n   * {@link solace.SessionProperties#webTransportProtocolList} instead, which explicitly lists all\n   * web transport protocols that may be used when establishing a session.\n   *\n   * This property specifies the web transport protocol that will initially be selected by the\n   * session for its connection attempt. If this protocol fails, the session will attempt other\n   * protocols in accordance with its transport protocol connect policy.\n   *\n   * If {@link solace.FactoryProfile#cometEnabled} is `true`, the selection of\n   * any {@link solace.TransportProtocol} will result in the inclusion of\n   * fallback protocols in {@link solace.SessionProperties#webTransportProtocolList}.\n   * This makes the session incompatible with Guaranteed Messaging.\n   *\n   * To create a Guaranteed Messaging compatible session with\n   * {@link solace.FactoryProfile#cometEnabled} set to `true`, ensure the session's\n   * {@link solace.SessionProperties#webTransportProtocoList} is set to only\n   * {@link solace.TransportProtocol.WS_BINARY}.\n   *\n   *  * Mutually exclusive to property webTransportProtocolList\n   *\n   * @name solace.SessionProperties#transportProtocol\n   * @type {solace.TransportProtocol}\n   * @default null\n   * @deprecated\n   * @target browser\n   */\n  get transportProtocol() {\n    return Check.nothing(this._tpProtocol) ? null : this._tpProtocol;\n  }\n  set transportProtocol(newValue) {\n    this._tpProtocol = newValue;\n  }\n\n\n  /**\n   * @name solace.SessionProperties#transportDowngradeTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout, in milliseconds, that must elapse before the session will abandon a\n   * connection attempt with the current transport protocol if no response is received, and begin\n   * a new connection attempt with a downgraded transport protocol. If no remaining downgrades\n   * exist, the session will continue the current connection attempt until the connection timeout\n   * expires. Note that the WS_BINARY transport will also attempt a downgrade if the underlying\n   * WebSocket fails to connect before this period elapses.\n   *  * The valid range is > 0.\n   * @default 3000\n   * @target browser\n   */\n  get transportDowngradeTimeoutInMsecs() {\n    return Check.nothing(this._tpDowngradeTimeout) ? 3000 : this._tpDowngradeTimeout;\n  }\n  set transportDowngradeTimeoutInMsecs(newValue) {\n    this._tpDowngradeTimeout = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#webTransportProtocolList\n   * @type {Array.<solace.TransportProtocol>}\n   * @description The user provided web transport protocol list indicating the initial protocol\n   * to be used by the session for its connection attempt, and the protocols to try\n   * subsequently if the attempt fails.\n   *  * Mutually exclusive to property transportProtocol\n   * @default null\n   * @target browser\n   */\n  get webTransportProtocolList() {\n    return Check.nothing(this._transportProtocolList)\n             ? null\n             : this._transportProtocolList;\n  }\n  set webTransportProtocolList(newValue) {\n    this._transportProtocolList = newValue;\n  }\n\n  /**\n   * @private\n   * @name SessionProperties#bufferedAmountQueryIntervalInMsecs\n   * @type {Number}\n   * @description When WebSocket transport protocol is used, SolClient uses this property\n   * and {@link solace.SessionProperties.maxWebPayload} to throttle the publishing rate in order to\n   * avoid network saturation.\n   *  * The valid range is >=4.\n   * @default 100\n   */\n  get bufferedAmountQueryIntervalInMsecs() {\n    return Check.nothing(this._bufferedAmountQueryInterval)\n    ? 100\n    : this._bufferedAmountQueryInterval;\n  }\n  set bufferedAmountQueryIntervalInMsecs(newValue) {\n    this._bufferedAmountQueryInterval = newValue;\n  }\n\n\n  /**\n   *\n   * @name solace.SessionProperties#transportProtocolInUse\n   * @type {String}\n   * @description This property is deprecated.\n   * Use {@link solace.SessionProperties#webTransportProtocolInUse} instead.\n   * @readonly\n   * @target browser\n   * @deprecated\n   */\n  get transportProtocolInUse() {\n    return this._tpProtocolInUse || null;\n  }\n  _setTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#webTransportProtocolInUse\n   * @type {String}\n   * @description A read-only property about the web transport protocol that is currently being\n   * used by the session for its current connection or connection attempt. To determine which\n   * web transport protocol was successfully used by the API, interrogate this property after the\n   * session event UP_NOTICE is dispatched.\n   * @readonly\n   * @target browser\n   */\n  get webTransportProtocolInUse() {\n    return this._tpProtocolInUse || null;\n  }\n  _setWebTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#transportContentType\n   * @type {String}\n   * @description Transport content-type override for HTTP transports\n   * @default 'text/plain'\n   * @internal\n   */\n  get transportContentType() {\n    return this._tpContentType || 'text/plain';\n  }\n  set transportContentType(newValue) {\n    this._tpContentType = newValue;\n  }\n\n  _lendsInspect() {\n    return {\n      'bufferedAmountQueryIntervalInMsecs': this.bufferedAmountQueryIntervalInMsecs,\n      'transportContentType':               this.transportContentType,\n      'transportDowngradeTimeoutInMsecs':   this.transportDowngradeTimeoutInMsecs,\n      'transportProtocol':                  this.transportProtocol,\n      'transportProtocolInUse':             this.transportProtocolInUse,\n      'webTransportProtocolList':           this.webTransportProtocolList,\n    };\n  }\n}\n\nclass SessionPropertiesNode extends APIProperties {\n  /**\n   * @internal\n   */\n  get transportProtocol() {\n    return this._tpProtocol;\n  }\n  set transportProtocol(value) {\n    this._tpProtocol = value;\n  }\n\n  /**\n   * @internal\n   */\n  get webTransportProtocolList() {\n    return this._transportProtocolList;\n  }\n  set webTransportProtocolList(value) {\n    this._transportProtocolList = value;\n  }\n\n  /**\n   * @internal\n   */\n  get transportDowngradeTimeoutInMsecs() {\n    return this._tpDowngradeTimeout || 86400000; // All day\n  }\n  set transportDowngradeTimeoutInMsecs(value) {\n    this._tpDowngradeTimeout = value;\n  }\n\n  /**\n   * @internal\n   * @deprecated\n   */\n  get transportProtocolInUse() {\n    return this._tpProtocolInUse;\n  }\n  _setTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   * @internal\n   */\n  get webTransportProtocolInUse() {\n    return this._tpProtocolInUse;\n  }\n  _setWebTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   * @internal\n   */\n  get transportContentType() {\n    return this._tpContentType;\n  }\n  set transportContentType(value) {\n    this._tpContentType = value;\n  }\n\n  // TLS connection options\n\n  /**\n   * @name solace.SessionProperties#sslExcludedProtocols\n   * @type {Array.<String>}\n   * @description An array of TLS protocols to be excluded when negotiating which protocol\n   * to use.\n   *  * Allowed values are: TLSv1, TLSv1.1, TLSv1.2\n   *  * Note: when a protocol version is excluded without excluding all of its\n   *    previous protocol versions, the effect is to also exclude all subsequent\n   *    protocol versions.\n   * @default null\n   * @target node\n   */\n  get sslExcludedProtocols() {\n    return Check.nothing(this._sslExcludedProtocols)\n      ? null\n      : this._sslExcludedProtocols;\n  }\n  set sslExcludedProtocols(newValue) {\n    this._sslExcludedProtocols = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslCipherSuites\n   * @type {String}\n   * @description A comma separated list of cipher suites in order of preference used for TLS\n   * connections.\n   *  * Allowed values:\n   *     * AES128-GCM-SHA256\n   *     * AES128-SHA\n   *     * AES128-SHA256\n   *     * AES256-GCM-SHA384\n   *     * AES256-SHA\n   *     * AES256-SHA256\n   *     * DES-CBC3-SHA\n   *     * ECDHE-RSA-AES128-GCM-SHA256\n   *     * ECDHE-RSA-AES128-SHA\n   *     * ECDHE-RSA-AES128-SHA256\n   *     * ECDHE-RSA-AES256-GCM-SHA384\n   *     * ECDHE-RSA-AES256-SHA\n   *     * ECDHE-RSA-AES256-SHA384\n   *     * ECDHE-RSA-DES-CBC3-SHA\n   *     * RC4-SHA\n   *     * RC4-MD5\n   * @default {@link solace.SessionProperties.DEFAULT_CIPHER_SUITES}\n   * @target node\n   */\n  get sslCipherSuites() {\n    return Check.nothing(this._sslCipherSuites)\n      ? DEFAULT_CIPHER_SUITES\n      : this._sslCipherSuites;\n  }\n  set sslCipherSuites(newValue) {\n    this._sslCipherSuites = newValue;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#sslValidateCertificate\n   * @type {Boolean}\n   * @description Whether the server certificate shall be verified against the list of\n   * certificates in the trust stores. If set to false, all certificate validation is disabled,\n   * including date, hostname and common name validation.\n   * @default true\n   * @target node\n   */\n  get sslValidateCertificate() {\n    // if the value is undefined, then use environment variable\n    if (this._sslValidateCert === undefined) return (process.env.NODE_TLS_REJECT_UNAUTHORIZED !== '0');\n    if (this._sslValidateCert === null) return true;\n    return this._sslValidateCert;\n  }\n  set sslValidateCertificate(newValue) {\n    this._sslValidateCert = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslTrustStores\n   * @type {Array.<String>}\n   * @description An array of file names of trusted certificates in PEM format.\n   * If not set, and {@link solace.SessionProperties#sslValidateCertificate} is set to true,\n   * the server certificate will be validated against well known \"root\" CAs.\n   *    * Mutually exclusive to sslPfx property when\n   *      {@link solace.SessionProperties#sslValidateCertificate} is set\n   * @default null\n   * @target node\n   */\n  get sslTrustStores() {\n    return Check.nothing(this._sslTrustStores)\n      ? null\n      : this._sslTrustStores;\n  }\n  set sslTrustStores(newValue) {\n    this._sslTrustStores = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslTrustedCommonNameList\n   * @type {Array.<String>}\n   * @description An array of acceptable common names for matching with the server certificate.\n   * If set to a non-empty array, the API will override the default hostname validation logic\n   * provided by Node.js with its own implemenation; if set to empty array, no hostname\n   * validation will be performed.\n   *    * Only relevant when {@link solace.SessionProperties#sslValidateCertificate} is set\n   *      to true\n   *    * Note that leading and trailing whitespaces are considered to be part of the common\n   *      names and are not ignored\n   * @default null\n   * @target node\n   */\n  get sslTrustedCommonNameList() {\n    return Check.nothing(this._sslTrustedCNList)\n      ? null\n      : this._sslTrustedCNList;\n  }\n  set sslTrustedCommonNameList(newValue) {\n    this._sslTrustedCNList = newValue;\n  }\n\n  // Client certificates related\n\n  /**\n   * @name solace.SessionProperties#sslPfx\n   * @type {String}\n   * @description The file name of a file containing private key, certificate and optional\n   * CA certificates of the client in PFX or PKCS12 format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPrivateKey, sslCertificate and sslTrustStores properties\n   * @default \"\"\n   * @target node\n   */\n  get sslPfx() {\n    return Check.nothing(this._sslPfx)\n      ? ''\n      : this._sslPfx;\n  }\n  set sslPfx(newValue) {\n    this._sslPfx = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPfxPassword\n   * @type {String}\n   * @description A string containing password for the client pfx file.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   * @default empty string\n   * @target node\n   */\n  get sslPfxPassword() {\n    return Check.nothing(this._sslPfxPasswd) ? '' : this._sslPfxPasswd;\n  }\n  set sslPfxPassword(newValue) {\n    this._sslPfxPasswd = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPrivateKey\n   * @type {String}\n   * @description The file name of a file containing private key of the client in PEM format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPfx property\n   * @default empty string\n   * @target node\n   */\n  get sslPrivateKey() {\n    return Check.nothing(this._sslPrivateKey) ? '' : this._sslPrivateKey;\n  }\n  set sslPrivateKey(newValue) {\n    this._sslPrivateKey = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPrivateKeyPassword\n   * @type {String}\n   * @description A string containg password for the client private key.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   * @default empty string\n   * @target node\n   */\n  get sslPrivateKeyPassword() {\n    return Check.nothing(this._sslPrivateKeyPasswd) ? '' : this._sslPrivateKeyPasswd;\n  }\n  set sslPrivateKeyPassword(newValue) {\n    this._sslPrivateKeyPasswd = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslCertificate\n   * @type {String}\n   * @description The file name of a file containing certificate key of the client in PEM\n   * format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPfx property\n   * @default empty string\n   * @target node\n   */\n  get sslCertificate() {\n    return Check.nothing(this._sslCertificate) ? '' : this._sslCertificate;\n  }\n  set sslCertificate(newValue) {\n    this._sslCertificate = newValue;\n  }\n\n  // TLS connection options\n\n  /**\n   * @name SessionProperties#sslProtocol\n   * @type {String}\n   * @description The SSL protocols to use.\n   *    * Allowed values are: SSLv3, TLSv1, TLSv1.1, TLSv1.2\n   * @target node\n   */\n  get sslProtocol() {\n    return this._sslProtocol;\n  }\n  set sslProtocol(newValue) {\n    this._sslProtocol = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#compressionLevel\n   * @type {Number}\n   * @description zlib compression level (1-9) or no compression (0)\n   *\n   * When this property is set to a valid, non-zero value (1-9):\n   *\n   * * tcp:// connections are established compressed.\n   * This usually requires connecting to a different tcp port on the router,\n   * 55003 by default.\n   *\n   * * tcps:// connections are established uncompressed,\n   * but then negotiate compression on login.\n   * Compression before encryption allows inference of similarities between messages\n   * from observing packet sizes on the network.\n   * This could lead to chosen Plaintext attacks.\n   * Can be combined with sslDowngradeConnectionTo for no encryption beyond authentication.\n   *\n   * * ws(s):// and http(s):// transports do not support compression and are considered invalid.\n   *\n   * @default 0\n   * @target node\n   */\n\n  get compressionLevel() {\n    return Check.nothing(this._compressionLevel) ? 0 : this._compressionLevel;\n  }\n  set compressionLevel(newValue) {\n    this._compressionLevel = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslConnectionDowngradeTo\n   * @type {solace.SslDowngrade}\n   * @description Disable encryption after authentication\n   *\n   * When set to {@link solace.SslDowngrade.PLAINTEXT},\n   * all message traffic beyond the initial login is unencrypted.\n   * A TLS connection is negotiated on the regular TLS port (55443 by default),\n   * TLS authentication schemes can be used, same as without this option.\n   * After a successful login however, a TLS shutdown is performed,\n   * and the same socket is then used for unencrypted message traffic.\n   *\n   * Please note this way plain text traffic passes on a port\n   * usually associated with encryption (55443 by default)\n   *\n   * This downgrade is only supported for tcps:// connections,\n   * all other URL schemes ignore this option.\n   *\n   * Can be combined with compressionLevel for\n   * non-encrypted, compressed message transfer after login.\n   *\n   * @default {@link solace.SslDowngrade.NONE}\n   * @target node\n   */\n  get sslConnectionDowngradeTo() {\n    return Check.nothing(this._sslConnectionDowngradeTo) ?\n      SslDowngrade.NONE : this._sslConnectionDowngradeTo;\n  }\n\n  set sslConnectionDowngradeTo(newValue) {\n    this._sslConnectionDowngradeTo = newValue;\n  }\n\n  _lendsInspect() {\n    return {\n      'sslExcludedProtocols':     this.sslExcludedProtocols,\n      'sslCipherSuites':          this.sslCipherSuites,\n      'sslValidateCertificate':   this.sslValidateCertificate,\n      'sslTrustStores':           this.sslTrustStores,\n      'sslTrustedCommonNameList': this.sslTrustedCommonNameList,\n      'sslPfx':                   this.sslPfx,\n      'sslPfxPassword':           this.sslPfxPassword ? '*****' : this.sslPfxPassword,\n      'sslPrivateKey':            this.sslPrivateKey,\n      'sslPrivateKeyPassword':    this.sslPrivateKeyPassword ? '*****' : this.sslPrivateKeyPassword,\n      'sslCertificate':           this.sslCertificate,\n      'sslProtocol':              this.sslProtocol,\n      'compressionLevel':         this.compressionLevel,\n      'sslConnectionDowngradeTo': this.sslConnectionDowngradeTo,\n    };\n  }\n}\n\nconst SessionPropertiesBase = BUILD_ENV.TARGET_NODE\n  ? SessionPropertiesNode\n  : SessionPropertiesBrowser;\n\n/**\n * @classdesc\n * Represents a session properties object. Passed in to\n * {@link solace.SolclientFactory.createSession} when creating a {@link solace.Session} instance.\n * @memberof solace\n * @extends APIProperties\n */\nclass SessionProperties extends SessionPropertiesBase {\n\n  /**\n   * @constructor\n   * @param {Object} options Properties to apply to the newly constructed object.\n   */\n  constructor(options) {\n    super(makeDefaults(), options);\n  }\n\n  /**\n   * The authentication scheme used when establishing the session.\n   * @name solace.SessionProperties#authenticationScheme\n   * @type {solace.AuthenticationScheme}\n   * @default {@link solace.AuthenticationScheme.BASIC}\n   */\n  get authenticationScheme() {\n    return Check.nothing(this._authScheme)\n        ? AuthenticationScheme.BASIC\n        : this._authScheme;\n  }\n  set authenticationScheme(newValue) {\n    this._authScheme = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#accessToken\n   * @type {String}\n   * @description The access token required for OAUTH2 authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get accessToken() {\n    return Check.empty(this._accessToken)\n        ? ''\n        : this._accessToken;\n  }\n\n  set accessToken(newValue) {\n    this._accessToken = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#idToken\n   * @type {String}\n   * @description The ID token required for OIDC authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get idToken() {\n    return Check.empty(this._idToken)\n        ? ''\n        : this._idToken;\n  }\n\n  set idToken(newValue) {\n    this._idToken = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#issuerIdentifier\n   * @type {String}\n   * @description The issuer identifier is optional for OAUTH2 authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get issuerIdentifier() {\n    return Check.empty(this._issuerIdentifier)\n        ? ''\n        : this._issuerIdentifier;\n  }\n\n  set issuerIdentifier(newValue) {\n    if (!Check.type(newValue, 'string')) {\n      LOG_WARN(`Failed to set issuer identifier because the pased value ${''\n                }was not of type String. The passed issuer identifier ${''\n                }must be of type String. Setting issuer identifier to ${''\n                }default value empty string.`);\n      this._issuerIdentifier = '';\n    } else if (Check.empty(newValue)) {\n      LOG_WARN(`Failed to set the issuer identifier because the passed string was empty ${''\n                }or null. The passed issuer identifier must not be empty or null. Setting ${''\n                }issuer identifier to default value empty string.`);\n    } else {\n      this._issuerIdentifier = newValue;\n    }\n  }\n\n  /**\n   * The URL or URLs of the messaging service to connect to.  The URL is typically of the form\n   * `<protocol>://<host[:port]>`, where:\n   *  * `protocol` is one of `ws`, `wss`, `http`, `https`, `tcp` or `tcps`.\n   *  (Note to developers who also use the browser variant of this SDK:\n   *  Browsers do not support the `tcp` and `tcps` protocols.)\n   *  * `host` is a hostname or IP address of the router to connect to.\n   *  * `port` is the port on which the messaging service is listening. The default is the\n   *    well-known port for the service associated with the given protocol, if any.\n   *\n   * Additionally, note:\n   *  * When an Array is provided, each element is expected to be a string of the above format.\n   *    The API will attempt to connect to these URLs in the specified order.\n   *  * Numerical IPv6 addresses must be enclosed in square brackets, e.g. tcp://[2001:db8::1]\n   * @name solace.SessionProperties#url\n   * @type {String|Array.<String>}\n   * @default \"\"\n   * @target node\n   */\n  /**\n   * The URL or URLs of the messaging service to connect to.  The URL is typically of the form\n   * `<protocol>://<host[:port]>`, where:\n   *  * `protocol` is one of `ws`, `wss`, `http`, `https'.\n   *  (Note to developers who also ise the NodeJS variant of this SDK:\n   *  NodeJS also supports the 'tcp' and 'tcps' protocols, but browsers do not.)\n   *  * `host` is a hostname or IP address of the router to connect to.\n   *  * `port` is the port on which the messaging service is listening. The default is the\n   *    well-known port for the service associated with the given protocol, if any.\n   *\n   * Additionally, note:\n   *  * When an Array is provided, each element is expected to be a string of the above format.\n   *    The API will attempt to connect to these URLs in the specified order.\n   *  * Cross-domain restrictions should be taken into consideration when deploying web\n   *    applications with messaging capabilities. See the API User Guide for more\n   *    information.\n   *  * Numerical IPv6 addresses must be enclosed in square brackets, e.g. ws://[2001:db8::1]\n   * @name solace.SessionProperties#url\n   * @type {String|Array.<String>}\n   * @default \"\"\n   * @target browser\n   */\n  get url() {\n    return Check.nothing(this._url) ? '' : this._url;\n  }\n\n  set url(newValue) {\n    this._url = newValue;\n  }\n\n  //  ======================== Credentials  ========================\n\n  /**\n   * @name solace.SessionProperties#password\n   * @type {String}\n   * @description The password required for authentication.\n   * @default \"\"\n   */\n  get password() {\n    return Check.nothing(this._password) ? '' : this._password;\n  }\n\n  set password(newValue) {\n    this._password = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#userName\n   * @type {String}\n   * @description  The client username required for authentication.\n   * @default \"\"\n   */\n  get userName() {\n    return Check.nothing(this._userName) ? '' : this._userName;\n  }\n\n  set userName(newValue) {\n    this._userName = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#clientName\n   * @type {String}\n   * @default '' (automatically generated)\n   * @description The client name that is used during login as a unique identifier for the session\n   * on the Solace Message Router.\n   *  * An empty string causes a unique client name to be generated\n   *     automatically.\n   *  * If specified, it must be a valid Topic name, and a maximum of 160 bytes in length.\n   *  * This property is also used to uniquely identify the sender in\n   *    a message's senderId field if {@link solace.SessionProperties.includeSenderId}\n   *    is set.\n   * @default \"\"\n   */\n  get clientName() {\n    return Check.nothing(this._clientName) ? '' : this._clientName;\n  }\n\n  set clientName(newValue) {\n    this._clientName = newValue;\n  }\n\n  /**\n   * A string that uniquely describes the application instance.\n   *  * If left blank, the API will generate a description string\n   *    using the current user-agent string.\n   * @default \"\"\n   * @name solace.SessionProperties#applicationDescription\n   * @type {String}\n   */\n  get applicationDescription() {\n    return Check.nothing(this._appDesc) ? '' : this._appDesc;\n  }\n  set applicationDescription(newValue) {\n    this._appDesc = newValue;\n  }\n\n  /**\n   * The Message VPN name that the client is requesting for this session.\n   * @default \"\"\n   * @name solace.SessionProperties#vpnName\n   * @type {String}\n   */\n  get vpnName() {\n    return Check.nothing(this._vpnName) ? '' : this._vpnName;\n  }\n  set vpnName(newValue) {\n    this._vpnName = newValue;\n  }\n\n  /**\n   * A read-only session property that indicates which Message\n   * VPN the session is connected to. When not connected, or when not in client mode,\n   * an empty string is returned.\n   * @default \"\"\n   * @name solace.SessionProperties#vpnNameInUse\n   * @type {String}\n   * @readonly\n   */\n  get vpnNameInUse() {\n    return Check.nothing(this._vpnNameInUse) ? '' : this._vpnNameInUse;\n  }\n  /**\n   * @private\n   * @param {String} value The vpn name currently being used.\n   */\n  _setVpnNameInUse(value) {\n    this._vpnNameInUse = value;\n  }\n\n  /**\n   * @name solace.SessionProperties#virtualRouterName\n   * @type {String}\n   * @description A read-only property that indicates the connected Solace Message Router's\n   * virtual router name.\n   * @default \"\"\n   * @readonly\n   */\n  get virtualRouterName() {\n    return Check.nothing(this._virtualRouterName) ? '' : this._virtualRouterName;\n  }\n  /**\n   * @private\n   * @param {String} value The current virtual router name.\n   */\n  _setVirtualRouterName(value) {\n    this._virtualRouterName = value;\n  }\n\n  //  ======================== Connection Strategies ========================\n  /**\n   * @name solace.SessionProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a connect operation to a given host.\n   *  If no value is provided, the default is 8000.\n   *   * The valid range is > 0.\n   * @default 8000\n   * @target node\n   */\n  /**\n   * @name solace.SessionProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a connect operation to a given host.\n   *  If no value is provided, the default is calculated as shown below.\n   *   * The valid range is > 0.\n   * @default max(8000, 1000 + webTransportProtocolList.length * transportDowngradeTimeoutInMsecs)\n   * @target browser\n   */\n  get connectTimeoutInMsecs() {\n    if (Check.nothing(this._connectTimeout)) {\n      return this.defaultConnectTimeoutInMsecs;\n    }\n    return this._connectTimeout;\n  }\n  set connectTimeoutInMsecs(newValue) {\n    this._connectTimeout = newValue;\n  }\n\n  /**\n   * @internal\n   */\n  get defaultConnectTimeoutInMsecs() {\n    const minTimeout = 8000;\n    const { webTransportProtocolList, transportDowngradeTimeoutInMsecs } = this;\n    const transportCount = webTransportProtocolList ? webTransportProtocolList.length : 1;\n    const margin = transportCount > 1 ? 1000 : 0;\n    const connectDowngradeDefault = transportCount * transportDowngradeTimeoutInMsecs + margin;\n    return Math.max(minTimeout, connectDowngradeDefault);\n  }\n\n  /**\n   * @name solace.SessionProperties#connectRetries\n   * @type {Number}\n   * @description The number of times to retry connecting during initial connection setup.\n   *\n   * When using a host list, each traversal of the list is considered a try; therefore, if\n   * `connectRetries === 2`, the host list will be traversed up to three times: once\n   * for the initial try, and twice more for the retries. Each retry begins with the first host\n   * listed. After each unsuccessful attempt to connect to a host, the API waits for the amount\n   * of time set for {@link solace.SessionProperties#reconnectRetryWaitInMsecs} before attempting\n   * another connection. The next connection attempt may be to the same host,\n   * see {@link solace.SessionProperties#connectRetriesPerHost}.\n   *\n   * If an established connection fails, the reconnection is attempted with\n   * {@link solace.SessionProperties#reconnectRetries} retries instead.\n   *\n   *  * The valid range is connectRetries >= -1.\n   *  * -1 means try to connect forever.\n   *  * 0 means no automatic connection retries; the API will try once and then give up.\n   *  * connectRetries >= 1 means reattempt connection n times.\n   * @default 20\n   */\n  get connectRetries() {\n    return Check.nothing(this._connectRetries) ? 20 : this._connectRetries;\n  }\n  set connectRetries(newValue) {\n    this._connectRetries = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#connectRetriesPerHost\n   * @type {Number}\n   * @description When using a host list, this property defines how many times to\n   * try to connect to a single host before moving to the next host in the list.\n   *\n   *  * The valid range is connectRetriesPerHost >= -1.\n   *  * -1 means attempt an infinite number of connection retries. The API will only\n   *    attempt to connect to the first host in the list.\n   *  * 0 means make a single connection attempt per host, with no retries.\n   * @default 0\n   */\n  get connectRetriesPerHost() {\n    return Check.nothing(this._connectRetriesPerHost) ? 0 : this._connectRetriesPerHost;\n  }\n  set connectRetriesPerHost(newValue) {\n    this._connectRetriesPerHost = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#reconnectRetryWaitInMsecs\n   * @type {Number}\n   * @description How much time to wait (in ms) between each attempt to connect to\n   * a host.\n   * If a connect attempt is not successful, the API waits for the amount of time\n   * specified, and then makes another attempt to connect.\n   * {@link solace.SessionProperties#connectRetriesPerHost} sets how many connection\n   * attempts will be made before moving on to the next host in the list.\n   * The valid range is >= 0 and <= 60000.\n   * @default 3000\n   */\n  get reconnectRetryWaitInMsecs() {\n    return Check.nothing(this._reconnectRetryWaitInMsecs) ? 3000 : this._reconnectRetryWaitInMsecs;\n  }\n  set reconnectRetryWaitInMsecs(newValue) {\n    this._reconnectRetryWaitInMsecs = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#reconnectRetries\n   * @type {Number}\n   * @description The number of times to retry connecting after a connected session goes down.\n   *\n   * When using a host list, each traversal of the list is considered a try; therefore, if\n   * `reconnectRetries === 2`, the host list will be traversed up to three times: once\n   * for the initial try, and twice more for the retries. Each retry begins with the first host\n   * listed. After each unsuccessful attempt to connect to a host, the API waits for the amount\n   * of time set for {@link solace.SessionProperties#reconnectRetryWaitInMsecs} before attempting\n   * another connection. The next reconnect attempt may be to the same host,\n   * see {@link solace.SessionProperties#connectRetriesPerHost}.\n   *\n   *  * The valid range is reconnectRetries >= -1.\n   *  * -1 means try to reconnect forever.\n   *  * 0 means no automatic reconnect retries; the API will try once and then give up.\n   *  * reconnectRetries >= 1 means reattempt reconnect n times.\n   * @default 20\n   */\n  get reconnectRetries() {\n    return Check.nothing(this._reconnectRetries) ? 20 : this._reconnectRetries;\n  }\n  set reconnectRetries(newValue) {\n    this._reconnectRetries = newValue;\n  }\n\n  //  ======================== message properties ========================\n  /**\n   * @name solace.SessionProperties#generateSendTimestamps\n   * @type {Boolean}\n   * @description When enabled, a send timestamp is automatically included\n   * (if not already present) in the Solace-defined fields for\n   * each message sent.\n   * @default  false\n   */\n  get generateSendTimestamps() {\n    return Check.nothing(this._genSendTimestamps) ? false : this._genSendTimestamps;\n  }\n  set generateSendTimestamps(newValue) {\n    this._genSendTimestamps = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#generateReceiveTimestamps\n   * @type {Boolean}\n   * @description When enabled, a receive timestamp is recorded for\n   * each message and passed to the session's message callback receive handler.\n   * @default  false\n   */\n  get generateReceiveTimestamps() {\n    return Check.nothing(this._genReceiveTimestamps) ? false : this._genReceiveTimestamps;\n  }\n  set generateReceiveTimestamps(newValue) {\n    this._genReceiveTimestamps = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#includeSenderId\n   * @type {Boolean}\n   * @description When enabled, a sender ID is automatically included\n   * (if not already present) in the Solace-defined fields for each message\n   * sent.\n   * @default  false\n   */\n  get includeSenderId() {\n    return Check.nothing(this._includeSenderId) ? false : this._includeSenderId;\n  }\n  set includeSenderId(newValue) {\n    this._includeSenderId = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#generateSequenceNumber\n   * @type {Boolean}\n   * @description When enabled, a sequence number is automatically\n   * included (if not already present) in the Solace-defined fields\n   * for each message sent.\n   * @default  false\n   */\n  get generateSequenceNumber() {\n    return Check.nothing(this._genSequenceNumber) ? false : this._genSequenceNumber;\n  }\n  set generateSequenceNumber(newValue) {\n    this._genSequenceNumber = newValue;\n  }\n\n  //  ======================== Keep Alive ========================\n  /**\n   * @name solace.SessionProperties#keepAliveIntervalInMsecs\n   * @type {Number}\n   * @description The amount of time (in milliseconds) to wait between sending\n   * out keep-alive messages to the Solace Message Router.\n   *  * The valid range is > 0.\n   * @default  3000\n   */\n  get keepAliveIntervalInMsecs() {\n    return Check.nothing(this._kaInterval) ? 3000 : this._kaInterval;\n  }\n  set keepAliveIntervalInMsecs(newValue) {\n    this._kaInterval = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#keepAliveIntervalsLimit\n   * @type {Number}\n   * @description The maximum number of consecutive Keep-Alive messages that\n   * can be sent without receiving a response before the session is declared down\n   * and the connection is closed by the API.\n   *  * The valid range is >= 3.\n   * @default 3\n   */\n  get keepAliveIntervalsLimit() {\n    return Check.nothing(this._kaIntervalsLimit) ? 3 : this._kaIntervalsLimit;\n  }\n  set keepAliveIntervalsLimit(newValue) {\n    this._kaIntervalsLimit = newValue;\n  }\n\n  // ======================== P2P Inbox ========================\n\n  /**\n   * @name solace.SessionProperties#p2pInboxInUse\n   * @type {String}\n   * @description A read-only string that indicates the default\n   * reply-to destination used for any request messages sent from this session.\n   * See {@link solace.Session#sendRequest}.\n   * This parameter is only valid when the session is connected.\n   * @default \"\"\n   * @readonly\n   */\n  get p2pInboxInUse() {\n    return Check.nothing(this._p2pInboxInUse) ? '' : this._p2pInboxInUse;\n  }\n  /**\n   * @private\n   * @param {String} value The current P2P subscription.\n   */\n  _setP2pInboxInUse(value) {\n    this._p2pInboxInUse = value;\n  }\n\n  /**\n   * @private\n   *\n   * @name solace.SessionProperties#p2pInboxBase\n   * @description A read-only information string that stores the P2P topic subscription\n   * obtained from the Solace Message Router.\n   * This parameter is only valid when the session is connected.\n   * @default  \"\"\n   * @readonly\n   */\n  get p2pInboxBase() {\n    return Check.nothing(this._p2pInboxBase) ? '' : this._p2pInboxBase;\n  }\n  /**\n   * @private\n   * @param {String} value The current P2P inbox root subscription. The subscription on the router\n   *   additionally contains '/>', so extra topic levels can be added to this root and messages to\n   *   those topics will be attracted with the subscription.\n   */\n  _setP2pInboxBase(value) {\n    this._p2pInboxBase = value;\n  }\n\n  /**\n   * @name solace.SessionProperties#userIdentification\n   * @type {String}\n   * @description A read-only string providing information\n   * about the application, such as the name of operating system\n   * that is running the application.\n   * @default  \"\"\n   * @readonly\n   */\n  get userIdentification() {\n    return Check.nothing(this._userIdentification) ? '' : this._userIdentification;\n  }\n  /**\n   * @private\n   * @param {String} value The current userId\n   */\n  _setUserIdentification(value) {\n    this._userIdentification = value;\n  }\n\n  // ================== Subscriptions ========================\n  /**\n   *\n   * @name solace.SessionProperties#subscriberLocalPriority\n   * @type {Number}\n   * @description Subscriber priorities are used by the Solace Message Router to distribute messages\n   * that have the {@link solace.Message#setDeliverToOne} flag set to true. These messages are sent\n   * to the subscriber with the highest priority. Subscribers have two priorities; this\n   * priority is for messages published locally.\n   *  * The valid range is 1..4\n   * @default 1\n   * @deprecated Use Shared Subscriptions instead\n   */\n  get subscriberLocalPriority() {\n    return Check.nothing(this._subLocalPriority) ? 1 : this._subLocalPriority;\n  }\n  set subscriberLocalPriority(newValue) {\n    this._subLocalPriority = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#subscriberNetworkPriority\n   * @type {Number}\n   * @description Subscriber priorities are used by the Solace Message Router to distribute messages\n   * that have the {@link solace.Message#setDeliverToOne} flag set to true. These messages are sent\n   * to the subscriber with the highest priority.\n   *\n   * Subscribers have two priorities; this priority is for messages published on Solace Message\n   * Routers other than the one that the client is connected to.\n   *  * The valid range is 1..4\n   * @default  1\n   * @deprecated Use Shared Subscriptions instead\n   */\n  get subscriberNetworkPriority() {\n    return Check.nothing(this._subNetworkPriority) ? 1 : this._subNetworkPriority;\n  }\n  set subscriberNetworkPriority(newValue) {\n    this._subNetworkPriority = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#ignoreDuplicateSubscriptionError\n   * @type {Boolean}\n   * @description Used to ignore duplicate subscription errors on subscribe.\n   * @default  true\n   */\n  get ignoreDuplicateSubscriptionError() {\n    return Check.nothing(this._ignoreDupSubError) ? true : this._ignoreDupSubError;\n  }\n  set ignoreDuplicateSubscriptionError(newValue) {\n    this._ignoreDupSubError = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#ignoreSubscriptionNotFoundError\n   * @type {Boolean}\n   * @description Used to ignore subscription not found errors on unsubscribe.\n   * @default  true\n   */\n  get ignoreSubscriptionNotFoundError() {\n    return Check.nothing(this._ignoreSubNotFoundError) ? true : this._ignoreSubNotFoundError;\n  }\n  set ignoreSubscriptionNotFoundError(newValue) {\n    this._ignoreSubNotFoundError = newValue;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#reapplySubscriptions\n   * @type {Boolean}\n   * @description Set to 'true' to have the API remember subscriptions and reapply them upon\n   * calling {@link solace.Session#connect} on a disconnected session.\n   * @default  false\n   */\n  get reapplySubscriptions() {\n    return Check.nothing(this._reapplySubcriptions) ? false : this._reapplySubcriptions;\n  }\n  set reapplySubscriptions(newValue) {\n    this._reapplySubcriptions = newValue;\n  }\n\n  // ================== AD configuration ========================\n  /**\n   * Sets the guaranteed messaging publisher properties for the session.\n   * If the supplied value is not a {@link solace.MessagePublisherProperties},\n   * one will be constructed using the supplied value as an argument.\n   *\n   * @name solace.SessionProperties#publisherProperties\n   * @type {solace.MessagePublisherProperties}\n   */\n  get publisherProperties() {\n    return this._publisherProperties;\n  }\n  set publisherProperties(val) {\n    const { MessagePublisherProperties } = PublisherLib;\n    this._publisherProperties = val instanceof MessagePublisherProperties\n      ? val\n      : new MessagePublisherProperties(val);\n  }\n\n  // ================== Transport configuration ========================\n\n  /**\n   *\n   * @name solace.SessionProperties#noLocal\n   * @type {Boolean}\n   * @description Set to 'true' to signal the Solace Message Router that messages published on the\n   * session should not be received on the same session even if the client has a subscription that\n   * matches the published topic. If this restriction is requested, and the Solace Message Router\n   * does not have No Local support, the session connect will fail.\n   * @default  false\n   */\n  get noLocal() {\n    return Check.nothing(this._noLocal) ? false : this._noLocal;\n  }\n  set noLocal(newValue) {\n    this._noLocal = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#readTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a reply to\n   * come back from the Solace Message Router. This timeout serves as the default\n   * request timeout for {@link solace.Session#subscribe},\n   * {@link solace.Session#unsubscribe}, {@link solace.Session#updateProperty}.\n   *  * The valid range is >= 0.\n   * @default 10000\n   */\n  get readTimeoutInMsecs() {\n    return Check.nothing(this._readTimeout) ? 10000 : this._readTimeout;\n  }\n  set readTimeoutInMsecs(newValue) {\n    this._readTimeout = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sendBufferMaxSize\n   * @type {Number}\n   * @description The maximum buffer size for the transport session. This size must be bigger\n   * than the largest message an application intends to send on the session.\n   *\n   * The session buffer size configured using the sendBufferMaxSize\n   * session property controls SolClient buffering of transmit messages. When\n   * sending small messages, the session buffer size should be set to multiple times\n   * the typical message size to improve the performance. Regardless of the buffer\n   * size, SolClient always accepts at least one message to transmit. So even if a\n   * single message exceeds sendBufferMaxSize, it is accepted and\n   * transmitted as long as the current buffered data is zero. However, no more\n   * messages are accepted until the amount of data buffered is reduced\n   * enough to allow room below sendBufferMaxSize.\n   *  * The valid range is > 0.\n   *\n   * @default 65536 (64KB)\n   */\n  get sendBufferMaxSize() {\n    return Check.nothing(this._sendBufferMaxSize) ? (64 * 1024) : this._sendBufferMaxSize;\n  }\n  set sendBufferMaxSize(newValue) {\n    this._sendBufferMaxSize = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#assumedMaxAdSize\n   * @type {Number}\n   * @description The assumed maximum AD message payload size before the session is established.\n   * This value is irrelevant after session connection establishment,\n   * because at that point the broker-reported AD size limit takes precedence.\n   *\n   * Before the session is connected, messages with payloads larger than this number\n   * are rejected upon send().\n   * The default value of 30000000 is appropriate for appliances, whereas for VMRs it should be set to 10000000.\n   *\n   *  * The valid range is > 0.\n   *\n   * @default 30000000 \n   */\n  get assumedMaxAdSize() {\n    return Check.nothing(this._assumedMaxAdSize) ? 30000000 : this._assumedMaxAdSize;\n  }\n\n  set assumedMaxAdSize(newValue) {\n    this._assumedMaxAdSize = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#maxWebPayload\n   * @type {Number}\n   * @description The maximum payload size (in bytes) when sending data using the Web transport\n   * protocol.  Large messages may fail to be sent to the Solace Message Router when the maximum web\n   * payload is set to a small value. To avoid this, use a large maximum web payload.\n   *  * The valid range is >= 100.\n   * @default 1048576 (1MB)\n   */\n  get maxWebPayload() {\n    return Check.nothing(this._maxWebPayload) ? (1024 * 1024) : this._maxWebPayload;\n  }\n  set maxWebPayload(newValue) {\n    this._maxWebPayload = newValue;\n  }\n\n  /**\n   * @private\n   */\n  get nonHTTPTransportPropsSet() {\n      // Calculate on demand based on presence of properties.\n      // Currently not tracking this so no property names listed.\n    return [].filter(k => Check.something(this[k]));\n  }\n\n  /**\n   * @returns {String} A brief description of this object\n   * @private\n   */\n  [util_inspect_custom]() {\n    return Object.assign(this._lendsInspect(), {\n      'authenticationScheme':             AuthenticationScheme.describe(this.authenticationScheme),\n      'accessToken':                      this.accessToken ? '*****' : 'Not Set',\n      'idToken':                          this.idToken ? '*****' : 'Not Set',\n      'issuerIdentifier':                 this.issuerIdentifier ? '*****' : 'Not Set',\n      'url':                              this.url,\n      'password':                         this.password ? '*****' : this.password,\n      'userName':                         this.userName,\n      'clientName':                       this.clientName,\n      'applicationDescription':           this.applicationDescription,\n      'vpnName':                          this.vpnName,\n      'vpnNameInUse':                     this.vpnNameInUse,\n      'virtualRouterName':                this.virtualRouterName,\n      'connectTimeoutInMsecs':            this.connectTimeoutInMsecs,\n      'connectRetries':                   this.connectRetries,\n      'connectRetriesPerHost':            this.connectRetriesPerHost,\n      'reconnectRetryWaitInMsecs':        this.reconnectRetryWaitInMsecs,\n      'reconnectRetries':                 this.reconnectRetries,\n      'generateSendTimestamps':           this.generateSendTimestamps,\n      'generateReceiveTimestamps':        this.generateReceiveTimestamps,\n      'includeSenderId':                  this.includeSenderId,\n      'generateSequenceNumber':           this.generateSequenceNumber,\n      'keepAliveIntervalInMsecs':         this.keepAliveIntervalInMsecs,\n      'keepAliveIntervalsLimit':          this.keepAliveIntervalsLimit,\n      'p2pInboxInUse':                    this.p2pInboxInUse,\n      'p2pInboxBase':                     this.p2pInboxBase,\n      'userIdentification':               this.userIdentification,\n      'subscriberLocalPriority':          this.subscriberLocalPriority,\n      'subscriberNetworkPriority':        this.subscriberNetworkPriority,\n      'ignoreDuplicateSubscriptionError': this.ignoreDuplicateSubscriptionError,\n      'reapplySubscriptions':             this.reapplySubscriptions,\n      'publisherProperties':              this.publisherProperties,\n      'noLocal':                          this.noLocal,\n      'readTimeoutInMsecs':               this.readTimeoutInMsecs,\n      'sendBufferMaxSize':                this.sendBufferMaxSize,\n      'maxWebPayload':                    this.maxWebPayload,\n    });\n  }\n\n  /**\n   * @name solace.SessionProperties#toString\n   * @method\n   * @description Returns a human-readable representation of this Session, subject to change.\n   * @returns {String} A brief description of this object\n   */\n  toString() {\n    return super.toString(); // only here for the docs\n  }\n\n}\n\n// Don't try to evaluate these constants in browser mode\nif (BUILD_ENV.TARGET_NODE) {\n  /**\n   * @description The default comma separated list of cipher suites in\n   * order of preference used for SSL connections.\n   * @constant\n   * @type {String}\n   */\n  SessionProperties.DEFAULT_CIPHER_SUITES = DEFAULT_CIPHER_SUITES;\n\n  /**\n   * A list of cipher suites supported by the API when using SSL connections\n   * @constant\n   * @type {string[]}\n   * @private\n   */\n  SessionProperties.SUPPORTED_CIPHER_SUITES = SUPPORTED_CIPHER_SUITES;\n\n  /**\n   * SSL protocols supported by the API when using SSL connections\n   * @type {string[]}\n   * @private\n   */\n  SessionProperties.SUPPORTED_SSL_PROTOCOLS = SUPPORTED_SSL_PROTOCOLS;\n\n  /* eslint-disable */ // don't mangle import\n  SessionProperties.SslProtocolExcludeConstantMap = {\n    ['sslv2']:   NodeSslConstants['SSL_OP_NO_SSLv2'] || 0,\n    ['sslv3']:   NodeSslConstants['SSL_OP_NO_SSLv3'] || 0,\n    ['tlsv1']:   NodeSslConstants['SSL_OP_NO_TLSv1'] || 0,\n    ['tlsv1.1']: NodeSslConstants['SSL_OP_NO_TLSv1_1'] || 0,\n    ['tlsv1.2']: NodeSslConstants['SSL_OP_NO_TLSv1_2'] || 0,\n  };\n  /* eslint-enable */ // don't mangle import\n}\n\n\nmodule.exports.SessionProperties = SessionProperties;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionRequestType = {\n  ADD_SUBSCRIPTION:        0,\n  REMOVE_SUBSCRIPTION:     1,\n  ADD_P2PINBOX:            2,\n  REMOVE_P2PINBOX:         3,\n  REMOVE_DTE_SUBSCRIPTION: 100,\n};\n\nmodule.exports.SessionRequestType = Enum.new(SessionRequestType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Internal session state\n * @enum {string}\n * @memberof solace\n * @private\n */\nconst SessionStateName = {\n  DISCONNECTED:                     'SessionDisconnected',\n  CONNECTING:                       'SessionConnecting',\n  WAITING_FOR_TRANSPORT:            'WaitingForTransport',\n  WAITING_FOR_TRANSPORT_UP:         'WaitingForTransportUp',\n  WAITING_FOR_LOGIN:                'WaitingForLogin',\n  TRANSPORT_UP:                     'SessionTransportUp',\n  FULLY_CONNECTED:                  'SessionFullyConnected',\n  SESSION_ERROR:                    'SessionError',\n  DISCONNECTING:                    'SessionDisconnecting',\n  REAPPLYING_SUBSCRIPTIONS:         'ReapplyingSubscriptions',\n  WAITING_FOR_PUBFLOW:              'WaitingForMessagePublisher',\n  DISPOSED:                         'SessionDisposed',\n  WAITING_FOR_SUBCONFIRM:           'WaitForSubConfirm',\n  WAITING_FOR_CAN_ACCEPT_DATA:      'WaitForCanAcceptData',\n  DISCONNECTING_FLOWS:              'DisconnectingFlows',\n  FLUSHING_TRANSPORT:               'FlushingTransport',\n  DESTROYING_TRANSPORT:             'DestroyingTransport',\n  RECONNECTING:                     'Reconnecting',\n  TRANSPORT_FAIL:                   'TransportFail',\n  WAITING_FOR_INTERCONNECT_TIMEOUT: 'WaitingForInterconnectTimeout',\n  WAITING_FOR_DNS:                  'WaitingForDNS',\n  WAITING_FOR_TRANSPORT_CHANGE:     'WaitingForTransportChange',\n};\n\nmodule.exports.SessionStateName = Enum.new(SessionStateName);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionState = {\n  /**\n   * The session is connecting.\n   */\n  CONNECTING:    1,\n  /**\n   * The session is connected.\n   */\n  CONNECTED:     2,\n  /**\n   * The session experienced an error.\n   */\n  SESSION_ERROR: 3,\n  /**\n   * The session is disconnecting.\n   */\n  DISCONNECTING: 4,\n  /**\n   * The session is disconnected.\n   */\n  DISCONNECTED:  5,\n\n};\n\nmodule.exports.SessionState = Enum.new(SessionState);\n","const DestinationLib = require('solclient-destination');\nconst MessageLib = require('solclient-message');\nconst SolclientFactoryLib = require('solclient-factory');\nconst { assert } = require('solclient-eskit');\nconst { CacheSession,\n        CACHE_REQUEST_PREFIX } = require('solclient-solcache-session');\nconst { CapabilityType } = require('./capability-types');\nconst { Check,\n        Parameter } = require('solclient-validate');\nconst { DefaultCapabilities } = require('./default-capabilities');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError,\n        RequestEventCode } = require('solclient-error');\nconst { EventEmitter } = require('solclient-events');\nconst { GlobalContext } = require('./global-context');\nconst { HostList } = require('./host-list');\nconst { LogFormatter } = require('solclient-log');\nconst { MessageRxCBInfo } = require('./message-rx-cb-info');\nconst { MutableSessionProperty } = require('./mutable-session-properties');\nconst { OutstandingDataRequest } = require('./outstanding-data-request');\nconst { P2PUtil } = require('./p2p-util');\nconst { QueueDescriptor,\n        QueueType } = require('solclient-queue');\nconst { SDTField,\n        SDTFieldType } = require('solclient-sdt');\nconst { SessionEvent } = require('./session-event');\nconst { SessionEventCBInfo } = require('./session-event-cb-info');\nconst { SessionEventCode } = require('./session-event-codes');\nconst { SessionEventName } = require('./session-event-names');\nconst { SessionFSM } = require('./session-fsm');\nconst { SessionFSMEvent } = require('./session-fsm-event');\nconst { SessionOperation } = require('./session-operations');\nconst { SessionProperties } = require('./session-properties');\nconst { SessionPropertiesValidator } = require('./session-properties-validator');\nconst { SessionRequestType } = require('./session-request-types');\nconst { SessionState } = require('./session-states');\nconst { SessionStateName } = require('./session-state-names');\nconst { Stats,\n        StatType } = require('solclient-stats');\nconst { StringUtils } = require('solclient-util');\nconst { TransportCapabilities,\n        TransportProtocol,\n        TransportReturnCode } = require('solclient-transport');\n\nfunction transportProtocolDefaultList() {\n  const { ProfileBinding } = SolclientFactoryLib;\n\n  if (BUILD_ENV.TARGET_NODE) {\n    return [TransportProtocol.WS_BINARY];\n  }\n\n  const result = [];\n  if (TransportCapabilities.web.webSocket()) {\n    result.push(TransportProtocol.WS_BINARY);\n  }\n  const profile = ProfileBinding.value;\n  if (profile.cometEnabled) {\n    if (TransportCapabilities.web.xhrBinary()) {\n      if (TransportCapabilities.web.streaming()) {\n        result.push(TransportProtocol.HTTP_BINARY_STREAMING);\n      }\n      result.push(TransportProtocol.HTTP_BINARY);\n    }\n    result.push(TransportProtocol.HTTP_BASE64);\n  }\n  return result;\n}\n\nfunction isValidADTransport(transportProtocol) {\n  return (transportProtocol && (\n          transportProtocol !== TransportProtocol.HTTP_BINARY_STREAMING &&\n          transportProtocol !== TransportProtocol.HTTP_BINARY &&\n          transportProtocol !== TransportProtocol.HTTP_BASE64));\n}\n\nfunction formatEventName(eventName) {\n  return `SessionEventCode.${SessionEventCode.describe(eventName)}`;\n}\n\n/**\n * @private\n */\nconst SOLCLIENT_REQUEST_PREFIX = '#REQ';\n\n/**\n * A callback that returns replies to requests sent via {@link solace.Session#sendRequest}.\n * The replyReceivedCallback <b>must</b> be provided to the API as the third argument of\n * {@link solace.Session#sendRequest}.\n * @callback\n * @function\n * @name solace.Session.replyReceivedCallback\n * @param {solace.Session} session The session object that received the reply.\n * @param {solace.Message} message The reply message received.\n * @param {Object} userObject The user object associated with the callback. 'undefined' when\n * not provided to <i>sendRequest</i>\n */\n\n/**\n * A callback that returns errors associated with requests sent via\n * {@link solace.Session#sendRequest}. The requestFailedCallback <b>must</b> be\n * provided to the API as the fourth argument of\n * {@link solace.Session#sendRequest}\n * @callback\n * @function\n * @name solace.Session.requestFailedCallback\n * @param {solace.Session} session The session object associated with the event.\n * @param {solace.RequestError} error The event associated with the failure.\n * @param {Object} userObject The user object associated with the callback. 'undefined' when\n * not provided to <i>sendRequest</i>\n */\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * Applications must use {@link solace.SolclientFactory.createSession} to create a session.\n *\n * Represents a client Session.\n *\n * Session provides these major functions:\n *  * Subscriber control, such as updating subscriptions;\n *  * Publishes both Direct and Guaranteed Messages to the router;\n *  * Receives direct messages from the router.\n *\n * The Session object is an\n * {@link https://nodejs.org/api/events.html#events_class_eventemitter|EventEmitter}, and will emit\n * events with event names from {@link solace.SessionEventCode} when Session events occur.\n * Each session event can be subscribed using {@link solace.Session#on} with the corresponding\n * {@link solace.SessionEventCode}. If any of the registered event listeners throw an exception,\n * the exception will be emitted on the 'error' event.\n *\n * @fires solace.SessionEventCode#ACKNOWLEDGED_MESSAGE\n * @fires solace.SessionEventCode#CAN_ACCEPT_DATA\n * @fires solace.SessionEventCode#CONNECT_FAILED_ERROR\n * @fires solace.SessionEventCode#DISCONNECTED\n * @fires solace.SessionEventCode#DOWN_ERROR\n * @fires solace.SessionEventCode#GUARANTEED_MESSAGE_PUBLISHER_DOWN\n * @fires solace.SessionEventCode#MESSAGE\n * @fires solace.SessionEventCode#PROPERTY_UPDATE_ERROR\n * @fires solace.SessionEventCode#PROPERTY_UPDATE_OK\n * @fires solace.SessionEventCode#RECONNECTED_NOTICE\n * @fires solace.SessionEventCode#RECONNECTING_NOTICE\n * @fires solace.SessionEventCode#REJECTED_MESSAGE_ERROR\n * @fires solace.SessionEventCode#REPUBLISHING_UNACKED_MESSAGES\n * @fires solace.SessionEventCode#SUBSCRIPTION_ERROR\n * @fires solace.SessionEventCode#SUBSCRIPTION_OK\n * @fires solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_ERROR\n * @fires solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_OK\n * @fires solace.SessionEventCode#UP_NOTICE\n * @fires solace.SessionEventCode#VIRTUALROUTER_NAME_CHANGED\n *\n * @hideconstructor\n * @memberof solace\n */\nclass Session extends EventEmitter {\n\n  /*\n   * Applications must use {@link solace.SolclientFactory.createSession} to create a session.\n   *\n   * @param {solace.SessionProperties} properties Properties to use for constructing\n   *        the session.\n   * @param {solace.MessageRxCBInfo} [messageCallback] Message callback info. The application can\n   *    also receive message events via\n   *    `session.on(solace.SessionEventCode.MESSAGE, (message) => { ... });`\n   * @param {solace.SessionEventCBInfo} [eventCallback] Event callback info. The application can\n   *    also receive session events via\n   *    `session.on(solace.SessionEventCode.<code>, (event) => { ... });`\n   *\n   * @throws {solace.OperationError} if the parameters have an invalid type or value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * @private\n   * @constructor\n   */\n  constructor(properties, messageCallback, eventCallback) {\n    super({\n      emits:  SessionEventCode.values,\n      direct: SessionEventCode.MESSAGE,\n      formatEventName,\n    });\n    const self = this;\n    this.logger = new LogFormatter();\n    this.logger.formatter = function formatter(...args) {\n      return [`[session=${self._sessionFSM ? self._sessionFSM.sessionIdHex : '(N/A)'}]`, ...args];\n    };\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session constructor called.');\n    if ((properties !== undefined) && (properties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('Incoming session properties:\\n', properties);\n    }\n\n    // Default error handler prints the exception:\n    this.on('error', (error) => {\n      const { LOG_ERROR } = self.logger;\n      LOG_ERROR(error.info.error);\n    });\n\n    const sessionProperties = new SessionProperties(properties);\n    {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('Eventual session properties:\\n', sessionProperties);\n    }\n    // Callbacks to client application.\n    // Get/set for these is private, so they can only be changed in-API (e.g. by CacheSession)\n    // The user-supplied one cannot be changed.\n    // The configuration of the exceptions generated by these needs to match EventEmitter, so that\n    // the handleGenericErrorEvent above can behave consistently\n    this._messageCallbackInfo = this.wrapMessageCallback(messageCallback);\n    this._eventCallbackInfo = this.wrapEventCallback(eventCallback);\n\n    // client name generation is applicable\n    if (Check.empty(sessionProperties.clientName)) {\n      // Auto-gen clientName\n      sessionProperties.clientName = GlobalContext.GenerateClientName();\n    }\n\n    // generate userIdentification\n    sessionProperties._setUserIdentification(GlobalContext.GenerateUserIdentification());\n\n    // client description generation is applicable\n    if (Check.empty(sessionProperties.applicationDescription)) {\n      // Auto-gen applicationDescription\n      sessionProperties.applicationDescription = GlobalContext.GenerateClientDescription();\n    }\n\n    // Set webTransportProtocolList after validation so we're not basing it on an\n    // invalid transport selection...so we're not checking transportProtocol/\n    // webTransportProtocolList except for parameter conflict.\n\n    // Now that we have touched up the properties as much as possible, validate\n    // This also validates the subordinate MessagePublisherProperties\n    SessionPropertiesValidator.validate(sessionProperties);\n\n    // We want a protocol list, but historically we also accept a single protocol.\n    // Create a web transport protocol list from the transport protocol\n    // option if that is all that was set. (If both were set, we failed validation)\n    if (Check.nothing(sessionProperties.webTransportProtocolList)) {\n      // Create a fallback list that starts with the selected protocol.\n      // If the selected protocol is not in the fallback list, it is not\n      // a valid protocol for the platform so return an empty list.\n      const selectedProtocol = sessionProperties.transportProtocol;\n      const defaultList = transportProtocolDefaultList();\n      const sliceIndex = selectedProtocol ? defaultList.indexOf(selectedProtocol) : 0;\n      if (sliceIndex < 0) {\n        // The user explicitly selected a protocol that wasn't valid\n        throw new OperationError(`Selected transport protocol ${\n                                 TransportProtocol.describe(selectedProtocol)\n                                 } is disabled or invalid for this platform`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      // Slice index is valid\n      sessionProperties.webTransportProtocolList = defaultList.slice(sliceIndex);\n\n      if (sessionProperties.webTransportProtocolList.length === 0) {\n        // Even before AD restrictions, no valid protocols.\n        // User error.\n        throw new OperationError(`No usable transport protocol or fallback from ${\n          TransportProtocol.describe(selectedProtocol)}`,\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n\n      // Check that the generated list is compatible with AD.\n      const validForAD = sessionProperties.webTransportProtocolList.filter(x =>\n        isValidADTransport(x));\n      if (validForAD.length === 0) {\n        this._adDisabledReason = 'Guaranteed messaging not compatible with any available ' +\n          `transport protocol: ${\n            sessionProperties.webTransportProtocolList.map(k =>\n              TransportProtocol.describe(k)).join(', ')}`;\n      }\n\n      // Don't fold this into the check below -- for that one, every\n      // protocol must be valid because the user explicitly requested all of them.\n      // In this case, we ensure that at least one of our generated list is valid.\n      if (sessionProperties.publisherProperties.enabled) {\n        if (this._adDisabledReason) {\n          throw new OperationError(\n            'Invalid transport protocol(s) for session with Guaranteed Messaging Publisher',\n            ErrorSubcode.PARAMETER_CONFLICT,\n            this._adDisabledReason\n          );\n        }\n        // AD was not disabled by having no protocols available\n        sessionProperties.webTransportProtocolList = validForAD;\n      }\n      // A valid protocol list is ready to use.\n    } else {\n      // User provided transport protocol list\n      // Check for parameter conflict between session and publisher\n      // Already checked these for parameter conflict; only one will be set\n      // Already checked that user list was not empty\n      const transportProtocols = sessionProperties.webTransportProtocolList;\n      const validForAD = transportProtocols.every(isValidADTransport);\n      if (!validForAD) {\n        const invalid = transportProtocols.filter(x => !isValidADTransport(x));\n        this._adDisabledReason = `Guaranteed messaging incompatible with selected transport protocols: ${\n          invalid.map(k => TransportProtocol.describe(k)).join(', ')}`;\n        if (sessionProperties.publisherProperties.enabled) {\n          throw new OperationError(\n            'Invalid transport protocol(s) for session with Guaranteed Messaging Publisher',\n            ErrorSubcode.PARAMETER_CONFLICT,\n            this._adDisabledReason\n          );\n        }\n      }\n    }\n\n\n    // Assign the final properties and start the state machine.\n    this._sessionProperties = sessionProperties;\n    this._sessionStats = new Stats();\n    this._hosts = new HostList(sessionProperties);\n    this._sessionFSM = new SessionFSM(\n      this._sessionProperties,\n      this,\n      this._sessionStats,\n      this._hosts\n    );\n    this._sessionFSM.start();\n    this._sessionFSM.createMessagePublisher();\n\n    /**\n     * The following fields are destroyed when disconnect is called\n     * and recreated when connect is called again.\n     * @private\n     */\n    this._outstandingDataReqs = {};\n    this._capabilities = DefaultCapabilities.createDefaultCapabilities(sessionProperties);\n    this._seqNum = 1;\n  }\n\n  /**\n   * Connects the session to the Solace Message Router as configured in\n   * the {@link solace.SessionProperties#url}.\n   *\n   * When the session is successfully connected to the Solace Message Router, the\n   * {@link solace.SessionEventCode#UP_NOTICE} event is emitted if a listener has been registered.\n   *\n   * If {@link solace.SessionProperties#reapplySubscriptions} is set to true, this operation\n   * re-registers previously registered subscriptions. The connected session event\n   * ({@link solace.SessionEventCode#event:UP_NOTICE}) is emitted only when all the subscriptions\n   * are successfully added to the router.\n   *\n   * If the API is unable to connect within {@link solace.SessionProperties#connectTimeoutInMsecs}\n   * or due to login failures, the session's state transitions back to 'disconnected' and an event\n   * is generated.\n   *\n   * **Note:** Before the session's state transitions to 'connected', a client\n   * application cannot use the session; any attempt to call functions will throw\n   * {@link solace.OperationError}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed, already connected or connecting.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the underlying transport cannot be established.\n   *   Subcode: {@link solace.ErrorSubcode.CONNECTION_ERROR}.\n   */\n  connect() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session connect called.');\n    const result = this.allowOperation(SessionOperation.CONNECT);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.CONNECT });\n    this._sessionFSM.processEvent(sEvent);\n  }\n\n  /**\n   * @returns {Boolean} True if the session can be used to acknolwedge a message\n   * @readonly\n   * @private\n   */\n  get canAck() {\n    /*\n     * If the user wants to ack a message, it was received on a session (else ack will throw),\n     * and so we know that the session was connected at some point.\n     *\n     * If the session is in any of the following states, we know it is either connecting or\n     * connected.\n     *\n     * Since we know the session was previously connected, this implies the session is either\n     * RECONNECTING or connected.\n     *\n     * We allow acks when the session is reconnecting or connected.\n     */\n    const statesCanAck = [\n      SessionStateName.CONNECTING,\n      SessionStateName.TRANSPORT_UP,\n      SessionStateName.DISCONNECTING,\n    ];\n    // Allow ack if there is some acceptable state name such that getActiveState returns the state.\n    return statesCanAck.some(stateName => !!this._sessionFSM.getActiveState(stateName));\n  }\n\n  /**\n   * Disconnects the session. The session attempts to disconnect cleanly, concluding all operations\n   * in progress. The disconnected session event {@link solace.SessionEventCode#event:DISCONNECTED}\n   * is emitted when these operations complete and the session has completely disconnected.\n   *\n   * @throws {solace.OperationError} if the session is disposed, or has never been connected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  disconnect() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session disconnect called.');\n    const result = this.allowOperation(SessionOperation.DISCONNECT);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.DISCONNECT });\n    this._sessionFSM.processEvent(sEvent);\n  }\n\n  /**\n   * Release all resources associated with the session.\n   * It is recommended to call disconnect() first for proper handshake with the message-router.\n   */\n  dispose() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session dispose called.');\n    if (this._disposed) return;\n\n    //setImmediate(() => {\n    setTimeout(() => {\n      this._sessionFSM.processEvent(\n        new SessionFSMEvent({ name: SessionEventName.DISPOSE })\n      ); // yield for disconnect if any\n      this._sessionFSM.terminateFsm();\n      this.disableEmitter();\n      this._disposed = true;\n    }, 0);\n  }\n\n  /**\n   * Subscribe to a topic, optionally requesting a confirmation from the router.\n   *\n   * If requestConfirmation is set to true:\n   * {@link solace.SessionEventCode.SUBSCRIPTION_OK} is generated when subscription is\n   * added successfully; otherwise, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated.\n   *\n   * If requestConfirmation is set to false, only session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated upon failure.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}.\n   * The returned string is in the format of \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to add.\n   * @param {Boolean} requestConfirmation true, to request a confirmation; false otherwise.\n   * @param {Object} correlationKey If specified, and if requestConfirmation is true, this value is\n   *                                echoed in the session event within {@link SessionEvent}.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  subscribe(topic, requestConfirmation, correlationKey, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session subscribe called for topic ', (topic && topic.toString && topic.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for subscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n\n    Parameter.isBooleanOrNothing('requestConfirmation', requestConfirmation);\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    this._sessionFSM.subscriptionUpdate(\n      topic,\n      !!requestConfirmation,\n      correlationKey,\n      requestTimeout,\n      SessionRequestType.ADD_SUBSCRIPTION,\n      (rxMsgObj, cancelledRequest) =>\n        this.handleSubscriptionUpdateResponse(rxMsgObj,\n                                              cancelledRequest,\n                                              requestConfirmation));\n  }\n\n  updateQueueSubscription(topic, queue, add, messageConsumer, callback, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(\n      'Queue subscribe called for topic ', (topic && topic.toString && topic.toString()),\n      ' for queue ', (queue && queue.toString && queue.toString()));\n\n    LOG_TRACE('queue: ', queue);\n\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for queue subscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n    Parameter.isInstanceOf('queue', queue, DestinationLib.Destination);\n    queue.validate();\n    if ((queue.getType() !== DestinationLib.DestinationType.QUEUE) &&\n    (queue.getType() !== DestinationLib.DestinationType.TEMPORARY_QUEUE)) {\n      throw new OperationError(`Queue is required for queue subscribe; ${\n                               DestinationLib.DestinationType.describe(queue.getType())}`,\n                               ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    this._sessionFSM.queueSubscriptionUpdate(\n      topic,\n      queue,\n      requestTimeout,\n      add,\n      (rxMsgObj, cancelledRequest) =>\n        this.handleQueueSubscriptionUpdateResponse(\n          rxMsgObj,\n          cancelledRequest,\n          callback));\n  }\n\n  /**\n   * Unsubscribe from a topic, and optionally request a confirmation from the router.\n   *\n   * If requestConfirmation is set to true, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_OK} is generated when subscription is removed\n   * successfully; otherwise, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated.\n   *\n   * If requestConfirmation is set to false, only session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated upon failure.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}. The returned\n   * string is in the format \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to remove.\n   * @param {Boolean} requestConfirmation true, to request a confirmation; false otherwise.\n   * @param {Object} correlationKey If <code>null</code> or undefined, a Correlation Key is not set\n   *                                in the confirmation session event.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  unsubscribe(topic, requestConfirmation, correlationKey, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session unsubscribe called for topic ', (topic && topic.toString && topic.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for unsubscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n\n    Parameter.isBooleanOrNothing('requestConfirmation', requestConfirmation);\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    this._sessionFSM.subscriptionUpdate(\n      topic,\n      !!requestConfirmation,\n      correlationKey,\n      requestTimeout,\n      SessionRequestType.REMOVE_SUBSCRIPTION,\n      (rxMsgObj, cancelledRequest) =>\n        this.handleSubscriptionUpdateResponse(rxMsgObj,\n                                              cancelledRequest,\n                                              requestConfirmation));\n  }\n\n  /**\n   * Request that a Durable Topic Endpoint stop receiving data on a topic. Unsubscribe\n   * requests are only allowed by the router when no clients are bound to the DTE.\n   * If the unubscribe request is successful, the DTE will stop attracting messages,\n   * and all messages spooled to the DTE will be deleted.\n   *\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_OK} is generated when the\n   * subscription is removed successfully; otherwise,\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR} is generated.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}.\n   *\n   * @param {solace.AbstractQueueDescriptor|solace.QueueDescriptor} queueDescriptor A description\n   *  of the queue to which the topic is subscribed.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   */\n  unsubscribeDurableTopicEndpoint(queueDescriptor) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session unsubscribeDurableTopicEndpoint called for queue descriptor ', (queueDescriptor && queueDescriptor.toString && queueDescriptor.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    // emulate subscription\n    const destination = this.createDestinationFromDescriptor(\n      QueueDescriptor.createFromSpec(queueDescriptor));\n    const requestConfirmation = true;\n    this._sessionFSM.subscriptionUpdate(\n      destination,\n      requestConfirmation,\n      undefined,\n      undefined,\n      SessionRequestType.REMOVE_DTE_SUBSCRIPTION,\n      (rxMsgObj, cancelledRequest) =>\n        this.handleDTEUnsubscribeResponse(rxMsgObj,\n                                          cancelledRequest));\n  }\n\n\n  /**\n   * Modify a session property after creation of the session.\n   *\n   * This method only works for a select few properties,\n   * and updates their value on the live broker session.\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property key to modify.\n   * @param {Object} newValue The new property value.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, it\n   *                                overwrites readTimeoutInMsecs\n   * @param {Object} correlationKey If specified, this value is echoed in the session event within\n   *                                {@link SessionEvent} property in {@link SessionProperties}\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   */\n  updateProperty(mutableSessionProperty, newValue, requestTimeout, correlationKey) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session updateProperty called: ', mutableSessionProperty, newValue);\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    const { Topic } = DestinationLib;\n\n    LOG_TRACE('Updating property ', mutableSessionProperty, newValue);\n\n    Parameter.isEnumMember('mutableSessionProperty', mutableSessionProperty, MutableSessionProperty);\n\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    let sessionEvent;\n    /*\n     Response CB to the CLIENTCTRL UPDATE response\n\n     This is pretty complicated: we define the whole process in here\n     using callbacks to preserve state such as the correlationKey of the user\n     request.\n     That is, this entire multi-step process executes under the context of that one call to\n     updateProperty with a single correlationKey value.\n     */\n    const responseCallback = (respMsg) => {\n      const response = respMsg.getResponse();\n      if (response.responseCode === 200) {\n        if (mutableSessionProperty === MutableSessionProperty.CLIENT_DESCRIPTION) {\n          // update property and notify client\n          this._sessionProperties.applicationDescription = newValue;\n          sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                            response.responseString,\n                                            response.responseCode,\n                                            0,\n                                            correlationKey,\n                                            null);\n          this.sendEvent(sessionEvent);\n        } else if (mutableSessionProperty === MutableSessionProperty.CLIENT_NAME) {\n          // replace P2P subscription: REM and ADD\n          const oldP2pTopicName = P2PUtil.getP2PTopicSubscription(\n            this._sessionProperties.p2pInboxBase);\n          const oldP2pTopic = Topic.createFromName(oldP2pTopicName);\n\n          const newP2pTopicName = P2PUtil.getP2PTopicSubscription(\n            respMsg.getP2PTopicValue());\n          const newP2pTopic = Topic.createFromName(newP2pTopicName);\n\n          const afterAddCallback = (smpResp) => {\n            const resp = smpResp.getResponse();\n            if (resp.responseCode === 200) {\n              // notify client\n              this._sessionProperties._setP2pInboxBase(respMsg.getP2PTopicValue() || '');\n              this._sessionProperties._setP2pInboxInUse(\n                P2PUtil.getP2PInboxTopic(this._sessionProperties.p2pInboxBase));\n              this._sessionProperties.clientName = newValue;\n              sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                                resp.responseString,\n                                                resp.responseCode,\n                                                0,\n                                                correlationKey,\n                                                null);\n              this.sendEvent(sessionEvent);\n            } else {\n              const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(resp.responseCode,\n                                                                              resp.responseString);\n              if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT &&\n                              this._sessionProperties.ignoreDuplicateSubscriptionError) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  0,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ATTRIBUTES_CONFLICT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_INVALID ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ACL_DENIED ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_TOO_MANY) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  errorSubcode,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  ErrorSubcode.SUBSCRIPTION_ERROR_OTHER,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              }\n            }\n          };\n\n          const afterRemoveCallback = (smpResp) => {\n            const resp = smpResp.getResponse();\n            if (resp.responseCode === 200) {\n              // second add new P2P\n              this._sessionFSM.subscriptionUpdate(newP2pTopic,\n                                                  true,       // request confirm\n                                                  correlationKey,\n                                                  this._sessionProperties.readTimeoutInMsecs,\n                                                  SessionRequestType.ADD_P2PINBOX,\n                                                  afterAddCallback);\n            } else {\n              const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(resp.responseCode,\n                                                                              resp.responseString);\n              if (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND &&\n                  this._sessionProperties.ignoreSubscriptionNotFoundError) {\n                // add new P2P anyway: the error is simply the old P2P\n                // was not found on remove.  It's notable though.\n                this._sessionFSM.subscriptionUpdate(newP2pTopic,\n                                                    true,       // request confirm\n                                                    correlationKey,\n                                                    this._sessionProperties.readTimeoutInMsecs,\n                                                    SessionRequestType.ADD_P2PINBOX,\n                                                    afterAddCallback);\n              } else if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ATTRIBUTES_CONFLICT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_INVALID ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ACL_DENIED) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  errorSubcode,\n                                                  null,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  ErrorSubcode.SUBSCRIPTION_ERROR_OTHER,\n                                                  null,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              }\n            }\n          };\n\n          // first remove old P2P\n          this._sessionFSM.subscriptionUpdate(oldP2pTopic,\n                                              true,       // request confirm\n                                              correlationKey,\n                                              this._sessionProperties.readTimeoutInMsecs,\n                                              SessionRequestType.REMOVE_P2PINBOX,\n                                              afterRemoveCallback);\n        }\n      } else {\n        // notify client error\n        const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(response.responseCode,\n                                                                        response.responseString);\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          response.responseString,\n                                          response.responseCode,\n                                          errorSubcode,\n                                          correlationKey,\n                                          null);\n        this.sendEvent(sessionEvent);\n      }\n    }; // end CB (response to UPDATE request)\n\n    const returnCode = this._sessionFSM.sendUpdateProperty(mutableSessionProperty,\n                                                           newValue,\n                                                           correlationKey,\n                                                           requestTimeout,\n                                                           responseCallback);\n    if (returnCode !== TransportReturnCode.OK) {\n          // do not change session state\n\n      if (returnCode === TransportReturnCode.NO_SPACE) {\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          'Property update failed - no space in transport',\n                                          null,\n                                          ErrorSubcode.INSUFFICIENT_SPACE,\n                                          null,\n                                          null);\n      } else {\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          'Property update failed',\n                                          null,\n                                          ErrorSubcode.INVALID_OPERATION,\n                                          null,\n                                          null);\n      }\n      this.sendEvent(sessionEvent);\n    }\n  }\n  /**\n   * Modify (some) authentication-related session properties.\n   * The modifications take effect the next time the session connects or reconnects to the broker.\n   * There is no change to the active connection.\n   * Calling this method does not in itself trigger any kind of reconnection, reauthentication or renegotiation.\n   *\n   * **Note:** the update of \"accessToken\" and \"idToken\" properties is currently supported.\n   * Authentication Properties\n   * - accessToken to update previously set access token required for OAUTH2 authentication.\n   * - idToken to update previously set ID token required for OIDC authentication\n   * Example: updateAuthenticationOnReconnect({accessToken : “my_new_token”});\n   *\n   *\n   * @param {Object} authenticationProperties to be set\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if unsupported properties attempted to be set.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}.\n   */\n  updateAuthenticationOnReconnect(authenticationProperties) {\n    const { LOG_TRACE } = this.logger;\n    const allowedProperties = ['accessToken', 'idToken'];\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    if (!authenticationProperties || typeof authenticationProperties !== 'object') {\n      throw new OperationError('updateAuthenticationOnReconnect parameter must be a non-empty object.', ErrorSubcode.PARAMETER_INVALID_TYPE, null);\n    }\n    var key;\n    for (key in authenticationProperties) {\n      if (!allowedProperties.includes(key)) {\n        throw new OperationError('Invalid property in updateAuthenticationOnReconnect parameter.', ErrorSubcode.PARAMETER_CONFLICT, null);\n      }\n    }\n    const newProps = this.getSessionProperties();\n    Object.assign(newProps, authenticationProperties);\n    SessionPropertiesValidator.validate(newProps);\n    this._sessionProperties = newProps;\n    Object.assign(this._sessionFSM._sessionProperties, authenticationProperties);\n    LOG_TRACE('updateAuthenticationOnReconnect applied new token(s).');\n  }\n\n  /**\n   * Publish (send) a message over the session. The message is sent to its set destination.\n   *\n   * This method is used for sending both direct and Guaranteed Messages.  If the message's\n   * {@link solace.MessageDeliveryModeType} is {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * message is a direct message; otherwise, it is a guaranteed message.\n   *\n   * @param {solace.Message} message The message to send. It must have a destination set.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   * \n   */\n  send(message) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session send() called.');\n    const result = this.allowOperation(SessionOperation.SEND, message);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('message', message, MessageLib.Message);\n    this.validateAndSendMessage(message);\n  }\n\n  /**\n   * Sends a request using user-specified callback functions.\n   * <br>\n   * <strong>Note:</strong>\n   * The API sets the correlationId and replyTo fields of the message being sent;\n   * this overwrites any existing correlationId and replyTo values on the message.\n   *\n   * @param {solace.Message} message The request message to send.\n   * @param {Number} [timeout] The timeout value (in milliseconds). The minimum value is 100 msecs.\n   * @param {solace.Session.replyReceivedCallback} [replyReceivedCBFunction] The callback to notify\n   *    when a reply is received.\n   * @param {solace.Session.requestFailedCallback} [requestFailedCBFunction] The callback to notify\n   *    when the request failed.\n   * @param {Object} [userObject] An optional correlation object to use in the response callback.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   */\n  sendRequest(message,\n              timeout = undefined,\n              replyReceivedCBFunction = undefined,\n              requestFailedCBFunction = undefined,\n              userObject = undefined\n              ) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session sendRequest called.');\n    const result = this.allowOperation(SessionOperation.SEND, message);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('message', message, MessageLib.Message);\n    Parameter.isNumberOrNothing('timeout', timeout);\n    Parameter.isRangeCompareOrNothing('timeout', timeout, '>=', 100);\n    Parameter.isFunctionOrNothing('replyReceivedCBFunction', replyReceivedCBFunction);\n    Parameter.isFunctionOrNothing('requestFailedCBFunction', requestFailedCBFunction);\n\n    // set correlationId and replyTo fields if not set by the application\n    const correlationId = message.getCorrelationId();\n    if (correlationId === null || correlationId === undefined) {\n      message.setCorrelationId(SOLCLIENT_REQUEST_PREFIX + GlobalContext.NextId());\n    }\n    const replyTo = message.getReplyTo();\n    if (replyTo === null || replyTo === undefined) {\n      const replyToTopic = DestinationLib.Topic.createFromName(\n        this._sessionProperties.p2pInboxInUse);\n      message.setReplyTo(replyToTopic);\n    }\n\n    this.validateAndSendMessage(message);\n\n      // enqueue request\n    this.enqueueOutstandingDataReq(message.getCorrelationId(),\n                                   requestFailedCBFunction,\n                                   timeout,\n                                   replyReceivedCBFunction,\n                                   userObject);\n  }\n\n  /**\n   * Sends a reply message to the destination specified in messageToReplyTo.\n   *\n   * If `messageToReplyTo` is non-null:\n   *  * {@link solace.Message#getReplyTo} is copied from `messageToReplyTo` to\n   *    {@link solace.Message#setDestination} on `replyMessage`, unless `replyTo` is null.\n   *  * {@link solace.Message#setCorrelationId} is copied from `messageToReplyTo` to\n   *    {@link solace.Message#setCorrelationId} on `replyMessage`, unless `correlationId` is null.\n   *\n   * If `messageToReplyTo` is null, the application is responsible for setting\n   * the `destination` and `correlationId` on the `replyMessage`.\n   *\n   * @param {solace.Message} messageToReplyTo The message to which a reply will be sent.\n   * @param {solace.Message} replyMessage The reply to send.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   */\n  sendReply(messageToReplyTo, replyMessage) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session sendReply called.');\n    const result = this.allowOperation(SessionOperation.SEND, replyMessage);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isInstanceOfOrNothing('messageToReplyTo', messageToReplyTo, MessageLib.Message);\n    Parameter.isInstanceOf('replyMessage', replyMessage, MessageLib.Message);\n\n    replyMessage.setAsReplyMessage(true);\n    if (messageToReplyTo) {\n      replyMessage.setCorrelationId(messageToReplyTo.getCorrelationId());\n      const replyTo = messageToReplyTo.getReplyTo();\n      if (replyTo === null || replyTo === undefined) {\n        throw new OperationError('ReplyTo destination may not be null.',\n                                 ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n      replyMessage.setDestination(messageToReplyTo.getReplyTo());\n    }\n    this.validateAndSendMessage(replyMessage);\n  }\n\n  /**\n   * Returns the value of a given {@link solace.StatType}.\n   *\n   * @param {solace.StatType} statType The statistic to query.\n   * @returns {Number} The value of the requested statistic.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the StatType is invalid.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   */\n  getStat(statType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getStat called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isEnumMember('statType', statType, StatType);\n    return this._sessionFSM.getStat(statType);\n  }\n\n  /**\n   * Reset session statistics to initial values.\n   *\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  resetStats() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session resetStats called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    this._sessionFSM.resetStats();\n  }\n\n  /**\n   * Returns a clone of the properties for this session.\n   *\n   * @returns {solace.SessionProperties} A clone of this session's properties.\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  getSessionProperties() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getSessionProperties called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    const properties = this._sessionProperties.clone();\n    const sessionState = this.getSessionState();\n    if ((sessionState !== SessionStateName.DISCONNECTED) && this._sessionFSM._transport) {\n      properties._setWebTransportProtocolInUse(this._sessionFSM._transport.getTransportProtocol());\n    }\n\n    return properties;\n  }\n\n  /**\n   * Check the value of a boolean router capability.\n   *\n   * This function is a shortcut for {@link solace.Session#getCapability}. It performs the same\n   * operation, but instead of returning a {@link solace.SDTField} wrapping a capability value, it\n   * just returns the boolean value.\n   *\n   *  Attempting to query a non-boolean capability will return `null`.\n   *\n   * @param {solace.CapabilityType} capabilityType The capability to check.\n   *\n   * @returns {Boolean} the value of the capability queried.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type or value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  isCapable(capabilityType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session isCapable called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isNumber('capabilityType', capabilityType);\n\n    const caps = this._capabilities;\n    if (!caps) {\n      return false;\n    }\n\n    // Guard for undefined OR non-boolean capability\n    return (typeof caps[capabilityType] === 'boolean') ? caps[capabilityType] : false;\n  }\n\n  /**\n   * Get the value of an router capability, or null if unknown. This function must\n   * be called after connecting the session.\n   *\n   * SDT Type conversions:\n   *\n   *  * {string} values are returned as {@link solace.SDTFieldType.STRING}.\n   *  * {boolean} values are returned as {@link solace.SDTFieldType.BOOL}.\n   *  * All numeric values are returned as {@link solace.SDTFieldType.INT64}.\n   *\n   * @param {solace.CapabilityType} capabilityType The router capability to query.\n   * @returns {solace.SDTField} The result of the capability query.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed\n   *    Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type or value.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  getCapability(capabilityType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getCapability called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isNumber('capabilityType', capabilityType);\n\n    const val = this._getCapability(capabilityType);\n    if (typeof val === 'boolean') {\n      return SDTField.create(SDTFieldType.BOOL, val);\n    }\n    if (typeof val === 'number') {\n      return SDTField.create(SDTFieldType.INT64, val);\n    }\n    if (typeof val === 'string') {\n      return SDTField.create(SDTFieldType.STRING, val);\n    }\n\n    return null;\n  }\n\n  _getCapability(capabilityType) {\n    const caps = this._capabilities;\n    if (!caps) return null;\n\n    const value = caps[capabilityType];\n    return (value === undefined) ? null : value;\n  }\n\n  /**\n   * Returns the session's state. This is a third-choice method to determine session\n   * state; the first is notifications on FSM transitions, and the second choice is\n   * the finer-grained states of the FSM that are used in this mapping.\n   *\n   * @returns {SessionState} The current state of the session.\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * @internal\n   */\n  getSessionState() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getSessionState called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sessionStateName = this.getFSMState();\n    switch (sessionStateName) {\n      case SessionStateName.FULLY_CONNECTED:\n        return SessionState.CONNECTED;\n      case SessionStateName.DISCONNECTING:\n        return SessionState.DISCONNECTING;\n      case SessionStateName.DISCONNECTED:\n        return SessionState.DISCONNECTED;\n      case SessionStateName.SESSION_ERROR:\n        return SessionState.SESSION_ERROR;\n      case SessionStateName.CONNECTING:\n      case SessionStateName.WAITING_FOR_INTERCONNECT_TIMEOUT:\n      case SessionStateName.WAITING_FOR_DNS:\n      case SessionStateName.WAITING_FOR_TRANSPORT_UP:\n      case SessionStateName.WAITING_FOR_SESSION_UP:\n      case SessionStateName.WAITING_FOR_LOGIN:\n      case SessionStateName.WAITING_FOR_P2PINBOX_REG:\n      case SessionStateName.WAITING_FOR_PUBFLOW:\n      case SessionStateName.REAPPLYING_SUBSCRIPTIONS:\n        return SessionState.CONNECTING;\n      default:\n        {\n          // State names unaccounted for --\n          // WAITING_FOR_SUBCONFIRM\n          // WAITING_FOR_CAN_ACCEPT_DATA\n          // DISCONNECTING_FLOWS\n          // FLUSHING_TRANSPORT\n          // DESTROYING_TRANSPORT\n          // RECONNECTING\n          // TRANSPORT_FAIL\n          //\n          // Alternatively, we could use StateMachine#isStateActive on key parent states,\n          // instead of having to enumerate all child states.ant\n          const { LOG_INFO } = this.logger;\n          LOG_INFO(`Unmapped session state ${SessionStateName.describe(sessionStateName)}`);\n          return null;\n        }\n    }\n  }\n\n  /**\n   * Gets the fine grained state name from the session FSM.\n   * @returns {solace.SessionStateName} The FSM state name\n   * @private\n   */\n  getFSMState() {\n    return this._sessionFSM.getCurrentStateName();\n  }\n\n  /**\n   * Creates a {@link solace.CacheSession} object that uses this Session to service its\n   * cache requests.\n   *\n   * It should be disposed when the application no longer requires a CacheSession, by calling\n   * {@link solace.CacheSession#dispose}.\n   *\n   * @param {solace.CacheSessionProperties} properties The properties for the cache session.\n   *\n   * @returns {solace.CacheSession} The newly created cache session.\n   *\n   * @throws {solace.OperationError} if a CacheSession is already associated with this Session.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  createCacheSession(properties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createCacheSession called.');\n    return new CacheSession(properties, this, {\n      // bind instead of arrow func for varargs\n      // due to bublé transpiler bug\n      incStat: this._sessionFSM.incStat.bind(this._sessionFSM),\n    });\n  }\n\n  /**\n   * Creates a {@link solace.MessageConsumer} to receive Guaranteed Messages in this Session.\n   *\n   * Consumer characteristics and behavior are defined by properties. The consumer properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.MessageConsumerProperties};\n   * other property names are ignored. If the Message Consumer creation\n   * specifies a non-durable endpoint,\n   * {@link solace.QueueProperties} can be used to change the default properties on the\n   * non-durable endpoint. Any values not supplied are set to default values.\n   *\n   * When the consumer is created, a consumer object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the consumer) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The following\n   * must be true in order to create a MessageConsumer:\n   *  * The transport protocol list does not contain any HTTP transport protocols. See\n   *    {@link solace.SessionProperties#transportProtocol} and\n   *    {@link solace.FactoryProfile#cometEnabled}\n   *  * The Solace Messaging Router must support Guaranteed Messaging\n   *\n   * @method solace.Session#createMessageConsumer\n   * @param {solace.MessageConsumerProperties|Object} consumerProperties The properties for the\n   *    consumer.\n   * @returns {solace.MessageConsumer} The newly created Message Consumer.\n   * @throws {solace.OperationError} when Guaranteed Message Consume is not\n   *    supported on this session.\n   * @target browser\n   */\n  /**\n   * Creates a {@link solace.MessageConsumer} to receive Guaranteed Messages in this Session.\n   *\n   * Consumer characteristics and behavior are defined by properties. The consumer properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.MessageConsumerProperties};\n   * other property names are ignored. If the Message Consumer creation\n   * specifies a non-durable endpoint,\n   * {@link solace.QueueProperties} can be used to change the default properties on the\n   * non-durable endpoint. Any values not supplied are set to default values.\n   *\n   * When the consumer is created, a consumer object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the consumer) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The Solace\n   * Messaging Router must support Guaranteed Messaging.\n   *\n   * @method solace.Session#createMessageConsumer\n   * @param {solace.MessageConsumerProperties|Object} consumerProperties The properties for the\n   *    consumer.\n   * @returns {solace.MessageConsumer} The newly created Message Consumer.\n   * @throws {solace.OperationError} if Guaranteed Message Consume is not supported on this session.\n   * @target node\n   */\n  createMessageConsumer(consumerProperties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createMessageConsumer called.');\n    if (this._adDisabledReason) {\n      throw new OperationError('Session does not provide MessageConsumer capability',\n                               ErrorSubcode.GM_UNAVAILABLE,\n                               this._adDisabledReason);\n    }\n    if ((consumerProperties !== undefined) && (consumerProperties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('createMessageConsumer - Consumer properties:\\n', consumerProperties);\n    }\n    return this._sessionFSM.createMessageConsumer(consumerProperties);\n  }\n\n  /**\n   * Creates a {@link solace.QueueBrowser} to browse Guaranteed Messages on a specified queue in\n   * this Session.\n   *\n   * Browser characteristics and behavior are defined by properties. The browser properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.QueueBrowserProperties};\n   * other property names are ignored. Any values not supplied are set to default values.\n   *\n   * Delivery restrictions imposed by the queue’s Access type (exclusive or non-exclusive),\n   * do not apply when browsing messages with a Browser.\n   *\n   * When the queue browser is created, a queue browser object is returned to the caller. This is\n   * the object from which events are emitted, and upon which operations (for example, starting and\n   * stopping the browser) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The following\n   * must be true in order to create a QueueBrowser:\n   *  * The transport protocol list does not contain any HTTP transport protocols. See\n   *    {@link solace.SessionProperties#transportProtocol} and\n   *    {@link solace.FactoryProfile#cometEnabled}\n   *  * The Solace Messaging Router must support Guaranteed Messaging\n   *\n   * @method solace.Session#createQueueBrowser\n   * @param {solace.QueueBrowserProperties|Object} browserProperties The properties for the\n   *    browser.\n   * @returns {solace.QueueBrowser} The newly created Queue Browser.\n   * @throws {solace.OperationError} when Guaranteed Messaging is not\n   *    supported on this session.\n   * @target browser\n   */\n  /**\n   * Creates a {@link solace.QueueBrowser} to receive Guaranteed Messages in this Session.\n   *\n   * Browser characteristics and behavior are defined by properties. The properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.QueueBrowserProperties};\n   * other property names are ignored.\n   *\n   * Delivery restrictions imposed by the queue’s Access type (exclusive or non-exclusive),\n   * do not apply when browsing messages with a Browser.\n   *\n   * When the browser is created, a browser object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the browser) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The Solace\n   * Messaging Router must support Guaranteed Messaging.\n   *\n   * @method solace.Session#createQueueBrowser\n   * @param {solace.QueueBrowserProperties|Object} browserProperties The properties for the\n   *    browser.\n   * @returns {solace.QueueBrowser} The newly created Queue Browser.\n   * @throws {solace.OperationError} if Guaranteed Messaging is not supported on this session.\n   * @target node\n   */\n  createQueueBrowser(browserProperties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createQueueBrowser called.');\n    if (this._adDisabledReason) {\n      throw new OperationError('Session does not provide QueueBrowser capability',\n                               ErrorSubcode.GM_UNAVAILABLE,\n                               this._adDisabledReason);\n    }\n    if ((browserProperties !== undefined) && (browserProperties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('createQueueBrowser - Browser properties:\\n', browserProperties);\n    }\n    return this._sessionFSM.createQueueBrowser(browserProperties);\n  }\n\n  /**\n   * Creates a publishing destination from a queue descriptor.\n   *\n   * A MessageConsumer is the only object that has any business\n   * doing this, but it should not be concerned with the internals\n   * which depend on the session.\n   *\n   * @param {AbstractQueueDescriptor|QueueDescriptor} queueDescriptor The consumer's descriptor\n   * @returns {Destination} A destination that publishes to the descriptor.\n   * @memberof Session\n   * @private\n   */\n  createDestinationFromDescriptor(queueDescriptor) {\n    const {\n      DestinationType,\n      Queue,\n      Topic,\n    } = DestinationLib;\n\n    let destinationType = DestinationType.TOPIC;\n    if (queueDescriptor.type === QueueType.QUEUE) {\n      destinationType = queueDescriptor.durable\n        ? DestinationType.QUEUE\n        : DestinationType.TEMPORARY_QUEUE;\n    }\n\n    const name = queueDescriptor.name || null;\n\n    if (queueDescriptor.durable) {\n      assert(name, 'Durable endpoint with generated name is not a valid configuration');\n      const factoryMethod = queueDescriptor.getType() === QueueType.QUEUE\n        ? Queue.createFromLocalName\n        : Topic.createFromName;\n      return factoryMethod(name);\n    }\n\n    return this.createTemporaryDestination(destinationType, name);\n  }\n\n  /**\n   * Creates a temporary destination.\n   * @param {DestinationType} destinationType Type of destination\n   * @param {String} [name] Name if any\n   * @returns {Destination} Temporary destination\n   * @private\n   */\n  createTemporaryDestination(destinationType, name) {\n    const { LOG_TRACE } = this.logger;\n    const { DestinationFromNetwork, DestinationUtil } = DestinationLib;\n    // TRANSPORT_UP is chosen because this is when the session tells subscribers\n    // that they may begin connecting\n    const vrn = this.getSessionProperties().virtualRouterName;\n    if (!this.isCapable(CapabilityType.TEMPORARY_ENDPOINT) ||\n        vrn === null || vrn === undefined || vrn.length === 0) {\n      throw new OperationError(\n        'Attempt to generate temporary destination or endpoint without suitable session',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    // Non-durable case; avoid re-prefixing\n    const localName = name && name.startsWith('#P2P')\n      ? name\n      : DestinationUtil.createTemporaryName(destinationType, vrn, name);\n    LOG_TRACE('Generated name:', localName);\n    return DestinationFromNetwork.createDestinationFromName(localName);\n  }\n\n  /**\n   * @param {solace.SessionEvent} sessionEvent The event to send\n   * @private\n   */\n  sendEvent(sessionEvent) {\n    if (!sessionEvent) return;\n    if (this._disposed) return;\n\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Sending event ${sessionEvent}`);\n    this._eventCallbackInfo.sessionEventCBFunction(this,\n                                                   sessionEvent,\n                                                   this._eventCallbackInfo.userObject);\n  }\n\n  /**\n   * Gets a transport session information string.\n   * This string is informative only, and applications should not attempt to parse it.\n   *\n   * @returns {String} A description of the current session's transport.\n   */\n  getTransportInfo() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getTransportInfo called.');\n    return this._sessionFSM.getTransportInfo();\n  }\n\n  /**\n   * @param {Object} interceptor The transport interceptor to set\n   * @private\n   */\n  injectTransportInterceptor(interceptor) {\n    this._sessionFSM.injectTransportInterceptor(interceptor);\n  }\n\n  /**\n   * @param {solace.SessionOperation} operationEnum the id of the operation\n   * @param {solace.Message} message The message to send\n   * @returns {?String} error message if not allowed; otherwise null\n   * @private\n   */\n  allowOperation(operationEnum, message) {\n    if (!this._sessionFSM) return false;\n    let allow = true;\n    const sessionStateName = this._sessionFSM.getCurrentStateName();\n\n    if (sessionStateName === SessionStateName.DISPOSED) {\n      allow = false;\n    } else if (Check.anything(operationEnum)) {\n      switch (operationEnum) {\n        case SessionOperation.CONNECT:\n          if (sessionStateName !== SessionStateName.NEW &&\n              sessionStateName !== SessionStateName.DISCONNECTED) {\n            allow = false;\n          }\n          break;\n        case SessionOperation.DISCONNECT:\n          if (sessionStateName === SessionStateName.NEW) {\n            allow = false;\n          }\n          break;\n        case SessionOperation.SEND:\n        case SessionOperation.CTRL:\n          allow =\n            ((sessionStateName === SessionStateName.FULLY_CONNECTED) ||\n            (message && (message.getDeliveryMode() !== MessageLib.MessageDeliveryModeType.DIRECT)));\n          break;\n\n        case SessionOperation.QUERY_OPERATION:\n          allow = true;\n          break;\n        default:\n          allow = false;\n      }\n    } else {\n      allow = false;\n    }\n\n    if (allow) {\n      return null;\n    }\n\n    return `Cannot perform operation ${operationEnum} while in state ${sessionStateName}`;\n  }\n\n  /**\n   * @param {smf.ClientCtrlMessage} routerCapabilities The message containing the router caps\n   * @private\n   */\n  updateCapabilities(routerCapabilities) {\n    this._capabilities = routerCapabilities;\n  }\n\n  /**\n   * @param {solace.Message} message The message to send\n   * @private\n   */\n  validateAndSendMessage(message) {\n    // Sanity checks on the message before attempting to send it\n    //  * do we have a destination?\n    const sendDest = message.getDestination();\n    if (Check.nothing(sendDest) || Check.empty(sendDest.getName())) {\n      throw new OperationError('Message must have a valid Destination', ErrorSubcode.TOPIC_MISSING);\n    }\n\n    const senderTimestamp = message.getSenderTimestamp();\n    const noSenderTimestamp = senderTimestamp === null || senderTimestamp === undefined;\n    if (this._sessionProperties.generateSendTimestamps &&\n        (noSenderTimestamp || message.hasAutoSenderTimestamp)) {\n      const now = new Date();\n      message.setSenderTimestamp(now.getTime());\n      message.hasAutoSenderTimestamp = true;\n    }\n    const sequenceNumber = message.getSequenceNumber();\n    const noSequenceNumber = sequenceNumber === null || sequenceNumber === undefined;\n    if (this._sessionProperties.generateSequenceNumber &&\n        (noSequenceNumber || message.hasAutoSequenceNumber)) {\n      message.setSequenceNumber(this._seqNum++);\n      message.hasAutoSequenceNumber = true;\n    }\n    const senderId = message.getSenderId();\n    const noSenderId = senderId === null || senderId === undefined;\n    if (this._sessionProperties.includeSenderId && noSenderId) {\n      message.setSenderId(this._sessionProperties.clientName);\n    }\n\n    // Allow the FSM and its delegates to prepare and send the message\n    // This may mutate the delegates, so we need to validate first\n    // this may throw if the message is guaranteed and the window is closed.\n    // If this returns true, the message can be sent to the transport\n    // (always true for direct messages whne there is a transport). If\n    // this returns false, the message has been prepared and queued for\n    // transport but may not be sent now.\n    this._sessionFSM.prepareAndSendMessage(message);\n  }\n\n  /**\n   * @param {String} correlationId The internal correlation ID for the message\n   * @param {function(...[*])} reqFailedCb The callback on request failure\n   * @param {Number} reqTimeout The request timeout in ms\n   * @param {function(*)} replyRecvdCb The callback on reply received\n   * @param {Object} userObject A user object to pass back to the callback (legacy)\n   * @private\n   */\n  enqueueOutstandingDataReq(correlationId, reqFailedCb, reqTimeout, replyRecvdCb, userObject) {\n    if (Check.none(correlationId)) {\n      return;\n    }\n    const { LOG_TRACE, LOG_ERROR } = this.logger;\n\n    // empty string is valid\n    LOG_TRACE(`Enqueue outstanding data request correlationId=${correlationId}`);\n    const timer = setTimeout(() => {\n      this._sessionFSM.incStat(StatType.TX_REQUEST_TIMEOUT);\n                  // remove request from queue\n      try {\n        const result = delete this._outstandingDataReqs[correlationId];\n        if (!result) {\n          LOG_ERROR(`Cannot delete data request ${correlationId}`);\n        }\n      } catch (e) {\n        LOG_ERROR(`Cannot delete data request ${correlationId}`, e);\n      }\n\n      if (Check.anything(reqFailedCb)) {\n        const requestEvent = SessionEvent.build(RequestEventCode.REQUEST_TIMEOUT,\n                                                'Request timeout',\n                                                correlationId);\n\n        reqFailedCb(this, requestEvent, userObject);\n      }\n    }, reqTimeout || this._sessionProperties.readTimeoutInMsecs);\n\n    const outstandingReq = new OutstandingDataRequest(correlationId,\n                                                      timer,\n                                                      replyRecvdCb,\n                                                      reqFailedCb,\n                                                      userObject);\n    this._outstandingDataReqs[correlationId] = outstandingReq;\n  }\n\n  /**\n   * @param {String} correlationId The internal ID of the request to cancel\n   * @returns {OutstandingDataRequest} The request that was cancelled, if any\n   * @private\n   */\n  cancelOutstandingDataReq(correlationId) {\n    const { LOG_TRACE, LOG_ERROR } = this.logger;\n\n    if (Check.none(correlationId) || !this._outstandingDataReqs) {\n      return null;\n    }\n\n    const req = this._outstandingDataReqs[correlationId];\n    if (req === undefined || req === null) {\n      return null;\n    }\n    LOG_TRACE(`Cancel outstanding data request correlationId=${correlationId}`);\n    if (req.timer) {\n      clearTimeout(req.timer);\n      req.timer = null;\n    }\n\n    try {\n      const result = delete this._outstandingDataReqs[correlationId];\n      if (!result) {\n        LOG_ERROR(`Cannot delete data request ${correlationId}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete data request ${correlationId}`, e);\n    }\n    return req;\n  }\n\n  /**\n   * @private\n   */\n  cleanupSession() {\n    const { LOG_TRACE } = this.logger;\n    if (this._outstandingDataReqs) {\n      LOG_TRACE('Cancel all outstanding data requests');\n      Object.keys(this._outstandingDataReqs).forEach((key) => {\n        const dataReq = this.cancelOutstandingDataReq(key);\n        if (dataReq && dataReq.reqFailedCBFunction) {\n          const requestEvent = SessionEvent.build(RequestEventCode.REQUEST_ABORTED,\n                                                  'Request aborted',\n                                                  key);\n          dataReq.reqFailedCBFunction(this, requestEvent, dataReq.userObject);\n        }\n      });\n    }\n  }\n\n  /**\n   * @param {Message} dataMessageIn The received direct TRmsg\n   * @private\n   */\n  handleDataMessage(dataMessageIn) {\n    const { LOG_TRACE, LOG_INFO } = this.logger;\n    const dataMessage = dataMessageIn;\n    if (this._sessionProperties.generateReceiveTimestamps) {\n      const now = new Date();\n      dataMessage._receiverTimestamp = now.getTime();\n    }\n\n    if (dataMessage.isReplyMessage()) {\n      const correlationId = dataMessage.getCorrelationId();\n      if (Check.anything(correlationId)) {\n        const dataReq = this.cancelOutstandingDataReq(correlationId);\n        if (dataReq !== null) {\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_RECVED);\n          LOG_TRACE('Calling application replyReceivedCallback');\n          dataReq.replyReceivedCBFunction(this, dataMessage, dataReq.userObject);\n          LOG_TRACE('application replyReceivedCallback returns');\n          return;\n        }\n\n        if (correlationId.startsWith(SOLCLIENT_REQUEST_PREFIX)) {\n            // if a reply message doesn't have outstanding request and correlationId\n            // starts with #REQ it is assumed to be a delayed reply and has to be discarded\n          LOG_INFO('DROP: Discard reply message due to missing outstanding request');\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_DISCARD);\n          return;\n        }\n\n        if (correlationId.startsWith(CACHE_REQUEST_PREFIX) &&\n              !(CacheSession && this._messageCallbackInfo.userObject instanceof CacheSession)) {\n          // If it's a cache message, only pass it along if the listener is a cache message\n          // listener. The listener may drop it and increment the DISCARD stat if no\n          // cache session recognizes the reply.\n          LOG_INFO('DROP: Discard cache reply due to no cache session active');\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_DISCARD);\n          return;\n        }\n      }\n    }\n\n    // notify client message callback\n    LOG_TRACE('Calling application messageCallback');\n    this._messageCallbackInfo.messageRxCBFunction(this,\n                                                  dataMessage,\n                                                  this._messageCallbackInfo.userObject);\n    LOG_TRACE('application messageCallback returns');\n  }\n\n  /**\n   * Callback function for subscribe/unsubscribe response\n   * @param {solace.SMPMessage} smpMsg The SMP response to the subscription request\n   * @param {CorrelatedRequest} request The originating request object\n   * @param {Boolean} requestConfirm Whether the user asked for confirmation on the request\n   * @private\n   */\n  handleSubscriptionUpdateResponse(smpMsg, request, requestConfirm) {\n    const response = smpMsg.getResponse();\n    const {\n      responseCode,\n      responseString,\n     } = response;\n    const { correlationKey } = request;\n    // If we don't request confirmation, the router doesn't send one for the OK case,\n    // so we don't need to guard for that.\n    // The router always replies on SUBSCRIPTION_ERROR, so we track whether confirmation\n    // was requested and suppress the reply in certain cases.\n    if (responseCode === 200) {\n      // notify client\n      const sessionEvent = SessionEvent.build(SessionEventCode.SUBSCRIPTION_OK,\n                                              responseString,\n                                              responseCode,\n                                              0,\n                                              correlationKey,\n                                              null);\n      this.sendEvent(sessionEvent);\n    } else {\n      const subscriptionStr = StringUtils.stripNullTerminate(smpMsg.encodedUtf8Subscription);\n      this._sessionFSM.handleSubscriptionUpdateError(responseCode,\n                                                     responseString,\n                                                     subscriptionStr,\n                                                     correlationKey,\n                                                     requestConfirm);\n    }\n  }\n\n\n  /**\n   * Callback function for queue subscribe/unsubscribe response\n   * @param {solace.SMPMessage} smpMsg The SMP response to the subscription request\n   * @param {CorrelatedRequest} request The originating request object\n   * @param {function} callback The callback on response\n   * @private\n   */\n  handleQueueSubscriptionUpdateResponse(smpMsg, request, callback) {\n    const { LOG_TRACE } = this.logger;\n\n    if (!smpMsg) { // reuest timed out.\n      LOG_TRACE('handleQueueSubscriptionUpdateResponse called on timeout.');\n      callback(false, ErrorSubcode.TIMEOUT, 0, 'Timeout');\n      return;\n    }\n\n    const response = smpMsg.getResponse();\n    const {\n      responseCode,\n      responseString,\n     } = response;\n    const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode, responseString);\n    LOG_TRACE('handleQueueSubscriptionUpdateResponse called.', smpMsg);\n    if (responseCode === 200 ||\n      (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT) ||\n      (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND)\n    ) {\n      callback(true, 0, responseCode, responseString);\n    } else {\n      callback(false, errorSubcode, responseCode, responseString);\n    }\n  }\n\n  /**\n   * Callback function for DTE unsubscribe response\n   *\n   * @param {solace.AdMessage} adCtrlMessage The Guaranteed Message Protocol\n   *                           control response to the DTE unsub message\n   * @param {CorrelatedRequest} request The originating request object\n   * @private\n   */\n  handleDTEUnsubscribeResponse(adCtrlMessage, request) {\n    const response = adCtrlMessage.getResponse();\n    const {\n      responseCode,\n      responseString,\n    } = response;\n    const { correlationKey } = request;\n    const eventCode = responseCode === 200\n      ? SessionEventCode.UNSUBSCRIBE_TE_TOPIC_OK\n      : SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR;\n    const subcode = responseCode === 200\n      ? 0\n      : ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                     responseString);\n    this.sendEvent(SessionEvent.build(eventCode,\n                                      responseString,\n                                      responseCode,\n                                      subcode,\n                                      correlationKey\n    ));\n  }\n\n  /**\n   * @param {Number} respCode The returned response code\n   * @param {String} respText The returned response text\n   * @param {String} subscriptionStr The requested topic name\n   * @param {*} correlationKey The user-supplied correlation key\n   * @param {Boolean} requestConfirm Whether confirmation was requested on subscription\n   * @private\n   */\n  handleSubscriptionUpdateError(respCode,\n                                respText,\n                                subscriptionStr,\n                                correlationKey,\n                                requestConfirm) {\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n    if ((errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT &&\n         this._sessionProperties.ignoreDuplicateSubscriptionError) ||\n        (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND &&\n          this._sessionProperties.ignoreSubscriptionNotFoundError)) {\n      if (requestConfirm) {\n        // notify client\n        const sessionEvent = SessionEvent.build(\n          SessionEventCode.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          0,\n          correlationKey,\n          null\n        );\n        this.sendEvent(sessionEvent);\n      }\n    } else {\n      // notify client\n      const sessionEvent = SessionEvent.build(\n        SessionEventCode.SUBSCRIPTION_ERROR,\n        respText,\n        respCode,\n        errorSubcode,\n        correlationKey,\n        `Topic: ${subscriptionStr}`\n      );\n      this.sendEvent(sessionEvent);\n    }\n  }\n\n  /**\n   * @returns {SessionEventCBInfo} The session's event callback\n   * @private\n   */\n  getEventCBInfo() {\n    return this._eventCallbackInfo;\n  }\n\n  /**\n   * @param {SessionEventCBInfo} eventCBInfo The new event callback to set\n   * @private\n   */\n  setEventCBInfo(eventCBInfo) {\n    this._eventCallbackInfo = eventCBInfo;\n  }\n\n  /**\n   * @returns {MessageRxCBInfo} The session's message callback\n   * @private\n   */\n  getMessageCBInfo() {\n    return this._messageCallbackInfo;\n  }\n\n  /**\n   * @param {MessageRxCBInfo} messageCBInfo The new message callback to set\n   * @private\n   */\n  setMessageCBInfo(messageCBInfo) {\n    this._messageCallbackInfo = messageCBInfo;\n  }\n\n  /**\n   * @returns {String} The next correlation tag for this session.\n   * @private\n   */\n  getCorrelationTag() {\n    return this._sessionFSM.getCorrelationTag();\n  }\n\n  /**\n   * Wraps a SessionEventCBInfo or a bare function with an event emitting function.\n   * @param {SessionEventCBInfo|function|undefined} eventCallback The callback to wrap\n   * @returns {SessionEventCBInfo} A SessionEventCBInfo object that handles all callbacks.\n   * @private\n   */\n  wrapEventCallback(eventCallback) {\n    const { LOG_WARN } = this.logger;\n    const eventCallbackInfo = (() => {\n      if (!eventCallback) return null;\n      if (eventCallback.sessionEventCBFunction) return eventCallback;\n      return new SessionEventCBInfo(eventCallback);\n    })();\n    return new SessionEventCBInfo((session, sessionEvent, obj, rfu) => {\n      const { sessionEventCode } = sessionEvent;\n      if (eventCallbackInfo) {\n        try {\n          eventCallbackInfo.sessionEventCBFunction(session, sessionEvent, obj, rfu);\n        } catch (ex) {\n          const error = Object.assign(new OperationError(\n            `Unhandled error in SessionEventRxCBInfo callback on sessionEventCode ${\n              SessionEventCode.describe(sessionEventCode)}`,\n              ErrorSubcode.CALLBACK_ERROR,\n              `On event: ${[sessionEventCode, sessionEvent, obj, rfu]} ${ex}`\n            ), {\n              stack: ex.stack,\n              info:  {\n                event: {\n                  name:          sessionEventCode,\n                  formattedName: `SessionEventCode.${SessionEventCode.describe(sessionEventCode)}`,\n                  args:          [sessionEvent, obj, rfu],\n                },\n                error: ex,\n              },\n            }\n          );\n          LOG_WARN(error.toString(), error.info);\n        }\n      }\n      this.emit(sessionEventCode, sessionEvent);\n    });\n  }\n\n  /**\n   * Wraps a CBInfo or a bare function with an event emitting function.\n   * @param {MessageCBInfo|function|undefined} messageCallback The callback to wrap\n   * @returns {MessageCBInfo} A MessageCBInfo object that handles all callbacks.\n   * @private\n   */\n  wrapMessageCallback(messageCallback) {\n    const { LOG_WARN } = this.logger;\n\n    const messageCallbackInfo = (() => {\n      if (!messageCallback) return null;\n      if (messageCallback.messageRxCBFunction) return messageCallback;\n      return new MessageRxCBInfo(messageCallback);\n    })();\n\n    const formattedName = `SessionEventCode.${SessionEventCode.describe(SessionEventCode.MESSAGE)}`;\n    const buildErrorEvent = (ex, message, object) => Object.assign(\n      new OperationError(`Unhandled error in MessageRxCBInfo callback/handler for ${formattedName}`,\n                         ErrorSubcode.CALLBACK_ERROR),\n      {\n        stack: ex.stack,\n        info:  {\n          event: {\n            name: SessionEventCode.MESSAGE,\n            formattedName,\n            args: [message, object],\n          },\n          error: ex,\n        },\n      });\n\n    return new MessageRxCBInfo((session, message, object) => {\n      if (messageCallbackInfo) {\n        try {\n          messageCallbackInfo.messageRxCBFunction(session, message, object);\n        } catch (ex) {\n          const error = buildErrorEvent(ex, message, object).toString();\n          LOG_WARN(error, error.info, ex);\n        }\n      }\n      try {\n        this.emitDirect(message);\n      } catch (ex) {\n        this.emit('error', buildErrorEvent(ex, message, object));\n      }\n    });\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get adLocallyDisabled() {\n    return !!this._adDisabledReason;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get canConnectConsumer() {\n    if (this.adLocallyDisabled) return false;\n    if (this._capabilities) {\n      return this.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME);\n    }\n    return undefined;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get canConnectPublisher() {\n    if (this.adLocallyDisabled) return false;\n    if (this._capabilities) {\n      return this.isCapable(CapabilityType.GUARANTEED_MESSAGE_PUBLISH);\n    }\n    return undefined;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get disposed() {\n    return this._disposed;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'sessionId': this._sessionFSM && this._sessionFSM.sessionIdHex || '(N/A)',\n      'transport': this.getTransportInfo(),\n      'state':     SessionState.describe(this.getSessionState()),\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.Session = Session;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Effectively a boolean governing TLS downgrade to plain text after authentication.\n * @see {@link solace.SessionProperties#sslConnectionDowngradeTo}\n *\n * @target node\n * @readonly\n * @enum {String}\n * @memberof solace\n * @namespace\n */\nconst SslDowngrade = {\n  /**\n   * @description No downgrade, TLS connection remains encrypted.\n   * @type {String}\n   */\n  NONE:      'NONE',\n  /**\n   * @description TLS connection downgrades to plain text after authentication.\n   * USE WITH CAUTION! Message traffic is not encrypted!\n   */\n  PLAINTEXT: 'PLAIN_TEXT',\n};\n\nmodule.exports.SslDowngrade = Enum.new(SslDowngrade);\n","const { SessionRequestType } = require('./session-request-types');\n\nmodule.exports = {\n  SubscriptionUpdateTimeoutMessages: {\n    [SessionRequestType.ADD_SUBSCRIPTION]:        'Add subscription request timeout',\n    [SessionRequestType.REMOVE_SUBSCRIPTION]:     'Remove subscription request timeout',\n    [SessionRequestType.ADD_P2PINBOX]:            'Add P2P inbox subscription timeout',\n    [SessionRequestType.REMOVE_P2PINBOX]:         'Remove P2P inbox subscription timeout',\n    [SessionRequestType.REMOVE_DTE_SUBSCRIPTION]: 'Remove endpoint topic subscription',\n    default:                                      'Request timeout',\n  },\n};\n","const CodecLib = require('./lib/codec');\nconst { AdProtocolMessage, BinaryMetaBlock, ClientCtrlMessage, KeepAliveMessage, SMPMessage } = require('./lib/message-objects');\nconst { SMFAdProtocolMessageType } = require('./lib/smf-adprotocol-message-types');\nconst { SMFAdProtocolParam } = require('./lib/smf-adprotocol-params');\nconst { SMFClientCtrlMessageType } = require('./lib/smf-client-ctrl-message-types');\nconst { SMFClientCtrlParam } = require('./lib/smf-client-ctrl-params');\nconst { SMFParameterType, SMFExtendedParameterType } = require('./lib/smf-parameter-types');\nconst { SMFProtocol } = require('./lib/smf-protocols');\nconst { SMFSMPMessageType } = require('./lib/smf-smp-message-types');\nconst { SMFSMPMessageTypeFlags } = require('./lib/smf-smp-message-type-flags');\nconst { SMFTransportSessionMessageType } = require('./lib/smf-transport-session-message-types');\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\nmodule.exports.Codec = CodecLib;\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\nmodule.exports.SMFAdProtocolMessageType = SMFAdProtocolMessageType;\nmodule.exports.SMFAdProtocolParam = SMFAdProtocolParam;\nmodule.exports.SMFClientCtrlMessageType = SMFClientCtrlMessageType;\nmodule.exports.SMFClientCtrlParam = SMFClientCtrlParam;\nmodule.exports.SMFParameterType = SMFParameterType;\nmodule.exports.SMFProtocol = SMFProtocol;\nmodule.exports.SMFSMPMessageTypeFlags = SMFSMPMessageTypeFlags;\nmodule.exports.SMFSMPMessageType = SMFSMPMessageType;\nmodule.exports.SMFTransportSessionMessageType = SMFTransportSessionMessageType;\nmodule.exports.SMPMessage = SMPMessage;\nmodule.exports.SMFExtendedParameterType = SMFExtendedParameterType;\n","const SMFLib = require('solclient-smf');\nconst { AdProtocolMessage, SMFParameter } = require('../message-objects');\nconst { Bits, Convert } = require('solclient-convert');\nconst { LOG_DEBUG, LOG_INFO, LOG_ERROR } = require('solclient-log');\nconst { ReplayStartType } = require('solclient-replaystart');\n// const { SMFAdProtocolParam } = require('solclient-smf');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n} = Convert;\n\nfunction parseAdpAt(dataBuf, offset) {\n  if ((offset + 3) > dataBuf.length) {\n    //not enough data\n    LOG_DEBUG('Not enough data to read an ADP message.');\n    return false;\n  }\n  let pos = offset;\n  let onebyte = dataBuf.readUInt8(pos);\n  pos++;\n\n  // var msgRFU = bits(onebyte, 6, 2);\n  const adpVersion = bits(onebyte, 0, 6);\n  let msgLength;\n  let msgType;\n  if (adpVersion < 3) {\n    const twobyte = dataBuf.readUInt16BE(pos);\n    pos += 2;\n    msgType = bits(twobyte, 12, 4);\n    // length in 32 bit words is in the lower 12 bits\n    msgLength = bits(twobyte, 0, 12);\n    // convert length to number of bytes\n    msgLength <<= 2;\n  } else if (adpVersion === 3) {\n    onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    msgType = bits(onebyte, 0, 8);\n    msgLength = dataBuf.readUInt32BE(pos);\n    pos += 4;\n  } else {\n    LOG_ERROR('Found unsupported ADP Version', adpVersion);\n    return false; //unsupported type\n  }\n  //\n  // Verify that the ADP header length does not exceed the entire\n  // contents of the SMF message.\n  if (offset + msgLength > dataBuf.length) {\n    LOG_ERROR(`Invalid Asssured Control Protocol length=${msgLength\n      } exceeds remaining message buffer = ${dataBuf.length - offset}`);\n    return false; // invalid message format\n  }\n  const adpMsg = new AdProtocolMessage(msgType, adpVersion);\n  while (pos < (offset + msgLength)) {\n    onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    const paramUH = bits(onebyte, 6, 2);\n    const paramType = bits(onebyte, 0, 6);\n\n    // Look for and skip padding bytes\n    if (paramType === 0) {\n      continue;\n    }\n    if (pos >= (offset + msgLength)) {\n      LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType} at position =${pos}`);\n      return false; // Assured Control parsing fail\n    }\n    let paramLen = dataBuf.readUInt8(pos);\n    let paramValueLen;\n    pos++;\n    // If paramLen == 0, then this is an extended length format\n    // and there is a 4 byte length following the '0'\n    if (paramLen === 0) {\n      // need at least 5 more bytes in the buffer\n      if (pos + 5 > (offset + msgLength)) {\n        LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType} at position =${pos}`);\n        return false; // Assured Control parsing fail\n      }\n      paramLen = dataBuf.readUInt32BE(pos);\n      pos += 4;\n      paramValueLen = paramLen - 5;\n    } else {\n      paramValueLen = paramLen - 2;\n    }\n    if (paramLen <= 0) {\n      return false; // Assured Control parsing fail\n    }\n    //\n    // make sure there is enough buffer for paramValueLen\n    if (pos + paramValueLen > offset + msgLength) {\n      LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType\n        } length =${paramValueLen} invalid at position =${pos}`);\n      return false; // Assured Control parsing fail\n    }\n    const smfParam = new SMFParameter(paramUH, paramType, null, dataBuf, pos, pos + paramValueLen);\n    adpMsg.addParameter(smfParam);\n    pos += paramValueLen;\n  }\n  return adpMsg;\n}\n\nfunction encAdp0Param(uh, paramtype) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(2)); // length\n  return data.join('');\n}\nfunction encAdp8Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(3)); // length\n  data.push(Convert.int8ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp16Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(4)); // length\n  data.push(Convert.int16ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp32Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(6)); // length\n  data.push(Convert.int32ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp64Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(10)); // length\n  data.push(Convert.int64ToStr(value));\n  return data.join('');\n}\n\n// map of replay start value types to parameter lengths\nconst RSValueLenMap = {};\nRSValueLenMap[ReplayStartType.BEGINNING] = 3; // 2 (TLV) + 1 (replay start type)\nRSValueLenMap[ReplayStartType.DATE] = 11; // 2 (TLV) + 1 (replay start type) + 8 (date value)\nRSValueLenMap[ReplayStartType.RGMID] = 19; //2 (TLV) + 1 (replay start type) + 16 (rgmid value)\n\n// special case for message replay value, a 1 byte type\n// followed by 0 bytes of begining, 8 bytes of date or 16 bytes of rgmid\n// Note replay Start type 0 is handled using encAdp8Param as there is no value\nfunction encAdpReplayParam(uh, paramtype, value) {\n  const data = [];\n  const valType = value.type;\n  const valObj = value.value;\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(RSValueLenMap[valType])); // length\n  data.push(Convert.int8ToStr(valType)); // replay start type, 1 == date, 2 == RGMID\n  switch (valType) {\n    case ReplayStartType.DATE:\n      // encode 64 bit date\n      data.push(Convert.int64ToStr(valObj)); // value is Long type\n      break;\n    case ReplayStartType.RGMID:\n      // encode 128 bit replication group message id\n      // expected value object of\n      // {\n      //   suid (Long),\n      //   messageId (Long),\n      // }\n      data.push(Convert.int64ToStr(valObj.suid)); // get Long suid\n      data.push(Convert.int64ToStr(valObj.messageId)); // get Long messageId\n      break;\n    case ReplayStartType.BEGINNING:\n      // in this case there is no value to encode\n      break;\n    default:\n      // should not happen until there are more replay start type but those\n      // should be handled in a case above\n      break;\n  }\n  return data.join('');\n}\n\nfunction encAdp64AckPairParam(uh, paramtype, min, max) {\n  const data = [];\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(18)); // length\n  data.push(Convert.int64ToStr(min));\n  data.push(Convert.int64ToStr(max));\n  return data.join('');\n}\n\nfunction encAdpUTF8NTParam(uh, paramtype, value) {\n  // value is already UTF8 encoded and null terminated.\n  const data = [];\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n\n  let byte2 = 0;\n  if (value.length <= 253) {\n    byte2 = value.length + 2; // full length of param\n    data.push(Convert.int8ToStr(byte2));\n  } else {\n    byte2 = 0; // extended-length\n    data.push(Convert.int8ToStr(byte2));\n    data.push(Convert.int32ToStr(value.length + 5));\n  }\n  data.push(value);\n  return data.join('');\n}\n\nfunction encAdp(adpMsg) {\n  const paramspace = [];\n  const paramarray = adpMsg.getParameterArray();\n\n  let p;\n  for (p = 0; p < paramarray.length; p++) {\n    const param = paramarray[p];\n    // It's not a flat array, we have gaps!\n    if (param === undefined) {\n      continue;\n    }\n\n    switch (param.getType()) {\n      /*\n       * 8 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.WINDOW:\n      case SMFLib.SMFAdProtocolParam.EP_DURABLE:\n      case SMFLib.SMFAdProtocolParam.ACCESSTYPE:\n      case SMFLib.SMFAdProtocolParam.FLOWTYPE:\n      case SMFLib.SMFAdProtocolParam.EP_RESPECTS_TTL:\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_CTRL_MESSAGE_TYPE:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_STATE:\n      case SMFLib.SMFAdProtocolParam.ACTIVE_FLOW_INDICATION:\n      case SMFLib.SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY:\n      case SMFLib.SMFAdProtocolParam.MAX_REDELIVERY:\n        paramspace.push(encAdp8Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 16 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.EP_BEHAVIOUR:\n        paramspace.push(encAdp16Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 32 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.FLOWID:\n      case SMFLib.SMFAdProtocolParam.TRANSPORT_WINDOW:\n      case SMFLib.SMFAdProtocolParam.EP_ALLOTHER_PERMISSION:\n      case SMFLib.SMFAdProtocolParam.EP_QUOTA:\n      case SMFLib.SMFAdProtocolParam.EP_MAX_MSGSIZE:\n      case SMFLib.SMFAdProtocolParam.GRANTED_PERMISSION:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_ID:\n      case SMFLib.SMFAdProtocolParam.PUBLISHER_ID:\n        paramspace.push(encAdp32Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 64 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDSENT:\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDACKED:\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDRECEIVED:\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_ID:\n      case SMFLib.SMFAdProtocolParam.ENDPOINT_ERROR_ID:\n        paramspace.push(encAdp64Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * Replay start location can be either a 0 bit, 64 bit or 128 bit parameter.\n       */\n      case SMFLib.SMFAdProtocolParam.REPLAY_START_LOCATION:\n        {\n          const replayParamVal = param.getValue();\n          if (undefined === replayParamVal.value) {\n            // replay start location with 0 bit values, type only\n            paramspace.push(encAdp8Param(param.getUh(),\n                                         param.getType(),\n                                         replayParamVal.type));  // start location type 0\n          } else {\n            // replay start location with > 0 bit values, type + value\n            paramspace.push(encAdpReplayParam(param.getUh(), param.getType(), replayParamVal));\n          }\n          break;\n        }\n      /*\n       * application ack\n       */\n      case SMFLib.SMFAdProtocolParam.APPLICATION_ACK:\n        {\n          // Unpack this to multiple parameters\n          const ranges = param.getValue();\n          const uh = param.getUh();\n          const type = param.getType();\n          for (let i = 0; i < ranges.length; ++i) {\n            const range = ranges[i];\n            paramspace.push(encAdp64AckPairParam(uh,\n                                                 type,\n                                                 range[0],\n                                                 range[1]));\n          }\n          break;\n        }\n      /*\n       * string and other variable length parameters\n       */\n      case SMFLib.SMFAdProtocolParam.QUEUENAME:\n      case SMFLib.SMFAdProtocolParam.DTENAME:\n      case SMFLib.SMFAdProtocolParam.TOPICNAME:\n      case SMFLib.SMFAdProtocolParam.FLOWNAME:\n      case SMFLib.SMFAdProtocolParam.SELECTOR:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_NAME:\n        paramspace.push(encAdpUTF8NTParam(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * Transaction Publisher Notify\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY:\n        break;\n      /*\n       * Transaction Publisher Ack\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK:\n        break;\n      /*\n       * Transaction Subscriber Ack\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK:\n        break;\n      /*\n       * No Local Parameter has no data\n       * Cut Through Parameter has no data\n       */\n      case SMFLib.SMFAdProtocolParam.NOLOCAL:\n      case SMFLib.SMFAdProtocolParam.CUT_THROUGH:\n        paramspace.push(encAdp0Param(param.getUh(), param.getType()));\n        break;\n      /*\n       * Application Publisher Acknowledge\n       */\n      case SMFLib.SMFAdProtocolParam.APPLICATION_PUB_ACK:\n        break;\n      default:\n        LOG_INFO('Unrecognized ADProtocol Parameter in Message');\n        break;\n    }\n  }\n\n  const paramdata = paramspace.join('');\n\n  const data = [];\n  if (adpMsg.version === 2) {\n    let threebytes = 0;\n    threebytes = setBits(threebytes, 0, 22, 2); // RFU\n    threebytes = setBits(threebytes, adpMsg.version, 16, 6); // RFU\n    threebytes = setBits(threebytes, adpMsg.msgType, 12, 4); // msgtype\n    // length in 32 bit words means the real length must always be a multiple of 4, so pad as\n    // necessary\n\n    // 4 - how many bytes passed a 4 byte boundary\n    let padBytes = 4 - ((3 + paramdata.length) & 0x3);\n    // calculate the total length, 3 bytes header + params, in 32 bit words\n    const length = (3 + paramdata.length + padBytes) >> 2;\n    threebytes = setBits(threebytes, length, 0, 12);\n    data.push(int24ToStr(threebytes)); // first 3B (RFU, version, msgtype, length)\n    data.push(paramdata);\n\n    if (padBytes === 4) padBytes = 0; // don't add 4 pad bytes\n    while (padBytes > 0) {\n      data.push(int8ToStr(0));\n      padBytes--;\n    }\n  } else if (adpMsg.version === 3) {\n    let twobytes = 0;\n    twobytes = setBits(twobytes, 0, 14, 2); // RFU\n    twobytes = setBits(twobytes, adpMsg.version, 8, 6); // version\n    twobytes = setBits(twobytes, adpMsg.msgType, 0, 8); // msgtype\n    data.push(int16ToStr(twobytes)); // first 2B (RFU, version, msgtype)\n    data.push(int32ToStr(6 + paramdata.length)); //length: 6B header + params\n    data.push(paramdata);\n  } else {\n    LOG_ERROR(`Invalid Version ${adpMsg.version} found while encoding`);\n  }\n\n  return data.join('');\n}\n\nmodule.exports.parseAdpAt = parseAdpAt;\nmodule.exports.encAdp = encAdp;\n","const { ContentSummaryType } = require('./content-summary-types');\nconst { Decode } = require('./decode');\nconst { Encode } = require('./encode');\nconst { ParamParse } = require('./param-parse');\nconst { ParseSMF } = require('./parse-smf');\nconst { Transport } = require('./transport');\n\nmodule.exports.ContentSummaryType = ContentSummaryType;\nmodule.exports.Encode = Encode;\nmodule.exports.Decode = Decode;\nmodule.exports.ParamParse = ParamParse;\nmodule.exports.ParseSMF = ParseSMF;\nmodule.exports.Transport = Transport;\n\n","const { Bits, Convert } = require('solclient-convert');\nconst { ClientCtrlMessage, SMFParameter } = require('../message-objects');\nconst { LOG_ERROR } = require('solclient-log');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr, /*strToInt8,*/\n  int16ToStr, /*strToInt16,*/\n  int32ToStr, /*strToUInt32,*/\n} = Convert;\n\nfunction parseCCAt(dataBuf, offset, payloadLen) {\n  const ccMsg = new ClientCtrlMessage();\n  if (payloadLen < 6 || offset + 6 > dataBuf.length) {\n      // not enough data! Return empty.\n      // This is required because we can get an empty CC payload as a router response\n    return ccMsg;\n  }\n\n  let pos = offset;\n  const twobytes = dataBuf.readUInt16BE(pos);\n  pos += 2;\n    // var uh = bits(twobytes, 15, 1);\n  const version = bits(twobytes, 8, 3);\n  const msgType = bits(twobytes, 0, 8);\n  const len = dataBuf.readUInt32BE(pos);\n  pos += 4;\n\n    // Sanity check: we support ClientCtrl v1\n  if (version !== 1) {\n    LOG_ERROR(`Unsupported ClientCtrl version ${version}`);\n    return false;\n  }\n\n  if (len <= 0 || (offset + len) > dataBuf.length) {\n    return false;\n  }\n\n  ccMsg.msgType = msgType;\n  ccMsg.version = version;\n  while (pos < (offset + len)) {\n    const onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    const paramUh = bits(onebyte, 7, 1);\n    const paramType = bits(onebyte, 0, 7);\n    const paramLen = dataBuf.readUInt32BE(pos);\n    if (paramLen <= 0) {\n      return false; // SMF parsing fail\n    }\n\n    pos += 4;\n    const paramValueLen = paramLen - 5;\n    const smfP = new SMFParameter(paramUh, paramType, null, dataBuf, pos, pos + paramValueLen);\n    ccMsg.addParameter(smfP);\n    pos += paramValueLen;\n  }\n  return ccMsg;\n}\n\nfunction encCC(ccMsg) {\n  const paramSpace = [];\n  const paramArray = ccMsg.getParameterArray();\n    /*\n    ClientCtrl Parameter formatting:\n        1 byte uh/type\n        4 bytes length\n        N bytes value\n     */\n  for (let p = 0, n = paramArray.length; p < n; ++p) {\n    const currentParam = paramArray[p];\n      // It's not a flat array, we have gaps!\n    if (currentParam === undefined) {\n      continue;\n    }\n    let currentParamOneByte = 0;\n    currentParamOneByte = setBits(currentParamOneByte, currentParam.getUh(), 7, 1);\n    currentParamOneByte = setBits(currentParamOneByte, currentParam.getType(), 0, 7);\n    paramSpace.push(int8ToStr(currentParamOneByte));\n    paramSpace.push(int32ToStr(currentParam.getValue().length + 5));\n    paramSpace.push(currentParam.getValue());\n  }\n\n  const paramData = paramSpace.join('');\n  let twobytes = 0;\n  twobytes = setBits(twobytes, 0, 15, 1); // uh\n  twobytes = setBits(twobytes, 0, 11, 4); // RFU\n  twobytes = setBits(twobytes, 1, 8, 3); // version\n  twobytes = setBits(twobytes, ccMsg.msgType, 0, 8); // msgtype\n\n  const data = [];\n  data.push(int16ToStr(twobytes)); // first 2B (uh, version, msgtype)\n  data.push(int32ToStr(6 + paramData.length)); // length: 6B header + params\n  data.push(paramData);\n  return data.join('');\n}\n\nmodule.exports.parseCCAt = parseCCAt;\nmodule.exports.encCC = encCC;\n","class ContentSummaryElement {\n  constructor(type = null, position = 0, length = 0) {\n    this.type = type;\n    this.position = position;\n    this.length = length;\n  }\n}\n\nmodule.exports.ContentSummaryElement = ContentSummaryElement;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Type maching SMF encoding value\n * @enum {number}\n * @memberof solace\n * @private\n */\nconst ContentSummaryType = {\n  XML_META:          0,\n  XML_PAYLOAD:       1,\n  BINARY_ATTACHMENT: 2,\n  CID_LIST:          3,\n  BINARY_METADATA:   4,\n};\n\nmodule.exports.ContentSummaryType = Enum.new(ContentSummaryType);\n","const DebugLib = require('solclient-debug');\nconst SolclientDestinationLib = require('solclient-destination');\nconst SolclientMessageLib = require('solclient-message');\nconst SolclientSDTLib = require('solclient-sdt');\nconst { BinaryMetaBlock, KeepAliveMessage } = require('../message-objects');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { Hex, Long } = require('solclient-convert');\nconst { Lazy } = require('solclient-eskit');\nconst { LogFormatter } = require('solclient-log');\nconst { parseAdpAt } = require('./adprotocol');\nconst { parseCCAt } = require('./client-ctrl');\nconst { ParseSMF } = require('./parse-smf');\nconst { PriorityUserCosMap } = require('./priority-user-cos-map');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMP } = require('./smp');\nconst { Transport } = require('./transport');\n\nconst { formatHexString } = Hex;\nconst { lazyValue } = Lazy;\nconst { parseSMFAt } = ParseSMF;\nconst { parseSMPAt } = SMP;\nconst { parseTsSmfMsgAt } = Transport;\n\nconst logger = new LogFormatter('[smf-decode]');\nconst { LOG_DEBUG,\n        LOG_ERROR } = logger;\n\nconst userCosForPriority = lazyValue(() => new PriorityUserCosMap().reverse);\n\nconst BIN_STRUCTYPES = {\n  0x0A: SolclientMessageLib.MessageType.MAP,\n  0x0B: SolclientMessageLib.MessageType.STREAM,\n  0x07: SolclientMessageLib.MessageType.TEXT,\n};\n\nfunction adaptBinaryMetaToMessage(binaryMeta, messageIn) {\n  const message = messageIn;\n  const messageSdt = SolclientSDTLib.Codec.parseSingleElement(binaryMeta.payload, 0);\n\n  if (!(messageSdt && messageSdt.getType() === SolclientSDTLib.SDTFieldType.STREAM)) {\n    return;\n  }\n\n  const sdtstream = messageSdt.getValue();\n  let sdtfield = sdtstream.getNext();\n  if (sdtfield && sdtfield.getType() === SolclientSDTLib.SDTFieldType.BYTEARRAY\n    && sdtfield._value && sdtfield._value.length > 0) {\n    // Preamble byte array is present\n    const preambleByte0 = sdtfield._value.readUInt8(0);\n    if ((preambleByte0 & 0x80) === 0) {\n      // structured message: override default \"BIN\" message type\n      message._messageType = (BIN_STRUCTYPES[preambleByte0 & 0x0F] ||\n                              SolclientMessageLib.MessageType.BINARY);\n    }\n    if (sdtfield._value.length > 1) {\n      const preambleByte1 = sdtfield._value.readUInt8(1);\n      message.setAsReplyMessage((preambleByte1 & 0x80) !== 0);\n    }\n  }\n\n  sdtfield = sdtstream.getNext();\n  if (sdtfield && sdtfield.getType() === SolclientSDTLib.SDTFieldType.MAP) {\n    const sdtMap = sdtfield.getValue();\n    const p = sdtMap.getField('p');\n    const h = sdtMap.getField('h');\n    if (p) {\n      message.setUserPropertyMap(p.getValue());\n    }\n    if (h) {\n      const headerMap = h.getValue();\n      const ci = headerMap.getField('ci');\n      const mi = headerMap.getField('mi');\n      const mt = headerMap.getField('mt');\n      const rt = headerMap.getField('rt');\n      const si = headerMap.getField('si');\n      const sn = headerMap.getField('sn');\n      const ts = headerMap.getField('ts');\n      const ex = headerMap.getField('ex');\n      if (ci) {\n        message.setCorrelationId(ci.getValue());\n      }\n      if (mi) {\n        message.setApplicationMessageId(mi.getValue());\n      }\n      if (mt) {\n        message.setApplicationMessageType(mt.getValue());\n      }\n      if (rt) {\n        message.setReplyTo(rt.getValue());\n      }\n      if (si) {\n        message.setSenderId(si.getValue());\n      }\n      if (sn) {\n        message.setSequenceNumber(sn.getValueNoThrow());\n      }\n      if (ts) {\n        message.setSenderTimestamp(ts.getValue());\n      }\n      if (ex) {\n        message.setGMExpiration(ex.getValue());\n      }\n    }\n  }\n}\n\nfunction adaptSmfToMessage(smfHeader, messageIn, stream, offset) {\n  const message = messageIn;\n  message._setDeliverToOne(!!smfHeader.smf_dto);\n  message._setDeliveryMode(smfHeader.pm_deliverymode ||\n                          SolclientMessageLib.MessageDeliveryModeType.DIRECT);\n  if (smfHeader.pm_tr_topicname_bytes !== null) {\n    message._setDestination(\n      SolclientDestinationLib.DestinationFromNetwork.createDestinationFromBytes(\n        smfHeader.pm_tr_topicname_bytes));\n  }\n  message._setDiscardIndication(!!smfHeader.smf_di);\n  message._setElidingEligible(!!smfHeader.smf_elidingEligible);\n  message._setDMQEligible(!!smfHeader.smf_deadMessageQueueEligible);\n  message._setUserCos(userCosForPriority.value.get(smfHeader.smf_priority));\n  message._setPriority(smfHeader.pm_msg_priority);\n  if (smfHeader.pm_userdata) message._setUserData(smfHeader.pm_userdata);\n\n  message.setRedelivered(!!smfHeader.pm_ad_redelflag || !!smfHeader.pm_ad_flowredelflag);\n\n  message.setFlowId(smfHeader.pm_ad_flowid);\n  message.setGuaranteedMessageId(smfHeader.pm_ad_msgid);\n  message.setGuaranteedPreviousMessageId(smfHeader.pm_ad_prevmsgid);\n  message.setPublisherId(smfHeader.pm_ad_publisherid);\n  message.setPublisherMessageId(smfHeader.pm_ad_publishermsgid);\n  message.setTopicSequenceNumber(smfHeader.pm_ad_topicSequenceNumber);\n  if (message.getDeliveryMode() === SolclientMessageLib.MessageDeliveryModeType.DIRECT) {\n    message.setDeliveryCount(-1);\n  } else if (smfHeader.pm_ad_redeliveryCount) {\n    message.setDeliveryCount(smfHeader.pm_ad_redeliveryCount + 1);\n  } else { // AD, but delivery count header not present\n    // Only the flow knows whether the qEndpointBehaviour DC flag was set,\n    // so it overrides the value before passing it to the user with -1 if it wasn't.\n    message.setDeliveryCount(1);\n  }\n\n  // set the suid for the message if present\n  if (smfHeader.pm_ad_spooler_unique_id) {\n    message._setSpoolerUniqueId(smfHeader.pm_ad_spooler_unique_id);\n  }\n  // set the message id of the replication group message id using\n  // ASSURED_DELIVERY_REPLICATION_MATE_ACK_MESSAGE_ID if present\n  // otherwise use ASSURED_DELIVERY_ACK_MESSAGE_ID if present\n  // otherwise let the Mesage.getReplicationGroupMessageId use\n  // the value set by message.setGuaranteedMessageId\n  if (smfHeader.pm_ad_replication_mate_ack_message_id) {\n    message._setSpoolerMessageId(smfHeader.pm_ad_replication_mate_ack_message_id);\n  } else if (smfHeader.pm_ad_local_spooler_message_id) {\n    message._setSpoolerMessageId(smfHeader.pm_ad_local_spooler_message_id);\n  }\n\n  if (Long.isLong(smfHeader.pm_ad_ttl)) {\n    message.setTimeToLive(smfHeader.pm_ad_ttl.toNumber());\n  } else {\n    message.setTimeToLive(smfHeader.pm_ad_ttl);\n  }\n\n  // Copy content into fields (from input bytes)\n  const payloadOffset = offset + smfHeader.headerLength;\n  const cs = smfHeader.pm_content_summary;\n\n  if (!(cs && cs.length)) {\n    // No content-summary, assume binary attachment\n    message._setBinaryAttachment(smfHeader.payloadLength > 0\n                                ? stream.slice(payloadOffset,\n                                               payloadOffset + smfHeader.payloadLength)\n                                : undefined);\n    return;\n  }\n\n  for (let i = 0, n = cs.length; i < n; ++i) {\n    const currentChunk = cs[i];\n    const chunkBegin = payloadOffset + currentChunk.position;\n    const chunkEnd = payloadOffset + currentChunk.position + currentChunk.length;\n    switch (currentChunk.type) {\n      case ContentSummaryType.BINARY_ATTACHMENT:\n        message._setBinaryAttachment(stream.slice(chunkBegin, chunkEnd));\n        break;\n      case ContentSummaryType.BINARY_METADATA:\n        {\n          const binaryMeta = BinaryMetaBlock.fromEncodedSmf(stream, chunkBegin);\n          message.binaryMetadataChunk = binaryMeta;\n          if (binaryMeta.type === 0) {\n            // we have SDT JMS metadata\n            adaptBinaryMetaToMessage(binaryMeta, message);\n          }\n          break;\n        }\n      case ContentSummaryType.XML_META:\n        message._setXmlMetadata(stream.toString('latin1', chunkBegin, chunkEnd));\n        break;\n      case ContentSummaryType.XML_PAYLOAD:\n        message._setXmlContentInternal(stream.toString('latin1', chunkBegin, chunkEnd));\n        break;\n      default:\n        LOG_ERROR(`Unhandled ContentSummaryType: ${ContentSummaryType.describe(currentChunk.type)}`);\n    }\n  }\n}\n\nfunction decodeCompoundMessage(dataBuf, pos) {\n  const header = parseSMFAt(dataBuf, pos);\n  if (!header) {\n    LOG_DEBUG('decodeCompoundMessage: SMF parsing failed');\n    return null;\n  }\n  // the parser determined there was a full SMF message\n  const payloadPosition = pos + header.headerLength;\n  const payloadLen = header.payloadLength;\n  let message;\n  switch (header.smf_protocol) {\n    case SMFProtocol.TSESSION:\n      message = parseTsSmfMsgAt(dataBuf, payloadPosition, header);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.TRMSG:\n      message = new SolclientMessageLib.Message();\n      message._smfHeader = header;\n      adaptSmfToMessage(header, message, dataBuf, pos);\n      return message;\n\n    case SMFProtocol.ADCTRL:\n      message = parseAdpAt(dataBuf, payloadPosition, payloadLen);\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.CLIENTCTRL:\n      message = parseCCAt(dataBuf, payloadPosition, payloadLen);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.SMP:\n      message = parseSMPAt(dataBuf, payloadPosition);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.KEEPALIVE:\n    case SMFProtocol.KEEPALIVEV2:\n      message = new KeepAliveMessage();\n      message.smfHeader = header;\n      return message;\n\n    default:\n      LOG_ERROR(`Unknown protocol: 0x${formatHexString(header.smf_protocol)}, ` +\n                `dump message content: \\n${\n                DebugLib.Debug.formatDumpBytes(dataBuf.slice(pos,\n                                                             pos + header.messageLength).toString('latin1'),\n                                               true, 0)}`);\n      break;\n  }\n  return null;\n}\n\nconst Decode = {\n  decodeCompoundMessage,\n};\n\nmodule.exports.Decode = Decode;\n","const MessageLib = require('solclient-message');\nconst { Base64, Bits, Convert } = require('solclient-convert');\nconst { BinaryMetaBlock, SMFHeader, SMPMessage } = require('../message-objects');\nconst { Check } = require('solclient-validate');\nconst { ClientCtrlMessage, KeepAliveMessage, AdProtocolMessage } = require('../message-objects');\nconst { Codec: SDTCodec } = require('solclient-sdt');\nconst { ContentSummaryElement } = require('./content-summary-element');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { DestinationType } = require('solclient-destination');\nconst { encAdp } = require('./adprotocol');\nconst { encCC } = require('./client-ctrl');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_TRACE, LOG_INFO } = require('solclient-log');\nconst { ParamParse } = require('./param-parse');\nconst { PriorityUserCosMap } = require('./priority-user-cos-map');\nconst { SDTField, SDTFieldType, SDTMapContainer, SDTStreamContainer } = require('solclient-sdt');\nconst { SMFParameterType, SMFExtendedParameterType } = require('../smf-parameter-types');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMP } = require('./smp');\n\nconst { encode: base64Encode } = Base64;\nconst { set: setBits } = Bits;\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n  int64ToStr,\n} = Convert;\nconst { lazyValue } = Lazy;\nconst {\n  encContentSummary,\n  encDeliveryMode,\n  encLightSMFParam,\n  encodeSMFParam,\n  encodeSMFExtendedParam,\n} = ParamParse;\nconst { encodeSingleElement } = SDTCodec;\nconst { encSmp } = SMP;\n\nconst priorityForUserCos = lazyValue(() => new PriorityUserCosMap().forward);\n\nfunction addContentElementToArrays(csumm, payloadArray, dataChunk, cstype) {\n  if (Check.anything(dataChunk) && dataChunk.length > 0) {\n    const cse = new ContentSummaryElement(cstype, NaN, dataChunk.length);\n    csumm.push(cse);\n    payloadArray.push(dataChunk);\n  }\n}\n\nfunction addToMapIfPresent(headerMap, key, type, value) {\n  if (Check.anything(value)) {\n    headerMap.addField(key, SDTField.create(type, value));\n  }\n}\n\n// Return the binary attachment as string, sets the binaryMetaData on the message.\n// Not nice, but fast.\nfunction adaptMessageToBinaryMeta(message) {\n  let result;\n  // solace header map\n  const headerMap = new SDTMapContainer();\n  addToMapIfPresent(headerMap, 'ci', SDTFieldType.STRING, message.getCorrelationId());\n  addToMapIfPresent(headerMap, 'mi', SDTFieldType.STRING, message.getApplicationMessageId());\n  addToMapIfPresent(headerMap, 'mt', SDTFieldType.STRING, message.getApplicationMessageType());\n  addToMapIfPresent(headerMap, 'rt', SDTFieldType.DESTINATION, message.getReplyTo());\n  addToMapIfPresent(headerMap, 'si', SDTFieldType.STRING, message.getSenderId());\n  addToMapIfPresent(headerMap, 'sn', SDTFieldType.INT64, message.getSequenceNumber());\n  addToMapIfPresent(headerMap, 'ts', SDTFieldType.INT64, message.getSenderTimestamp());\n  addToMapIfPresent(headerMap, 'ex', SDTFieldType.INT64, message.getGMExpiration());\n\n  // container map: solace headers + user prop map\n  const sdtMap = new SDTMapContainer();\n  if (message.getUserPropertyMap()) {\n    sdtMap.addField('p', SDTField.create(SDTFieldType.MAP, message.getUserPropertyMap()));\n  }\n  if (headerMap.getKeys().length > 0) {\n    sdtMap.addField('h', SDTField.create(SDTFieldType.MAP, headerMap));\n  }\n\n  let preambleByte0 = 0;\n  switch (message.getType()) {\n    case MessageLib.MessageType.BINARY:\n      preambleByte0 |= 0x80;\n      break;\n    case MessageLib.MessageType.MAP:\n      preambleByte0 |= 0x0A;\n      result = encodeSingleElement(message._structuredContainer);\n      break;\n    case MessageLib.MessageType.STREAM:\n      preambleByte0 |= 0x0B;\n      result = encodeSingleElement(message._structuredContainer);\n      break;\n    case MessageLib.MessageType.TEXT:\n      preambleByte0 |= 0x07;\n      result = encodeSingleElement(message._structuredContainer);\n      break;\n    default:\n      LOG_INFO(`Unhandled messageType: ${message.getType()}`);\n      break;\n  }\n  const preambleByte1 = message.isReplyMessage() ? 0x80 : 0;\n  const sdtPreamble = SDTField.create(SDTFieldType.BYTEARRAY,\n                                      String.fromCharCode(preambleByte0, preambleByte1));\n\n  // Putting it all together: a stream with the preamble and map\n  const sdtStreamContainer = new SDTStreamContainer();\n  sdtStreamContainer.addField(sdtPreamble);\n  sdtStreamContainer.addField(SDTField.create(SDTFieldType.MAP, sdtMap));\n\n  const binaryMeta = new BinaryMetaBlock();\n  binaryMeta.type = 0;\n  binaryMeta.payload = encodeSingleElement(SDTField.create(SDTFieldType.STREAM,\n                                                           sdtStreamContainer));\n  message.binaryMetadataChunk = binaryMeta;\n  return result;\n}\n\n\nfunction adaptMessageToSmf_nonPayload(message, smfHeaderIn) {\n  const smfHeader = smfHeaderIn;\n  const deliveryMode = message.getDeliveryMode();\n\n  smfHeader.smf_dto = message.isDeliverToOne();\n  smfHeader.pm_deliverymode = deliveryMode;\n  smfHeader.smf_adf = deliveryMode === MessageLib.MessageDeliveryModeType.DIRECT ? 0 : 1;\n  smfHeader.smf_di = message.isDiscardIndication();\n  smfHeader.smf_elidingEligible = message.isElidingEligible();\n  smfHeader.smf_deadMessageQueueEligible = message.isDMQEligible();\n  smfHeader.pm_ad_flowid = message.getFlowId();\n  smfHeader.pm_ad_publisherid = message.getPublisherId();\n  smfHeader.pm_ad_publishermsgId = message.getPublisherMessageId();\n  smfHeader.pm_ad_msgid = message.getGuaranteedMessageId();\n  smfHeader.pm_ad_prevmsgid = message.getGuaranteedPreviousMessageId();\n  smfHeader.pm_ad_ttl = message.getTimeToLive();\n  smfHeader.pm_ad_ackimm = message.isAcknowledgeImmediately();\n  smfHeader.pm_ad_redelflag = message.isRedelivered();\n\n  const dest = message.getDestination();\n  if (dest) {\n    smfHeader.pm_tr_topicname_bytes = dest.getBytes();\n    if (dest.type === DestinationType.QUEUE ||\n        dest.type === DestinationType.TEMPORARY_QUEUE) {\n      const { offset } = dest;\n      smfHeader.pm_queue_len = smfHeader.pm_tr_topicname_bytes.length - offset;\n      smfHeader.pm_queue_offset = offset;\n    }\n  }\n\n  smfHeader.smf_priority = priorityForUserCos.value.get(message.getUserCos());\n\n  if (message.getPriority() !== undefined\n    && typeof message.getPriority() === 'number'\n    && message.getPriority() <= 255\n    && message.getPriority() >= 0) {\n    smfHeader.pm_msg_priority = message.getPriority();\n  } else {\n    smfHeader.pm_msg_priority = null;\n  }\n\n  const userData = message.getUserData();\n  smfHeader.pm_userdata = (userData === null || userData === undefined)\n    ? null\n    : message.getUserData();\n}\n\nfunction adaptMessageToSmf_payloadMemoize(message) {\n  let encodedSdtPayload;\n\n  // Setup user properties, header properties, msgtype\n  if (message.getCorrelationId() ||\n      message.getApplicationMessageId() ||\n      message.getApplicationMessageType() ||\n      message.getReplyTo() ||\n      message.getSenderId() ||\n      message.getSequenceNumber() ||\n      message.getSenderTimestamp() ||\n      message.getUserPropertyMap() ||\n      message.isReplyMessage() ||\n      (message.getType() !== MessageLib.MessageType.BINARY)) {\n    // add SDT binary metadata\n    encodedSdtPayload = adaptMessageToBinaryMeta(message);\n  }\n\n  // Build array of ContentSummaryElements\n  const csumm = [];\n  const payload = [];\n  addContentElementToArrays(csumm, payload,\n                            message.getXmlMetadata(), ContentSummaryType.XML_META);\n  addContentElementToArrays(csumm, payload,\n                            message.getXmlContent(), ContentSummaryType.XML_PAYLOAD);\n  if (encodedSdtPayload) {\n    addContentElementToArrays(csumm, payload,\n                              encodedSdtPayload, ContentSummaryType.BINARY_ATTACHMENT);\n  } else {\n    addContentElementToArrays(csumm, payload,\n                              message._binaryAttachment ? message._binaryAttachment.toString('latin1') : '', ContentSummaryType.BINARY_ATTACHMENT);\n  }\n  const binaryMeta = message.binaryMetadataChunk;\n  if (binaryMeta !== null) {\n    const binaryMetaSMF = binaryMeta.asEncodedSmf();\n    const MAX_24BITS = 16777215;\n    if (binaryMetaSMF.length > MAX_24BITS) {\n      LOG_TRACE(`binary-meta data (${binaryMetaSMF.length}) over the ${MAX_24BITS} limit`);\n      throw new OperationError(`binary-meta data (${binaryMetaSMF.length}) over the ${MAX_24BITS} limit`, ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    } else {\n      addContentElementToArrays(csumm, payload, binaryMetaSMF, ContentSummaryType.BINARY_METADATA);\n    }\n  }\n  message._memoized_csumm = csumm;\n  message._memoized_payload = payload.join(''); \n  message._payload_is_memoized = true;\n  return message._memoized_payload ? message._memoized_payload.length : 0;\n}\n\nfunction adaptMessageToSmf_payloadFinalize(message, smfHeaderIn) {\n  const smfHeader = smfHeaderIn;\n  if (!message._payload_is_memoized) {\n    adaptMessageToSmf_payloadMemoize(message);\n  }\n  const csumm = message._memoized_csumm;\n  const payloadBytes = message._memoized_payload;\n  if (csumm.length === 0 ||\n      (csumm.length === 1 && csumm[0].type === ContentSummaryType.BINARY_ATTACHMENT)) {\n    // NULL or RAW payload (no content-summary)\n    //  Was this here to invert the condition?\n    // LOG_TRACE('NULL or RAW payload (no content-summary)');\n  } else {\n    smfHeader.pm_content_summary = csumm;\n  }\n\n  smfHeader.payload = payloadBytes;\n}\n\nfunction adaptMessageToSmf(message, smfHeaderIn) {\n  adaptMessageToSmf_payloadFinalize(message, smfHeaderIn);\n  adaptMessageToSmf_nonPayload(message, smfHeaderIn);\n}\n\n/**\n * Creates an array of all values that fit in the given number of bits.\n * e.g. bitRange(1) => [0, 1], bitRange(2) => [0, 1, 2, 3]\n * @param {Number} bits The number of bits in the range\n * @returns {Number} All values that fit in that number of bits\n * @private\n */\nconst bitRange = bits => Array.from(Array(Math.pow(2, bits))).map((el, i) => i);\nconst maskValues = (shift, bits) => bitRange(bits).map(val => setBits(0, val, shift, bits));\nconst DI_BIT = maskValues(31, 1);\nconst ELIDING_ELIGIBLE_BIT = maskValues(30, 1);\nconst DTO_BIT = maskValues(29, 1);\nconst ADF_BIT = maskValues(28, 1);\nconst DMQE_BIT = maskValues(27, 1);\nconst VERSION_BITS = maskValues(24, 3);\nconst UH_BITS = maskValues(22, 2);\nconst PROTOCOL_BITS = maskValues(16, 6);\nconst PRIORITY_BITS = maskValues(12, 4);\nconst TTL_BITS = maskValues(0, 8);\nconst QT_OFFSET_BYTES = maskValues(8, 8);\nconst QT_LEN_BYTES = maskValues(0, 8);\n\nfunction encodeSMF(header) {\n  // First 4 bytes: protocol, ttl, etc\n  let w1 = 0;\n\n  // PERF: single expression to make w1 const\n  w1 |= DI_BIT[header.smf_di && 1 || 0];\n  w1 |= ELIDING_ELIGIBLE_BIT[header.smf_elidingEligible && 1 || 0];\n  w1 |= DTO_BIT[header.smf_dto && 1 || 0];\n  w1 |= ADF_BIT[header.smf_adf && 1 || 0];\n  w1 |= DMQE_BIT[header.smf_deadMessageQueueEligible && 1 || 0];\n  w1 |= VERSION_BITS[header.smf_version || 0];\n  w1 |= UH_BITS[header.smf_uh || 0];\n  w1 |= PROTOCOL_BITS[header.smf_protocol || 0];\n  w1 |= PRIORITY_BITS[header.smf_priority || 0];\n  w1 |= TTL_BITS[header.smf_ttl || 0]; // PERF: or set w1 to ttl initially.\n\n  const params = [];\n  // Encode all standard SMF parameters\n  // Topic name and queue/topic offsets are supposed to come first\n  if (header.pm_tr_topicname_bytes) {\n    params.push(encodeSMFParam(2, SMFParameterType.TR_TOPICNAME,\n                               `${header.pm_tr_topicname_bytes}`));\n  }\n  if (header.pm_queue_len) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_QUEUE_NAME_OFFSET,\n                                 int16ToStr(QT_OFFSET_BYTES[header.pm_queue_offset] |\n                                            QT_LEN_BYTES[header.pm_queue_len])));\n  }\n  if (header.pm_topic_len) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_TOPIC_NAME_OFFSET,\n                                 int16ToStr(QT_OFFSET_BYTES[header.pm_topic_offset] |\n                                            QT_OFFSET_BYTES[header.pm_topic_len])));\n  }\n\n  if (header.pm_corrtag !== null && header.pm_corrtag !== undefined) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_CORRELATION,\n                                 int24ToStr(header.pm_corrtag)));\n  }\n  if (header.pm_ad_ackimm) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_ACK_IMMEDIATELY,\n                                 ''));\n  }\n\n  if (header.pm_msg_priority !== null) {\n    params.push(encodeSMFParam(0, SMFParameterType.MESSAGEPRIORITY,\n                               int8ToStr(header.pm_msg_priority)));\n  }\n  if (header.pm_userdata !== null && header.pm_userdata !== '') {\n    params.push(encodeSMFParam(0, SMFParameterType.USERDATA,\n                               header.pm_userdata));\n  }\n  if (header.pm_username) {\n    // do a sloppy base64 (no newlines)\n    params.push(encodeSMFParam(0, SMFParameterType.USERNAME,\n                               base64Encode(header.pm_username)));\n  }\n  if (header.pm_password) {\n    // do a sloppy base64 (no newlines)\n    params.push(encodeSMFParam(0, SMFParameterType.PASSWORD,\n                               base64Encode(header.pm_password)));\n  }\n  if (header.pm_respcode) {\n    // not useful API->router\n    params.push(encodeSMFParam(0, SMFParameterType.RESPONSE,\n                               int32ToStr(header.pm_respcode) + header.pm_respstr));\n  }\n\n  if (header.pm_deliverymode !== null) {\n    params.push(encodeSMFParam(0, SMFParameterType.DELIVERY_MODE,\n                               encDeliveryMode(header.pm_deliverymode)));\n  }\n\n  if (header.pm_ad_msgid !== undefined) {\n    params.push(encodeSMFParam(2, SMFParameterType.ASSURED_MESSAGE_ID,\n                               int64ToStr(header.pm_ad_msgid)));\n    params.push(encodeSMFParam(2, SMFParameterType.ASSURED_PREVMESSAGE_ID,\n                               int64ToStr(header.pm_ad_prevmsgid)));\n  }\n\n  if (header.pm_ad_flowid) {\n    params.push(encodeSMFParam(0, SMFParameterType.ASSURED_FLOWID,\n                               int32ToStr(header.pm_ad_flowid)));\n  }\n\n  // header.pm_ad_redelflag\n  // Ad redelivered\n  if (header.pm_ad_redelflag) {\n    params.push(encodeSMFParam(0, SMFParameterType.ASSURED_REDELIVERED_FLAG, undefined));\n  }\n  // header.pm_ad_flowredelflag\n\n  if (header.pm_ad_ttl !== undefined) {\n    params.push(encodeSMFParam(0, SMFParameterType.AD_TIMETOLIVE,\n                               int64ToStr(header.pm_ad_ttl)));\n  }\n\n  // sequence number?\n\n  if (header.pm_ad_publisherid) {\n    params.push(encodeSMFParam(0, SMFParameterType.PUBLISHER_ID,\n                               int32ToStr(header.pm_ad_publisherid)));\n  }\n\n  if (header.pm_ad_publisherMsgId) {\n    params.push(encodeSMFParam(0, SMFParameterType.PUBLISHER_MSGID,\n                               int64ToStr(header.pm_ad_publisherMsgId)));\n  }\n\n  // transactions: ackmessageid, transactionid, transactionflags\n\n  if (header.pm_content_summary) {\n    params.push(encodeSMFParam(2, SMFParameterType.MESSAGE_CONTENT_SUMMARY,\n                               encContentSummary(header.pm_content_summary)));\n  }\n  // done common SMF parameters!\n\n  // pre-collect and push extended parameters (once we have any)\n\n  let extendedStreamContents = '';\n  let extendedUH = 0;\n\n  if (header.pm_oauth2_access_token) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType.OAUTH2_ACCESS_TOKEN,\n                                                     header.pm_oauth2_access_token);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (header.pm_oidc_id_token) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType.OIDC_ID_TOKEN,\n                                                     header.pm_oidc_id_token);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (header.pm_oauth2_issuer_identifier) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType\n                                                     .OAUTH2_ISSUER_IDENTIFIER,\n                                                     header.pm_oauth2_issuer_identifier);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (extendedStreamContents.length > 0) {\n    params.push(encodeSMFParam(extendedUH,\n                               SMFParameterType.EXTENDED_TYPE_STREAM,\n                               extendedStreamContents));\n  }\n\n  // compute header size and full message size\n  const encodedParams = params.join('');\n  const hdrlen = 12 + encodedParams.length;\n  const msglen = hdrlen + header.payloadLength;\n\n  // ? Already encoded. Why bother?\n  header.setMessageSizes(hdrlen, header.payloadLength);\n\n  return (\n    int32ToStr(w1) +\n    int32ToStr(hdrlen) +\n    int32ToStr(msglen) +\n    encodedParams\n  );\n}\n\nfunction encodeCompoundMessage(msg) {\n  let payload = '';\n  if (msg instanceof MessageLib.Message) {\n    if (!msg.smfHeader) {\n      msg.smfHeader = new SMFHeader(SMFProtocol.TRMSG, 255);\n    }\n    adaptMessageToSmf(msg, msg._smfHeader);\n    payload = msg._smfHeader.payload;\n  } else if (msg instanceof ClientCtrlMessage) {\n    payload = encCC(msg);\n  } else if (msg instanceof SMPMessage) {\n    payload = encSmp(msg);\n  } else if (msg instanceof KeepAliveMessage) {\n    LOG_TRACE('Skipping retrieve payload as there is none in a KeepAliveMessage');\n  } else if (msg instanceof AdProtocolMessage) {\n    payload = encAdp(msg);\n  }\n  const header = msg.smfHeader;\n  header.setPayloadSize(payload.length);\n  const encodedHeader = encodeSMF(header);\n  return encodedHeader + payload;\n}\n\nconst Encode = {\n  encodeCompoundMessage,\n  encodeSMF,\n  adaptMessageToSmf_payloadMemoize,\n};\n\nmodule.exports.Encode = Encode;\n","const MessageLib = require('solclient-message');\nconst { BidiMap, Lazy } = require('solclient-eskit');\nconst { Bits, Convert } = require('solclient-convert');\nconst { ContentSummaryElement } = require('./content-summary-element');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SMFUH } = require('../message-objects');\n\nconst { lazyValue } = Lazy;\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n} = Convert;\n\nconst delModeEnumBidiMap = lazyValue(\n  () => {\n    // Single bidirectional map for lookups. Note that the forward\n    // keys are converted to strings.\n    const source = [\n      [0x00, MessageLib.MessageDeliveryModeType.NON_PERSISTENT],\n      [0x01, MessageLib.MessageDeliveryModeType.PERSISTENT],\n      [0x02, MessageLib.MessageDeliveryModeType.DIRECT],\n    ].map(el => [el[0], el[1]]);\n    return new BidiMap(...source);\n  });\nconst lutDelModeToEnum = lazyValue(() => delModeEnumBidiMap.value.forward);\nconst lutEnumToDelMode = lazyValue(() => delModeEnumBidiMap.value.reverse);\n\n/**\n * SMF TLV Param LUT\n * utTypeMap[uh][paramtype] is the binary prefix for a regular (not LW) TLV\n * parameter with uh and paramtype values as accessed in the array.\n *\n * @private\n */\nconst uhTypeMap = (() => {\n  const result = [];\n  const paramTypeBits = 5;\n  const paramTypeCount = Math.pow(2, paramTypeBits);\n  SMFUH.values.forEach((uh) => {\n    result[uh] = [];\n    for (let i = 0; i < paramTypeCount; ++i) {\n      let byte1 = 0;\n      byte1 = Bits.set(byte1, uh, 6, 2);\n      byte1 = Bits.set(byte1, i, 0, paramTypeBits);\n      result[uh][i] = int8ToStr(byte1);\n    }\n  });\n  return result;\n})();\n\n/**\n * SMF TLV length map LUT\n *\n * lenMap[x] === String.fromCharCode(x)\n *\n * @private\n */\nconst lenMap = (new Array(256).fill(null).map((_, idx) => int8ToStr(idx)));\n\n/**\n * SMF Lightweight Param LUT\n *\n * lightMap[uh][paramtype][len] is the prefix for an SMF LWP\n * with uh, paramtype and len values as accessed in the array.\n *\n * @private\n */\nconst lightMap = (() => {\n  const result = [];\n  const paramTypeBits = 3;\n  const paramTypeCount = Math.pow(2, paramTypeBits);\n  const lenBits = 2;\n  const lenCount = Math.pow(2, lenBits);\n  SMFUH.values.forEach((uh) => {\n    result[uh] = [];\n    for (let i = 0; i < paramTypeCount; ++i) {\n      result[uh][i] = [];\n      for (let j = 0; j < lenCount; ++j) {\n        let byte1 = 0;\n        byte1 = Bits.set(byte1, uh, 6, 2);\n        byte1 = Bits.set(byte1, 1, 5, 1);\n        byte1 = Bits.set(byte1, i, 2, 3);\n        byte1 = Bits.set(byte1, j, 0, 2);\n        result[uh][i][j] = int8ToStr(byte1);\n      }\n    }\n  });\n  return result;\n})();\n\nconst ContentSummaryDecodeMap = [\n  ContentSummaryType.XML_META,\n  ContentSummaryType.XML_PAYLOAD,\n  ContentSummaryType.BINARY_ATTACHMENT,\n  ContentSummaryType.CID_LIST,\n  ContentSummaryType.BINARY_METADATA,\n];\n\nconst ParamParse = {};\n\nParamParse.parseTopicQueueOffsets = function parseTopicQueueOffsets(dataBuf, offset) {\n  const result = [];\n  result[0] = dataBuf.readUInt8(offset);\n  result[1] = dataBuf.readUInt8(offset + 1);\n  return result;\n};\n\nParamParse.parseResponseParam = function parseResponseParam(dataBuf, offset, paramLen) {\n  const result = [];\n  result[0] = dataBuf.readInt32BE(offset);\n  if (paramLen > 4) {\n    result[1] = dataBuf.toString('latin1', offset + 4, offset + paramLen);\n  } else {\n    result[1] = '';\n  }\n  return result;\n};\n\nParamParse.parseDeliveryMode = function parseDeliveryMode(dataBuf, offset) {\n  const delmode = dataBuf.readUInt8(offset);\n  const lookup = lutDelModeToEnum.value.get(delmode);\n  return lookup !== undefined ? lookup : MessageLib.MessageDeliveryModeType.DIRECT;\n};\n\nParamParse.encDeliveryMode = function encDeliveryMode(delmode) {\n  const lut = lutEnumToDelMode.value;\n  const lookup = lut.get(delmode);\n  return int8ToStr(lookup !== undefined ? lookup : MessageLib.MessageDeliveryModeType.DIRECT);\n};\n\nParamParse.parseContentSummary = function parseContentSummary(dataBuf, offset, length) {\n  const elements = [];\n  let cumulativeSize = 0;\n  let pos = offset;\n\n  while (pos < offset + length) {\n    const byte1 = dataBuf.readUInt8(pos);\n    const elementType = Bits.get(byte1, 4, 4);\n    const elementDeclaredLength = Bits.get(byte1, 0, 4);\n    let elementSize = 0;\n    switch (elementDeclaredLength) {\n      case 2:\n        elementSize = dataBuf.readUInt8(pos + 1);\n        break;\n      case 3:\n        elementSize = dataBuf.readUInt16BE(pos + 1);\n        break;\n      case 4:\n        elementSize = dataBuf.readUIntBE(pos + 1, 3);\n        break;\n      case 5:\n        elementSize = dataBuf.readInt32BE(pos + 1);\n        break;\n      default:\n        // Allow 1 and continue;\n        break;\n    }\n\n    if (elementDeclaredLength === 0) {\n      LOG_ERROR('Invalid content summary parameter - pos not advancing');\n      return null;\n    }\n    pos += elementDeclaredLength;\n\n    const cst = ContentSummaryDecodeMap[elementType];\n    if (cst === undefined) {\n      LOG_ERROR(`Unhandled element type ${elementType}`);\n    }\n    const currentElement = new ContentSummaryElement(cst, cumulativeSize, elementSize);\n    elements.push(currentElement);\n    cumulativeSize += elementSize;\n  } // end while loop\n  return elements;\n};\n\nParamParse.encContentSummary = function encContentSummary(contentSummaryArr) {\n  const messageElementDescriptions = [];\n  for (let i = 0, n = contentSummaryArr.length; i < n; ++i) {\n    // a ContentSummaryElement\n    const currentContentSummary = contentSummaryArr[i];\n    let currentSizeStr = '';\n    let firstByte = Bits.set(0, currentContentSummary.type, 4, 4);\n    if (currentContentSummary.length <= 255) {\n      // element length: 2\n      firstByte = Bits.set(firstByte, 2, 0, 4);\n      currentSizeStr = int8ToStr(currentContentSummary.length);\n    } else if (currentContentSummary.length <= 65535) {\n      firstByte = Bits.set(firstByte, 3, 0, 4);\n      currentSizeStr = int16ToStr(currentContentSummary.length);\n    } else if (currentContentSummary.length <= 16777215) {\n      firstByte = Bits.set(firstByte, 4, 0, 4);\n      currentSizeStr = int24ToStr(currentContentSummary.length);\n    } else {\n      firstByte = Bits.set(firstByte, 5, 0, 4);\n      currentSizeStr = int32ToStr(currentContentSummary.length);\n    }\n    messageElementDescriptions.push(int8ToStr(firstByte));\n    messageElementDescriptions.push(currentSizeStr);\n  }\n  return messageElementDescriptions.join('');\n};\n\nParamParse.encodeSMFParam = function encodeSMFParam(uh, paramtype, value) {\n  if (value === undefined) {\n    return uhTypeMap[uh][paramtype] + lenMap[2];\n  }\n  const len = value.length;\n  if (len <= 253) {\n    return uhTypeMap[uh][paramtype] + lenMap[len + 2] + value;\n  }\n  return uhTypeMap[uh][paramtype] + lenMap[0] + int32ToStr(len + 6) + value;\n};\n\n\nParamParse.encodeSMFExtendedParam = function encodeSMFExtendedParam(uh, paramtype, value) {\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, (uh ? 1 : 0), 7, 1);\n  const length = ((value === undefined || value === null) ? 0 : value.length);\n  // Bits 1-3 of an extended param (not named in the spec, lengthMode here)\n  // can indicate value lengths 0-8 bytes, or 1-2 byte variable length.\n  const lengthModeMap = { 0: 0, 1: 1, 2: 2, 4: 3, 8: 4 };\n  let lengthMode = 0;\n  let lengthString = '';\n  // EsLint made me do it.\n  if (Object.prototype.hasOwnProperty.call(lengthModeMap, length)) {\n    lengthMode = lengthModeMap[length];\n  } else if (length < 253) {\n    lengthMode = 5;\n    lengthString = int8ToStr(length + 3);\n  } else if (length < 256 * 256 - 4) {\n    lengthMode = 6;\n    lengthString = int16ToStr(length + 4);\n  } else {\n    LOG_ERROR(`Extended parameter type ${paramtype} is too long (${length} bytes) `);\n    throw new OperationError(`Extended parameter (${paramtype}) over the 2^16 byte limit`,\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n\n  byte1 = Bits.set(byte1, lengthMode, 4, 3);\n  byte1 = Bits.set(byte1, (paramtype >> 8), 0, 4);\n  const byte2 = paramtype & 0xFF;\n  return int8ToStr(byte1) + int8ToStr(byte2) + lengthString + value;\n};\n\nParamParse.encLightSMFParam = function encLightSMFParam(uh, paramtype, value) {\n  return lightMap[uh][paramtype][value.length] + value;\n};\n\nmodule.exports.ParamParse = ParamParse;\n","const Long = require('long');\nconst {\n  LOG_DEBUG,\n  LOG_ERROR,\n  LOG_INFO,\n  LOG_TRACE,\n} = require('solclient-log');\nconst { Base64, Bits } = require('solclient-convert');\nconst { ParamParse } = require('./param-parse');\nconst { SMFHeader } = require('../message-objects');\nconst { SMFParameterType } = require('../smf-parameter-types');\n\nconst {\n  decode: base64Decode,\n} = Base64;\nconst {\n  get: bits,\n} = Bits;\n\nfunction isSMFHeaderAvailable(dataBuf, offset) {\n  const remaining = dataBuf.length - offset;\n  if (remaining < 12) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction isSMFHeaderValid(dataBuf, offset) {\n  if (!isSMFHeaderAvailable(dataBuf, offset)) {\n    return false;\n  }\n  const version = dataBuf.readUInt8(offset) & 0x7;\n  if (version !== 3) {\n    LOG_ERROR(`Invalid smf version in smf header, version=${version}`);\n    return false;\n  }\n  return true;\n}\n\nfunction isSMFAvailable(dataBuf, offset) {\n  if (!isSMFHeaderValid(dataBuf, offset)) {\n    return false;\n  }\n  const remaining = dataBuf.length - offset;\n  const totalLen = dataBuf.readUInt32BE(offset + 8);\n  return (totalLen <= remaining);\n}\n\n/**\n * Parse the Extended Parameters from an Extended Type Stream.\n * See section \"4.2.4 Extended Parameter Types\" in the SMF spec.\n * @param {SMFHeader} smfHeader The SMF header to add the extended parameters to.\n * @param {Buffer} dataBuf The binary data to parse\n * @param {Number} offset The offset in the data to begin parsing (ETS payload)\n * @param {Number} streamLen ETS length\n * @returns {Boolean} false if framing is lost, true otherwise.\n * @private\n */\nfunction parseSMFExtendedStream(smfHeader, dataBuf, offset, streamLen) {\n  /* eslint-disable no-unused-vars */\n  let pos = offset;\n  while (pos < offset + streamLen) {\n    if (pos + 2 > offset + streamLen) {\n      LOG_ERROR('Extended parameter stream had padding inside.');\n      break;\n    }\n\n    // The first 2 bytes of Extended Parameters is fixed (MSB order):\n    // 1 bit UH\n    // 3 bits length mode selector (0-, 1-, 2-, 4-, 8-byte, or variable)\n    // 12 bits Type\n    const byte1 = dataBuf.readUInt8(pos);\n    const byte2 = dataBuf.readUInt8(pos + 1);\n    const pUH = bits(byte1, 7, 1);\n    const lengthMode = bits(byte1, 4, 3);\n    const type = (bits(byte1, 0, 4) << 8) + byte2; //FIGURE OUT WHAT bits does\n    pos += 2;\n    const lengthModeMap = { 0: 0, 1: 1, 2: 2, 3: 4, 4: 8 };\n    let valueLen = 0;\n    // EsLint made me do it\n    if (Object.prototype.hasOwnProperty.call(lengthModeMap, lengthMode)) {\n      valueLen = lengthModeMap[lengthMode];\n    } else if (lengthMode === 5) {\n      // 1-byte variable length value\n      valueLen = dataBuf.readUInt8(pos) - 3;\n      pos++;\n    } else if (lengthMode === 6) {\n      // 2-byte variable length value\n      valueLen = dataBuf.readUInt16BE(pos) - 4;\n      pos += 2;\n    } else {\n      LOG_ERROR(`Invalid length mode ${lengthMode} in Extended Parameter type ${type}`);\n      // We must be reading garbage, disconnect:\n      return false;\n    }\n\n    switch (type) {\n      case SMFParameterType.AD_REDELIVERY_COUNT:\n        smfHeader.pm_ad_redeliveryCount = dataBuf.readUInt32BE(pos);\n        break;\n      case SMFParameterType.AD_SPOOLER_UNIQUE_ID:\n        smfHeader.pm_ad_spooler_unique_id = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                          dataBuf.readUInt32BE(pos),\n                                                          true);\n        break;\n      case SMFParameterType.AD_ACK_MESSAGE_ID:\n        smfHeader.pm_ad_local_spooler_message_id = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                                 dataBuf.readUInt32BE(pos),\n                                                                 true);\n        break;\n      case SMFParameterType.AD_REPL_MATE_ACK_MSGID:\n        smfHeader.pm_ad_replication_mate_ack_message_id =\n           Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                         dataBuf.readUInt32BE(pos),\n                         true);\n        break;\n      default:\n        if (pUH === 0) {\n          LOG_TRACE('Dropping unrecognised extended parameter ' +\n                    `type ${type} value length ${valueLen} UH ${pUH}`);\n        } else {\n          smfHeader.discardMessage = true;\n          LOG_TRACE('Dropping whole message due to unrecognised extended parameter ' +\n                    `type ${type} value length ${valueLen} UH ${pUH}`);\n        }\n        break;\n    }\n    pos += valueLen;\n  }\n  if (pos > offset + streamLen) {\n    LOG_ERROR(`Last extended parameter ran beyond extended stream length by ${pos - (offset + streamLen)}.`);\n  }\n  return true;\n  /* eslint-enable no-unused-vars */\n}\n\n/**\n * Parse SMF in the given data buffer at the supplied offset.\n * @param {Buffer} dataBuf The binary data to parse\n * @param {Number} offset The offset in the data to begin parsing\n * @param {Boolean} readHeaderOnly If true, stop parsing at end of header\n * @returns {SMFHeader|null} The SMF header, if possible\n * @private\n */\nfunction parseSMFAt(dataBuf, offset, readHeaderOnly = false) {\n  if (!isSMFHeaderValid(dataBuf, offset)) {\n    LOG_DEBUG('Valid SMF header not available');\n    return null;\n  }\n  let pos = offset;\n\n  // Reading fixed header block (12 bytes)\n  const word1 = dataBuf.readUInt32BE(pos);\n  const headerLen = dataBuf.readUInt32BE(pos + 4);\n  const word3 = dataBuf.readUInt32BE(pos + 8);\n\n  const smfHeader = new SMFHeader();\n  smfHeader.smf_di = bits(word1, 31, 1);\n  smfHeader.smf_elidingEligible = bits(word1, 30, 1);\n  smfHeader.smf_dto = bits(word1, 29, 1);\n  smfHeader.smf_adf = bits(word1, 28, 1);\n  smfHeader.smf_deadMessageQueueEligible = bits(word1, 27, 1);\n  smfHeader.smf_version = bits(word1, 24, 3);\n  smfHeader.smf_uh = bits(word1, 22, 2);\n  smfHeader.smf_protocol = bits(word1, 16, 6);\n  smfHeader.smf_priority = bits(word1, 12, 4);\n  smfHeader.smf_ttl = bits(word1, 0, 8);\n\n  const payloadLen = word3 - headerLen;\n  if (payloadLen < 0) {\n    LOG_ERROR('SMF parse error: lost framing');\n    return null; // SMF parse error: lost framing\n  }\n  smfHeader.setMessageSizes(headerLen, payloadLen);\n  if (readHeaderOnly) {\n    return smfHeader;\n  }\n  pos += 12;\n\n  // Reading variable-length params\n  const end = offset + headerLen;\n  while (pos < end) {\n    const paramByte1 = dataBuf.readUInt8(pos);\n    ++pos;\n\n    const prmUh = bits(paramByte1, 6, 2);\n    const paramIsLightweight = (bits(paramByte1, 5, 1) !== 0);\n    if (paramIsLightweight) {\n      // LIGHTWEIGHT param\n      const lwpType = bits(paramByte1, 2, 3);\n      const lwpLen = bits(paramByte1, 0, 2) + 1;\n      const lwpValueLen = lwpLen - 1;\n      if (lwpLen <= 0) {\n        LOG_ERROR('Invalid lightweight parameter length');\n        return null; // Invalid parameter\n      }\n\n      switch (lwpType) {\n        case SMFParameterType.LIGHT_CORRELATION:\n          smfHeader.pm_corrtag = dataBuf.readUIntBE(pos, 3);\n          break;\n        case SMFParameterType.LIGHT_TOPIC_NAME_OFFSET:\n          {\n            const parsedQueueOffsets = ParamParse.parseTopicQueueOffsets(dataBuf, pos);\n            smfHeader.pm_queue_offset = parsedQueueOffsets[0];\n            smfHeader.pm_queue_len = parsedQueueOffsets[1];\n            break;\n          }\n        case SMFParameterType.LIGHT_QUEUE_NAME_OFFSET:\n          {\n            const parsedTopicOffsets = ParamParse.parseTopicQueueOffsets(dataBuf, pos);\n            smfHeader.pm_topic_offset = parsedTopicOffsets[0];\n            smfHeader.pm_topic_len = parsedTopicOffsets[1];\n            break;\n          }\n        case SMFParameterType.LIGHT_ACK_IMMEDIATELY:\n          smfHeader.pm_ad_ackimm = !!dataBuf.readUInt8(pos);\n          break;\n        default:\n          if (prmUh === 0) {\n            // Ignore, and silently discard the parameter.\n            LOG_TRACE(`Unhandled LIGHTWEIGHT parameter type: ${lwpType} UH is ${prmUh} discarding parameter.`);\n          } else {\n            // Ignore, and silently discard the entire message.\n            LOG_TRACE(`Unhandled LIGHTWEIGHT parameter type: ${lwpType} UH is ${prmUh} discarding message.`);\n            smfHeader.discardMessage = true;\n          }\n          break;\n      }\n      pos += lwpValueLen;\n    } else {\n      // REGULAR encoded param (including breakout for Extended Type Stream)\n      const pStart = pos;\n      const pType = bits(paramByte1, 0, 5);\n      if (pType === 0) {\n        break; // PADDING (break while: header finished)\n      }\n\n      let pLen = dataBuf.readUInt8(pos);\n      pos++;\n      let pValueLen;\n      if (pLen === 0) {\n        // extended-length parameter (32-bit)\n        // Works for Extended Parameters too.\n        pLen = dataBuf.readUInt32BE(pos);\n        pos += 4;\n        pValueLen = pLen - 6;\n      } else {\n        pValueLen = pLen - 2;\n      }\n\n      if (pLen <= 0) {\n        LOG_ERROR(`Invalid regular parameter length ${pLen}/${pValueLen\n                  } with suspect type ${SMFParameterType.describe(pType)} at parameter at position ${pStart}`);\n        return null; // Invalid parameter\n      }\n\n      switch (pType) {\n        case SMFParameterType.PUBLISHER_ID:\n          smfHeader.pm_ad_publisher_id = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                       dataBuf.readUInt32BE(pos),\n                                                       true);\n          break;\n        case SMFParameterType.PUBLISHER_MSGID:\n          smfHeader.pm_ad_publishermsgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                         dataBuf.readUInt32BE(pos),\n                                                         true);\n          break;\n        case SMFParameterType.MESSAGEPRIORITY:\n          smfHeader.pm_msg_priority = dataBuf.readUInt8(pos);\n          break;\n        case SMFParameterType.USERDATA:\n          smfHeader.pm_userdata = dataBuf.toString('latin1', pos, pos + pValueLen);\n          break;\n        case SMFParameterType.USERNAME:\n          // only useful on API -> router\n          smfHeader.pm_username = base64Decode(dataBuf.toString('latin1', pos, pos + pValueLen));\n          break;\n        case SMFParameterType.PASSWORD:\n          // only useful on API -> router\n          smfHeader.pm_password = base64Decode(dataBuf.toString('latin1', pos, pos + pValueLen));\n          break;\n        case SMFParameterType.RESPONSE:\n          {\n            const parsedResponse = ParamParse.parseResponseParam(dataBuf, pos, pValueLen); //CHECK\n            smfHeader.pm_respcode = parsedResponse[0];\n            smfHeader.pm_respstr = parsedResponse[1];\n            break;\n          }\n        case SMFParameterType.SUB_ID_LIST:\n        case SMFParameterType.GENERIC_ATTACHMENT:\n        case SMFParameterType.BINARY_ATTACHMENT:\n          LOG_INFO('Skipping deprecated parameter type');\n          // deprecated\n          break;\n        case SMFParameterType.DELIVERY_MODE:\n          // DeliveryMode is DIRECT unless the AD flag is set. The\n          // deliveryMode parameter (and all other guaranteed messaging\n          // parameters may be present in demoted messages reflecting how\n          // the message was published.\n          // IF ever solClientJS must support the horror that is cut-through\n          // persistence, then we must defer setting deliveryMode back to\n          // DIRECT until the session decides whether it is a true direct\n          // message or a cut-through direct message.  But until that is\n          // forced upon us, the cleanest place to set deliveryMode is always\n          // here in the parser.\n          if (smfHeader.smf_adf) {\n            smfHeader.pm_deliverymode = ParamParse.parseDeliveryMode(dataBuf, pos);\n          }\n          break;\n        case SMFParameterType.ASSURED_MESSAGE_ID:\n          smfHeader.pm_ad_msgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                dataBuf.readUInt32BE(pos),\n                                                true);\n          break;\n        case SMFParameterType.ASSURED_PREVMESSAGE_ID:\n          smfHeader.pm_ad_prevmsgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                    dataBuf.readUInt32BE(pos),\n                                                    true);\n          break;\n        case SMFParameterType.ASSURED_REDELIVERED_FLAG:\n          smfHeader.pm_ad_redelflag = true;\n          break;\n        case SMFParameterType.AD_TIMETOLIVE:\n          smfHeader.pm_ad_ttl = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                              dataBuf.readUInt32BE(pos),\n                                              true);\n          break;\n        case SMFParameterType.AD_TOPICSEQUENCE_NUMBER:\n          smfHeader.pm_ad_topicSequenceNumber = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                              dataBuf.readUInt32BE(pos),\n                                                              true);\n          break;\n        case SMFParameterType.MESSAGE_CONTENT_SUMMARY:\n          {\n            const contentSummary = ParamParse.parseContentSummary(dataBuf, pos, pValueLen);\n            if (!contentSummary) {\n              LOG_ERROR(`Invalid message content summary at ${pos}, len ${pValueLen}`);\n              return false; // invalid message content summary parameter\n            }\n            smfHeader.pm_content_summary = contentSummary;\n            break;\n          }\n        case SMFParameterType.ASSURED_FLOWID:\n          smfHeader.pm_ad_flowid = dataBuf.readUInt32BE(pos);\n          break;\n        case SMFParameterType.TR_TOPICNAME:\n          // copy bytes. Don't strip null terminator\n          smfHeader.pm_tr_topicname_bytes = dataBuf.toString('latin1', pos, pos + pValueLen);\n          break;\n        case SMFParameterType.AD_FLOWREDELIVERED_FLAG:\n          smfHeader.pm_ad_flowredelflag = true;\n          break;\n        case SMFParameterType.EXTENDED_TYPE_STREAM: {\n          const extSuccess = parseSMFExtendedStream(smfHeader, dataBuf, pos, pValueLen);\n          if (!extSuccess) { return null; }\n          break;\n        }\n        default:\n          if (prmUh === 0) {\n            // Ignore, and silently discard the parameter.\n            LOG_TRACE(`Unhandled SMF parameter type: ${pType} UH is ${prmUh} discarding parameter.`);\n          } else {\n            // Ignore, and silently discard the entire message.\n            LOG_TRACE(`Unhandled SMF parameter type: ${pType} UH is ${prmUh} discarding message.`);\n            smfHeader.discardMessage = true;\n          }\n          break;\n      } // end param type switch block\n\n      pos += pValueLen;\n    } // end (regular param)\n  } // end while\n\n  return smfHeader;\n}\n\nconst ParseSMF = {\n  isSMFHeaderAvailable,\n  isSMFHeaderValid,\n  isSMFAvailable,\n  parseSMFAt,\n};\n\nmodule.exports.ParseSMF = ParseSMF;\n","const MessageLib = require('solclient-message');\nconst { BidiMap } = require('solclient-eskit');\n\nclass PriorityUserCosMap extends BidiMap {\n  constructor() {\n    super([MessageLib.MessageUserCosType.COS1, 0],\n          [MessageLib.MessageUserCosType.COS2, 1],\n          [MessageLib.MessageUserCosType.COS3, 2]);\n  }\n}\n\nmodule.exports.PriorityUserCosMap = PriorityUserCosMap;\n","const { Bits, Convert } = require('solclient-convert');\nconst { LOG_DEBUG, LOG_TRACE } = require('solclient-log');\nconst { SMFSMPMessageType } = require('../smf-smp-message-types');\nconst { SMPMessage } = require('../message-objects');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr,\n  int32ToStr,\n} = Convert;\n\nconst SMP = {};\nSMP.parseSMPAt = function parseSMPAt(dataBuf, offset) {\n  if ((offset + 6) > dataBuf.length) {\n    // not enough data\n    LOG_DEBUG('Not enough data to read an SMP message.');\n    return false;\n  }\n  let pos = offset;\n  const onebyte = dataBuf.readUInt8(pos);\n  pos++;\n\n  // var msgUh = bits(onebyte, 7, 1);\n  const msgType = bits(onebyte, 0, 7);\n  const smpMsg = new SMPMessage();\n\n  if (!(msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n        msgType === SMFSMPMessageType.REMSUBSCRIPTION ||\n        msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n        msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION\n  )) {\n    LOG_DEBUG(`Found unsupported SMP messageType ${msgType}`);\n    return false; // unsupported type\n  }\n\n  LOG_TRACE('SMP.parseSMPAt called, ', dataBuf.toString('latin1'));\n\n  const msgLength = dataBuf.readUInt32BE(pos);\n  pos += 4;\n  if ((offset + msgLength) > dataBuf.length) {\n    // not enough data\n    LOG_DEBUG(`Invalid declared length of ${msgLength}, unable to read SMP message.`);\n    return false;\n  }\n  const msgFlags = dataBuf.readUInt8(pos);\n  pos++;\n\n  smpMsg.msgType = msgType;\n  smpMsg.smpFlags = msgFlags;\n  if (msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n    msgType === SMFSMPMessageType.REMSUBSCRIPTION) {\n    // 6 is the base len (msgLength - 6)\n    smpMsg.encodedUtf8Subscription = dataBuf.toString('latin1', pos, pos + msgLength - 6);\n  } else {\n    const queueLength = dataBuf.readUInt8(pos);\n    pos++;\n    smpMsg.encodedUtf8QueueName = dataBuf.toString('latin1', pos, pos + queueLength);\n    pos += queueLength;\n    const subsLength = dataBuf.readUInt8(pos);\n    pos++;\n    smpMsg.encodedUtf8Subscription = dataBuf.toString('latin1', pos, pos + subsLength);\n    pos += subsLength;\n  }\n  return smpMsg;\n};\n\nSMP.encSmp = function encSmp(smpMsg) {\n  if (!(smpMsg.msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.REMSUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION\n  )) {\n    LOG_DEBUG(`Unsupported SMP message for encoding: ${smpMsg}`);\n    return false;\n  }\n\n  LOG_TRACE('encSmp called.', smpMsg);\n  const data = [];\n  let onebyte = 0;\n  onebyte = setBits(onebyte, 1, 7, 1);\n  onebyte = setBits(onebyte, smpMsg.msgType, 0, 7);\n  data.push(int8ToStr(onebyte));\n  let msgLength = 6 + smpMsg.encodedUtf8Subscription.length;\n  if (smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n    smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION) {\n    msgLength += 2 + smpMsg.encodedUtf8QueueName.length; //both strings have a 1-byte length.\n  }\n  data.push(int32ToStr(msgLength)); // length\n  data.push(int8ToStr(smpMsg.smpFlags));\n  if (smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n    smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION) {\n    //TODO: validate the lengths are < 251 including null termination!\n    // Somewhere else though.\n    data.push(int8ToStr(smpMsg.encodedUtf8QueueName.length));\n    data.push(smpMsg.encodedUtf8QueueName);\n    data.push(int8ToStr(smpMsg.encodedUtf8Subscription.length));\n    data.push(smpMsg.encodedUtf8Subscription);\n  } else {\n    data.push(smpMsg.encodedUtf8Subscription);\n  }\n  return data.join('');\n};\n\nmodule.exports.SMP = SMP;\n","const { Bits, Convert } = require('solclient-convert');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SMFTransportSessionMessageType } = require('../smf-transport-session-message-types');\nconst { TransportSMFMessage } = require('../message-objects');\n\nconst {\n  get: bits,\n} = Bits;\nconst {\n  int16ToStr,\n  int32ToStr,\n} = Convert;\nconst { lazyValue } = Lazy;\n\n// ========== TSSMF ==========\nfunction remains(dataBuf, offset) {\n  return dataBuf.length - offset;\n}\n\nfunction parseTsSmfHdrAt(dataBuf, offset, smfheader) {\n  let pos = offset;\n  if (remains(dataBuf, pos) < 10) {\n    LOG_ERROR('TsSmf parse failed: not enough data, expected at least 10B');\n    return false;\n  }\n\n  const transportSMFMessage = new TransportSMFMessage();\n  transportSMFMessage.smfHeader = smfheader;\n  const twobyte = dataBuf.readUInt16BE(pos);\n  pos += 2;\n  transportSMFMessage.uh = bits(twobyte, 15, 1);\n  transportSMFMessage.messageType = bits(twobyte, 8, 7);\n  const tsHdrLen = bits(twobyte, 0, 8);\n  transportSMFMessage.tsHeaderLength = tsHdrLen;\n  transportSMFMessage.sessionId = dataBuf.toString('latin1', pos, pos + 8);\n  pos += 8;\n\n  if (transportSMFMessage.messageType ===\n      SMFTransportSessionMessageType.CREATE_RESP) {\n    // parse extra chunk: routerTag\n    const rtrTagLen = dataBuf.readUInt8(pos);\n    pos++;\n    if (remains(dataBuf, pos) < rtrTagLen) {\n      LOG_ERROR(`TsSmf parse failed: not enough data for RouterTag, expected ${rtrTagLen}B`);\n      return false;\n    }\n    transportSMFMessage.routerTag = dataBuf.toString('latin1', pos, pos + rtrTagLen);\n    pos += rtrTagLen;\n  }\n\n  // FFWD any remaining TsSmf padding?\n  pos = offset + tsHdrLen;\n\n  // Length of encapsulated message payload:\n  // the SMF msg payload length - bytes consumed in TsSmf\n\n  if (smfheader.payloadLength === 0xffffffff) {\n    // special \"streaming\" unknown-length header\n    transportSMFMessage.payloadLength = smfheader.payloadLength;\n  } else {\n    transportSMFMessage.payloadLength = smfheader.payloadLength - tsHdrLen;\n  }\n  return transportSMFMessage; // Header with no payload field\n}\n\n// Generates an SMF header up to, but not including the the total length\n// This is fixed for all client generated transport session messages\nconst tsHeaderPreLength = lazyValue(() => (\n  int32ToStr(0x03140001) +  // SMF version, TransportSession, TTL\n  int32ToStr(12)            // Header length\n));\n\nconst tsDestroyHeaderPreSid = lazyValue(() => (\n  tsHeaderPreLength.value + // Header up to the message length field\n  int32ToStr(22) +          // Total length\n  int16ToStr(0x820a)        // msgType(destroy), length\n));\n\nconst tsCreateHeader = lazyValue(() => (\n  tsHeaderPreLength.value + // Header up to the message length field\n  int32ToStr(22) +          // Total length\n  int16ToStr(0x800a) +      // msgType(create), length\n  int32ToStr(0) +           // Session ID (first half)\n  int32ToStr(0)             // Session ID (second half)\n));\n\nconst tsDataTokenPreSid = lazyValue(() => (\n  int32ToStr(0x03940001) +\n  int32ToStr(12) +\n  int32ToStr(22) +\n  int16ToStr(0x850a)\n));\n\nconst tsDataStreamTokenPreSid = lazyValue(() => (\n  int32ToStr(0x03940001) +\n  int32ToStr(12) +\n  int32ToStr(24) +\n  int16ToStr(0x860c)\n));\n\n// Generate a full Transport Session Create header\nfunction genTsCreateHeader() {\n  return tsCreateHeader.value;\n}\n\n// Generate a full Transport Session Destroy header\nfunction genTsDestroyHeader(sid) {\n  return (\n    tsDestroyHeaderPreSid.value +\n    sid                       // Session ID\n  );\n}\n\n// Generate a data token message\nfunction genTsDataTokenMsg(sid) {\n  return (\n    tsDataTokenPreSid.value +\n    sid\n  );\n}\n\n// Generate a STREAMING data token message\nfunction genTsDataStreamTokenMsg(sid, paddingBytes) {\n  return (\n    tsDataStreamTokenPreSid.value +\n    sid +\n    ((paddingBytes && paddingBytes > 0) ? int16ToStr(paddingBytes) : int16ToStr(0x0000))\n  );\n}\n\nfunction genTsDataMsgHeaderParts(sid) {\n  return [\n    (int32ToStr(0x03940001) + int32ToStr(12)),\n    (int16ToStr(0x840a) + sid),\n  ];\n}\n\nfunction parseTsSmfMsgAt(dataBuf, offset, smfheader) {\n  const transportSMFMessage = parseTsSmfHdrAt(dataBuf, offset, smfheader);\n  if (!transportSMFMessage) {\n    return null;\n  }\n\n    // need to FF to pos\n  const pos = offset + transportSMFMessage.tsHeaderLength;\n\n    // Length of encapsulated message payload:\n    // the SMF msg payload length - bytes consumed in TsSmf\n  if (remains(dataBuf, pos) < transportSMFMessage.payloadLength) {\n    LOG_ERROR(`Couldn't read full encapsulated TsSmf payload, expected ${transportSMFMessage.payloadLength}B`);\n    return null;\n  }\n\n  transportSMFMessage.payload =\n                            dataBuf.slice(pos, pos + transportSMFMessage.payloadLength);\n  return transportSMFMessage;\n}\n\nconst Transport = {\n  genTsCreateHeader,\n  genTsDestroyHeader,\n  genTsDataTokenMsg,\n  genTsDataStreamTokenMsg,\n  genTsDataMsgHeaderParts,\n  parseTsSmfHdrAt,\n  parseTsSmfMsgAt,\n};\n\nmodule.exports.Transport = Transport;\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { BaseMessage } = require('./base-message');\nconst { Convert, Long } = require('solclient-convert');\nconst { DestinationType } = require('solclient-destination');\nconst { LOG_TRACE } = require('solclient-log');\nconst { OperationError } = require('solclient-error');\nconst { QueueAccessType,\n        QueueDiscardBehavior } = require('solclient-queue');\nconst { QueuePermissions, QueueType } = require('solclient-queue');\nconst { ReplayStartType } = require('solclient-replaystart');\nconst { SMFAdProtocolMessageType } = require('../smf-adprotocol-message-types');\nconst { SMFAdProtocolParam } = require('../smf-adprotocol-params');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMFUH } = require('./smf-uh');\nconst { StringUtils } = require('solclient-util');\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\nconst {\n  strToInt8,\n  strToInt16,\n  strToUInt32,\n  strToUInt64,\n} = Convert;\n\nconst bUInt8 = BufferImpl.prototype.readUInt8;\nconst bUInt16BE = BufferImpl.prototype.readUInt16BE;\nconst bUInt32BE = BufferImpl.prototype.readUInt32BE;\nconst bUInt64BE = function bUInt64BE(pos) { // invoked with \"this\" as the buffer.\n  return Long.fromBits(this.readUInt32BE(pos + 4), this.readUInt32BE(pos), true);\n};\n\nconst {\n  nullTerminate,\n  stripNullTerminate,\n} = StringUtils;\n\n// QUEUENAME/TOPICNAME\nconst EndpointTypeToParam = {\n  [DestinationType.TOPIC]: SMFAdProtocolParam.DTENAME,\n  [DestinationType.QUEUE]: SMFAdProtocolParam.QUEUENAME,\n};\n\n//Same as above, but for CREATE.\nconst QueueDescriptorTypeToParam = {\n  [QueueType.TOPIC_ENDPOINT]: SMFAdProtocolParam.DTENAME,\n  [QueueType.QUEUE]:          SMFAdProtocolParam.QUEUENAME,\n};\n\nconst QUEUE_PERMISSIONS_TO_BITS = {\n  [QueuePermissions.NONE]:         0x0000,\n  [QueuePermissions.READ_ONLY]:    0x0001,\n  [QueuePermissions.CONSUME]:      0x0003,\n  [QueuePermissions.MODIFY_TOPIC]: 0x0007,\n  [QueuePermissions.DELETE]:       0x000f,\n};\n\nconst ACCESS_TYPE_INT_TO_ENUM = {\n  0x01: QueueAccessType.EXCLUSIVE,\n  0x02: QueueAccessType.NONEXCLUSIVE,\n};\n\nconst ACCESS_TYPE_ENUM_TO_BITS = {\n  [QueueAccessType.EXCLUSIVE]:    0x01,\n  [QueueAccessType.NONEXCLUSIVE]: 0x02,\n};\n\nconst DISCARD_ENUM_TO_VALUE = {\n  [QueueDiscardBehavior.NOTIFY_SENDER_OFF]: 0x01,\n  [QueueDiscardBehavior.NOTIFY_SENDER_ON]:  0x02,\n};\n\nfunction addQueueProperties(message, queueProperties, skipAccessType = false) {\n  if (!queueProperties) {\n    return;\n  }\n  const {\n    accessType,\n    discardBehavior,\n    maxMessageRedelivery,\n    maxMessageSize,\n    permissions,\n    quotaMB,\n    respectsTTL,\n  } = queueProperties;\n\n\n  // [AssuredCtrl AllOthersPermissions Parameter]\n  if (permissions && (QUEUE_PERMISSIONS_TO_BITS[permissions] !== undefined)) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_ALLOTHER_PERMISSION,\n      QUEUE_PERMISSIONS_TO_BITS[permissions]\n    ));\n  }\n\n  //AccessType\n  if (!skipAccessType &&\n    accessType !== undefined &&\n    ACCESS_TYPE_ENUM_TO_BITS[accessType] !== undefined\n  ) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.ACCESSTYPE,\n      ACCESS_TYPE_ENUM_TO_BITS[accessType]\n    ));\n  }\n\n  // [AssuredCtrl EndpointQuotaMB Parameter]\n  if (quotaMB !== null && quotaMB !== undefined) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_QUOTA,\n      quotaMB\n    ));\n  }\n\n  // [AssuredCtrl EndpointMaxMessageSize Parameter]\n  if (maxMessageSize !== undefined && maxMessageSize !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_MAX_MSGSIZE,\n      maxMessageSize\n    ));\n  }\n\n  let flags = 0x0000;\n  if (discardBehavior !== null && discardBehavior !== undefined) {\n    const discardBehaviorValue = DISCARD_ENUM_TO_VALUE[discardBehavior];\n    flags |= (discardBehaviorValue << 12);\n    // Omit cutThrough, << 14\n  }\n  if (flags /* is nonzero */) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_BEHAVIOUR,\n      flags\n    ));\n  }\n\n  if (maxMessageRedelivery !== undefined && maxMessageRedelivery !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.MAX_REDELIVERY,\n      maxMessageRedelivery\n    ));\n  }\n\n  if (respectsTTL !== undefined && respectsTTL !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_RESPECTS_TTL,\n      (respectsTTL ? 0x1 : 0x0)\n    ));\n  }\n}\n\n/**\n * @internal\n */\nclass AdProtocolMessage extends BaseMessage {\n  /**\n   * @constructor\n   * @param {SMFAdProtocolMessageType} [messageType=SMFAdProtocolMessageType.OPENPUBFLOW]\n   *  The type of message\n   * @param {Number} [version=3] The AD protocol version for the message\n   * @extends {BaseMessage}\n   * @memberof solace\n   * @internal\n   */\n  constructor(messageType = 0, version = 3) {\n    super(new SMFHeader(SMFProtocol.ADCTRL, 1));\n\n    // Field: msgtype\n    this.msgType = messageType;\n\n    // Field: version\n    this.version = version;\n  }\n\n  _readParameter(paramtype, decoder = null, bufMethod = null) {\n    const param = this.getParameter(paramtype);\n    if (param === undefined) return undefined;\n    if (bufMethod && param.getBuffer()) {\n      return bufMethod.call(param.getBuffer(), param.getBegin());\n    }\n    const value = param.getValue();\n    return decoder ? decoder(value) : value;\n  }\n\n  /**\n   * @returns {?QueueAccessType} The access type, if present\n   */\n  getAccessType() {\n    const param = this._readParameter(SMFAdProtocolParam.ACCESSTYPE, strToInt8, bUInt8);\n    return ACCESS_TYPE_INT_TO_ENUM[param];\n  }\n\n  /**\n   * @returns {?Boolean} The active flow indication, if present\n   */\n  getActiveFlow() {\n    return this._readParameter(SMFAdProtocolParam.ACTIVE_FLOW_INDICATION, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?QueueDiscardBehavior} The discard behavior for the endpoint, if present\n   */\n  getQueueDiscardBehavior() {\n    const param = this._readParameter(SMFAdProtocolParam.EP_BEHAVIOUR, strToInt16, bUInt16BE);\n    if (param === undefined) {\n      return undefined;\n    }\n    // Get NotifySender flag\n    const masked = (param & 0x3000) >> 12;\n    if (masked === DISCARD_ENUM_TO_VALUE[QueueDiscardBehavior.NOTIFY_SENDER_OFF]) {\n      return QueueDiscardBehavior.NOTIFY_SENDER_OFF;\n    } else if (masked === DISCARD_ENUM_TO_VALUE[QueueDiscardBehavior.NOTIFY_SENDER_ON]) {\n      return QueueDiscardBehavior.NOTIFY_SENDER_ON;\n    }\n    return undefined;\n  }\n  /**\n   * @returns {?Boolean} The Delivery Count setting of the endpoint, if present\n   */\n  getEndpointDeliveryCountSent() {\n    const param = this._readParameter(SMFAdProtocolParam.EP_BEHAVIOUR, strToInt16, bUInt16BE);\n    // Get NotifySender flag\n    const masked = (param & 0x0c00) >> 10;\n    switch (masked) {\n      case 0 :\n        return undefined;\n      case 1 :\n        return false;\n      case 2:\n        return true;\n      default:\n        //TODO: log: invalid flag value.\n        return undefined;\n    }\n  }\n\n  /**\n   * @returns {?Number} The endpoint ID, if present\n   */\n  getEndpointId() {\n    return this._readParameter(SMFAdProtocolParam.ENDPOINT_ID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Boolean} Whether endpoint respects TTL\n   */\n  getRespectsTTL() {\n    const value = this._readParameter(SMFAdProtocolParam.EP_RESPECTS_TTL, strToInt8, bUInt8);\n    if (value === undefined) {\n      LOG_TRACE('respectsTTL missing from response.');\n      return undefined;\n    }\n    LOG_TRACE(`respectsTTL present in response: ${value}`);\n    return !!value;\n  }\n\n  /**\n   * @returns {?String} The router-assigned flow name, if present\n   */\n  getFlowName() {\n    return this._readParameter(SMFAdProtocolParam.FLOWNAME, stripNullTerminate);\n  }\n\n  /**\n   * @returns {?Number} The router-assigned flow ID, if present\n   */\n  getFlowId() {\n    return this._readParameter(SMFAdProtocolParam.FLOWID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} The quota on the endpoint, if present\n   */\n  getQuota() {\n    return this._readParameter(SMFAdProtocolParam.EP_QUOTA, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} The maximum message size of the endpoint, if present\n   */\n  getMaxMsgSize() {\n    return this._readParameter(SMFAdProtocolParam.EP_MAX_MSGSIZE, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?String} The UTF-8 encoded, null terminated endpoint name\n   */\n  getTopicEndpointBytes() {\n    return this._readParameter(SMFAdProtocolParam.DTENAME);\n  }\n\n  /**\n   * @returns {?QueuePermissions} The granted permissions for the flow, if present\n   */\n  getGrantedPermissions() {\n    const permissions =\n      this._readParameter(SMFAdProtocolParam.GRANTED_PERMISSIONS, strToUInt32, bUInt32BE);\n    let result;\n    Object.keys(QUEUE_PERMISSIONS_TO_BITS).forEach((key) => {\n      if (QUEUE_PERMISSIONS_TO_BITS[key] === permissions) {\n        result = key;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * @returns {?QueuePermissions} The permissions for other users for the endpoint, if present\n   */\n  getAllOthersPermissions() {\n    const permissions =\n      this._readParameter(SMFAdProtocolParam.EP_ALLOTHER_PERMISSION, strToUInt32, bUInt32BE);\n    let result;\n    Object.keys(QUEUE_PERMISSIONS_TO_BITS).forEach((key) => {\n      if (QUEUE_PERMISSIONS_TO_BITS[key] === permissions) {\n        result = key;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * @returns {?Long} The last message ID acked, if present\n   */\n  getLastMsgIdAcked() {\n    return this._readParameter(SMFAdProtocolParam.LASTMSGIDACKED,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Long} The last message ID received, if present\n   */\n  getLastMsgIdReceived() {\n    return this._readParameter(SMFAdProtocolParam.LASTMSGIDRECEIVED,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Number} The publisher ID, if present\n   */\n  getPublisherId() {\n    return this._readParameter(SMFAdProtocolParam.PUBLISHER_ID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} Whether we want flow change notifications, if present\n   */\n  getWantFlowChangeNotify() {\n    return !!this._readParameter(SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The Window parameter, if present\n   */\n  getWindow() {\n    return this._readParameter(SMFAdProtocolParam.WINDOW, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The max redelivery parameter, if present\n   */\n  getMaxRedelivery() {\n    return this._readParameter(SMFAdProtocolParam.MAX_REDELIVERY, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The max unacked messages parameter, if present\n   */\n  getMaxUnackedMessages() {\n    return this._readParameter(SMFAdProtocolParam.MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW,\n                               strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Long} The endpointErrorId, if present\n   */\n  getEndpointErrorId() {\n    return this._readParameter(SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Long} The spoolerUniqueId, if present\n   */\n  getSpoolerUniqueId() {\n    return this._readParameter(SMFAdProtocolParam.SPOOLER_UNIQUE_ID,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * Creates a CLOSEPUBFLOW message\n   * @param {Number} flowId The publisher flow to close\n   * @param {Number} correlationTag The correlation tag for the request\n   * @returns {AdProtocolMessage} The newly created message\n   * @internal\n   * @static\n   */\n  static getCloseMessagePublisher(flowId,\n                                  correlationTag) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CLOSEPUBFLOW);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.FLOWID,\n                                          flowId));\n    return message;\n  }\n\n\n  /**\n   * Creates a CREATE message\n   * @param {solace.QueueDescriptor} queueDescriptor The endpoint descriptor for the create request\n   * @param {?solace.QueueProperties} queueProperties The properties for the create request\n   * @param {Number} correlationTag The correlation tag for the request\n   * @returns {AdProtocolMessage} The newly created message\n   * @internal\n   * @static\n   */\n  static getCreate(\n    queueDescriptor,\n    queueProperties,\n    correlationTag\n  ) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CREATE);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    /*\n      {AssuredCtrl QueueName|TopicEndpointName Parameter}\n      {AssuredCtrl Durability Parameter}\n      [AssuredCtrl AllOthersPermission Parameter]\n      [AssuredCtrl AccessType Parameter]\n    [AssuredCtrl EndpointQuotaMB Parameter]\n    [AssuredCtrl EndpointMaxMessageSize Parameter]\n    [AssuredCtrl qEndpointBehaviourFlags Parameter]\n    [AssuredCtrl MaxRedelivery Parameter]\n    */\n\n    // QueueName/TopicEndpointName : different param type for TE vs queue\n    const endpointTypeParam = QueueDescriptorTypeToParam[queueDescriptor.type];\n    if (endpointTypeParam === undefined) throw new OperationError('Unknown destination type');\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      endpointTypeParam,\n      nullTerminate(queueDescriptor.name)\n    ));\n\n\n    // [AssuredCtrl Durability Parameter]\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_DURABLE,\n      queueDescriptor.durable // better be...\n    ));\n\n\n    addQueueProperties(message, queueProperties);\n\n    return message;\n  }\n\n  /**\n   * Returns an AdProtocolMessage that describes a publisher open-flow request.\n   * @static\n   * @param {?Long} lastMsgIdAcked Last message ID acked, if re-opening\n   * @param {?Long} lastMsgIdSent Last message ID sent, if re-opening\n   * @param {Number} windowSize Desired window size\n   * @param {String} flowName Last flow name in use, if re-opening\n   * @param {Number} correlationTag Correlation tag for the request\n   * @returns {solace.AdProtocolMessage} The OPENPUBFLOW message\n   * @internal\n   */\n  static getOpenMessagePublisher(\n            lastMsgIdAcked,\n            lastMsgIdSent,\n            windowSize,\n            flowName,\n            correlationTag) {\n    const adMsg = new AdProtocolMessage(SMFAdProtocolMessageType.OPENPUBFLOW);\n\n    const smfHeader = adMsg.smfHeader;\n    smfHeader.pm_corrtag = correlationTag;\n\n    if (lastMsgIdAcked !== undefined) {\n      adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.LASTMSGIDACKED,\n                                          lastMsgIdAcked));\n    }\n    if (lastMsgIdSent !== undefined) {\n      adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.LASTMSGIDSENT,\n                                          lastMsgIdSent));\n    }\n\n    adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                        SMFAdProtocolParam.WINDOW,\n                                        windowSize));\n\n    adMsg.addParameter(new SMFParameter(SMFUH.IGNORE,\n                                        SMFAdProtocolParam.FLOWNAME,\n                                        flowName || ''));\n\n    LOG_TRACE(`Create open publisher: lastMsgIdAcked=${lastMsgIdAcked} lastMsgIdSent=${lastMsgIdSent} window=${windowSize} flowName=${flowName || '(null)'}`);\n\n    return adMsg;\n  }\n\n  /**\n   * Returns an AdProtocolMessage that describes a subscriber (MessageConsumer) bind request.\n   * @static\n   * @param {solace.QueueDescriptor} queueDescriptor The endpoint descriptor for the bind request\n   * @param {?solace.QueueProperties} queueProperties The properties for the bind request\n   * @param {solace.Destination} endpoint The endpoint for the bind request\n   * @param {?solace.Topic} topicSubscription The topic endpoint\n   * @param {String} correlationTag The correlation tag for the request\n   * @param {Number} windowSize The desired window size\n   * @param {Boolean} [noLocal=false] If true, local publisher messages are not delivered\n   * @param {Boolean} [wantFlowChangeUpdate] default is true if destination is a {solace.Queue}\n   * @param {Long} [lastMsgIdAcked=Long.UZERO] Last message ID acked, if re-binding\n   * @param {Long} [lastMsgIdReceived=Long.UZERO] Last message ID received, if re-binding\n   * @param {Boolean} [browser=false] If true, flow is a queue browser\n   * @param {ReplayStartLocation} [replayStartLocation=undefined] If set messages\n   *         are first retrieved from the replay log before live messages are received.\n   * @param {Long} [endpointErrorId=undefined] Endpoint Error ID identifying the flow\n   *         when rebinding.\n   * @returns {solace.AdProtocolMessage} The BIND message\n   * @internal\n   */\n  static getOpenMessageConsumer(queueDescriptor,\n                                queueProperties,\n                                endpoint,\n                                topicSubscription,\n                                correlationTag,\n                                windowSize,\n                                noLocal,\n                                wantFlowChangeUpdate,\n                                lastMsgIdAcked = Long.UZERO,\n                                lastMsgIdReceived = Long.UZERO,\n                                browser = false,\n                                replayStartLocation = undefined,\n                                endpointErrorId = undefined) {\n    /*\n    QUEUE FLOW                                      TE FLOW\n\n    {SMF Header, protocol=AssuredCtrl ttl=1}        {SMF Header, protocol=AssuredCtrl ttl=1}\n    [Correlation Tag Parameter]                     [Correlation Tag Parameter]\n    {AssuredCtrl Message Header, msgType=Bind}      {AssuredCtrl Message Header, msgType=Bind}\n\n    {AssuredCtrl QueueName Parameter}               {AssuredCtrl TopicEndpointName Parameter}\n    ***                                             {AssuredCtrl TopicName Parameter}\n    [AssuredCtrl Last Message Id Acked Parameter]   ***\n    [AssuredCtrl Last Message Id Recv'd Parameter]  ***\n    {AssuredCtrl Transport Window Size Parameter}   {AssuredCtrl Transport Window Size Parameter}\n    [AssuredCtrl Durability Parameter]              [AssuredCtrl Durability Parameter]\n    [AssuredCtrl Message Selector Parameter]        [AssuredCtrl Message Selector Parameter]\n    [AssuredCtrl FlowType Parameter]                [AssuredCtrl FlowType Parameter]\n    [AssuredCtrl Selector Parameter]                [AssuredCtrl Selector Parameter]\n    [AssuredCtrl AllOthersPermissions Parameter]    [AssuredCtrl AllOthersPermissions Parameter]\n    [AssuredCtrl EndpointQuotaMB Parameter]         [AssuredCtrl EndpointQuotaMB Parameter]\n    [AssuredCtrl EndpointMaxMessageSize Parameter]  [AssuredCtrl EndpointMaxMessageSize Parameter]\n    [AssuredCtrl TransactedSessionId Parameter]     [AssuredCtrl TransactedSessionId Parameter]\n    [AssuredCtrl NoLocal Parameter]                 [AssuredCtrl NoLocal Parameter]\n    [AssuredCtrl wantFlowChangeUpdate Parameter]    ***\n    [AssuredCtrl qEndpointBehaviourFlags Parameter] [AssuredCtrl qEndpointBehaviourFlags Parameter]\n    [AssuredCtrl MaxRedelivery Parameter]           [AssuredCtrl MaxRedelivery Parameter]\n    [AssuredCtrl browser Parameter]                 ***\n    */\n    const durable = queueDescriptor.durable;\n    const endpointBytes = endpoint.bytes;\n    const endpointType = endpoint.type;\n\n    // {SMF Header, protocol=AssuredCtrl ttl=1}        {SMF Header, protocol=AssuredCtrl ttl=1}\n    // [Correlation Tag Parameter]                     [Correlation Tag Parameter]\n    // {AssuredCtrl Message Header, msgType=Bind}      {AssuredCtrl Message Header, msgType=Bind}\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.BIND);\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    // {AssuredCtrl QueueName Parameter}               {AssuredCtrl TopicEndpointName Parameter}\n    const endpointTypeParam = EndpointTypeToParam[endpointType];\n    if (endpointTypeParam === undefined) throw new OperationError('Unknown destination type');\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      endpointTypeParam,\n      endpointBytes\n    ));\n\n    // ***                                             {AssuredCtrl TopicName Parameter}\n    if (topicSubscription) {\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.TOPICNAME,\n        topicSubscription.bytes\n      ));\n    }\n\n    if (endpointType === DestinationType.QUEUE) {\n      //     [AssuredCtrl Last Message Id Acked Parameter]   ***\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.LASTMSGIDACKED,\n        lastMsgIdAcked\n      ));\n      //     [AssuredCtrl Last Message Id Recv'd Parameter]  ***\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.LASTMSGIDRECEIVED,\n        lastMsgIdReceived\n      ));\n    }\n\n    // {AssuredCtrl Transport Window Size Parameter}\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.WINDOW,\n      windowSize\n    ));\n\n    // [AssuredCtrl Durability Parameter]\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_DURABLE,\n      durable\n    ));\n\n    // Omit Message Selector\n    // Omit FlowType, CONSUMER assumed (not BROWSER currently)\n    // Omit TransactedSessionId\n\n    addQueueProperties(message, queueProperties, true);\n\n    if (noLocal /* is true */) {\n      // [AssuredCtrl NoLocal Parameter]\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.NOLOCAL,\n        0x1\n      ));\n    }\n\n    if (wantFlowChangeUpdate /* is true */) {\n      // [AssuredCtrl wantFlowChangeUpdate Parameter]    ***\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY,\n        0x1\n      ));\n    }\n\n    if (browser /* is true */) {\n      // [AssuredCtrl browser Parameter]    ***\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.FLOWTYPE,\n        0x2\n      ));\n    }\n    if (replayStartLocation !== undefined) {\n      // [AssuredCtrl replay start location Parameter]\n      let rsValue = replayStartLocation._replayStartValue;\n      if (replayStartLocation._type === ReplayStartType.DATE) {\n        const replayStartTimeMs = Long.fromNumber(replayStartLocation._replayStartValue, true);\n        const replayStartTimeNs = replayStartTimeMs.multiply(1000000);\n        rsValue = replayStartTimeNs;\n      }\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.REPLAY_START_LOCATION,\n        {\n          type:  replayStartLocation._type,\n          value: rsValue,\n        }\n      ));\n    }\n\n    if (endpointErrorId !== undefined) {\n      // [AssuredCtrl EndpointErrorId Parameter]    ***\n      LOG_TRACE(`Adding endpointErrorId to message: ${endpointErrorId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n        endpointErrorId\n      ));\n    }\n\n    return message;\n  }\n\n  /**\n   * Creates an UNBIND request\n   * @param {Number} flowId The flow ID to unbind\n   * @param {Number} correlationTag The correlation tag for the request\n   * @param {?Long} lastMessageIdAcked The last message ID marked as locally acked\n   * @returns {AdProtocolMessage} The new UNBIND request\n   * @static\n   * @internal\n   */\n  static getCloseMessageConsumer(flowId,\n                                 correlationTag) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNBIND);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.FLOWID,\n                                          flowId));\n    // linger: assume no\n\n    return message;\n  }\n\n  static getDTEUnsubscribeMessage(correlationTag,\n                                  topic) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNSUBSCRIBE);\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.DTENAME,\n      topic.getBytes()\n    ));\n\n    return message;\n  }\n\n  /**\n   * @param {Number} flowId The flow on which to acknowledge messages.\n   * @param {?Long} [lastMessageIdAcked=undefined] The transport acknowledges receipt of all\n   *  messages up to and including this ID.\n   * @param {?Long} [windowSize=undefined] The size to which the flow window should be set.\n   * @param {?Array.<Array.<Long>>} [applicationAckRanges=undefined] Low-high ID pairs of\n   *  message IDs to acknowledge at the application level. To application ack a single message,\n   *  pass `[ [singleMessageId, singleMessageId] ]`.\n   * @returns {solace.AdProtocolMessage} A message containing the given parameters.\n   * @internal\n   * @static\n   */\n  static getAck(flowId,\n                lastMessageIdAcked = undefined,\n                windowSize = undefined,\n                applicationAckRanges = undefined) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CLIENTACK);\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.FLOWID,\n      flowId\n    ));\n\n    if (lastMessageIdAcked) {\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.LASTMSGIDACKED,\n        lastMessageIdAcked\n      ));\n    }\n\n    if (windowSize !== undefined && windowSize !== null) {\n      // There are two windowSize options; we'll use the legacy one for smaller\n      // window sizes\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        (windowSize <= 0xFF) ? SMFAdProtocolParam.WINDOW : SMFAdProtocolParam.TRANSPORT_WINDOW,\n        windowSize\n      ));\n    }\n\n    if (applicationAckRanges && applicationAckRanges.length) {\n      if (applicationAckRanges.length > AdProtocolMessage.MAX_CLIENT_ACK_RANGES) {\n        throw new OperationError('Application ack range count exceeds limit of 64');\n      }\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.APPLICATION_ACK,\n        applicationAckRanges // DANGER: this needs to be encoded immediately, or else deep-cloned\n      ));\n    }\n\n    return message;\n  }\n\n  /**\n   * @param {Number} flowId The flow on which to acknowledge messages.\n   * @param {?Long} [endpointErrorId=undefined] endpoint error id\n   * @param {?Long} [lastMessageIdAcked=undefined] The transport acknowledges receipt of all\n   *  messages up to and including this ID.\n   * @returns {solace.AdProtocolMessage} A message containing the given parameters.\n   * @internal\n   * @static\n   */\n  static getUnbindAck(flowId, endpointErrorId = undefined, lastMessageIdAcked = undefined) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNBIND);\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.FLOWID,\n      flowId\n    ));\n\n    if (endpointErrorId) {\n      LOG_TRACE(`Adding endpointErrorId to unbind ack: ${endpointErrorId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n        endpointErrorId\n      ));\n    }\n    LOG_TRACE(`Not adding lastMessageIdAcked to unbind ack: ${lastMessageIdAcked}`);\n    //if (lastMessageIdAcked) {\n    //  LOG_TRACE(`Adding lastMessageIdAcked to unbind ack: ${lastMessageIdAcked}`);\n    //  message.addParameter(new SMFParameter(\n    //    SMFUH.REJECT,\n    //    SMFAdProtocolParam.LASTMSGIDACKED,\n    //    lastMessageIdAcked\n    //  ));\n    //}\n    return message;\n  }\n}\n\n\nAdProtocolMessage.MAX_CLIENT_ACK_RANGES = 64;\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\n","const { AdProtocolMessage } = require('./adprotocol-message');\nconst { BinaryMetaBlock } = require('./binary-meta-block');\nconst { ClientCtrlMessage } = require('./client-ctrl-message');\nconst { KeepAliveMessage } = require('./keep-alive-message');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFUH } = require('./smf-uh');\nconst { SMPMessage } = require('./smp-message');\nconst { TransportSMFMessage } = require('./transport-smf-message');\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\nmodule.exports.SMFHeader = SMFHeader;\nmodule.exports.SMFParameter = SMFParameter;\nmodule.exports.SMFUH = SMFUH;\nmodule.exports.SMPMessage = SMPMessage;\nmodule.exports.TransportSMFMessage = TransportSMFMessage;\n","/**\n * @constructor BaseMessage\n * @private\n */\nclass BaseMessage {\n  constructor(header = null, params = []) {\n    this._smfHeader = header;\n    this._parameters = params;\n  }\n\n  addParameter(param) {\n    this._parameters[param.getType()] = param;\n  }\n\n  getParameter(paramType) {\n    return this._parameters[paramType];\n  }\n\n  getParameterArray() {\n    return this._parameters;\n  }\n\n  get smfHeader() {\n    return this._smfHeader;\n  }\n  set smfHeader(val) {\n    this._smfHeader = val;\n  }\n\n  getResponse() {\n    const smf = this.smfHeader;\n    if (!(smf && smf.pm_respcode && smf.pm_respstr)) {\n      return null;\n    }\n    return {\n      responseCode:   smf.pm_respcode,\n      responseString: smf.pm_respstr,\n    };\n  }\n}\n\nmodule.exports.BaseMessage = BaseMessage;\n","const { Bits, Convert } = require('solclient-convert');\n\nconst {\n  get: bits,\n} = Bits;\nconst {\n  int8ToStr,\n  int24ToStr,\n} = Convert;\n\n/**\n * @classdesc\n *\n * BinaryMetaBlock represents a binary metadata block in a TrMsg\n *\n * @private\n */\nclass BinaryMetaBlock {\n  constructor(type, payload) {\n    this.type = type;\n    this.payload = payload;\n  }\n\n  asEncodedSmf() {\n    const smf = [];\n    smf.push(int8ToStr(1));\n    smf.push(int8ToStr(this.type));\n    smf.push(int24ToStr(this.payload.length));\n    smf.push(this.payload.toString('latin1'));\n    return smf.join('');\n  }\n\n  static fromEncodedSmf(bufSmf, offset = 0) {\n    if ((bufSmf.length - offset) < 6) {\n      return null; // not enough data\n    }\n    const chunkCount = bufSmf.readUInt8(offset);\n    const fourbyte = bufSmf.readInt32BE(offset + 1);\n    const type = bits(fourbyte, 24, 8);\n    const payloadLen = bits(fourbyte, 0, 24);\n    const payloadOffset = chunkCount * 4 + 1;\n    const payload = bufSmf.slice(offset + payloadOffset, offset + payloadOffset + payloadLen);\n    return new BinaryMetaBlock(type, payload);\n  }\n\n}\n\n\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\n","const { AuthenticationScheme, CapabilityType, ClientCapabilityType, MutableSessionProperty, SessionProperties } = require('solclient-session');\nconst { BaseMessage } = require('./base-message');\nconst { Bits, Convert } = require('solclient-convert');\nconst { DestinationType, DestinationUtil } = require('solclient-destination');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Process, StringUtils, Version } = require('solclient-util');\nconst { SMFClientCtrlMessageType } = require('../smf-client-ctrl-message-types');\nconst { SMFClientCtrlParam, SMFClientCtrlAuthType } = require('../smf-client-ctrl-params');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFProtocol } = require('../smf-protocols');\n\nconst { LOG_TRACE } = require('solclient-log');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\nconst {\n  int8ToStr, strToInt8,\n  int16ToStr, int32ToStr,\n  strToInt16, strToInt32,\n} = Convert;\nconst {\n  nullTerminate,\n  stripNullTerminate,\n} = StringUtils;\nconst {\n  validateAndEncode,\n} = DestinationUtil;\n\nconst BOOLEAN_CAPS_BITS = [\n  CapabilityType.JNDI,\n  CapabilityType.COMPRESSION,\n  CapabilityType.GUARANTEED_MESSAGE_CONSUME,\n  CapabilityType.TEMPORARY_ENDPOINT,\n  CapabilityType.GUARANTEED_MESSAGE_PUBLISH,\n  CapabilityType.GUARANTEED_MESSAGE_BROWSE,\n  CapabilityType.ENDPOINT_MGMT,\n  CapabilityType.SELECTOR,\n  CapabilityType.ENDPOINT_MESSAGE_TTL,\n  CapabilityType.QUEUE_SUBSCRIPTIONS,\n  null, // skip obsolete FLOW_RECOVER\n  CapabilityType.SUBSCRIPTION_MANAGER,\n  CapabilityType.MESSAGE_ELIDING,\n  CapabilityType.TRANSACTED_SESSION,\n  CapabilityType.NO_LOCAL,\n  CapabilityType.ACTIVE_CONSUMER_INDICATION,\n  CapabilityType.PER_TOPIC_SEQUENCE_NUMBERING,\n  CapabilityType.ENDPOINT_DISCARD_BEHAVIOR,\n  CapabilityType.CUT_THROUGH,\n  null, // skip OPENMAMA\n  CapabilityType.MESSAGE_REPLAY,\n  CapabilityType.COMPRESSED_SSL,\n  null, // skipping LONG_SELECTORS\n  CapabilityType.SHARED_SUBSCRIPTIONS,\n  CapabilityType.BR_REPLAY_ERRORID,\n];\n\nconst CLIENT_CAPS_VALUES = new Map([\n  [ClientCapabilityType.UNBIND_ACK, 0x80],\n  [ClientCapabilityType.BR_ERRORID, 0x40],\n]);\n\n/**\n * @classdesc ClientCtrlMessage\n * Represents a ClientCtrl request or reply message\n * @private\n */\nclass ClientCtrlMessage extends BaseMessage {\n  constructor(messageType = 0) {\n    super(new SMFHeader(SMFProtocol.CLIENTCTRL, 1));\n\n    // Field: msgtype\n    this.msgType = messageType;\n\n    // Field: version\n    this.version = 1;\n  }\n\n  getP2PTopicValue() {\n    const p2pParam = this.getParameter(SMFClientCtrlParam.P2PTOPIC);\n    if (!p2pParam) {\n      return null;\n    }\n    return stripNullTerminate(p2pParam.getValue());\n  }\n\n  getVpnNameInUseValue() {\n    const vpnParam = this.getParameter(SMFClientCtrlParam.MSGVPNNAME);\n    if (!vpnParam) {\n      return null;\n    }\n    return stripNullTerminate(vpnParam.getValue());\n  }\n\n  getVridInUseValue() {\n    const vridParam = this.getParameter(SMFClientCtrlParam.VRIDNAME);\n    if (!vridParam) {\n      return null;\n    }\n    return stripNullTerminate(vridParam.getValue());\n  }\n\n  getUserIdValue() {\n    const userIdParam = this.getParameter(SMFClientCtrlParam.USERID);\n    if (!userIdParam) {\n      return null;\n    }\n    return stripNullTerminate(userIdParam.getValue());\n  }\n\n  getRouterCapabilities() {\n    let caps = [];\n\n    // Parse the composite capabilities parameter\n    let capParam = this.getParameter(SMFClientCtrlParam.ROUTER_CAPABILITIES);\n    if (capParam) {\n      caps = ClientCtrlMessage.prmParseCapabilitiesValue(capParam.getValue(), caps);\n    }\n\n    // Parse out the router status strings\n    capParam = this.getParameter(SMFClientCtrlParam.SOFTWAREVERSION);\n    if (capParam) {\n      caps[CapabilityType.PEER_SOFTWARE_VERSION] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.SOFTWAREDATE);\n    if (capParam) {\n      caps[CapabilityType.PEER_SOFTWARE_DATE] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.PLATFORM);\n    if (capParam) {\n      caps[CapabilityType.PEER_PLATFORM] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.PHYSICALROUTERNAME);\n    if (capParam) {\n      caps[CapabilityType.PEER_ROUTER_NAME] = stripNullTerminate(capParam.getValue());\n    }\n    return caps;\n  }\n\n\n  static prmGetDtoPriorityValue(dto) {\n    if (dto.local === undefined || dto.network === undefined) {\n      return false;\n    }\n    let twobyte = 0;\n    twobyte = setBits(twobyte, dto.local, 8, 8);\n    twobyte = setBits(twobyte, dto.network, 0, 8);\n    return int16ToStr(twobyte);\n  }\n\n  static prmParseDtoPriorityValue(strDtoPriority) {\n    const dto = {};\n    const twobyte = strToInt16(strDtoPriority.substr(0, 2));\n    dto.local = bits(twobyte, 8, 8);\n    dto.network = bits(twobyte, 0, 8);\n    return dto;\n  }\n\n  /*\n  strCapabilities: parameter value\n  caps: an already existing hash array of CapabilityType\n   */\n  static prmParseCapabilitiesValue(strCapabilities, capsIn) {\n    const caps = capsIn;\n    if (!(strCapabilities && caps)) {\n      return false;\n    }\n    const CT = CapabilityType;\n    let pos = 0;\n\n    // parse boolean capabilities\n    const boolCapCount = strToInt8(strCapabilities[pos]);\n    ++pos;\n\n    // The boolean caps are listed in order as in the documentation,\n    // that is from MSB to LSB for each caps byte.\n    let capsByte;\n    for (let bitIndex = 0; bitIndex < boolCapCount; ++bitIndex) {\n      const msbIndex = bitIndex & 0x7;\n      if (msbIndex === 0) { // Consume a byte\n        capsByte = strToInt8(strCapabilities[pos]);\n        ++pos;\n      }\n      const capsKey = BOOLEAN_CAPS_BITS[bitIndex];\n      if (!capsKey) continue; // We don't know about this cap\n      // so set caps bits from MSB (bit 7) to LSB (bit 0)\n      caps[capsKey] = !!bits(capsByte, 7 - msbIndex, 1);\n    }\n    // parse non-boolean capabilities\n    const sanityLoop = 500;\n    for (let i = 0; pos < strCapabilities.length && i < sanityLoop; ++i) {\n      const onebyte = strToInt8(strCapabilities[pos]); // type\n      pos++;\n      const capLen = strToInt32(strCapabilities.substr(pos, 4)) - 5;\n      pos += 4;\n      const strValue = strCapabilities.substr(pos, capLen);\n      pos += capLen;\n      switch (onebyte) {\n        case 0x00:\n          caps[CT.PEER_PORT_SPEED] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        case 0x01:\n          caps[CT.PEER_PORT_TYPE] = (strValue.length === 1) ? strToInt8(strValue) : 0;\n          break;\n        case 0x02:\n          caps[CT.MAX_GUARANTEED_MSG_SIZE] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        case 0x03:\n          caps[CT.MAX_DIRECT_MSG_SIZE] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        default:\n          // NOOP (unknown cap)\n          break;\n      }\n    }\n    return caps;\n  }\n\n\n  static getLogin(sprop, compressedTLS, plaintextTLS, correlationTag) {\n    function clientCapsToStr(clientCapList) {\n      const highestCap = Math.max.apply(null, clientCapList) + 1;\n      let capBits = 0;\n      clientCapList.forEach((cap) => { capBits += CLIENT_CAPS_VALUES.get(cap); });\n      return int8ToStr(highestCap) + int8ToStr(capBits);\n    }\n    if (!(sprop instanceof SessionProperties)) {\n      return false;\n    }\n    const cc = new ClientCtrlMessage(SMFClientCtrlMessageType.LOGIN);\n    const smfHeader = cc._smfHeader;\n    const isClientCert = sprop.authenticationScheme === AuthenticationScheme.CLIENT_CERTIFICATE;\n    smfHeader.pm_corrtag = correlationTag;\n    if (sprop.password && !isClientCert) {\n      smfHeader.pm_password = sprop.password;\n    }\n    if (sprop.userName) {\n      smfHeader.pm_username = sprop.userName;\n    }\n    if (sprop.subscriberLocalPriority && sprop.subscriberNetworkPriority) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.DELIVERTOONEPRIORITY,\n                                       ClientCtrlMessage.prmGetDtoPriorityValue({\n                                         local:   sprop.subscriberLocalPriority,\n                                         network: sprop.subscriberNetworkPriority })));\n    }\n    if (sprop.vpnName && sprop.vpnName.length > 0) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.MSGVPNNAME,\n                                       nullTerminate(sprop.vpnName)));\n    }\n\n    if (sprop.applicationDescription && sprop.applicationDescription.length > 0) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTDESC,\n                                       nullTerminate(sprop.applicationDescription)));\n    }\n\n    if (sprop.userIdentification && sprop.userIdentification.length > 0) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.USERID,\n                                       nullTerminate(sprop.userIdentification)));\n    }\n\n    if (sprop.authenticationScheme === AuthenticationScheme.OAUTH2) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.AUTHENTICATION_SCHEME,\n                                       SMFClientCtrlAuthType.OAUTH2));\n\n      if (sprop.idToken) {\n        smfHeader.pm_oidc_id_token = nullTerminate(sprop.idToken);\n      }\n\n      if (sprop.accessToken) {\n        smfHeader.pm_oauth2_access_token = nullTerminate(sprop.accessToken);\n      }\n\n      if (sprop.issuerIdentifier) {\n        smfHeader.pm_oauth2_issuer_identifier = nullTerminate(sprop.issuerIdentifier);\n      }\n    }\n\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.CLIENTNAME,\n                                     nullTerminate(sprop.clientName)));\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.PLATFORM,\n                                     nullTerminate(`${Process.platform} - JS API (${Version.mode})`)));\n\n    if (sprop.noLocal) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.NO_LOCAL,\n                                       '\\x01'));\n    }\n\n    if (isClientCert) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.AUTHENTICATION_SCHEME,\n                                       SMFClientCtrlAuthType.CLIENT_CERTIFICATE));\n    }\n\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.SOFTWAREDATE,\n                                     nullTerminate(Version.formattedDate)));\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.SOFTWAREVERSION,\n                                     nullTerminate(Version.version)));\n\n    if (compressedTLS && plaintextTLS) {\n      LOG_TRACE('Adding SslDowngrade=1 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x01'));\n    } else if (compressedTLS) {\n      LOG_TRACE('Adding SslDowngrade=2 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x02'));\n    } else if (plaintextTLS) {\n      LOG_TRACE('Adding SslDowngrade=0 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x00'));\n    }\n    const clientCaps = clientCapsToStr([ClientCapabilityType.UNBIND_ACK,\n      ClientCapabilityType.BR_ERRORID]);\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.CLIENT_CAPABILITIES,\n                                     clientCaps));\n                                     //'\\x02\\xc0'));\n                                     //'\\x01\\x80'));\n    const keepaliveVal = int32ToStr((sprop.keepAliveIntervalInMsecs) / 1000);\n    cc.addParameter(new SMFParameter(0,\n                                    SMFClientCtrlParam.KEEP_ALIVE_INTERVAL,\n                                    keepaliveVal));\n\n    return cc;\n  }\n\n  /**\n   * Get a CC update message.\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property to update\n   * @param {String} newValue The new value for the property\n   * @param {String} correlationTag The correlation tag for the request\n   * @returns {ClientCtrlMessage} The new UPDATE message\n   *\n   * @private\n   */\n  static getUpdate(mutableSessionProperty, newValue, correlationTag) {\n    const cc = new ClientCtrlMessage(SMFClientCtrlMessageType.UPDATE);\n    const smfHeader = cc.smfHeader;\n    smfHeader.pm_corrtag = correlationTag;\n    if (mutableSessionProperty === MutableSessionProperty.CLIENT_DESCRIPTION) {\n      const appdesc = (newValue || '').toString().substr(0, 250);\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTDESC,\n                                       nullTerminate(appdesc)));\n    } else if (mutableSessionProperty === MutableSessionProperty.CLIENT_NAME) {\n      const error =\n        ClientCtrlMessage.validateClientName(\n          newValue,\n          errorMessage =>\n            new OperationError(`Invalid clientName: ${errorMessage}`,\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n      if (error) {\n        throw error;\n      }\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTNAME,\n                                       nullTerminate(newValue)));\n    }\n    return cc;\n  }\n\n  static validateClientName(strName, exceptionCreator) {\n    const encodeResult = validateAndEncode(DestinationType.TOPIC, strName, exceptionCreator);\n    if (encodeResult.error) {\n      return encodeResult.error;\n    }\n    // Add 1: bytes includes terminator, 160 excludes terminator\n    if (encodeResult.bytes.length > 161) {\n      return exceptionCreator('Client Name too long (max length: 160).');\n    }\n    return null;\n  }\n}\n\n\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\n","const { BaseMessage } = require('./base-message');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFProtocol } = require('../smf-protocols');\n\nclass KeepAliveMessage extends BaseMessage {\n  constructor() {\n    super(new SMFHeader(SMFProtocol.KEEPALIVEV2, 2));\n    this._smfHeader.smf_uh = 2;\n  }\n}\n\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\n","/**\n * @classdesc\n * Control messages wrap an SMFHeader instance\n * @private\n */\nclass SMFHeader {\n  constructor(protocol = 0, ttl = 0) {\n    // header properties\n    // header block\n    // SMF parameters\n    // payload\n    this._parameters = [];\n\n    // Common SMF header field values\n    this.smf_version = 3;\n    this.smf_uh = 0;\n    this.smf_protocol = protocol;\n    this.smf_priority = 0;\n    this.smf_ttl = ttl;\n    this.smf_msgLen = 0;\n    this.smf_di = 0;\n    this.smf_tqd = 0;\n    this.smf_elidingEligible = 0;\n    this.smf_dto = 0;\n    this.smf_adf = 0;                  // AD\n    this.smf_deadMessageQueueEligible = 0; //DMQ Eligible\n\n    // Common SMF protocol parameters\n    this.pm_userdata = null;\n    this.pm_respcode = 0;\n    this.pm_respstr = null;\n    this.pm_username = null;\n    this.pm_password = null;\n    this.pm_tr_topicname_bytes = null;\n    this.pm_deliverymode = null;\n\n    this.pm_ad_msgid = undefined;      // AD\n    this.pm_ad_prevmsgid = undefined;  // AD\n    this.pm_ad_redelflag = 0;          // AD\n    this.pm_ad_flowredelflag = 0;      // AD\n    this.pm_ad_ttl = undefined;        // AD\n    this.pm_ad_ackimm = undefined;     // AD\n    this.pm_ad_flowid = 0;             // AD\n    this.pm_ad_publisherid = 0;\n    this.pm_ad_publishermsgid = 0;\n\n    this.pm_content_summary = null;\n    this.pm_corrtag = null;\n    this.pm_topic_offset = 0;\n    this.pm_topic_len = 0;\n    this.pm_queue_offset = 0;\n    this.pm_queue_len = 0;\n    this.pm_msg_priority = null;        // {number}\n\n    // extended optional parameters\n    // these fields are header but may not be present\n    // see ../codec/parse-smf.js for details\n    // this.pm_ad_redeliveryCount;\n    // this.pm_ad_spooler_unique_id;\n    // this.pm_ad_local_spooler_message_id;\n    // this.pm_ad_replication_mate_ack_message_id;\n    this.pm_oauth2_access_token = null;\n    this.pm_oidc_id_token = null;\n    this.pm_oauth2_issuer_identifier = null;\n\n    // housekeeping\n    this.unknownProtoFlag = false;\n    this.messageLength = 0;\n    this.payloadLength = 0;\n    this.headerLength = 0;\n    this.payload = null;\n\n    // This message is invalid, but the framing (messageLength) is fine.\n    // set by the parser when UH==2 on an unknown parameter.\n    // The SMF fsm can then discard and increment the stats.\n    this.discardMessage = false;\n  }\n\n  setMessageSizes(headerLength, payloadLength) {\n    this.headerLength = headerLength;\n    this.payloadLength = payloadLength;\n    this.messageLength = headerLength + payloadLength;\n  }\n\n  setPayloadSize(payloadLength) {\n    this.payloadLength = payloadLength;\n  }\n}\n\nmodule.exports.SMFHeader = SMFHeader;\n","/**\n * @classdesc\n * A representation of an SMF parameter\n *\n * @private\n */\nclass SMFParameter {\n/**\n * @constructor\n * @param {Number} uh The UH value [0..2]\n * @param {SMFParameterType} type The type of SMF parameter\n * @param {*} value The value for this parameter\n * @param {Buffer} buffer instead of value, a buffer, with indexes (begin and end)\n * @param {Number} begin start index in buffer\n * @param {Number} end end index in buffer.\n */\n  constructor(uh, type, value, buffer, begin, end) {\n    this._type = type;\n    this._value = value;\n    this._uh = uh;\n    this._buffer = buffer;\n    this._begin = begin;\n    this._end = end;\n  }\n  getType() {\n    return this._type;\n  }\n  getValue() {\n    if (this._buffer && !this._value) {\n      return this._buffer.toString('latin1', this._begin, this._end);\n    }\n    return this._value;\n  }\n  getUh() {\n    return this._uh;\n  }\n  getBuffer() {\n    return this._buffer;\n  }\n  getBegin() {\n    return this._begin;\n  }\n  getEnd() {\n    return this._end;\n  }\n\n  toString() {\n    return `${this._uh}:0x${this._type.toString(16)} = ${this.getValue()}`;\n  }\n}\n\nmodule.exports.SMFParameter = SMFParameter;\n","const { Enum } = require('solclient-eskit');\n\nconst SMFUH = {\n  IGNORE: 0x0,\n  REJECT: 0x2,\n};\n\nmodule.exports.SMFUH = Enum.new(SMFUH);\n","const { assert } = require('solclient-eskit');\nconst { BaseMessage } = require('./base-message');\nconst { Destination, DestinationUtil } = require('solclient-destination');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMFSMPMessageType } = require('../smf-smp-message-types');\nconst { SMFSMPMessageTypeFlags } = require('../smf-smp-message-type-flags');\n\n/**\n * Represents an SMP request or reply message\n * @memberof solace\n * @private\n */\nclass SMPMessage extends BaseMessage {\n\n  /**\n   * Creates an instance of SMPMessage.\n   *\n   * @memberOf SMPMessage\n   */\n  constructor() {\n    super(new SMFHeader(SMFProtocol.SMP, 1));\n\n    // Field: msgtype\n    this.msgType = 0;\n\n    // Field: subscription string\n    this.encodedUtf8Subscription = null;\n    this.encodedUtf8QueueName = null;\n\n    this.smpFlags = (0 | SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC); // default flags\n\n    this._encodedQueueName = null; // unused in solclientjs\n    this._encodedClientName = null; // unused in solclientjs\n  }\n\n  isFlag(flagMask) {\n    return (this.smpFlags & flagMask);\n  }\n\n  setFlag(flagMask, value) {\n    if (value) {\n      this.smpFlags |= flagMask;\n    } else {\n      this.smpFlags &= (~flagMask);\n    }\n  }\n\n  static getSubscriptionMessage(correlationTag, topic, add, requestConfirm) {\n    assert(topic instanceof Destination, 'Topics are not UCS-2 strings. Pass a Topic object.');\n    const smp = new SMPMessage();\n    smp.msgType = add\n      ? SMFSMPMessageType.ADDSUBSCRIPTION\n      : SMFSMPMessageType.REMSUBSCRIPTION;\n    smp.encodedUtf8Subscription = topic.getBytes();\n    assert(smp.encodedUtf8Subscription, 'Topic had no encoding');\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC, true);\n    if (requestConfirm) {\n      smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_RESPREQUIRED, true);\n    }\n\n    // Always put a correlation tag\n    smp._smfHeader.pm_corrtag = correlationTag;\n    return smp;\n  }\n\n  static getQueueSubscriptionMessage(correlationTag, topic, queue, add) {\n    assert(topic instanceof Destination, 'Topics are not UCS-2 strings. Pass a Topic object.');\n    const smp = new SMPMessage();\n    smp.msgType = add\n      ? SMFSMPMessageType.ADDQUEUESUBSCRIPTION\n      : SMFSMPMessageType.REMQUEUESUBSCRIPTION;\n    smp.encodedUtf8QueueName = DestinationUtil.encodeBytes(queue.getName());\n    smp.encodedUtf8Subscription = topic.getBytes();\n    assert(smp.encodedUtf8Subscription, 'Topic had no encoding');\n    assert(smp.encodedUtf8QueueName, 'Queue had no encoding');\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC, true);\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_RESPREQUIRED, true);\n    // TODO: true for remove, false for add? Typo in the spec?\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_PERSIST, true);\n\n    // Always put a correlation tag\n    smp._smfHeader.pm_corrtag = correlationTag;\n    return smp;\n  }\n\n\n}\n\n\nmodule.exports.SMPMessage = SMPMessage;\n","const { BaseMessage } = require('./base-message');\n\n/**\n * @classdesc\n * Transport SMF Message\n * @memberof solace\n * @private\n */\nclass TransportSMFMessage extends BaseMessage {\n  /**\n   * @constructor\n   */\n  constructor() {\n    super(null, null);\n    this.uh = 0;\n    this.messageType = null;\n    this.sessionId = null;\n    this.routerTag = null;\n    this.payload = null;\n    this.payloadLength = 0;\n    this.tsHeaderLength = 0;\n  }\n}\n\nmodule.exports.TransportSMFMessage = TransportSMFMessage;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFAdProtocolMessageType = {\n  OPENPUBFLOW:      0x00,\n  // INTERROUTERACK:          0x01,\n  // INTERROUTERHANDSHAKEACK: 0x02,\n  CLIENTACK:        0x03,\n  BIND:             0x04,\n  UNBIND:           0x05,\n  UNSUBSCRIBE:      0x06,\n  CLOSEPUBFLOW:     0x07,\n  CREATE:           0x08,\n  DELETE:           0x09,\n  // FLOWRECOVER:  0x0a,\n  TRANSACTIONCTRL:  0x0b,\n  FLOWCHANGEUPDATE: 0x0c,\n  // EXTERNALACK:      0x0d,\n  XACTRL:           0x0e,\n  CLIENTNACK:       0x0f,\n  // TXNCTRL:          0x10,\n};\n\nmodule.exports.SMFAdProtocolMessageType = Enum.new(SMFAdProtocolMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFAdProtocolParam = {\n  LASTMSGIDSENT:                           0x01,\n  LASTMSGIDACKED:                          0x02,\n  WINDOW:                                  0x03,\n  TRANSPORT_PRIORITY:                      0x04,\n  APPLICATION_ACK:                         0x05,\n  FLOWID:                                  0x06,\n  QUEUENAME:                               0x07,\n  DTENAME:                                 0x08,\n  TOPICNAME:                               0x09,\n  FLOWNAME:                                0x0a,\n  EP_DURABLE:                              0x0b,\n  ACCESSTYPE:                              0x0c,\n  SELECTOR:                                0x0d,\n  TRANSPORT_WINDOW:                        0x0e,\n  LINGER_OPTION:                           0x0f,\n  LASTMSGIDRECEIVED:                       0x10,\n  EP_ALLOTHER_PERMISSION:                  0x11,\n  FLOWTYPE:                                0x12,\n  EP_QUOTA:                                0x13,\n  EP_MAX_MSGSIZE:                          0x14,\n  GRANTED_PERMISSIONS:                     0x15,\n  EP_RESPECTS_TTL:                         0x16,\n  TRANSACTION_CTRL_MESSAGE_TYPE:           0x17,\n  TRANSACTED_SESSION_ID:                   0x18,\n  TRANSACTED_SESSION_NAME:                 0x19,\n  TRANSACTION_ID:                          0x1a,\n  TRANSACTED_SESSION_STATE:                0x1b,\n  TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY:  0x1c,\n  TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK:     0x1d,\n  TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK:     0x1e,\n  NOLOCAL:                                 0x1f,\n  ACTIVE_FLOW_INDICATION:                  0x20,\n  WANT_FLOW_CHANGE_NOTIFY:                 0x21,\n  EP_BEHAVIOUR:                            0x22,\n  PUBLISHER_ID:                            0x23,\n  APPLICATION_PUB_ACK:                     0x24,\n  NUM_MESSAGES_SPOOLED:                    0x25,\n  CUT_THROUGH:                             0x26,\n  PUBLISHER_FLAGS:                         0x27,\n  APP_MSG_ID_TYPE:                         0x28,\n  QUEUE_ENDPOINT_HASH:                     0x29,\n  MAX_REDELIVERY:                          0x2a,\n  PAYLOAD:                                 0x2b,\n  ENDPOINT_ID:                             0x2c,\n  ACK_SEQUENCE_NUMBER:                     0x2d,\n  ACK_RECONCILE_REQUEST:                   0x2e,\n  START_OF_ACK_RECONCILE:                  0x2f,\n  TIMESTAMP:                               0x30,\n  MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW: 0x31,\n  REPLAY_START_LOCATION:                   0x33,\n  ENDPOINT_ERROR_ID:                       0x34,\n  SPOOLER_UNIQUE_ID:                       0x36,\n};\n\nmodule.exports.SMFAdProtocolParam = Enum.new(SMFAdProtocolParam);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFClientCtrlMessageType = {\n  LOGIN:  0x00,\n  UPDATE: 0x01,\n};\n\nmodule.exports.SMFClientCtrlMessageType = Enum.new(SMFClientCtrlMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFClientCtrlParam = {\n  SOFTWAREVERSION:              0x00,\n  SOFTWAREDATE:                 0x01,\n  PLATFORM:                     0x02,\n  USERID:                       0x03,\n  CLIENTDESC:                   0x04,\n  CLIENTNAME:                   0x05,\n  MSGVPNNAME:                   0x06,\n  DELIVERTOONEPRIORITY:         0x07,\n  P2PTOPIC:                     0x08,\n  ROUTER_CAPABILITIES:          0x09,\n  VRIDNAME:                     0x0a,\n  PHYSICALROUTERNAME:           0x0c,\n  BRIDGE_MSG_VPN_NAME:          0x0d,\n  BRIDGE_ROUTER_NAME:           0x0e,\n  NO_LOCAL:                     0x0f,\n  BRIDGE_VERSION:               0x10,\n  AUTHENTICATION_SCHEME:        0x11,\n  CONNECTION_TYPE:              0x12,\n  ROUTER_CAPABILITIES_EXTENDED: 0x13,\n  REQUIRES_RELEASE_7:           0x14, // not supported.\n  SSL_DOWNGRADE:                0x15,\n  CLIENT_CAPABILITIES:          0x17,\n  KEEP_ALIVE_INTERVAL:          0x18,\n};\n\n// Internal use only\nconst SMFClientCtrlAuthType = {\n  CLIENT_CERTIFICATE: '\\x01',\n  OAUTH2:             '\\x0a',\n};\n\nmodule.exports.SMFClientCtrlAuthType = Enum.new(SMFClientCtrlAuthType);\nmodule.exports.SMFClientCtrlParam = Enum.new(SMFClientCtrlParam);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFParameterType = {\n  // SMF parameter types 5 bit types\n  PADDING:                  0x00,\n  PUBLISHER_ID:             0x01,\n  PUBLISHER_MSGID:          0x02,\n  MESSAGEPRIORITY:          0x03,\n  USERDATA:                 0x04,\n  USERNAME:                 0x06,\n  PASSWORD:                 0x07,\n  RESPONSE:                 0x08,\n  SUB_ID_LIST:              0x0A,\n  GENERIC_ATTACHMENT:       0x0B,\n  BINARY_ATTACHMENT:        0x0C,\n  DELIVERY_MODE:            0x10,\n  ASSURED_MESSAGE_ID:       0x11,\n  ASSURED_PREVMESSAGE_ID:   0x12,\n  ASSURED_REDELIVERED_FLAG: 0x13,\n  MESSAGE_CONTENT_SUMMARY:  0x16,\n  ASSURED_FLOWID:           0x17,\n  TR_TOPICNAME:             0x18,\n  AD_FLOWREDELIVERED_FLAG:  0x19,\n  AD_TIMETOLIVE:            0x1C,\n  AD_TOPICSEQUENCE_NUMBER:  0x1e,\n  EXTENDED_TYPE_STREAM:     0x1f,\n  /* extended parameters 12 bit types */\n  AD_ACK_MESSAGE_ID:        0x29,\n  AD_SPOOLER_UNIQUE_ID:     0x2c,\n  AD_REPL_MATE_ACK_MSGID:   0x2d,\n  AD_REDELIVERY_COUNT:      0x2e,\n\n  /* light wieght parameters */\n  LIGHT_CORRELATION:       0x00,\n  LIGHT_TOPIC_NAME_OFFSET: 0x01,\n  LIGHT_QUEUE_NAME_OFFSET: 0x02,\n  LIGHT_ACK_IMMEDIATELY:   0x03,\n};\n\nconst SMFExtendedParameterType = {\n  // SMFv3 Extended parameters inside the Extended Type Stream\n//Not supported yet\n//  GSS_API_TOKEN:        0x28,\n//  AD_ACK_MESSAGE_ID:    0x29,\n//  AD_TRANSACTION_ID:    0x2a,\n//  AD_TRANSACTION_FLAGS: 0x2b,\n  OAUTH2_ISSUER_IDENTIFIER: 0x2f,\n  OIDC_ID_TOKEN:            0x30,\n  OAUTH2_ACCESS_TOKEN:      0x31,\n};\n\nmodule.exports.SMFParameterType = Enum.new(SMFParameterType);\nmodule.exports.SMFExtendedParameterType = Enum.new(SMFExtendedParameterType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * SMFProtocol\n * @private\n * @enum {number}\n */\nconst SMFProtocol = {\n  CSPF:               0x01,\n  CSMP:               0x02,\n  PUBMSG:             0x03,\n  XMLLINK:            0x04,\n  WSE:                0x05,\n  SEMP:               0x06,\n  SUBCTRL:            0x07,\n  PUBCTRL:            0x08,\n  ADCTRL:             0x09,\n  KEEPALIVE:          0x0a,\n  KEEPALIVEV2:        0x0b,\n  CLIENTCTRL:         0x0c,\n  TRMSG:              0x0d,\n  JNDI:               0x0e,\n  SMP:                0x0f,\n  SMRP:               0x10,\n  SMF_IN_SMF:         0x11,\n  SMF_IN_RV:          0x12,\n  ADCTRL_PASSTHROUGH: 0x13,\n  TSESSION:           0x14,\n\n};\n\nmodule.exports.SMFProtocol = Enum.new(SMFProtocol);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFSMPMessageTypeFlags = {\n  FLAG_FILTER:                1,\n  FLAG_PERSIST:               2,\n  SMF_SMP_FLAG_TOPIC:         4,\n  SMF_SMP_FLAG_RESPREQUIRED:  8,\n  SMF_SMP_FLAG_DELIVERALWAYS: 16,\n};\n\nmodule.exports.SMFSMPMessageTypeFlags = Enum.new(SMFSMPMessageTypeFlags);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFSMPMessageType = {\n  ADDSUBSCRIPTION:              0x00,\n  REMSUBSCRIPTION:              0x01,\n  ADDQUEUESUBSCRIPTION:         0x02,\n  REMQUEUESUBSCRIPTION:         0x03,\n  ADDSUBSCRIPTIONFORCLIENTNAME: 0x04,\n  REMSUBSCRIPTIONFORCLIENTNAME: 0x05,\n};\n\nmodule.exports.SMFSMPMessageType = Enum.new(SMFSMPMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFTransportSessionMessageType = {\n  CREATE:            0,\n  CREATE_RESP:       1,\n  DESTROY:           2,\n  DESTROY_RESP:      3,\n  DATA:              4,\n  DATA_TOKEN:        5,\n  DATA_STREAM_TOKEN: 6,\n};\n\nmodule.exports.SMFTransportSessionMessageType = Enum.new(SMFTransportSessionMessageType);\n","const { CacheCBInfo } = require('./lib/cache-cb-info');\nconst { CacheContext } = require('./lib/cache-context');\nconst { CacheLiveDataAction } = require('./lib/cache-live-data-actions');\nconst { CacheRequest } = require('./lib/cache-request');\nconst { CacheRequestResult } = require('./lib/cache-request-result');\nconst { CacheReturnCode } = require('./lib/cache-return-codes');\nconst { CacheReturnSubcode } = require('./lib/cache-return-subcodes');\nconst { CacheSession } = require('./lib/cache-session');\nconst { CacheSessionProperties } = require('./lib/cache-session-properties');\n\nmodule.exports.CacheCBInfo = CacheCBInfo;\nmodule.exports.CACHE_REQUEST_PREFIX = CacheContext.CACHE_REQUEST_PREFIX;\nmodule.exports.CacheLiveDataAction = CacheLiveDataAction;\nmodule.exports.CacheRequestResult = CacheRequestResult;\nmodule.exports.CacheReturnCode = CacheReturnCode;\nmodule.exports.CacheReturnSubcode = CacheReturnSubcode;\nmodule.exports.CacheRequest = CacheRequest;\nmodule.exports.CacheSession = CacheSession;\nmodule.exports.CacheSessionProperties = CacheSessionProperties;\n\n","/**\n * This callback is called by a cache session when a cache request\n * completes.\n *\n * @callback solace.CacheCBInfo.cacheRequestCallback\n * @function\n * @param {Number} requestID The ID of the request on which the event is notified.\n * @param {solace.CacheRequestResult} result The result of the cache request.\n * @param {Object} userObject The user object provided.\n */\n\n\n/**\n * @classdesc\n * Encapsulates a {@link solace.CacheSession}'s request listener callback function and\n * optional application-specified context object.\n *\n * Instances of this class are required as a parameter to\n * {@link solace.CacheSession#sendCacheRequest} when creating a CacheSession request.\n *\n * @memberof solace\n */\nclass CacheCBInfo {\n\n  /**\n   * Creates an instance of CacheCBInfo using the provided callback and user context object.\n   * @param {solace.CacheCBInfo.cacheRequestCallback} cacheCBFunction The callback to be invoked.\n   * @param {Object} userObject A context object to be returned with the callback.\n   */\n  constructor(cacheCBFunction, userObject) {\n    /**\n     * The function that will be called by the cache session when a request\n     * completes.\n     * @type {solace.CacheCBInfo.cacheRequestCallback}\n     */\n    this.cacheCBFunction = cacheCBFunction;\n\n    /**\n     * The user context object that will be supplied to the callback function\n     * when the cache request completes.\n     * @type {object}\n     */\n    this.userObject = userObject;\n  }\n\n  /**\n   * @returns {solace.CacheCBInfo.cacheRequestCallback} The callback function\n   * @private\n   */\n  getCallback() {\n    return this.cacheCBFunction;\n  }\n\n  /**\n   * @returns {*} The user context object, if any\n   * @private\n   */\n  getUserObject() {\n    return this.userObject;\n  }\n\n}\n\nmodule.exports.CacheCBInfo = CacheCBInfo;\n","/**\n * @private\n * @static\n */\nconst CacheContext = {\n  /**\n   * A prefix appearing on the request IDs of all requests associated with a Solcache session.\n   * @type {String}\n   * @private\n   */\n  CACHE_REQUEST_PREFIX: '#CRQ',\n\n  /**\n   * A global counter generating unique correlation IDs for cache requests.\n   * @private\n   */\n  cacheRequestCorrelationId: 0,\n};\n\nmodule.exports.CacheContext = CacheContext;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst CacheGetResultCode = {\n  INVALID: 0,\n  OK:      1,\n};\n\nmodule.exports.CacheGetResultCode = Enum.new(CacheGetResultCode);\n","const { CacheGetResultCode } = require('./cache-get-result-codes');\n\nconst DEFAULTS = {\n  messageID:         null,\n  version:           0,\n  responseCode:      CacheGetResultCode.INVALID,\n  responseString:    '',\n  matchTopic:        '',\n  sessionID:         null,\n  isSuspect:         null,\n  hasMore:           null,\n  hasTimestamps:     null,\n  replyTo:           null,\n  messageStream:     null,\n  clusterNameStream: null,\n};\n\n/**\n * @classdesc CacheGetResult encapsulates the result of a cache get request\n * @private\n */\nclass CacheGetResult {\n  /*\n   * @constructor\n   */\n  constructor(options = DEFAULTS) {\n    Object.assign(this, options);\n  }\n\n  readFromStream(stream) {\n    this.messageID = stream.getNext().getValue();\n    this.version = stream.getNext().getValue();\n    this.responseCode = stream.getNext().getValue();\n    this.responseString = stream.getNext().getValue();\n    // SD claims instanceName is present here but empirically, it's not\n\n    this.matchTopic = stream.getNext().getValue();\n    this.sessionID = stream.getNext().getValue();\n    this.isSuspect = stream.getNext().getValue();\n    this.hasMore = stream.getNext().getValue();\n\n    this.hasTimestamps = stream.getNext().getValue();\n\n    if (stream.hasNext()) { // first stream\n      this.messageStream = stream.getNext().getValue();\n    }\n    if (stream.hasNext()) { // if two streams, first was cluster name stream\n      this.clusterNameStream = this.messageStream;\n      this.messageStream = stream.getNext().getValue();\n    }\n  }\n}\n\nmodule.exports.CacheGetResult = CacheGetResult;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * solace.CacheLiveDataAction\n * Enumeration of CacheLiveDataAction values, specifying how the CacheSession should handle\n * live data associated with a cache request in progress.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheLiveDataAction = {\n  /**\n   * @type {Number}\n   * @description End the cache request when live data arrives that matches the topic.\n   * Note that wildcard cache requests must always be {@link CacheLiveDataAction.FLOW_THRU}.\n   */\n  FULFILL:   1,\n  /**\n   * @type {Number}\n   * @description Queue arriving live data that matches the topic, until the cache request\n   * completes. Note that wildcard cache requests must always be {@link\n   * solace.CacheLiveDataAction.FLOW_THRU}.\n   */\n  QUEUE:     2,\n  /**\n   * @type {Number}\n   * @description Continue the outstanding cache request while allowing live data to flow through to\n   * the application.\n   * Note that wildcard cache requests must always be {@link CacheLiveDataAction.FLOW_THRU}.\n   */\n  FLOW_THRU: 3,\n};\n\nmodule.exports.CacheLiveDataAction = Enum.new(CacheLiveDataAction);\n","/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. A CacheRequestResult object is\n * provided on the callback (see {@link solace.CacheCBInfo.cacheRequestCallback} when a cache\n * request completes.</b>\n *\n * An object that indicates the termination of a cache request, and provides details how it\n * concluded.\n * @memberof solace\n * @hideconstructor\n */\nclass CacheRequestResult {\n  /*\n   * @param {solace.CacheReturnCode} rc The result of the request.\n   *   * When returnCode === CacheReturnCode.OK, the applicable subcodes are:\n   *     * {@link CacheReturnSubcode.REQUEST_COMPLETE}\n   *     * {@link CacheReturnSubcode.LIVE_DATA_FULFILL}\n   *   * When returnCode === CacheReturnCode.FAIL, applicable subcodes are:\n   *     * {@link CacheReturnSubcode.ERROR_RESPONSE}\n   *     * {@link CacheReturnSubcode.INVALID_SESSION}\n   *     * {@link CacheReturnSubcode.REQUEST_ALREADY_IN_PROGRESS}\n   *   * When returnCode === CacheReturnCode.INCOMPLETE, applicable subcodes are:\n   *     * {@link CacheReturnSubcode.NO_DATA}\n   *     * {@link CacheReturnSubcode.REQUEST_TIMEOUT}\n   *     * {@link CacheReturnSubcode.SUSPECT_DATA}\n   *\n   * @param {solace.CacheReturnSubcode} subcode The subcode result of the request. Provides\n   *    details on the condition that caused the result.\n   * @param {solace.Destination} topic The topic destination on which the request was made.\n   * @param {String} error The error, if any, that caused the current result.\n   */\n  constructor(rc, subcode, topic, error) {\n    this._returnCode = rc;\n    this._subcode = subcode;\n    this._topic = topic;\n    this._error = error;\n  }\n\n  /**\n   * Gets the return code from the cache request result.\n   *\n   * @returns {solace.CacheReturnCode} The return code associated with the result of\n   * the request.\n   */\n  getReturnCode() {\n    return this._returnCode;\n  }\n\n  /**\n   * Gets the return subcode from the cache request result.\n   *\n   * @returns {solace.CacheReturnSubcode} A subcode that gives more detail than\n   * {@link CacheRequestResult#getReturnCode} about the result of the request.\n   */\n  getReturnSubcode() {\n    return this._subcode;\n  }\n\n  /**\n   * Gets the topic object associated with the cache request.\n   *\n   * @returns {solace.Destination} The topic destination supplied for the cache request.\n   */\n  getTopic() {\n    return this._topic;\n  }\n\n\n  /**\n   * Gets the error, if any, associated with the returned result.\n   *\n   * @returns {String} The error associated with the returned result.\n   */\n  getError() {\n    return this._error;\n  }\n}\n\nmodule.exports.CacheRequestResult = CacheRequestResult;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst CacheRequestType = {\n  INVALID:                       0,\n  BULK_MSG:                      1,\n  REGISTER_REQUEST:              2,\n  REGISTER_RESPONSE:             3,\n  HEARTBEAT_REQUEST:             4,\n  HEARTBEAT_RESPONSE:            5,\n  EVENT_NOTIFY:                  6,\n  EVENT_ACK:                     7,\n  ACTION_REQUEST:                8,\n  ACTION_RESPONSE:               9,\n  GET_REQUEST:                   10,\n  GET_RESPONSE:                  11,\n  GET_NEXT_REQUEST:              12,\n  GET_NEXT_RESPONSE:             13,\n  SET_REQUEST:                   14,\n  SET_RESPONSE:                  15,\n  GET_MSG_REQUEST:               16,\n  GET_MSG_RESPONSE:              17,\n  GET_NEXT_MSG_REQUEST:          18,\n  GET_NEXT_MSG_RESPONSE:         19,\n  UNREGISTER_IND:                20,\n  BULK_SET_REQUEST:              21,\n  BULK_SET_RESPONSE:             22,\n  PURGE_MSG_SEQUENCE_REQUEST:    23,\n  PURGE_MSG_SEQUENCE_RESPONSE:   24,\n  GET_MSG_SEQUENCE_REQUEST:      25,\n  GET_NEXT_MSG_SEQUENCE_REQUEST: 26,\n  GET_TOPIC_INFO_REQUEST:        27,\n  GET_TOPIC_INFO_RESPONSE:       28,\n  READY_MARKER:                  29,\n  GET_TOPIC_INFO_REQUEST_RANGE:  30,\n  SYNC_READY_MARKER:             31,\n  VACUUM_REQUEST:                32,\n  VACUUM_RESPONSE:               33,\n};\n\nmodule.exports.CacheRequestType = Enum.new(CacheRequestType);\n","const { CacheContext } = require('./cache-context');\nconst { LOG_DEBUG } = require('solclient-log');\n\nconst { CACHE_REQUEST_PREFIX } = CacheContext;\n\n/**\n * @private\n */\nclass CacheRequest {\n  /**\n   * @constructor\n   * @param {CacheSession} cacheSession The owning session\n   * @param {CacheRequestType} cacheMessageType The type of request\n   * @param {Number} requestID The ID for the request\n   * @param {CacheCBInfo} cbInfo Callback target\n   * @param {CacheLiveDataAction} liveDataAction Action on live data received\n   * @param {Topic} topic Associated topic\n   * @param {String} cacheName Associated remote cache name\n   * @private\n   */\n  constructor(cacheSession, cacheMessageType, requestID, cbInfo, liveDataAction, topic, cacheName) {\n    this.cacheSession = cacheSession;\n    this.cacheMessageType = cacheMessageType;\n    this.requestID = requestID;\n    this.cbInfo = cbInfo;\n    this.liveDataAction = liveDataAction;\n    this.topic = topic;\n    this.cacheName = cacheName;\n\n    this.subscriptionWaiting = null;\n    this.replyReceived = false;\n    this.dataReceived = false;\n    this.isSuspect = false;\n\n    this.correlationID = `${CACHE_REQUEST_PREFIX}${CacheContext.cacheRequestCorrelationId++}`;\n\n    this.childRequests = [];\n    this.parentRequest = null;\n\n    this.queuedLiveData = [];\n    this.liveDataFulfilled = false;\n\n    this.timeoutHandle = null;\n  }\n\n  /**\n   * @returns {CacheRequest} The root cache request in the current request tree\n   * @private\n   */\n  getRootRequest() {\n    if (!this.parentRequest) {\n      return this;\n    }\n    return this.parentRequest.getRootRequest();\n  }\n\n  /**\n   * @param {CacheRequest} childIn A request to make a descendant of this node in the request tree\n   * @private\n   */\n  addChild(childIn) {\n    if (!(childIn instanceof CacheRequest)) {\n      throw new Error(`Invalid child ${childIn}`);\n    }\n    if (childIn === this) {\n      throw new Error('Constructing circular child reference');\n    }\n    const child = childIn;\n    child.parentRequest = this;\n    this.childRequests.push(child);\n  }\n\n  /**\n   * @param {CacheRequest} childIn A request to remove as a descendant of this node\n   * @private\n   */\n  removeChild(childIn) {\n    if (childIn === this) {\n      throw new Error('Attempting to deconstruct invalid circular child reference');\n    }\n    const child = childIn;\n    const childIndex = this.childRequests.indexOf(child);\n    if (childIndex === -1) {\n      LOG_DEBUG(`Child ${child} not found in ${this}`);\n    }\n    this.childRequests.splice(childIndex, 1);\n    child.parentRequest = null;\n  }\n\n  /**\n   * @private\n   */\n  collapse() {\n    const parentRequest = this.parentRequest;\n    parentRequest.isSuspect = parentRequest.isSuspect || this.isSuspect;\n    parentRequest.dataReceived = parentRequest.dataReceived || this.dataReceived;\n    parentRequest.removeChild(this);\n  }\n\n  /**\n   * @private\n   */\n  cancel() {\n    if (this.parentRequest) {\n      this.collapse();\n    }\n\n    while (this.childRequests.length) {\n      const child = this.childRequests.shift();\n      if (child.childRequests) {\n        child.cancel();\n      }\n      this.removeChild(child);\n    }\n\n    this.clearRequestTimeout();\n  }\n\n  /**\n   * @returns {Number} The ID of this request\n   * @private\n   */\n  getRequestID() {\n    return this.requestID;\n  }\n\n\n  /**\n   * @returns {CacheCBInfo} The callback object for this request\n   * @private\n   */\n  getCBInfo() {\n    return this.cbInfo;\n  }\n\n  /**\n   * @returns {Topic} The topic for this request\n   * @private\n   */\n  getTopic() {\n    return this.topic;\n  }\n\n\n  /**\n   * @returns {CacheLiveDataAction} The live data action for this request\n   * @private\n   */\n  getLiveDataAction() {\n    return this.liveDataAction;\n  }\n\n  /**\n   * @param {function({solace.CacheRequest})} cacheSessionTimeoutCB Callback to notify on timeout\n   * @param {Number} timeoutMsec Timeout in milliseconds\n   * @private\n   */\n  startRequestTimeout(cacheSessionTimeoutCB, timeoutMsec) {\n    this.timeoutHandle = setTimeout(() => {\n      cacheSessionTimeoutCB(this);\n    }, timeoutMsec);\n  }\n\n  /**\n   * @private\n   */\n  clearRequestTimeout() {\n    if (this.timeoutHandle === null || this.timeoutHandle === undefined) {\n      return;\n    }\n\n    LOG_DEBUG(`Clearing timeout for ${this}`);\n    clearTimeout(this.timeoutHandle);\n    this.timeoutHandle = null;\n  }\n\n  /**\n   * Returns a string representing the request.\n   * @returns {String} A brief description of this object\n   */\n  toString() {\n    return `CacheRequest[correlationID=${this.correlationID\n        },requestID=${this.requestID\n        },cacheName=${this.cacheName\n        },topic=${this.topic.getName()}]`;\n  }\n\n}\n\n/**\n * @private\n */\nCacheRequest.VERSION = 1;\n\n/**\n * @private\n */\nCacheRequest.DEFAULT_REPLY_SIZE_LIMIT = 1000000;\n\n/**\n * @private\n */\nCacheRequest.REPLY_SIZE_LIMIT = CacheRequest.DEFAULT_REPLY_SIZE_LIMIT;\n\nmodule.exports.CacheRequest = CacheRequest;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of CacheReturnCode types.  The method {@link solace.CacheRequestResult#getReturnCode}\n * returns on of these basic results of a cache request.  More details are available in the\n * associated {@link solace.CacheReturnSubcode}, retrieved by\n * {@link solace.CacheRequestResult#getReturnSubcode}.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheReturnCode = {\n  /**\n   * @type {Number}\n   * @description The cache request succeeded.  See the subcode for more information.\n   */\n  OK:         1,\n  /**\n   * @type {Number}\n   * @description The cache request was not processed.  See the subcode for more information.\n   */\n  FAIL:       2,\n  /**\n   * @type {Number}\n   * @description The cache request was processed but could not be completed.  See the subcode for\n   * more information.\n   */\n  INCOMPLETE: 3,\n};\n\nmodule.exports.CacheReturnCode = Enum.new(CacheReturnCode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of CacheReturnSubcode types.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheReturnSubcode = {\n  /**\n   * @type {Number}\n   * @description\n   * The cache request completed successfully.\n   */\n  REQUEST_COMPLETE:            0,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request completed when live data arrived on the topic requested.\n   */\n  LIVE_DATA_FULFILL:           1,\n  /**\n   * @type {Number}\n   * @description\n   * The cache instance or session returned an error response to the cache request.\n   */\n  ERROR_RESPONSE:              2,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request failed because the {@link Session} used to construct it has been\n   * disposed.\n   */\n  INVALID_SESSION:             3,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request failed because the request timeout expired.\n   */\n  REQUEST_TIMEOUT:             4,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request was made on the same topic as an existing request, and\n   * {@link CacheLiveDataAction.FLOW_THRU} was not set.\n   */\n  REQUEST_ALREADY_IN_PROGRESS: 5,\n  /**\n   * @type {Number}\n   * @description\n   * The cache reply returned no data.\n   */\n  NO_DATA:                     6,\n  /**\n   * @type {Number}\n   * @description\n   * The cache reply returned suspect data.\n   */\n  SUSPECT_DATA:                7,\n  /**\n   * @type {Number}\n   * @description\n   * The request was terminated because the cache session was disposed.\n   */\n  CACHE_SESSION_DISPOSED:      8,\n  /**\n   * @type {Number}\n   * @description\n   * The request was terminated because the subscription request for the specified topic failed.\n   */\n  SUBSCRIPTION_ERROR:          9,\n};\n\nmodule.exports.CacheReturnSubcode = Enum.new(CacheReturnSubcode);\n","/**\n * @classdesc\n *\n * Encapsulates the properties of a cache session.\n *\n * @memberof solace\n *\n */\nclass CacheSessionProperties {\n\n   /**\n    * @constructor\n    *\n    * @param {String} cacheName A property that specifies the cache name to which CacheSession\n    *   operations should be sent.\n    * @param {Number} [maxAgeSec=0] The maximum allowable message age in seconds to deliver in\n    *   response to a cache request. 0 means no restriction on age.\n    * @param {Number} [maxMessages=1] The maximum number of messages per Topic to deliver in\n    *   response to cache requests. 0 means no restriction on the number of messages.\n    * @param {Number} [timeoutMsec=10000] The timeout period (in milliseconds) to wait for a\n    *   response from the cache. This is a protocol timer used internally by the API on each\n    *   message exchange with SolCache. A single call to\n    *   {@link solace.CacheSession#sendCacheRequest} may lead to many request-reply exchanges\n    *   with SolCache and so is not bounded by this timer as long as each internal request is\n    *   satisfied in time.\n    *   * The valid range for this property is >= 3000.\n    */\n  constructor(cacheName, maxAgeSec, maxMessages, timeoutMsec) {\n    /**\n     * @type {String}\n     *\n     * @description A property that specifies the cache name to which CacheSession operations should\n     * be sent.\n     */\n    this.cacheName = cacheName;\n\n    /**\n     * @type {Number}\n     *\n     * @description The maximum allowable message age in seconds to deliver in response to cache\n     * requests.  0 means no restriction on age.\n     *\n     * @default 0\n     */\n    this.maxAgeSec = maxAgeSec || 0;\n\n    /**\n     * @type {Number}\n     *\n     * @description The maximum number of messages per Topic to deliver in response to cache\n     * requests.  0 means no restriction on the number of messages.\n     *\n     * @default 1\n     */\n    this.maxMessages = (maxMessages === null || maxMessages === undefined) ? 1 : maxMessages;\n\n    /**\n     * @type {Number}\n     *\n     * @description The timeout for a cache request, in milliseconds.  The valid range for this\n     * property is >= 3000.\n     *\n     * @default 10000\n     */\n    this.timeoutMsec = timeoutMsec || 10000;\n\n    /**\n     * @private\n     * @type {Boolean}\n     * @description Whether to include other clusters in the request.\n     * @default true\n     */\n    this.includeOtherClusters = true;\n\n    /**\n     * @private\n     */\n    this.cachePrefix = '#P2P/CACHEINST/';\n  }\n\n  /**\n   * Gets the cache name to which {@link solace.CacheSession} requests should be sent, for\n   * sessions constructed using these properties.\n   *\n   * @returns {String} The cache name.\n   */\n  getCacheName() {\n    return this.cacheName;\n  }\n\n  /**\n   * Sets the cache name to which requests should be sent. Cannot be null or blank.\n   * @param {String} value The cache name to which requests should be sent.\n   */\n  setCacheName(value) {\n    this.cacheName = value;\n  }\n\n  /**\n   * Gets the maximum allowable message age for messages to be delivered in response to a request\n   * made on a {@link solace.CacheSession} that was constructed using these properties.  0 means no\n   * restriction on age.\n   *\n   * @returns {Number} The maximum allowable message age to be returned by an associated\n   * {@link solace.CacheSession}, or 0 for no restriction.\n   */\n  getMaxMessageAgeSec() {\n    return this.maxAgeSec;\n  }\n\n  /**\n   * Sets the maximum allowable message age. 0 means no restriction on age.\n   *\n   * @param {Number} value The maximum allowable message age, or 0 for no restriction.\n   */\n  setMaxMessageAgeSec(value) {\n    this.maxAgeSec = value;\n  }\n\n  /**\n   * Gets the maximum count of messages to be delivered, per {@link solace.Destination}, in\n   * response to a request issued on a {@link solace.CacheSession} constructed using these\n   * properties.  0 means no restriction on the number of messages.\n   *\n   * @returns {Number} The maximum number of messages per Topic to deliver, or 0 for no restriction.\n   */\n  getMaxMessages() {\n    return this.maxMessages;\n  }\n\n  /**\n   * Sets the maximum count of messages to be delivered per {@link solace.Destination} in response\n   * to a cache request. 0 means no restriction.\n   *\n   * @param {Number} value The maximum count of messages to deliver, or 0 for no restriction.\n   */\n  setMaxMessages(value) {\n    this.maxMessages = value;\n  }\n\n  /**\n   * Gets the timeout for requests issued on a {@link solace.CacheSession} constructed\n   * using these properties.\n   *  * The valid range is >= 3000.\n   *\n   * @returns {Number} The timeout, in milliseconds, for cache session requests.\n   */\n  getTimeoutMsec() {\n    return this.timeoutMsec;\n  }\n\n  /**\n   * Sets the timeout for requests.\n   *  * The valid range is >= 3000.\n   * @param {Number} value The timeout for requests.\n   */\n  setTimeoutMsec(value) {\n    this.timeoutMsec = value;\n  }\n\n}\n\nmodule.exports.CacheSessionProperties = CacheSessionProperties;\n","/**\n * A tuple associating subscriptions, correlation IDs and cache sessions.\n * @param {String} correlationID The correlation ID for this tuple\n * @param {Topic} topic The topic for this tuple\n * @param {CacheSession} cacheSession The cache session for this tuple\n * @private\n */\nclass CacheSessionSubscribeInfo {\n  constructor(correlationID, topic, cacheSession) {\n    Object.assign(this, {\n      correlationID,\n      topic,\n      cacheSession,\n    });\n  }\n}\n\nmodule.exports.CacheSessionSubscribeInfo = CacheSessionSubscribeInfo;\n","const MessageLib = require('solclient-message');\nconst SessionLib = require('solclient-session');\nconst SMFLib = require('solclient-smf');\nconst StatType = require('solclient-stats');\nconst {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n} = require('solclient-log');\nconst {\n  SDTField,\n  SDTFieldType,\n  SDTStreamContainer,\n} = require('solclient-sdt');\nconst { CacheCBInfo } = require('./cache-cb-info');\nconst { CacheContext } = require('./cache-context');\nconst { CacheGetResult } = require('./cache-get-result');\nconst { CacheLiveDataAction } = require('./cache-live-data-actions');\nconst { CacheRequest } = require('./cache-request');\nconst { CacheRequestResult } = require('./cache-request-result');\nconst { CacheRequestType } = require('./cache-request-types');\nconst { CacheReturnCode } = require('./cache-return-codes');\nconst { CacheReturnSubcode } = require('./cache-return-subcodes');\nconst { CacheSessionProperties } = require('./cache-session-properties');\nconst { CacheSessionSubscribeInfo } = require('./cache-session-subscribe-info');\nconst { Destination,\n        Topic } = require('solclient-destination');\n\nconst { CACHE_REQUEST_PREFIX } = CacheContext;\n\nconst noOp = () => undefined;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.Session#createCacheSession}</b>\n * <p>\n * A session for performing cache requests.\n *\n * Applications must use {@link solace.Session#createCacheSession} to construct this class.\n *\n * The supplied {@link solace.CacheSessionProperties} will be copied. Subsequent modifications\n * to the passed properties will not modify the session. The properties may be reused.\n *\n * @hideconstructor\n * @memberof solace\n */\nclass CacheSession {\n  /*\n   * @constructor\n   * @private\n   *\n   * @param {solace.CacheSessionProperties} props The properties for the cache session.\n   * @param {solace.Session} session The Session on which the CacheSession will issue\n   *  cache requests.\n   * @param {Object} privateInterface Private methods exposed to this CacheSession.\n   *\n   * @throws {solace.OperationError}\n   *  * if the parameters have an invalid type or value;\n   *    subcode {@link ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  constructor(props, session, privateInterface) {\n    CacheSession._validateProps(props);\n    const properties = new CacheSessionProperties(props.cacheName,\n                                                  props.maxAgeSec,\n                                                  props.maxMessages,\n                                                  props.timeoutMsec);\n    Object.assign(this,\n                  {\n                    _outstandingRequests:          {},\n                    _outstandingIDs:               {},\n                    _disposed:                     false,\n                    _nextMessageCallbackInfo:      null,\n                    _nextSessionEventCallbackInfo: null,\n                    _properties:                   properties,\n                    _session:                      session,\n                    _sessionIF:                    privateInterface,\n                  });\n    this._connectToSession(session);\n  }\n\n  /**\n   * @param {solace.Session} session The session to connect\n   * @private\n   */\n  _connectToSession(session) {\n    this._nextSessionEventCallbackInfo = session.getEventCBInfo();\n    this._nextMessageCallbackInfo = session.getMessageCBInfo();\n    session.setMessageCBInfo(new SessionLib.MessageRxCBInfo((_, message) => {\n      this._handleMessage(message);\n    }, this));\n    session.setEventCBInfo(this._createCompoundEventCB(this._nextSessionEventCallbackInfo));\n  }\n\n  /**\n   * Takes the session's existing event callback and sets it as the next delegate in a\n   * chain of responsibility. The next delegate could be the client application, or another\n   * cache session.\n   * @param {SessionEventCBInfo} nextDelegate The next event receiver in the chain\n   * @returns {SessionEventCBInfo} An event receiver that delegates to the supplied receiver\n   * @private\n   */\n  _createCompoundEventCB(nextDelegate) {\n    return new SessionLib.SessionEventCBInfo((session, sessionEvent, userObject, rfuObject) => {\n      this._handleSessionEvent(nextDelegate, session, sessionEvent, userObject, rfuObject);\n    }, null);\n  }\n\n  /**\n   * Modified chain of responsibility. Handles the event, then passes the event to the next\n   * delegate.\n   * @param {SessionEventCBInfo} nextDelegate The next delegate to notify\n   * @param {solace.Session} session The associated session\n   * @param {SessionEvent} sessionEvent The session event to dispatch\n   * @private\n   */\n  _handleSessionEvent(nextDelegate, session, sessionEvent /*, userObject, rfuObject */) {\n    const passEvent = this._processSessionEvent(session, sessionEvent);\n    if (!passEvent) {\n      return;\n    }\n    const cbUserObject = nextDelegate.userObject;\n    if (!cbUserObject) {\n      nextDelegate.sessionEventCBFunction(session, sessionEvent);\n    } else {\n      nextDelegate.sessionEventCBFunction(session, sessionEvent, cbUserObject);\n    }\n  }\n\n  /**\n   * @param {Message} message The message to forward\n   * @private\n   */\n  _sendToNextDelegate(message) {\n    const cbUserObject = this._nextMessageCallbackInfo.userObject;\n    if (!cbUserObject) {\n      this._nextMessageCallbackInfo.messageRxCBFunction(this._session, message);\n    } else {\n      this._nextMessageCallbackInfo.messageRxCBFunction(this._session, message, cbUserObject);\n    }\n  }\n\n  /**\n   * @param {solace.Session} session The associated session\n   * @param {SessionEvent} event The event to process\n   * @returns {Boolean} true if event should pass to next delegate\n   * @private\n   */\n  _processSessionEvent(session, event) {\n    switch (event.sessionEventCode) {\n      case SessionLib.SessionEventCode.SUBSCRIPTION_ERROR:\n      case SessionLib.SessionEventCode.SUBSCRIPTION_OK:\n        return this._checkSubscriptionStatus(event);\n      case SessionLib.SessionEventCode.DOWN_ERROR:\n        this.dispose();\n        return true;\n      default:\n        LOG_TRACE(`Unhandled session event: ${event.sessionEventCode}`);\n        return true;\n    }\n  }\n\n  /**\n   * @param {SessionEvent} event The event to check\n   * @returns {Boolean} `true` if event should pass to next delegate\n   * @private\n   */\n  _checkSubscriptionStatus(event) {\n    // Incremental checks for whether this is our subscription.\n    if ((event.correlationKey === null || event.correlationKey === undefined) ||\n        (!(event.correlationKey instanceof CacheSessionSubscribeInfo)) ||\n        (event.correlationKey.cacheSession !== this)) {\n      return true;\n    }\n    const request = this._getOutstandingRequest(event.correlationKey.correlationID);\n    if (!request) {\n      LOG_WARN(`No request found for subscription success on ${event.correlationKey.topic}`);\n      return true;\n    }\n    if (event.sessionEventCode === SessionLib.SessionEventCode.SUBSCRIPTION_OK) {\n      this._handleSubscriptionSuccess(request, event.correlationKey.topic);\n      return false;\n    }\n    this._handleSubscriptionError(request, event);\n    return false;\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The cache on which to register success\n   * @param {Topic} topic The topic on which to issue the request.\n   * @private\n   */\n  _handleSubscriptionSuccess(requestIn /*, topic */) {\n    // Null out this field and check completion status.\n    const request = requestIn;\n    request.subscriptionWaiting = null;\n    this._startCacheRequest(request);\n  }\n\n  /**\n   * @param {CacheRequest} request The cache request on which to register failure\n   * @private\n   */\n  _handleSubscriptionError(request/*, event */) {\n    this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.SUBSCRIPTION_ERROR);\n  }\n\n  /**\n   * @param {CacheRequest} request The cache request on which to check completion\n   * @private\n   */\n  _checkRequestCompletion(request) {\n    if (request.childRequests.length) {\n      // Not finished with spawned child requests.\n      LOG_DEBUG(`Awaiting termination of ${request.childRequests.length} children`);\n      return;\n    }\n    if (request.subscriptionWaiting) {\n      // Waiting for confirmation of subscription to a topic.\n      LOG_DEBUG('Awaiting subscription');\n      return;\n    }\n    if (request.timeoutHandle !== null && (!request.replyReceived)) {\n      LOG_DEBUG('Awaiting timeout');\n      return;\n    }\n    if (request.parentRequest) {\n      // We're no longer waiting for a child to complete.\n      const parent = request.parentRequest;\n      request.cancel();\n      this._unregisterRequest(request);\n      this._checkRequestCompletion(parent);\n      return;\n    }\n\n    // This is a parent request and it is done.\n    let code;\n    let subcode;\n    if (request.isSuspect) {\n      code = CacheReturnCode.INCOMPLETE;\n      subcode = CacheReturnSubcode.SUSPECT_DATA;\n    } else if (request.dataReceived) {\n      code = CacheReturnCode.OK;\n      if (request.liveDataFulfilled) {\n        subcode = CacheReturnSubcode.LIVE_DATA_FULFILL;\n      } else {\n        subcode = CacheReturnSubcode.REQUEST_COMPLETE;\n      }\n    } else if (request.replyReceived) {\n      code = CacheReturnCode.INCOMPLETE;\n      subcode = CacheReturnSubcode.NO_DATA;\n    } else {\n      throw new Error('Sanity: should never happen');\n    }\n    this._terminateRequest(request, code, subcode);\n  }\n\n  /**\n   * @param {CacheRequest} parentRequest The parent node for the new request\n   * @param {CacheGetResult} cacheGetResult The result of this request\n   * @private\n   */\n  _sendSeeOther(parentRequest, cacheGetResult) {\n    const clusterName = cacheGetResult.clusterNameStream.getNext().getValue();\n    // var root = parentRequest.getRootRequest();\n    LOG_DEBUG(`See Other for ${clusterName}. Sending child request`);\n    const childRequest = new CacheRequest(this,\n                                          CacheRequestType.GET_MSG_REQUEST,\n                                          parentRequest.requestID,\n                                          new CacheCBInfo(noOp, null),\n                                          parentRequest.liveDataAction,\n                                          parentRequest.topic,\n                                          clusterName);\n    // Add this request to its parent\n    parentRequest.addChild(childRequest);\n    // Start the request\n    this._registerRequest(childRequest);\n    childRequest.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                     this._properties.timeoutMsec);\n    this._startCacheRequest(childRequest, // request to send\n                            null, // no session ID\n                            null, // no specific instance target\n                            true); // don't return other clusters\n  }\n\n  /**\n   * @param {CacheRequest} parentRequest The parent node for the new request\n   * @param {CacheGetResult} cacheGetResult The result of this request\n   * @private\n   */\n  _sendGetNext(parentRequest, cacheGetResult) {\n    LOG_DEBUG('Cache result has more, sending GET_NEXT_MSG_REQUEST as child');\n    // This is how to trigger \"Invalid Session\":\n    //require(\"child_process\").execSync('sleep 11');\n    const nextRequest = new CacheRequest(this,\n                                         CacheRequestType.GET_NEXT_MSG_REQUEST,\n                                         parentRequest.requestID,\n                                         new CacheCBInfo(noOp, null),\n                                         parentRequest.liveDataAction,\n                                         parentRequest.topic,\n                                         parentRequest.cacheName);\n    // Set up parent-child relationship\n    parentRequest.addChild(nextRequest);\n    // Start the request\n    this._registerRequest(nextRequest);\n    nextRequest.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                    this._properties.timeoutMsec);\n    this._startCacheRequest(nextRequest, // request to send\n                            cacheGetResult.sessionID, // supplied session ID\n                            cacheGetResult.replyTo); // supplied cache instance target\n  }\n\n  /**\n   * @param {Message} message The message to inspect and handle\n   * @private\n   */\n  _handleMessage(message) {\n    // Determine if the message is associated with one of this session's requests\n    const correlationID = message.getCorrelationId();\n    const request = correlationID === null || correlationID === undefined\n      ? null\n      : this._outstandingRequests[correlationID];\n\n    // This could be live data on a relevant topic.  Check that.\n    if (!request) {\n      if (this._relevantLiveData(message)) {\n        this._sendToNextDelegate(message);\n      }\n      return;\n    }\n\n    // It's ours!\n    LOG_DEBUG(`Processing reply to ${request}`);\n    // bug 36404: We have a response. Cancel the timeout for this request.\n    request.clearRequestTimeout();\n    const streamField = message.getSdtContainer();\n    const stream = streamField && streamField.getValue();\n    if (!stream) {\n      LOG_INFO(\n        `Invalid message format for cache response: no SDT container (${\n        streamField}) or stream (${stream})`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE);\n    }\n    // The session will never see this reply, so we need to update the stats\n    // from here.\n    this._incStat(StatType.RX_REPLY_MSG_RECVED);\n    request.replyReceived = true;\n\n    // If the request was fulfilled by live data, discard the reply and stop processing\n    // the response.\n    if (request.getRootRequest().liveDataFulfilled) {\n      this._incStat(StatType.CACHE_REQUEST_FULFILL_DISCARD_RESPONSE);\n      this._checkRequestCompletion(request);\n      return;\n    }\n\n    if (!stream) {\n      LOG_INFO('Invalid cache response did not fulfill request. Skipping response processing');\n      return;\n    }\n\n    try {\n      // Fill the result object with values from the result stream.\n      const result = new CacheGetResult();\n      result.readFromStream(stream);\n      result.replyTo = message.getReplyTo();\n      if (result.responseString) {\n        LOG_DEBUG(`Cluster response: ${result.responseString}`);\n      }\n        if (result.responseCode === 7 || result.responseString == \"Invalid Session\") {\n          LOG_INFO(`Cluster response indicates invalid session: ${result.responseString} code: ${result.responseCode}`);\n          this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.INVALID_SESSION);\n        }\n      // Apply the isSuspect flag. Don't clear it if the result is already suspect.\n      request.isSuspect = request.isSuspect || result.isSuspect;\n      // Get any inner messages.\n      const messages = CacheSession._decodeMessageStream(request, result);\n      // Update statistics.\n      this._incStat(StatType.RX_CACHE_MSG, messages.length);\n      // If we have more results to come, send a get next request.\n      if (result.hasMore) {\n        this._sendGetNext(request, result);\n      }\n      // If we have more clusters to visit, send requests to those clusters.\n      if (result.clusterNameStream) {\n        LOG_DEBUG('Receiving cluster stream');\n        while (result.clusterNameStream.hasNext()) {\n          this._sendSeeOther(request, result);\n        }\n      }\n      // Forward any retrieved messages.\n      if (messages) {\n        messages.forEach((m) => {\n          this._sendToNextDelegate(m);\n        });\n      }\n      this._checkRequestCompletion(request);\n    } catch (exception) {\n      LOG_INFO(`Invalid message format for cache response: ${exception.stack}`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE);\n    }\n  }\n\n  /**\n   * @param {Message} message The message to inspect and handle\n   * @returns {Boolean} `true` if the next delegate should handle this message\n   * @private\n   */\n  _relevantLiveData(message) {\n    // If the next message processor does not belong to a cache\n    // session, and this is a CRQ message, suppress it.\n    if (message.getCorrelationId() &&\n        message.getCorrelationId().startsWith(CACHE_REQUEST_PREFIX) &&\n        !(this._nextMessageCallbackInfo.userObject instanceof CacheSession)) {\n      LOG_WARN('DROP: Dropping CRQ reply due to no remaining Cache Session processors on message ' +\n               'callback chain');\n      this._incStat(StatType.RX_REPLY_MSG_DISCARD);\n      return false;\n    }\n    // Otherwise, assume the message should flow through.\n    // If all _performLiveDataAction calls return true, we return true;\n    return Object.keys(this._outstandingRequests).every(checkCID =>\n      this._performLiveDataAction(this._outstandingRequests[checkCID], message));\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The cache request for which to perform the action\n   * @param {Message} message The message to process on the request\n   * @returns {Boolean} true if message should flow through after action.\n   * @private\n   */\n  _performLiveDataAction(requestIn, message) {\n    const request = requestIn;\n    request.dataReceived = true;\n    switch (request.liveDataAction) {\n      case CacheLiveDataAction.QUEUE:\n        request.queuedLiveData.push(message);\n        return false;\n\n      case CacheLiveDataAction.FULFILL:\n        if (!request.liveDataFulfilled) {\n          this._fulfillRequest(request);\n        }\n        return true;\n\n      default:\n        return true;\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request to fulfill\n   * @private\n   */\n  _fulfillRequest(requestIn) {\n    const request = requestIn;\n    request.liveDataFulfilled = true;\n    this._trackCompletionStats(CacheReturnCode.OK, CacheReturnSubcode.LIVE_DATA_FULFILL);\n    // We have more work to do here -- we need to return the live data first.\n    // Schedule the notification for later.\n    setTimeout(() => {\n      CacheSession._notifyCallback(request,\n                                   CacheReturnCode.OK,\n                                   CacheReturnSubcode.LIVE_DATA_FULFILL,\n                                   request.getTopic(),\n                                   null);\n    }, 0);\n  }\n\n  /**\n   * Disposes the session.  No cache requests will be sent by this CacheSession after it is\n   * _disposed.\n   *\n   * Any subsequent operations on the session will throw {OperationError}.\n   *\n   * Any pending operations will immediately terminate, returning\n   *   * {@link solace.CacheRequestResult}\n   *     * #returnCode === {@link solace.CacheReturnCode.INCOMPLETE}\n   *     * #subcode === {@link solace.CacheReturnSubcode.CACHE_SESSION_DISPOSED}\n   * @throws {solace.OperationError} if the CacheSession is already _disposed.\n   */\n  dispose() {\n    const toTerminate = Object.keys(this._outstandingRequests)\n      .map(correlationID => this._outstandingRequests[correlationID])\n      .filter(request => request instanceof CacheRequest);\n    toTerminate.forEach((request) => {\n      this._terminateRequest(request,\n                             CacheReturnCode.INCOMPLETE,\n                             CacheReturnSubcode.CACHE_SESSION_DISPOSED);\n    });\n    this._outstandingRequests = [];\n    // Restore original listeners\n    this._session.setEventCBInfo(this._nextSessionEventCallbackInfo);\n    this._session.setMessageCBInfo(this._nextMessageCallbackInfo);\n    // Set _disposed\n    this._disposed = true;\n  }\n\n  /**\n   * Gets the cache session properties.\n   *\n   * @returns {solace.CacheSessionProperties} The properties for the session.\n   * @throws {solace.OperationError} if the CacheSession is disposed.\n   */\n  getProperties() {\n    return this._properties;\n  }\n\n  /**\n   * Issues an asynchronous cache request. The result of the request will be returned via the\n   * listener. Messages returned as a result of issuing the request will be returned to the\n   * application via the {@link solace.MessageRxCBInfo} associated with this\n   * {@link solace.CacheSession}'s {@link solace.Session}\n   *\n   * @param {Number} requestID The application-assigned ID number for the request.\n   * @param {solace.Destination} topic The topic destination for which the cache request will be\n   *    made.\n   * @param {Boolean} subscribe If true, the session will subscribe to the given {Topic}, if it is\n   * not already subscribed, before performing the cache request.\n   * @param {solace.CacheLiveDataAction} liveDataAction The action to perform when the\n   *    {@link solace.CacheSession} receives live data on the given topic.\n   * @param {solace.CacheCBInfo} cbInfo Callback info for the cache request.\n   *\n   * @throws {solace.OperationError} In the following cases:\n   * * If the CacheSession is disposed.\n   *    Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * If one or more parameters were invalid.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}\n   * * If the supplied topic and live data action cannot be combined.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n   * * If the supplied topic or live data action cannot be used given the current outstanding\n   *    requests.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n   */\n  sendCacheRequest(requestID, topic, subscribe, liveDataAction, cbInfo) {\n    if (arguments.length !== 5) {\n      throw new OperationError(`sendCacheRequest() invoked with an illegal argument count of ${\n        arguments.length}`);\n    }\n    if (typeof subscribe !== 'boolean') {\n      throw new OperationError(\n        `Invalid subscribe flag argument, should be a boolean but was ${typeof subscribe}`);\n    }\n    if (typeof requestID !== 'number' || Number.isNaN(requestID)) {\n      throw new OperationError('Invalid requestID', ErrorSubcode.PARAMETER_INVALID_TYPE, null);\n    }\n    if (this._outstandingIDs[requestID]) {\n      throw new OperationError('Request already in progress with this requestID');\n    }\n    if (!(topic instanceof Destination)) {\n      throw new OperationError('Invalid topic', ErrorSubcode.PARAMETER_INVALID_TYPE, (typeof topic));\n    }\n    topic.validate();\n    if (!(liveDataAction === CacheLiveDataAction.FLOW_THRU || liveDataAction ===\n        CacheLiveDataAction.FULFILL || liveDataAction === CacheLiveDataAction.QUEUE)) {\n      throw new OperationError('Invalid live data action', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (topic.isWildcarded() && liveDataAction !== CacheLiveDataAction.FLOW_THRU) {\n      throw new OperationError('Wildcarded topic not supported for this live data action',\n        ErrorSubcode.PARAMETER_CONFLICT);\n    }\n    if (!(cbInfo instanceof CacheCBInfo)) {\n      throw new OperationError('Callback info was not an instance of CacheCBInfo');\n    }\n    if (this._disposed) {\n      CacheSession._notifyCallbackError(cbInfo, requestID, CacheReturnCode.FAIL,\n                                        CacheReturnSubcode.CACHE_SESSION_DISPOSED, topic,\n                                        'Cache request failed: the cache session is disposed.');\n      return;\n    }\n    if (this._session._disposed) {\n      CacheSession._notifyCallbackError(cbInfo, requestID, CacheReturnCode.FAIL,\n                                        CacheReturnSubcode.INVALID_SESSION, topic,\n                                        'Cache request failed: the session is disposed.');\n      return;\n    }\n\n    const request = new CacheRequest(this,\n      CacheRequestType.GET_MSG_REQUEST,\n      requestID,\n      cbInfo,\n      liveDataAction,\n      topic,\n      this._properties.cacheName);\n\n    const matchingRequestKeys = Object.keys(this._outstandingRequests).filter(key =>\n      this._outstandingRequests[key].topic.getName() === topic.getName());\n\n    if (matchingRequestKeys.length) {\n      // Topic name matches mean a conflict unless both requests are FLOW_THRU\n      const conflictKeys = (\n        liveDataAction !== CacheLiveDataAction.FLOW_THRU\n          ? matchingRequestKeys\n          : matchingRequestKeys.filter(k =>\n            this._outstandingRequests[k].liveDataAction !== CacheLiveDataAction.FLOW_THRU));\n      if (conflictKeys.length) {\n        const conflictRequest = this._outstandingRequests[conflictKeys[0]];\n        LOG_WARN(`Existing request ${conflictRequest} conflicts. Rejecting request ${request}`);\n         // Register this request so that it is not dismissed as an orphan.\n        this._registerRequest(request);\n        this._terminateRequest(request,\n                               CacheReturnCode.FAIL,\n                               CacheReturnSubcode.REQUEST_ALREADY_IN_PROGRESS);\n        return;\n      }\n    }\n\n    this._registerRequest(request);\n    request.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                this._properties.timeoutMsec);\n    if (subscribe) {\n      const waitingForSubscribeInfo = new CacheSessionSubscribeInfo(request.correlationID, topic,\n        this);\n      request._subscriptionWaiting = waitingForSubscribeInfo;\n      this._session.subscribe(topic, true, waitingForSubscribeInfo);\n      return;\n    }\n    this._startCacheRequest(request);\n  }\n\n  /**\n   * @param {solace.Session} session The session associated with the request\n   * @param {SessionEvent} sessionEvent The session event\n   * @param {CacheRequest} userObject The user-specified context object\n   * @private\n   */\n  _handleCacheRequestFailed(session, sessionEvent, userObject /*, rfuObject */) {\n    this._terminateRequest(userObject.getRequestID(),\n                           CacheReturnCode.FAIL,\n                           CacheReturnSubcode.ERROR_RESPONSE);\n  }\n\n  /**\n   * @param {CacheRequest} request The new request to register\n   * @private\n   */\n  _registerRequest(request) {\n    this._outstandingRequests[request.correlationID] = request;\n    if (!request.parentRequest) {\n      this._outstandingIDs[request.requestID] = request;\n    }\n  }\n\n  /**\n   * @param {Number} correlationID The ID of an existing request\n   * @returns {CacheRequest} The existing request with the given ID\n   * @private\n   */\n  _getOutstandingRequest(correlationID) {\n    return this._outstandingRequests[correlationID];\n  }\n\n  /**\n   *\n   * @param {CacheRequest} request The request to start\n   * @param {?Number} sessionID Only when returned from a cache instance as part of a\n   * previous message\n   * @param {?Topic} destination Only when required by a cache reply\n   * @param {?Boolean} suppressClusters True when other clusters should be excluded from\n   * the response, as in a request resulting from a \"see other\"\n   * @private\n   */\n  _startCacheRequest(request, sessionID, destination, suppressClusters) {\n    const message = new MessageLib.Message();\n\n    // Prepare message\n    message.setCorrelationId(request.correlationID);\n    if (destination) {\n      message.setDestination(destination);\n    } else {\n      message.setDestination(\n        Topic.createFromName(this._properties.cachePrefix + request.cacheName));\n    }\n    message.setReplyTo(Topic.createFromName(this._session.getSessionProperties().p2pInboxInUse));\n    message.setDeliverToOne(request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST);\n\n    // Prepare stream container\n    const stream = new SDTStreamContainer();\n    stream.addField(SDTFieldType.UINT32, request.cacheMessageType);\n    stream.addField(SDTFieldType.UINT32, CacheRequest.VERSION);\n    stream.addField(SDTFieldType.STRING, request.topic.getName());\n    stream.addField(SDTFieldType.UINT32, CacheRequest.REPLY_SIZE_LIMIT);\n\n    if (typeof sessionID === 'number') {\n      LOG_DEBUG(`Including session ID: ${sessionID}`);\n      stream.addField(SDTFieldType.UINT32, sessionID);\n    }\n\n    stream.addField(SDTFieldType.UINT32, this._properties.maxMessages);\n    stream.addField(SDTFieldType.UINT32, this._properties.maxAgeSec);\n    if (request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST) {\n      stream.addField(SDTFieldType.BOOL,\n                      this._properties.includeOtherClusters && (!suppressClusters));\n    }\n\n    stream.addField(SDTFieldType.BOOL, false); // includeTimestamps, 6.17.1\n    if (request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST) {\n      stream.addField(SDTFieldType.UINT32, Math.round(this._properties.timeoutMsec / 1000));\n    }\n\n    // Load stream container\n    message.setSdtContainer(SDTField.create(SDTFieldType.STREAM, stream));\n    try {\n      LOG_DEBUG(`Sending ${request}`);\n      this._session.send(message);\n\n      if (!request.parentRequest) { // Don't count child requests in CACHE_REQUEST_SENT total\n        this._incStat(StatType.CACHE_REQUEST_SENT);\n      }\n    } catch (e) {\n      LOG_INFO(`Failed to send request: ${e.message}`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE, e);\n    }\n  }\n\n  /**\n   * Increments a stat.\n   * @param  {String} statType The stat to increment\n   * @param  {Number} value    The amount by which to increment the state\n   * @private\n   */\n  _incStat(statType, value) {\n    if (!this._session) {\n      LOG_DEBUG(\"Can't log stat: session is disposed\");\n      return;\n    }\n    if (!this._sessionIF) {\n      LOG_INFO(\"Can't log stat: session statistics not available\");\n      return;\n    }\n    this._sessionIF.incStat(statType, value);\n  }\n\n  /**\n   * Unregisters the given request.\n   * @param  {CacheRequest} request The request to unreguster\n   * @private\n   */\n  _unregisterRequest(request) {\n    delete this._outstandingRequests[request.correlationID];\n    delete this._outstandingIDs[request.requestID];\n  }\n\n  /**\n   * @param {CacheReturnCode} returnCode The return code for this completion\n   * @param {CacheReturnSubcode} subcode The subcode for this completion\n   * @private\n   */\n  _trackCompletionStats(returnCode, subcode) {\n    switch (returnCode) {\n      case CacheReturnCode.OK:\n        this._incStat(StatType.CACHE_REQUEST_OK_RESPONSE);\n        if (subcode === CacheReturnSubcode.LIVE_DATA_FULFILL) {\n          this._incStat(StatType.CACHE_REQUEST_LIVE_DATA_FULFILL);\n        }\n        break;\n      case CacheReturnCode.INCOMPLETE:\n        this._incStat(StatType.CACHE_REQUEST_INCOMPLETE_RESPONSE);\n        break;\n      case CacheReturnCode.FAIL:\n        this._incStat(StatType.CACHE_REQUEST_FAIL_RESPONSE);\n        break;\n      default:\n        throw new Error('Sanity: no return code supplied');\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request to terminate\n   * @param {CacheReturnCode} returnCode The return code for this operation\n   * @param {CacheReturnSubcode} subcode The subcode for this operation\n   * @param {Error} error Any error associated with this operation\n   * @private\n   */\n  _terminateRequest(requestIn, returnCode, subcode, error) {\n    const request = requestIn.getRootRequest();\n    if (!this._outstandingRequests[request.correlationID]) {\n      // Request is unknown or was previously terminated\n      return;\n    }\n    const cbInfo = request.cbInfo;\n    if (!cbInfo) {\n      LOG_WARN(`No callback info provided for ${request}. Cannot notify`);\n      return; // Cannot continue\n    }\n    const callback = cbInfo.getCallback();\n    if (!callback) {\n      LOG_WARN(`No callback provided for ${request}. Cannot notify`);\n      return; // Cannot continue\n    }\n    const topic = request.getTopic();\n    if (!topic) {\n      LOG_WARN(`No topic provided for ${request}`);\n    }\n    request.queuedLiveData.forEach(data => this._sendToNextDelegate(data));\n\n    // Unregister before callback so that the client application can treat the request ID\n    // as \"freed\" and reuse it\n    request.cancel();\n    this._unregisterRequest(request);\n\n    if (!request.liveDataFulfilled) {\n      // All of this has already been done on fulfill.\n      this._trackCompletionStats(returnCode, subcode);\n      CacheSession._notifyCallback(request, returnCode, subcode, topic, error);\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request with a result to decode\n   * @param {CacheGetResult} result The result to decode\n   * @returns {Array.<Message>} The messages contained in the result\n   * @private\n   */\n  static _decodeMessageStream(requestIn, result) {\n    if (!result.messageStream) {\n      return [];\n    }\n\n    LOG_DEBUG('Receiving messages');\n    const messages = [];\n    const request = requestIn;\n    while (result.messageStream.hasNext()) {\n      request.dataReceived = true;\n      const data = result.messageStream.getNext().getValue();\n      const innerMessage = SMFLib.Codec.Decode.decodeCompoundMessage(data, 0);\n      if (!innerMessage) {\n        continue;\n      }\n      const cacheStatus = result.isSuspect\n        ? MessageLib.MessageCacheStatus.SUSPECT\n        : MessageLib.MessageCacheStatus.CACHED;\n      innerMessage._setCacheStatus(cacheStatus);\n      innerMessage._setCacheRequestID(request.requestID);\n      messages.push(innerMessage);\n    }\n    LOG_DEBUG(`${messages.length} cached messages received`);\n    return messages;\n  }\n\n  /**\n   * Closure call context; `this` will be redefined\n   * @param {CacheRequest} cacheRequest The request that timed out\n   * @private\n   */\n  static _handleCacheRequestTimeout(cacheRequest) {\n    const context = cacheRequest.cacheSession;\n    if (!context._getOutstandingRequest(cacheRequest.correlationID)) {\n      LOG_INFO(`Timeout for ${cacheRequest} was not unregistered. Ignoring`);\n      // already completed\n      return;\n    }\n\n    // bug 36404: Cache request timeout is to be interpreted as timeout per session request-reply,\n    // not timeout per cache request-reply.\n    // Implementation: Timeouts on parent requests are cancelled when a child request is spawned.\n    // Timeouts on child requests cause the root request to fail.\n    LOG_INFO(`Request ${cacheRequest} timed out`);\n    context._terminateRequest(cacheRequest.getRootRequest(), CacheReturnCode.INCOMPLETE,\n                              CacheReturnSubcode.REQUEST_TIMEOUT);\n  }\n\n\n  /**\n   * @param {CacheRequest} request The request that is notifying\n   * @param {CacheReturnCode} returnCode The return code for the notification\n   * @param {CacheReturnSubcode} subcode The subcode for the notification\n   * @param {Destination} topic The topic associated with the notification\n   * @param {Error} error Any error associated with the notification\n   * @private\n   */\n  static _notifyCallback(request, returnCode, subcode, topic, error) {\n    const cbInfo = request.cbInfo;\n    const callback = cbInfo.getCallback();\n    callback(request.requestID,\n             new CacheRequestResult(returnCode, subcode, topic, error),\n             cbInfo.getUserObject());\n  }\n\n  /**\n   * @param {solace.CacheCBInfo} cbInfo Callback info for the cache request.\n   * @param {Number} requestID The application-assigned ID number for the request\n   * @param {CacheReturnCode} returnCode The return code for the notification\n   * @param {CacheReturnSubcode} subcode The subcode for the notification\n   * @param {Destination} topic The topic associated with the notification\n   * @param {Error} error Any error associated with the notification\n   * @private\n   */\n  static _notifyCallbackError(cbInfo, requestID, returnCode, subcode, topic, error) {\n    const callback = cbInfo.getCallback();\n    callback(requestID,\n             new CacheRequestResult(returnCode, subcode, topic, error),\n             cbInfo.getUserObject());\n  }\n\n  /**\n   * Validates the cache session properties.\n   * @param {solace.CacheSessionProperties} props The properties to validate\n   * @private\n   */\n  static _validateProps(props) {\n    if ((typeof (props.cacheName) !== 'string')) {\n      throw new OperationError('Invalid parameter type for cacheName', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    // Create from name will throw if the cacheName is invalid.  This performs more checking than\n    // the legacy API did, but I think it is all justified as we shouldn't be able to use anything\n    // that would be rejected here as a cacheName.\n    if (Topic.createFromName(props.cacheName).isWildcarded()) {\n      throw new OperationError(\n        `Invalid cacheName '${props.cacheName}'. The cacheName cannot be wildcarded`,\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.maxAgeSec) !== 'number')) {\n      throw new OperationError('Invalid parameter type for maxAgeSec', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.maxAgeSec < 0) {\n      throw new OperationError('Invalid value for maxAgeSec; must be >= 0', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.maxMessages) !== 'number')) {\n      throw new OperationError('Invalid parameter type for maxMessages', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.maxMessages < 0) {\n      throw new OperationError('Invalid value for maxMessages; must be >= 0', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.timeoutMsec) !== 'number')) {\n      throw new OperationError('Invalid parameter type for timeoutMsec', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.timeoutMsec < 3000) {\n      throw new OperationError('Invalid value for timeoutMsec; must be >= 3000', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  }\n\n}\n\nmodule.exports.CacheSession = CacheSession;\n","const { Stats } = require('./lib/stats.js');\nconst { StatsByMode } = require('./lib/stat-bymode');\nconst { StatType } = require('./lib/stat-types');\n\nmodule.exports = {\n  Stats,\n  StatType,\n  StatsByMode,\n};\n","const { StatType } = require('./stat-types');\n\nmodule.exports = {\n  StatsByMode: {\n    STAT_TX_BYMODE_MSGS: [\n      StatType.TX_DIRECT_MSGS,\n      StatType.TX_PERSISTENT_MSGS,\n      StatType.TX_NONPERSISTENT_MSGS,\n    ],\n    STAT_TX_BYMODE_BYTES: [\n      StatType.TX_DIRECT_BYTES,\n      StatType.TX_PERSISTENT_BYTES,\n      StatType.TX_NONPERSISTENT_BYTES,\n    ],\n    STAT_TX_BYMODE_REDELIVERED: [\n      StatType.TX_DIRECT_MSGS,     // unused placeholder, direct messsages are not redelivered\n      StatType.TX_PERSISTENT_REDELIVERED,\n      StatType.TX_NONPERSISTENT_REDELIVERED,\n    ],\n    STAT_TX_BYMODE_BYTES_REDELIVERED: [\n      StatType.TX_DIRECT_BYTES,     // unused placeholder, direct messsages are not redelivered\n      StatType.TX_PERSISTENT_BYTES_REDELIVERED,\n      StatType.TX_NONPERSISTENT_BYTES_REDELIVERED,\n    ],\n    STAT_RX_BYMODE_MSGS: [\n      StatType.RX_DIRECT_MSGS,\n      StatType.RX_PERSISTENT_MSGS,\n      StatType.RX_NONPERSISTENT_MSGS,\n    ],\n    STAT_RX_BYMODE_BYTES: [\n      StatType.RX_DIRECT_BYTES,\n      StatType.RX_PERSISTENT_BYTES,\n      StatType.RX_NONPERSISTENT_BYTES,\n    ],\n  },\n};\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Statistics for sent/received messages and control operations.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst StatType = {\n\n  // ------- SMF and Direct Messaging\n\n  /**\n   * Count of bytes sent as part of data messages.\n   */\n  TX_TOTAL_DATA_BYTES:            0,\n  /**\n   * Count of data messages sent.\n   */\n  TX_TOTAL_DATA_MSGS:             1,\n  /**\n   * Count of bytes sent as part of direct data messages.\n   */\n  TX_DIRECT_BYTES:                2,\n  /**\n   * Count of direct data messages sent.\n   */\n  TX_DIRECT_MSGS:                 3,\n  /**\n   * Count of bytes sent as part of control messages.\n   */\n  TX_CONTROL_BYTES:               4,\n  /**\n   * Count of control messages sent.\n   */\n  TX_CONTROL_MSGS:                5,\n  /**\n   * Count of request messages sent.\n   */\n  TX_REQUEST_SENT:                6,\n  /**\n   * Count of request timeouts that occurred.\n   */\n  TX_REQUEST_TIMEOUT:             7,\n  /**\n   * Count of bytes received as part of data messages.\n   */\n  RX_TOTAL_DATA_BYTES:            8,\n  /**\n   * Count of data messages received.\n   */\n  RX_TOTAL_DATA_MSGS:             9,\n  /**\n   * Count of bytes received as part of direct data messages.\n   */\n  RX_DIRECT_BYTES:                10,\n  /**\n   * Count of direct data messages received.\n   */\n  RX_DIRECT_MSGS:                 11,\n  /**\n   * Count of bytes received as part of control messages.\n   */\n  RX_CONTROL_BYTES:               12,\n  /**\n   * Count of control messages received.\n   */\n  RX_CONTROL_MSGS:                13,\n  /**\n   * Count discard message indications received on incoming messages.\n   */\n  RX_DISCARD_MSG_INDICATION:      14,\n  /**\n   * Count of reply messaged received.\n   */\n  RX_REPLY_MSG_RECVED:            15,\n  /**\n   * Count of received reply messages that were discarded.\n   */\n  RX_REPLY_MSG_DISCARD:           16,\n  /**\n   * @description\n   * Count of messages discarded due to the presence of an unknown element or\n   * unknown protocol in the SMF header.\n   */\n  RX_DISCARD_SMF_UNKNOWN_ELEMENT: 17,\n\n  // ------- SolCache Session\n\n  /**\n   * @description\n   * Count of cache requests sent. One conceptual request (i.e. one API call)\n   * may involve many requests and replies.\n   */\n  CACHE_REQUEST_SENT:                     18,\n  /**\n   * @description\n   * Count of OK responses to cache requests.\n   */\n  CACHE_REQUEST_OK_RESPONSE:              19,\n  /**\n   * @description\n   * Count of cache requests that returned a failure response.\n   */\n  CACHE_REQUEST_FAIL_RESPONSE:            20,\n  /**\n   * @description\n   * Count of cache replies discarded because a request has been fulfilled.\n   */\n  CACHE_REQUEST_FULFILL_DISCARD_RESPONSE: 21,\n  /**\n   * @description\n   * Count of cached messages delivered to the application.\n   */\n  RX_CACHE_MSG:                           22,\n  /**\n   * @description\n   * Count of cache requests that were incomplete.\n   */\n  CACHE_REQUEST_INCOMPLETE_RESPONSE:      23,\n  /**\n   * @description\n   * The cache session operation completed when live data arrived on the requested topic.\n   */\n  CACHE_REQUEST_LIVE_DATA_FULFILL:        24,\n\n  // ------ Guaranteed Messaging\n\n  /**\n   * Count of bytes sent as part of persistent data messages.\n   */\n  TX_PERSISTENT_BYTES:                25,\n  /**\n   * Count of persistent data messages sent.\n   */\n  TX_PERSISTENT_MSGS:                 26,\n  /**\n   * Count of non-persistent data bytes sent.\n   */\n  TX_NONPERSISTENT_BYTES:             27,\n  /**\n   * Count of non-persistent data messages sent.\n   */\n  TX_NONPERSISTENT_MSGS:              28,\n  /**\n   * The number of bytes redelivered in Persistent messages.\n   */\n  TX_PERSISTENT_BYTES_REDELIVERED:    29,\n  /**\n   * The number of Persistent messages redelivered.\n   */\n  TX_PERSISTENT_REDELIVERED:          30,\n  /**\n   * The number of bytes redelivered in Non-Persistent messages.\n   */\n  TX_NONPERSISTENT_BYTES_REDELIVERED: 31,\n  /**\n   * The number of Non-Persistent messages redelivered.\n   */\n  TX_NONPERSISTENT_REDELIVERED:       32,\n  /**\n   * The number of acknowledgments received.\n   */\n  TX_ACKS_RXED:                       33,\n  /**\n   * The number of times the transmit window closed.\n   */\n  TX_WINDOW_CLOSE:                    34,\n  /**\n   * The number of times the acknowledgment timer expired.\n   */\n  TX_ACK_TIMEOUT:                     35,\n  /**\n   * Count of bytes received as part of persistent data messages.\n   */\n  RX_PERSISTENT_BYTES:                36,\n  /**\n   * Count of persistent data messages received.\n   */\n  RX_PERSISTENT_MSGS:                 37,\n  /**\n   * Count of bytes received as part of non-persistent data messages.\n   */\n  RX_NONPERSISTENT_BYTES:             38,\n  /**\n   * Count of non-persistent data messages received.\n   */\n  RX_NONPERSISTENT_MSGS:              39,\n  /**\n   * Count of acknowledgements sent to the Solace Message Router\n   * for guaranteed messages received by the API.\n   */\n  RX_ACKED:                           40,\n  /**\n   * Count of guaranteed messages discarded for being duplicates.\n   */\n  RX_DISCARD_DUPLICATE:               41,\n  /**\n   * Count of guaranteed messages discarded due to no match message consumer for the message.\n   */\n  RX_DISCARD_NO_MATCHING_CONSUMER:    42,\n  /**\n   * Count of guaranteed messages discarded for being received out of order.\n   */\n  RX_DISCARD_OUT_OF_ORDER:            43,\n};\n\nmodule.exports.StatType = Enum.new(StatType);\n","const { EventEmitter } = require('solclient-events');\nconst { StatType } = require('./stat-types');\n\n/**\n * @private\n */\nclass Stats extends EventEmitter {\n  constructor(parent) {\n    super();\n\n    this._parent = parent;\n    this._statsMap = [];\n    StatType.values.forEach((value) => {\n      this._statsMap[value] = 0;\n    });\n  }\n\n  resetStats() {\n    this.emit('reset');\n    // The stat types are sequential, so .fill(0) would work, but the API design\n    // doesn't really guarantee this so overwriting every existing index is safer.\n    this._statsMap = this._statsMap.map(() => 0);\n  }\n\n  incStat(statType, value = 1) {\n    // should we validate statType?\n    this._statsMap[statType] += value;\n    if (this._parent) {\n      this._parent.incStat(statType, value);\n    }\n  }\n\n  getStat(statType) {\n    return this._statsMap[statType];\n  }\n\n}\n\nmodule.exports.Stats = Stats;\n","const { SMFClient } = require('./lib/smf-client');\nconst { TransportCapabilities } = require('./lib/transport-capabilities');\nconst { TransportError } = require('./lib/transport-error');\nconst { TransportFactory } = require('./lib/transport-factory');\nconst { TransportProtocol } = require('./lib/transport-protocols');\nconst { TransportReturnCode } = require('./lib/transport-return-codes');\nconst { TransportSessionEventCode } = require('./lib/transport-session-event-codes');\nconst { TransportSessionStates } = require('./lib/transport-session-states');\n\n\nmodule.exports.SMFClient = SMFClient;\nmodule.exports.TransportCapabilities = TransportCapabilities;\nmodule.exports.TransportError = TransportError;\nmodule.exports.TransportFactory = TransportFactory;\nmodule.exports.TransportProtocol = TransportProtocol;\nmodule.exports.TransportReturnCode = TransportReturnCode;\nmodule.exports.TransportSessionEventCode = TransportSessionEventCode;\nmodule.exports.TransportSessionStates = TransportSessionStates;\n","class BaseSMFClient {\n  constructor(rxSmfCB, rxMessageErrorCB, session) {\n    this.reset();\n    this._rxSmfCB = rxSmfCB; // callback for parsed msg\n    this._rxMessageErrorCB = rxMessageErrorCB; // invalid UH, etc.\n    this._session = session;\n  }\n\n  reset() {\n    this._correlationCounter = 0;\n  }\n\n  nextCorrelationTag() {\n    // Login uses the max value as a sentinel, so wrap around early\n    if (++this._correlationCounter >= BaseSMFClient.SMF_MAX_CORRELATION) {\n      this._correlationCounter = 1;\n    }\n    return this._correlationCounter;\n  }\n}\n\nBaseSMFClient.SMF_MAX_CORRELATION = 0xFFFFFF;\n\n\nmodule.exports.BaseSMFClient = BaseSMFClient;\n","// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n\nfunction concatFrom(list, from, length) {\n  const buffer = BufferImpl.allocUnsafe(length);\n  let pos = 0;\n  let i;\n  const buf0 = list[0];\n  pos += buf0.copy(buffer, 0, from, buf0.length);\n  for (i = 1; i < list.length && pos < length; i++) {\n    const buf = list[i];\n    pos += buf.copy(buffer, pos, 0, buf.length);\n  }\n  return buffer;\n}\n\n\nfunction readUInt32BEFrag(bufList, listOffsetParam, byteIndexParam) {\n  let listOffset = listOffsetParam;\n  let byteIndex = byteIndexParam;\n  const bytes = []; // the 4 bytes\n  let i = 0;\n  for (i = 0; i < 4; i++) {\n    while (bufList[listOffset].length <= byteIndex) {\n      byteIndex -= bufList[listOffset].length;\n      listOffset++;\n      if (listOffset >= bufList.length) { return null; } // should not happen.\n    }\n    bytes[i] = bufList[listOffset].readUInt8(byteIndex);\n    byteIndex++;\n  }\n  // shift the bytes into a 32 bit number, BE.\n  return (bytes[0] << 24) + (bytes[1] << 16) + (bytes[2] << 8) + bytes[3];\n}\n\n/**\n * Simplified FIFO of buffers.\n * Holds transport buffers without copying, allows 12 byte peeks for header and length detection.\n * For pops either a slice is returned if possible,\n * or a copy if the message spans transport buffers.\n * Pushes are refused when over capacity.\n * @internal\n */\nclass BufferQueue {\n  constructor(maxSize) {\n    let _queue = [];\n    const _maxSize = maxSize;\n    let _size = 0;\n    let _offset = 0;\n\n    /**\n     * Creates a slice (view) of the buffer with the given size. Conceptually.\n     * Since slicing is expensive, it just retruns the raw transport buffer with the offset.\n     * Buffer - offset pair if possible, copy (with zero offset) if beyond first buffer boundary.\n     *\n     *\n     * @param {Number} size Bytes to view\n     * @returns {?Array} Buffer - offset pair if there was enough data to peek, or `null`\n     */\n    this.peekView = function peekView(size) {\n      const result = [];\n      if (_queue.length < 1 || size > _size) { return null; }\n      if (_queue[0].length >= size + _offset) {\n        result[0] = _queue[0];\n        result[1] = _offset;\n      } else {  //over buffer boundary, must copy.\n        result[0] = concatFrom(_queue, _offset, size);\n        result[1] = 0;\n      }\n      return result;\n    };\n\n    this.readUInt8 = function readUInt8(index) {\n      if (index >= _size) { return null; }\n      const oIndex = index + _offset;\n      if (oIndex < _queue[0].length) {\n        return _queue[0].readUInt8(oIndex);\n      } // else\n      let pos = _queue[0].length;\n      let i = 1;\n      while (pos + _queue[i].length <= oIndex) {\n        pos += _queue[i].length;\n        i++;\n      }\n      return _queue[i].readUInt8(oIndex - pos);\n    };\n\n    this.readUInt32BE = function readUInt32BE(index) {\n      if (index + 3 >= _size) { return null; }\n      const oIndex = index + _offset;\n      if (oIndex + 3 < _queue[0].length) {\n        return _queue[0].readUInt32BE(oIndex);\n      } // else\n      if (oIndex < _queue[0].length) {\n        return readUInt32BEFrag(_queue, 0, oIndex);\n      }\n\n      let pos = _queue[0].length;\n      let i = 1;\n      while (pos + _queue[i].length <= oIndex) {\n        pos += _queue[i].length;\n        i++;\n      }\n      if (oIndex - pos + 3 < _queue[i].length) {\n        return _queue[i].readUInt32BE(oIndex - pos);\n      } // else\n      return readUInt32BEFrag(_queue, i, oIndex - pos);\n    };\n\n    /**\n     * Adds a buffer to the queue.\n     * Fails if maxsize is exeeded.\n     *\n     * @param {Buffer} dataIn Source data\n     * @returns {Boolean} `true` if the data fits.\n     */\n    this.put = function put(dataIn) {\n      const buffer = BufferQueue.adaptData(dataIn);\n      const size = buffer.length;\n      if (size === 0) { return true; }\n\n      if (_size + size >= _maxSize) return false;\n\n      _queue.push(buffer);\n      _size += size;\n\n      return true;\n    };\n\n    this.advance = function advance(size) {\n      if (size < 1) {\n        return;\n      }\n      if (size >= _size) {\n        this.reset();\n        return;\n      }\n      let done = 0;\n      while (done < size) {\n        if (_queue[0].length - _offset <= size - done) { // drop first buffer entirely\n          const chunk = _queue[0].length - _offset;\n          _queue.shift();\n          done += chunk;\n          _size -= chunk; // invariants are good.\n          _offset = 0;\n        } else { // cut into first buffer, virtually, with _offset\n          _offset += (size - done);\n          _size -= (size - done);\n          break;\n        }\n      }\n    };\n\n    this.reset = function reset() {\n      _queue = [];\n      _size = 0;\n      _offset = 0;\n    };\n\n    this.remaining = function remaining() {\n      return _size;\n    };\n\n    this.isEmpty = function isEmpty() {\n      return _size === 0;\n    };\n  }\n\n  /**\n   * Adapt incoming data to the format expected by this.put().\n   * @param {*} data The data to adapt.\n   * @returns {Buffer} The adapted data.\n   */\n  static adaptData(data) {\n    if (data instanceof BufferImpl) return data;\n    return BufferImpl.from(data);\n  }\n}\n\nmodule.exports.BufferQueue = BufferQueue;\nmodule.exports.concatFrom = concatFrom;\n","const DebugLib = require('solclient-debug');\nconst SMFLib = require('solclient-smf');\nconst { BaseSMFClient } = require('./base-smf-client');\nconst { BufferQueue } = require('./buffer-queue');\nconst { Convert, Hex } = require('solclient-convert');\nconst { LogFormatter } = require('solclient-log');\n\nconst BufferImpl = require('buffer').Buffer;\n\nconst { stringToUint8Array } = Convert;\nconst { formatHexString } = Hex;\n\nconst SMF_LOST_FRAMING_THRESHOLD = 80000000;\n\nconst { LOG_ERROR } = new LogFormatter('[buffer-smf-client]');\n\nfunction logPeekBuffer(buffer) {\n  const bufPair = buffer.peekView(Math.min(buffer.remaining(), 64));\n  LOG_ERROR(`First 64 bytes (or fewer) of incoming buffer: \\n${\n    DebugLib.Debug.formatDumpBytes(bufPair[0].toString('latin1', bufPair[1]), true, 0)}`);\n}\n\n/**\n * Interact with underlying transport to send and receive SMF messages\n * @private\n */\nclass BufferSMFClient extends BaseSMFClient {\n\n  /**\n   * @constructor\n   * @param {Function} rxSmfCB The callback to notify on SMF binary data received\n   * @param {Function} rxMessageErrorCB The callback to notify on message errors\n   * @param {Session} session The session owning this client\n   */\n  constructor(rxSmfCB, rxMessageErrorCB, session) {\n    super(rxSmfCB, rxMessageErrorCB, session);\n    this._incomingBuffer = new BufferQueue(SMF_LOST_FRAMING_THRESHOLD);\n  }\n\n  reset() {\n    super.reset();\n    // Called from super constructor, so guard this\n    if (this._incomingBuffer) this._incomingBuffer.reset();\n  }\n\n  /**\n   * @param {String} data Incoming data as binary string\n   */\n  rxDataString(data) {\n    this._rxDataCB(BufferImpl.from(stringToUint8Array(data)));\n  }\n\n  /**\n   * @param {ArrayBuffer} data Incoming data\n   */\n  rxDataArrayBuffer(data) {\n    this._rxDataCB(BufferImpl.from(data));\n  }\n\n  /**\n   * @param {Buffer} data Incoming data\n   */\n  rxDataBuffer(data) {\n    this._rxDataCB(data);\n  }\n\n  /**\n   * Invoked by transport session. Handles multiple SMF messages in input, as well as defragmenting\n   * partial SMF messages. The state we keep is in this._incomingBuffer.\n   * @param {Buffer} data The binary data to decode\n   */\n  _rxDataCB(data) {\n    if (this._session) {\n      // each incoming data chunk resets KA counter\n      this._session.resetKeepAliveCounter();\n    }\n    const buffer = this._incomingBuffer;\n    const putSuccess = buffer.put(data);\n    let remaining = buffer.remaining();\n\n    if (!putSuccess) {\n      // 80 megabytes - lost SMF framing: may never complete\n      logPeekBuffer(buffer);\n      this._rxMessageErrorCB(`Buffer overflow (length: ${remaining})`);\n      this._incomingBuffer.reset();\n    }\n\n    while (remaining > 12) {\n      const version = buffer.readUInt8(0) & 0x7;\n      if (version !== 3) {\n        LOG_ERROR(`Invalid smf version in smf header, version=${version}`);\n        // Throw away the buffer and bail out\n        LOG_ERROR(\"BufferSMFClient._rxDataCB(): couldn't decode message due to invalid smf header\");\n        logPeekBuffer(buffer);\n        this._incomingBuffer.reset();\n        this._rxMessageErrorCB('Error parsing incoming SMF - invalid SMF header detected');\n        return;\n      }\n\n      const messageLen = buffer.readUInt32BE(8);\n      if (messageLen > buffer.remaining()) {\n        break; // no full message\n      }\n      const msgBuffer = buffer.peekView(messageLen);\n\n      //const binaryString = messageBuffer.toString('binary');\n      const incomingMsg = SMFLib.Codec.Decode.decodeCompoundMessage(msgBuffer[0], msgBuffer[1]);\n      if (incomingMsg && incomingMsg.smfHeader) {\n        buffer.advance(incomingMsg.smfHeader.messageLength);\n        this._rxSmfCB(incomingMsg); // hand over to core API callback\n      } else {\n        // couldn't decode! Lost SMF framing.\n        // throw away the buffer and bail out\n        const sessionId = this._session ? this._session._sessionId : null;\n        const sessionIdHex = sessionId ? formatHexString(sessionId) : 'N/A';\n        LOG_ERROR(`BufferSMFClient._rxDataCB(): couldn't decode message (sessionId=${sessionIdHex})`);\n        logPeekBuffer(buffer);\n        this._incomingBuffer.reset();\n        this._rxMessageErrorCB('Error parsing incoming SMF');\n        return;\n      }\n      remaining = buffer.remaining();\n    }\n\n    if (remaining) {\n      // We have a partial header, or a valid header and a partial message.\n      // partial message remaining: keep it in incoming buffer\n    } else {\n      // clear incoming buffer\n      this._incomingBuffer.reset();\n    }\n  }\n}\n\nmodule.exports.BufferSMFClient = BufferSMFClient;\n","const fs = require('fs');\nconst SolclientSessionLib = require('solclient-session');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_TRACE, LOG_DEBUG, LOG_WARN } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\n\n/**\n * Node TLS socket option generation factored out from WS transport, shared with Tcp transport.\n * Internal mixin class, not intended to be publicly visible.\n * @private\n */\n\nclass NodeTLSOptsMixin {\n  /**\n   * Overwrite Node.js default hostname check callback by verifying cnNameList against subject CN\n   * in the server certificate. If cnNameList is a empty string, it means all CNs are acceptable.\n   * @param {String} host The hostname for checking\n   * @param {String} cert The server certificate for checking\n   * @name solace.WebTransportSession#checkCertificateCNs\n   * @returns {?Error} Any error generated by the certificate check\n   * @private\n   */\n  checkCertificateCNs(host, cert) {\n    if (this._props.sslTrustedCommonNameList && this._props.sslTrustedCommonNameList.length > 0) {\n      // no Closure Compiler externs for certificates\n      LOG_DEBUG('server cert:', cert);\n      const subject = cert['subject']; // eslint-disable-line dot-notation\n      let valid = false;\n      if (subject) {\n        const cn = subject['CN']; // eslint-disable-line dot-notation\n        valid = this._props.sslTrustedCommonNameList.some(name =>\n          name.toLowerCase() === cn.toLowerCase()\n        );\n      }\n      if (!valid) {\n        const error = new Error('Server certificate not trusted - no common name match');\n        error.reason = 'Server certificate not trusted - no common name match';\n        error.host = host;\n        error.cert = cert;\n        return error;\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Create the TLS options object used in wss:// and tcps:// connection establishment.\n   * The same options are needed by the ws and tls socket constructors.\n   * @returns {Object} WebSocket/TLSSocket options object\n   * @private\n   */\n  createTLSOptions() {\n    /* eslint-disable dot-notation */\n    const props = this._props;\n    const options = {};\n    const useClientCert = (\n      props.authenticationScheme === SolclientSessionLib.AuthenticationScheme.CLIENT_CERTIFICATE\n    );\n\n    // available tls options:\n    //  pfx, key, passphrase, cert, ca, ciphers, rejectUnauthorized,\n    //  secureProtocol, secureOptions, checkServerIdentity\n\n    // default to allow all version of SSL during negotiation but exclude SSLv2 and SSLv3\n    options['secureProtocol'] = 'SSLv23_method';\n    const constMap = SolclientSessionLib.SessionProperties.SslProtocolExcludeConstantMap;\n    options['secureOptions'] = constMap['sslv2'] | constMap['sslv3'];\n    (props.sslExcludedProtocols || []).forEach((protocol) => {\n      options['secureOptions'] |= constMap[protocol.toLowerCase()];\n    });\n\n    if (props.sslCipherSuites) {\n      const ciphers = props.sslCipherSuites.split(',');\n      const trimmed = ciphers.map(cipher => cipher.trim());\n      options['ciphers'] = trimmed.join(':');\n    } else {\n      options['ciphers'] = props.sslCipherSuites;\n    }\n\n    options['rejectUnauthorized'] = props.sslValidateCertificate;\n\n    // only set checkServerIdentity callback if rejectUnauthorized\n    if (options['rejectUnauthorized'] && Array.isArray(props.sslTrustedCommonNameList)) {\n      options['checkServerIdentity'] = this.checkCertificateCNs.bind(this);\n    }\n\n    // only set trust stores and and checkServerIdentity callback\n    // if rejectUnauthorized is true or authClientCert\n    if ((options['rejectUnauthorized'] || useClientCert) &&\n      props.sslTrustStores && props.sslTrustStores.length) {\n      const tsContents = [];\n      props.sslTrustStores.forEach((tsFile) => {\n        try {\n          tsContents.push(fs.readFileSync(tsFile));\n        } catch (e) {\n          LOG_WARN(`Failed to load trust store ${tsFile}`, e.message);\n          LOG_TRACE('Error details:', e.stack || e);\n          throw new OperationError(`Failed to load trust store ${tsFile}`,\n            ErrorSubcode.FAILED_LOADING_TRUSTSTORE,\n            e);\n        }\n      });\n      options['ca'] = tsContents;\n    }\n\n\n    if (useClientCert) {\n      if (props.sslPfx) {\n        try {\n          options['pfx'] = fs.readFileSync(props.sslPfx);\n          options['passphrase'] = props.sslPfxPassword;\n        } catch (e) {\n          LOG_WARN(`Failed to load pfx file ${props.sslPfx}`, e.message);\n          LOG_TRACE('Error details:', e.stack || e);\n          throw new OperationError(`Failed to load pfx ${props.sslPfx}`,\n            ErrorSubcode.FAILED_LOADING_CERTIFICATE_AND_KEY, e);\n        }\n      }\n      if (props.sslPrivateKey) {\n        try {\n          options['key'] = fs.readFileSync(props.sslPrivateKey);\n          options['passphrase'] = props.sslPrivateKeyPassword;\n        } catch (e) {\n          LOG_WARN(`Failed to load private key ${props.sslPrivateKey}`, e.message);\n          LOG_TRACE('Error details:', e.stack || e);\n          throw new OperationError(`Failed to load private key ${props.sslPrivateKey}`,\n            ErrorSubcode.FAILED_LOADING_CERTIFICATE_AND_KEY, e);\n        }\n      }\n      if (props.sslCertificate) {\n        try {\n          options['cert'] = fs.readFileSync(props.sslCertificate);\n        } catch (e) {\n          LOG_WARN(`Failed to load certificate file ${props.sslCertificate}`, e.message);\n          LOG_TRACE('Error details:', e.stack || e);\n          throw new OperationError(`Failed to load certificate ${props.sslCertificate}`,\n            ErrorSubcode.FAILED_LOADING_CERTIFICATE_AND_KEY, e);\n        }\n      }\n    }\n    //SNI\n    const hostname = parseURL(this._url).hostname;\n    options['servername'] = hostname;\n    return options;\n    /* eslint-enable dot-notation */\n  }\n\n}\n\nmodule.exports.NodeTLSOptsMixin = NodeTLSOptsMixin;\n","/* eslint-disable global-require */\nconst { BaseSMFClient } = require('./base-smf-client');\n\n// Got rid of anonymous function that checked browser and set smf-client\n// Now ignoring string-smf-client and setting it straight to buffer-smf-client\n// const SMFClient = require('./buffer-smf-client').BufferSMFClient;\n\nconst SMFClient = (() => {\n  if (typeof navigator !== 'undefined') {\n      /* eslint-env browser */\n    if (navigator.appVersion.indexOf('MSIE 9.') !== -1 ||\n        navigator.appVersion.indexOf('Trident/') !== -1) {\n        // Avoid the buffer-based version for IE9, 10, and 11, but not Edge.\n      return require('./buffer-smf-client').BufferSMFClient;\n    }\n  }\n  /* eslint-env shared-browser-node */\n  return require('./buffer-smf-client').BufferSMFClient;\n})();\n\nSMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG = BaseSMFClient.SMF_MAX_CORRELATION;\n\nmodule.exports.SMFClient = SMFClient;\n","const { CompressedTransport } = require('./transport-compression');\nconst { TcpRawTransport } = require('./transport-tcp-plaintext');\nconst { TcpTlsTransport } = require('./transport-tcp-tls');\nconst { TlsOnlyTransport } = require('./transport-tls');\n\nmodule.exports.TcpRawTransport = TcpRawTransport;\nmodule.exports.CompressedTransport = CompressedTransport;\nmodule.exports.TlsOnlyTransport = TlsOnlyTransport;\nmodule.exports.TcpTlsTransport = TcpTlsTransport;\n","const { Duplex } = require('stream');\nconst { LOG_WARN, LOG_TRACE } = require('solclient-log');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\n\n/**\n * This is a Duplex Stream encapsulating a Transport.\n * It transparently passes reads, writes, and events until \"shunted\".\n * After that, nothing gets through.\n *\n * The intermediate \"dontEnd\" state allows a TLS shutdown to run its course\n * without closing the underlying transport in the end.\n *\n * Intended lifecycle:\n *\n * 1, create underlying transport\n * 2, create ShuntableTransport with underlying transport\n * 3, pass shuntableTransport to tls.connect\n * 4, connect underlying transport\n *\n * <traffic may flow until TLS shutdown desired>\n *\n * 1, shuntableTransport.dontend();\n * 2, tlsSocket.end();\n * 3, on 'closed' event: take and start using shuntableSocket.socket.\n *\n * For an explanation of _read and _write see\n * https://nodejs.org/api/stream.html#stream_implementing_a_duplex_stream\n *\n * @private\n */\n\nclass ShuntableTransport extends Duplex {\n  constructor(options) {\n    super(options);\n    this._shunted = false;\n    this._dontEnd = false;\n    this._underlyingTransport = options.underlyingTransport;\n    // Buffers data-callback pairs until connected or underlying transport decongests.\n    // Should never have more than 1 item as long as the stream contract is upheld.\n    this._interimBuffer = [];\n    this._transportDrained = true;\n    this._connected = false;\n  }\n\n  shunt() {\n    this._shunted = true;\n  }\n\n  dontEnd() {\n    this._dontEnd = true;\n  }\n\n  _write(chunk, encoding, callback) {\n    if (!this._shunted) {\n      if (!this._transportDrained || !this._connected) {\n        this._interimBuffer.push([chunk, callback]);\n        return;\n      }\n      const rc = this._underlyingTransport.send(chunk);\n      switch (rc) {\n        case TransportReturnCode.OK:\n          this._transportDrained = true;\n          callback();\n          break;\n        case TransportReturnCode.NO_SPACE:\n          this._transportDrained = false;\n          this._interimBuffer.push([chunk, callback]);\n          break;\n        case TransportReturnCode.INVALID_STATE_FOR_OPERATION:\n          this.emit('error',\n                    'Underlying transport in invalid state for send.');\n          break;\n        default:\n          LOG_WARN(`Unknown return code from undelying transport ${rc}`);\n      }\n    }\n  }\n\n  //_read(size) {\n  _read() {\n    if (!this._shunted) {\n      this._underlyingTransport.unpause();\n    }\n  }\n\n  rxDataBuffer(data) {\n    if (!this._shunted) {\n      const noPause = this.push(data);\n      if (!noPause) {\n        this._underlyingTransport.pause();\n      }\n    }\n  }\n\n  // underlying transport event dispatch\n  eventCB(transportEvent) {\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportSessionEventCode.UP_NOTICE:\n        this.onConnect();\n        break;\n      case TransportSessionEventCode.SEND_ERROR:\n        this.onError(transportEvent);\n        break;\n      case TransportSessionEventCode.DESTROYED_NOTICE:\n        this.onClose(transportEvent);\n        break;\n      case TransportSessionEventCode.CAN_ACCEPT_DATA:\n        this.onDrain();\n        break;\n      default:\n        LOG_WARN(`TLS layer got unkown event code ${transportEvent.getTransportEventCode}`);\n    }\n  }\n  onError(transportEvent) {\n    if (!this._shunted) {\n      this.emit('error', transportEvent.getInfoStr());\n    }\n  }\n\n  onClose(transportEvent) {\n    this._connected = false;\n    if (!this._shunted) {\n      LOG_TRACE(`ShuntableTransport emits close for transport event ${transportEvent}`);\n      this.emit('close');\n    }\n  }\n\n  onDrain() {\n    if (!this._shunted) {\n      this._transportDrained = true;\n      if (this._interimBuffer && this._interimBuffer.length > 0) {\n        const resendBuffer = this._interimBuffer;\n        this._interimBuffer = [];\n        resendBuffer.forEach(([data, callback]) => this._write(data, null, callback));\n      }\n      if (!this._transportDrained) {\n        return;\n      }\n      this.emit('drain');\n    }\n  }\n\n  onConnect() {\n    this._connected = true;\n    if (!this._shunted) {\n      this.onDrain(); // flush interimbuffer.\n      this.emit('connect');\n    }\n  }\n\n  end(chunk, encoding, callback) {\n    if (!this._shunted && !this._dontEnd) {\n      if (typeof chunk === 'function') { // sometimes TLS calls end() wrong...\n        this._underlyingTransport.destroy('End from TLS');\n        chunk();\n      } else {\n        const cb = () => { this._underlyingTransport.destroy('End from TLS'); callback(); };\n        this._write(chunk, encoding, cb);\n      }\n    } else if (!this._shunted) {\n      if (typeof chunk !== 'function') { // sometimes TLS calls end() wrong...\n        this._write(chunk, encoding, callback);\n      } else {\n        chunk();\n      }\n    }\n  }\n\n  destroy(error) {\n    if (!this._shunted && !this._dontEnd) {\n      this._underlyingTransport.destroy(error);\n    }\n  }\n\n  setNoDelay(arg) {\n    if (!this.shunted) {\n      LOG_TRACE(`Ignoring setNoDelay(${arg})`);\n    }\n  }\n}\n\nmodule.exports.ShuntableTransport = ShuntableTransport;\n","const zlib = require('zlib');\nconst { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { LOG_TRACE, LOG_DEBUG, LOG_INFO, LOG_WARN } = require('solclient-log');\nconst { TransportBase } = require('../transport-base');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst {\n  formatHexString,\n} = Hex;\n\n/**\n * Modular transport layer performing zlib compression.\n * Requires an underlying transport, can be plaintext or TLS, connected or not.\n * Uses the nodejs zlib module which in turn uses the libuv threadpool in nodejs.\n * The end user may need to increase threadpool size.\n * https://nodejs.org/api/zlib.html#zlib_threadpool_usage\n *\n * @private\n */\nclass CompressedTransport extends TransportBase {\n\n  constructor(eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super('tcp://x', eventCB, client, props);\n\n    /**\n     * @private\n     * @type {TransportClientStats}\n     */\n    this._clientstats = null;\n    this._underlyingTransport = null;\n\n    /**\n     * Maximum amount of send data than can be queued.\n     * NodeJS socket.write accepts all writes, growing a\n     * user space buffer indefinitely.\n     * The TCP transport (same as WS transport)\n     * manages the size of that buffer to stay below this limit.\n     * @private\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /*\n     * When true, the upper layer was told NO_SPACE and must be notified\n     * of the next \"drained\" event.\n     * @private\n     * @type {Boolean}\n     */\n    this._waitForSocketDrain = false;\n    this._waitForCompressorDrain = false;\n\n    /*\n     * One-shot flush callback.\n     * Set on flush(), ran and cleared on socket drain event.\n     * @private\n     */\n    this._flushCallback = null;\n\n    /**\n     * Flag to keep track of socket drained state:\n     * Set to false when socket.write returns false,\n     * (indicating user-space buffering)\n     * Set to true on socket drain events.\n     * (indicating the user space buffer has flushed to the OS.)\n     * @type {Boolean}\n     * @private\n     */\n    this._socketDrained = true;\n    this._compressorDrained = true;\n    this._interimBuffer = [];\n\n    /**\n     * @type {TransportSessionState}\n     * @private\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * Save the Event in the onError listener\n     * Use it in onClose to populate the event.\n     * (Tcp socket calls onError with the error then onClose.\n     * WS socket calls only onClose and passes the error directly.)\n     * @private\n     * @type {?Error}\n     */\n    this._socketError = null;\n\n    /**\n     * @type {?string}\n     * @private\n     */\n    this._sessionId = new Date().getTime();\n\n    // Some whitebox tests expect a transport->transportSession nesting.\n    this._transportSession = this;\n\n    this._props.transportProtocol = null;\n\n    this._compressor = null;\n    this._decompressor = null;\n\n    this._compressionLevel = props.compressionLevel;\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    return this._clientstats;\n  }\n\n  setClientStats(value) {\n    this._clientstats = value;\n  }\n\n  setUnderlyingTransport(newUnderlyingTransoprt) {\n    this._underlyingTransport = newUnderlyingTransoprt;\n  }\n\n  // Underlying transport callback.\n  rxDataBuffer(data) {\n    // We do not collect Rx stats.\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('TcpTransportCompressedSession stray rxDataBuffer, ignoring.');\n      return;\n    }\n    this._decompressor.write(data);\n    this._decompressor.flush();\n  }\n\n  /**\n   * Decompressor callback.\n   * @private\n   * @param {Buffer} data the data\n   */\n  onData(data) {\n    // We do not collect Rx stats.\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('TcpTransportSession stray onData, ignoring.');\n      return;\n    }\n    if (this._client) {\n      this._client.rxDataBuffer(data);\n    }\n  }\n\n  /**\n   * Underlying transport callback for SEND_ERROR\n   * @private\n   * @param {TransportSessionEvent} transportEvent the error\n   */\n  onError(transportEvent) {\n    // Need new state for \"waiting for decompressor flush after error\"?\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tcp transport is being destroyed, ignore error');\n      return;\n    }\n    this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n    const onErrorStage2 = () => {\n      if (this._eventCB) {\n        LOG_TRACE('Decompressor flush returned, passing error to eventCB.');\n        this._eventCB(transportEvent);\n      } else {\n        LOG_TRACE('Decompressor flush returned, but eventCB already cleared.');\n      }\n    };\n\n    LOG_TRACE('Flushing decompressor on socket error.');\n    this._decompressor.flush(zlib.Z_SYNC_FLUSH, onErrorStage2);\n  }\n\n  /**\n   * Treat any zlib error the same as a socket error,\n   * plus close the socket.\n   * @private\n   * @param {Error} error the error\n   */\n  onZlibError(error) {\n    this._socketError = error;\n    this._underlyingTransport.destroy(`Connection closed by zlib error. Message:${error}`,\n                                      ErrorSubcode.COMMUNICATION_ERROR);\n  }\n  /**\n   * underlying transport callback for DESTROYED_NOTICE.\n   * @private\n   * @param {TransportSessionEvent} transportEvent from lower layer\n   */\n  onClose(transportEvent) {\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      this._destroy(transportEvent);\n    } else {\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      LOG_TRACE('Flushing decompressor on socket close.');\n      const stage2destroy = () => this._destroy(transportEvent);\n      this._decompressor.flush(zlib.Z_SYNC_FLUSH, stage2destroy);\n    }\n  }\n\n  /**\n   * underlying transport callback for UP_NOTICE.\n   * @private\n   * @param {TransportSessionEvent} transportEvent from lower layer\n   */\n  onOpen(transportEvent) {\n    if (this._state !== TransportSessionState.WAITING_FOR_CREATE) {\n      LOG_INFO(`compressor stray onOpen when in state ${this._state}, ignoring.`);\n      return;\n    }\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(transportEvent);\n  }\n\n  /**\n   * Establish underlying transport.\n   * @override\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() {\n    LOG_TRACE('Initializing compressed transport');\n    let rc = TransportReturnCode.OK;\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_INFO(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    this._state = TransportSessionState.WAITING_FOR_CREATE;\n    if (this._underlyingTransport._state === TransportSessionState.DOWN) {\n      rc = this._underlyingTransport.connect();\n    } else {\n      this._state = TransportSessionState.SESSION_UP;\n    }\n    try {\n      // initialize compressor, decompressor.\n      const options = {\n        highWaterMark: this._sendBufferMaxSize,\n        level:         this._compressionLevel,\n        flush:         zlib.Z_SYNC_FLUSH,\n      };\n      this._compressor =\n        zlib.createDeflateRaw(options);\n      this._decompressor = zlib.createInflateRaw({ flush: zlib.Z_SYNC_FLUSH });\n\n      this._decompressor.on('data', this.onData.bind(this));\n      this._decompressor.on('error', this.onZlibError.bind(this));\n      this._compressor.on('error', this.onZlibError.bind(this));\n      this._compressor.on('data', this.sendCompressed.bind(this));\n      this._compressor.on('drain', this.onCompressorDrain.bind(this));\n    } catch (error) {\n      LOG_DEBUG(`Error connecting: ${error}`);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      throw new TransportError(`Could not create Tcp zlib layer: ${error.message}`,\n        error.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    return rc;\n  }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code.\n   * We'll clean up zlib objects on the DESTROYED_NOTICE.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(msg, subcode) {\n    this._state = TransportSessionState.WAITING_FOR_DESTROY;\n    return this._underlyingTransport.destroy(msg, subcode);\n  }\n\n  // second stage of the underlying transport callback for DESTROYED_NOTICE.\n  // We should only ever get here once the underlying transport is destroyed.\n  // Seee onClose.\n  _destroy(transportEvent) {\n    if (this._state !== TransportSessionState.DOWN) {\n      this._state = TransportSessionState.DOWN;\n      const onerrorStub = function onerrorStub() { };\n      this._waitForSocketDrain = false;\n      this._flushCallback = null;\n      this._socketDrained = true;\n      this._client = null; // Don't accept data.\n      this._compressor.removeAllListeners();\n      this._compressor.on('error', onerrorStub); // Prevent unhandled errors\n      this._decompressor.removeAllListeners();\n      this._decompressor.on('error', onerrorStub); // Prevent unhandled errors\n      this._compressor.unpipe();\n      //https://github.com/nodejs/node/issues/15625\n      this._compressor._hadError = true;\n      this._compressor.close();\n      this._compressor = null;\n      this._decompressor.close();\n      this._decompressor = null;\n    }\n\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    if (this._eventCB) {\n      this._eventCB(transportEvent);\n      // Release references to other components\n      this._eventCB = null;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  // underlying transport event dispatch\n  eventCB(transportEvent) {\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportSessionEventCode.UP_NOTICE:\n        this.onOpen(transportEvent);\n        break;\n      case TransportSessionEventCode.SEND_ERROR:\n        this.onError(transportEvent);\n        break;\n      case TransportSessionEventCode.DESTROYED_NOTICE:\n        this.onClose(transportEvent);\n        break;\n      case TransportSessionEventCode.CAN_ACCEPT_DATA:\n        this.onDrain(transportEvent);\n        break;\n      default:\n        LOG_WARN('Compressing transport layer got unkown event code ' +\n          `${transportEvent.getTransportEventCode}`);\n    }\n  }\n\n\n  /**\n   * @override\n   * @description Intended for clean shutdowns.\n   * Callback is invoked when all nodejs-buffered data\n   * has been flushed to the OS socket.\n   */\n  flush(callback) {\n    const flushStage2 = () => this._underlyingTransport.flush(callback);\n    this._compressor.flush(flushStage2);\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Send encoded SMF message\n   * Returns transport return code.\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      // On a lower layer socket error this transport is in WAITING_FOR_DESTROY state\n      // until the decompressor flushes.\n      // We could respond with NO_SPACE, but we'd have to send a CAN_SEND on reconnect.\n      LOG_INFO(`Compressing transport can't send in state ${this._state}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    // Congestion control.\n    // We try to avoid pumping too much data into the compressor until the socket drains.\n    // We pause()/resume() the compressor while the socket is congested, but still.\n    if (forceAllowEnqueue\n      || (this._socketDrained && this._compressorDrained)) {\n      if (this._interimBuffer.length > 0) {\n        LOG_WARN(`Allowing send when interimBuffer is ${this._interimBuffer.length}`);\n      }\n      this._compressorDrained = this._compressor.write(message, 'ascii');\n      this._compressor.flush();\n      this._clientstats.bytesWritten += message.length;\n      ++this._clientstats.msgWritten;\n      return TransportReturnCode.OK;\n    }\n    // We'll unblock the user on the next onDrain.\n    if (!this._socketDrained) {\n      this._waitForSocketDrain = true;\n    }\n    if (!this._compressorDrained) {\n      this._waitForCompressorDrain = true;\n    }\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  sendCompressed(data) {\n    if (!this._socketDrained) {\n      this._interimBuffer.push(data);\n      this._compressor.pause();\n      return;\n    }\n    const rc = this._underlyingTransport.send(data);\n    switch (rc) {\n      case TransportReturnCode.OK:\n        this._socketDrained = true;\n        break;\n      case TransportReturnCode.NO_SPACE:\n        this._socketDrained = false;\n        this._interimBuffer.push(data);\n        this._compressor.pause();\n        break;\n      case TransportReturnCode.INVALID_STATE_FOR_OPERATION:\n        this.onError(new TransportSessionEvent(\n            TransportSessionEventCode.SEND_ERROR,\n            'Underlying transport in invalid state for send.',\n            null,\n            ErrorSubcode.CONNECTION_ERROR, null));\n        break;\n      default:\n        LOG_WARN(`Unknown return code from undelying transport ${rc}`);\n    }\n  }\n\n  /**\n   * Underlying transport callback for CAN_SEND.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   */\n  onDrain() {\n    this._socketDrained = true;\n    if (this._interimBuffer && this._interimBuffer.length > 0) {\n      const resendBuffer = this._interimBuffer;\n      this._interimBuffer = [];\n      resendBuffer.forEach(data => this.sendCompressed(data));\n    }\n    if (!this._socketDrained) {\n      return;\n    }\n    this._compressor.resume();\n    if (this._flushCallback) {\n      LOG_DEBUG('Transport emitting FLUSH after drain.');\n      const prevCallback = this._flushCallback;\n      this._flushCallback = null;\n      prevCallback();\n    }\n\n    if (this._waitForSocketDrain) {\n      this._waitForSocketDrain = false;\n      if (!this._waitForCompressorDrain) {\n        this._eventCB(\n          new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                    '', null, 0, this._sessionId));\n      }\n    }\n  }\n\n  onCompressorDrain() {\n    this._compressorDrained = true;\n    if (this._waitForCompressorDrain) {\n      this._waitForCompressorDrain = false;\n      if (!this._waitForSocketDrain) {\n        this._eventCB(\n          new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                    '', null, 0, this._sessionId));\n      }\n    }\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    const str = `TcpTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n  pause() {\n    this._underlyingTransport.pause();\n    this._decompressor.pause();\n  }\n\n  unpause() {\n    this._underlyingTransport.unpause();\n    this._decompressor.resume();\n  }\n\n}\n\nmodule.exports.CompressedTransport = CompressedTransport;\n","const net = require('net');\nconst { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { LOG_TRACE, LOG_DEBUG, LOG_WARN, LOG_ERROR } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\nconst { TransportBase } = require('../transport-base');\nconst { TransportClientStats } = require('../transport-client-stats');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst {\n  formatHexString,\n} = Hex;\n\n/**\n * Tcp (tcps://) transport without TLS (tcps://) support.\n * Only works in node.js.\n * @private\n */\nclass TcpRawTransport extends TransportBase {\n\n  constructor(url, eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super(url, eventCB, client, props);\n\n    /**\n     * @private\n     * @type {TransportClientStats}\n     */\n    this._clientstats = new TransportClientStats();\n\n    /**\n     * Maximum amount of send data than can be queued.\n     * NodeJS socket.write accepts all writes, growing a\n     * user space buffer indefinitely.\n     * The TCP transport (same as WS transport)\n     * manages the size of that buffer to stay below this limit.\n     * @private\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /*\n     * When true, the upper layer was told NO_SPACE and must be notified\n     * of the next \"drained\" event.\n     * @private\n     * @type {Boolean}\n     */\n    this._canSendNeeded = false;\n\n    /*\n     * One-shot flush callback.\n     * Set on flush(), ran and cleared on socket drain event.\n     * @private\n     */\n    this._flushCallback = null;\n\n    /**\n     * Flag to keep track of socket drained state:\n     * Set to false when socket.write returns false,\n     * (indicating user-space buffering)\n     * Set to true on socket drain events.\n     * (indicating the user space buffer has flushed to the OS.)\n     * @type {Boolean}\n     * @private\n     */\n    this._drained = true;\n\n    /**\n     * @type {TransportSessionState}\n     * @private\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * @type {?Socket}\n     * @private\n     */\n    // Always the raw socket, which is stable from connect() until disconnect().\n    this._rawSocket = null;\n\n    /**\n     * Save the Event in the onError listener\n     * Use it in onClose to populate the event.\n     * (Tcp socket calls onError with the error then onClose.\n     * WS socket calls only onClose and passes the error directly.)\n     * @private\n     * @type {?Error}\n     */\n    this._socketError = null;\n\n    /**\n     * @type {?string}\n     * @private\n     */\n    this._sessionId = new Date().getTime();\n\n    // Some whitebox tests expect a transport->transportSession nesting.\n    this._transportSession = this;\n    this._props.transportProtocol = null;\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    return this._clientstats;\n  }\n  setClientStats(value) {\n    this._clientstats = value;\n  }\n\n  rehome(eventCB, client) {\n    this._eventCB = eventCB;\n    this._client = client;\n  }\n\n  /**\n   * Extracts host and port from the router URL.\n   * @private\n   * @param {String} urlString the url\n   * @returns {{String, Number}} host and port\n   */\n  parseHostPort(urlString) {\n    let port = null;\n    const urlParsed = parseURL(urlString);\n    if (urlParsed.protocol !== 'tcp:' && urlParsed.protocol !== 'tcps:') {\n      // Should not happen.\n      LOG_ERROR(`Tcp Transport: URL with unexpected scheme: ${urlParsed.protocol}`);\n    }\n    const host = urlParsed.hostname;\n    port = urlParsed.port;\n    if (port === null) {\n      if (this._ssl) {\n        port = 55443;\n      } else {\n        port = this._props._compressionLevel > 0 ? 55003 : 55555;\n      }\n    }\n    // The rest of the URL (path, etc) is ignored.\n    LOG_TRACE(`Parsing url ${urlString} -> host: ${host} , port: ${port}`);\n    return { host, port };\n  }\n\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Buffer} data the data\n   */\n  onData(originalSocket, data) {\n    // We do not collect Rx stats.\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n      originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onData for previous socket, ignoring.');\n      return;\n    }\n    if (this._client) {\n      this._client.rxDataBuffer(data);\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Error} error the error\n   */\n  onError(originalSocket, error) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onError for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tcp transport is being destroyed, ignore error');\n      return;\n    }\n\n    LOG_DEBUG(`Tcp transport connection error ${error}`);\n    // net.socket invokes the error handler before the close handler.\n    // Websocket does not, and that's what the upper layer expects.\n    // Suppressing the \"double tap\" error events when connected,\n    // saving the error for the onClose handler in _socketerror.\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      if (this._state === TransportSessionState.WAITING_FOR_CREATE) {\n        //There won't be an onClose invocation, so destroying right away.\n        LOG_DEBUG(`Tcp transport connection error during establishment. ${error}`);\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._destroy(originalSocket, `Connection failed. Message:${error.message}`, ErrorSubcode.CONNECTION_ERROR);\n      } else {\n        this._eventCB(\n          new TransportSessionEvent(\n            TransportSessionEventCode.SEND_ERROR,\n            `Connection error${error}`,\n            null,\n            ErrorSubcode.CONNECTION_ERROR, null));\n      }\n    } else { // we rely on the close listener to notify the upper layer.\n      this._socketError = error;\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   * @param {Boolean} hadError wheter there was an error\n   */\n  onClose(originalSocket, hadError) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onClose for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tcp transport is being destroyed, ignore close');\n      return;\n    }\n    const msg = hadError ? 'with error' : 'cleanly';\n    const errorMsg = this._socketError && this._socketError.message;\n    this._socketError = null; // clear on read.\n    LOG_DEBUG(`Tcp transport connection is closed ${msg}. Message: ${errorMsg}`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n\n    this._destroy(this._rawSocket, `Connection closed ${msg}. Message:${errorMsg}`,\n                  ErrorSubcode.COMMUNICATION_ERROR);\n  }\n\n  /**\n   * Callback for Socket.connect.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   */\n  onOpen(originalSocket) {\n    LOG_TRACE('Plaintext transport received socket open event.');\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('Plaintext transport stray onOpen for previous socket, ignoring.');\n      return;\n    }\n    if (this._state !== TransportSessionState.WAITING_FOR_CREATE) {\n      LOG_DEBUG(`TcpTransportSession stray onOpen when in state ${this._state}, ignoring.`);\n      return;\n    }\n\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(\n          new TransportSessionEvent(\n              TransportSessionEventCode.UP_NOTICE,\n              'Connected',\n              0,\n              null,\n              this._sessionId));\n  }\n\n  /**\n   * Establish underlying transport.\n   * @override\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() {\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_ERROR(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (this._rawSocket) {\n      LOG_ERROR('TCP transport can not connect once _rawsocket exists.');\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (!this._url) {\n      LOG_WARN('Cannot connect to null URL');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    LOG_DEBUG('Establishing Tcp transport session');\n    try {\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n      const { host, port } = this.parseHostPort(this._url);\n      LOG_DEBUG('Constructing socket');\n      // Luckily raw and tls sockets have the same API.\n      this._rawSocket = new net.Socket();\n      this._rawSocket.on('connect', this.onOpen.bind(this, this._rawSocket));\n      // Only connect after the connect listener is registered:\n      this._rawSocket.connect(port, host);\n      LOG_TRACE('Assigning properties to socket');\n      // WARNING!\n      // This is the kind of thing that breaks on minification.\n      // Re-run unit tests in production mode when changed:\n      // grunt --gruntfile=Gruntfile_Production.js\n      // When broken, consult the closure compiler exceptions file:\n      // (sdk-root)/builder/template/-common/env/externs.js\n      this._rawSocket.on('data', this.onData.bind(this, this._rawSocket));\n      this._rawSocket.on('error', this.onError.bind(this, this._rawSocket));\n      this._rawSocket.on('close', this.onClose.bind(this, this._rawSocket));\n      this._rawSocket.on('drain', this.onDrain.bind(this, this._rawSocket));\n      this._rawSocket.setNoDelay(true);\n\n      LOG_TRACE('Prepared socket');\n    } catch (error) {\n      LOG_DEBUG(`Error connecting: ${error}`);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      throw new TransportError(`Could not create Tcp socket: ${error.message}`,\n        error.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    LOG_DEBUG('Tcp transport is connecting');\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(msg, subcode) {\n    // No need to flush the decompressor,\n    // the upper layer is not interested in any more data.\n    return this._destroy(this._rawSocket, msg, subcode);\n  }\n\n  _destroy(originalSocket, msg, subcode) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray _destroy for previous socket, ignoring.');\n      return TransportReturnCode.OK;\n    }\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_DEBUG(`Destroy Tcp transport: ${msg}`);\n      // Set state for connection teardown.\n      this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n      const onerrorStub = function onerrorStub() { };\n      if (this._rawSocket) {\n        this._rawSocket.removeAllListeners();\n        this._rawSocket.on('error', onerrorStub); // Prevent unhandled errors\n        // Prefering destroy() over end() as it seems to\n        // cancel pending callbacks like onOpen more reliably.\n        //this._rawSocket.destroy();\n        this._rawSocket.destroy();\n        this._rawSocket = null;\n      }\n\n      this._canSendNeeded = false;\n      this._flushCallback = null;\n      this._drained = true;\n      this._state = TransportSessionState.DOWN;\n      this._client = null; // Don't accept data.\n    }\n\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    LOG_TRACE(`Destroying TCP transport. msg: ${msg} subcode: ${subcode}`);\n    if (this._eventCB) {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                              msg || 'Session is destroyed',\n                                              null,\n                                              subcode || 0,\n                                              this._sessionId));\n      // Release references to other components\n      this._eventCB = null;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Intended for clean shutdowns.\n   * Callback is invoked when all nodejs-buffered data\n   * has been flushed to the OS socket.\n   */\n  flush(callback) {\n    if (this._drained) {\n      LOG_DEBUG('Transport emitting FLUSH immediately.');\n      callback();\n    } else if (callback) {\n      this._flushCallback = callback;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Send encoded SMF message\n   * Returns transport return code.\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      LOG_ERROR('plaintext: INVALID_STATE_FOR_OPERATION');\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    // Limiting socket buffer size to _sendBufferMaxSize unless\n    // the force flag was set\n    // or the socket is drained, in which case any size message goes.\n    if (forceAllowEnqueue\n      || this._drained\n      || message.length < (this._sendBufferMaxSize - this._rawSocket.bufferSize)) {\n      // _drained keeps track of \"overflowing\" writes.\n      // nodejs never refuses a write but warns when it starts buffering.\n      this._drained = this._rawSocket.write(message, 'ascii');\n      if (this._clientstats) {\n        this._clientstats.bytesWritten += message.length;\n        ++this._clientstats.msgWritten;\n      }\n      return TransportReturnCode.OK;\n    }\n    // We'll unblock the user on the next onDrain.\n    this._canSendNeeded = true;\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destry()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   */\n  onDrain(originalSocket) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onDrain for previous socket, ignoring.');\n      return;\n    }\n    this._drained = true;\n\n    if (this._flushCallback) {\n      LOG_DEBUG('Transport emitting FLUSH after drain.');\n      const prevCallback = this._flushCallback;\n      this._flushCallback = null;\n      prevCallback();\n    }\n\n    if (this._canSendNeeded) {\n      LOG_TRACE('Transport emitting CAN_ACCEPT_DATA');\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '', null, 0, this._sessionId));\n    }\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    const str = `TcpTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n  pause() {\n    if (this._rawSocket) {\n      this._rawSocket.pause();\n    }\n  }\n\n  unpause() {\n    if (this._rawSocket) {\n      this._rawSocket.resume();\n    }\n  }\n\n}\n\nmodule.exports.TcpRawTransport = TcpRawTransport;\n","const net = require('net');\nconst tls = require('tls');\nconst { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { LOG_TRACE, LOG_DEBUG, LOG_WARN, LOG_ERROR } = require('solclient-log');\nconst { mixin } = require('solclient-eskit');\nconst { NodeTLSOptsMixin } = require('../node-tls-opts-mixin');\nconst { parseURL } = require('solclient-util');\nconst { TransportBase } = require('../transport-base');\nconst { TransportClientStats } = require('../transport-client-stats');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst {\n  formatHexString,\n} = Hex;\n\n/**\n *\n * Tcp (smf) transport with TLS (tcps://) support.\n * Only works in node.js.\n * Modelled after the WebSocket transport mostly,\n * except there is no downgrade mechanism.\n * There is no separate \"Transport\" class\n * to manage the downgrade FSM:\n * The TransportSession is the Transport.\n\n * @private\n */\nclass TcpTlsTransport extends TransportBase {\n\n  constructor(url, eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super(url, eventCB, client, props);\n\n    /**\n     * @private\n     * @type {TransportClientStats}\n     */\n    this._clientstats = new TransportClientStats();\n\n    /**\n     * Maximum amount of send data than can be queued.\n     * NodeJS socket.write accepts all writes, growing a\n     * user space buffer indefinitely.\n     * The TCP transport (same as WS transport)\n     * manages the size of that buffer to stay below this limit.\n     * @private\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /*\n     * When true, the upper layer was told NO_SPACE and must be notified\n     * of the next \"drained\" event.\n     * @private\n     * @type {Boolean}\n     */\n    this._canSendNeeded = false;\n\n    /*\n     * One-shot flush callback.\n     * Set on flush(), ran and cleared on socket drain event.\n     * @private\n     */\n    this._flushCallback = null;\n\n    /**\n     * Flag to keep track of socket drained state:\n     * Set to false when socket.write returns false,\n     * (indicating user-space buffering)\n     * Set to true on socket drain events.\n     * (indicating the user space buffer has flushed to the OS.)\n     * @type {Boolean}\n     * @private\n     */\n    this._drained = true;\n\n    /**\n     * @type {TransportSessionState}\n     * @private\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * @type {?Socket}\n     * @private\n     */\n    //this._socket = null;\n    // Always the raw socket, which is stable from connect() until disconnect().\n    this._tlsSocket = null;\n    // Always the socket to write to.\n    // could be _rawsocket, _tlsSocket, or _compressor.\n    this._writable = null;\n\n    /**\n     * Save the Event in the onError listener\n     * Use it in onClose to populate the event.\n     * (Tcp socket calls onError with the error then onClose.\n     * WS socket calls only onClose and passes the error directly.)\n     * @private\n     * @type {?Error}\n     */\n    this._socketError = null;\n\n    /**\n     * @type {?string}\n     * @private\n     */\n    this._sessionId = new Date().getTime();\n\n    // Some whitebox tests expect a transport->transportSession nesting.\n    this._transportSession = this;\n\n    this._props.transportProtocol = null;\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    return this._clientstats;\n  }\n\n  setClientStats(newValue) {\n    this._clientstats = newValue;\n  }\n\n  rehome(eventCB, client) {\n    this._eventCB = eventCB;\n    this._client = client;\n  }\n  /**\n   * Extracts host and port from the router URL.\n   * @private\n   * @param {String} urlString the url\n   * @returns {{String, Number}} host and port\n   */\n  parseHostPort(urlString) {\n    let port = null;\n    const urlParsed = parseURL(urlString);\n    if (urlParsed.protocol !== 'tcp:' && urlParsed.protocol !== 'tcps:') {\n      // Should not happen.\n      LOG_ERROR(`Tcp Transport: URL with unexpected scheme: ${urlParsed.protocol}`);\n    }\n    const host = urlParsed.hostname;\n    port = urlParsed.port;\n    if (port === null) {\n      if (this._ssl) {\n        port = 55443;\n      } else {\n        port = this._compressionLevel > 0 ? 55003 : 55555;\n      }\n    }\n    // The rest of the URL (path, etc) is ignored.\n    LOG_TRACE(`Parsing url ${urlString} -> host: ${host} , port: ${port}`);\n    return { host, port };\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Buffer} data the data\n   */\n  onData(originalSocket, data) {\n    // We do not collect Rx stats.\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n      originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onData for previous socket, ignoring.');\n      return;\n    }\n    if (this._client) {\n      this._client.rxDataBuffer(data);\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Error} error the error\n   */\n  onError(originalSocket, error) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onError for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tcp transport is being destroyed, ignore error');\n      return;\n    }\n    LOG_DEBUG(`Tcp transport connection error ${error}`);\n    // net.socket invokes the error handler before the close handler.\n    // Websocket does not, and that's what the upper layer expects.\n    // Suppressing the \"double tap\" error events when connected,\n    // saving the error for the onClose handler in _socketerror.\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      if (this._state === TransportSessionState.WAITING_FOR_CREATE) {\n        //There won't be an onClose invocation, so destroying right away.\n        LOG_DEBUG(`Tcp transport connection error during establishment. ${error}`);\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._destroy(originalSocket, `Connection failed. Message:${error.message}`, ErrorSubcode.CONNECTION_ERROR);\n      } else {\n        this._eventCB(\n          new TransportSessionEvent(\n            TransportSessionEventCode.SEND_ERROR,\n            `Connection error${error}`,\n            null,\n            ErrorSubcode.CONNECTION_ERROR, null));\n      }\n    } else { // we rely on the close listener to notify the upper layer.\n      this._socketError = error;\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   * @param {Boolean} hadError wheter there was an error\n   */\n  onClose(originalSocket, hadError) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onClose for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tcp transport is being destroyed, ignore close');\n      return;\n    }\n    const msg = hadError ? 'with error' : 'cleanly';\n    const errorMsg = this._socketError && this._socketError.message;\n    this._socketError = null; // clear on read.\n    LOG_DEBUG(`Tcp transport connection is closed ${msg}. Message: ${errorMsg}`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    this._destroy(this._rawSocket, `Connection closed ${msg}. Message:${errorMsg}`,\n                  ErrorSubcode.COMMUNICATION_ERROR);\n  }\n\n  /**\n   * Callback for Socket.connect.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   */\n  onOpen(originalSocket) {\n    LOG_TRACE('TcpTransportSession received socket open event.');\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onOpen for previous socket, ignoring.');\n      return;\n    }\n    if (this._state !== TransportSessionState.WAITING_FOR_CREATE) {\n      LOG_DEBUG(`TcpTransportSession stray onOpen when in state ${this._state}, ignoring.`);\n      return;\n    }\n\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(\n          new TransportSessionEvent(\n              TransportSessionEventCode.UP_NOTICE,\n              'Connected',\n              0,\n              null,\n              this._sessionId));\n  }\n\n  /**\n   * Establish underlying transport.\n   * @override\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() {\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_ERROR(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (this._rawSocket) {\n      LOG_ERROR('TCP transport can not connect once _rawsocket exists.');\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (!this._url) {\n      LOG_WARN('Cannot connect to null URL');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    LOG_DEBUG('Establishing Tcp transport session');\n    try {\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n      const { host, port } = this.parseHostPort(this._url);\n      LOG_DEBUG('Constructing socket');\n      // Luckily raw and tls sockets have the same API.\n      this._rawSocket = new net.Socket();\n      this._rawSocket.connect(port, host);\n      const tlsOptions = this.createTLSOptions();\n      tlsOptions.socket = this._rawSocket;\n      this._tlsSocket = tls.connect(tlsOptions);\n      this._tlsSocket.on('secureConnect', this.onOpen.bind(this, this._rawSocket));\n      this._writable = this._tlsSocket;\n      LOG_TRACE('Assigning properties to socket');\n      // WARNING!\n      // This is the kind of thing that breaks on minification.\n      // Re-run unit tests in production mode when changed:\n      // grunt --gruntfile=Gruntfile_Production.js\n      // When broken, consult the closure compiler exceptions file:\n      // (sdk-root)/builder/template/-common/env/externs.js\n      this._writable.on('data', this.onData.bind(this, this._rawSocket));\n      this._writable.on('error', this.onError.bind(this, this._rawSocket));\n      this._writable.on('close', this.onClose.bind(this, this._rawSocket));\n      this._writable.on('drain', this.onDrain.bind(this, this._rawSocket));\n      this._writable.setNoDelay(true);\n\n      LOG_TRACE('Prepared socket');\n    } catch (error) {\n      LOG_DEBUG(`Error connecting: ${error}`);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      throw new TransportError(`Could not create Tcp socket: ${error.message}`,\n        error.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    LOG_DEBUG('Tcp transport is connecting');\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(msg, subcode) {\n    // No need to flush the decompressor,\n    // the upper layer is not interested in any more data.\n    return this._destroy(this._rawSocket, msg, subcode);\n  }\n\n  _destroy(originalSocket, msg, subcode) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray _destroy for previous socket, ignoring.');\n      return TransportReturnCode.OK;\n    }\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_DEBUG(`Destroy Tcp transport: ${msg}`);\n      // Set state for connection teardown.\n      this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n      const onerrorStub = function onerrorStub() { };\n      if (this._writable) {\n        this._writable.removeAllListeners();\n        this._writable.on('error', onerrorStub); // Prevent unhandled errors\n        // Prefering destroy() over end() as it seems to\n        // cancel pending callbacks like onOpen more reliably.\n        //this._writable.destroy();\n        this._writable.destroy();\n        this._rawSocket = null;\n        this._writable = null;\n      }\n\n      this._canSendNeeded = false;\n      this._flushCallback = null;\n      this._drained = true;\n      this._state = TransportSessionState.DOWN;\n      this._client = null; // Don't accept data.\n    }\n\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    LOG_TRACE(`Destroying TCP transport. msg: ${msg} subcode: ${subcode}`);\n    if (this._eventCB) {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                              msg || 'Session is destroyed',\n                                              null,\n                                              subcode || 0,\n                                              this._sessionId));\n      // Release references to other components\n      this._eventCB = null;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Intended for clean shutdowns.\n   * Callback is invoked when all nodejs-buffered data\n   * has been flushed to the OS socket.\n   */\n  flush(callback) {\n    if (this._drained) {\n      LOG_DEBUG('Transport emitting FLUSH immediately.');\n      callback();\n    } else if (callback) {\n      this._flushCallback = callback;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Send encoded SMF message\n   * Returns transport return code.\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    // Limiting socket buffer size to _sendBufferMaxSize unless\n    // the force flag was set\n    // or the socket is drained, in which case any size message goes.\n    if (forceAllowEnqueue\n      || this._drained\n      || message.length < this._sendBufferMaxSize - this._writable.bufferSize) {\n      // _drained keeps track of \"overflowing\" writes.\n      // nodejs never refuses a write but warns when it starts buffering.\n      this._drained = this._writable.write(message, 'ascii');\n      if (this._clientstats) {\n        this._clientstats.bytesWritten += message.length;\n        ++this._clientstats.msgWritten;\n      }\n      return TransportReturnCode.OK;\n    }\n    // We'll unblock the user on the next onDrain.\n    this._canSendNeeded = true;\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destry()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   */\n  onDrain(originalSocket) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onDrain for previous socket, ignoring.');\n      return;\n    }\n    this._drained = true;\n\n    if (this._flushCallback) {\n      LOG_DEBUG('Transport emitting FLUSH after drain.');\n      const prevCallback = this._flushCallback;\n      this._flushCallback = null;\n      prevCallback();\n    }\n\n    if (this._canSendNeeded) {\n      LOG_TRACE('Transport emitting CAN_ACCEPT_DATA');\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '', null, 0, this._sessionId));\n    }\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    const str = `TcpTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n}\n\nmixin(TcpTlsTransport, NodeTLSOptsMixin);\n\nmodule.exports.TcpTlsTransport = TcpTlsTransport;\n","const tls = require('tls');\nconst { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { LOG_TRACE, LOG_DEBUG, LOG_ERROR } = require('solclient-log');\nconst { mixin } = require('solclient-eskit');\nconst { NodeTLSOptsMixin } = require('../node-tls-opts-mixin');\nconst { ShuntableTransport } = require('./shuntable-transport');\nconst { TransportBase } = require('../transport-base');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst {\n  formatHexString,\n} = Hex;\n\n/**\n *\n * Modular transport with TLS (tcps://) support.\n * Only works in node.js.\n * Must be initialized with an underlying transport\n * (currently only the plaintext tcp transport is supported).\n * Wraps the underlying transport in a ShuntableTransport stream\n * which can be passed to tls.connect()\n * Supports  TLS shutdown leaving the socket open.\n * @private\n */\nclass TlsOnlyTransport extends TransportBase {\n\n  constructor(url, eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super(url, eventCB, client, props);\n\n    /**\n     * @private\n     * @type {TransportClientStats}\n     */\n    this._clientstats = null;\n    this._underlyingTransport = null;\n\n    /**\n     * Maximum amount of send data than can be queued.\n     * NodeJS socket.write accepts all writes, growing a\n     * user space buffer indefinitely.\n     * The TCP transport (same as WS transport)\n     * manages the size of that buffer to stay below this limit.\n     * @private\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /*\n     * When true, the upper layer was told NO_SPACE and must be notified\n     * of the next \"drained\" event.\n     * @private\n     * @type {Boolean}\n     */\n    this._canSendNeeded = false;\n\n    /*\n     * One-shot flush callback.\n     * Set on flush(), ran and cleared on socket drain event.\n     * @private\n     */\n    this._flushCallback = null;\n\n    /**\n     * Flag to keep track of socket drained state:\n     * Set to false when socket.write returns false,\n     * (indicating user-space buffering)\n     * Set to true on socket drain events.\n     * (indicating the user space buffer has flushed to the OS.)\n     * @type {Boolean}\n     * @private\n     */\n    this._drained = true;\n\n    /**\n     * @type {TransportSessionState}\n     * @private\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * @type {?Socket}\n     * @private\n     */\n    this._tlsSocket = null;\n\n    /**\n     * Save the Event in the onError listener\n     * Use it in onClose to populate the event.\n     * (Tcp socket calls onError with the error then onClose.\n     * WS socket calls only onClose and passes the error directly.)\n     * @private\n     * @type {?Error}\n     */\n    this._socketError = null;\n\n    /**\n     * @type {?string}\n     * @private\n     */\n    this._sessionId = new Date().getTime();\n\n    // Some whitebox tests expect a transport->transportSession nesting.\n    this._transportSession = this;\n\n    this._props.transportProtocol = null;\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    return this._clientstats;\n  }\n\n  setClientStats(value) {\n    this._clientstats = value;\n  }\n\n  setUnderlyingTransport(newUnderlyingTransoprt) {\n    this._underlyingTransport = newUnderlyingTransoprt;\n  }\n\n  getUnderlyingTransport() {\n    return this._underlyingTransport;\n  }\n\n  rehome(eventCB, client) {\n    this._eventCB = eventCB;\n    this._client = client;\n  }\n\n  // eventCB and rxDataBuffer forwarded to _shuntableTransport\n  // Chicken-egg problem in the factory...\n  eventCB(transportEvent) {\n    this._shuntableTransport.eventCB(transportEvent);\n  }\n\n  rxDataBuffer(data) {\n    this._shuntableTransport.rxDataBuffer(data);\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Buffer} data the data\n   */\n  onData(originalSocket, data) {\n    // We do not collect Rx stats.\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n      originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('TcpTransportSession stray onData for previous socket, ignoring.');\n      return;\n    }\n    if (this._client) {\n      this._client.rxDataBuffer(data);\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Error} error the error\n   */\n  onError(originalSocket, error) {\n    if (originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('Tls transport stray onError for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tls transport is being destroyed, ignore error');\n      return;\n    }\n    LOG_DEBUG(`Tls transport connection error ${error}`);\n    // net.socket invokes the error handler before the close handler.\n    // Websocket does not, and that's what the upper layer expects.\n    // Suppressing the \"double tap\" error events when connected,\n    // saving the error for the onClose handler in _socketerror.\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      this._eventCB(\n        new TransportSessionEvent(\n          TransportSessionEventCode.SEND_ERROR,\n          `Connection error${error}`,\n          null,\n          ErrorSubcode.CONNECTION_ERROR, null));\n    } else { // we rely on the close listener to notify the upper layer.\n      this._socketError = error;\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   * @param {Boolean} hadError wheter there was an error\n   */\n  onClose(originalSocket, hadError) {\n    if (originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('TcpTransportSession stray onClose for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tls transport is being destroyed, ignore close');\n      return;\n    }\n    const msg = hadError ? 'with error' : 'cleanly';\n    const errorMsg = this._socketError && this._socketError.message;\n    this._socketError = null; // clear on read.\n    LOG_DEBUG(`Tls transport connection is closed ${msg}. Message: ${errorMsg}`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    this._destroy(this._tlsSocket, `Connection closed ${msg}. Message:${errorMsg}`,\n                  ErrorSubcode.COMMUNICATION_ERROR);\n  }\n\n  /**\n   * Callback for Socket.connect.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   */\n  onOpen(originalSocket) {\n    LOG_TRACE('TlsTransportSession received socket open event.');\n    if (originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('TlsTransportSession stray onOpen for previous socket, ignoring.');\n      return;\n    }\n    if (this._state !== TransportSessionState.WAITING_FOR_CREATE) {\n      LOG_DEBUG(`TcpTransportSession stray onOpen when in state ${this._state}, ignoring.`);\n      return;\n    }\n\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(\n          new TransportSessionEvent(\n              TransportSessionEventCode.UP_NOTICE,\n              'Connected',\n              0,\n              null,\n              this._sessionId));\n  }\n\n  /**\n   * Establish underlying transport.\n   * @override\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() {\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_ERROR(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (this._tlsSocket) {\n      LOG_ERROR('TCP transport can not connect once _tlsSocket exists.');\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    LOG_DEBUG('Establishing TLS transport session');\n    this._state = TransportSessionState.WAITING_FOR_CREATE;\n    try {\n      const duplexOptions = { underlyingTransport: this._underlyingTransport };\n      this._shuntableTransport = new ShuntableTransport(duplexOptions);\n      this._underlyingTransport.connect();\n      const tlsOptions = this.createTLSOptions();\n      tlsOptions.socket = this._shuntableTransport;\n      // host and port can be set here for certificate validation in the future.\n      this._tlsSocket = tls.connect(tlsOptions);\n      this._tlsSocket.on('secureConnect', this.onOpen.bind(this, this._tlsSocket));\n      LOG_TRACE('Assigning properties to socket');\n      // WARNING!\n      // This is the kind of thing that breaks on minification.\n      // Re-run unit tests in production mode when changed:\n      // grunt --gruntfile=Gruntfile_Production.js\n      // When broken, consult the closure compiler exceptions file:\n      // (sdk-root)/builder/template/-common/env/externs.js\n      this._tlsSocket.on('data', this.onData.bind(this, this._tlsSocket));\n      this._tlsSocket.on('error', this.onError.bind(this, this._tlsSocket));\n      this._tlsSocket.on('close', this.onClose.bind(this, this._tlsSocket));\n      this._tlsSocket.on('drain', this.onDrain.bind(this, this._tlsSocket));\n      this._tlsSocket.setNoDelay(true);\n\n      LOG_TRACE('Prepared socket');\n    } catch (error) {\n      LOG_DEBUG(`Error connecting: ${error}`);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      throw new TransportError(`Could not create TLS socket: ${error.message}`,\n        error.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    LOG_DEBUG('TLS transport is connecting');\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(msg, subcode) {\n    //return this._underlyingTransport.destroy(msg, subcode);\n    return this._destroy(this._tlsSocket, msg, subcode);\n  }\n\n  _destroy(originalSocket, msg, subcode) {\n    if (originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('TcpTransportSession stray _destroy for previous socket, ignoring.');\n      return TransportReturnCode.OK;\n    }\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_DEBUG(`Destroy Tls transport: ${msg}`);\n      // Set state for connection teardown.\n      this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n      const onerrorStub = function onerrorStub() { };\n      if (this._tlsSocket) {\n        this._tlsSocket.removeAllListeners();\n        this._tlsSocket.on('error', onerrorStub); // Prevent unhandled errors\n        // Prefering destroy() over end() as it seems to\n        // cancel pending callbacks like onOpen more reliably.\n        //this._tlsSocket.destroy();\n        this._tlsSocket.destroy();\n        this._tlsSocket = null;\n      }\n\n      if (this._underlyingTransport) {\n        this._underlyingTransport.destroy(msg, subcode);\n        this._underlyingTransport = null;\n      }\n\n      this._canSendNeeded = false;\n      this._flushCallback = null;\n      this._drained = true;\n      this._state = TransportSessionState.DOWN;\n      this._client = null; // Don't accept data.\n    }\n\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    LOG_TRACE(`Destroying TCP transport. msg: ${msg} subcode: ${subcode}`);\n    if (this._eventCB) {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                              msg || 'Session is destroyed',\n                                              null,\n                                              subcode || 0,\n                                              this._sessionId));\n      // Release references to other components\n      this._eventCB = null;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Intended for clean shutdowns.\n   * Callback is invoked when all nodejs-buffered data\n   * has been flushed to the OS socket.\n   */\n  flush(callback) {\n    if (this._drained) {\n      LOG_DEBUG('Transport emitting FLUSH immediately.');\n      callback();\n    } else if (callback) {\n      this._flushCallback = callback;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Send encoded SMF message\n   * Returns transport return code.\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    // Limiting socket buffer size to _sendBufferMaxSize unless\n    // the force flag was set\n    // or the socket is drained, in which case any size message goes.\n    if (forceAllowEnqueue\n      || this._drained\n      || message.length < this._sendBufferMaxSize - this._tlsSocket.bufferSize) {\n      // _drained keeps track of \"overflowing\" writes.\n      // nodejs never refuses a write but warns when it starts buffering.\n      this._drained = this._tlsSocket.write(message, 'ascii');\n      if (this._clientstats) {\n        this._clientstats.bytesWritten += message.length;\n        ++this._clientstats.msgWritten;\n      }\n      return TransportReturnCode.OK;\n    }\n    // We'll unblock the user on the next onDrain.\n    this._canSendNeeded = true;\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destry()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   */\n  onDrain(originalSocket) {\n    if (originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('TcpTransportSession stray onDrain for previous socket, ignoring.');\n      return;\n    }\n    this._drained = true;\n\n    if (this._flushCallback) {\n      LOG_DEBUG('Transport emitting FLUSH after drain.');\n      const prevCallback = this._flushCallback;\n      this._flushCallback = null;\n      prevCallback();\n    }\n\n    if (this._canSendNeeded) {\n      LOG_TRACE('Transport emitting CAN_ACCEPT_DATA');\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '', null, 0, this._sessionId));\n    }\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    const str = `TcpTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n  tlsShutdown(callback) {\n    this._tlsSocket.removeAllListeners('close');\n    this._tlsSocket.on('close', this.tlsShutdownStage2.bind(this, callback));\n    this._shuntableTransport.dontEnd();\n    this._tlsSocket.end();\n  }\n\n  tlsShutdownStage2(callback) {\n    this._shuntableTransport.shunt();\n    this._tlsSocket.removeAllListeners();\n    this._tlsSocket = null;\n    this._shuntableTransport = null;\n    this._underlyingTransport.rehome(this._eventCB, this._client);\n    this._underlyingTransport.setClientStats(this.getClientStats());\n    this.setClientStats(null);\n    this._eventCB = null;\n    this._client = null;\n    callback(this._underlyingTransport);\n  }\n}\n\nmixin(TlsOnlyTransport, NodeTLSOptsMixin);\n\nmodule.exports.TlsOnlyTransport = TlsOnlyTransport;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { TransportReturnCode } = require('./transport-return-codes');\n\n// Stubs don't use this\n/* eslint-disable class-methods-use-this */\n// Stubs declare all params\n/* eslint-disable no-unused-vars */\n\n/**\n *\n * Base class for various transports\n * @private\n */\nclass TransportBase {\n  /**\n   * @constructor\n   * @param {URL} url The URL to connect to\n   * @param {function} eventCB The callback to notify on events\n   * @param {SMFClient} client The SMF client to notify on data\n   * @param {Object} transportProps Additional properties to assign to the transport\n   * @param {?Object} [interceptor] The transport interceptor to install\n   */\n  constructor(url, eventCB, client, transportProps, interceptor = null) {\n    this._url = url;\n    this._ssl = TransportBase.useSsl(url);\n    this._client = client;\n    this._eventCB = eventCB;\n    this._props = transportProps;\n    this.setInterceptor(interceptor);\n  }\n\n  /**\n   * Establish underlying transport.\n   * Returns transport return code, to be overridden in subclass\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() { return TransportReturnCode.OK; }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code, to be overridden in subclass\n   * @param {Boolean} immediate Destroy gracefully if false.\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(immediate, msg, subcode) { return TransportReturnCode.OK; }\n\n  flush(callback) {\n    callback();\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Send encoded SMF message\n   * Returns transport return code, to be overridden in subclass\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) { return TransportReturnCode.OK; }\n\n  /**\n   * @returns {TransportProtocol} Return transport protocol in use\n   */\n  getTransportProtocol() {\n    return this._props.transportProtocol;\n  }\n\n  /**\n   * @returns {?String} Return transport session information such as sessionId\n   */\n  getInfoStr() { return null; }\n\n  /**\n   * @returns {TransportClientStats} transport statistics\n   */\n  getClientStats() { return null; }\n\n  /**\n   * Check whether or not the transport can be downgraded to the next protocol.\n   * It is possible to downgrade the transport, the existing transport is destroyed and\n   * the new transport connection initiated.\n   * @param {String} msg The message associated with this operation\n   * @param {ErrorSubcode} subcode The subcode associated with this operation\n   * @returns {Boolean} Return true if downgrade is allowed and has been initiated; false otherwise\n   */\n  beginDowngrade(msg, subcode) { return false; }\n\n  /**\n   * Sets the interceptor for this transport. This object has the chance\n   * to intervene before bytes are sent or received.\n   * @param {Object} [interceptor] If set, the interceptor is inserted into the\n   *\n   * @private\n   */\n  setInterceptor(interceptor) {\n    if (this._interceptor) {\n      // Reset original callbacks\n      if (this._interceptor.removed) this._interceptor.removed(this);\n    }\n    this._interceptor = interceptor;\n    if (interceptor) {\n      if (interceptor.installed) interceptor.installed(this);\n    }\n  }\n\n  toString() {\n    return `${this.getTransportProtocol()}${this._ssl ? ' (SSL)' : ''}`;\n  }\n\n  /**\n   * @param {String} url The URL to check\n   * @returns {Boolean} `true` if the URL requires SSL; `false` otherwise\n   * @static\n   */\n  static useSsl(url) {\n    const urlParts = (url || '').split('://');\n    if (urlParts.length === 0 || TransportBase.validSchemes.indexOf(urlParts[0]) < 0) {\n      throw new OperationError(`Invalid url \"${url}\": Only [${\n                               TransportBase.validSchemes.join(', ')}] URL schemes are supported`,\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n\n    const useSSL = (urlParts[0] === 'https' || urlParts[0] === 'wss' || urlParts[0] === 'tcps');\n    return useSSL;\n  }\n\n}\n\n/**\n * @type {Array.<String>}\n */\nTransportBase.validSchemes = ['http', 'https', 'ws', 'wss', 'tcp', 'tcps'];\n\nmodule.exports.TransportBase = TransportBase;\n\n","const { WebTransportCapabilities } = require('./web');\n\nconst TransportCapabilities = {\n  web: WebTransportCapabilities,\n};\n\nmodule.exports.TransportCapabilities = TransportCapabilities;\n","/**\n * @private\n * @constructor\n */\nclass TransportClientStats {\n  constructor() {\n    this.bytesWritten = 0;\n    this.msgWritten = 0;\n  }\n}\n\nmodule.exports.TransportClientStats = TransportClientStats;\n","const { SolaceError } = require('solclient-error');\n\n/**\n * @classdesc\n * An error thrown when an error occurs on the transport session.\n * <p>\n * Applications are not expected to instantiate this type.\n *\n * @memberof solace\n * @private\n */\nclass TransportError extends SolaceError {\n  /**\n   * Creates an instance of TransportError.\n   * @constructor\n   * @param {String} message The message associated with this error\n   * @param {ErrorSubcode} subcode The subcode for this error\n   * @private\n   */\n  constructor(message, subcode) {\n    super('TransportError', message);\n    this.subcode = subcode;\n  }\n\n  toString() {\n    return `${super.toString()}, subcode=${this.subcode}`;\n  }\n}\n\nmodule.exports.TransportError = TransportError;\n","const { LOG_TRACE } = require('solclient-log');\nconst { TcpRawTransport, CompressedTransport, TlsOnlyTransport, TcpTlsTransport } = BUILD_ENV.TARGET_NODE ? require('./tcp') : {};\nconst { WebTransport } = require('./web');\n\nconst TransportFactory = {\n  createTransport(host, eventCB, client, props, getId) {\n    const url = host;\n    Object.assign(props, {\n      connectTimeoutInMsecs: 100000,\n    });\n    // TCP transport is dictated by the URL (tcp:// or tcps://)\n    // It is unaffected by the transportProtocol config parameter.\n    if (TcpRawTransport && url.trim().startsWith('tcp')) {\n      if (!url.trim().startsWith('tcps')) {\n        if (props.compressionLevel === 0) {\n          LOG_TRACE('createTransport raw tcp');\n          return new TcpRawTransport(url, eventCB, client, props);\n        } // else { //compressed plaintext right off the bat.\n        LOG_TRACE('createTransport compressed plaintex.');\n        const compressingLayer = new CompressedTransport(eventCB, client, props);\n        const plaintextTransport =\n          new TcpRawTransport(url,\n                              compressingLayer.eventCB.bind(compressingLayer),\n                              compressingLayer, props);\n        compressingLayer.setClientStats(plaintextTransport.getClientStats());\n        plaintextTransport.setClientStats(null);\n        compressingLayer.setUnderlyingTransport(plaintextTransport);\n        return compressingLayer;\n      } //else { //tcps\n      if (props.sslConnectionDowngradeTo !== 'PLAIN_TEXT') { //no downgrade\n        LOG_TRACE('createTransport monolithic tls');\n        return new TcpTlsTransport(url, eventCB, client, props);\n      } //else { // Composite TLS transport anticipating downgrade.\n      LOG_TRACE('createTransport composite tls (anticipating downgrade)');\n      // passing URL for SNI.\n      const tlsLayer = new TlsOnlyTransport(url, eventCB, client, props);\n      const plaintextTransport =\n        new TcpRawTransport(url,\n                            tlsLayer.eventCB.bind(tlsLayer),\n                            tlsLayer, props);\n      tlsLayer.setClientStats(plaintextTransport.getClientStats());\n      plaintextTransport.setClientStats(null);\n      tlsLayer.setUnderlyingTransport(plaintextTransport);\n      return tlsLayer;\n    }\n    LOG_TRACE('createTransport WebTransport');\n    return new WebTransport(url, eventCB, client, props, getId);\n  },\n\n  startCompression(uncompressedTransport) {\n    const eventCB = uncompressedTransport._eventCB;\n    const client = uncompressedTransport._client;\n    const props = uncompressedTransport._props;\n\n    const compressingLayer = new CompressedTransport(eventCB, client, props);\n    uncompressedTransport.rehome(compressingLayer.eventCB.bind(compressingLayer),\n                                 compressingLayer);\n    compressingLayer.setClientStats(uncompressedTransport.getClientStats());\n    uncompressedTransport.setClientStats(null);\n    compressingLayer.setUnderlyingTransport(uncompressedTransport);\n    compressingLayer.connect();\n    return compressingLayer;\n  },\n\n  severTls(encryptedTransport, compress, callback) {\n    if (!compress) {\n      encryptedTransport.tlsShutdown(callback);\n    } else {\n      const precallback = plaintextTransport => callback(this.startCompression(plaintextTransport));\n      //encryptedTransport.tlsShutdown(precallback.bind(this));\n      encryptedTransport.tlsShutdown(precallback);\n    }\n  },\n};\n\nmodule.exports.TransportFactory = TransportFactory;\n","const WebTransportsLib = require('./web');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_TRACE } = require('solclient-log');\nconst { TransportBase } = require('./transport-base');\nconst { TransportProtocol } = require('./transport-protocols');\n\nconst { lazyValue } = Lazy;\n\n// Define transportProtocol to transport mapping\nconst lutTransportProtocols = lazyValue(() => {\n  const protocols = {\n    [TransportProtocol.HTTP_BASE64]:           WebTransportsLib.StateBase64,\n    [TransportProtocol.HTTP_BINARY]:           WebTransportsLib.StateBinary,\n    [TransportProtocol.HTTP_BINARY_STREAMING]: WebTransportsLib.StateStreamingAndBinary,\n    [TransportProtocol.WS_BINARY]:             WebTransportsLib.StateWebSocketBinary,\n  };\n  return protocols;\n});\n\n/**\n * @classdesc\n * Handles web transport selection and downgrade without creating the actual transport\n * session object\n * @memberof solace\n * @private\n */\nclass TransportProtocolHandler {\n  constructor(url, webTransportProtocolList) {\n    const useSSL = TransportBase.useSsl(url);\n    let transport = null;\n    let downgradeTransport = null;\n    webTransportProtocolList.slice().reverse().forEach((el) => {\n      const TransportConstructor = lutTransportProtocols.value[el];\n      transport = new TransportConstructor(useSSL, this.switchState.bind(this), downgradeTransport);\n      downgradeTransport = transport;\n    });\n    this._transport = transport;\n    this._transport.onEnter();\n  }\n\n  getTransportProtocol() {\n    return this._transport.getTransportProtocol();\n  }\n\n  completeDowngrade(err) {\n    return this._transport.completeDowngrade(err);\n  }\n\n  canCompleteDowngrade() {\n    return (this._transport.getNextState() !== null);\n  }\n\n  toString() {\n    return this._transport.toString();\n  }\n\n  switchState(newState, reason) {\n    LOG_TRACE(`Switching ${this._transport} => ${newState} (${reason})`);\n    this._transport = newState;\n    newState.onEnter();\n  }\n}\n\nmodule.exports.TransportProtocolHandler = TransportProtocolHandler;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Connection scheme types referenced by {@link solace.SessionProperties#transportProtocol},\n * {@link solace.SessionProperties#webTransportProtocolList} (browser only), and\n * {@link solace.SessionProperties#transportProtocolInUse}.\n *\n * @target browser\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst TransportProtocol = {\n\n  /**\n   * A COMET model that uses base64 payload encoding. HTTP responses have a defined Content-Length.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BASE64: 'HTTP_BASE64',\n\n  /**\n   * A COMET model that uses binary payload encoding. HTTP responses have a defined Content-Length.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BINARY: 'HTTP_BINARY',\n\n  /**\n   * A COMET model that uses binary payload encoding. HTTP responses use Chunked Transfer-Encoding\n   * to stream data from the Solace Message Router to the client without needing to terminate the\n   * HTTP response.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BINARY_STREAMING: 'HTTP_BINARY_STREAMING',\n\n  /**\n   * A WebSocket communication channel uses binary payload encoding and provides full-duplex\n   * communication between the client and the Solace Message Router over a single TCP connection.\n   *\n   * This is the preferred protocol to use if all networking infrastructure betweed the application\n   * and the Solace Message router support WebSockets. If this is not the case, it may be necessary\n   * to use one of the HTTP protocols that use the COMET model of messaging.\n   *\n   * This transport protocol supports Guaranteed Messaging.\n   */\n  WS_BINARY: 'WS_BINARY',\n\n};\n\nmodule.exports.TransportProtocol = Enum.new(TransportProtocol);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst TransportReturnCode = {\n  OK:                          0,\n  FAIL:                        1,\n  NO_SPACE:                    2,\n  DATA_DECODE_ERROR:           3,\n  INVALID_STATE_FOR_OPERATION: 4,\n  CONNECTION_ERROR:            5,\n};\n\nmodule.exports.TransportReturnCode = Enum.new(TransportReturnCode);\n\n/* eslint-disable */\n// Manually demangle these names; bug 70031\nmodule.exports.TransportReturnCode._setCanonical({\n  'OK':                          TransportReturnCode.OK,\n  'FAIL':                        TransportReturnCode.FAIL,\n  'NO_SPACE':                    TransportReturnCode.NO_SPACE,\n  'DATA_DECODE_ERROR':           TransportReturnCode.DATA_DECODE_ERROR,\n  'INVALID_STATE_FOR_OPERATION': TransportReturnCode.INVALID_STATE_FOR_OPERATION,\n  'CONNECTION_ERROR':           TransportReturnCode.CONNECTION_ERROR\n});\n/* eslint-enable */\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Defines the possible TransportSessionEvent codes.\n * @private\n * @enum {number}\n */\nconst TransportSessionEventCode = {\n  // Raised when TransportSession is up and ready to send/receive data\n  UP_NOTICE:           1,\n  // Raised if the session is destroyed\n  DESTROYED_NOTICE:    2,\n  // Raised when the send queue had reached its maximum, but now has space again\n  CAN_ACCEPT_DATA:     4,\n  // Raised when there is a decode error on received data.  The app should destroy the session\n  DATA_DECODE_ERROR:   5,\n  // Raised when there is a decode error on received data.  The app should destroy the session\n  PARSE_FAILURE:       6,\n  // Raised when the connection times out. The app should attempt downgrade if available.\n  CONNECT_TIMEOUT:     7,\n  // There was an error sending a message on an etablished transport\n  SEND_ERROR:          8,\n  // The requested downgrade was rejected.\n  DOWNGRADE_FAILED:    10,\n  // The requested downgrade completed.\n  DOWNGRADE_SUCCEEDED: 11,\n};\n\nmodule.exports.TransportSessionEventCode = Enum.new(TransportSessionEventCode);\n","const { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { TransportSessionEventCode } = require('./transport-session-event-codes');\n\nconst { formatHexString } = Hex;\n\n/**\n * @classdesc\n * Defines a Transport Session Event\n *\n * @private\n */\nclass TransportSessionEvent {\n\n  /**\n   * @constructor\n   * @param {Object} tsEventCode The {@link TransportSessionEventCode} associated with this event\n   * @param {String} infoStr An informational string\n   * @param {?Number} responseCode The response code from the router, if any\n   * @param {ErrorSubcode} subcode The {@link ErrorSubcode} associated with this event\n   * @param {Number} sessionId The session ID associated with this event\n   *\n   */\n  constructor(tsEventCode, infoStr, responseCode, subcode, sessionId) {\n    this._transportEventCode = tsEventCode;\n    this._infoStr = infoStr;\n    this._responseCode = responseCode;\n    this._errorSubcode = subcode;\n    this._sid = sessionId;\n  }\n\n  // TransportSessionEvent functions\n\n  getTransportEventCode() {\n    return this._transportEventCode;\n  }\n\n  get transportEventCode() {\n    return this._transportEventCode;\n  }\n\n  getInfoStr() {\n    return this.infoStr;\n  }\n\n  get infoStr() {\n    return this._infoStr;\n  }\n\n  getResponseCode() {\n    return this.responseCode;\n  }\n\n  get responseCode() {\n    return this._responseCode;\n  }\n\n  getSubcode() {\n    return this.errorSubcode;\n  }\n\n  get errorSubcode() {\n    return this._errorSubcode;\n  }\n\n  getSessionId() {\n    return this.sessionId;\n  }\n\n  get sessionId() {\n    return this._sid;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'transportEventCode': TransportSessionEventCode.describe(this.transportEventCode),\n      'infoStr':            this.infoStr,\n      'responseCode':       this.responseCode,\n      'errorSubcode':       ErrorSubcode.describe(this.errorSubcode),\n      'sid':                this.sid && formatHexString(this.sid) || 'N/A',\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n}\n\nmodule.exports.TransportSessionEvent = TransportSessionEvent;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Transport session states, used by WebSocketTransportSession and HTTPTransportSession\n * @enum {number}\n * @private\n */\nconst TransportSessionState = {\n  DOWN:                0,\n  WAITING_FOR_CREATE:  1,\n  SESSION_UP:          2,\n  WAITING_FOR_DESTROY: 4,\n  CONNECTION_FAILED:   5,\n};\n\nmodule.exports.TransportSessionState = Enum.new(TransportSessionState);\n","const {\n  LOG_INFO,\n  LOG_WARN,\n} = require('solclient-log');\nconst { Process } = require('solclient-util');\n\n/**\n * @classdesc\n * Base class for transports\n * @memberof solace\n * @private\n */\nclass TSHState {\n  /**\n   * @constructor\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {TransportProtocol} tpProtocol The protocol to use for this state\n   * @param {Function} exitCallback The callback to notify on exit\n   * @param {?TSHState} nextState The TSH state to use on downgrade\n   */\n  constructor(useSsl, tpProtocol, exitCallback, nextState) {\n    this._ssl = !!useSsl;\n    this._transportProtocol = tpProtocol;\n    this._exitCallback = exitCallback;\n    this._nextState = nextState;\n    this._unsupportedRuntimeMessage =\n      `${this._transportProtocol} not supported by this runtime: ${Process.userAgent}`;\n  }\n\n  getNextState() {\n    return this._nextState;\n  }\n\n  setNextState(nextState) {\n    this._nextState = nextState;\n  }\n\n  getTransportProtocol() {\n    return this._transportProtocol;\n  }\n\n  getUseSsl() {\n    return this._ssl;\n  }\n\n  // Override me\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return true;\n  }\n\n  onEnter() {\n    if (!this.validateLegal()) {\n      if (this._nextState && this._exitCallback) {\n        this._exitCallback(this._nextState, this._unsupportedRuntimeMessage);\n      } else {\n        LOG_WARN(`${this._unsupportedRuntimeMessage}, no next state.`);\n      }\n    }\n  }\n\n  completeDowngrade(err) {\n    if (this._nextState && this._exitCallback) {\n      LOG_INFO(`Connect failed (${err}), try next state.`);\n      this._exitCallback(this._nextState, 'Connect failed');\n      return true;\n    }\n    LOG_WARN(`Connect failed (${err}), no next state.`);\n    return false;\n  }\n\n  toString() {\n    return this._transportProtocol + (this._ssl ? ' (SSL)' : '');\n  }\n\n}\n\nmodule.exports.TSHState = TSHState;\n","const HTTPLib = require('./http');\nconst { StateBase64 } = require('./state-base64');\nconst { StateBinary } = require('./state-binary');\nconst { StateStreamingAndBinary } = require('./state-streaming-and-binary');\nconst { StateWebSocketBinary } = require('./state-websocket-binary');\nconst { WebTransport } = require('./web-transport');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\nconst { HTTPConnection, HTTPTransportSession } = HTTPLib;\n\nmodule.exports.HTTPConnection = HTTPConnection;\nmodule.exports.HTTPTransportSession = HTTPTransportSession;\nmodule.exports.StateBase64 = StateBase64;\nmodule.exports.StateBinary = StateBinary;\nmodule.exports.StateStreamingAndBinary = StateStreamingAndBinary;\nmodule.exports.StateWebSocketBinary = StateWebSocketBinary;\nmodule.exports.WebTransport = WebTransport;\nmodule.exports.WebTransportCapabilities = WebTransportCapabilities;\n","const { HTTPConnection } = require('./http-connection');\nconst { HTTPTransportSession } = require('./http-transport-session');\n\nif (BUILD_ENV.TARGET_BROWSER) {\n  module.exports.HTTPConnection = HTTPConnection;\n  module.exports.HTTPTransportSession = HTTPTransportSession;\n}\n","const DebugLib = require('solclient-debug');\nconst {\n  Convert,\n  Base64,\n} = require('solclient-convert');\nconst {\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n  LOG_ERROR,\n} = require('solclient-log');\nconst {\n  sendXhrBinary,\n  sendXhrText,\n} = require('./send-xhr');\nconst { StringBuffer, TimingBucket } = require('solclient-util');\nconst { TransportReturnCode } = require('../../transport-return-codes');\nconst { XHRFactory } = require('./xhr-factory');\n\nconst { arrayBufferToString } = Convert;\n\nconst SOL_CONNECTION_DEBUG = false;\n\n/**\n * A URI starting with a \"/\" is a \"path-absolute\" URI, and those aren't\n * allowed to have a query component (starting with \"?\").\n *\n * If an origin isn't defined in the url, tack on the one from the page.\n *\n * @param {URL} url The URL to connect to\n * @returns {URL} Adjusted URL if incoming URL was relative\n * @private\n */\nfunction prependOrigin(url) {\n  if (!url.match(/^(http|ws)(s?):/i) && window.location && window.location.origin) {\n    return window.location.origin + ((url.charAt(0) !== '/') ? '/' : '') + url;\n  }\n  return url;\n}\n\nfunction getTs() {\n  return new Date().getTime();\n}\n\nclass Stats {\n  constructor() {\n    this.WaitedToken = new TimingBucket('WaitedToken', 100);\n    this.HadToken = new TimingBucket('HadToken', 100);\n    this.ReturnedToken = new TimingBucket('ReturnedToken', 100);\n  }\n  toString() {\n    let s = '';\n    [this.WaitedToken, this.HadToken, this.ReturnedToken].forEach((b) => {\n      if (b && b.bucketCount() > 0) {\n        s += `${b.name} >> ${b}\\n`;\n      }\n    });\n    return s;\n  }\n}\n\n/**\n * @classdesc\n * This class contains all state for a single HTTP connection (XHR).\n *\n * @private\n */\nclass HTTPConnection {\n  constructor(url, base64Enc, streamProgressEvents, rxDataCb,\n              connectionErrorCb, contentType, connectionClose) {\n    this.Options = {\n      url: prependOrigin(url),\n      contentType,\n      base64Enc,\n      streamProgressEvents,\n      connectionClose,\n    };\n\n    this._streamProgressBytes = 0;\n    this._xhr = null;\n    this._rxDataCb = rxDataCb;\n    this._connErrorCb = connectionErrorCb;\n    this._reqActive = false;\n    this._REQCOUNTER = 0;\n    this._REQBASE = Math.floor(Math.random() * 1000);\n\n    this._xhr = XHRFactory.create();\n    // older browser ie9\n    this._handleAbortedReq = !HTTPConnection.browserSupportsXhrBinary();\n\n    this.stats = new Stats();\n  }\n\n  recStat(s) {\n    if (!SOL_CONNECTION_DEBUG) {\n      return;\n    }\n    const stats = this.stats;\n    if (s === 'GotToken') {\n      stats.LastGotToken = getTs();\n      if (stats.LastSendMsg) {\n        const waitedTok = stats.LastGotToken - stats.LastSendMsg;\n        stats.WaitedToken.log(waitedTok);\n        if (waitedTok > 100) {\n          LOG_WARN(`Abnormally long waitToken, last request: ${this._REQBASE}_${this._REQCOUNTER}`);\n        }\n      }\n    }\n    if (s === 'SendMsg') {\n      stats.LastSendMsg = getTs();\n      const hadToken = stats.LastSendMsg - stats.LastGotToken;\n      stats.HadToken.log(hadToken);\n    }\n    if (s === 'GotData') {\n      stats.LastGotData = getTs();\n    }\n    if (s === 'ReturnToken') {\n      stats.LastReturnToken = getTs();\n      if (stats.LastGotData) {\n        const returnedToken = stats.LastReturnToken - stats.LastGotData;\n        stats.ReturnedToken.log(returnedToken);\n      }\n    }\n  }\n\n  /*\n   * Send data over the connection - this requires a send token\n   */\n  send(data, attempt = 0, maxRetry = 1) {\n    if (attempt > 0) {\n      this._xhr.abort();\n      this._xhr = XHRFactory.create();\n    }\n    this._xhr.open('POST', this.Options.url, true);\n\n    this._streamProgressBytes = 0;\n    // We pass the write data to the CB so we can retry when it mysteriously fails.\n    this._xhr.onreadystatechange = () => this.xhrStateChange(data, attempt, maxRetry);\n\n    this._reqActive = true;\n\n    if (SOL_CONNECTION_DEBUG) {\n      this._REQCOUNTER++;\n      this._xhr.setRequestHeader('sol-request-track', `${this._REQBASE}_${this._REQCOUNTER}`);\n    }\n    if (this.Options.base64Enc) {\n      sendXhrText(this._xhr, data, this.Options.contentType, this.Options.connectionClose);\n    } else {\n      sendXhrBinary(this._xhr, data, this.Options.contentType, this.Options.connectionClose);\n    }\n    this.recStat('SendMsg');\n  }\n\n\n  // XmlHTTPRequest Callback\n  xhrStateChange(sentdata, attempt, maxRetry) {\n    const readyState = this._xhr.readyState;\n    const RS_LOADING = this._xhr.LOADING;\n    const RS_DONE = this._xhr.DONE;\n\n    if (!((this.Options.streamProgressEvents && readyState === RS_LOADING)\n          || readyState === RS_DONE)) {\n      // we proceed with notifications if we're LOADING and we requested streaming events,\n      // or we're DONE.\n      return;\n    }\n\n    if (!this._reqActive) {\n          // request aborted, DO NOT propagate event\n      return;\n    }\n\n    let status = null;\n    if (this._handleAbortedReq) {\n      // To avoid the following IE9 error when request is aborted by server or client and\n      // application tries to access any property in the XHR other than readyState whose value is\n      // 4 (XMLHTTPRequest.DONE):\n      // - The data necessary to complete this operation is not yet available\n      // See https://groups.google.com/forum/#!topic/websync/ysBEvtvMyb0 for details\n      // _requestActive is used to handle client initiated abort, but it does not handle\n      // the case when the request is aborted on the server side or proxy server\n      try {\n        status = this._xhr.status;\n      } catch (e) {\n        LOG_INFO(`Error trying to access status in XHR due to request aborted: ${e.message}`);\n        return;\n      }\n    } else {\n      status = this._xhr.status;\n    }\n\n    if (status === 200 || status === 304) {\n      // Success status code\n      let data = null;\n      if (this._xhr.responseType && this._xhr.responseType === 'arraybuffer') {\n        data = arrayBufferToString(this._xhr.response);\n      } else {\n        data = this._xhr.responseText;\n      }\n      data = data.substring(this._streamProgressBytes, data.length);\n      this._streamProgressBytes += data.length;\n\n      if (data.length === 0 && readyState === RS_LOADING) {\n        // we are streaming LOADING events but have no data\n        return;\n      }\n\n      if (this.Options.base64Enc) {\n        try {\n          data = Base64.decode(data);\n        } catch (e) {\n          // Failed the decode - call the error callback\n          LOG_ERROR(`Data decode error on: ${data}`);\n          LOG_ERROR(`Data decode error is: ${e.message}`);\n          this._rxDataCb(TransportReturnCode.DATA_DECODE_ERROR, data);\n          return;\n        }\n      } else {\n        // take lower-8 bits\n        const decodedData = [];\n        const dataLength = data.length;\n        for (let i = 0; i < dataLength; i++) {\n          decodedData.push(String.fromCharCode(data.charCodeAt(i) & 0xFF));\n        }\n        data = decodedData.join('');\n      }\n      if (readyState === RS_DONE) {\n        // MUST do this BEFORE the callback invocation, because the callback can trigger a new send.\n        this._reqActive = false;\n      }\n      this._rxDataCb(TransportReturnCode.OK, data);\n      if (readyState === RS_DONE && data.length > 0) {\n        this._rxDataCb(TransportReturnCode.OK, ''); // indicate end of stream\n      }\n\n      return;\n    }\n\n    // Failure status code.\n    const statusText = this._xhr.statusText;\n    let responseText = '';\n    if (this._xhr.responseType && this._xhr.responseType === 'arraybuffer') {\n      responseText = arrayBufferToString(this._xhr.response);\n    } else {\n      responseText = this._xhr.responseText || '';\n    }\n\n    const responseTextLen = responseText.length;\n    const requestUrl = this.Options.url;\n    const sentdataLen = sentdata ? sentdata.length : 0;\n    const { formatDumpBytes } = DebugLib.Debug;\n    const responseTextDump = formatDumpBytes(\n      responseText.substr(0, Math.min(responseTextLen, 64)), true, 0);\n    const sentTextDump = formatDumpBytes(\n      (sentdata || '').substr(0, Math.min(sentdataLen, 256)), true, 0);\n    if (BUILD_ENV.MODE_DEBUG) {\n      const stmt = new StringBuffer(\n        `Http request failed.  url=${requestUrl}, status=${status}, statusText=${statusText}, `,\n        `responseText length=${responseTextLen}, `,\n        'responseText (first 64 bytes or fewer)=\\n',\n        `${responseTextDump}, `,\n        `XHR errorCode=${this._xhr._error ? this._xhr._error.code : ''}, `,\n        `attempt=${attempt}, reqActive=${this._reqActive}, readyState=${readyState}, `,\n        `sent data length=${sentdataLen}, `,\n        'sent data (first 256 bytes or fewer)=\\n',\n        `${sentTextDump}`).toString();\n      LOG_DEBUG(stmt);\n    }\n\n    const nextMaxRetry = maxRetry;\n    if (this._reqActive\n          && status !== 400\n          && responseText.length === 0\n          && (attempt === 0 || attempt < nextMaxRetry)) {\n      LOG_INFO(`XHR failed while request active, will retry send, retry=${attempt + 1}`);\n        // RETRY (could be a transient browser connection problem)\n      this.send(sentdata, attempt + 1, nextMaxRetry);\n    } else {\n      this._reqActive = false;\n      this._connErrorCb(\n          status,\n          new StringBuffer(\n            `HTTP request failed(status=${status} statusText=${statusText}, `,\n            `responseText length=${responseTextLen}, responseText[0..64]=\\n`,\n            responseTextDump,\n            `XHR errorCode=${this._xhr._error ? this._xhr._error.code : ''})`).toString());\n    }\n  }\n\n  isUsingBase64() {\n    return this.Options.base64Enc;\n  }\n\n  // This function will abort the current xhr request if it is active\n  abort() {\n      // mark request as inactive, so we won't process statechange events\n    this._reqActive = false;\n    if (this._xhr && this._xhr.abort) {\n      this._xhr.abort();\n    }\n  }\n\n  /**\n   * Check if we can try binary XHR on this browser.\n   * @returns {Boolean} `true` if XHR binary should work; `false` otherwise\n   * @static\n   */\n  static browserSupportsXhrBinary() {\n    return sendXhrBinary !== sendXhrText;\n  }\n\n  /**\n   * Check if browser supports streaming responses (progressive reading of XHR).\n   * @returns {Boolean} `true` if feature was detected, `false` otherwise\n   * @static\n   */\n  static browserSupportsStreamingResponse() {\n    const xhr = XHRFactory.create();\n    // A conforming XHR2 implementation must include progress events.\n    // Can we assume that the event property will be null instead of undefined?\n    // A conforming XHR2 implementation must also include withCredentials.\n    const check = xhr && xhr.onprogress === null; // xhr.withCredentials === false;\n    LOG_INFO(`http browserStreamingCheck - if XMLHTTPRequest supported and XMLHTTPRequest support onprogress: ${check}`);\n    return check;\n  }\n}\n\nmodule.exports.HTTPConnection = HTTPConnection;\n","const DebugLib = require('solclient-debug');\nconst SMFLib = require('solclient-smf');\nconst { Check } = require('solclient-validate');\nconst { Convert, Hex } = require('solclient-convert');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { HTTPConnection } = require('./http-connection');\nconst { LogFormatter } = require('solclient-log');\nconst { SMFClient } = require('../../smf-client');\nconst { TransportError } = require('../../transport-error');\nconst { TransportProtocol } = require('../../transport-protocols');\nconst { TransportReturnCode } = require('../../transport-return-codes');\nconst { TransportSessionEvent } = require('../../transport-session-event');\nconst { TransportSessionEventCode } = require('../../transport-session-event-codes');\nconst { TransportSessionState } = require('../../transport-session-states');\nconst { WebTransportSessionBase } = require('../web-transport-session-base');\n\nconst { int32ToStr, strToByteArray, strToHexArray } = Convert;\nconst { formatHexString } = Hex;\n\nconst {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_ERROR,\n  LOG_INFO,\n} = new LogFormatter('[http-transport-session]');\n\n/**\n * @private\n * @namespace Values for tracking current state of incoming streaming data\n */\nconst PacketReadState = {\n  READING_HEADER: 0,\n  STREAMING:      1,\n};\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n/**\n * @private\n */\nconst MSIE_TRANSPORT_PADDING = 257;\n\nfunction adaptURL(url) {\n  const v = url.match(/(ws|http)(s?:\\/\\/.+)/);\n  return `http${v[2]}`;\n}\n\n/** ===========================================================================\n * HTTPTransportSession :\n *\n * This contains all data and code required to maintain HTTP transport sessions\n * with Solace routers\n * ============================================================================\n * @extends WebTransportSessionBase\n * @private\n */\nclass HTTPTransportSession extends WebTransportSessionBase {\n  constructor(baseUrl, eventCB, client, props) {\n    // Our internal data format (for now) is binary string, so we wrap the callback\n    // in a function that does the required conversion to ArrayBuffer.\n    super(baseUrl,\n          eventCB,\n          client,\n          props);\n\n    // const self = this;\n    // logger.formatter = function formatter(...args) {\n    //   return [self.sessionIdHex, ...args];\n    // };\n\n    // Set to true if we have the data token that we need for sending data to the router\n    this._haveToken = true;\n\n    // Maximum payload chunk size in web transport\n    this._confMaxWebPayload = props.maxWebPayload;\n    this._maxPayloadBytes = 0;\n\n    // Timer that will keep track of the destroy time\n    this._destroyTimer = null;\n    this._destroyTimeout = props.connectTimeoutInMsecs;\n\n    // The URL used for create messages\n    this._createUrl = adaptURL(baseUrl);\n\n    // The URL used for all other messages - it will have the router tag appended\n    // after the session has been created\n    this._routerUrl = this._createUrl;\n\n    // SMF client (instantiated after session is created)\n    this._rxChannelClient = null;\n    // Send data connection (instantiated after session is created)\n    this._httpSendConn = null;\n\n    // Receive data connection (instantiated after session is created)\n    this._httpReceiveConn = null;\n\n    // Data Token SMF header - this is preformatted for performance\n    // It will be set after session is created\n    this._smfDataTokenTSHeader = null;\n\n    // Router Tag - a string that will be added to HTTP request URLs\n    this._routerTag = '';\n\n    // Session ID - 8-byte identifier that will associate this client\n    // with client resources on the router\n    this._sid = null;\n\n    if (props.transportProtocol === null || props.transportProtocol === undefined) {\n      throw new OperationError('transportProtocol is not set', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n\n    this._transportProtocol = props.transportProtocol;\n    this._useBinaryTransport = false;\n    this._useStreamingTransport = false;\n    this._streamingTransportPadding = 0;\n\n    this._useBinaryTransport = (props.transportProtocol !== TransportProtocol.HTTP_BASE64);\n    this._useStreamingTransport = (props.transportProtocol ===\n                                   TransportProtocol.HTTP_BINARY_STREAMING);\n\n    // extra state for STREAMING transport\n    this._incomingBuffer = '';\n    this._packetReadState = PacketReadState.READING_HEADER;\n\n    const agent = navigator.userAgent || '';\n    if (agent.match(/trident/i) || agent.match(/msie/i)) {\n      this._streamingTransportPadding = MSIE_TRANSPORT_PADDING;\n    }\n\n    if (props.transportContentType === null || props.transportContentType === undefined) {\n      throw new OperationError('transportContentType is not set', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._contentType = props.transportContentType;\n  }\n\n  /**\n   * @override\n   */\n  connectTimerExpiry() {\n    LOG_INFO('HTTP transport connect timeout');\n    this.destroyCleanup('HTTP transport connect timeout', ErrorSubcode.TIMEOUT);\n  }\n\n  get sessionIdHex() {\n    return (this._sid) ? formatHexString(this._sid) : '';\n  }\n\n  updateMaxWebPayload() {\n    // 22 Bytes of TransportSMF wrapping overhead\n    const trLessEncapSMF = this._confMaxWebPayload - 22;\n    // Base64 has a 4:3 expansion\n    this._maxPayloadBytes = this._useBinaryTransport\n      ? trLessEncapSMF\n      : Math.floor(trLessEncapSMF * 0.75);\n  }\n\n  /**\n   * Connect transport session to router\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  connect() {\n    // Check that we we are in an acceptable state for connection\n    if (this._state !== TransportSessionState.DOWN) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    return this.connectInternal();\n  }\n\n  connectInternal() {\n    // Create the XHR to talk to the router\n    this._connError = null;\n    try {\n      this._createConn = new HTTPConnection(this._createUrl,\n                                            !(this._useBinaryTransport),\n                                            false,\n                                            (rc, data) => this.handleCreateResponse(rc, data),\n                                            (rc, data) => this.handleCreateConnFailure(rc, data),\n                                            this._contentType);\n    } catch (e) {\n      LOG_INFO(`Failed to create connection to router: ${e.message}`);\n      this._connError = e;\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n    if (Check.nothing(this._createConn)) {\n      LOG_INFO('Failed to create connection to router');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    // Get an SMF transport session create message\n    const createMsg = SMFLib.Codec.Transport.genTsCreateHeader();\n\n    if (this._state === TransportSessionState.WAITING_FOR_CREATE) {\n      // already connecting (this is likely a retry with Base64 encoding)\n      LOG_DEBUG('Connect attempt while in WAITING_FOR_CREATE (retry)');\n    } else {\n      this.createConnectTimeout();\n      // Set the current state\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n    }\n\n    // Send the create message to the router.  When the response is received, the\n    // handleCreateResponse method will be called\n    try {\n      this._createConn.send(createMsg);\n    } catch (connError) {\n      LOG_INFO(`Error connecting: ${connError.message}`);\n      LOG_TRACE('Error details:', connError.stack || connError);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.cancelConnectTimeout();\n      if (connError instanceof TransportError) {\n        this._connError = connError;\n      } else {\n        this._connError = new TransportError(\n          `Could not create HTTP transport session: ${connError.message}`,\n          connError.subcode || ErrorSubcode.CONNECTION_ERROR);\n      }\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Destroy transport session to router\n   * @param {String} msg The message associated with the operation\n   * @param {ErrorSubcode} subcode The subcode associated with the operation\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  destroy(msg, subcode) {\n    LOG_TRACE(`Destroy transport session when in state ${this._state}`);\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n        this._state === TransportSessionState.DOWN) {\n      // Nothing to do\n      return TransportReturnCode.OK;\n    }\n\n    if (this._state === TransportSessionState.CONNECTION_FAILED ||\n        this._state === TransportSessionState.WAITING_FOR_CREATE) {\n      // The connections are in an unreliable state - we will just\n      // kill our local object and let the router clean itself up with its inactivity timer\n      LOG_INFO('The connection is in unreliable state, close transport');\n      this.destroyCleanup(msg, subcode, true);\n      return TransportReturnCode.OK;\n    }\n\n    LOG_INFO('Destroy transport session immediately');\n    // Set the current state\n    this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n    // Abort any current requests for this session\n    if (this._httpSendConn !== null) {\n      LOG_INFO('Destroy transport session: abort sendConn');\n      this._httpSendConn.abort();\n    }\n    if (this._httpReceiveConn !== null) {\n      LOG_INFO('Destroy transport session: abort receiveConn');\n      this._httpReceiveConn.abort();\n    }\n\n    // Start a timer\n    this._destroyTimer = setTimeout(() => {\n      this.destroyTimerExpiry();\n    }, this._destroyTimeout);\n\n    // Send the destroy message over new HTTPConnection to the router so that the async abort\n    // can properly finish in the old _httpSendConn.\n    // When the response is received, the handleDestroyResponse method will be called.\n    this._httpSendConn = new HTTPConnection(\n        this._routerUrl,\n        !(this._useBinaryTransport), false,\n        (rc, data) => this.handleRxDataToken(rc, data), // RxData callback\n        (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n        this._contentType,\n        true);\n\n    // Get an SMF transport session destroy message\n    const destroyMsg = SMFLib.Codec.Transport.genTsDestroyHeader(this._sid);\n\n    LOG_TRACE(`destroy message: ${strToHexArray(destroyMsg)}`);\n    this._httpSendConn.send(destroyMsg);\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Send data over the connection - this requires a send token\n   * @param {String} dataIn The data to send\n   * @param {Boolean} [forceAllowEnqueue=false] If `true`, do not fail due to out of space\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  send(dataIn, forceAllowEnqueue = false) {\n    let data = dataIn;\n    // LOG_TRACE(`HTTPTransportSession:send ${data.length}, tx_queued:${this._queuedDataSize}`);\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    // Check to see if we already have queued data\n    if ((this._queuedData.length > 0) || (!this._haveToken)) {\n      return this.enqueueData(data, forceAllowEnqueue);\n    }\n\n    // Check if we need to chop up the payload\n    let remainder = null;\n    if (data.length > this._maxPayloadBytes) {\n      remainder = data.substr(this._maxPayloadBytes);\n      data = data.substr(0, this._maxPayloadBytes);\n\n      // If no space for remainder, return FAIL without sending anything.\n      if (!this.allowEnqueue(remainder.length)) {\n        return this.enqueueFailNoSpace();\n      }\n\n    // LOG_DEBUG(\"$$ send dataChunk:\" + data.length + \", remainderChunk:\" + remainder.length);\n    }\n\n    // We have the token, so send the data\n    this._haveToken = false;\n\n    const transportPacketLen = (this._smfDataTSHeaderParts[0].length + 4 +\n                                this._smfDataTSHeaderParts[1].length + data.length);\n\n    this._httpSendConn.send(this._smfDataTSHeaderParts[0] +\n                            int32ToStr(transportPacketLen) +\n                            this._smfDataTSHeaderParts[1] +\n                            data);\n    this._clientstats.bytesWritten += data.length;\n\n    if (remainder) {\n      // The message was partially sent. The message written count will be incremented\n      // when its last bytes go out.\n      return this.enqueueData(remainder, null);\n    }\n\n    // The whole message was sent.\n    this._clientstats.msgWritten++;\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Push data onto the pending send queue as long as it doesn't violate\n   * the max stored message size\n   * @param {String} data The data to enqueue\n   * @param {Boolean} [forceAllowEnqueue=false] If `true`, don't fail due to no space.\n   * @returns {TransportReturnCode} The result of the operation.\n   */\n  enqueueData(data, forceAllowEnqueue = false) {\n    const dataLen = data.length;\n\n    // LOG_DEBUG(\"enqueueing data: \" + data.length + \", queue depth: \" + this._queuedDataSize);\n    if (forceAllowEnqueue || this.allowEnqueue(dataLen)) {\n      this._queuedDataSize += dataLen;\n      this._queuedData.push(data);\n    } else {\n      return this.enqueueFailNoSpace();\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Set the data in the preformatted headers.  The headers are set up this way\n   * for performance reasons\n   * @param {String} sid The session ID to incorporate into the headers\n   */\n  initPreformattedHeaders(sid) {\n    // _smfDataTSHeaderParts is a two entry array - one part before the total length\n    // and the other after.  The total length is not known until actual data is sent\n    this._smfDataTSHeaderParts = SMFLib.Codec.Transport.genTsDataMsgHeaderParts(sid);\n\n    // _smfDataTokenTSHeader is a single header that all data-token messages require\n    if (this._useStreamingTransport) {\n      this._smfDataTokenTSHeader = SMFLib.Codec.Transport.genTsDataStreamTokenMsg(\n        sid,\n        this._streamingTransportPadding);\n    } else {\n      this._smfDataTokenTSHeader = SMFLib.Codec.Transport.genTsDataTokenMsg(sid);\n    }\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    if (this._queuedDataSize) {\n      this._flushCallback = callback;\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * Check if there is any data waiting to be sent to the router.\n   * If there is, send it.\n   */\n  sendQueuedData() {\n    if (this._queuedDataSize === 0) {\n      return;\n    }\n    this._haveToken = false;\n    const data = this.getQueuedDataToSend();\n    const transportPacketLen = this._smfDataTSHeaderParts[0].length + 4 +\n                               this._smfDataTSHeaderParts[1].length + data.length;\n\n    this._httpSendConn.send(this._smfDataTSHeaderParts[0] +\n                            int32ToStr(transportPacketLen) +\n                            this._smfDataTSHeaderParts[1] +\n                            data);\n    this._clientstats.bytesWritten += data.length;\n\n\n    if (this._canSendNeeded) {\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '',\n                                  null,\n                                  0,\n                                  this._sid));\n    }\n\n    if (this._flushCallback) {\n      const cb = this._flushCallback;\n      this._flushCallback = null;\n      cb();\n    }\n  }\n\n  // Internal Callbacks\n\n  // Called when a create response message has been received\n  handleCreateResponse(tsRc, response) {\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n        this._state === TransportSessionState.DOWN) {\n      LOG_DEBUG('Received create response on a destroyed transport session, ignore');\n      return;\n    }\n\n    // Was: stop the connect timer. We don't do that in this transport now.\n    // We wait for the login response.\n\n    // We know whether we're using Base64 or not, so update our max payload size.\n    this.updateMaxWebPayload();\n\n    if (tsRc !== TransportReturnCode.OK) {\n      LOG_INFO(`Received create response with return code ${TransportReturnCode.describe(tsRc)}`);\n      if (tsRc === TransportReturnCode.DATA_DECODE_ERROR) {\n        this.destroyCleanup('Received data decode error on create session response', ErrorSubcode.DATA_DECODE_ERROR);\n      } else {\n        this.destroyCleanup('Failed to handle create session response', ErrorSubcode.CONNECTION_ERROR);\n      }\n      return;\n    }\n\n    if (response.length === 0) {\n      return; // null read indicating end of stream\n    }\n\n    // Parse the Transport Session SMF\n    const parsedResponse = SMFLib.Codec.Decode.decodeCompoundMessage(BufferImpl.from(response, 'latin1'), 0);\n    if (!parsedResponse) {\n      LOG_ERROR('Could not parse create response as SMF. Destroying transport');\n      this.destroyCleanup('Failed to parse create response message', ErrorSubcode.CONNECTION_ERROR);\n      return;\n    }\n\n    const smfresponse = parsedResponse.getResponse();\n    if (smfresponse.responseCode !== 200) {\n      this.destroyCleanup(`Transport create request failed (${smfresponse.responseCode}, ${smfresponse.responseString})`,\n                          ErrorSubcode.CONNECTION_ERROR);\n      return;\n    }\n\n    this.cancelConnectTimeout();\n    this._createConn.abort();\n    this._createConn = null;\n    this._state = TransportSessionState.SESSION_UP;\n    this._sid = parsedResponse.sessionId;\n    this._routerTag = parsedResponse.routerTag;\n\n    // Trim any parameters off the create url before using it for the routerUrl\n    this._routerUrl = this._createUrl.replace(/\\?.*/, '');\n    if (this._routerTag !== '') {\n      this._routerUrl = this._routerUrl + this._routerTag;\n    }\n\n    this.initPreformattedHeaders(this._sid);\n    const useBase64 = !this._useBinaryTransport;\n    const useStreaming = this._useStreamingTransport;\n\n    // Create the two connections to the router\n    // By now, getXhrObj() should not throw any exception inside HTTPConnection constructor\n    this._httpSendConn = new HTTPConnection(this._routerUrl, useBase64, false,\n        (rc, data) => this.handleRxDataToken(rc, data), // RxData callback\n        (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n        this._contentType);\n    if (this._useStreamingTransport) {\n      // When the transport is HTTP_BINARY_STREAMING the SMF encapsulation\n      // is complete, the SMF header indicates a message length of 0xFFFFFFFF\n      // and after decoding just the header alone the data is passed through\n      // to the session layer, so we must use a simplified SMF parser and a\n      // stateful data callback in that case.\n      this._httpReceiveConn = new HTTPConnection(this._routerUrl, useBase64, useStreaming,\n            (rc, data) => this.handleRxStreaming(rc, data), // RxData Callback\n            (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n            this._contentType,\n            true);\n    } else {\n      // Create a SMF client for the Receive Data channel, when http is used.\n      // SMF messages are encapsualated in a solace http-transport which is itself\n      // encapsulated in SMF.  So create an SMF client that will callback with\n      // an smfMessage construct to the HTTPTransportSession.\n      this._rxChannelClient = new SMFClient(\n            rxData => this.handleSmfMessage(rxData),\n            rxError => this.handleSmfParseError(rxError),\n            null);    // we don't have a 'session' for this client. It's just a parser.\n      this._httpReceiveConn = new HTTPConnection(this._routerUrl, useBase64, useStreaming,\n            (rc, data) => this.handleRxData(rc, data), // RxData Callback\n            (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n            this._contentType);\n    }\n\n    // Give the router the data token so that it will be able to send data\n    this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n\n    // Send the event to the application letting it know that the session is up\n    this._eventCB(\n      new TransportSessionEvent(TransportSessionEventCode.UP_NOTICE,\n                                smfresponse.responseString,\n                                smfresponse.responseCode,\n                                0,\n                                parsedResponse.sessionId));\n  }\n\n  // Called when receiving a destroy response\n  handleDestroyResponse(response) {\n    LOG_DEBUG('Handle destroy response');\n    // Stop the timer\n    this.cancelDestroyTimeout();\n    const innerResponse = response.getResponse();\n    const responseString = innerResponse ? innerResponse.responseString : '';\n    this.destroyCleanup(\n      `${responseString} handled Destroy Response addressed to session ${\n      formatHexString(response.sessionId)}, on session ${formatHexString(this._sid)}`,\n      0);\n  }\n\n  handleSmfMessage(tsmsg) {\n    const smfHeader = tsmsg.smfHeader;\n    if (smfHeader.smf_protocol !== SMFLib.SMFProtocol.TSESSION) {\n      this.handleSmfParseError(`Unexpected Message Prototcol (${smfHeader.smf_protocol}) on ReceiveData connection`);\n      return;\n    }\n\n      // we have found a transport SMF, can we now read the Transport SMF chunk\n    const data = tsmsg.payload;\n    const TotalPayloadToRead = tsmsg.payloadLength;\n\n    switch (tsmsg.messageType) {\n      case SMFLib.SMFTransportSessionMessageType.DESTROY_RESP:\n        this.handleDestroyResponse(tsmsg);\n        return;\n\n      case SMFLib.SMFTransportSessionMessageType.DATA:\n        if (tsmsg.sessionId !== this._sid) {\n          // The router may have given us an error code; if so, include in the error message.\n          const smfErrResponse = tsmsg.getResponse();\n          const responseErrStr = smfErrResponse\n              ? (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`)\n              : '';\n          const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n          LOG_DEBUG(`HandleRxData Bad Session ID received in message. Expected: ${strToByteArray(this._sid)\n                        }, Received: ${strToByteArray(tsmsg.sessionId)}${responseErrStr}`);\n\n          this._state = TransportSessionState.CONNECTION_FAILED;\n          this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                        `Session ID mismatch in data message, expected: ${formatHexString(this._sid)}, got: ${\n                        formatHexString(tsmsg.sessionId)}, ${responseErrStr}`,\n                        responseCode,\n                        ErrorSubcode.PROTOCOL_ERROR, this._sid));\n          return;\n        }\n\n        // pass-through encapsulated data to parent\n        if (TotalPayloadToRead > 0) {\n          this._client.rxDataBuffer(data);\n        }\n        break;\n      default:\n        // Unexpected message type\n        this.handleSmfParseError(`Unexpected message type (${\n                    tsmsg.messageType}) on ReceiveData connection`);\n    }\n  }\n\n  handleSmfParseError() {\n    this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DATA_DECODE_ERROR,\n        'Received data decode error', null,\n        ErrorSubcode.DATA_DECODE_ERROR, this._sid));\n  }\n\n  // Called when data is received on the connection\n  handleRxData(tsRc, data) {\n    if (this._httpReceiveConn === null || this._rxChannelClient === null) {\n      if (this._state === TransportSessionState.DOWN) {\n        LOG_INFO('Transport session is down, ignore data from receive connection');\n      } else {\n        LOG_ERROR(`Transport session is not in working state, state: ${this._state}`);\n      }\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('Transport session is being destroyed, ignore data from receive connection, ' +\n               `dump first 64 bytes (or fewer) of data:\\n${\n                 DebugLib.Debug.formatDumpBytes(data.substring(0, 64), true, 0)}`);\n      return;\n    }\n\n    this._httpReceiveConn.recStat('GotData');\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      LOG_DEBUG('Send write token to router');\n      this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n    } else {\n      this._rxChannelClient.rxDataString(data);\n    } // end have data to process\n  }\n\n  // Called when data is received on a HTTP_BINARY_STREAMING connection\n  handleRxStreaming(tsRc, data) {\n    if (this._httpReceiveConn === null) {\n      if (this._state === TransportSessionState.DOWN) {\n        LOG_DEBUG('Transport session is down, ignore data from receive connection');\n      } else {\n        LOG_ERROR(`Transport session is not in working state, state: ${this._state}`);\n      }\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('Transport session is being destroyed, ignore data from streaming receive ' +\n               `connection, dump first 64 bytes (or fewer) of data:\\n${\n               DebugLib.Debug.formatDumpBytes(data.substring(0, 64), true, 0)}`);\n      return;\n    }\n\n    this._httpReceiveConn.recStat('GotData');\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      LOG_TRACE('Send write token to router');\n      this._packetReadState = PacketReadState.READING_HEADER;\n      this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n      return;\n    }\n\n    // pass-through encapsulated data to parent\n    if (this._packetReadState === PacketReadState.STREAMING) {\n      this._client.rxDataString(data);\n      return;\n    }\n\n    this._incomingBuffer += data;\n    const smfheader = SMFLib.Codec.ParseSMF.parseSMFAt(BufferImpl.from(this._incomingBuffer, 'latin1'),\n                                                       0, true);\n    if (smfheader) {\n        // we have a valid smf header, see if there is a transport header and session-id\n      const tsmsg = SMFLib.Codec.Transport.parseTsSmfHdrAt(BufferImpl.from(this._incomingBuffer, 'latin1'),\n                                                           smfheader.headerLength,\n                                                           smfheader);\n      if (!tsmsg) {\n        // Not tsMsg but there is an smf header, just return until more data arrives\n        return;\n      }\n\n      // We have the transport message header too, if it is a DATA message enter\n      // STREAMING state\n      switch (tsmsg.messageType) {\n        case SMFLib.SMFTransportSessionMessageType.DESTROY_RESP:\n          this.handleDestroyResponse(tsmsg);\n          return;\n\n        case SMFLib.SMFTransportSessionMessageType.DATA:\n          if (tsmsg.sessionId !== this._sid) {\n            // The router may have given us an error code, if so, include in the error message.\n            const smfErrResponse = tsmsg.getResponse();\n            const responseErrStr = smfErrResponse\n                ? (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`)\n                : '';\n            const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n            LOG_DEBUG(`HandleRxData Bad Session ID received in message.  Expected: ${strToByteArray(this._sid)\n                        }, Received: ${strToByteArray(tsmsg.sessionId)}${responseErrStr}`);\n            LOG_DEBUG(`First 64 bytes (or fewer) of message: ${strToByteArray(data.substr(0, 64))}`);\n\n            this._state = TransportSessionState.CONNECTION_FAILED;\n            this._eventCB(\n              new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                                        `Session ID mismatch in data message, expected: ${formatHexString(this._sid)}, got: ${\n                                        formatHexString(tsmsg.sessionId)}, ${responseErrStr}`,\n                                        responseCode,\n                                        ErrorSubcode.PROTOCOL_ERROR, this._sid));\n            return;\n          }\n          // all is good. We can now STREAM the rest of the data until a empty message is received.\n          this._packetReadState = PacketReadState.STREAMING;\n          // pass-through any remaining data\n          if (this._incomingBuffer.length > (smfheader.headerLength + tsmsg.tsHeaderLength)) {\n            this._client.rxDataString(\n              this._incomingBuffer.substr(smfheader.headerLength + tsmsg.tsHeaderLength));\n          }\n          this._incomingBuffer = '';\n          return;\n\n        default:\n          // Unexpected message type\n          throw new TransportError(`Unexpected message type (${tsmsg.messageType}) on ReceiveData connection`, 0);\n      }\n    } else if (SMFLib.Codec.ParseSMF.isSMFHeaderAvailable(BufferImpl.from(this._incomingBuffer, 'latin1'), 0) &&\n               !SMFLib.Codec.ParseSMF.isSMFHeaderValid(BufferImpl.from(this._incomingBuffer, 'latin1'), 0)) {\n      // Probably lost framing\n      LOG_ERROR(`Couldn't decode message due to invalid smf header, dump first 64 bytes (or fewer) of buffer content:\\n${\n                 DebugLib.Debug.formatDumpBytes(this._incomingBuffer.substring(0, 64), true, 0)}`);\n\n      const errorInfo = 'Error parsing incoming message - invalid SMF header detected';\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                                  errorInfo, null,\n                                  ErrorSubcode.PROTOCOL_ERROR,\n                                  null));\n    }\n  }\n\n  // Called when data is received on the httpDataSend\n  handleRxDataToken(tsRc, data) {\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      return; // handle End of Stream\n    }\n\n    const parsedResponse = SMFLib.Codec.Decode.decodeCompoundMessage(BufferImpl.from(data, 'latin1'), 0);\n    if (!parsedResponse) {\n      if (this._state !== TransportSessionState.WAITING_FOR_DESTROY) {\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                'Failed to parse received data message', null,\n                ErrorSubcode.PROTOCOL_ERROR, this._sid));\n      } else {\n        this.destroyCleanup('Failed to parse received data message', ErrorSubcode.PROTOCOL_ERROR);\n      }\n      return;\n    }\n\n    if (parsedResponse.messageType === SMFLib.SMFTransportSessionMessageType.DESTROY_RESP) {\n      this.handleDestroyResponse(parsedResponse);\n      return;\n    }\n\n    if (parsedResponse.sessionId !== this._sid) {\n        // The router may have given us an error code, if so, include in the error message.\n      const smfErrResponse = parsedResponse.getResponse();\n      const responseErrStr = smfErrResponse ?\n            (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`) :\n            '';\n      const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n      LOG_DEBUG(`HandleRxDataToken Bad SID received in message.  Expected: ${strToByteArray(this._sid)\n            }, Received: ${strToByteArray(parsedResponse.sessionId)}${responseErrStr}`);\n      LOG_DEBUG(`First 64 bytes (or fewer) of message: ${strToByteArray(data.substr(0, 64))}`);\n\n      if (this._state !== TransportSessionState.WAITING_FOR_DESTROY) {\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                `Session ID mismatch in response message, expected: ${formatHexString(this._sid)}, got: ${formatHexString(parsedResponse.sessionId)}, ${responseErrStr}`,\n                responseCode, ErrorSubcode.PROTOCOL_ERROR, this._sid));\n      } else {\n        this.destroyCleanup('Session ID mismatch in response message', ErrorSubcode.PROTOCOL_ERROR);\n      }\n      return;\n    }\n\n    if (parsedResponse.messageType ===\n        SMFLib.SMFTransportSessionMessageType.DATA_TOKEN ||\n        parsedResponse.messageType ===\n        SMFLib.SMFTransportSessionMessageType.DATA_STREAM_TOKEN) {\n      this._haveToken = true;\n      this._httpSendConn.recStat('GotToken');\n      // this._eventCB(\n      //    new TransportSessionEvent(TransportSessionEventCode.NOTIFY_GOT_TOKEN, \"\", null, null));\n      this.sendQueuedData();\n    } else {\n        // Unexpected message type\n      throw (new TransportError(`Unexpected message type (${\n            parsedResponse.messageType}) on SendData connection`, 0));\n    }\n  }\n\n  handleRxError(tsRc) {\n    LOG_INFO(`handleRxError, transport return code ${TransportReturnCode.name(tsRc)}`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    if (tsRc === TransportReturnCode.DATA_DECODE_ERROR) {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DATA_DECODE_ERROR,\n            'Received data decode error', null,\n            ErrorSubcode.DATA_DECODE_ERROR, this._sid));\n    } else {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.SEND_ERROR,\n            'Connection error',\n            ErrorSubcode.CONNECTION_ERROR, this._sid));\n    }\n  }\n\n  // Called when there is an error on a connection or the connection is aborted\n  handleSendFailure(status, msg) {\n    // failed to send message, if it is a destroy message, just complete the destroy process\\\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_INFO(`Connection destroy failure (${msg}) while in state ${this._state}`);\n      this.destroyCleanup(`Connection destroy failure: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n    } else {\n      // Failed to send message, return error to upper layer which may  tear the session down\n      LOG_INFO(`Connection failure (${msg}) while in state ${this._state}`);\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.SEND_ERROR,\n            `Connection error: ${msg}`, status,\n            ErrorSubcode.CONNECTION_ERROR, this._sid));\n    }\n  }\n\n  // Called when there is an error on a connection for a session create request\n  handleCreateConnFailure(status, msg) {\n    if (this._state === TransportSessionState.DOWN) {\n      return;\n    }\n\n    LOG_INFO(`Connection create failure (${msg}) while in state ${this._state}`);\n    this.destroyCleanup(`Connection create failure: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n  }\n\n  // Called when the destroy timer expires\n  destroyTimerExpiry() {\n    this.destroyCleanup('Destroy request timeout', ErrorSubcode.CONNECTION_ERROR);\n  }\n\n  cancelDestroyTimeout() {\n    if (this._destroyTimer) {\n      clearTimeout(this._destroyTimer);\n      this._destroyTimer = null;\n    }\n  }\n\n  /**\n   * Called after receiving ts destroy response from router\n   * @param {String} infoStr The informational string to pass along\n   * @param {ErrorSubcode} subcode The subcode associated with the event\n   * @param {Boolean} asyncSendEvent If true, always send the event asynchronously.\n   */\n  destroyCleanup(infoStr, subcode, asyncSendEvent) {\n    LOG_DEBUG(`Destroy cleanup: ${infoStr}`);\n\n    // Abort any current requests for this session\n    if (this._createConn) {\n      LOG_DEBUG('Destroy cleanup: Abort createConn');\n      this._createConn.abort();\n    }\n    if (this._httpSendConn) {\n      LOG_DEBUG('Destroy cleanup: Abort sendConn');\n      this._httpSendConn.abort();\n    }\n    if (this._httpReceiveConn) {\n      LOG_DEBUG('Destroy cleanup: Abort receiveConn');\n      this._httpReceiveConn.abort();\n    }\n\n    // Clear most internal state\n    this._createUrl = null;\n    this._routerUrl = null;\n    this._createConn = null;\n    this._httpSendConn = null;\n    this._httpReceiveConn = null;\n    this._smfDataTokenTSHeader = null;\n    this._rxChannelClient = null;\n    this._routerTag = '';\n    this._queuedData = [];\n    this._queuedDataSize = 0;\n    this._canSendNeeded = false;\n\n    // Clear timers.\n    this.cancelDestroyTimeout();\n    this.cancelConnectTimeout();\n\n    // Set final state\n    this._state = TransportSessionState.DOWN;\n\n    // Send the event to the application letting it know that the session is down\n    const finalize = () => {\n      // Check whether the callback was cleared before the timeout completes.\n      if (this._eventCB) {\n        this._eventCB(\n            new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                      infoStr || 'Session is destroyed',\n                                      null,\n                                      subcode || 0,\n                                      this._sid));\n      }\n\n      // release reference to smf client object\n      this._client = null;\n      // release reference to session object\n      this._eventCB = null;\n    };\n\n    if (asyncSendEvent) {\n      setTimeout(finalize, 0); // opportunity to use setImmediate instead\n    } else {\n      finalize();\n    }\n  }\n\n  getInfoStr() {\n    const str = `HTTPTransportSession; sid=${\n        formatHexString(this._sid)\n        }; routerTag=${this._routerTag}`;\n    return str;\n  }\n\n}\n\nmodule.exports.HTTPTransportSession = HTTPTransportSession;\n","const { Base64, Convert } = require('solclient-convert');\nconst { XHRFactory } = require('./xhr-factory');\n\nconst { encode: base64Encode } = Base64;\nconst { stringToUint8Array } = Convert;\n\nfunction sendXhrBinaryMSIE10(xhr, data, contentType) {\n  xhr.responseType = 'arraybuffer';\n  xhr.overrideMimeType(`${contentType}; charset=x-user-defined`);\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(stringToUint8Array(data));\n}\n\nfunction sendXhrBinaryXHR2(xhr, data, contentType) {\n  xhr.overrideMimeType(`${contentType}; charset=x-user-defined`);\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(stringToUint8Array(data).buffer);\n}\n\nfunction sendXhrText(xhr, data, contentType, connClose) {\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(data === null || data === undefined ? data : base64Encode(data), connClose);\n}\n\nconst sendXhrBinary = (() => {\n  // Uint8Array is probably shimmed by core-js. We don't use window.Blob, but\n  // it is a Working Draft, not  part of ES6, and not shimmed by core-js.\n  // Therefore it makes a workable canary for IE10 detection.\n  if (typeof window !== 'undefined' && window.Uint8Array && window.Blob /* !ie9 */) {\n    const xhr = XHRFactory.create(true);\n    if (xhr.responseType /* ie10 */) {\n      return sendXhrBinaryMSIE10;\n    }\n    return sendXhrBinaryXHR2;\n  }\n  return sendXhrText;\n})();\n\nmodule.exports.sendXhrBinary = sendXhrBinary;\nmodule.exports.sendXhrText = sendXhrText;\n","const { ErrorSubcode } = require('solclient-error');\nconst { TransportError } = require('../../transport-error');\n\n/* eslint-env browser */\nconst XHRFactory = {\n  /**\n   * Creates an XHR object.\n   *\n   * @param {Boolean} [allowFail=false] If `true`, return null on failure; otherwise throw.\n   * @throws {TransportError}\n   * @returns {XMLHttpRequest} The new XHR object\n   */\n  create(allowFail = false) {\n    const xhr = typeof XMLHttpRequest !== 'undefined' ? new XMLHttpRequest() : null;\n    if (!allowFail && !xhr) {\n      throw new TransportError('Failed to create an XMLHTTPRequest',\n                                 ErrorSubcode.CREATE_XHR_FAILED);\n    }\n    return xhr;\n  },\n};\n\nmodule.exports.XHRFactory = XHRFactory;\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\n\n/**\n * @classdesc\n * HTTP Base64 transport\n * @memberof solace\n * @private\n */\nclass StateBase64 extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BASE64, exitCb, nextState);\n  }\n}\n\nmodule.exports.StateBase64 = StateBase64;\n\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * HTTP Binary transport\n * @memberof solace\n * @private\n */\nclass StateBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BINARY, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.xhrBinary();\n  }\n}\n\nmodule.exports.StateBinary = StateBinary;\n\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * HTTP Binary Streaming transport\n * @memberof solace\n * @private\n */\nclass StateStreamingAndBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BINARY_STREAMING, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.streaming() && WebTransportCapabilities.xhrBinary();\n  }\n}\n\nmodule.exports.StateStreamingAndBinary = StateStreamingAndBinary;\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * WebSocket transport\n * @memberof solace\n * @private\n */\nclass StateWebSocketBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.WS_BINARY, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.webSocket();\n  }\n}\n\nmodule.exports.StateWebSocketBinary = StateWebSocketBinary;\n","const HTTPLib = require('./http');\nconst { WebSocketTransportSession } = require('./websocket-transport-session');\n\nconst { HTTPConnection } = HTTPLib;\n\nconst WebTransportCapabilities = {\n  webSocket() { return WebSocketTransportSession.browserSupportsBinaryWebSockets(); },\n  xhrBinary() { return HTTPConnection.browserSupportsXhrBinary(); },\n  streaming() { return HTTPConnection.browserSupportsStreamingResponse(); },\n};\n\nmodule.exports.WebTransportCapabilities = WebTransportCapabilities;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of Web Transport events.\n * @enum {string}\n * @namespace\n * @memberof solace\n * @private\n */\nconst WebTransportEvent = {\n  /**\n   * The Session Layer has issued a connect request\n   */\n  CONNECT:          'Connect',\n  /**\n   * The Session Layer has issued a destroy request\n   */\n  DESTROY:          'Destroy',\n  /**\n   * A downgrade request has been received from an FSM.\n   */\n  DOWNGRADE:        'Downgrade',\n  /**\n   * The underlying transport has been destroyed. Seen in\n   * response to calling destroy() and in some cases when\n   * the transport is destroyed by the peer.\n   */\n  DESTROYED_NOTICE: 'DestroyedNotice',\n  /**\n   * The underlying transport timed out in its connection attempt.\n   * The managing component should abort this connection attempt\n   * and begin a downgrade if available.\n   */\n  CONNECT_TIMEOUT:  'ConnectTimeout',\n  /**\n   * The underlying transport is active and ready for traffic.\n   */\n  UP_NOTICE:        'UpNotice',\n  /**\n   * The transport encountered an error sending data.\n   */\n  SEND_ERROR:       'SendError',\n};\n\nmodule.exports.WebTransportEvent = Enum.new(WebTransportEvent);\n","\nconst { ErrorSubcode } = require('solclient-error');\nconst { FsmEvent, State, StateMachine } = require('solclient-fsm');\nconst { LogFormatter } = require('solclient-log');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { WebTransportEvent } = require('./web-transport-events');\nconst { WebTransportState } = require('./web-transport-states');\n\nconst {\n  LOG_TRACE,\n  LOG_INFO,\n} = new LogFormatter();\n\nclass WebTransportFSM extends StateMachine {\n  constructor(transportIn, getId) {\n    super({ name: 'WebTransportFSM' });\n    const transport = transportIn;\n    const fsm = this;\n    const logger = new LogFormatter();\n    logger.formatter = function logFormatter(...args) {\n      return [`[web-transport-fsm=${getId()}]`, ...args];\n    };\n    this.log = logger.wrap(this.log, this);\n    this.transport = transport;\n\n    this.initial(function onInitial() {\n      return this.transitionTo(\n        this.WebTransportDown,\n        (context) => {\n          LOG_TRACE(`Starting ${context.getStateMachine().getName()}`);\n        });\n    });\n\n    this.unhandledEventReaction(function onUnhandledEvent(wEvent) {\n      LOG_TRACE(`Ignoring event ${wEvent.getName()} in state ${this.getCurrentState().getName()}`);\n      return this;\n    });\n\n    this.WebTransportDown = new State({\n      name:          WebTransportState.DOWN,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.CONNECT, function onConnect(/* wEevent */) {\n        return this.transitionTo(fsm.WebTransportConnecting);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n\n    this.WebTransportConnecting = new State({\n      name:          WebTransportState.CONNECTING,\n      parentContext: this,\n    })\n      .entry(() => {\n        try {\n          const rc = transport.connectInternal();\n          if (rc !== TransportReturnCode.OK) {\n            const connError = transport.getConnError();\n            const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n            wEvent._destroyMsg = connError ? connError.message : 'Error occurred while establishing transport';\n            wEvent._subcode = connError ? connError.subcode : null;\n            wEvent._eventReason = connError;\n            return this.processEvent(wEvent);\n          }\n        } catch (e) {\n          LOG_INFO(`transport.connectInternal threw: ${e.message}`);\n          const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n          wEvent._destroyMsg = e.message;\n          wEvent._subcode = e.subcode ? e.subcode : ErrorSubcode.CONNECTION_ERROR;\n          wEvent._eventReason = e;\n          return this.processEvent(wEvent);\n        }\n        return undefined;\n      })\n      // Transport destroy is async, so in downgrade cases we need an event to start the downgrade\n      // (and associated transport destroy) and one to complete it (DESTROYED_NOTICE).\n      // These two events trigger downgrade: SEND_ERROR on connection (protocol issue) and\n      // CONNECT_TIMEOUT (possible black hole proxy).\n      .reaction(WebTransportEvent.SEND_ERROR, (wEvent) => {\n        transport.notifyEvent(wEvent._transportEvent); // Give the session a chance to intervene\n        return fsm.attemptDowngrade(wEvent._transportEvent);\n      })\n      .reaction(WebTransportEvent.CONNECT_TIMEOUT, e => fsm.attemptDowngrade(e._transportEvent))\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, (wEvent) => {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      })\n      .reaction(WebTransportEvent.UP_NOTICE, function onUpNotice(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportUp);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportDowngrading = new State({\n      name:          WebTransportState.DOWNGRADING,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        LOG_INFO('Web transport: request downgrade');\n        if (!transport.completeDowngrade()) {\n          LOG_INFO('Web transport: connection error, no downgrade');\n          transport.notifyEvent(wEvent._transportEvent);\n          fsm.notifyDowngradeFailed();\n          return this.transitionTo(fsm.WebTransportDown);\n        }\n        return this.transitionTo(fsm.WebTransportConnecting);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportUp = new State({\n      name:          WebTransportState.UP,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DOWNGRADE, wEvent =>\n        fsm.attemptDowngrade(new TransportSessionEvent(wEvent._downgradeMsg, wEvent._subcode)))\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      })\n      .reaction(WebTransportEvent.SEND_ERROR, function onUpNotice(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportDestroying = new State({\n      name:          WebTransportState.DESTROYING,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      });\n  }\n\n\n    /**\n     * Attempt a downgrade. This is the procedure.\n     * 1. Call this. If it returns true, wait for DESTROYED_NOTICE, then\n     * 2. Call transport.completeDowngrade().\n     * @param {TransportSessionEvent} tsEvent The event triggering the downgrade\n     * @returns {Boolean} `true` if downgrade is starting (by destroying the transport)\n     */\n  attemptDowngrade(tsEvent) {\n    const { infoStr, errorSubcode } = tsEvent;\n    if (!this.transport.beginDowngrade(infoStr, errorSubcode)) {\n      LOG_TRACE('Downgrade unavailable');\n      this.transport.destroyInternal(infoStr, errorSubcode);\n      this.transport.notifyEvent(tsEvent);\n      return this.transitionTo(this.WebTransportDestroying);\n    }\n    LOG_TRACE('Downgrade available');\n    return this.transitionTo(this.WebTransportDowngrading);\n  }\n\n  notifyDowngradeFailed() {\n    LOG_TRACE('Notifying of downgrade failure');\n    this.transport.notifyEvent(new TransportSessionEvent(TransportSessionEventCode.DOWNGRADE_FAILED,\n                                  'Downgrade failed'));\n  }\n}\n\nmodule.exports.WebTransportFSM = WebTransportFSM;\n","const {\n  LOG_DEBUG,\n  LOG_TRACE,\n} = require('solclient-log');\nconst { TransportBase } = require('../transport-base');\nconst { TransportClientStats } = require('../transport-client-stats');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst MAX_BUFFERED_AMOUNT_QUERY_INTERVAL_MS = 4000;\n\n/**\n * Base class for web related transports\n * @extends TransportBase\n * @private\n */\nclass WebTransportSessionBase extends TransportBase {\n  /**\n   * @constructor\n   * @param {URL} url The URL to connect to\n   * @param {function} eventCB The function to call on events\n   * @param {SMFClient} client The function to call on data received.\n   * @param {Object} props Additional object properties for this transport session\n   */\n  constructor(url, eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super(url, eventCB, client, props);\n\n    /**\n     * @type {Number}\n     */\n    this._connectTimeout = props.transportDowngradeTimeoutInMsecs;\n\n    /**\n     * @type {?number}\n     */\n    this._connectTimer = null;\n\n    /**\n     * @type {TransportClientStats}\n     */\n    this._clientstats = new TransportClientStats();\n\n    /**\n     * Maximum amount of send data than can be queued\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /**\n     * Maximum payload chunk size in web transport\n     * @type {Number}\n     */\n    this._maxPayloadBytes = props.maxWebPayload;\n\n    /**\n     * Queue to hold data to be sent to the Solace Message Router when we get back a\n     * data token\n     * @type {array}\n     */\n    this._queuedData = [];\n\n    /**\n     * Number of bytes of queued data\n     * @type {Number}\n     */\n    this._queuedDataSize = 0;\n\n    /**\n     * Remember if we have to send an event when there is room in the queue\n     * @type {Boolean}\n     */\n    this._canSendNeeded = false;\n\n    /**\n     * @type {TransportSessionState}\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * Any connection error that needs to be propagated up\n     * @type {?Error}\n     */\n    this._connError = null;\n  }\n\n  // override\n  getClientStats() {\n    return this._clientstats;\n  }\n\n  createConnectTimeout() {\n    if (this._connectTimeout > 0) {\n      this._connectTimer = setTimeout(() => {\n        this.connectTimerExpiry();\n      }, this._connectTimeout);\n    }\n  }\n\n  cancelConnectTimeout() {\n    if (this._connectTimer) {\n      clearTimeout(this._connectTimer);\n      this._connectTimer = null;\n    }\n  }\n\n  /* override me */\n  connectTimerExpiry() { // eslint-disable-line class-methods-use-this\n    return undefined;\n  }\n\n  allowEnqueue(datalen) {\n      // Bug 32006: if there's no queued data, we always accept at least one message, even if it\n      // exceeds the sendBufferMaxSize.\n      // If we reject enqueueing something too large because we already have queued data,\n      // that guarantees when the data is flushed we will emit the alertOnDequeue event.\n    return (this._queuedDataSize === 0 ||\n            ((datalen + this._queuedDataSize) <= this._sendBufferMaxSize));\n  }\n\n  enqueueFailNoSpace() {\n    this._canSendNeeded = true;\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  /* override me */\n  flush(callback) { // eslint-disable-line class-methods-use-this\n    callback();\n  }\n\n  getQueuedDataToSend() {\n    // Track messages dequeued.\n    let data = '';\n\n    // Start by trying to fill a complete payload.\n    let bytesAllowed = this._maxPayloadBytes;\n    LOG_TRACE(`getQueuedDataToSend: bytesAllowed=${bytesAllowed}, bufferedAmount=${this.getBufferedAmount ? this.getBufferedAmount() : 'undefined'}`);\n    if (this.getBufferedAmount) {\n      bytesAllowed = this._maxPayloadBytes - this.getBufferedAmount();\n      if (bytesAllowed <= 0) {\n        LOG_DEBUG(`$$ bytesAllowed=${bytesAllowed}, maxPayloadBytes=${this._maxPayloadBytes\n                  }, bufferedAmount=${this.getBufferedAmount()}`);\n        if (BUILD_ENV.TARGET_BROWSER &&\n            (this._bufferedAmountQueryIntervalInMsecs *\n              this._bufferedAmountQueryIntervalDelayMultiplier <=\n              MAX_BUFFERED_AMOUNT_QUERY_INTERVAL_MS)) {\n          this._bufferedAmountQueryIntervalDelayMultiplier *= 2;\n        }\n        return data;\n      }\n      if (BUILD_ENV.TARGET_BROWSER) {\n        this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n      }\n    }\n\n    if (this._queuedDataSize > bytesAllowed) {\n      let payloadSize = bytesAllowed;\n      // Slow path: dequeue and append until we fill the payload.\n      while (payloadSize && this._queuedDataSize) {\n        // Is this element larger than the payload?\n        const elem = this._queuedData[0];\n        const elemLength = elem.length;\n        if (elemLength > payloadSize) {\n          // This element is larger than the payload.\n          data += elem.substr(0, payloadSize);\n          this._queuedData[0] = elem.substr(payloadSize);\n\n          // The rest of the payload space was consumed.\n          this._queuedDataSize -= payloadSize;\n          payloadSize = 0;\n        } else {\n          data += this._queuedData.shift();\n          payloadSize -= elemLength;\n          this._queuedDataSize -= elemLength;\n          this._clientstats.msgWritten++;\n        }\n      }\n    } else {\n      // Shortcut: use the whole buffer, increase the message sent count by the length of the size\n      // queue, and reset the buffer.\n      data = this._queuedData.join('');\n      this._clientstats.msgWritten += this._queuedData.length;\n\n      this._queuedData = [];\n      this._queuedDataSize = 0;\n    }\n\n    LOG_DEBUG(`Sending ${data.length} bytes from queued data`);\n    return data;\n  }\n}\n\nmodule.exports.WebTransportSessionBase = WebTransportSessionBase;\n","const { Enum } = require('solclient-eskit');\n\n// WebTransport states, used by WebTransport\nconst WebTransportState = {\n  DOWN:        'WebTransportDown',\n  CONNECTING:  'WebTransportConnecting',\n  DOWNGRADING: 'WebTransportDowngrading',\n  DESTROYING:  'WebTransportDestroying',\n  UP:          'WebTransportUp',\n};\n\nmodule.exports.WebTransportState = Enum.new(WebTransportState);\n","const {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst {\n  HTTPTransportSession,\n} = require('./http');\nconst {\n  LOG_TRACE,\n  LOG_INFO,\n  LOG_ERROR,\n} = require('solclient-log');\nconst { FsmEvent } = require('solclient-fsm');\nconst { TransportBase } = require('../transport-base');\nconst { TransportProtocol } = require('../transport-protocols');\nconst { TransportProtocolHandler } = require('../transport-protocol-handler');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { WebSocketTransportSession } = require('./websocket-transport-session');\nconst { WebTransportEvent } = require('./web-transport-events');\nconst { WebTransportFSM } = require('./web-transport-fsm');\n\n/**\n * @classdesc\n * This class manages all the web based transport protocols.\n * <ul>\n *     <li>{@link TransportProtocol.HTTP_BASE64}\n *     <li>{@link TransportProtocol.HTTP_BINARY}\n *     <li>{@link TransportProtocol.HTTP_BINARY_STREAMING}\n *     <li>{@link TransportProtocol.WS_BINARY}\n * </ul>\n * @extends TransportBase\n * @private\n */\nclass WebTransport extends TransportBase {\n\n  /**\n   * @constructor\n   * @param {URL} url The url to connect to\n   * @param {Function} eventCB The callback for transport events\n   * @param {BaseSMFClient} client An SMF client instance\n   * @param {Object} props Additional transport properties\n   * @param {Function} getId A function that returns this transport's unique ID\n   */\n  constructor(url, eventCB, client, props, getId) {\n    super(url, eventCB, client, props);\n    LOG_TRACE(`webTransportProtocolList ${props.webTransportProtocolList}`);\n    this._transportHandler = new TransportProtocolHandler(url, props.webTransportProtocolList);\n    this._webTransportFsm = new WebTransportFSM(this, getId);\n    this._webTransportFsm.start();\n  }\n\n  notifyEvent(event) {\n    this._eventCB(event);\n  }\n\n  handleDestroyed() {\n    this._transportSession = null;\n  }\n\n  handleTransportEvent(transportEvent) {\n    LOG_INFO(`Web transport receive transport event: ${transportEvent}`);\n    let wEvent;\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportSessionEventCode.UP_NOTICE:\n        wEvent = new FsmEvent({ name: WebTransportEvent.UP_NOTICE });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.DESTROYED_NOTICE:\n        this.handleDestroyed();\n        wEvent = new FsmEvent({ name: WebTransportEvent.DESTROYED_NOTICE });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.SEND_ERROR:\n        wEvent = new FsmEvent({ name: WebTransportEvent.SEND_ERROR });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.CONNECT_TIMEOUT:\n        wEvent = new FsmEvent({ name: WebTransportEvent.CONNECT_TIMEOUT });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.DOWNGRADE_FAILED:\n        this._lastDowngradeSucceeded = false;\n        break;\n\n      case TransportSessionEventCode.DOWNGRADE_SUCCEEDED:\n        this._lastDowngradeSucceeded = true;\n        break;\n\n      default:\n        // All other transport events have no effect on the web transport and are passed through\n        this._eventCB(transportEvent);\n    }\n  }\n\n  /**\n   * @override\n   */\n  connect() {\n    const wEvent = new FsmEvent({ name: WebTransportEvent.CONNECT });\n    this._webTransportFsm.processEvent(wEvent);\n    return TransportReturnCode.OK;\n  }\n\n  connectInternal() {\n    this._transportSession = null;\n    const tpProtocol = this._transportHandler.getTransportProtocol();\n    this._props.transportProtocol = tpProtocol;\n    switch (tpProtocol) {\n      case TransportProtocol.HTTP_BASE64:\n      case TransportProtocol.HTTP_BINARY:\n      case TransportProtocol.HTTP_BINARY_STREAMING:\n        this._transportSession = new HTTPTransportSession(\n          this._url,\n          evt => this.handleTransportEvent(evt),\n          this._client,\n          this._props\n        );\n        break;\n\n      case TransportProtocol.WS_BINARY:\n        this._transportSession = new WebSocketTransportSession(\n          this._url,\n          evt => this.handleTransportEvent(evt),\n          this._client,\n          this._props\n        );\n        break;\n\n      default:\n        LOG_ERROR(`Web transport unrecognized TransportProtocol: ${tpProtocol}`);\n        throw new OperationError(`No transport session provider for scheme: ${tpProtocol}`,\n                                 ErrorSubcode.CONNECTION_ERROR,\n                                 tpProtocol);\n    }\n\n    LOG_INFO(`Connect Transport ${tpProtocol}`);\n    return this._transportSession.connect();\n  }\n\n  /**\n   * @override\n   */\n  destroy(msg, subcode) {\n    const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n    wEvent._destroyMsg = msg;\n    wEvent._subcode = subcode;\n    this._webTransportFsm.processEvent(wEvent);\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @param {String} msg The message associated with the downgrade\n   * @param {ErrorSubcode} subcode The subcode associated with the downgrade\n   * @returns {Boolean} `true` if there are downgrade options available. `false` otherwise.\n   * @private\n   */\n  beginDowngrade(msg, subcode) {\n    if (this._transportHandler.canCompleteDowngrade()) {\n      LOG_TRACE('Web transport downgrade');\n      // Destroy the underlying transport session\n      // This will asynchronously cause DESTROYED_NOTICE to be emitted.\n      // The receiver can then call completeDowngrade, which will complete the downgrade.\n      this.destroyInternal(msg, subcode);\n      return true;\n    }\n    LOG_TRACE('Web transport downgrade rejected');\n    return false;\n  }\n\n  completeDowngrade() {\n    if (!this._transportHandler.canCompleteDowngrade()) {\n      return false;\n    }\n    return this._transportHandler.completeDowngrade();\n  }\n\n  destroyInternal(msg, subcode) {\n    if (this._transportSession) {\n      this._transportSession.destroy(msg, subcode);\n    }\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    return this._transportSession.flush(callback);\n  }\n\n  getConnError() {\n    if (this._transportSession) {\n      return this._transportSession._connError;\n    }\n    return null;\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    if (this._transportSession) {\n      return this._transportSession.getInfoStr();\n    }\n    return 'Not connected.';\n  }\n\n  /**\n   * @override\n   */\n  getTransportProtocol() {\n    return this._transportHandler.getTransportProtocol();\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    if (this._transportSession) {\n      return this._transportSession.getClientStats();\n    }\n    return null;\n  }\n\n  /**\n   * @override\n   */\n  requestDowngrade(msg, subcode) {\n    LOG_TRACE('Creating downgrade request event');\n    this._lastDowngradeSucceeded = undefined; // will be reset by handler for TS DOWNGRADE_ events\n    const wEvent = new FsmEvent({ name: WebTransportEvent.DOWNGRADE });\n    wEvent._downgradeMsg = msg;\n    wEvent._subcode = subcode;\n    this._webTransportFsm.processEvent(wEvent);\n    return this._lastDowngradeSucceeded;\n  }\n\n  /**\n   * @override\n   */\n  send(message, forceAllowEnqueue) {\n    return this._transportSession.send(message, forceAllowEnqueue);\n  }\n}\n\nmodule.exports.WebTransport = WebTransport;\n","module.exports.WebSocketCloseCodes = {\n  0: {\n    name:        'Unknown code',\n    description: 'No status code was returned by the operation',\n  },\n  1000: {\n    name:        'Normal Closure',\n    description: 'The connection closed normally',\n  },\n  1001: {\n    name:        'Going Away',\n    description: 'The endpoint is going away due to a server failure or client navigation',\n  },\n  1002: {\n    name:        'Protocol Error',\n    description: 'A WebSocket protocol error occurred',\n  },\n  1003: {\n    name:        'Unsupported Data',\n    description: 'The endpoint cannot handle the specified data type',\n  },\n  1004: {\n    name:        'Reserved',\n    description: '',\n  },\n  1005: {\n    name:        'No Status Recvd',\n    description: 'Expected a status code but none was provided',\n  },\n  1006: {\n    name:        'Abnormal Closure',\n    description: 'No close frame was received before remote hangup',\n  },\n  1007: {\n    name:        'Invalid Frame Payload Data',\n    description: 'A message contained data inconsistent with its encoding',\n  },\n  1008: {\n    name:        'Policy Violation',\n    description: 'A message violated endpoint policy',\n  },\n  1009: {\n    name:        'Message Too Big',\n    description: 'A data frame was too large',\n  },\n  1010: {\n    name:        'Missing Extension',\n    description: 'The endpoint did not negotiate an expected extension',\n  },\n  1011: {\n    name:        'Internal Error',\n    description: 'The server encountered an unexpected condition that prevented it from fulfilling the request',\n  },\n  1012: {\n    name:        'Service Restart',\n    description: 'The server is restarting',\n  },\n  1013: {\n    name:        'Try Again Later',\n    description: 'The server is terminating the connection due to a temporary condition',\n  },\n  1014: {\n    name:        'Bad Gateway',\n    description: 'A gateway or proxy received an invalid response from the upstream server',\n  },\n  1015: {\n    name:        'TLS Handshake',\n    description: 'The connection was closed due to a failure to perform a TLS handshake',\n  },\n};\n","const {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n  LOG_ERROR } = require('solclient-log');\n\nconst { ArrayUtils } = require('solclient-util');\nconst { Convert,\n        Hex } = require('solclient-convert');\nconst { ErrorSubcode } = require('solclient-error');\nconst { mixin } = require('solclient-eskit');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\nconst { WebSocketCloseCodes } = require('./websocket-close-codes');\nconst { WebTransportSessionBase } = require('./web-transport-session-base');\n\nconst http = require('http');\nconst https = require('https');\n\nconst {\n  stringToArrayBuffer,\n} = Convert;\nconst {\n  formatHexString,\n} = Hex;\nconst {\n  includes,\n} = ArrayUtils;\n\n/* eslint-env browser */\n// closure mangles window.WebSocket\nconst globalContext = (typeof window === 'undefined' ? global : window);\nlet MyWebSocket = globalContext.WebSocket;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-disable no-global-assign */\n  /* eslint-disable global-require */\n  MyWebSocket = /** @type {WebSocket} */ (require('ws'));\n  /* eslint-enable no-global-assign */\n  /* eslint-enable global-require */\n}\n/* eslint-env shared-browser-node */\n\nfunction adaptURL(url) {\n  const v = url.match(/(ws|http)(s?:\\/\\/.+)/);\n  return `ws${v[2]}`;\n}\n\n\n/**\n * @classdesc\n * @private\n * @memberof solace\n */\nclass WebSocketTransportSession extends WebTransportSessionBase {\n\n  /**\n   * @constructor\n   * @param {String} url The url to connect to\n   * @param {function} eventCB The callback for transport events\n   * @param {SMFClient} client The SMF client for data events\n   * @param {Object} props Properties for the transport session\n   */\n  constructor(url, eventCB, client, props) {\n    super(url, eventCB, client, props);\n    /**\n     * @type {String}\n     */\n    this._url = adaptURL(url);\n\n    /**\n     * @type {?WebSocket}\n     */\n    this._socket = null;\n\n    /**\n     * @type {?string}\n     */\n    this._sessionId = new Date().getTime();\n\n    if (BUILD_ENV.TARGET_BROWSER) {\n      /**\n       * @type {Number}\n       */\n      this._bufferedAmountQueryIntervalInMsecs = props.bufferedAmountQueryIntervalInMsecs;\n      /**\n       * @type {?number}\n       */\n      this._bufferedAmountQueryTimer = null;\n      /**\n       * @type {Number}\n       */\n      this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n    }\n  }\n\n\n  /**\n   * @private\n   */\n  onOpen() {\n    this.cancelConnectTimeout();\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(\n          new TransportSessionEvent(\n              TransportSessionEventCode.UP_NOTICE,\n              'Connected',\n              0,\n              null,\n              this._sessionId));\n  }\n\n  /**\n   * @param {Socket} originalSocket bound at the time of callback registration,\n   * safety against stray calls after socket is destroyed.\n   * @param {Event} event The websocket event causing the close\n   * @private\n   */\n  onClose(originalSocket, event) {\n    if (originalSocket !== this._socket) {\n      LOG_DEBUG('Websocket Transport Session stray onClose for previous socket, ignoring.');\n      return;\n    }\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('WebSocket transport is being destroyed, ignore error');\n      return;\n    }\n    const msgBuf = [];\n    const code = WebSocketCloseCodes[event.code] || WebSocketCloseCodes[0];\n    msgBuf.push(`${event.code} ${code.name} (${code.description})`);\n    if (event.wasClean !== undefined) {\n      msgBuf.push(`clean closure: ${event.wasClean}`);\n    }\n    if (event.reason) {\n      msgBuf.push(`reason: ${event.reason}`);\n    }\n    const msg = msgBuf.join(', ');\n    LOG_DEBUG(`WebSocket transport connection is closed ${msg}`);\n    LOG_TRACE(`Event { type: ${event.type} wasClean: ${event.wasClean} code: ${event.code} reason: ${event.reason} }`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    this.destroy(`Connection closed: ${msg}`, ErrorSubcode.COMMUNICATION_ERROR);\n  }\n\n  onDrain() {\n    LOG_TRACE('Drained socket');\n    this.maybeEmitCanSend();\n    this.maybeEmitFlush();\n  }\n\n  onBufferedAmountPoll() {\n    if (this.getBufferedAmount() === 0) {\n      this.onDrain();\n    } else if (this.scheduleQuery) {\n      this.scheduleQuery();\n    }\n  }\n\n  /**\n   * @param {Socket} originalSocket bound at callback registration.\n   * @param {TransportSessionEvent} event The event causing the error\n   * @private\n   */\n  onError(originalSocket, event) {\n    LOG_INFO(`Websocket Transport Session onError for socket ${originalSocket} while socket is ${this._socket}`);\n    if (originalSocket !== this._socket) {\n      LOG_INFO('Websocket Transport Session stray onError for previous socket, ignoring.');\n      return;\n    }\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_INFO('WebSocket transport is being destroyed, ignore error');\n      return;\n    }\n    const msg = (event.message) ? (`: ${event.message}`) : '';\n    LOG_INFO(`WebSocket transport connection error ${msg} while in state ${this._state}`);\n    // There won't be an onClose call to clean up unless we are connected already.\n    if (this._state === TransportSessionState.WAITING_FOR_CONNECT) {\n      this.cancelConnectTimeout();\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.destroy(`Connection failed: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n    } else { // Sending error event only, onClose will clean up in due time.\n      this._eventCB(\n            new TransportSessionEvent(\n                TransportSessionEventCode.SEND_ERROR,\n                `Connection error${msg}`,\n                null,\n                ErrorSubcode.CONNECTION_ERROR, null));\n    }\n  }\n\n  /**\n   * @param {TransportSessionEvent} event The data event\n   * @private\n   */\n  onMessage(event) {\n    if (this._client) {\n      this._client.rxDataArrayBuffer(event.data);\n    }\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  connectTimerExpiry() {\n    LOG_INFO('WebSocket transport connect timeout');\n    this.state = TransportSessionState.CONNECTION_FAILED;\n    this._eventCB(new TransportSessionEvent(\n      TransportSessionEventCode.CONNECT_TIMEOUT,\n      'Connection timed out',\n      null,\n      ErrorSubcode.TIMEOUT\n    ));\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  connect() {\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_ERROR(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (!this._url) {\n      LOG_WARN('Cannot connect to null URL');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n    if (this._socket) {\n      this.onError('Socket already connected');\n    }\n\n    LOG_INFO('Establishing WebSocket transport session');\n    try {\n      this.createConnectTimeout();\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n      if (BUILD_ENV.TARGET_NODE && !this._socketOptions) {\n        LOG_DEBUG('Creating Node websocket options');\n        this._socketOptions = this.createWebSocketOptions(this.onDrain.bind(this));\n      }\n      LOG_INFO('Constructing socket');\n      if (BUILD_ENV.TARGET_BROWSER) {\n        /**\n         * @type {WebSocket}\n         */\n        this._socket = new MyWebSocket(this._url, 'smf.solacesystems.com');\n      } else {\n        this._socket = new MyWebSocket(this._url, 'smf.solacesystems.com', this._socketOptions);\n        this._socket.ondrain = this.onDrain.bind(this);\n      }\n      // Closure is generally faster than bind\n      LOG_TRACE('Assigning properties to socket');\n      // Closure using Browser profile to avoid mangling this\n      this._socket.binaryType = 'arraybuffer';\n      this._socket.onopen = this.onOpen.bind(this);\n      this._socket.onmessage = this.onMessage.bind(this);\n      this._socket.onclose = this.onClose.bind(this, this._socket);\n      this._socket.onerror = this.onError.bind(this, this._socket);\n      LOG_TRACE('Prepared socket');\n    } catch (error) {\n      LOG_INFO(`Error connecting: ${error.message}`);\n      LOG_TRACE('Error details', error.stack || error);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.cancelConnectTimeout();\n      if (error instanceof TransportError) {\n        this._connError = error;\n      } else {\n        throw new TransportError(`Could not create WebSocket: ${error.message}`,\n                                 error.subcode || ErrorSubcode.CONNECTION_ERROR);\n      }\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    LOG_INFO('WebSocket is connecting');\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @param {String} data The binary string data to send.\n   * @param {Boolean} [force=false] If true, send even if buffer is full.\n   */\n  send(data, force = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    const dataLen = data.length;\n    const bufferAllow = (this._sendBufferMaxSize - this.getBufferedAmount()) >= 0;\n    // LOG_DEBUG('Websocket send:', dataLen, force, bufferAllow);\n    if (!(force || bufferAllow)) {\n      this._canSendNeeded = true;\n      if (this.scheduleQuery) this.scheduleQuery();\n      return TransportReturnCode.NO_SPACE;\n    }\n\n    // LOG_TRACE(`websocket.send: len=${data.length}`);\n    // Slice messages per maxPayloadBytes\n    const maxPayloadBytes = this._maxPayloadBytes;\n    const ab = stringToArrayBuffer(data);\n    if (dataLen > maxPayloadBytes) {\n      for (let i = 0; i < dataLen; i += maxPayloadBytes) {\n        this._socket.send(ab.slice(i, i + maxPayloadBytes));\n      }\n    } else {\n      this._socket.send(ab);\n    }\n    // LOG_TRACE(`websocket.send: after send getBufferedAmount=${this.getBufferedAmount()}`);\n    this._clientstats.bytesWritten += dataLen;\n    ++this._clientstats.msgWritten;\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @returns {Number} The number of already buffered bytes in this transport.\n   * @private\n   */\n  getBufferedAmount() {\n    // Access as string property because this is a defineProperty on node websocket,\n    // meaning it is not mangled by Closure Compiler\n    return this._socket ? this._socket['bufferedAmount'] : 0; // eslint-disable-line dot-notation\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    this._flushCallback = callback;\n    this.maybeEmitFlush();\n  }\n\n  maybeEmitCanSend() {\n    if (this._canSendNeeded && this.getBufferedAmount() < this._sendBufferMaxSize) {\n      LOG_TRACE('Transport emitting CAN_ACCEPT_DATA');\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '', null, 0, this._sessionId));\n    }\n  }\n\n  maybeEmitFlush() {\n    if (!this._flushCallback) return;\n    if (BUILD_ENV.TARGET_BROWSER && this.getBufferedAmount() > 0) {\n      // Ensure we have a query scheduled, but don't interrupt a query in progress\n      if (!this._bufferedAmountQueryTimer) {\n        this.scheduleQuery();\n      }\n      return;\n    }\n\n    // Node is automatically flushed by socket.end(), which is called in non-error cases\n    LOG_DEBUG('Transport emitting FLUSH');\n    const cb = this._flushCallback;\n    this._flushCallback = null;\n    cb();\n  }\n\n  /**\n   * @override\n   */\n  destroy(message, subcode) {\n    // We can destroy (and get a notice) even if the socket is freshly created.\n    // But this will only work once.\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_INFO(`Destroy WebSocket transport: ${message}`);\n\n      // Set state for connection teardown.\n      this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n      if (this._socket) {\n        this._socket.close();\n        this._socket.onopen = null;\n        this._socket.onmessage = null;\n        this._socket.onclose = null;\n        this._socket.onerror = function onerrorStub() { }; // Prevent unhandled errors\n        this._socket = null;\n      }\n\n      if (this._connectTimer) {\n        clearTimeout(this._connectTimer);\n        this._connectTimer = undefined;\n      }\n\n      if (BUILD_ENV.TARGET_BROWSER) {\n        this.cancelQuery();\n        this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n      }\n\n      this._canSendNeeded = false;\n\n      this._state = TransportSessionState.DOWN;\n\n      this._client = null; // Don't accept data.\n    }\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    if (this._eventCB) {\n      // Fire this *almost* instantly, but follow the HTTP\n      // transport pattern by guaranteeing an async callback.\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                              message || 'Session is destroyed',\n                                              null,\n                                              subcode || 0,\n                                              this._sessionId));\n      // Release references to other components\n      this._eventCB = null;\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @returns {String} A description of this object.\n   */\n  getInfoStr() {\n    const str = `WebSocketTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n  static browserSupportsBinaryWebSockets() {\n    LOG_DEBUG('websocket browserSupportBinaryCheck - ' +\n              'if WebSocket, ArrayBuffer and Uint8Array are supported');\n\n    const exists = ['function', 'object'];\n    if (!includes(exists, typeof MyWebSocket) ||\n        !includes(exists, typeof ArrayBuffer) ||\n        !includes(exists, typeof Uint8Array)) {\n      LOG_INFO('websocket browserSupportBinaryCheck: false - some required classes not supported');\n      return false;\n    }\n\n    LOG_DEBUG('websocket browserSupportBinaryCheck - if WebSocket supports binaryType');\n    if ('binaryType' in MyWebSocket.prototype) {\n      LOG_INFO('websocket browserSupportBinaryCheck: true - WebSocket supports binaryType');\n      return true;\n    }\n\n    LOG_INFO('websocket browserSupportBinaryCheck: false - WebSocket does not support binaryType');\n    return false;\n  }\n\n}\n\nif (BUILD_ENV.TARGET_BROWSER) {\n  mixin(WebSocketTransportSession, class WebSocketTransportSessionBrowser {\n    /**\n     * @private\n     */\n    scheduleQuery() {\n      const bufferedAmount = this.getBufferedAmount();\n      if (bufferedAmount > 0 && this._bufferedAmountQueryIntervalInMsecs > 0) {\n        this.cancelQuery();\n        if (this._bufferedAmountQueryIntervalDelayMultiplier > 1) {\n          LOG_DEBUG(`$$ schedule bufferedAmount query timer in ${\n                    this._bufferedAmountQueryIntervalInMsecs *\n                    this._bufferedAmountQueryIntervalDelayMultiplier} ms`);\n        }\n        const timeout = this._bufferedAmountQueryIntervalInMsecs *\n                        this._bufferedAmountQueryIntervalDelayMultiplier;\n        this._bufferedAmountQueryTimer = setTimeout(() => {\n          this.cancelQuery();\n          try {\n            this.onBufferedAmountPoll();\n          } catch (e) {\n            LOG_ERROR(`Error occurred in onBufferedAmountPoll: ${e.message}`);\n            LOG_TRACE('Error details:', e.stack || e);\n          }\n        }, timeout);\n      }\n    }\n\n    cancelQuery() {\n      if (this._bufferedAmountQueryTimer) {\n        clearTimeout(this._bufferedAmountQueryTimer);\n        this._bufferedAmountQueryTimer = null;\n      }\n    }\n  });\n} else {\n  // Node TLS socket options formulation shared with TCP transport\n  // eslint-disable-next-line global-require\n  const { NodeTLSOptsMixin } = require('../node-tls-opts-mixin');\n  mixin(WebTransportSessionBase, NodeTLSOptsMixin);\n  // Node-specific methods of this class go here\n  mixin(WebTransportSessionBase, class WebTransportSessionBaseNode {\n\n    /**\n     * @name solace.WebTransportSession#createWebSocketOptions\n     * @param {Function} onDrainCallback handler function for socket onDrain event\n     * @returns {Object} A WebSocket options object for the current configuration\n     * @private\n     */\n    createWebSocketOptions(onDrainCallback) {\n      let options = {};\n      if (this._ssl) {\n        options = this.createTLSOptions();\n        // use custom agent for client certificate support, ssl resume session support\n        // eslint-disable-next-line dot-notation\n        options['agent'] = new https.Agent({\n          keepAlive: false,\n        });\n      } else { // else no TLS:\n        // eslint-disable-next-line dot-notation\n        options['agent'] = new http.Agent();\n      }\n      // eslint-disable-next-line dot-notation\n      const wsAgent = options['agent'];\n      const origCreateConnection = wsAgent.createConnection;\n      wsAgent.createConnection = function newCreateConnection(opts, callback) {\n        const socket = origCreateConnection.call(this, opts, callback);\n        socket.on('drain', onDrainCallback);\n        return socket;\n      };\n      LOG_DEBUG('WebSocket options', options);\n      return options;\n    }\n  });\n}\n\nmodule.exports.WebSocketTransportSession = WebSocketTransportSession;\n","const { APIProperties } = require('./lib/api-properties');\nconst { APIPropertiesValidators } = require('./lib/api-properties-validators');\nconst { ArrayUtils } = require('./lib/array-utils');\nconst { parseURL } = require('./lib/url');\nconst { Process } = require('./lib/process');\nconst { StringBuffer } = require('./lib/string-buffer');\nconst { StringUtils } = require('./lib/string-utils');\nconst { TimingBucket } = require('./lib/timing-bucket');\nconst { UUID } = require('./lib/uuid');\nconst { Version } = require('./lib/version');\n\nmodule.exports = {\n  parseURL,\n\n  APIProperties,\n  APIPropertiesValidators,\n  ArrayUtils,\n  Process,\n  StringBuffer,\n  StringUtils,\n  TimingBucket,\n  UUID,\n  Version,\n};\n","const { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst APIPropertiesValidators = {\n  validateInstance(typeDesc, instance, name, ...args) {\n    args.forEach((check) => {\n      const validator = check.shift();\n      const validatorArgs = [typeDesc, instance, name, ...check];\n      validator(...validatorArgs);\n    });\n  },\n\n  valInstance(typeDesc, instance, name, typeInstance, typeInstanceDesc) {\n    if (!Check.instanceOf(instance[name], typeInstance)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                               }' must be instance of ${typeInstanceDesc}`);\n    }\n  },\n\n  valNotEmpty(typeDesc, instance, name) {\n    if (Check.none(instance[name]) || instance[name] === '') {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' cannot be empty.`,\n                             ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valLength(typeDesc, instance, name, max) {\n    if (Check.string(instance[name]) && instance[name].length > max) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' exceeded max length ${max}`,\n                             ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valRange(typeDesc, instance, name, min, max) {\n    if (Check.number(instance[name]) && (instance[name] < min || instance[name] > max)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' out of range [${min}; ${max}].`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valString(typeDesc, instance, name) {\n    if (!Check.string(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type string; was ${typeof instance[name]}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valNumber(typeDesc, instance, name) {\n    if (!Check.number(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type number; was ${typeof instance[name]}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valBoolean(typeDesc, instance, name) {\n    const val = instance[name];\n    if (!Check.boolean(val)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type boolean; was ${typeof val}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valIsMember(typeDesc, instance, key, enumInstance, enumName, allowNull = false) {\n    const val = instance[key];\n    if (allowNull && (val === null || val === undefined)) return;\n    if (enumInstance.values.indexOf(val) >= 0) return;\n    throw new OperationError(`${typeDesc} validation: Property '${key\n                             }'=${val} must be a member of ${enumName}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n  },\n\n  valStringOrArray(typeDesc, instance, name) {\n    const val = instance[name];\n    if (typeof val !== 'string' && !Array.isArray(val)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' must be a string or array`,\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valArrayIsMember(typeDesc, instance, name, enumInstance, enumName,\n                   allowUndefined, allowEmpty, allowDuplicate) {\n    const val = instance[name];\n    if ((val === undefined || val === null)) {\n      if (allowUndefined) {\n        return;\n      }\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' must be type Array`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    if (!Array.isArray(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' must be type Array`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (!allowEmpty && instance[name].length === 0) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' cannot be empty`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    instance[name].forEach((ele, index) => {\n      if (!enumInstance.values.includes(ele)) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' must be an array of ${enumName}`,\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (!allowDuplicate) {\n        if (instance[name].indexOf(ele, index + 1) >= 0) {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                          }' cannot have duplicate element value`,\n                          ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n    });\n  },\n\n  valArrayOfString(typeDesc, instance, name) {\n    const val = instance[name];\n    if (Check.something(val)) {\n      if (!Array.isArray(val)) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                               }' must be type Array`,\n                               ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      val.forEach((ele) => {\n        if (typeof ele !== 'string') {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                                 }' must be an array of string`,\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n      });\n    }\n  },\n\n  valTopicString(typedesc, instance, name) {\n    // Pardon this late import. I need to break a circular dependency.\n    // eslint-disable-next-line global-require\n    const { DestinationUtil, DestinationType } = require('solclient-destination');\n    module.exports.APIPropertiesValidators.valString(typedesc, instance, name);\n    const val = instance[name];\n    const result = DestinationUtil.validateAndEncode(DestinationType.TOPIC, val);\n    if (result.error) {\n      throw new OperationError(`${typedesc} validation: Property '${name}' must be ` +\n                               `a valid topic string: ${result.error}`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valTopicStringOrEmpty(typedesc, instance, name) {\n    const val = instance[name];\n    if (val && val.length) {\n      module.exports.APIPropertiesValidators.valTopicString(typedesc, instance, name);\n    }\n  },\n};\n\nmodule.exports.APIPropertiesValidators = APIPropertiesValidators;\n","const cloneObj = require('clone');\n\nconst CLONE_CIRCULAR = false; // If true, handles circular references safely.\nconst CLONE_DEPTH = 1; // Don't deep-clone nested values.\n\n/**\n * @memberof solace\n * @private\n */\nclass APIProperties {\n\n  /**\n   * Base class for all API properties structures. Provides the clone() method to\n   * make all properties cloneable.\n   * Creates an instance of APIProperties. Assigns properties from one or more\n   * objects in increasing priority order.\n   *\n   * @example\n   * super({ foo: 'defaultFoo', bar: 42 }, { foo: 'quux' }); // .foo == quux, .bar = 42\n   *\n   * @param {...any} options The properties sources to assign.\n   *\n   * @since 10.0.0\n   * @constructor\n   */\n  constructor(...options) {\n    Object.assign(this, ...options);\n  }\n\n  /**\n   * Can be overridden.  For instance sessionProperties\n   * overrides this to suppress printing the password.\n   * @returns {String} The string representation of this object\n   * @private\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  clone() {\n    return cloneObj(this, CLONE_CIRCULAR, CLONE_DEPTH);\n  }\n}\n\nmodule.exports.APIProperties = APIProperties;\n","function flatten(array) {\n  return array.reduce((acc, el) => acc.concat(Array.isArray(el) ? flatten(el) : el), []);\n}\n\nfunction includes(array, el) {\n  return array.some(v => v === el);\n}\n\nmodule.exports.ArrayUtils = {\n  flatten,\n  includes,\n};\n","\nconst WINDOWS_VERSION_MAP = {\n  '6.4':  '10.0',\n  '6.3':  '8.1',\n  '6.2':  '8',\n  '6.1':  '7',\n  '6.0':  'Vista',\n  '5.2':  'Server 2003',\n  '5.1':  'XP',\n  '5.01': '2000 SP1',\n  '5.0':  '2000',\n  '4.0':  '4.0',\n};\n\nconst NODE_OS_TYPES = {\n  Darwin:     'OSX',\n  Windows_NT: 'Windows',\n};\n\nconst context = typeof window !== 'undefined' ? window : global;\n\nconst DEFAULT = {\n};\n\nconst NODE_PROCESS = {\n  product:  'solclientjs',\n  platform: 'node',\n  agent:    'node',\n  process:  context.process,\n};\n\n// Worst case fallbacks\nconst BROWSER_PROCESS = {\n  product:  'solclientjs',\n  platform: 'unknown',\n  agent:    'Gecko',\n};\n\nfunction getBrowserAgentInfo() {\n  /* eslint-env browser */\n  const navObj = typeof navigator !== 'undefined' ? navigator : null;\n  if (!navObj) return null;\n  const agentStr = navigator.userAgent;\n\n  // Execute these regex checks against the user agent string in this order.\n  // The earlier browsers have a lot of impersonation substrings in their user\n  // agent list so we positively test for them before considering the browsers\n  // that are frequently impersonated.\n  const browsers = [\n    ['edge', /Edge\\/([0-9._]+)/],\n    ['chrome', /(?!Chrom.*OPR)Chrom(?:e|ium)\\/([0-9.]+)(:?\\s|$)/],\n    ['firefox', /Firefox\\/([0-9.]+)(?:\\s|$)/],\n    ['opera', /Opera\\/([0-9.]+)(?:\\s|$)/],\n    ['opera', /OPR\\/([0-9.]+)(:?\\s|$)$/],\n    ['ie', /Trident\\/7\\.0.*rv:([0-9.]+).*\\).*Gecko$/],\n    ['ie', /MSIE\\s([0-9.]+);.*Trident\\/[4-8].0/], // Edit: IE11 in IE9 emu mode uses Trident 8\n    ['ie', /MSIE\\s(7\\.0)/],\n    ['bb10', /BB10;\\sTouch.*Version\\/([0-9.]+)/],\n    ['android', /Android\\s([0-9.]+)/],\n    ['ios', /Version\\/([0-9._]+).*Mobile.*Safari.*/],\n    ['safari', /Version\\/([0-9._]+).*Safari/],\n  ];\n\n  const agentInfo = {\n    browser:  { name: 'unknown', version: '0.0.0' },\n    platform: { os: 'unknown', arch: 'unknown', version: 'unknown' },\n  };\n\n  const agentHas = (...strs) => strs.some(str => agentStr.indexOf(str) >= 0);\n  const firstValue = (...vals) => vals.filter(Boolean).shift();\n\n  Object.assign(\n    agentInfo, // start with fallbacks above\n    // 1. Run the callback below for each browser name/regex-rule pair.\n    // 2. Decompose the pair into variables called `key` and `rule`.\n    browsers.map(([key, rule]) => {\n      // 3. Skip if the rule doesn't match the user agent string.\n      if (!rule.test(agentStr)) return false;\n      // 4. Get the matches for the rule.\n      const match = rule.exec(agentStr);\n      // 5. Extract the version from match group 1.\n      const versionStrs = match && match[1].split(/[._]/).slice(0, 3);\n      // 6. Convert the version strings to numbers.\n      const version = versionStrs.map(str => parseInt(str, 10));\n      // 7. Ensure our version tuple is length 3 by appending 0 elements.\n      while (version.length < 3) version.push(0);\n      // 8. Return an agentInfo object in the same form as above, consuming the version array.\n      return { browser: { name: key, version: version.join('.') } };\n    }).filter(Boolean).shift()); // 9. Filter out anything that returned `false` (#3)...\n    // 10. ...and return the first element.\n\n  // Now try to extract platform info\n  const os = firstValue(\n    agentHas('Windows Phone') && 'WindowsPhone',\n    agentHas('Windows') && 'Windows',\n    agentHas('Linux') && 'Linux',\n    agentHas('like Mac OS X') && 'iOS',\n    agentHas('OS X') && 'OSX',\n    agentHas('Android', 'Adr') && 'Android',\n    agentHas('BB10', 'RIM Tablet OS', 'BlackBerry') && 'BlackBerry'\n  );\n  const versionTests = {\n    'Windows': () => firstValue(\n      agentHas('Win16') && '3.1.1',\n      agentHas('Windows CE') && 'CE',\n      agentHas('Windows 95') && '4.00.950',\n      agentHas('Windows 98; Win 9x 4.90') && '4.90',\n      agentHas('Windows 98') && '4.10',\n      (() => {\n        // Look in the first set of parentheses for a version string key.\n        // This will fail when Windows 16 comes out\n        const parenParts = agentStr.match(/\\(.+?\\)/);\n        const versionPart = parenParts[0];\n        if (!versionPart) return false;\n        const versionMatch = str => versionPart.indexOf(str) >= 0;\n        return firstValue(...Object.keys(WINDOWS_VERSION_MAP).map(k =>\n            versionMatch(k) && WINDOWS_VERSION_MAP[k]));\n      })()\n    ),\n    'OSX':        () => agentStr.match(/OS X ((\\d+[._])+\\d+)\\b/)[1],\n    'Linux':      () => '',\n    'iOS':        () => agentStr.match(/OS ((\\d+[._])+\\d+) like Mac OS X/)[1],\n    'Android':    () => agentStr.match(/(?:Android|Adr) ((\\d+[._])+\\d_)/)[1],\n    'BlackBerry': () => agentStr.match(/(?:Version\\/|RIM Tablet OS )((\\d+\\.)+\\d+)/)[1],\n  };\n  const versionTest = versionTests[os];\n  agentInfo.platform.os = os || 'Unknown';\n  agentInfo.platform.version = (versionTest && versionTest() || '0.0.0').replace(/_/g, '.');\n  return agentInfo;\n}\n/* eslint-env shared-browser-node */\n\ntry {\n  if (BUILD_ENV.TARGET_BROWSER && context.navigator) {\n    // These are historical defaults\n    const safeEncode = str => str.replace(/[^a-zA-Z0-9_/.]/g, '-');\n    Object.assign(BROWSER_PROCESS, {\n      platform:    context.navigator.platform,\n      agent:       context.navigator.product,\n      description: safeEncode(context.navigator.userAgent),\n      navigator:   context.navigator,\n    });\n    const browserAgentInfo = getBrowserAgentInfo();\n    if (browserAgentInfo) {\n      BROWSER_PROCESS.agent = safeEncode(`${browserAgentInfo.browser.name\n                                           }-${browserAgentInfo.browser.version}`);\n      BROWSER_PROCESS.platform = `${BROWSER_PROCESS.agent}-${safeEncode(\n        `${browserAgentInfo.platform.os}-${browserAgentInfo.platform.version}`)}`;\n    }\n  }\n  if (BUILD_ENV.TARGET_NODE && context.process) {\n  //if (false) {\n    const os = require('os'); // eslint-disable-line global-require\n    const ostype = os.type();\n    const osname = NODE_OS_TYPES[ostype] || ostype || 'unknown';\n    const nodeVersionStr = `node-${process.version.substr(1)}`;\n    Object.assign(NODE_PROCESS, {\n      platform:    `${nodeVersionStr}-${osname}-${os.release()}-${os.arch()}`,\n      agent:       nodeVersionStr,\n      description: nodeVersionStr,\n    });\n  }\n} catch (ex) {\n  // Fall back to defaults\n}\n\nconst Process = Object.assign({}, DEFAULT,\n                              BUILD_ENV.TARGET_BROWSER ? BROWSER_PROCESS : {},\n                              BUILD_ENV.TARGET_NODE ? NODE_PROCESS : {});\n\nmodule.exports.Process = Process;\n","/**\n * This class is used to efficiently concatenate strings.\n * @private\n */\nclass StringBuffer {\n  /**\n   * @constructor\n   * @param {...*} args Initial buffer contents\n   * @private\n   */\n  constructor(...args) {\n    this.clear();\n    this.append(...args);\n  }\n\n  /**\n   * Appends the given strings to the buffer\n   *\n   * @param {...*} args Objects to add to the buffer. These are immediately\n   *                    coerced to strings.\n   * @returns {StringBuffer} this\n   */\n  append(...args) {\n    [...args].forEach((arg) => {\n      this.buffer[this.index++] = String(arg);\n    });\n    return this;\n  }\n\n  /**\n   * Resets the buffer.\n   */\n  clear() {\n    this.buffer = [];\n    this.index = 0;\n  }\n\n  /**\n   * Returns the buffer as a string. Additional concatenations and renderings\n   * can be performed.\n   * @returns {String} The buffer's contents concatenated to a string.\n   */\n  toString() {\n    return this.buffer.join('');\n  }\n}\n\nmodule.exports.StringBuffer = StringBuffer;\n","const { StringBuffer } = require('./string-buffer');\n\nconst PAD_LEFT = 0;\nconst PAD_RIGHT = 1;\n\nconst LUT_PRINTABLE = (() => {\n  const tmp = [];\n  for (let c = 0; c < 256; ++c) {\n    tmp[c] = (c < 33 || c > 126) ? '.' : String.fromCharCode(c);\n  }\n  return tmp;\n})();\n\nfunction padLeftRight(str, minLen, padSide, padChar = ' ') {\n  if (typeof str !== 'string') {\n    return str;\n  }\n  if (str.length >= minLen) {\n    return str;\n  }\n\n  const buf = new StringBuffer();\n  for (let i = 0; i < (minLen - str.length); i++) {\n    buf.append(padChar.charAt(0));\n  }\n  switch (padSide) {\n    case PAD_LEFT:\n      return `${buf}${str}`;\n    case PAD_RIGHT:\n      return `${str}${buf}`;\n    default:\n      return str;\n  }\n}\n\nfunction leastSpaces(length, line) {\n  if (!line.length) return length;\n  const spaces = line.match(/^\\s*/)[0].length;\n  return spaces < length ? spaces : length;\n}\n\nfunction capitalizeWord(str) {\n  return `${str.charAt(0).toUpperCase()}${str.substr(1)}`;\n}\n\nfunction isEmptyFun(str) {\n  return (\n    str === undefined ||\n    str === null ||\n    str.length === 0\n  );\n}\n\n/**\n * @private\n * @type {StringUtils}\n */\nconst StringUtils = {};\n\nStringUtils.capitalize = function capitalize(str) {\n  if (!(str && str.length)) {\n    return str;\n  }\n\n  return str.split(' ').map(capitalizeWord).join(' ');\n};\n\nStringUtils.isEmpty = isEmptyFun;\n\nStringUtils.notEmpty = function notEmpty(str) {\n  return !(isEmptyFun(str));\n};\n\nStringUtils.toSafeChars = function toSafeChars(str) {\n  return str.replace(/[^a-zA-Z0-9_/.]/g, '');\n};\n\nStringUtils.padLeft = function padLeft(str, minLen, padChar) {\n  return padLeftRight(str, minLen, PAD_LEFT, padChar);\n};\n\nStringUtils.padRight = function padRight(str, minLen, padChar) {\n  return padLeftRight(str, minLen, PAD_RIGHT, padChar);\n};\n\nStringUtils.nullTerminate = function nullTerminate(str) {\n  if (str === null || str === undefined) {\n    throw new Error('non str in nullTerminate');\n  }\n  const lastChar = str.charCodeAt(str.length - 1);\n  if (lastChar === 0) {\n    return str;\n  }\n  return str + String.fromCharCode(0x00);\n};\n\nStringUtils.stripNullTerminate = function stripNullTerminate(str) {\n  if (str === null || str === undefined) {\n    throw new Error('null str in stripNullTerminate');\n  }\n  const lastChar = str.charCodeAt(str.length - 1);\n  if (lastChar === 0) {\n    return str.substr(0, str.length - 1);\n  }\n  return str;\n};\n\nStringUtils.hexdump = function hexdump(s) {\n  const output = new StringBuffer();\n  const printable = new StringBuffer();\n  const spacer = pos => (pos === 8 || pos === 16 ? '  ' : ' ');\n  let linelen = 0;\n  for (let i = 0, sLength = s.length; i < sLength; i++) {\n    const ccode = s.charCodeAt(i);\n    output.append(padLeftRight(ccode.toString(16), 2, PAD_LEFT));\n    printable.append(LUT_PRINTABLE[ccode] || '.');\n    output.append(spacer(++linelen));\n\n    if (i === s.length - 1) {\n      // input finished: complete the line\n      while (linelen < 16) {\n        output.append(`  ${spacer(++linelen)}`);\n      }\n    }\n\n    if (linelen === 16) {\n      output.append(printable.join(''));\n      output.append('\\n');\n      linelen = 0;\n      printable.clear();\n    }\n  }\n  return output.toString();\n};\n\n/**\n * Use heredoc`....` to create multi-line heredoc strings. Leading blank lines are removed, as are\n * leading spaces, up to the number of spaces on the least-indented line.\n * @param {String} literals The document template\n * @param {...String} substitutions The substitutions to make in the document\n * @returns {String} The interpolated representation of the document\n */\nStringUtils.heredoc = function heredoc(literals, ...substitutions) {\n  const subst = [...substitutions, ''];\n  const lines = literals.map(k => k + subst.shift())\n    .join('')\n    .split(/\\r?\\n/);\n  const spaces = lines.length === 1 ? 0 : lines.reduce(leastSpaces, Infinity);\n  while (lines[0] === '') {\n    lines.shift();\n  }\n  return lines.map(line => line.substring(spaces)).join('\\n');\n};\n\n\nmodule.exports.StringUtils = StringUtils;\n","class TimingBucket {\n  constructor(name, interval) {\n    this.name = name;\n    this.interval = interval;\n    this.buckets = [];\n  }\n\n  get bucketCount() {\n    let c = 0;\n    for (let i = 0, n = this.buckets.length; i < n; ++i) {\n      c += this.buckets[i] || 0;\n    }\n    return c;\n  }\n\n  log(v) {\n    if (v === undefined || isNaN(v)) {\n      return;\n    }\n    const normalized = Math.floor(v / this.interval) * this.interval;\n    this.buckets[normalized] = this.buckets[normalized] || 0;\n    this.buckets[normalized]++;\n  }\n\n  toString() {\n    const cont = [];\n    this.buckets.forEach((i) => {\n      cont.push(`${i}: ${this.buckets[i]}`);\n    });\n    return `{${cont.join(', ')}}`;\n  }\n}\n\nmodule.exports.TimingBucket = TimingBucket;\n","/* eslint-disable global-require */\nlet parseURL;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-env node */\n  parseURL = require('url').parse;\n} else {\n  /* eslint-env browser */\n  const scope = typeof window !== 'undefined' ? window : this;\n  require('./browser-url-polyfill')(scope);\n  parseURL = function makeURL(...args) {\n    return new URL(...args);\n  };\n}\n\nmodule.exports.parseURL = parseURL;\n","function generateUUID() { // Public Domain/MIT\n  let d = new Date().getTime();\n  // if (typeof performance !== 'undefined' && typeof performance.now === 'function') {\n  //   d += performance.now(); //use high-precision timer if available\n  // }\n\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (d + Math.random() * 16) % 16 | 0;\n    d = Math.floor(d / 16);\n    return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n  });\n}\n\nmodule.exports.UUID = {\n  generateUUID,\n};\n","// Coverity scanned is configured to run against the generated monolithic\n// solclient.js file (debug) version. On the loadbuild server BUILD_ENV.VERSION is\n// substituted and never null (it is null in developer workspace) so\n// coverity will complain that the \" || '0.0.0-source' \" is DEADCODE\n// coverity[dead_error_line]\nconst VERSION = BUILD_ENV.VERSION || '0.0.0-source';\n// Parse the date if provided. Was seeing NaN formatted dates in source mode, so add fallback\nconst DATE = BUILD_ENV.DATE\n  ? new Date(Date.parse(BUILD_ENV.DATE))\n  : new Date();\nconst MODE = BUILD_ENV.MODE_NAME;\n\n// These property names are all for export, so make sure they're not mangled\nconst TARGET = {\n  'name':    BUILD_ENV.TARGET_NAME,\n  'node':    BUILD_ENV.TARGET_NODE,\n  'browser': BUILD_ENV.TARGET_BROWSER,\n};\n\nconst FORMATTED_DATE = (() => {\n  const pad = n => (n < 10 ? `0${n}` : n);\n  const d = DATE;\n  const YYYY = d.getFullYear();\n  const MM = pad(d.getMonth() + 1);\n  const DD = pad(d.getDate());\n  const hh = pad(d.getHours());\n  const mm = pad(d.getMinutes());\n  return `${YYYY}/${MM}/${DD} ${hh}:${mm}`;\n})();\nconst SUMMARY = ['SolclientJS', BUILD_ENV.VERSION, MODE, FORMATTED_DATE].join(', ');\n\n/**\n * Returns the API version. Use version, date and mode properties for build details.\n * Use the summary property or the .toString() method to return a summary.\n * @static\n * @type {Object}\n * @namespace\n * @memberof solace\n */\nconst Version = {\n  /**\n   * The API version, as an informational string. The format of this string is subject to change.\n   * @type {String}\n   */\n  'version':       VERSION,\n  /**\n   * The API build date.\n   * @type {Date}\n   */\n  'date':          DATE,\n  /**\n   * The API build date, as a formatted string.\n   * The format of this date is:\n   * `YYYY-MM-DD hh:mm`\n   * where\n   *  * `YYYY` is the 4-digit year,\n   *  * `MM` is the 2-digit month   (01-12),\n   *  * `DD` is the 2-digit day     (01-31),\n   *  * `hh` is the 2-digit hour    (00-23),\n   *  * `mm` is the 2-digit minute  (00-59)\n   *\n   * @type {String}\n   */\n  'formattedDate': FORMATTED_DATE,\n  /**\n   * Information about the build target. This object is informational; its type, structure and\n   * content are subject to change.\n   * @type {Object}\n   */\n  'target':        TARGET,\n  /**\n   * The build mode. This may be one of 'debug' or 'release'. Other build modes may be added\n   * in the future.\n   * @type {String}\n   */\n  'mode':          MODE,\n  /**\n   * If `true`, this is an unoptimized debug build.\n   * @type {Boolean}\n   */\n  'debug':         BUILD_ENV.MODE_DEBUG,\n  /**\n   * If `true`, this is an optimized release build. Note that there may be multiple release\n   * builds in a distribution, with varying degrees of optimization.\n   * @type {Boolean}\n   */\n  'release':       BUILD_ENV.MODE_RELEASE,\n  /**\n   * An informational string summarizing the API name, version and build date.\n   * @type {String}\n   */\n  'summary':       SUMMARY,\n\n  toString() {\n    return SUMMARY;\n  },\n};\nmodule.exports.Version = Version;\n","const { Check } = require('./lib/check');\nconst { Parameter } = require('./lib/parameter');\n\nmodule.exports.Check = Check;\nmodule.exports.Parameter = Parameter;\n","const EPSILON = 1e6;\n\n/**\n * @param {Array} arr The array to flatten\n * @returns {Array} A maximally flattened array. The original array is not modified.\n * @private\n */\nfunction flatten(arr) {\n  return arr.reduce((a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []);\n}\n\n/**\n * @private\n */\nconst BaseChecks = (() => {\n  const result = {\n    /**\n     * Checks whether a value is undefined or null.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is undefined or null.\n     *\n     * @private\n     */\n    nothing(value) {\n      return (value === undefined || value === null);\n    },\n\n    /**\n     * Checks whether a value is anything, i.e. not undefined or null.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True unless the value is undefined or null.\n     *\n     * @private\n     */\n    anything(value) {\n      return !BaseChecks.nothing(value);\n    },\n\n    /**\n     * Checks whether a value is undefined. Uses the conservative\n     * typeof check for compatibility with particularly ill-behaved\n     * libraries that redefine <code>undefined</code>.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is undefined.\n     *\n     * @private\n     */\n    undefined(value) {\n      return typeof value === 'undefined';\n    },\n\n    /**\n     * Checks whether a value is defined. This is true for any value with\n     * a type that is not 'undefined'.\n     *\n     * @param {any} value The value to check\n     * @returns {Boolean} True if the value is defined.\n     *\n     * @private\n     */\n    defined(value) {\n      return !BaseChecks.undefined(value);\n    },\n\n    /**\n     * Checks whether a value is an array.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is an array.\n     *\n     * @private\n     */\n    array(value) {\n      return BaseChecks.anything(value) && Array.isArray(value);\n    },\n\n    /**\n     * Checks whether a value is an object. If a value is an array, it is not an object.\n     * If a value is null, it is not an object.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is an object (and not an array).\n     *\n     * @private\n     */\n    object(value) {\n      return (!BaseChecks.array(value) &&\n              value !== null &&\n              (typeof value === 'object' || value instanceof Object));\n    },\n\n    /**\n     * Checks whether a value is an instance of the given type.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} type The type to check.\n     *\n     * @returns {Boolean} True if type is in value's prototype chain.\n     *\n     * @private\n     */\n    instanceOf(val, type) {\n      return BaseChecks.object(val) && val instanceof type;\n    },\n\n    /**\n     * Checks whether a value's typeof is equal to the given type string.\n     *\n     * @param {*} val The value to check.\n     * @param {String} type The type string for comparison.\n     *\n     * @returns {Boolean} True if typeof(val) == type\n     *\n     * @private\n     */\n    type(val, type) {\n      return typeof val === type; /* dynamic */ // eslint-disable-line valid-typeof\n    },\n\n    /**\n     * Checks whether a value is an instance of any of the given types.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} types The types to check.\n     *\n     * @returns {Boolean} True if any element of types is in val's prototype chain.\n     *\n     * @private\n     */\n    instanceOfAny(val, ...types) {\n      return (BaseChecks.array(types) &&\n              flatten(types).some(type => BaseChecks.instanceOf(val, type)));\n    },\n\n    /**\n     * Checks whether the given value is empty.\n     *\n     * Emptiness is determined using the following checks:\n     *\n     * <ol>\n     *  <li>If an object is nothing, it is empty.</li>\n     *  <li>If it is an object, and it has no keys of its own, it is empty.</li>\n     *  <li>If it has a length property, it is empty if length === 0.</li>\n     *  <li>If none of the above apply, the object is not empty.</li>\n     * </ol>\n     *\n     * @param   {*} val The value to check.\n     *\n     * @returns {Boolean} True if the value is empty.\n     *\n     * @private\n     */\n    empty(val) {\n      if (BaseChecks.nothing(val)) return true;\n      if (BaseChecks.object(val)) {\n        if (Object.keys(val).length === 0) {\n          return true;\n        }\n      }\n      if (val.length === 0) {\n        return true;\n      }\n      return false;\n    },\n\n    /**\n     * A user-defined check.\n     *\n     * @param   {*} val The value to check\n     * @param   {Function} fn The function(val) to use.\n     *\n     * @returns {Boolean} The result of the function, coerced to a boolean.\n     *\n     * @private\n     */\n    truthy(val, fn) {\n      return !!fn(val);\n    },\n\n    rangeGe(val, rangeMinInclusive) {\n      return val >= rangeMinInclusive;\n    },\n\n    rangeGt(val, rangeMin) {\n      return val > rangeMin;\n    },\n\n    rangeLe(val, rangeMaxInclusive) {\n      return val <= rangeMaxInclusive;\n    },\n\n    rangeLt(val, rangeMax) {\n      return val < rangeMax;\n    },\n\n    rangeCompare(val, operator, operand, ...args) {\n      switch (operator) {\n        case '=':\n        case '==':\n        case '===':\n          return val === operand;\n        case '~=':\n        case '=~':\n          {\n            const epsilon = args[0] || EPSILON;\n            return Math.abs(val - operand) < epsilon;\n          }\n        case '<':\n          return val < operand;\n        case '<=':\n          return val <= operand;\n        case '>':\n          return val > operand;\n        case '>=':\n          return val >= operand;\n        default:\n          throw new Error(`Illegal operator for rangeCompare: ${operator}`);\n      }\n    },\n\n    NaN(val) {\n      return Number.isNaN(val);\n    },\n\n    /**\n     * Checks whether val is included in the object. If obj is an array, val is included if\n     * val is an element of the array. Otherwise, if obj is an object, val is included if\n     * val is one of the keys of obj.\n     *\n     * @param   {*} val The value to test\n     * @param   {*} obj The object to test\n     *\n     * @returns {Boolean} True if the value is included in the object\n     */\n    included(val, obj) {\n      if (BaseChecks.nothing(obj)) {\n        return false;\n      }\n      if (obj.includes) {\n        return obj.includes(val);\n      }\n      if (Array.isArray(obj)) {\n        // Not exactly Array.prototype.includes, which uses SameValueZero (+0 == -0)\n        return obj.indexOf(val) >= 0;\n      }\n      if (BaseChecks.object(obj)) {\n        const keys = Object.keys(obj);\n        return BaseChecks.included(val, keys);\n      }\n      return false;\n    },\n\n    /**\n     * Checks whether val is equal to expected.\n     *\n     * @param {any} val The value to check.\n     * @param {any} expected The expected value.\n     * @returns {Boolean} True if the value was equal to the expected value.\n     */\n    equal(val, expected) {\n      return val === expected;\n    },\n\n    /**\n     * Checks whether the given value appears as an attribute value in the given attributes object,\n     * e.g. whether an enumeration contains the given value. If the attributes object is an array,\n     * the array membership check {@link #included} is used instead.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} obj The object with attributes to check.\n     *\n     * @returns {Boolean} True if attrs has any attribute equal to val.\n     */\n    member(val, obj) {\n      return (BaseChecks.anything(obj) &&\n              (BaseChecks.array(obj)\n                ? BaseChecks.included(val, obj)\n                : Object.keys(obj).some(k => obj[k] === val))\n      );\n    },\n\n    boolean(v) {\n      return BaseChecks.type(v, 'boolean');\n    },\n\n    number(v) {\n      return BaseChecks.type(v, 'number');\n    },\n\n    string(v) {\n      return BaseChecks.type(v, 'string');\n    },\n\n    function(v) {\n      return BaseChecks.type(v, 'function');\n    },\n  };\n\n  /**\n   * Checks whether an object is none. This is the same check as <code>nothing</code>\n   * @see {@link nothing}\n   */\n  result.none = result.nothing;\n\n  /**\n   * Checks whether an object is something. This is the same check as <code>anything</code>\n   */\n  result.something = result.anything;\n\n  // Add check-loosening suffixes, (t | null), (t | undefined) and (t | null | undefined).\n  // Do the t check last, just in case it is not (null | undefined) safe.\n  Object.keys(result).forEach((key) => {\n    /**\n     * .orNull checks. These are equivalent to the similarly named check, but also pass if the value\n     * supplied was equal to null.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orNull = function orNull(val, ...args) {\n      return val === null || result[key](val, ...args);\n    };\n\n    /**\n     * .orUndefined checks. These are equivalent to the similarly named check, but also pass if the\n     * value supplied was equal to null.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orUndefined = function orUndefined(val, ...args) {\n      return val === undefined || result[key](val, ...args);\n    };\n\n    /**\n     * .orNothing checks. These are equivalent to the similarly named check, but also pass if the\n     * value supplied was null or undefined.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orNothing = function orNothing(val, ...args) {\n      return result.nothing(val) || result[key](val, ...args);\n    };\n  });\n\n  return result;\n})();\n\nmodule.exports.BaseChecks = BaseChecks;\n","const { BaseChecks } = require('./base-checks');\n\n/**\n *\n * Generates a then closure.\n *\n * @param {Boolean} doOp Whether the returned then function should call its argument.\n * @returns {Object} An object { then(fn, elseFn=undefined) }. If doOp was true, then(fn) will\n *                      call fn. If not, elseFn will be called if supplied.\n * @private\n */\nfunction thenGen(doOp) {\n  return {\n    then: doOp ? f => f() : (_, elseFn) => elseFn(),\n  };\n}\n\n/**\n *\n * none, anything, boolean, ... @returns {Boolean}\n * when(condition) @returns then(fn, elseFn) => if condition fn() else elseFn && elseFn()\n * unless(condition, else) @returns then(fn, elseFn) => if !condition fn() else elseFn && elseFn\n * whenNone, whenAnything, whenBoolean, ... @returns {function} then(fn, elseFn)\n * unlessNone, unlessAnything, unlessBoolean ... @returns {function} unless(fn, elseFn)\n * @private\n */\nconst Check = (() => {\n  const result = Object.assign({}, BaseChecks);\n  result.when = condition => thenGen(condition);\n  result.unless = condition => thenGen(!condition);\n  return result;\n})();\n\nmodule.exports.Check = Check;\n","const { Check } = require('./check');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst NO_OBJ = {}; // anonymous object\n\nfunction objectValues(object) {\n  return Object.keys(object).map(k => object[k]);\n}\n\nfunction subcodeSummary(subcode, expected = null, got = NO_OBJ) {\n  const expectedStr = expected ? `; expected: ${expected}` : '';\n  const gotStr = got !== NO_OBJ ? `; got: ${got}` : '';\n  switch (subcode) {\n    case ErrorSubcode.PARAMETER_INVALID_TYPE:\n      return `Parameter type was invalid${expectedStr}${gotStr}`;\n    default:\n      return ErrorSubcode.nameOf(subcode).toLowerCase().replace(/_/, ' ') + expectedStr;\n  }\n}\n\nfunction validateError(name, subcode, message) {\n  throw new OperationError(`Parameter ${name} failed validation`, subcode, message);\n}\n\nfunction validate(name, subcode, message, check, value, ...validatorArgs) {\n  if (!check(value, ...validatorArgs)) {\n    return validateError(name, subcode, message);\n  }\n  return value;\n}\n\nconst typename = x => x && x.constructor && x.constructor.name || typeof x;\n\n/**\n * The Check object is a powerful validation API but it is partially built at runtime by composing\n * functions, and it requires significant boilerplate for parameter validation.\n *\n * The Parameter API expresses concrete validations using the Check API, returning values on success\n * and throwing the appropriate SDK exception on failure. It would be tempting to try to\n * automatically build a Parameter method for every Check method, but this would make Parameter\n * difficult to understand and use.\n *\n * @private\n */\nconst Parameter = {};\n\nParameter.isArray = function isArray(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'array', value)) {\n  return validate(name, subcode, message, Check.isArray, value);\n};\n\nParameter.isBoolean =\nfunction isBoolean(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'boolean', value)) {\n  return validate(name, subcode, message, Check.boolean, value);\n};\n\nParameter.isBooleanOrNothing =\nfunction isBooleanOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'boolean or nothing', value)) {\n  return validate(name, subcode, message, Check.boolean.orNothing, value);\n};\n\nParameter.isEnumMember =\nfunction isEnumMember(name, value, memberOfEnum, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of [${memberOfEnum.names.join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member, value, memberOfEnum);\n};\n\nParameter.isEnumMemberOrNothing =\nfunction isEnumMemberOrNothing(name, value, memberOfEnum, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of [${memberOfEnum.names.join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member.orNothing, value, memberOfEnum);\n};\n\nParameter.isFunction =\nfunction isFunction(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'function', value)) {\n  return validate(name, subcode, message, Check.function, value);\n};\n\nParameter.isFunctionOrNothing =\nfunction isFunctionOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'function or nothing', value)) {\n  return validate(name, subcode, message, Check.function.orNothing, value);\n};\n\nParameter.isInstanceOf =\nfunction isInstanceOf(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE,\n                      message = subcodeSummary(subcode, instanceOf.name, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf, value, instanceOf);\n};\n\nParameter.isInstanceOfOrNothing =\nfunction isInstanceOfOrNothing(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or nothing`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orNothing, value, instanceOf);\n};\n\nParameter.isInstanceOfOrNull =\nfunction isInstanceOfOrNull(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or null`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orNull, value, instanceOf);\n};\n\nParameter.isInstanceOfOrUndefined =\nfunction isInstanceOfOrUndefined(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or undefined`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orUndefined, value, instanceOf);\n};\n\nParameter.isMember =\nfunction isMember(name, value, memberOf, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of ${memberOf.name}.[${objectValues(memberOf).join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member, value, memberOf);\n};\n\nParameter.isNumber =\nfunction isNumber(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number', value)) {\n  return validate(name, subcode, message, Check.number, value);\n};\n\nParameter.isNumberOrNothing =\nfunction isNumberOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number or nothing', value)) {\n  return validate(name, subcode, message, Check.number.orNothing, value);\n};\n\nParameter.isNumberOrNull =\nfunction isNumberOrNull(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number or null', value)) {\n  return validate(name, subcode, message, Check.number.orNull, value);\n};\n\nParameter.isRangeCompare =\nfunction isRangeCompare(name, value, operator, operand, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `${operator} ${operand}`, value)) {\n  return validate(name, subcode, message, Check.rangeCompare, value, operator, operand);\n};\n\nParameter.isRangeCompareOrNothing = function isRangeCompareOrNothing(name, value, operator, operand, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `${operator} ${operand} or nothing`, value)) {\n  return validate(name, subcode, message, Check.rangeCompare.orNothing, value, operator, operand);\n};\n\nParameter.isStringOrNull =\nfunction isStringOrNull(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string or null', value)) {\n  return validate(name, subcode, message, Check.string.orNull, value);\n};\n\n\nParameter.isString =\nfunction isString(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string', value)) {\n  return validate(name, subcode, message, Check.string, value);\n};\n\nParameter.isStringOrNothing =\nfunction isStringOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string or nothing', value)) {\n  return validate(name, subcode, message, Check.string.orNothing, value);\n};\n\nParameter.isValue =\nfunction isValue(name, value, expected, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `must be ${value}`)) {\n  return validate(name, subcode, message, Check.equal, value, expected);\n};\n\n\nmodule.exports.Parameter = Parameter;\n","var clone = (function() {\n'use strict';\n\nfunction _instanceof(obj, type) {\n  return type != null && obj instanceof type;\n}\n\nvar nativeMap;\ntry {\n  nativeMap = Map;\n} catch(_) {\n  // maybe a reference error because no `Map`. Give it a dummy value that no\n  // value will ever be an instanceof.\n  nativeMap = function() {};\n}\n\nvar nativeSet;\ntry {\n  nativeSet = Set;\n} catch(_) {\n  nativeSet = function() {};\n}\n\nvar nativePromise;\ntry {\n  nativePromise = Promise;\n} catch(_) {\n  nativePromise = function() {};\n}\n\n/**\n * Clones (copies) an Object using deep copying.\n *\n * This function supports circular references by default, but if you are certain\n * there are no circular references in your object, you can save some CPU time\n * by calling clone(obj, false).\n *\n * Caution: if `circular` is false and `parent` contains circular references,\n * your program may enter an infinite loop and crash.\n *\n * @param `parent` - the object to be cloned\n * @param `circular` - set to true if the object to be cloned may contain\n *    circular references. (optional - true by default)\n * @param `depth` - set to a number if the object is only to be cloned to\n *    a particular depth. (optional - defaults to Infinity)\n * @param `prototype` - sets the prototype to be used when cloning an object.\n *    (optional - defaults to parent prototype).\n * @param `includeNonEnumerable` - set to true if the non-enumerable properties\n *    should be cloned as well. Non-enumerable properties on the prototype\n *    chain will be ignored. (optional - false by default)\n*/\nfunction clone(parent, circular, depth, prototype, includeNonEnumerable) {\n  if (typeof circular === 'object') {\n    depth = circular.depth;\n    prototype = circular.prototype;\n    includeNonEnumerable = circular.includeNonEnumerable;\n    circular = circular.circular;\n  }\n  // maintain two arrays for circular references, where corresponding parents\n  // and children have the same index\n  var allParents = [];\n  var allChildren = [];\n\n  var useBuffer = typeof Buffer != 'undefined';\n\n  if (typeof circular == 'undefined')\n    circular = true;\n\n  if (typeof depth == 'undefined')\n    depth = Infinity;\n\n  // recurse this function so we don't reset allParents and allChildren\n  function _clone(parent, depth) {\n    // cloning null always returns null\n    if (parent === null)\n      return null;\n\n    if (depth === 0)\n      return parent;\n\n    var child;\n    var proto;\n    if (typeof parent != 'object') {\n      return parent;\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      child = new nativeMap();\n    } else if (_instanceof(parent, nativeSet)) {\n      child = new nativeSet();\n    } else if (_instanceof(parent, nativePromise)) {\n      child = new nativePromise(function (resolve, reject) {\n        parent.then(function(value) {\n          resolve(_clone(value, depth - 1));\n        }, function(err) {\n          reject(_clone(err, depth - 1));\n        });\n      });\n    } else if (clone.__isArray(parent)) {\n      child = [];\n    } else if (clone.__isRegExp(parent)) {\n      child = new RegExp(parent.source, __getRegExpFlags(parent));\n      if (parent.lastIndex) child.lastIndex = parent.lastIndex;\n    } else if (clone.__isDate(parent)) {\n      child = new Date(parent.getTime());\n    } else if (useBuffer && Buffer.isBuffer(parent)) {\n      if (Buffer.allocUnsafe) {\n        // Node.js >= 4.5.0\n        child = Buffer.allocUnsafe(parent.length);\n      } else {\n        // Older Node.js versions\n        child = new Buffer(parent.length);\n      }\n      parent.copy(child);\n      return child;\n    } else if (_instanceof(parent, Error)) {\n      child = Object.create(parent);\n    } else {\n      if (typeof prototype == 'undefined') {\n        proto = Object.getPrototypeOf(parent);\n        child = Object.create(proto);\n      }\n      else {\n        child = Object.create(prototype);\n        proto = prototype;\n      }\n    }\n\n    if (circular) {\n      var index = allParents.indexOf(parent);\n\n      if (index != -1) {\n        return allChildren[index];\n      }\n      allParents.push(parent);\n      allChildren.push(child);\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      parent.forEach(function(value, key) {\n        var keyChild = _clone(key, depth - 1);\n        var valueChild = _clone(value, depth - 1);\n        child.set(keyChild, valueChild);\n      });\n    }\n    if (_instanceof(parent, nativeSet)) {\n      parent.forEach(function(value) {\n        var entryChild = _clone(value, depth - 1);\n        child.add(entryChild);\n      });\n    }\n\n    for (var i in parent) {\n      var attrs;\n      if (proto) {\n        attrs = Object.getOwnPropertyDescriptor(proto, i);\n      }\n\n      if (attrs && attrs.set == null) {\n        continue;\n      }\n      child[i] = _clone(parent[i], depth - 1);\n    }\n\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(parent);\n      for (var i = 0; i < symbols.length; i++) {\n        // Don't need to worry about cloning a symbol because it is a primitive,\n        // like a number or string.\n        var symbol = symbols[i];\n        var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);\n        if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {\n          continue;\n        }\n        child[symbol] = _clone(parent[symbol], depth - 1);\n        if (!descriptor.enumerable) {\n          Object.defineProperty(child, symbol, {\n            enumerable: false\n          });\n        }\n      }\n    }\n\n    if (includeNonEnumerable) {\n      var allPropertyNames = Object.getOwnPropertyNames(parent);\n      for (var i = 0; i < allPropertyNames.length; i++) {\n        var propertyName = allPropertyNames[i];\n        var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);\n        if (descriptor && descriptor.enumerable) {\n          continue;\n        }\n        child[propertyName] = _clone(parent[propertyName], depth - 1);\n        Object.defineProperty(child, propertyName, {\n          enumerable: false\n        });\n      }\n    }\n\n    return child;\n  }\n\n  return _clone(parent, depth);\n}\n\n/**\n * Simple flat clone using prototype, accepts only objects, usefull for property\n * override on FLAT configuration object (no nested props).\n *\n * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n * works.\n */\nclone.clonePrototype = function clonePrototype(parent) {\n  if (parent === null)\n    return null;\n\n  var c = function () {};\n  c.prototype = parent;\n  return new c();\n};\n\n// private utility functions\n\nfunction __objToStr(o) {\n  return Object.prototype.toString.call(o);\n}\nclone.__objToStr = __objToStr;\n\nfunction __isDate(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object Date]';\n}\nclone.__isDate = __isDate;\n\nfunction __isArray(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object Array]';\n}\nclone.__isArray = __isArray;\n\nfunction __isRegExp(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object RegExp]';\n}\nclone.__isRegExp = __isRegExp;\n\nfunction __getRegExpFlags(re) {\n  var flags = '';\n  if (re.global) flags += 'g';\n  if (re.ignoreCase) flags += 'i';\n  if (re.multiline) flags += 'm';\n  return flags;\n}\nclone.__getRegExpFlags = __getRegExpFlags;\n\nreturn clone;\n})();\n\nif (typeof module === 'object' && module.exports) {\n  module.exports = clone;\n}\n","'use strict';\n\nconst WebSocket = require('./lib/websocket');\n\nWebSocket.createWebSocketStream = require('./lib/stream');\nWebSocket.Server = require('./lib/websocket-server');\nWebSocket.Receiver = require('./lib/receiver');\nWebSocket.Sender = require('./lib/sender');\n\nWebSocket.WebSocket = WebSocket;\nWebSocket.WebSocketServer = WebSocket.Server;\n\nmodule.exports = WebSocket;\n","'use strict';\n\nconst { EMPTY_BUFFER } = require('./constants');\n\n/**\n * Merges an array of buffers into a new buffer.\n *\n * @param {Buffer[]} list The array of buffers to concat\n * @param {Number} totalLength The total length of buffers in the list\n * @return {Buffer} The resulting buffer\n * @public\n */\nfunction concat(list, totalLength) {\n  if (list.length === 0) return EMPTY_BUFFER;\n  if (list.length === 1) return list[0];\n\n  const target = Buffer.allocUnsafe(totalLength);\n  let offset = 0;\n\n  for (let i = 0; i < list.length; i++) {\n    const buf = list[i];\n    target.set(buf, offset);\n    offset += buf.length;\n  }\n\n  if (offset < totalLength) return target.slice(0, offset);\n\n  return target;\n}\n\n/**\n * Masks a buffer using the given mask.\n *\n * @param {Buffer} source The buffer to mask\n * @param {Buffer} mask The mask to use\n * @param {Buffer} output The buffer where to store the result\n * @param {Number} offset The offset at which to start writing\n * @param {Number} length The number of bytes to mask.\n * @public\n */\nfunction _mask(source, mask, output, offset, length) {\n  for (let i = 0; i < length; i++) {\n    output[offset + i] = source[i] ^ mask[i & 3];\n  }\n}\n\n/**\n * Unmasks a buffer using the given mask.\n *\n * @param {Buffer} buffer The buffer to unmask\n * @param {Buffer} mask The mask to use\n * @public\n */\nfunction _unmask(buffer, mask) {\n  for (let i = 0; i < buffer.length; i++) {\n    buffer[i] ^= mask[i & 3];\n  }\n}\n\n/**\n * Converts a buffer to an `ArrayBuffer`.\n *\n * @param {Buffer} buf The buffer to convert\n * @return {ArrayBuffer} Converted buffer\n * @public\n */\nfunction toArrayBuffer(buf) {\n  if (buf.byteLength === buf.buffer.byteLength) {\n    return buf.buffer;\n  }\n\n  return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n}\n\n/**\n * Converts `data` to a `Buffer`.\n *\n * @param {*} data The data to convert\n * @return {Buffer} The buffer\n * @throws {TypeError}\n * @public\n */\nfunction toBuffer(data) {\n  toBuffer.readOnly = true;\n\n  if (Buffer.isBuffer(data)) return data;\n\n  let buf;\n\n  if (data instanceof ArrayBuffer) {\n    buf = Buffer.from(data);\n  } else if (ArrayBuffer.isView(data)) {\n    buf = Buffer.from(data.buffer, data.byteOffset, data.byteLength);\n  } else {\n    buf = Buffer.from(data);\n    toBuffer.readOnly = false;\n  }\n\n  return buf;\n}\n\ntry {\n  const bufferUtil = require('bufferutil');\n\n  module.exports = {\n    concat,\n    mask(source, mask, output, offset, length) {\n      if (length < 48) _mask(source, mask, output, offset, length);\n      else bufferUtil.mask(source, mask, output, offset, length);\n    },\n    toArrayBuffer,\n    toBuffer,\n    unmask(buffer, mask) {\n      if (buffer.length < 32) _unmask(buffer, mask);\n      else bufferUtil.unmask(buffer, mask);\n    }\n  };\n} catch (e) /* istanbul ignore next */ {\n  module.exports = {\n    concat,\n    mask: _mask,\n    toArrayBuffer,\n    toBuffer,\n    unmask: _unmask\n  };\n}\n","'use strict';\n\nmodule.exports = {\n  BINARY_TYPES: ['nodebuffer', 'arraybuffer', 'fragments'],\n  EMPTY_BUFFER: Buffer.alloc(0),\n  GUID: '258EAFA5-E914-47DA-95CA-C5AB0DC85B11',\n  kForOnEventAttribute: Symbol('kIsForOnEventAttribute'),\n  kListener: Symbol('kListener'),\n  kStatusCode: Symbol('status-code'),\n  kWebSocket: Symbol('websocket'),\n  NOOP: () => {}\n};\n","'use strict';\n\nconst { kForOnEventAttribute, kListener } = require('./constants');\n\nconst kCode = Symbol('kCode');\nconst kData = Symbol('kData');\nconst kError = Symbol('kError');\nconst kMessage = Symbol('kMessage');\nconst kReason = Symbol('kReason');\nconst kTarget = Symbol('kTarget');\nconst kType = Symbol('kType');\nconst kWasClean = Symbol('kWasClean');\n\n/**\n * Class representing an event.\n */\nclass Event {\n  /**\n   * Create a new `Event`.\n   *\n   * @param {String} type The name of the event\n   * @throws {TypeError} If the `type` argument is not specified\n   */\n  constructor(type) {\n    this[kTarget] = null;\n    this[kType] = type;\n  }\n\n  /**\n   * @type {*}\n   */\n  get target() {\n    return this[kTarget];\n  }\n\n  /**\n   * @type {String}\n   */\n  get type() {\n    return this[kType];\n  }\n}\n\nObject.defineProperty(Event.prototype, 'target', { enumerable: true });\nObject.defineProperty(Event.prototype, 'type', { enumerable: true });\n\n/**\n * Class representing a close event.\n *\n * @extends Event\n */\nclass CloseEvent extends Event {\n  /**\n   * Create a new `CloseEvent`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} [options] A dictionary object that allows for setting\n   *     attributes via object members of the same name\n   * @param {Number} [options.code=0] The status code explaining why the\n   *     connection was closed\n   * @param {String} [options.reason=''] A human-readable string explaining why\n   *     the connection was closed\n   * @param {Boolean} [options.wasClean=false] Indicates whether or not the\n   *     connection was cleanly closed\n   */\n  constructor(type, options = {}) {\n    super(type);\n\n    this[kCode] = options.code === undefined ? 0 : options.code;\n    this[kReason] = options.reason === undefined ? '' : options.reason;\n    this[kWasClean] = options.wasClean === undefined ? false : options.wasClean;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get code() {\n    return this[kCode];\n  }\n\n  /**\n   * @type {String}\n   */\n  get reason() {\n    return this[kReason];\n  }\n\n  /**\n   * @type {Boolean}\n   */\n  get wasClean() {\n    return this[kWasClean];\n  }\n}\n\nObject.defineProperty(CloseEvent.prototype, 'code', { enumerable: true });\nObject.defineProperty(CloseEvent.prototype, 'reason', { enumerable: true });\nObject.defineProperty(CloseEvent.prototype, 'wasClean', { enumerable: true });\n\n/**\n * Class representing an error event.\n *\n * @extends Event\n */\nclass ErrorEvent extends Event {\n  /**\n   * Create a new `ErrorEvent`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} [options] A dictionary object that allows for setting\n   *     attributes via object members of the same name\n   * @param {*} [options.error=null] The error that generated this event\n   * @param {String} [options.message=''] The error message\n   */\n  constructor(type, options = {}) {\n    super(type);\n\n    this[kError] = options.error === undefined ? null : options.error;\n    this[kMessage] = options.message === undefined ? '' : options.message;\n  }\n\n  /**\n   * @type {*}\n   */\n  get error() {\n    return this[kError];\n  }\n\n  /**\n   * @type {String}\n   */\n  get message() {\n    return this[kMessage];\n  }\n}\n\nObject.defineProperty(ErrorEvent.prototype, 'error', { enumerable: true });\nObject.defineProperty(ErrorEvent.prototype, 'message', { enumerable: true });\n\n/**\n * Class representing a message event.\n *\n * @extends Event\n */\nclass MessageEvent extends Event {\n  /**\n   * Create a new `MessageEvent`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} [options] A dictionary object that allows for setting\n   *     attributes via object members of the same name\n   * @param {*} [options.data=null] The message content\n   */\n  constructor(type, options = {}) {\n    super(type);\n\n    this[kData] = options.data === undefined ? null : options.data;\n  }\n\n  /**\n   * @type {*}\n   */\n  get data() {\n    return this[kData];\n  }\n}\n\nObject.defineProperty(MessageEvent.prototype, 'data', { enumerable: true });\n\n/**\n * This provides methods for emulating the `EventTarget` interface. It's not\n * meant to be used directly.\n *\n * @mixin\n */\nconst EventTarget = {\n  /**\n   * Register an event listener.\n   *\n   * @param {String} type A string representing the event type to listen for\n   * @param {Function} listener The listener to add\n   * @param {Object} [options] An options object specifies characteristics about\n   *     the event listener\n   * @param {Boolean} [options.once=false] A `Boolean` indicating that the\n   *     listener should be invoked at most once after being added. If `true`,\n   *     the listener would be automatically removed when invoked.\n   * @public\n   */\n  addEventListener(type, listener, options = {}) {\n    let wrapper;\n\n    if (type === 'message') {\n      wrapper = function onMessage(data, isBinary) {\n        const event = new MessageEvent('message', {\n          data: isBinary ? data : data.toString()\n        });\n\n        event[kTarget] = this;\n        listener.call(this, event);\n      };\n    } else if (type === 'close') {\n      wrapper = function onClose(code, message) {\n        const event = new CloseEvent('close', {\n          code,\n          reason: message.toString(),\n          wasClean: this._closeFrameReceived && this._closeFrameSent\n        });\n\n        event[kTarget] = this;\n        listener.call(this, event);\n      };\n    } else if (type === 'error') {\n      wrapper = function onError(error) {\n        const event = new ErrorEvent('error', {\n          error,\n          message: error.message\n        });\n\n        event[kTarget] = this;\n        listener.call(this, event);\n      };\n    } else if (type === 'open') {\n      wrapper = function onOpen() {\n        const event = new Event('open');\n\n        event[kTarget] = this;\n        listener.call(this, event);\n      };\n    } else {\n      return;\n    }\n\n    wrapper[kForOnEventAttribute] = !!options[kForOnEventAttribute];\n    wrapper[kListener] = listener;\n\n    if (options.once) {\n      this.once(type, wrapper);\n    } else {\n      this.on(type, wrapper);\n    }\n  },\n\n  /**\n   * Remove an event listener.\n   *\n   * @param {String} type A string representing the event type to remove\n   * @param {Function} handler The listener to remove\n   * @public\n   */\n  removeEventListener(type, handler) {\n    for (const listener of this.listeners(type)) {\n      if (listener[kListener] === handler && !listener[kForOnEventAttribute]) {\n        this.removeListener(type, listener);\n        break;\n      }\n    }\n  }\n};\n\nmodule.exports = {\n  CloseEvent,\n  ErrorEvent,\n  Event,\n  EventTarget,\n  MessageEvent\n};\n","'use strict';\n\nconst { tokenChars } = require('./validation');\n\n/**\n * Adds an offer to the map of extension offers or a parameter to the map of\n * parameters.\n *\n * @param {Object} dest The map of extension offers or parameters\n * @param {String} name The extension or parameter name\n * @param {(Object|Boolean|String)} elem The extension parameters or the\n *     parameter value\n * @private\n */\nfunction push(dest, name, elem) {\n  if (dest[name] === undefined) dest[name] = [elem];\n  else dest[name].push(elem);\n}\n\n/**\n * Parses the `Sec-WebSocket-Extensions` header into an object.\n *\n * @param {String} header The field value of the header\n * @return {Object} The parsed object\n * @public\n */\nfunction parse(header) {\n  const offers = Object.create(null);\n  let params = Object.create(null);\n  let mustUnescape = false;\n  let isEscaping = false;\n  let inQuotes = false;\n  let extensionName;\n  let paramName;\n  let start = -1;\n  let code = -1;\n  let end = -1;\n  let i = 0;\n\n  for (; i < header.length; i++) {\n    code = header.charCodeAt(i);\n\n    if (extensionName === undefined) {\n      if (end === -1 && tokenChars[code] === 1) {\n        if (start === -1) start = i;\n      } else if (\n        i !== 0 &&\n        (code === 0x20 /* ' ' */ || code === 0x09) /* '\\t' */\n      ) {\n        if (end === -1 && start !== -1) end = i;\n      } else if (code === 0x3b /* ';' */ || code === 0x2c /* ',' */) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n        const name = header.slice(start, end);\n        if (code === 0x2c) {\n          push(offers, name, params);\n          params = Object.create(null);\n        } else {\n          extensionName = name;\n        }\n\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    } else if (paramName === undefined) {\n      if (end === -1 && tokenChars[code] === 1) {\n        if (start === -1) start = i;\n      } else if (code === 0x20 || code === 0x09) {\n        if (end === -1 && start !== -1) end = i;\n      } else if (code === 0x3b || code === 0x2c) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n        push(params, header.slice(start, end), true);\n        if (code === 0x2c) {\n          push(offers, extensionName, params);\n          params = Object.create(null);\n          extensionName = undefined;\n        }\n\n        start = end = -1;\n      } else if (code === 0x3d /* '=' */ && start !== -1 && end === -1) {\n        paramName = header.slice(start, i);\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    } else {\n      //\n      // The value of a quoted-string after unescaping must conform to the\n      // token ABNF, so only token characters are valid.\n      // Ref: https://tools.ietf.org/html/rfc6455#section-9.1\n      //\n      if (isEscaping) {\n        if (tokenChars[code] !== 1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n        if (start === -1) start = i;\n        else if (!mustUnescape) mustUnescape = true;\n        isEscaping = false;\n      } else if (inQuotes) {\n        if (tokenChars[code] === 1) {\n          if (start === -1) start = i;\n        } else if (code === 0x22 /* '\"' */ && start !== -1) {\n          inQuotes = false;\n          end = i;\n        } else if (code === 0x5c /* '\\' */) {\n          isEscaping = true;\n        } else {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n      } else if (code === 0x22 && header.charCodeAt(i - 1) === 0x3d) {\n        inQuotes = true;\n      } else if (end === -1 && tokenChars[code] === 1) {\n        if (start === -1) start = i;\n      } else if (start !== -1 && (code === 0x20 || code === 0x09)) {\n        if (end === -1) end = i;\n      } else if (code === 0x3b || code === 0x2c) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n        let value = header.slice(start, end);\n        if (mustUnescape) {\n          value = value.replace(/\\\\/g, '');\n          mustUnescape = false;\n        }\n        push(params, paramName, value);\n        if (code === 0x2c) {\n          push(offers, extensionName, params);\n          params = Object.create(null);\n          extensionName = undefined;\n        }\n\n        paramName = undefined;\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    }\n  }\n\n  if (start === -1 || inQuotes || code === 0x20 || code === 0x09) {\n    throw new SyntaxError('Unexpected end of input');\n  }\n\n  if (end === -1) end = i;\n  const token = header.slice(start, end);\n  if (extensionName === undefined) {\n    push(offers, token, params);\n  } else {\n    if (paramName === undefined) {\n      push(params, token, true);\n    } else if (mustUnescape) {\n      push(params, paramName, token.replace(/\\\\/g, ''));\n    } else {\n      push(params, paramName, token);\n    }\n    push(offers, extensionName, params);\n  }\n\n  return offers;\n}\n\n/**\n * Builds the `Sec-WebSocket-Extensions` header field value.\n *\n * @param {Object} extensions The map of extensions and parameters to format\n * @return {String} A string representing the given object\n * @public\n */\nfunction format(extensions) {\n  return Object.keys(extensions)\n    .map((extension) => {\n      let configurations = extensions[extension];\n      if (!Array.isArray(configurations)) configurations = [configurations];\n      return configurations\n        .map((params) => {\n          return [extension]\n            .concat(\n              Object.keys(params).map((k) => {\n                let values = params[k];\n                if (!Array.isArray(values)) values = [values];\n                return values\n                  .map((v) => (v === true ? k : `${k}=${v}`))\n                  .join('; ');\n              })\n            )\n            .join('; ');\n        })\n        .join(', ');\n    })\n    .join(', ');\n}\n\nmodule.exports = { format, parse };\n","'use strict';\n\nconst kDone = Symbol('kDone');\nconst kRun = Symbol('kRun');\n\n/**\n * A very simple job queue with adjustable concurrency. Adapted from\n * https://github.com/STRML/async-limiter\n */\nclass Limiter {\n  /**\n   * Creates a new `Limiter`.\n   *\n   * @param {Number} [concurrency=Infinity] The maximum number of jobs allowed\n   *     to run concurrently\n   */\n  constructor(concurrency) {\n    this[kDone] = () => {\n      this.pending--;\n      this[kRun]();\n    };\n    this.concurrency = concurrency || Infinity;\n    this.jobs = [];\n    this.pending = 0;\n  }\n\n  /**\n   * Adds a job to the queue.\n   *\n   * @param {Function} job The job to run\n   * @public\n   */\n  add(job) {\n    this.jobs.push(job);\n    this[kRun]();\n  }\n\n  /**\n   * Removes a job from the queue and runs it if possible.\n   *\n   * @private\n   */\n  [kRun]() {\n    if (this.pending === this.concurrency) return;\n\n    if (this.jobs.length) {\n      const job = this.jobs.shift();\n\n      this.pending++;\n      job(this[kDone]);\n    }\n  }\n}\n\nmodule.exports = Limiter;\n","'use strict';\n\nconst zlib = require('zlib');\n\nconst bufferUtil = require('./buffer-util');\nconst Limiter = require('./limiter');\nconst { kStatusCode } = require('./constants');\n\nconst TRAILER = Buffer.from([0x00, 0x00, 0xff, 0xff]);\nconst kPerMessageDeflate = Symbol('permessage-deflate');\nconst kTotalLength = Symbol('total-length');\nconst kCallback = Symbol('callback');\nconst kBuffers = Symbol('buffers');\nconst kError = Symbol('error');\n\n//\n// We limit zlib concurrency, which prevents severe memory fragmentation\n// as documented in https://github.com/nodejs/node/issues/8871#issuecomment-250915913\n// and https://github.com/websockets/ws/issues/1202\n//\n// Intentionally global; it's the global thread pool that's an issue.\n//\nlet zlibLimiter;\n\n/**\n * permessage-deflate implementation.\n */\nclass PerMessageDeflate {\n  /**\n   * Creates a PerMessageDeflate instance.\n   *\n   * @param {Object} [options] Configuration options\n   * @param {(Boolean|Number)} [options.clientMaxWindowBits] Advertise support\n   *     for, or request, a custom client window size\n   * @param {Boolean} [options.clientNoContextTakeover=false] Advertise/\n   *     acknowledge disabling of client context takeover\n   * @param {Number} [options.concurrencyLimit=10] The number of concurrent\n   *     calls to zlib\n   * @param {(Boolean|Number)} [options.serverMaxWindowBits] Request/confirm the\n   *     use of a custom server window size\n   * @param {Boolean} [options.serverNoContextTakeover=false] Request/accept\n   *     disabling of server context takeover\n   * @param {Number} [options.threshold=1024] Size (in bytes) below which\n   *     messages should not be compressed if context takeover is disabled\n   * @param {Object} [options.zlibDeflateOptions] Options to pass to zlib on\n   *     deflate\n   * @param {Object} [options.zlibInflateOptions] Options to pass to zlib on\n   *     inflate\n   * @param {Boolean} [isServer=false] Create the instance in either server or\n   *     client mode\n   * @param {Number} [maxPayload=0] The maximum allowed message length\n   */\n  constructor(options, isServer, maxPayload) {\n    this._maxPayload = maxPayload | 0;\n    this._options = options || {};\n    this._threshold =\n      this._options.threshold !== undefined ? this._options.threshold : 1024;\n    this._isServer = !!isServer;\n    this._deflate = null;\n    this._inflate = null;\n\n    this.params = null;\n\n    if (!zlibLimiter) {\n      const concurrency =\n        this._options.concurrencyLimit !== undefined\n          ? this._options.concurrencyLimit\n          : 10;\n      zlibLimiter = new Limiter(concurrency);\n    }\n  }\n\n  /**\n   * @type {String}\n   */\n  static get extensionName() {\n    return 'permessage-deflate';\n  }\n\n  /**\n   * Create an extension negotiation offer.\n   *\n   * @return {Object} Extension parameters\n   * @public\n   */\n  offer() {\n    const params = {};\n\n    if (this._options.serverNoContextTakeover) {\n      params.server_no_context_takeover = true;\n    }\n    if (this._options.clientNoContextTakeover) {\n      params.client_no_context_takeover = true;\n    }\n    if (this._options.serverMaxWindowBits) {\n      params.server_max_window_bits = this._options.serverMaxWindowBits;\n    }\n    if (this._options.clientMaxWindowBits) {\n      params.client_max_window_bits = this._options.clientMaxWindowBits;\n    } else if (this._options.clientMaxWindowBits == null) {\n      params.client_max_window_bits = true;\n    }\n\n    return params;\n  }\n\n  /**\n   * Accept an extension negotiation offer/response.\n   *\n   * @param {Array} configurations The extension negotiation offers/reponse\n   * @return {Object} Accepted configuration\n   * @public\n   */\n  accept(configurations) {\n    configurations = this.normalizeParams(configurations);\n\n    this.params = this._isServer\n      ? this.acceptAsServer(configurations)\n      : this.acceptAsClient(configurations);\n\n    return this.params;\n  }\n\n  /**\n   * Releases all resources used by the extension.\n   *\n   * @public\n   */\n  cleanup() {\n    if (this._inflate) {\n      this._inflate.close();\n      this._inflate = null;\n    }\n\n    if (this._deflate) {\n      const callback = this._deflate[kCallback];\n\n      this._deflate.close();\n      this._deflate = null;\n\n      if (callback) {\n        callback(\n          new Error(\n            'The deflate stream was closed while data was being processed'\n          )\n        );\n      }\n    }\n  }\n\n  /**\n   *  Accept an extension negotiation offer.\n   *\n   * @param {Array} offers The extension negotiation offers\n   * @return {Object} Accepted configuration\n   * @private\n   */\n  acceptAsServer(offers) {\n    const opts = this._options;\n    const accepted = offers.find((params) => {\n      if (\n        (opts.serverNoContextTakeover === false &&\n          params.server_no_context_takeover) ||\n        (params.server_max_window_bits &&\n          (opts.serverMaxWindowBits === false ||\n            (typeof opts.serverMaxWindowBits === 'number' &&\n              opts.serverMaxWindowBits > params.server_max_window_bits))) ||\n        (typeof opts.clientMaxWindowBits === 'number' &&\n          !params.client_max_window_bits)\n      ) {\n        return false;\n      }\n\n      return true;\n    });\n\n    if (!accepted) {\n      throw new Error('None of the extension offers can be accepted');\n    }\n\n    if (opts.serverNoContextTakeover) {\n      accepted.server_no_context_takeover = true;\n    }\n    if (opts.clientNoContextTakeover) {\n      accepted.client_no_context_takeover = true;\n    }\n    if (typeof opts.serverMaxWindowBits === 'number') {\n      accepted.server_max_window_bits = opts.serverMaxWindowBits;\n    }\n    if (typeof opts.clientMaxWindowBits === 'number') {\n      accepted.client_max_window_bits = opts.clientMaxWindowBits;\n    } else if (\n      accepted.client_max_window_bits === true ||\n      opts.clientMaxWindowBits === false\n    ) {\n      delete accepted.client_max_window_bits;\n    }\n\n    return accepted;\n  }\n\n  /**\n   * Accept the extension negotiation response.\n   *\n   * @param {Array} response The extension negotiation response\n   * @return {Object} Accepted configuration\n   * @private\n   */\n  acceptAsClient(response) {\n    const params = response[0];\n\n    if (\n      this._options.clientNoContextTakeover === false &&\n      params.client_no_context_takeover\n    ) {\n      throw new Error('Unexpected parameter \"client_no_context_takeover\"');\n    }\n\n    if (!params.client_max_window_bits) {\n      if (typeof this._options.clientMaxWindowBits === 'number') {\n        params.client_max_window_bits = this._options.clientMaxWindowBits;\n      }\n    } else if (\n      this._options.clientMaxWindowBits === false ||\n      (typeof this._options.clientMaxWindowBits === 'number' &&\n        params.client_max_window_bits > this._options.clientMaxWindowBits)\n    ) {\n      throw new Error(\n        'Unexpected or invalid parameter \"client_max_window_bits\"'\n      );\n    }\n\n    return params;\n  }\n\n  /**\n   * Normalize parameters.\n   *\n   * @param {Array} configurations The extension negotiation offers/reponse\n   * @return {Array} The offers/response with normalized parameters\n   * @private\n   */\n  normalizeParams(configurations) {\n    configurations.forEach((params) => {\n      Object.keys(params).forEach((key) => {\n        let value = params[key];\n\n        if (value.length > 1) {\n          throw new Error(`Parameter \"${key}\" must have only a single value`);\n        }\n\n        value = value[0];\n\n        if (key === 'client_max_window_bits') {\n          if (value !== true) {\n            const num = +value;\n            if (!Number.isInteger(num) || num < 8 || num > 15) {\n              throw new TypeError(\n                `Invalid value for parameter \"${key}\": ${value}`\n              );\n            }\n            value = num;\n          } else if (!this._isServer) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n        } else if (key === 'server_max_window_bits') {\n          const num = +value;\n          if (!Number.isInteger(num) || num < 8 || num > 15) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n          value = num;\n        } else if (\n          key === 'client_no_context_takeover' ||\n          key === 'server_no_context_takeover'\n        ) {\n          if (value !== true) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n        } else {\n          throw new Error(`Unknown parameter \"${key}\"`);\n        }\n\n        params[key] = value;\n      });\n    });\n\n    return configurations;\n  }\n\n  /**\n   * Decompress data. Concurrency limited.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @public\n   */\n  decompress(data, fin, callback) {\n    zlibLimiter.add((done) => {\n      this._decompress(data, fin, (err, result) => {\n        done();\n        callback(err, result);\n      });\n    });\n  }\n\n  /**\n   * Compress data. Concurrency limited.\n   *\n   * @param {(Buffer|String)} data Data to compress\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @public\n   */\n  compress(data, fin, callback) {\n    zlibLimiter.add((done) => {\n      this._compress(data, fin, (err, result) => {\n        done();\n        callback(err, result);\n      });\n    });\n  }\n\n  /**\n   * Decompress data.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @private\n   */\n  _decompress(data, fin, callback) {\n    const endpoint = this._isServer ? 'client' : 'server';\n\n    if (!this._inflate) {\n      const key = `${endpoint}_max_window_bits`;\n      const windowBits =\n        typeof this.params[key] !== 'number'\n          ? zlib.Z_DEFAULT_WINDOWBITS\n          : this.params[key];\n\n      this._inflate = zlib.createInflateRaw({\n        ...this._options.zlibInflateOptions,\n        windowBits\n      });\n      this._inflate[kPerMessageDeflate] = this;\n      this._inflate[kTotalLength] = 0;\n      this._inflate[kBuffers] = [];\n      this._inflate.on('error', inflateOnError);\n      this._inflate.on('data', inflateOnData);\n    }\n\n    this._inflate[kCallback] = callback;\n\n    this._inflate.write(data);\n    if (fin) this._inflate.write(TRAILER);\n\n    this._inflate.flush(() => {\n      const err = this._inflate[kError];\n\n      if (err) {\n        this._inflate.close();\n        this._inflate = null;\n        callback(err);\n        return;\n      }\n\n      const data = bufferUtil.concat(\n        this._inflate[kBuffers],\n        this._inflate[kTotalLength]\n      );\n\n      if (this._inflate._readableState.endEmitted) {\n        this._inflate.close();\n        this._inflate = null;\n      } else {\n        this._inflate[kTotalLength] = 0;\n        this._inflate[kBuffers] = [];\n\n        if (fin && this.params[`${endpoint}_no_context_takeover`]) {\n          this._inflate.reset();\n        }\n      }\n\n      callback(null, data);\n    });\n  }\n\n  /**\n   * Compress data.\n   *\n   * @param {(Buffer|String)} data Data to compress\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @private\n   */\n  _compress(data, fin, callback) {\n    const endpoint = this._isServer ? 'server' : 'client';\n\n    if (!this._deflate) {\n      const key = `${endpoint}_max_window_bits`;\n      const windowBits =\n        typeof this.params[key] !== 'number'\n          ? zlib.Z_DEFAULT_WINDOWBITS\n          : this.params[key];\n\n      this._deflate = zlib.createDeflateRaw({\n        ...this._options.zlibDeflateOptions,\n        windowBits\n      });\n\n      this._deflate[kTotalLength] = 0;\n      this._deflate[kBuffers] = [];\n\n      this._deflate.on('data', deflateOnData);\n    }\n\n    this._deflate[kCallback] = callback;\n\n    this._deflate.write(data);\n    this._deflate.flush(zlib.Z_SYNC_FLUSH, () => {\n      if (!this._deflate) {\n        //\n        // The deflate stream was closed while data was being processed.\n        //\n        return;\n      }\n\n      let data = bufferUtil.concat(\n        this._deflate[kBuffers],\n        this._deflate[kTotalLength]\n      );\n\n      if (fin) data = data.slice(0, data.length - 4);\n\n      //\n      // Ensure that the callback will not be called again in\n      // `PerMessageDeflate#cleanup()`.\n      //\n      this._deflate[kCallback] = null;\n\n      this._deflate[kTotalLength] = 0;\n      this._deflate[kBuffers] = [];\n\n      if (fin && this.params[`${endpoint}_no_context_takeover`]) {\n        this._deflate.reset();\n      }\n\n      callback(null, data);\n    });\n  }\n}\n\nmodule.exports = PerMessageDeflate;\n\n/**\n * The listener of the `zlib.DeflateRaw` stream `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction deflateOnData(chunk) {\n  this[kBuffers].push(chunk);\n  this[kTotalLength] += chunk.length;\n}\n\n/**\n * The listener of the `zlib.InflateRaw` stream `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction inflateOnData(chunk) {\n  this[kTotalLength] += chunk.length;\n\n  if (\n    this[kPerMessageDeflate]._maxPayload < 1 ||\n    this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload\n  ) {\n    this[kBuffers].push(chunk);\n    return;\n  }\n\n  this[kError] = new RangeError('Max payload size exceeded');\n  this[kError].code = 'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH';\n  this[kError][kStatusCode] = 1009;\n  this.removeListener('data', inflateOnData);\n  this.reset();\n}\n\n/**\n * The listener of the `zlib.InflateRaw` stream `'error'` event.\n *\n * @param {Error} err The emitted error\n * @private\n */\nfunction inflateOnError(err) {\n  //\n  // There is no need to call `Zlib#close()` as the handle is automatically\n  // closed when an error is emitted.\n  //\n  this[kPerMessageDeflate]._inflate = null;\n  err[kStatusCode] = 1007;\n  this[kCallback](err);\n}\n","'use strict';\n\nconst { Writable } = require('stream');\n\nconst PerMessageDeflate = require('./permessage-deflate');\nconst {\n  BINARY_TYPES,\n  EMPTY_BUFFER,\n  kStatusCode,\n  kWebSocket\n} = require('./constants');\nconst { concat, toArrayBuffer, unmask } = require('./buffer-util');\nconst { isValidStatusCode, isValidUTF8 } = require('./validation');\n\nconst GET_INFO = 0;\nconst GET_PAYLOAD_LENGTH_16 = 1;\nconst GET_PAYLOAD_LENGTH_64 = 2;\nconst GET_MASK = 3;\nconst GET_DATA = 4;\nconst INFLATING = 5;\n\n/**\n * HyBi Receiver implementation.\n *\n * @extends Writable\n */\nclass Receiver extends Writable {\n  /**\n   * Creates a Receiver instance.\n   *\n   * @param {Object} [options] Options object\n   * @param {String} [options.binaryType=nodebuffer] The type for binary data\n   * @param {Object} [options.extensions] An object containing the negotiated\n   *     extensions\n   * @param {Boolean} [options.isServer=false] Specifies whether to operate in\n   *     client or server mode\n   * @param {Number} [options.maxPayload=0] The maximum allowed message length\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n   *     not to skip UTF-8 validation for text and close messages\n   */\n  constructor(options = {}) {\n    super();\n\n    this._binaryType = options.binaryType || BINARY_TYPES[0];\n    this._extensions = options.extensions || {};\n    this._isServer = !!options.isServer;\n    this._maxPayload = options.maxPayload | 0;\n    this._skipUTF8Validation = !!options.skipUTF8Validation;\n    this[kWebSocket] = undefined;\n\n    this._bufferedBytes = 0;\n    this._buffers = [];\n\n    this._compressed = false;\n    this._payloadLength = 0;\n    this._mask = undefined;\n    this._fragmented = 0;\n    this._masked = false;\n    this._fin = false;\n    this._opcode = 0;\n\n    this._totalPayloadLength = 0;\n    this._messageLength = 0;\n    this._fragments = [];\n\n    this._state = GET_INFO;\n    this._loop = false;\n  }\n\n  /**\n   * Implements `Writable.prototype._write()`.\n   *\n   * @param {Buffer} chunk The chunk of data to write\n   * @param {String} encoding The character encoding of `chunk`\n   * @param {Function} cb Callback\n   * @private\n   */\n  _write(chunk, encoding, cb) {\n    if (this._opcode === 0x08 && this._state == GET_INFO) return cb();\n\n    this._bufferedBytes += chunk.length;\n    this._buffers.push(chunk);\n    this.startLoop(cb);\n  }\n\n  /**\n   * Consumes `n` bytes from the buffered data.\n   *\n   * @param {Number} n The number of bytes to consume\n   * @return {Buffer} The consumed bytes\n   * @private\n   */\n  consume(n) {\n    this._bufferedBytes -= n;\n\n    if (n === this._buffers[0].length) return this._buffers.shift();\n\n    if (n < this._buffers[0].length) {\n      const buf = this._buffers[0];\n      this._buffers[0] = buf.slice(n);\n      return buf.slice(0, n);\n    }\n\n    const dst = Buffer.allocUnsafe(n);\n\n    do {\n      const buf = this._buffers[0];\n      const offset = dst.length - n;\n\n      if (n >= buf.length) {\n        dst.set(this._buffers.shift(), offset);\n      } else {\n        dst.set(new Uint8Array(buf.buffer, buf.byteOffset, n), offset);\n        this._buffers[0] = buf.slice(n);\n      }\n\n      n -= buf.length;\n    } while (n > 0);\n\n    return dst;\n  }\n\n  /**\n   * Starts the parsing loop.\n   *\n   * @param {Function} cb Callback\n   * @private\n   */\n  startLoop(cb) {\n    let err;\n    this._loop = true;\n\n    do {\n      switch (this._state) {\n        case GET_INFO:\n          err = this.getInfo();\n          break;\n        case GET_PAYLOAD_LENGTH_16:\n          err = this.getPayloadLength16();\n          break;\n        case GET_PAYLOAD_LENGTH_64:\n          err = this.getPayloadLength64();\n          break;\n        case GET_MASK:\n          this.getMask();\n          break;\n        case GET_DATA:\n          err = this.getData(cb);\n          break;\n        default:\n          // `INFLATING`\n          this._loop = false;\n          return;\n      }\n    } while (this._loop);\n\n    cb(err);\n  }\n\n  /**\n   * Reads the first two bytes of a frame.\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */\n  getInfo() {\n    if (this._bufferedBytes < 2) {\n      this._loop = false;\n      return;\n    }\n\n    const buf = this.consume(2);\n\n    if ((buf[0] & 0x30) !== 0x00) {\n      this._loop = false;\n      return error(\n        RangeError,\n        'RSV2 and RSV3 must be clear',\n        true,\n        1002,\n        'WS_ERR_UNEXPECTED_RSV_2_3'\n      );\n    }\n\n    const compressed = (buf[0] & 0x40) === 0x40;\n\n    if (compressed && !this._extensions[PerMessageDeflate.extensionName]) {\n      this._loop = false;\n      return error(\n        RangeError,\n        'RSV1 must be clear',\n        true,\n        1002,\n        'WS_ERR_UNEXPECTED_RSV_1'\n      );\n    }\n\n    this._fin = (buf[0] & 0x80) === 0x80;\n    this._opcode = buf[0] & 0x0f;\n    this._payloadLength = buf[1] & 0x7f;\n\n    if (this._opcode === 0x00) {\n      if (compressed) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'RSV1 must be clear',\n          true,\n          1002,\n          'WS_ERR_UNEXPECTED_RSV_1'\n        );\n      }\n\n      if (!this._fragmented) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'invalid opcode 0',\n          true,\n          1002,\n          'WS_ERR_INVALID_OPCODE'\n        );\n      }\n\n      this._opcode = this._fragmented;\n    } else if (this._opcode === 0x01 || this._opcode === 0x02) {\n      if (this._fragmented) {\n        this._loop = false;\n        return error(\n          RangeError,\n          `invalid opcode ${this._opcode}`,\n          true,\n          1002,\n          'WS_ERR_INVALID_OPCODE'\n        );\n      }\n\n      this._compressed = compressed;\n    } else if (this._opcode > 0x07 && this._opcode < 0x0b) {\n      if (!this._fin) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'FIN must be set',\n          true,\n          1002,\n          'WS_ERR_EXPECTED_FIN'\n        );\n      }\n\n      if (compressed) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'RSV1 must be clear',\n          true,\n          1002,\n          'WS_ERR_UNEXPECTED_RSV_1'\n        );\n      }\n\n      if (this._payloadLength > 0x7d) {\n        this._loop = false;\n        return error(\n          RangeError,\n          `invalid payload length ${this._payloadLength}`,\n          true,\n          1002,\n          'WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH'\n        );\n      }\n    } else {\n      this._loop = false;\n      return error(\n        RangeError,\n        `invalid opcode ${this._opcode}`,\n        true,\n        1002,\n        'WS_ERR_INVALID_OPCODE'\n      );\n    }\n\n    if (!this._fin && !this._fragmented) this._fragmented = this._opcode;\n    this._masked = (buf[1] & 0x80) === 0x80;\n\n    if (this._isServer) {\n      if (!this._masked) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'MASK must be set',\n          true,\n          1002,\n          'WS_ERR_EXPECTED_MASK'\n        );\n      }\n    } else if (this._masked) {\n      this._loop = false;\n      return error(\n        RangeError,\n        'MASK must be clear',\n        true,\n        1002,\n        'WS_ERR_UNEXPECTED_MASK'\n      );\n    }\n\n    if (this._payloadLength === 126) this._state = GET_PAYLOAD_LENGTH_16;\n    else if (this._payloadLength === 127) this._state = GET_PAYLOAD_LENGTH_64;\n    else return this.haveLength();\n  }\n\n  /**\n   * Gets extended payload length (7+16).\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */\n  getPayloadLength16() {\n    if (this._bufferedBytes < 2) {\n      this._loop = false;\n      return;\n    }\n\n    this._payloadLength = this.consume(2).readUInt16BE(0);\n    return this.haveLength();\n  }\n\n  /**\n   * Gets extended payload length (7+64).\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */\n  getPayloadLength64() {\n    if (this._bufferedBytes < 8) {\n      this._loop = false;\n      return;\n    }\n\n    const buf = this.consume(8);\n    const num = buf.readUInt32BE(0);\n\n    //\n    // The maximum safe integer in JavaScript is 2^53 - 1. An error is returned\n    // if payload length is greater than this number.\n    //\n    if (num > Math.pow(2, 53 - 32) - 1) {\n      this._loop = false;\n      return error(\n        RangeError,\n        'Unsupported WebSocket frame: payload length > 2^53 - 1',\n        false,\n        1009,\n        'WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH'\n      );\n    }\n\n    this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4);\n    return this.haveLength();\n  }\n\n  /**\n   * Payload length has been read.\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */\n  haveLength() {\n    if (this._payloadLength && this._opcode < 0x08) {\n      this._totalPayloadLength += this._payloadLength;\n      if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'Max payload size exceeded',\n          false,\n          1009,\n          'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'\n        );\n      }\n    }\n\n    if (this._masked) this._state = GET_MASK;\n    else this._state = GET_DATA;\n  }\n\n  /**\n   * Reads mask bytes.\n   *\n   * @private\n   */\n  getMask() {\n    if (this._bufferedBytes < 4) {\n      this._loop = false;\n      return;\n    }\n\n    this._mask = this.consume(4);\n    this._state = GET_DATA;\n  }\n\n  /**\n   * Reads data bytes.\n   *\n   * @param {Function} cb Callback\n   * @return {(Error|RangeError|undefined)} A possible error\n   * @private\n   */\n  getData(cb) {\n    let data = EMPTY_BUFFER;\n\n    if (this._payloadLength) {\n      if (this._bufferedBytes < this._payloadLength) {\n        this._loop = false;\n        return;\n      }\n\n      data = this.consume(this._payloadLength);\n\n      if (\n        this._masked &&\n        (this._mask[0] | this._mask[1] | this._mask[2] | this._mask[3]) !== 0\n      ) {\n        unmask(data, this._mask);\n      }\n    }\n\n    if (this._opcode > 0x07) return this.controlMessage(data);\n\n    if (this._compressed) {\n      this._state = INFLATING;\n      this.decompress(data, cb);\n      return;\n    }\n\n    if (data.length) {\n      //\n      // This message is not compressed so its length is the sum of the payload\n      // length of all fragments.\n      //\n      this._messageLength = this._totalPayloadLength;\n      this._fragments.push(data);\n    }\n\n    return this.dataMessage();\n  }\n\n  /**\n   * Decompresses data.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Function} cb Callback\n   * @private\n   */\n  decompress(data, cb) {\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n\n    perMessageDeflate.decompress(data, this._fin, (err, buf) => {\n      if (err) return cb(err);\n\n      if (buf.length) {\n        this._messageLength += buf.length;\n        if (this._messageLength > this._maxPayload && this._maxPayload > 0) {\n          return cb(\n            error(\n              RangeError,\n              'Max payload size exceeded',\n              false,\n              1009,\n              'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'\n            )\n          );\n        }\n\n        this._fragments.push(buf);\n      }\n\n      const er = this.dataMessage();\n      if (er) return cb(er);\n\n      this.startLoop(cb);\n    });\n  }\n\n  /**\n   * Handles a data message.\n   *\n   * @return {(Error|undefined)} A possible error\n   * @private\n   */\n  dataMessage() {\n    if (this._fin) {\n      const messageLength = this._messageLength;\n      const fragments = this._fragments;\n\n      this._totalPayloadLength = 0;\n      this._messageLength = 0;\n      this._fragmented = 0;\n      this._fragments = [];\n\n      if (this._opcode === 2) {\n        let data;\n\n        if (this._binaryType === 'nodebuffer') {\n          data = concat(fragments, messageLength);\n        } else if (this._binaryType === 'arraybuffer') {\n          data = toArrayBuffer(concat(fragments, messageLength));\n        } else {\n          data = fragments;\n        }\n\n        this.emit('message', data, true);\n      } else {\n        const buf = concat(fragments, messageLength);\n\n        if (!this._skipUTF8Validation && !isValidUTF8(buf)) {\n          this._loop = false;\n          return error(\n            Error,\n            'invalid UTF-8 sequence',\n            true,\n            1007,\n            'WS_ERR_INVALID_UTF8'\n          );\n        }\n\n        this.emit('message', buf, false);\n      }\n    }\n\n    this._state = GET_INFO;\n  }\n\n  /**\n   * Handles a control message.\n   *\n   * @param {Buffer} data Data to handle\n   * @return {(Error|RangeError|undefined)} A possible error\n   * @private\n   */\n  controlMessage(data) {\n    if (this._opcode === 0x08) {\n      this._loop = false;\n\n      if (data.length === 0) {\n        this.emit('conclude', 1005, EMPTY_BUFFER);\n        this.end();\n      } else if (data.length === 1) {\n        return error(\n          RangeError,\n          'invalid payload length 1',\n          true,\n          1002,\n          'WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH'\n        );\n      } else {\n        const code = data.readUInt16BE(0);\n\n        if (!isValidStatusCode(code)) {\n          return error(\n            RangeError,\n            `invalid status code ${code}`,\n            true,\n            1002,\n            'WS_ERR_INVALID_CLOSE_CODE'\n          );\n        }\n\n        const buf = data.slice(2);\n\n        if (!this._skipUTF8Validation && !isValidUTF8(buf)) {\n          return error(\n            Error,\n            'invalid UTF-8 sequence',\n            true,\n            1007,\n            'WS_ERR_INVALID_UTF8'\n          );\n        }\n\n        this.emit('conclude', code, buf);\n        this.end();\n      }\n    } else if (this._opcode === 0x09) {\n      this.emit('ping', data);\n    } else {\n      this.emit('pong', data);\n    }\n\n    this._state = GET_INFO;\n  }\n}\n\nmodule.exports = Receiver;\n\n/**\n * Builds an error object.\n *\n * @param {function(new:Error|RangeError)} ErrorCtor The error constructor\n * @param {String} message The error message\n * @param {Boolean} prefix Specifies whether or not to add a default prefix to\n *     `message`\n * @param {Number} statusCode The status code\n * @param {String} errorCode The exposed error code\n * @return {(Error|RangeError)} The error\n * @private\n */\nfunction error(ErrorCtor, message, prefix, statusCode, errorCode) {\n  const err = new ErrorCtor(\n    prefix ? `Invalid WebSocket frame: ${message}` : message\n  );\n\n  Error.captureStackTrace(err, error);\n  err.code = errorCode;\n  err[kStatusCode] = statusCode;\n  return err;\n}\n","/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^net|tls$\" }] */\n\n'use strict';\n\nconst net = require('net');\nconst tls = require('tls');\nconst { randomFillSync } = require('crypto');\n\nconst PerMessageDeflate = require('./permessage-deflate');\nconst { EMPTY_BUFFER } = require('./constants');\nconst { isValidStatusCode } = require('./validation');\nconst { mask: applyMask, toBuffer } = require('./buffer-util');\n\nconst kByteLength = Symbol('kByteLength');\nconst maskBuffer = Buffer.alloc(4);\n\n/**\n * HyBi Sender implementation.\n */\nclass Sender {\n  /**\n   * Creates a Sender instance.\n   *\n   * @param {(net.Socket|tls.Socket)} socket The connection socket\n   * @param {Object} [extensions] An object containing the negotiated extensions\n   * @param {Function} [generateMask] The function used to generate the masking\n   *     key\n   */\n  constructor(socket, extensions, generateMask) {\n    this._extensions = extensions || {};\n\n    if (generateMask) {\n      this._generateMask = generateMask;\n      this._maskBuffer = Buffer.alloc(4);\n    }\n\n    this._socket = socket;\n\n    this._firstFragment = true;\n    this._compress = false;\n\n    this._bufferedBytes = 0;\n    this._deflating = false;\n    this._queue = [];\n  }\n\n  /**\n   * Frames a piece of data according to the HyBi WebSocket protocol.\n   *\n   * @param {(Buffer|String)} data The data to frame\n   * @param {Object} options Options object\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n   *     FIN bit\n   * @param {Function} [options.generateMask] The function used to generate the\n   *     masking key\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking\n   *     key\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n   *     modified\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n   *     RSV1 bit\n   * @return {(Buffer|String)[]} The framed data\n   * @public\n   */\n  static frame(data, options) {\n    let mask;\n    let merge = false;\n    let offset = 2;\n    let skipMasking = false;\n\n    if (options.mask) {\n      mask = options.maskBuffer || maskBuffer;\n\n      if (options.generateMask) {\n        options.generateMask(mask);\n      } else {\n        randomFillSync(mask, 0, 4);\n      }\n\n      skipMasking = (mask[0] | mask[1] | mask[2] | mask[3]) === 0;\n      offset = 6;\n    }\n\n    let dataLength;\n\n    if (typeof data === 'string') {\n      if (\n        (!options.mask || skipMasking) &&\n        options[kByteLength] !== undefined\n      ) {\n        dataLength = options[kByteLength];\n      } else {\n        data = Buffer.from(data);\n        dataLength = data.length;\n      }\n    } else {\n      dataLength = data.length;\n      merge = options.mask && options.readOnly && !skipMasking;\n    }\n\n    let payloadLength = dataLength;\n\n    if (dataLength >= 65536) {\n      offset += 8;\n      payloadLength = 127;\n    } else if (dataLength > 125) {\n      offset += 2;\n      payloadLength = 126;\n    }\n\n    const target = Buffer.allocUnsafe(merge ? dataLength + offset : offset);\n\n    target[0] = options.fin ? options.opcode | 0x80 : options.opcode;\n    if (options.rsv1) target[0] |= 0x40;\n\n    target[1] = payloadLength;\n\n    if (payloadLength === 126) {\n      target.writeUInt16BE(dataLength, 2);\n    } else if (payloadLength === 127) {\n      target[2] = target[3] = 0;\n      target.writeUIntBE(dataLength, 4, 6);\n    }\n\n    if (!options.mask) return [target, data];\n\n    target[1] |= 0x80;\n    target[offset - 4] = mask[0];\n    target[offset - 3] = mask[1];\n    target[offset - 2] = mask[2];\n    target[offset - 1] = mask[3];\n\n    if (skipMasking) return [target, data];\n\n    if (merge) {\n      applyMask(data, mask, target, offset, dataLength);\n      return [target];\n    }\n\n    applyMask(data, mask, data, 0, dataLength);\n    return [target, data];\n  }\n\n  /**\n   * Sends a close message to the other peer.\n   *\n   * @param {Number} [code] The status code component of the body\n   * @param {(String|Buffer)} [data] The message component of the body\n   * @param {Boolean} [mask=false] Specifies whether or not to mask the message\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  close(code, data, mask, cb) {\n    let buf;\n\n    if (code === undefined) {\n      buf = EMPTY_BUFFER;\n    } else if (typeof code !== 'number' || !isValidStatusCode(code)) {\n      throw new TypeError('First argument must be a valid error code number');\n    } else if (data === undefined || !data.length) {\n      buf = Buffer.allocUnsafe(2);\n      buf.writeUInt16BE(code, 0);\n    } else {\n      const length = Buffer.byteLength(data);\n\n      if (length > 123) {\n        throw new RangeError('The message must not be greater than 123 bytes');\n      }\n\n      buf = Buffer.allocUnsafe(2 + length);\n      buf.writeUInt16BE(code, 0);\n\n      if (typeof data === 'string') {\n        buf.write(data, 2);\n      } else {\n        buf.set(data, 2);\n      }\n    }\n\n    const options = {\n      [kByteLength]: buf.length,\n      fin: true,\n      generateMask: this._generateMask,\n      mask,\n      maskBuffer: this._maskBuffer,\n      opcode: 0x08,\n      readOnly: false,\n      rsv1: false\n    };\n\n    if (this._deflating) {\n      this.enqueue([this.dispatch, buf, false, options, cb]);\n    } else {\n      this.sendFrame(Sender.frame(buf, options), cb);\n    }\n  }\n\n  /**\n   * Sends a ping message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  ping(data, mask, cb) {\n    let byteLength;\n    let readOnly;\n\n    if (typeof data === 'string') {\n      byteLength = Buffer.byteLength(data);\n      readOnly = false;\n    } else {\n      data = toBuffer(data);\n      byteLength = data.length;\n      readOnly = toBuffer.readOnly;\n    }\n\n    if (byteLength > 125) {\n      throw new RangeError('The data size must not be greater than 125 bytes');\n    }\n\n    const options = {\n      [kByteLength]: byteLength,\n      fin: true,\n      generateMask: this._generateMask,\n      mask,\n      maskBuffer: this._maskBuffer,\n      opcode: 0x09,\n      readOnly,\n      rsv1: false\n    };\n\n    if (this._deflating) {\n      this.enqueue([this.dispatch, data, false, options, cb]);\n    } else {\n      this.sendFrame(Sender.frame(data, options), cb);\n    }\n  }\n\n  /**\n   * Sends a pong message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  pong(data, mask, cb) {\n    let byteLength;\n    let readOnly;\n\n    if (typeof data === 'string') {\n      byteLength = Buffer.byteLength(data);\n      readOnly = false;\n    } else {\n      data = toBuffer(data);\n      byteLength = data.length;\n      readOnly = toBuffer.readOnly;\n    }\n\n    if (byteLength > 125) {\n      throw new RangeError('The data size must not be greater than 125 bytes');\n    }\n\n    const options = {\n      [kByteLength]: byteLength,\n      fin: true,\n      generateMask: this._generateMask,\n      mask,\n      maskBuffer: this._maskBuffer,\n      opcode: 0x0a,\n      readOnly,\n      rsv1: false\n    };\n\n    if (this._deflating) {\n      this.enqueue([this.dispatch, data, false, options, cb]);\n    } else {\n      this.sendFrame(Sender.frame(data, options), cb);\n    }\n  }\n\n  /**\n   * Sends a data message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Object} options Options object\n   * @param {Boolean} [options.binary=false] Specifies whether `data` is binary\n   *     or text\n   * @param {Boolean} [options.compress=false] Specifies whether or not to\n   *     compress `data`\n   * @param {Boolean} [options.fin=false] Specifies whether the fragment is the\n   *     last one\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  send(data, options, cb) {\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n    let opcode = options.binary ? 2 : 1;\n    let rsv1 = options.compress;\n\n    let byteLength;\n    let readOnly;\n\n    if (typeof data === 'string') {\n      byteLength = Buffer.byteLength(data);\n      readOnly = false;\n    } else {\n      data = toBuffer(data);\n      byteLength = data.length;\n      readOnly = toBuffer.readOnly;\n    }\n\n    if (this._firstFragment) {\n      this._firstFragment = false;\n      if (\n        rsv1 &&\n        perMessageDeflate &&\n        perMessageDeflate.params[\n          perMessageDeflate._isServer\n            ? 'server_no_context_takeover'\n            : 'client_no_context_takeover'\n        ]\n      ) {\n        rsv1 = byteLength >= perMessageDeflate._threshold;\n      }\n      this._compress = rsv1;\n    } else {\n      rsv1 = false;\n      opcode = 0;\n    }\n\n    if (options.fin) this._firstFragment = true;\n\n    if (perMessageDeflate) {\n      const opts = {\n        [kByteLength]: byteLength,\n        fin: options.fin,\n        generateMask: this._generateMask,\n        mask: options.mask,\n        maskBuffer: this._maskBuffer,\n        opcode,\n        readOnly,\n        rsv1\n      };\n\n      if (this._deflating) {\n        this.enqueue([this.dispatch, data, this._compress, opts, cb]);\n      } else {\n        this.dispatch(data, this._compress, opts, cb);\n      }\n    } else {\n      this.sendFrame(\n        Sender.frame(data, {\n          [kByteLength]: byteLength,\n          fin: options.fin,\n          generateMask: this._generateMask,\n          mask: options.mask,\n          maskBuffer: this._maskBuffer,\n          opcode,\n          readOnly,\n          rsv1: false\n        }),\n        cb\n      );\n    }\n  }\n\n  /**\n   * Dispatches a message.\n   *\n   * @param {(Buffer|String)} data The message to send\n   * @param {Boolean} [compress=false] Specifies whether or not to compress\n   *     `data`\n   * @param {Object} options Options object\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n   *     FIN bit\n   * @param {Function} [options.generateMask] The function used to generate the\n   *     masking key\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking\n   *     key\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n   *     modified\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n   *     RSV1 bit\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  dispatch(data, compress, options, cb) {\n    if (!compress) {\n      this.sendFrame(Sender.frame(data, options), cb);\n      return;\n    }\n\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n\n    this._bufferedBytes += options[kByteLength];\n    this._deflating = true;\n    perMessageDeflate.compress(data, options.fin, (_, buf) => {\n      if (this._socket.destroyed) {\n        const err = new Error(\n          'The socket was closed while data was being compressed'\n        );\n\n        if (typeof cb === 'function') cb(err);\n\n        for (let i = 0; i < this._queue.length; i++) {\n          const params = this._queue[i];\n          const callback = params[params.length - 1];\n\n          if (typeof callback === 'function') callback(err);\n        }\n\n        return;\n      }\n\n      this._bufferedBytes -= options[kByteLength];\n      this._deflating = false;\n      options.readOnly = false;\n      this.sendFrame(Sender.frame(buf, options), cb);\n      this.dequeue();\n    });\n  }\n\n  /**\n   * Executes queued send operations.\n   *\n   * @private\n   */\n  dequeue() {\n    while (!this._deflating && this._queue.length) {\n      const params = this._queue.shift();\n\n      this._bufferedBytes -= params[3][kByteLength];\n      Reflect.apply(params[0], this, params.slice(1));\n    }\n  }\n\n  /**\n   * Enqueues a send operation.\n   *\n   * @param {Array} params Send operation parameters.\n   * @private\n   */\n  enqueue(params) {\n    this._bufferedBytes += params[3][kByteLength];\n    this._queue.push(params);\n  }\n\n  /**\n   * Sends a frame.\n   *\n   * @param {Buffer[]} list The frame to send\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  sendFrame(list, cb) {\n    if (list.length === 2) {\n      this._socket.cork();\n      this._socket.write(list[0]);\n      this._socket.write(list[1], cb);\n      this._socket.uncork();\n    } else {\n      this._socket.write(list[0], cb);\n    }\n  }\n}\n\nmodule.exports = Sender;\n","'use strict';\n\nconst { Duplex } = require('stream');\n\n/**\n * Emits the `'close'` event on a stream.\n *\n * @param {Duplex} stream The stream.\n * @private\n */\nfunction emitClose(stream) {\n  stream.emit('close');\n}\n\n/**\n * The listener of the `'end'` event.\n *\n * @private\n */\nfunction duplexOnEnd() {\n  if (!this.destroyed && this._writableState.finished) {\n    this.destroy();\n  }\n}\n\n/**\n * The listener of the `'error'` event.\n *\n * @param {Error} err The error\n * @private\n */\nfunction duplexOnError(err) {\n  this.removeListener('error', duplexOnError);\n  this.destroy();\n  if (this.listenerCount('error') === 0) {\n    // Do not suppress the throwing behavior.\n    this.emit('error', err);\n  }\n}\n\n/**\n * Wraps a `WebSocket` in a duplex stream.\n *\n * @param {WebSocket} ws The `WebSocket` to wrap\n * @param {Object} [options] The options for the `Duplex` constructor\n * @return {Duplex} The duplex stream\n * @public\n */\nfunction createWebSocketStream(ws, options) {\n  let terminateOnDestroy = true;\n\n  const duplex = new Duplex({\n    ...options,\n    autoDestroy: false,\n    emitClose: false,\n    objectMode: false,\n    writableObjectMode: false\n  });\n\n  ws.on('message', function message(msg, isBinary) {\n    const data =\n      !isBinary && duplex._readableState.objectMode ? msg.toString() : msg;\n\n    if (!duplex.push(data)) ws.pause();\n  });\n\n  ws.once('error', function error(err) {\n    if (duplex.destroyed) return;\n\n    // Prevent `ws.terminate()` from being called by `duplex._destroy()`.\n    //\n    // - If the `'error'` event is emitted before the `'open'` event, then\n    //   `ws.terminate()` is a noop as no socket is assigned.\n    // - Otherwise, the error is re-emitted by the listener of the `'error'`\n    //   event of the `Receiver` object. The listener already closes the\n    //   connection by calling `ws.close()`. This allows a close frame to be\n    //   sent to the other peer. If `ws.terminate()` is called right after this,\n    //   then the close frame might not be sent.\n    terminateOnDestroy = false;\n    duplex.destroy(err);\n  });\n\n  ws.once('close', function close() {\n    if (duplex.destroyed) return;\n\n    duplex.push(null);\n  });\n\n  duplex._destroy = function (err, callback) {\n    if (ws.readyState === ws.CLOSED) {\n      callback(err);\n      process.nextTick(emitClose, duplex);\n      return;\n    }\n\n    let called = false;\n\n    ws.once('error', function error(err) {\n      called = true;\n      callback(err);\n    });\n\n    ws.once('close', function close() {\n      if (!called) callback(err);\n      process.nextTick(emitClose, duplex);\n    });\n\n    if (terminateOnDestroy) ws.terminate();\n  };\n\n  duplex._final = function (callback) {\n    if (ws.readyState === ws.CONNECTING) {\n      ws.once('open', function open() {\n        duplex._final(callback);\n      });\n      return;\n    }\n\n    // If the value of the `_socket` property is `null` it means that `ws` is a\n    // client websocket and the handshake failed. In fact, when this happens, a\n    // socket is never assigned to the websocket. Wait for the `'error'` event\n    // that will be emitted by the websocket.\n    if (ws._socket === null) return;\n\n    if (ws._socket._writableState.finished) {\n      callback();\n      if (duplex._readableState.endEmitted) duplex.destroy();\n    } else {\n      ws._socket.once('finish', function finish() {\n        // `duplex` is not destroyed here because the `'end'` event will be\n        // emitted on `duplex` after this `'finish'` event. The EOF signaling\n        // `null` chunk is, in fact, pushed when the websocket emits `'close'`.\n        callback();\n      });\n      ws.close();\n    }\n  };\n\n  duplex._read = function () {\n    if (ws.isPaused) ws.resume();\n  };\n\n  duplex._write = function (chunk, encoding, callback) {\n    if (ws.readyState === ws.CONNECTING) {\n      ws.once('open', function open() {\n        duplex._write(chunk, encoding, callback);\n      });\n      return;\n    }\n\n    ws.send(chunk, callback);\n  };\n\n  duplex.on('end', duplexOnEnd);\n  duplex.on('error', duplexOnError);\n  return duplex;\n}\n\nmodule.exports = createWebSocketStream;\n","'use strict';\n\nconst { tokenChars } = require('./validation');\n\n/**\n * Parses the `Sec-WebSocket-Protocol` header into a set of subprotocol names.\n *\n * @param {String} header The field value of the header\n * @return {Set} The subprotocol names\n * @public\n */\nfunction parse(header) {\n  const protocols = new Set();\n  let start = -1;\n  let end = -1;\n  let i = 0;\n\n  for (i; i < header.length; i++) {\n    const code = header.charCodeAt(i);\n\n    if (end === -1 && tokenChars[code] === 1) {\n      if (start === -1) start = i;\n    } else if (\n      i !== 0 &&\n      (code === 0x20 /* ' ' */ || code === 0x09) /* '\\t' */\n    ) {\n      if (end === -1 && start !== -1) end = i;\n    } else if (code === 0x2c /* ',' */) {\n      if (start === -1) {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n\n      if (end === -1) end = i;\n\n      const protocol = header.slice(start, end);\n\n      if (protocols.has(protocol)) {\n        throw new SyntaxError(`The \"${protocol}\" subprotocol is duplicated`);\n      }\n\n      protocols.add(protocol);\n      start = end = -1;\n    } else {\n      throw new SyntaxError(`Unexpected character at index ${i}`);\n    }\n  }\n\n  if (start === -1 || end !== -1) {\n    throw new SyntaxError('Unexpected end of input');\n  }\n\n  const protocol = header.slice(start, i);\n\n  if (protocols.has(protocol)) {\n    throw new SyntaxError(`The \"${protocol}\" subprotocol is duplicated`);\n  }\n\n  protocols.add(protocol);\n  return protocols;\n}\n\nmodule.exports = { parse };\n","'use strict';\n\n//\n// Allowed token characters:\n//\n// '!', '#', '$', '%', '&', ''', '*', '+', '-',\n// '.', 0-9, A-Z, '^', '_', '`', a-z, '|', '~'\n//\n// tokenChars[32] === 0 // ' '\n// tokenChars[33] === 1 // '!'\n// tokenChars[34] === 0 // '\"'\n// ...\n//\n// prettier-ignore\nconst tokenChars = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0 - 15\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16 - 31\n  0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, // 32 - 47\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 48 - 63\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 64 - 79\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, // 80 - 95\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 96 - 111\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0 // 112 - 127\n];\n\n/**\n * Checks if a status code is allowed in a close frame.\n *\n * @param {Number} code The status code\n * @return {Boolean} `true` if the status code is valid, else `false`\n * @public\n */\nfunction isValidStatusCode(code) {\n  return (\n    (code >= 1000 &&\n      code <= 1014 &&\n      code !== 1004 &&\n      code !== 1005 &&\n      code !== 1006) ||\n    (code >= 3000 && code <= 4999)\n  );\n}\n\n/**\n * Checks if a given buffer contains only correct UTF-8.\n * Ported from https://www.cl.cam.ac.uk/%7Emgk25/ucs/utf8_check.c by\n * Markus Kuhn.\n *\n * @param {Buffer} buf The buffer to check\n * @return {Boolean} `true` if `buf` contains only correct UTF-8, else `false`\n * @public\n */\nfunction _isValidUTF8(buf) {\n  const len = buf.length;\n  let i = 0;\n\n  while (i < len) {\n    if ((buf[i] & 0x80) === 0) {\n      // 0xxxxxxx\n      i++;\n    } else if ((buf[i] & 0xe0) === 0xc0) {\n      // 110xxxxx 10xxxxxx\n      if (\n        i + 1 === len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i] & 0xfe) === 0xc0 // Overlong\n      ) {\n        return false;\n      }\n\n      i += 2;\n    } else if ((buf[i] & 0xf0) === 0xe0) {\n      // 1110xxxx 10xxxxxx 10xxxxxx\n      if (\n        i + 2 >= len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i + 2] & 0xc0) !== 0x80 ||\n        (buf[i] === 0xe0 && (buf[i + 1] & 0xe0) === 0x80) || // Overlong\n        (buf[i] === 0xed && (buf[i + 1] & 0xe0) === 0xa0) // Surrogate (U+D800 - U+DFFF)\n      ) {\n        return false;\n      }\n\n      i += 3;\n    } else if ((buf[i] & 0xf8) === 0xf0) {\n      // 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n      if (\n        i + 3 >= len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i + 2] & 0xc0) !== 0x80 ||\n        (buf[i + 3] & 0xc0) !== 0x80 ||\n        (buf[i] === 0xf0 && (buf[i + 1] & 0xf0) === 0x80) || // Overlong\n        (buf[i] === 0xf4 && buf[i + 1] > 0x8f) ||\n        buf[i] > 0xf4 // > U+10FFFF\n      ) {\n        return false;\n      }\n\n      i += 4;\n    } else {\n      return false;\n    }\n  }\n\n  return true;\n}\n\ntry {\n  const isValidUTF8 = require('utf-8-validate');\n\n  module.exports = {\n    isValidStatusCode,\n    isValidUTF8(buf) {\n      return buf.length < 150 ? _isValidUTF8(buf) : isValidUTF8(buf);\n    },\n    tokenChars\n  };\n} catch (e) /* istanbul ignore next */ {\n  module.exports = {\n    isValidStatusCode,\n    isValidUTF8: _isValidUTF8,\n    tokenChars\n  };\n}\n","/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^net|tls|https$\" }] */\n\n'use strict';\n\nconst EventEmitter = require('events');\nconst http = require('http');\nconst https = require('https');\nconst net = require('net');\nconst tls = require('tls');\nconst { createHash } = require('crypto');\n\nconst extension = require('./extension');\nconst PerMessageDeflate = require('./permessage-deflate');\nconst subprotocol = require('./subprotocol');\nconst WebSocket = require('./websocket');\nconst { GUID, kWebSocket } = require('./constants');\n\nconst keyRegex = /^[+/0-9A-Za-z]{22}==$/;\n\nconst RUNNING = 0;\nconst CLOSING = 1;\nconst CLOSED = 2;\n\n/**\n * Class representing a WebSocket server.\n *\n * @extends EventEmitter\n */\nclass WebSocketServer extends EventEmitter {\n  /**\n   * Create a `WebSocketServer` instance.\n   *\n   * @param {Object} options Configuration options\n   * @param {Number} [options.backlog=511] The maximum length of the queue of\n   *     pending connections\n   * @param {Boolean} [options.clientTracking=true] Specifies whether or not to\n   *     track clients\n   * @param {Function} [options.handleProtocols] A hook to handle protocols\n   * @param {String} [options.host] The hostname where to bind the server\n   * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n   *     size\n   * @param {Boolean} [options.noServer=false] Enable no server mode\n   * @param {String} [options.path] Accept only connections matching this path\n   * @param {(Boolean|Object)} [options.perMessageDeflate=false] Enable/disable\n   *     permessage-deflate\n   * @param {Number} [options.port] The port where to bind the server\n   * @param {(http.Server|https.Server)} [options.server] A pre-created HTTP/S\n   *     server to use\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n   *     not to skip UTF-8 validation for text and close messages\n   * @param {Function} [options.verifyClient] A hook to reject connections\n   * @param {Function} [options.WebSocket=WebSocket] Specifies the `WebSocket`\n   *     class to use. It must be the `WebSocket` class or class that extends it\n   * @param {Function} [callback] A listener for the `listening` event\n   */\n  constructor(options, callback) {\n    super();\n\n    options = {\n      maxPayload: 100 * 1024 * 1024,\n      skipUTF8Validation: false,\n      perMessageDeflate: false,\n      handleProtocols: null,\n      clientTracking: true,\n      verifyClient: null,\n      noServer: false,\n      backlog: null, // use default (511 as implemented in net.js)\n      server: null,\n      host: null,\n      path: null,\n      port: null,\n      WebSocket,\n      ...options\n    };\n\n    if (\n      (options.port == null && !options.server && !options.noServer) ||\n      (options.port != null && (options.server || options.noServer)) ||\n      (options.server && options.noServer)\n    ) {\n      throw new TypeError(\n        'One and only one of the \"port\", \"server\", or \"noServer\" options ' +\n          'must be specified'\n      );\n    }\n\n    if (options.port != null) {\n      this._server = http.createServer((req, res) => {\n        const body = http.STATUS_CODES[426];\n\n        res.writeHead(426, {\n          'Content-Length': body.length,\n          'Content-Type': 'text/plain'\n        });\n        res.end(body);\n      });\n      this._server.listen(\n        options.port,\n        options.host,\n        options.backlog,\n        callback\n      );\n    } else if (options.server) {\n      this._server = options.server;\n    }\n\n    if (this._server) {\n      const emitConnection = this.emit.bind(this, 'connection');\n\n      this._removeListeners = addListeners(this._server, {\n        listening: this.emit.bind(this, 'listening'),\n        error: this.emit.bind(this, 'error'),\n        upgrade: (req, socket, head) => {\n          this.handleUpgrade(req, socket, head, emitConnection);\n        }\n      });\n    }\n\n    if (options.perMessageDeflate === true) options.perMessageDeflate = {};\n    if (options.clientTracking) {\n      this.clients = new Set();\n      this._shouldEmitClose = false;\n    }\n\n    this.options = options;\n    this._state = RUNNING;\n  }\n\n  /**\n   * Returns the bound address, the address family name, and port of the server\n   * as reported by the operating system if listening on an IP socket.\n   * If the server is listening on a pipe or UNIX domain socket, the name is\n   * returned as a string.\n   *\n   * @return {(Object|String|null)} The address of the server\n   * @public\n   */\n  address() {\n    if (this.options.noServer) {\n      throw new Error('The server is operating in \"noServer\" mode');\n    }\n\n    if (!this._server) return null;\n    return this._server.address();\n  }\n\n  /**\n   * Stop the server from accepting new connections and emit the `'close'` event\n   * when all existing connections are closed.\n   *\n   * @param {Function} [cb] A one-time listener for the `'close'` event\n   * @public\n   */\n  close(cb) {\n    if (this._state === CLOSED) {\n      if (cb) {\n        this.once('close', () => {\n          cb(new Error('The server is not running'));\n        });\n      }\n\n      process.nextTick(emitClose, this);\n      return;\n    }\n\n    if (cb) this.once('close', cb);\n\n    if (this._state === CLOSING) return;\n    this._state = CLOSING;\n\n    if (this.options.noServer || this.options.server) {\n      if (this._server) {\n        this._removeListeners();\n        this._removeListeners = this._server = null;\n      }\n\n      if (this.clients) {\n        if (!this.clients.size) {\n          process.nextTick(emitClose, this);\n        } else {\n          this._shouldEmitClose = true;\n        }\n      } else {\n        process.nextTick(emitClose, this);\n      }\n    } else {\n      const server = this._server;\n\n      this._removeListeners();\n      this._removeListeners = this._server = null;\n\n      //\n      // The HTTP/S server was created internally. Close it, and rely on its\n      // `'close'` event.\n      //\n      server.close(() => {\n        emitClose(this);\n      });\n    }\n  }\n\n  /**\n   * See if a given request should be handled by this server instance.\n   *\n   * @param {http.IncomingMessage} req Request object to inspect\n   * @return {Boolean} `true` if the request is valid, else `false`\n   * @public\n   */\n  shouldHandle(req) {\n    if (this.options.path) {\n      const index = req.url.indexOf('?');\n      const pathname = index !== -1 ? req.url.slice(0, index) : req.url;\n\n      if (pathname !== this.options.path) return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Handle a HTTP Upgrade request.\n   *\n   * @param {http.IncomingMessage} req The request object\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @public\n   */\n  handleUpgrade(req, socket, head, cb) {\n    socket.on('error', socketOnError);\n\n    const key =\n      req.headers['sec-websocket-key'] !== undefined\n        ? req.headers['sec-websocket-key']\n        : false;\n    const version = +req.headers['sec-websocket-version'];\n\n    if (\n      req.method !== 'GET' ||\n      req.headers.upgrade.toLowerCase() !== 'websocket' ||\n      !key ||\n      !keyRegex.test(key) ||\n      (version !== 8 && version !== 13) ||\n      !this.shouldHandle(req)\n    ) {\n      return abortHandshake(socket, 400);\n    }\n\n    const secWebSocketProtocol = req.headers['sec-websocket-protocol'];\n    let protocols = new Set();\n\n    if (secWebSocketProtocol !== undefined) {\n      try {\n        protocols = subprotocol.parse(secWebSocketProtocol);\n      } catch (err) {\n        return abortHandshake(socket, 400);\n      }\n    }\n\n    const secWebSocketExtensions = req.headers['sec-websocket-extensions'];\n    const extensions = {};\n\n    if (\n      this.options.perMessageDeflate &&\n      secWebSocketExtensions !== undefined\n    ) {\n      const perMessageDeflate = new PerMessageDeflate(\n        this.options.perMessageDeflate,\n        true,\n        this.options.maxPayload\n      );\n\n      try {\n        const offers = extension.parse(secWebSocketExtensions);\n\n        if (offers[PerMessageDeflate.extensionName]) {\n          perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);\n          extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n        }\n      } catch (err) {\n        return abortHandshake(socket, 400);\n      }\n    }\n\n    //\n    // Optionally call external client verification handler.\n    //\n    if (this.options.verifyClient) {\n      const info = {\n        origin:\n          req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],\n        secure: !!(req.socket.authorized || req.socket.encrypted),\n        req\n      };\n\n      if (this.options.verifyClient.length === 2) {\n        this.options.verifyClient(info, (verified, code, message, headers) => {\n          if (!verified) {\n            return abortHandshake(socket, code || 401, message, headers);\n          }\n\n          this.completeUpgrade(\n            extensions,\n            key,\n            protocols,\n            req,\n            socket,\n            head,\n            cb\n          );\n        });\n        return;\n      }\n\n      if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);\n    }\n\n    this.completeUpgrade(extensions, key, protocols, req, socket, head, cb);\n  }\n\n  /**\n   * Upgrade the connection to WebSocket.\n   *\n   * @param {Object} extensions The accepted extensions\n   * @param {String} key The value of the `Sec-WebSocket-Key` header\n   * @param {Set} protocols The subprotocols\n   * @param {http.IncomingMessage} req The request object\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @throws {Error} If called more than once with the same socket\n   * @private\n   */\n  completeUpgrade(extensions, key, protocols, req, socket, head, cb) {\n    //\n    // Destroy the socket if the client has already sent a FIN packet.\n    //\n    if (!socket.readable || !socket.writable) return socket.destroy();\n\n    if (socket[kWebSocket]) {\n      throw new Error(\n        'server.handleUpgrade() was called more than once with the same ' +\n          'socket, possibly due to a misconfiguration'\n      );\n    }\n\n    if (this._state > RUNNING) return abortHandshake(socket, 503);\n\n    const digest = createHash('sha1')\n      .update(key + GUID)\n      .digest('base64');\n\n    const headers = [\n      'HTTP/1.1 101 Switching Protocols',\n      'Upgrade: websocket',\n      'Connection: Upgrade',\n      `Sec-WebSocket-Accept: ${digest}`\n    ];\n\n    const ws = new this.options.WebSocket(null);\n\n    if (protocols.size) {\n      //\n      // Optionally call external protocol selection handler.\n      //\n      const protocol = this.options.handleProtocols\n        ? this.options.handleProtocols(protocols, req)\n        : protocols.values().next().value;\n\n      if (protocol) {\n        headers.push(`Sec-WebSocket-Protocol: ${protocol}`);\n        ws._protocol = protocol;\n      }\n    }\n\n    if (extensions[PerMessageDeflate.extensionName]) {\n      const params = extensions[PerMessageDeflate.extensionName].params;\n      const value = extension.format({\n        [PerMessageDeflate.extensionName]: [params]\n      });\n      headers.push(`Sec-WebSocket-Extensions: ${value}`);\n      ws._extensions = extensions;\n    }\n\n    //\n    // Allow external modification/inspection of handshake headers.\n    //\n    this.emit('headers', headers, req);\n\n    socket.write(headers.concat('\\r\\n').join('\\r\\n'));\n    socket.removeListener('error', socketOnError);\n\n    ws.setSocket(socket, head, {\n      maxPayload: this.options.maxPayload,\n      skipUTF8Validation: this.options.skipUTF8Validation\n    });\n\n    if (this.clients) {\n      this.clients.add(ws);\n      ws.on('close', () => {\n        this.clients.delete(ws);\n\n        if (this._shouldEmitClose && !this.clients.size) {\n          process.nextTick(emitClose, this);\n        }\n      });\n    }\n\n    cb(ws, req);\n  }\n}\n\nmodule.exports = WebSocketServer;\n\n/**\n * Add event listeners on an `EventEmitter` using a map of <event, listener>\n * pairs.\n *\n * @param {EventEmitter} server The event emitter\n * @param {Object.<String, Function>} map The listeners to add\n * @return {Function} A function that will remove the added listeners when\n *     called\n * @private\n */\nfunction addListeners(server, map) {\n  for (const event of Object.keys(map)) server.on(event, map[event]);\n\n  return function removeListeners() {\n    for (const event of Object.keys(map)) {\n      server.removeListener(event, map[event]);\n    }\n  };\n}\n\n/**\n * Emit a `'close'` event on an `EventEmitter`.\n *\n * @param {EventEmitter} server The event emitter\n * @private\n */\nfunction emitClose(server) {\n  server._state = CLOSED;\n  server.emit('close');\n}\n\n/**\n * Handle premature socket errors.\n *\n * @private\n */\nfunction socketOnError() {\n  this.destroy();\n}\n\n/**\n * Close the connection when preconditions are not fulfilled.\n *\n * @param {(net.Socket|tls.Socket)} socket The socket of the upgrade request\n * @param {Number} code The HTTP response status code\n * @param {String} [message] The HTTP response body\n * @param {Object} [headers] Additional HTTP response headers\n * @private\n */\nfunction abortHandshake(socket, code, message, headers) {\n  if (socket.writable) {\n    message = message || http.STATUS_CODES[code];\n    headers = {\n      Connection: 'close',\n      'Content-Type': 'text/html',\n      'Content-Length': Buffer.byteLength(message),\n      ...headers\n    };\n\n    socket.write(\n      `HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\\r\\n` +\n        Object.keys(headers)\n          .map((h) => `${h}: ${headers[h]}`)\n          .join('\\r\\n') +\n        '\\r\\n\\r\\n' +\n        message\n    );\n  }\n\n  socket.removeListener('error', socketOnError);\n  socket.destroy();\n}\n","/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^Readable$\" }] */\n\n'use strict';\n\nconst EventEmitter = require('events');\nconst https = require('https');\nconst http = require('http');\nconst net = require('net');\nconst tls = require('tls');\nconst { randomBytes, createHash } = require('crypto');\nconst { Readable } = require('stream');\nconst { URL } = require('url');\n\nconst PerMessageDeflate = require('./permessage-deflate');\nconst Receiver = require('./receiver');\nconst Sender = require('./sender');\nconst {\n  BINARY_TYPES,\n  EMPTY_BUFFER,\n  GUID,\n  kForOnEventAttribute,\n  kListener,\n  kStatusCode,\n  kWebSocket,\n  NOOP\n} = require('./constants');\nconst {\n  EventTarget: { addEventListener, removeEventListener }\n} = require('./event-target');\nconst { format, parse } = require('./extension');\nconst { toBuffer } = require('./buffer-util');\n\nconst readyStates = ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];\nconst subprotocolRegex = /^[!#$%&'*+\\-.0-9A-Z^_`|a-z~]+$/;\nconst protocolVersions = [8, 13];\nconst closeTimeout = 30 * 1000;\n\n/**\n * Class representing a WebSocket.\n *\n * @extends EventEmitter\n */\nclass WebSocket extends EventEmitter {\n  /**\n   * Create a new `WebSocket`.\n   *\n   * @param {(String|URL)} address The URL to which to connect\n   * @param {(String|String[])} [protocols] The subprotocols\n   * @param {Object} [options] Connection options\n   */\n  constructor(address, protocols, options) {\n    super();\n\n    this._binaryType = BINARY_TYPES[0];\n    this._closeCode = 1006;\n    this._closeFrameReceived = false;\n    this._closeFrameSent = false;\n    this._closeMessage = EMPTY_BUFFER;\n    this._closeTimer = null;\n    this._extensions = {};\n    this._paused = false;\n    this._protocol = '';\n    this._readyState = WebSocket.CONNECTING;\n    this._receiver = null;\n    this._sender = null;\n    this._socket = null;\n\n    if (address !== null) {\n      this._bufferedAmount = 0;\n      this._isServer = false;\n      this._redirects = 0;\n\n      if (protocols === undefined) {\n        protocols = [];\n      } else if (!Array.isArray(protocols)) {\n        if (typeof protocols === 'object' && protocols !== null) {\n          options = protocols;\n          protocols = [];\n        } else {\n          protocols = [protocols];\n        }\n      }\n\n      initAsClient(this, address, protocols, options);\n    } else {\n      this._isServer = true;\n    }\n  }\n\n  /**\n   * This deviates from the WHATWG interface since ws doesn't support the\n   * required default \"blob\" type (instead we define a custom \"nodebuffer\"\n   * type).\n   *\n   * @type {String}\n   */\n  get binaryType() {\n    return this._binaryType;\n  }\n\n  set binaryType(type) {\n    if (!BINARY_TYPES.includes(type)) return;\n\n    this._binaryType = type;\n\n    //\n    // Allow to change `binaryType` on the fly.\n    //\n    if (this._receiver) this._receiver._binaryType = type;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get bufferedAmount() {\n    if (!this._socket) return this._bufferedAmount;\n\n    return this._socket._writableState.length + this._sender._bufferedBytes;\n  }\n\n  /**\n   * @type {String}\n   */\n  get extensions() {\n    return Object.keys(this._extensions).join();\n  }\n\n  /**\n   * @type {Boolean}\n   */\n  get isPaused() {\n    return this._paused;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onclose() {\n    return null;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onerror() {\n    return null;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onopen() {\n    return null;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onmessage() {\n    return null;\n  }\n\n  /**\n   * @type {String}\n   */\n  get protocol() {\n    return this._protocol;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get readyState() {\n    return this._readyState;\n  }\n\n  /**\n   * @type {String}\n   */\n  get url() {\n    return this._url;\n  }\n\n  /**\n   * Set up the socket and the internal resources.\n   *\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Object} options Options object\n   * @param {Function} [options.generateMask] The function used to generate the\n   *     masking key\n   * @param {Number} [options.maxPayload=0] The maximum allowed message size\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n   *     not to skip UTF-8 validation for text and close messages\n   * @private\n   */\n  setSocket(socket, head, options) {\n    const receiver = new Receiver({\n      binaryType: this.binaryType,\n      extensions: this._extensions,\n      isServer: this._isServer,\n      maxPayload: options.maxPayload,\n      skipUTF8Validation: options.skipUTF8Validation\n    });\n\n    this._sender = new Sender(socket, this._extensions, options.generateMask);\n    this._receiver = receiver;\n    this._socket = socket;\n\n    receiver[kWebSocket] = this;\n    socket[kWebSocket] = this;\n\n    receiver.on('conclude', receiverOnConclude);\n    receiver.on('drain', receiverOnDrain);\n    receiver.on('error', receiverOnError);\n    receiver.on('message', receiverOnMessage);\n    receiver.on('ping', receiverOnPing);\n    receiver.on('pong', receiverOnPong);\n\n    socket.setTimeout(0);\n    socket.setNoDelay();\n\n    if (head.length > 0) socket.unshift(head);\n\n    socket.on('close', socketOnClose);\n    socket.on('data', socketOnData);\n    socket.on('end', socketOnEnd);\n    socket.on('error', socketOnError);\n\n    this._readyState = WebSocket.OPEN;\n    this.emit('open');\n  }\n\n  /**\n   * Emit the `'close'` event.\n   *\n   * @private\n   */\n  emitClose() {\n    if (!this._socket) {\n      this._readyState = WebSocket.CLOSED;\n      this.emit('close', this._closeCode, this._closeMessage);\n      return;\n    }\n\n    if (this._extensions[PerMessageDeflate.extensionName]) {\n      this._extensions[PerMessageDeflate.extensionName].cleanup();\n    }\n\n    this._receiver.removeAllListeners();\n    this._readyState = WebSocket.CLOSED;\n    this.emit('close', this._closeCode, this._closeMessage);\n  }\n\n  /**\n   * Start a closing handshake.\n   *\n   *          +----------+   +-----------+   +----------+\n   *     - - -|ws.close()|-->|close frame|-->|ws.close()|- - -\n   *    |     +----------+   +-----------+   +----------+     |\n   *          +----------+   +-----------+         |\n   * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING\n   *          +----------+   +-----------+   |\n   *    |           |                        |   +---+        |\n   *                +------------------------+-->|fin| - - - -\n   *    |         +---+                      |   +---+\n   *     - - - - -|fin|<---------------------+\n   *              +---+\n   *\n   * @param {Number} [code] Status code explaining why the connection is closing\n   * @param {(String|Buffer)} [data] The reason why the connection is\n   *     closing\n   * @public\n   */\n  close(code, data) {\n    if (this.readyState === WebSocket.CLOSED) return;\n    if (this.readyState === WebSocket.CONNECTING) {\n      const msg = 'WebSocket was closed before the connection was established';\n      return abortHandshake(this, this._req, msg);\n    }\n\n    if (this.readyState === WebSocket.CLOSING) {\n      if (\n        this._closeFrameSent &&\n        (this._closeFrameReceived || this._receiver._writableState.errorEmitted)\n      ) {\n        this._socket.end();\n      }\n\n      return;\n    }\n\n    this._readyState = WebSocket.CLOSING;\n    this._sender.close(code, data, !this._isServer, (err) => {\n      //\n      // This error is handled by the `'error'` listener on the socket. We only\n      // want to know if the close frame has been sent here.\n      //\n      if (err) return;\n\n      this._closeFrameSent = true;\n\n      if (\n        this._closeFrameReceived ||\n        this._receiver._writableState.errorEmitted\n      ) {\n        this._socket.end();\n      }\n    });\n\n    //\n    // Specify a timeout for the closing handshake to complete.\n    //\n    this._closeTimer = setTimeout(\n      this._socket.destroy.bind(this._socket),\n      closeTimeout\n    );\n  }\n\n  /**\n   * Pause the socket.\n   *\n   * @public\n   */\n  pause() {\n    if (\n      this.readyState === WebSocket.CONNECTING ||\n      this.readyState === WebSocket.CLOSED\n    ) {\n      return;\n    }\n\n    this._paused = true;\n    this._socket.pause();\n  }\n\n  /**\n   * Send a ping.\n   *\n   * @param {*} [data] The data to send\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when the ping is sent\n   * @public\n   */\n  ping(data, mask, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof data === 'function') {\n      cb = data;\n      data = mask = undefined;\n    } else if (typeof mask === 'function') {\n      cb = mask;\n      mask = undefined;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    if (mask === undefined) mask = !this._isServer;\n    this._sender.ping(data || EMPTY_BUFFER, mask, cb);\n  }\n\n  /**\n   * Send a pong.\n   *\n   * @param {*} [data] The data to send\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when the pong is sent\n   * @public\n   */\n  pong(data, mask, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof data === 'function') {\n      cb = data;\n      data = mask = undefined;\n    } else if (typeof mask === 'function') {\n      cb = mask;\n      mask = undefined;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    if (mask === undefined) mask = !this._isServer;\n    this._sender.pong(data || EMPTY_BUFFER, mask, cb);\n  }\n\n  /**\n   * Resume the socket.\n   *\n   * @public\n   */\n  resume() {\n    if (\n      this.readyState === WebSocket.CONNECTING ||\n      this.readyState === WebSocket.CLOSED\n    ) {\n      return;\n    }\n\n    this._paused = false;\n    if (!this._receiver._writableState.needDrain) this._socket.resume();\n  }\n\n  /**\n   * Send a data message.\n   *\n   * @param {*} data The message to send\n   * @param {Object} [options] Options object\n   * @param {Boolean} [options.binary] Specifies whether `data` is binary or\n   *     text\n   * @param {Boolean} [options.compress] Specifies whether or not to compress\n   *     `data`\n   * @param {Boolean} [options.fin=true] Specifies whether the fragment is the\n   *     last one\n   * @param {Boolean} [options.mask] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when data is written out\n   * @public\n   */\n  send(data, options, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof options === 'function') {\n      cb = options;\n      options = {};\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    const opts = {\n      binary: typeof data !== 'string',\n      mask: !this._isServer,\n      compress: true,\n      fin: true,\n      ...options\n    };\n\n    if (!this._extensions[PerMessageDeflate.extensionName]) {\n      opts.compress = false;\n    }\n\n    this._sender.send(data || EMPTY_BUFFER, opts, cb);\n  }\n\n  /**\n   * Forcibly close the connection.\n   *\n   * @public\n   */\n  terminate() {\n    if (this.readyState === WebSocket.CLOSED) return;\n    if (this.readyState === WebSocket.CONNECTING) {\n      const msg = 'WebSocket was closed before the connection was established';\n      return abortHandshake(this, this._req, msg);\n    }\n\n    if (this._socket) {\n      this._readyState = WebSocket.CLOSING;\n      this._socket.destroy();\n    }\n  }\n}\n\n/**\n * @constant {Number} CONNECTING\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CONNECTING', {\n  enumerable: true,\n  value: readyStates.indexOf('CONNECTING')\n});\n\n/**\n * @constant {Number} CONNECTING\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CONNECTING', {\n  enumerable: true,\n  value: readyStates.indexOf('CONNECTING')\n});\n\n/**\n * @constant {Number} OPEN\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'OPEN', {\n  enumerable: true,\n  value: readyStates.indexOf('OPEN')\n});\n\n/**\n * @constant {Number} OPEN\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'OPEN', {\n  enumerable: true,\n  value: readyStates.indexOf('OPEN')\n});\n\n/**\n * @constant {Number} CLOSING\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CLOSING', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSING')\n});\n\n/**\n * @constant {Number} CLOSING\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CLOSING', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSING')\n});\n\n/**\n * @constant {Number} CLOSED\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CLOSED', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSED')\n});\n\n/**\n * @constant {Number} CLOSED\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CLOSED', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSED')\n});\n\n[\n  'binaryType',\n  'bufferedAmount',\n  'extensions',\n  'isPaused',\n  'protocol',\n  'readyState',\n  'url'\n].forEach((property) => {\n  Object.defineProperty(WebSocket.prototype, property, { enumerable: true });\n});\n\n//\n// Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.\n// See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface\n//\n['open', 'error', 'close', 'message'].forEach((method) => {\n  Object.defineProperty(WebSocket.prototype, `on${method}`, {\n    enumerable: true,\n    get() {\n      for (const listener of this.listeners(method)) {\n        if (listener[kForOnEventAttribute]) return listener[kListener];\n      }\n\n      return null;\n    },\n    set(handler) {\n      for (const listener of this.listeners(method)) {\n        if (listener[kForOnEventAttribute]) {\n          this.removeListener(method, listener);\n          break;\n        }\n      }\n\n      if (typeof handler !== 'function') return;\n\n      this.addEventListener(method, handler, {\n        [kForOnEventAttribute]: true\n      });\n    }\n  });\n});\n\nWebSocket.prototype.addEventListener = addEventListener;\nWebSocket.prototype.removeEventListener = removeEventListener;\n\nmodule.exports = WebSocket;\n\n/**\n * Initialize a WebSocket client.\n *\n * @param {WebSocket} websocket The client to initialize\n * @param {(String|URL)} address The URL to which to connect\n * @param {Array} protocols The subprotocols\n * @param {Object} [options] Connection options\n * @param {Boolean} [options.followRedirects=false] Whether or not to follow\n *     redirects\n * @param {Function} [options.generateMask] The function used to generate the\n *     masking key\n * @param {Number} [options.handshakeTimeout] Timeout in milliseconds for the\n *     handshake request\n * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n *     size\n * @param {Number} [options.maxRedirects=10] The maximum number of redirects\n *     allowed\n * @param {String} [options.origin] Value of the `Origin` or\n *     `Sec-WebSocket-Origin` header\n * @param {(Boolean|Object)} [options.perMessageDeflate=true] Enable/disable\n *     permessage-deflate\n * @param {Number} [options.protocolVersion=13] Value of the\n *     `Sec-WebSocket-Version` header\n * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n *     not to skip UTF-8 validation for text and close messages\n * @private\n */\nfunction initAsClient(websocket, address, protocols, options) {\n  const opts = {\n    protocolVersion: protocolVersions[1],\n    maxPayload: 100 * 1024 * 1024,\n    skipUTF8Validation: false,\n    perMessageDeflate: true,\n    followRedirects: false,\n    maxRedirects: 10,\n    ...options,\n    createConnection: undefined,\n    socketPath: undefined,\n    hostname: undefined,\n    protocol: undefined,\n    timeout: undefined,\n    method: undefined,\n    host: undefined,\n    path: undefined,\n    port: undefined\n  };\n\n  if (!protocolVersions.includes(opts.protocolVersion)) {\n    throw new RangeError(\n      `Unsupported protocol version: ${opts.protocolVersion} ` +\n        `(supported versions: ${protocolVersions.join(', ')})`\n    );\n  }\n\n  let parsedUrl;\n\n  if (address instanceof URL) {\n    parsedUrl = address;\n    websocket._url = address.href;\n  } else {\n    try {\n      parsedUrl = new URL(address);\n    } catch (e) {\n      throw new SyntaxError(`Invalid URL: ${address}`);\n    }\n\n    websocket._url = address;\n  }\n\n  const isSecure = parsedUrl.protocol === 'wss:';\n  const isUnixSocket = parsedUrl.protocol === 'ws+unix:';\n  let invalidURLMessage;\n\n  if (parsedUrl.protocol !== 'ws:' && !isSecure && !isUnixSocket) {\n    invalidURLMessage =\n      'The URL\\'s protocol must be one of \"ws:\", \"wss:\", or \"ws+unix:\"';\n  } else if (isUnixSocket && !parsedUrl.pathname) {\n    invalidURLMessage = \"The URL's pathname is empty\";\n  } else if (parsedUrl.hash) {\n    invalidURLMessage = 'The URL contains a fragment identifier';\n  }\n\n  if (invalidURLMessage) {\n    const err = new SyntaxError(invalidURLMessage);\n\n    if (websocket._redirects === 0) {\n      throw err;\n    } else {\n      emitErrorAndClose(websocket, err);\n      return;\n    }\n  }\n\n  const defaultPort = isSecure ? 443 : 80;\n  const key = randomBytes(16).toString('base64');\n  const get = isSecure ? https.get : http.get;\n  const protocolSet = new Set();\n  let perMessageDeflate;\n\n  opts.createConnection = isSecure ? tlsConnect : netConnect;\n  opts.defaultPort = opts.defaultPort || defaultPort;\n  opts.port = parsedUrl.port || defaultPort;\n  opts.host = parsedUrl.hostname.startsWith('[')\n    ? parsedUrl.hostname.slice(1, -1)\n    : parsedUrl.hostname;\n  opts.headers = {\n    'Sec-WebSocket-Version': opts.protocolVersion,\n    'Sec-WebSocket-Key': key,\n    Connection: 'Upgrade',\n    Upgrade: 'websocket',\n    ...opts.headers\n  };\n  opts.path = parsedUrl.pathname + parsedUrl.search;\n  opts.timeout = opts.handshakeTimeout;\n\n  if (opts.perMessageDeflate) {\n    perMessageDeflate = new PerMessageDeflate(\n      opts.perMessageDeflate !== true ? opts.perMessageDeflate : {},\n      false,\n      opts.maxPayload\n    );\n    opts.headers['Sec-WebSocket-Extensions'] = format({\n      [PerMessageDeflate.extensionName]: perMessageDeflate.offer()\n    });\n  }\n  if (protocols.length) {\n    for (const protocol of protocols) {\n      if (\n        typeof protocol !== 'string' ||\n        !subprotocolRegex.test(protocol) ||\n        protocolSet.has(protocol)\n      ) {\n        throw new SyntaxError(\n          'An invalid or duplicated subprotocol was specified'\n        );\n      }\n\n      protocolSet.add(protocol);\n    }\n\n    opts.headers['Sec-WebSocket-Protocol'] = protocols.join(',');\n  }\n  if (opts.origin) {\n    if (opts.protocolVersion < 13) {\n      opts.headers['Sec-WebSocket-Origin'] = opts.origin;\n    } else {\n      opts.headers.Origin = opts.origin;\n    }\n  }\n  if (parsedUrl.username || parsedUrl.password) {\n    opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;\n  }\n\n  if (isUnixSocket) {\n    const parts = opts.path.split(':');\n\n    opts.socketPath = parts[0];\n    opts.path = parts[1];\n  }\n\n  if (opts.followRedirects) {\n    if (websocket._redirects === 0) {\n      websocket._originalHost = parsedUrl.host;\n\n      const headers = options && options.headers;\n\n      //\n      // Shallow copy the user provided options so that headers can be changed\n      // without mutating the original object.\n      //\n      options = { ...options, headers: {} };\n\n      if (headers) {\n        for (const [key, value] of Object.entries(headers)) {\n          options.headers[key.toLowerCase()] = value;\n        }\n      }\n    } else if (parsedUrl.host !== websocket._originalHost) {\n      //\n      // Match curl 7.77.0 behavior and drop the following headers. These\n      // headers are also dropped when following a redirect to a subdomain.\n      //\n      delete opts.headers.authorization;\n      delete opts.headers.cookie;\n      delete opts.headers.host;\n      opts.auth = undefined;\n    }\n\n    //\n    // Match curl 7.77.0 behavior and make the first `Authorization` header win.\n    // If the `Authorization` header is set, then there is nothing to do as it\n    // will take precedence.\n    //\n    if (opts.auth && !options.headers.authorization) {\n      options.headers.authorization =\n        'Basic ' + Buffer.from(opts.auth).toString('base64');\n    }\n  }\n\n  let req = (websocket._req = get(opts));\n\n  if (opts.timeout) {\n    req.on('timeout', () => {\n      abortHandshake(websocket, req, 'Opening handshake has timed out');\n    });\n  }\n\n  req.on('error', (err) => {\n    if (req === null || req.aborted) return;\n\n    req = websocket._req = null;\n    emitErrorAndClose(websocket, err);\n  });\n\n  req.on('response', (res) => {\n    const location = res.headers.location;\n    const statusCode = res.statusCode;\n\n    if (\n      location &&\n      opts.followRedirects &&\n      statusCode >= 300 &&\n      statusCode < 400\n    ) {\n      if (++websocket._redirects > opts.maxRedirects) {\n        abortHandshake(websocket, req, 'Maximum redirects exceeded');\n        return;\n      }\n\n      req.abort();\n\n      let addr;\n\n      try {\n        addr = new URL(location, address);\n      } catch (e) {\n        const err = new SyntaxError(`Invalid URL: ${location}`);\n        emitErrorAndClose(websocket, err);\n        return;\n      }\n\n      initAsClient(websocket, addr, protocols, options);\n    } else if (!websocket.emit('unexpected-response', req, res)) {\n      abortHandshake(\n        websocket,\n        req,\n        `Unexpected server response: ${res.statusCode}`\n      );\n    }\n  });\n\n  req.on('upgrade', (res, socket, head) => {\n    websocket.emit('upgrade', res);\n\n    //\n    // The user may have closed the connection from a listener of the `upgrade`\n    // event.\n    //\n    if (websocket.readyState !== WebSocket.CONNECTING) return;\n\n    req = websocket._req = null;\n\n    const digest = createHash('sha1')\n      .update(key + GUID)\n      .digest('base64');\n\n    if (res.headers['sec-websocket-accept'] !== digest) {\n      abortHandshake(websocket, socket, 'Invalid Sec-WebSocket-Accept header');\n      return;\n    }\n\n    const serverProt = res.headers['sec-websocket-protocol'];\n    let protError;\n\n    if (serverProt !== undefined) {\n      if (!protocolSet.size) {\n        protError = 'Server sent a subprotocol but none was requested';\n      } else if (!protocolSet.has(serverProt)) {\n        protError = 'Server sent an invalid subprotocol';\n      }\n    } else if (protocolSet.size) {\n      protError = 'Server sent no subprotocol';\n    }\n\n    if (protError) {\n      abortHandshake(websocket, socket, protError);\n      return;\n    }\n\n    if (serverProt) websocket._protocol = serverProt;\n\n    const secWebSocketExtensions = res.headers['sec-websocket-extensions'];\n\n    if (secWebSocketExtensions !== undefined) {\n      if (!perMessageDeflate) {\n        const message =\n          'Server sent a Sec-WebSocket-Extensions header but no extension ' +\n          'was requested';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      let extensions;\n\n      try {\n        extensions = parse(secWebSocketExtensions);\n      } catch (err) {\n        const message = 'Invalid Sec-WebSocket-Extensions header';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      const extensionNames = Object.keys(extensions);\n\n      if (\n        extensionNames.length !== 1 ||\n        extensionNames[0] !== PerMessageDeflate.extensionName\n      ) {\n        const message = 'Server indicated an extension that was not requested';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      try {\n        perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);\n      } catch (err) {\n        const message = 'Invalid Sec-WebSocket-Extensions header';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      websocket._extensions[PerMessageDeflate.extensionName] =\n        perMessageDeflate;\n    }\n\n    websocket.setSocket(socket, head, {\n      generateMask: opts.generateMask,\n      maxPayload: opts.maxPayload,\n      skipUTF8Validation: opts.skipUTF8Validation\n    });\n  });\n}\n\n/**\n * Emit the `'error'` and `'close'` event.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {Error} The error to emit\n * @private\n */\nfunction emitErrorAndClose(websocket, err) {\n  websocket._readyState = WebSocket.CLOSING;\n  websocket.emit('error', err);\n  websocket.emitClose();\n}\n\n/**\n * Create a `net.Socket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {net.Socket} The newly created socket used to start the connection\n * @private\n */\nfunction netConnect(options) {\n  options.path = options.socketPath;\n  return net.connect(options);\n}\n\n/**\n * Create a `tls.TLSSocket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {tls.TLSSocket} The newly created socket used to start the connection\n * @private\n */\nfunction tlsConnect(options) {\n  options.path = undefined;\n\n  if (!options.servername && options.servername !== '') {\n    options.servername = net.isIP(options.host) ? '' : options.host;\n  }\n\n  return tls.connect(options);\n}\n\n/**\n * Abort the handshake and emit an error.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {(http.ClientRequest|net.Socket|tls.Socket)} stream The request to\n *     abort or the socket to destroy\n * @param {String} message The error message\n * @private\n */\nfunction abortHandshake(websocket, stream, message) {\n  websocket._readyState = WebSocket.CLOSING;\n\n  const err = new Error(message);\n  Error.captureStackTrace(err, abortHandshake);\n\n  if (stream.setHeader) {\n    stream.abort();\n\n    if (stream.socket && !stream.socket.destroyed) {\n      //\n      // On Node.js >= 14.3.0 `request.abort()` does not destroy the socket if\n      // called after the request completed. See\n      // https://github.com/websockets/ws/issues/1869.\n      //\n      stream.socket.destroy();\n    }\n\n    stream.once('abort', websocket.emitClose.bind(websocket));\n    websocket.emit('error', err);\n  } else {\n    stream.destroy(err);\n    stream.once('error', websocket.emit.bind(websocket, 'error'));\n    stream.once('close', websocket.emitClose.bind(websocket));\n  }\n}\n\n/**\n * Handle cases where the `ping()`, `pong()`, or `send()` methods are called\n * when the `readyState` attribute is `CLOSING` or `CLOSED`.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {*} [data] The data to send\n * @param {Function} [cb] Callback\n * @private\n */\nfunction sendAfterClose(websocket, data, cb) {\n  if (data) {\n    const length = toBuffer(data).length;\n\n    //\n    // The `_bufferedAmount` property is used only when the peer is a client and\n    // the opening handshake fails. Under these circumstances, in fact, the\n    // `setSocket()` method is not called, so the `_socket` and `_sender`\n    // properties are set to `null`.\n    //\n    if (websocket._socket) websocket._sender._bufferedBytes += length;\n    else websocket._bufferedAmount += length;\n  }\n\n  if (cb) {\n    const err = new Error(\n      `WebSocket is not open: readyState ${websocket.readyState} ` +\n        `(${readyStates[websocket.readyState]})`\n    );\n    cb(err);\n  }\n}\n\n/**\n * The listener of the `Receiver` `'conclude'` event.\n *\n * @param {Number} code The status code\n * @param {Buffer} reason The reason for closing\n * @private\n */\nfunction receiverOnConclude(code, reason) {\n  const websocket = this[kWebSocket];\n\n  websocket._closeFrameReceived = true;\n  websocket._closeMessage = reason;\n  websocket._closeCode = code;\n\n  if (websocket._socket[kWebSocket] === undefined) return;\n\n  websocket._socket.removeListener('data', socketOnData);\n  process.nextTick(resume, websocket._socket);\n\n  if (code === 1005) websocket.close();\n  else websocket.close(code, reason);\n}\n\n/**\n * The listener of the `Receiver` `'drain'` event.\n *\n * @private\n */\nfunction receiverOnDrain() {\n  const websocket = this[kWebSocket];\n\n  if (!websocket.isPaused) websocket._socket.resume();\n}\n\n/**\n * The listener of the `Receiver` `'error'` event.\n *\n * @param {(RangeError|Error)} err The emitted error\n * @private\n */\nfunction receiverOnError(err) {\n  const websocket = this[kWebSocket];\n\n  if (websocket._socket[kWebSocket] !== undefined) {\n    websocket._socket.removeListener('data', socketOnData);\n\n    //\n    // On Node.js < 14.0.0 the `'error'` event is emitted synchronously. See\n    // https://github.com/websockets/ws/issues/1940.\n    //\n    process.nextTick(resume, websocket._socket);\n\n    websocket.close(err[kStatusCode]);\n  }\n\n  websocket.emit('error', err);\n}\n\n/**\n * The listener of the `Receiver` `'finish'` event.\n *\n * @private\n */\nfunction receiverOnFinish() {\n  this[kWebSocket].emitClose();\n}\n\n/**\n * The listener of the `Receiver` `'message'` event.\n *\n * @param {Buffer|ArrayBuffer|Buffer[])} data The message\n * @param {Boolean} isBinary Specifies whether the message is binary or not\n * @private\n */\nfunction receiverOnMessage(data, isBinary) {\n  this[kWebSocket].emit('message', data, isBinary);\n}\n\n/**\n * The listener of the `Receiver` `'ping'` event.\n *\n * @param {Buffer} data The data included in the ping frame\n * @private\n */\nfunction receiverOnPing(data) {\n  const websocket = this[kWebSocket];\n\n  websocket.pong(data, !websocket._isServer, NOOP);\n  websocket.emit('ping', data);\n}\n\n/**\n * The listener of the `Receiver` `'pong'` event.\n *\n * @param {Buffer} data The data included in the pong frame\n * @private\n */\nfunction receiverOnPong(data) {\n  this[kWebSocket].emit('pong', data);\n}\n\n/**\n * Resume a readable stream\n *\n * @param {Readable} stream The readable stream\n * @private\n */\nfunction resume(stream) {\n  stream.resume();\n}\n\n/**\n * The listener of the `net.Socket` `'close'` event.\n *\n * @private\n */\nfunction socketOnClose() {\n  const websocket = this[kWebSocket];\n\n  this.removeListener('close', socketOnClose);\n  this.removeListener('data', socketOnData);\n  this.removeListener('end', socketOnEnd);\n\n  websocket._readyState = WebSocket.CLOSING;\n\n  let chunk;\n\n  //\n  // The close frame might not have been received or the `'end'` event emitted,\n  // for example, if the socket was destroyed due to an error. Ensure that the\n  // `receiver` stream is closed after writing any remaining buffered data to\n  // it. If the readable side of the socket is in flowing mode then there is no\n  // buffered data as everything has been already written and `readable.read()`\n  // will return `null`. If instead, the socket is paused, any possible buffered\n  // data will be read as a single chunk.\n  //\n  if (\n    !this._readableState.endEmitted &&\n    !websocket._closeFrameReceived &&\n    !websocket._receiver._writableState.errorEmitted &&\n    (chunk = websocket._socket.read()) !== null\n  ) {\n    websocket._receiver.write(chunk);\n  }\n\n  websocket._receiver.end();\n\n  this[kWebSocket] = undefined;\n\n  clearTimeout(websocket._closeTimer);\n\n  if (\n    websocket._receiver._writableState.finished ||\n    websocket._receiver._writableState.errorEmitted\n  ) {\n    websocket.emitClose();\n  } else {\n    websocket._receiver.on('error', receiverOnFinish);\n    websocket._receiver.on('finish', receiverOnFinish);\n  }\n}\n\n/**\n * The listener of the `net.Socket` `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction socketOnData(chunk) {\n  if (!this[kWebSocket]._receiver.write(chunk)) {\n    this.pause();\n  }\n}\n\n/**\n * The listener of the `net.Socket` `'end'` event.\n *\n * @private\n */\nfunction socketOnEnd() {\n  const websocket = this[kWebSocket];\n\n  websocket._readyState = WebSocket.CLOSING;\n  websocket._receiver.end();\n  this.end();\n}\n\n/**\n * The listener of the `net.Socket` `'error'` event.\n *\n * @private\n */\nfunction socketOnError() {\n  const websocket = this[kWebSocket];\n\n  this.removeListener('error', socketOnError);\n  this.on('error', NOOP);\n\n  if (websocket) {\n    websocket._readyState = WebSocket.CLOSING;\n    this.destroy();\n  }\n}\n","module.exports = require(\"bufferutil\");","module.exports = require(\"utf-8-validate\");","module.exports = require(\"buffer\");","module.exports = require(\"constants\");","module.exports = require(\"crypto\");","module.exports = require(\"dns\");","module.exports = require(\"events\");","module.exports = require(\"fs\");","module.exports = require(\"http\");","module.exports = require(\"https\");","module.exports = require(\"net\");","module.exports = require(\"os\");","module.exports = require(\"stream\");","module.exports = require(\"tls\");","module.exports = require(\"url\");","module.exports = require(\"util\");","module.exports = require(\"zlib\");","// GENERATED FILE. DO NOT EDIT.\nvar Long = (function(exports) {\n  \"use strict\";\n  \n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  \n  /**\n   * @license\n   * Copyright 2009 The Closure Library Authors\n   * Copyright 2020 Daniel Wirtz / The long.js Authors.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   * SPDX-License-Identifier: Apache-2.0\n   */\n  // WebAssembly optimizations to do native i64 multiplication and divide\n  var wasm = null;\n  \n  try {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;\n  } catch (e) {// no wasm support :(\n  }\n  /**\n   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n   *  See the from* functions below for more convenient ways of constructing Longs.\n   * @exports Long\n   * @class A Long class for representing a 64 bit two's-complement integer value.\n   * @param {number} low The low (signed) 32 bits of the long\n   * @param {number} high The high (signed) 32 bits of the long\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @constructor\n   */\n  \n  \n  function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n  \n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n  \n    this.unsigned = !!unsigned;\n  } // The internal representation of a long is the two given signed, 32-bit values.\n  // We use 32-bit pieces because these are the size of integers on which\n  // Javascript performs bit-operations.  For operations like addition and\n  // multiplication, we split each number into 16 bit pieces, which can easily be\n  // multiplied within Javascript's floating-point representation without overflow\n  // or change in sign.\n  //\n  // In the algorithms below, we frequently reduce the negative case to the\n  // positive case by negating the input(s) and then post-processing the result.\n  // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n  // a positive number, it overflows back into a negative).  Not handling this\n  // case would often result in infinite recursion.\n  //\n  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n  // methods on which they depend.\n  \n  /**\n   * An indicator used to reliably determine if an object is a Long or not.\n   * @type {boolean}\n   * @const\n   * @private\n   */\n  \n  \n  Long.prototype.__isLong__;\n  Object.defineProperty(Long.prototype, \"__isLong__\", {\n    value: true\n  });\n  /**\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   * @inner\n   */\n  \n  function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n  }\n  /**\n   * @function\n   * @param {*} value number\n   * @returns {number}\n   * @inner\n   */\n  \n  \n  function ctz32(value) {\n    var c = Math.clz32(value & -value);\n    return value ? 31 - c : c;\n  }\n  /**\n   * Tests if the specified object is a Long.\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   */\n  \n  \n  Long.isLong = isLong;\n  /**\n   * A cache of the Long representations of small integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var INT_CACHE = {};\n  /**\n   * A cache of the Long representations of small unsigned integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var UINT_CACHE = {};\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n  \n    if (unsigned) {\n      value >>>= 0;\n  \n      if (cache = 0 <= value && value < 256) {\n        cachedObj = UINT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, 0, true);\n      if (cache) UINT_CACHE[value] = obj;\n      return obj;\n    } else {\n      value |= 0;\n  \n      if (cache = -128 <= value && value < 128) {\n        cachedObj = INT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, value < 0 ? -1 : 0, false);\n      if (cache) INT_CACHE[value] = obj;\n      return obj;\n    }\n  }\n  /**\n   * Returns a Long representing the given 32 bit integer value.\n   * @function\n   * @param {number} value The 32 bit integer in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromInt = fromInt;\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromNumber(value, unsigned) {\n    if (isNaN(value)) return unsigned ? UZERO : ZERO;\n  \n    if (unsigned) {\n      if (value < 0) return UZERO;\n      if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n    } else {\n      if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n      if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n    }\n  \n    if (value < 0) return fromNumber(-value, unsigned).neg();\n    return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n  }\n  /**\n   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n   * @function\n   * @param {number} value The number in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromNumber = fromNumber;\n  /**\n   * @param {number} lowBits\n   * @param {number} highBits\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n  }\n  /**\n   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n   *  assumed to use 32 bits.\n   * @function\n   * @param {number} lowBits The low 32 bits\n   * @param {number} highBits The high 32 bits\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBits = fromBits;\n  /**\n   * @function\n   * @param {number} base\n   * @param {number} exponent\n   * @returns {number}\n   * @inner\n   */\n  \n  var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n  \n  /**\n   * @param {string} str\n   * @param {(boolean|number)=} unsigned\n   * @param {number=} radix\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromString(str, unsigned, radix) {\n    if (str.length === 0) throw Error('empty string');\n  \n    if (typeof unsigned === 'number') {\n      // For goog.math.long compatibility\n      radix = unsigned;\n      unsigned = false;\n    } else {\n      unsigned = !!unsigned;\n    }\n  \n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return unsigned ? UZERO : ZERO;\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    var p;\n    if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');else if (p === 0) {\n      return fromString(str.substring(1), unsigned, radix).neg();\n    } // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n  \n    for (var i = 0; i < str.length; i += 8) {\n      var size = Math.min(8, str.length - i),\n          value = parseInt(str.substring(i, i + size), radix);\n  \n      if (size < 8) {\n        var power = fromNumber(pow_dbl(radix, size));\n        result = result.mul(power).add(fromNumber(value));\n      } else {\n        result = result.mul(radixToPower);\n        result = result.add(fromNumber(value));\n      }\n    }\n  \n    result.unsigned = unsigned;\n    return result;\n  }\n  /**\n   * Returns a Long representation of the given string, written using the specified radix.\n   * @function\n   * @param {string} str The textual representation of the Long\n   * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n   * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromString = fromString;\n  /**\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromValue(val, unsigned) {\n    if (typeof val === 'number') return fromNumber(val, unsigned);\n    if (typeof val === 'string') return fromString(val, unsigned); // Throws for non-objects, converts non-instanceof Long:\n  \n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n  }\n  /**\n   * Converts the specified value to a Long using the appropriate from* function for its type.\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long}\n   */\n  \n  \n  Long.fromValue = fromValue; // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n  // no runtime penalty for these.\n  \n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_16_DBL = 1 << 16;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24_DBL = 1 << 24;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n  /**\n   * @type {!Long}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ZERO = fromInt(0);\n  /**\n   * Signed zero.\n   * @type {!Long}\n   */\n  \n  Long.ZERO = ZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UZERO = fromInt(0, true);\n  /**\n   * Unsigned zero.\n   * @type {!Long}\n   */\n  \n  Long.UZERO = UZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ONE = fromInt(1);\n  /**\n   * Signed one.\n   * @type {!Long}\n   */\n  \n  Long.ONE = ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UONE = fromInt(1, true);\n  /**\n   * Unsigned one.\n   * @type {!Long}\n   */\n  \n  Long.UONE = UONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var NEG_ONE = fromInt(-1);\n  /**\n   * Signed negative one.\n   * @type {!Long}\n   */\n  \n  Long.NEG_ONE = NEG_ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n  /**\n   * Maximum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_VALUE = MAX_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n  /**\n   * Maximum unsigned value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n  /**\n   * Minimum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MIN_VALUE = MIN_VALUE;\n  /**\n   * @alias Long.prototype\n   * @inner\n   */\n  \n  var LongPrototype = Long.prototype;\n  /**\n   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  LongPrototype.toInt = function toInt() {\n    return this.unsigned ? this.low >>> 0 : this.low;\n  };\n  /**\n   * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.toNumber = function toNumber() {\n    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n  };\n  /**\n   * Converts the Long to a string written in the specified radix.\n   * @this {!Long}\n   * @param {number=} radix Radix (2-36), defaults to 10\n   * @returns {string}\n   * @override\n   * @throws {RangeError} If `radix` is out of range\n   */\n  \n  \n  LongPrototype.toString = function toString(radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    if (this.isZero()) return '0';\n  \n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      if (this.eq(MIN_VALUE)) {\n        // We need to change the Long value before it can be negated, so we remove\n        // the bottom-most digit in this base and then recurse to do the rest.\n        var radixLong = fromNumber(radix),\n            div = this.div(radixLong),\n            rem1 = div.mul(radixLong).sub(this);\n        return div.toString(radix) + rem1.toInt().toString(radix);\n      } else return '-' + this.neg().toString(radix);\n    } // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n  \n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n        rem = this;\n    var result = '';\n  \n    while (true) {\n      var remDiv = rem.div(radixToPower),\n          intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n          digits = intval.toString(radix);\n      rem = remDiv;\n      if (rem.isZero()) return digits + result;else {\n        while (digits.length < 6) digits = '0' + digits;\n  \n        result = '' + digits + result;\n      }\n    }\n  };\n  /**\n   * Gets the high 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed high bits\n   */\n  \n  \n  LongPrototype.getHighBits = function getHighBits() {\n    return this.high;\n  };\n  /**\n   * Gets the high 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned high bits\n   */\n  \n  \n  LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n    return this.high >>> 0;\n  };\n  /**\n   * Gets the low 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed low bits\n   */\n  \n  \n  LongPrototype.getLowBits = function getLowBits() {\n    return this.low;\n  };\n  /**\n   * Gets the low 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned low bits\n   */\n  \n  \n  LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n    return this.low >>> 0;\n  };\n  /**\n   * Gets the number of bits needed to represent the absolute value of this Long.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n    if (this.isNegative()) // Unsigned Longs are never negative\n      return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n    var val = this.high != 0 ? this.high : this.low;\n  \n    for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;\n  \n    return this.high != 0 ? bit + 33 : bit + 1;\n  };\n  /**\n   * Tests if this Long's value equals zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isZero = function isZero() {\n    return this.high === 0 && this.low === 0;\n  };\n  /**\n   * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eqz = LongPrototype.isZero;\n  /**\n   * Tests if this Long's value is negative.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  LongPrototype.isNegative = function isNegative() {\n    return !this.unsigned && this.high < 0;\n  };\n  /**\n   * Tests if this Long's value is positive or zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isPositive = function isPositive() {\n    return this.unsigned || this.high >= 0;\n  };\n  /**\n   * Tests if this Long's value is odd.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isOdd = function isOdd() {\n    return (this.low & 1) === 1;\n  };\n  /**\n   * Tests if this Long's value is even.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isEven = function isEven() {\n    return (this.low & 1) === 0;\n  };\n  /**\n   * Tests if this Long's value equals the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.equals = function equals(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n    return this.high === other.high && this.low === other.low;\n  };\n  /**\n   * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eq = LongPrototype.equals;\n  /**\n   * Tests if this Long's value differs from the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.notEquals = function notEquals(other) {\n    return !this.eq(\n    /* validates */\n    other);\n  };\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.neq = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ne = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value is less than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThan = function lessThan(other) {\n    return this.comp(\n    /* validates */\n    other) < 0;\n  };\n  /**\n   * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lt = LongPrototype.lessThan;\n  /**\n   * Tests if this Long's value is less than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) <= 0;\n  };\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lte = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.le = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThan = function greaterThan(other) {\n    return this.comp(\n    /* validates */\n    other) > 0;\n  };\n  /**\n   * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gt = LongPrototype.greaterThan;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) >= 0;\n  };\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n  /**\n   * Compares this Long's value with the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  LongPrototype.compare = function compare(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.eq(other)) return 0;\n    var thisNeg = this.isNegative(),\n        otherNeg = other.isNegative();\n    if (thisNeg && !otherNeg) return -1;\n    if (!thisNeg && otherNeg) return 1; // At this point the sign bits are the same\n  \n    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1; // Both are positive if at least one is unsigned\n  \n    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n  };\n  /**\n   * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  \n  LongPrototype.comp = LongPrototype.compare;\n  /**\n   * Negates this Long's value.\n   * @this {!Long}\n   * @returns {!Long} Negated Long\n   */\n  \n  LongPrototype.negate = function negate() {\n    if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\n    return this.not().add(ONE);\n  };\n  /**\n   * Negates this Long's value. This is an alias of {@link Long#negate}.\n   * @function\n   * @returns {!Long} Negated Long\n   */\n  \n  \n  LongPrototype.neg = LongPrototype.negate;\n  /**\n   * Returns the sum of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} addend Addend\n   * @returns {!Long} Sum\n   */\n  \n  LongPrototype.add = function add(addend) {\n    if (!isLong(addend)) addend = fromValue(addend); // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the difference of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.subtract = function subtract(subtrahend) {\n    if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n    return this.add(subtrahend.neg());\n  };\n  /**\n   * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n   * @function\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.sub = LongPrototype.subtract;\n  /**\n   * Returns the product of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  LongPrototype.multiply = function multiply(multiplier) {\n    if (this.isZero()) return this;\n    if (!isLong(multiplier)) multiplier = fromValue(multiplier); // use wasm support if present\n  \n    if (wasm) {\n      var low = wasm[\"mul\"](this.low, this.high, multiplier.low, multiplier.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;\n    if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\n    if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\n  \n    if (this.isNegative()) {\n      if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();\n    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg(); // If both longs are small, use float multiplication\n  \n  \n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned); // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n   * @function\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  \n  LongPrototype.mul = LongPrototype.multiply;\n  /**\n   * Returns this Long divided by the specified. The result is signed if this Long is signed or\n   *  unsigned if this Long is unsigned.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  LongPrototype.divide = function divide(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor);\n    if (divisor.isZero()) throw Error('division by zero'); // use wasm support if present\n  \n    if (wasm) {\n      // guard against signed division overflow: the largest\n      // negative number / -1 would be 1 larger than the largest\n      // positive number, due to two's complement.\n      if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {\n        // be consistent with non-wasm code path\n        return this;\n      }\n  \n      var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (this.isZero()) return this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n  \n    if (!this.unsigned) {\n      // This section is only relevant for signed longs and is derived from the\n      // closure library as a whole.\n      if (this.eq(MIN_VALUE)) {\n        if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n        else if (divisor.eq(MIN_VALUE)) return ONE;else {\n          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n          var halfThis = this.shr(1);\n          approx = halfThis.div(divisor).shl(1);\n  \n          if (approx.eq(ZERO)) {\n            return divisor.isNegative() ? ONE : NEG_ONE;\n          } else {\n            rem = this.sub(divisor.mul(approx));\n            res = approx.add(rem.div(divisor));\n            return res;\n          }\n        }\n      } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\n  \n      if (this.isNegative()) {\n        if (divisor.isNegative()) return this.neg().div(divisor.neg());\n        return this.neg().div(divisor).neg();\n      } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n  \n      res = ZERO;\n    } else {\n      // The algorithm below has not been made for unsigned longs. It's therefore\n      // required to take special care of the MSB prior to running it.\n      if (!divisor.unsigned) divisor = divisor.toUnsigned();\n      if (divisor.gt(this)) return UZERO;\n      if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n        return UONE;\n      res = UZERO;\n    } // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n  \n  \n    rem = this;\n  \n    while (rem.gte(divisor)) {\n      // Approximate the result of division. This may be a little greater or\n      // smaller than the actual value.\n      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or\n      // the smallest non-fractional digit, whichever is larger.\n  \n      var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n          delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\n          // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      approxRes = fromNumber(approx),\n          approxRem = approxRes.mul(divisor);\n  \n      while (approxRem.isNegative() || approxRem.gt(rem)) {\n        approx -= delta;\n        approxRes = fromNumber(approx, this.unsigned);\n        approxRem = approxRes.mul(divisor);\n      } // We know the answer can't be zero... and actually, zero would cause\n      // infinite recursion since we would make no progress.\n  \n  \n      if (approxRes.isZero()) approxRes = ONE;\n      res = res.add(approxRes);\n      rem = rem.sub(approxRem);\n    }\n  \n    return res;\n  };\n  /**\n   * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  \n  LongPrototype.div = LongPrototype.divide;\n  /**\n   * Returns this Long modulo the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.modulo = function modulo(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor); // use wasm support if present\n  \n    if (wasm) {\n      var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    return this.sub(this.div(divisor).mul(divisor));\n  };\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  \n  LongPrototype.mod = LongPrototype.modulo;\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.rem = LongPrototype.modulo;\n  /**\n   * Returns the bitwise NOT of this Long.\n   * @this {!Long}\n   * @returns {!Long}\n   */\n  \n  LongPrototype.not = function not() {\n    return fromBits(~this.low, ~this.high, this.unsigned);\n  };\n  /**\n   * Returns count leading zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.countLeadingZeros = function countLeadingZeros() {\n    return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n  };\n  /**\n   * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.clz = LongPrototype.countLeadingZeros;\n  /**\n   * Returns count trailing zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  LongPrototype.countTrailingZeros = function countTrailingZeros() {\n    return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n  };\n  /**\n   * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.ctz = LongPrototype.countTrailingZeros;\n  /**\n   * Returns the bitwise AND of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  LongPrototype.and = function and(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise OR of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.or = function or(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise XOR of this Long and the given one.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.xor = function xor(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shiftLeft = function shiftLeft(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shl = LongPrototype.shiftLeft;\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRight = function shiftRight(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shr = LongPrototype.shiftRight;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);\n    if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n    return fromBits(this.high >>> numBits - 32, 0, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits rotated to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotl = LongPrototype.rotateLeft;\n  /**\n   * Returns this Long with bits rotated to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotr = LongPrototype.rotateRight;\n  /**\n   * Converts this Long to signed.\n   * @this {!Long}\n   * @returns {!Long} Signed long\n   */\n  \n  LongPrototype.toSigned = function toSigned() {\n    if (!this.unsigned) return this;\n    return fromBits(this.low, this.high, false);\n  };\n  /**\n   * Converts this Long to unsigned.\n   * @this {!Long}\n   * @returns {!Long} Unsigned long\n   */\n  \n  \n  LongPrototype.toUnsigned = function toUnsigned() {\n    if (this.unsigned) return this;\n    return fromBits(this.low, this.high, true);\n  };\n  /**\n   * Converts this Long to its byte representation.\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @this {!Long}\n   * @returns {!Array.<number>} Byte representation\n   */\n  \n  \n  LongPrototype.toBytes = function toBytes(le) {\n    return le ? this.toBytesLE() : this.toBytesBE();\n  };\n  /**\n   * Converts this Long to its little endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Little endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesLE = function toBytesLE() {\n    var hi = this.high,\n        lo = this.low;\n    return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];\n  };\n  /**\n   * Converts this Long to its big endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Big endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesBE = function toBytesBE() {\n    var hi = this.high,\n        lo = this.low;\n    return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];\n  };\n  /**\n   * Creates a Long from its byte representation.\n   * @param {!Array.<number>} bytes Byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytes = function fromBytes(bytes, unsigned, le) {\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n  };\n  /**\n   * Creates a Long from its little endian byte representation.\n   * @param {!Array.<number>} bytes Little endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);\n  };\n  /**\n   * Creates a Long from its big endian byte representation.\n   * @param {!Array.<number>} bytes Big endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);\n  };\n  \n  var _default = Long;\n  exports.default = _default;\n  return \"default\" in exports ? exports.default : exports;\n})({});\nif (typeof define === 'function' && define.amd) define([], function() { return Long; });\nelse if (typeof module === 'object' && typeof exports==='object') module.exports = Long;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(6010);\n"],"names":["module","exports","Base64","Bits","Convert","Hex","Long","KEY_STR","ENC_LUT","DecodeError","Error","LegacyEncoder","base64_encode","input","output","i","chr1","charCodeAt","chr2","chr3","enc1","enc2","enc3","enc4","isNaN","charAt","length","base64_decode","String","fromCharCode","isNode","window","hasBuffer","Buffer","hasBlob","Blob","BufferEncoder","str","from","toString","WindowEncoder","b","a","encode","decode","get","val","shift","numBits","set","dataIn","curMask","ErrorSubcode","OperationError","BufferImpl","TWO_ZEROES_STR","THREE_ZEROES_STR","FOUR_ZEROES_STR","BYTEARRAY_CONVERT_CHUNK","ARRAY_BUFFER_CONVERT_CHUNK","stringToUint8Array","data","dataLength","arrayBuf","ArrayBuffer","uint8Array","Uint8Array","int32ToStr","int32","strToUInt32","arrayBufferToString","ab","len","byteLength","u8","apply","k","r","subarray","stringToArrayBuffer","buffer","int8ToStr","int8","strToInt8","int16ToStr","int16","strToInt16","int24ToStr","int24","strToInt24","strToInt32","int64ToStr","int64","high","low","strToUInt64","fromBits","substr","byteArrayToStr","byteArray","slice","strToByteArray","result","strToHexArray","Array","prototype","map","call","split","c","ucs2ToUtf8","ucs2","unescape","encodeURIComponent","utf8ToUcs2","utf8","decodeURIComponent","escape","anythingToBuffer","value","isBuffer","byteOffset","PARAMETER_OUT_OF_RANGE","numToHex","n","s","formatHexString","obj","isArray","join","_","Debug","Destination","ESKit","Factory","FSM","Log","Message","Publisher","SDT","Session","SMF","SolcacheSession","TestEnv","Transport","Util","Validate","FactoryLib","SolclientFactory","SolclientFactoryProfiles","SolclientFactoryProperties","DestinationType","Topic","NotImplementedError","RequestError","RequestEventCode","makeIterator","ConsoleLogImpl","LogImpl","LogLevel","MessageCacheStatus","MessageDeliveryModeType","MessageDumpFlag","MessageType","MessageUserCosType","ReplicationGroupMessageId","MessageConsumer","MessageConsumerAcknowledgeMode","MessageConsumerEventName","MessageConsumerProperties","QueueBrowser","QueueBrowserEventName","QueueBrowserProperties","ReplayStartLocation","ReplayStartLocationBeginning","MessagePublisherAcknowledgeMode","MessagePublisherProperties","AbstractQueueDescriptor","QueueAccessType","QueueDescriptor","QueueDiscardBehavior","QueuePermissions","QueueProperties","QueueType","SDTField","SDTFieldType","SDTMapContainer","SDTStreamContainer","SDTUnsupportedValueError","SDTValueErrorSubcode","AuthenticationScheme","CapabilityType","MessageRxCBInfo","MutableSessionProperty","SessionEvent","SessionEventCBInfo","SessionEventCode","SessionProperties","SessionState","SslDowngrade","CacheCBInfo","CacheLiveDataAction","CacheRequestResult","CacheReturnCode","CacheReturnSubcode","CacheSession","CacheSessionProperties","StatType","TransportError","TransportProtocol","Version","solace","_internal","Object","assign","PRINTABLE_LUT","tmp","formatDumpBytes","showDecode","leftPadding","StringBuffer","StringUtils","isEmpty","padLeft","padRight","ascii","line","lineBytes","dataLen","ccode","append","clear","parseSMFStream","Codec","Decode","decodeCompoundMessage","LOG_WARN","LOG_ERROR","pos","incomingMsg","smf","smfHeader","smf_protocol","messageLength","DestinationFromNetwork","DestinationUtil","Parameter","Queue","createTopicDestination","createFactory","topicName","isString","createFromName","createTopic","createDurableQueueDestination","queueName","createFromLocalName","QUEUE_PREFIX","QUEUE_PREFIX_LEN","createDestinationFromName","networkTopicName","networkTopicBytes","spec","name","bytes","encodeBytes","startsWith","offset","type","QUEUE","TEMPORARY_QUEUE","createDestinationFromBytes","decodeBytes","Enum","TOPIC","new","_setCanonical","SolclientFactoryLib","SubscriptionInfo","UUID","ProfileBinding","toSafeChars","stripNullTerminate","DESTINATION_PREFIX_FROM_TYPE","createPrefix","createOperationError","errorStr","INVALID_TOPIC_SYNTAX","legacyValidate","exceptionCreator","bind","error","nameLength","bytesLength","isWildcarded","topicUtf8Encode","prefix","networkName","createTemporaryName","vrid","id","generateUUID","describe","validateAndEncode","constError","subscriptionInfo","keys","some","prefixType","errorConst","subInfo","subInfoConst","parseFromName","constructor","this","_name","_type","_bytes","_offset","isValidated","_isValidated","_isWildcarded","_subscriptionInfo","getName","getType","getBytes","getOffset","validate","_error","getSubscriptionInfo","util_inspect","equals","other","valueOf","DestinationUtilLib","assert","undefined","super","static","encoding","SUBSCRIPTION_LAYER_PARSER_FROM_TYPE","_layers","NOEXPORT_PREFIX","NOEXPORT_PREFIX_LEN","index","isNoExport","SHARE_PREFIX","SHARE_PREFIX_LEN","LEVEL_DELIMETER_LEN","shareGroup","groupIndex","isShare","indexOf","substring","dispatchTopicIndex","parse","layers","parseLayers","constOffset","constResult","subscriptionStringParse","_isShare","_isNoExport","_dispatchTopicIndex","_shareGroup","parser","apiEnv","envObject","target","ErrorResponseSubcodeMapper","SolaceError","makeMap","SC","ROOT_MAPPING","CLIENT_NAME_INVALID","MESSAGE_TOO_LARGE","INACTIVITY_TIMEOUT","SUBSCRIPTION_TOO_MANY","NOLOCAL_DISCARD","OUT_OF_RESOURCES","SUBSCRIPTION_ALREADY_PRESENT","SUBSCRIPTION_ATTRIBUTES_CONFLICT","SUBSCRIPTION_NOT_FOUND","SUBSCRIPTION_INVALID","UNKNOWN_TRANSPORT_SESSION_ID","XML_PARSE_ERROR","LOGIN_FAILURE","BASIC_AUTHENTICATION_IS_SHUTDOWN","CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN","CLIENT_NAME_ALREADY_IN_USE","CLIENT_USERNAME_IS_SHUTDOWN","DYNAMIC_CLIENTS_NOT_ALLOWED","INVALID_VIRTUAL_ADDRESS","CLIENT_ACL_DENIED","MESSAGE_VPN_NOT_ALLOWED","PUBLISH_ACL_DENIED","REPLICATION_IS_STANDBY","SELECTOR_DOES_NOT_MATCH","SUBSCRIPTION_ACL_DENIED","SUBSCRIPTION_DOES_NOT_MATCH","SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED","SHARED_SUBSCRIPTIONS_NOT_ALLOWED","LOW_PRIORITY_MSG_CONGESTION","MESSAGE_VPN_UNAVAILABLE","GM_UNAVAILABLE","SPOOL_OVER_QUOTA","CLIENT_DELETE_IN_PROGRESS","TOO_MANY_CLIENTS","MAX_MESSAGE_USAGE_EXCEEDED","GM_NOT_READY","AD_MAPPING","ALREADY_BOUND","ENDPOINT_ALREADY_EXISTS","ENDPOINT_PROPERTY_MISMATCH","INVALID_DTE_NAME","INVALID_SELECTOR","INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT","QUEUE_NOT_FOUND","QUOTA_OUT_OF_RANGE","UNKNOWN_FLOW_NAME","UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND","PERMISSION_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED","REPLAY_TEMPORARY_NOT_SUPPORTED","UNKNOWN_START_LOCATION_TYPE","MISMATCHED_ENDPOINT_ERROR_ID","REPLAY_START_MESSAGE_NOT_AVAILABLE","TOPIC_ENDPOINT_SHUTDOWN","MAX_CLIENTS_FOR_TE","MAX_CLIENTS_FOR_QUEUE","NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT","NO_SUBSCRIPTION_MATCH","QUEUE_SHUTDOWN","UNKNOWN_TOPIC_ENDPOINT_NAME","UNKNOWN_QUEUE_NAME","REPLAY_DISABLED","REPLAY_CANCELLED","REPLAY_MESSAGE_UNAVAILABLE","REPLAY_STARTED","REPLAY_MESSAGE_REJECTED","REPLAY_LOG_MODIFIED","OUT_OF_REPLAY_RESOURCES","TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT","REPLAY_FAILED","REPLAY_START_TIME_NOT_AVAILABLE","getSubcodeMappingInner","root","respErrorCode","respStr","codeMap","searchKey","toLowerCase","foundKey","find","mapKey","getSubcodeMapping","UNKNOWN_ERROR","getErrorSubcode","getADErrorSubcode","NO_ERROR","SESSION_NOT_CONNECTED","INVALID_SESSION_OPERATION","INVALID_OPERATION","TIMEOUT","PARAMETER_CONFLICT","PARAMETER_INVALID_TYPE","INTERNAL_ERROR","INSUFFICIENT_SPACE","PROTOCOL_ERROR","COMMUNICATION_ERROR","KEEP_ALIVE_FAILURE","TOPIC_MISSING","SUBSCRIPTION_ERROR_OTHER","NO_LOCAL_NOT_SUPPORTED","DATA_ERROR_OTHER","CREATE_XHR_FAILED","CONNECTION_ERROR","DATA_DECODE_ERROR","AD_MESSAGING_NOT_SUPPORTED","CREATE_WEBSOCKET_FAILED","UNEXPECTED_UNBIND","MESSAGE_DELIVERY_MODE_MISMATCH","MESSAGE_ALREADY_ACKNOWLEDGED","CALLBACK_ERROR","FAILED_LOADING_TRUSTSTORE","FAILED_LOADING_CERTIFICATE_AND_KEY","UNRESOLVED_HOSTS","REPLAY_NOT_SUPPORTED","COMPRESSED_TLS_NOT_SUPPORTED","SHARED_SUBSCRIPTIONS_NOT_SUPPORTED","MESSAGE_ID_NOT_COMPARABLE","message","subcode","reason","SUBCODE_FROM_EC","REQUEST_ABORTED","REQUEST_TIMEOUT","eventCode","correlationKey","_eventCode","_correlationKey","requestEventCode","_requestEventCode","errorSubcode","superObj","infoStr","captureStackTrace","stack","ArrayOperations","BidiMap","Iterator","Lazy","Mixin","Resolver","SetOperations","mixin","resolve","defaultComparator","astr","bstr","insertOrdered","array","element","comparator","inplaceInsertOrdered","min","max","splice","pairs","forward","Map","reverse","forEach","p","setValues","key","enumName","instance","matches","filter","values","defineProperties","_canonical","enumerable","writable","configurable","final","descriptor","getOwnPropertyDescriptor","defineProperty","enumValue","noneValue","unknownValue","nameOf","names","Set","isEnum","strings","arr","start","end","_arr","_index","_end","deref","incr","DEFAULT_PROPERTY_OPTIONS","setPropertyValue","options","lazyProperty","evalFn","lazyProperties","lazyValue","keyValuePairs","add","targetProto","addProto","getOwnPropertyNames","source","compoundKey","trim","rawPath","path","pathArr","concat","commonSource","keySource","reduce","traversePath","inplaceUnion","setA","setB","elem","inplaceDifference","delete","inplaceIntersection","has","isSuperset","subset","every","difference","intersection","union","EventEmitter","Timer","NodeEventEmitter","ArrayUtils","flatten","includes","NODE_DEFAULT_EVENTS","BLACKLIST_DIRECT","DISABLED_ACTIONS","ignore","fail","direct","emits","unsafe","formatEventName","bareEmit","emit","_installDirectFilter","_installErrorHandlers","_installEmitVerifier","_listenerVerificationFilter","emitSet","el","emitArray","buildFilter","_emits","_defaultEmitDirect","args","emitDirect","_directEventName","on","eventName","listener","_verifyListenerEvent","ret","_setEmitDirect","addListener","once","prependListener","prependOnceListener","removeAllListeners","removeListener","listenerCount","directListenerCount","setOnFirstDirectListener","firstDirect","_onFirstDirectListener","onListener","event","throwInternal","err","emitBase","_internalError","ex","formatErrorEvent","info","formattedName","innerEx","isDirect","disableEmitter","cancel","interval","onInterval","timerRef","setInterval","clearInterval","timeout","onExpire","setTimeout","clearTimeout","FactoryProfile","binding","guaranteedMessagingEnabled","cometEnabled","byteArrayAsString","legacyInstance","v10Instance","forwardInstance","_legacy","_v10","_forward","_default","version7","version10","version10_5","APIProperties","Check","getDefaultLogLevel","INFO","logLevel","logger","profile","_profile","number","_logLevel","_logger","factoryState","initializeCount","initializers","addInitializer","func","push","init","factoryProps","props","isInstanceOf","initializer","LOG_DEBUG","reset","_getInitializeCount","profiles","Flow","FlowOperation","PrivateFlowEventName","CONNECT","DISCONNECT","START","STOP","DISPOSE","GET_STATS","RESET_STATS","GET_PROPERTIES","GET_DESTINATION","LogFormatter","Stats","ALWAYS_OPS","flowProperties","sessionInterfaceFactory","emitterOptions","emitterOptionsFull","sessionInterface","self","sessionIdHex","flowIdDec","log","wrap","_disposing","_disposed","_userDisconnected","_properties","_sessionInterface","_stats","_privateEventEmitter","_emit","_on","_once","_removeListener","clearStats","LOG_TRACE","_operationCheck","resetStats","connect","userDisconnected","dispose","terminate","getDisposedEvent","_fsm","_midDispatch","terminateWithRunningFSM","terminateFsm","disconnect","_disconnectSession","getProperties","clone","getStat","statType","handleUncorrelatedControlMessage","incStat","processFSMEvent","processEvent","canAck","disposed","flowId","session","_session","_userDisconnecte","operation","v","_isDisconnected","BIND_WAITING","FsmEvent","State","StateMachine","StateLib","FsmObject","EntryPoint","innerState","entryPointName","impl","outerState","state","parentContext","getParent","initial","transitionTo","getDestState","ExitPoint","exitPointName","extraStringInfo","getExtraStringInfo","StateContext","logPadding","getStateMachine","ancestorList","initialReaction","action","ReactionResult","caller","destState","getFinalState","getAncestorList","onInitial","external","processReactionResult","e","curContext","destStateIter","lowestCommonAncestor","onExit","onEntry","destInitial","reactionResult","destAncestorList","setLogPadding","padding","isRunning","eventQueue","finalState","handleUncaughtException","ev","exc","process","processingEvents","_onEventCompletion","getCurrentState","currentState","evt","handleEvent","curState","setPostEventAction","postEventAction","getActiveState","activeStates","isStateActive","unhandledEventReaction","handleUnhandledEvent","uncaughtExceptionReaction","extensions","reactions","entryPoints","exitPoints","extension","repeat","reaction","entryPoint","exitPoint","getEntryPointDestState","getExitPointDestState","entry","appEntryFunc","exit","appExitFunc","externalTransitionTo","transitionToEntryPoint","transitionToExitPoint","eventUnhandled","internalTransition","GlobalBinding","isEnumMember","isFunction","getImpl","getLogLevel","setImpl","setLogLevel","forwarder","addGlobalFuncs","toUpperCase","trace","TRACE","debug","DEBUG","warn","WARN","ERROR","fatal","newLevel","Binding","formatter","_formatter","genericFunction","targetSelf","STUB","generateLogHeader","levelStr","date","Date","levelStrPadding","YY","getFullYear","MM","getMonth","DD","getDate","hh","getHours","mm","getMinutes","ss","getSeconds","ms","getMilliseconds","consoleIn","_trace","_debug","_info","_warn","_fatal","console","global","Function","level","LogBinding","FATAL","ConsumerFlows","ConsumerFSMEvent","ConsumerFSMEventNames","MessageConsumerEvent","ApplicationAckState","UNACKED","ACKED_NOT_SENT","ACKED_SENT","ApplicationAck","exists","ApplicationAckRingBuffer","size","_size","_insertIndex","_buffer","fill","ack","insert","beforeEvictCallback","insertIndex","inserting","evicting","front","firstIndex","rawIndex","lastIndex","callback","updateAckState","existing","_allFlows","_reconnectingFlows","_flowsById","flow","flowUp","flowDisposed","flowDown","UP","RECONNECTED","DISPOSED","RECONNECTING","DOWN","DOWN_ERROR","flows","reconnectingFlows","getFlowById","disposeAll","SESSION_UP","SESSION_UP_NO_AD","SESSION_DOWN","SESSION_DISCONNECT","FLOW_FAILED","FLOW_UP","FLOW_ACTIVE_IND","FLOW_CLOSE","FLOW_OPEN","FLOW_UNBOUND","ACK","ACK_TIMEOUT","BIND_TIMEOUT","CREATE_TIMEOUT","UNBIND_TIMEOUT","CAN_SEND","TRANSPORT_ERROR","VIRTUALROUTER_NAME_CHANGED","RECONNECT_INTERVAL_TIMEOUT","BIND_RESPONSE","CREATE_FAILED","CREATE_SUCCESS","details","SMFLib","ConsumerStateNames","MessageDispatcher","RgmidFactory","TransportAcks","TransportAckResult","ZERO_APP_ACK","UZERO","ConsumerFSM","consumer","properties","fsm","LOG_INFO","autoAck","acknowledgeMode","AUTO","_consumer","_acknowledgeTimeoutInMsecs","acknowledgeTimeoutInMsecs","_acknowledgeThreshold","acknowledgeThreshold","_localPreferredWindowSize","windowSize","_localMaxWindowSize","_messageDispatch","emitter","_resetRemoteConnectionState","_resetLocalConnectionState","_replayStartLocation","replayStartLocation","_errorCausingReconnect","emitEventActionType","startDispatchActionType","stopDispatchActionType","postEventActions","preprocessPostEventActions","startIndex","actionLocations","cancelAction","firstActionName","cancellingActionName","firstLocation","ACTIVE","INACTIVE","processPostEventActions","preprocessedActions","requestStartDispatchFSM","addPostEventAction","newEvent","emitBindFailed","CONNECT_FAILED_ERROR","checkCapabilitiesChoicePoint","isCapable","MESSAGE_REPLAY","topicEndpointSubscription","destination","SHARED_SUBSCRIPTIONS","verifyEndpointSubscription","Unbound","createIfMissing","queueDescriptor","durable","CreateSent","BindSent","_addEventToEmit","activeIndicationEnabled","_requestStartDispatch","_requestStopDispatch","requestStopDispatchFSM","transitionToUnbound","_dispose","msg","correlationTag","getCorrelationTag","AdProtocolMessage","getCloseMessageConsumer","sendControl","enqueueRequest","handleAccidentalBind","connectTimeoutInMsecs","context","UNBOUND","emitDisabledEvent","GM_DISABLED","AwaitSessionUp","GUARANTEED_MESSAGE_CONSUME","AwaitFlowOpen","_connectAttempts","connectAttempts","UNBOUND_AWAIT_SESSION_UP","emitBindWaiting","UNBOUND_AWAIT_FLOWOPEN","BindSentExtensions","sendBindRequest","transportAcks","_transportAcks","_endpointEnsure","endpoint","_endpoint","subscription","_subscription","getOpenMessageConsumer","queueProperties","noLocal","lastAcked","lastReceived","browser","endpointErrorId","handleBindTimeout","handleBindResponse","cancelBindRequestTimer","bindRequestTimer","handleExpectedBind","attrs","lastMsgIdAcked","getLastMsgIdAcked","getFlowId","accessType","x","getAccessType","EXCLUSIVE","topicEndpointBytes","getTopicEndpointBytes","grantedPermissions","getGrantedPermissions","allOthersPermissions","getAllOthersPermissions","respectsTTL","getRespectsTTL","activeFlow","getActiveFlow","wantFlowChangeNotify","getWantFlowChangeNotify","discardBehavior","getQueueDiscardBehavior","deliveryCountSent","getEndpointDeliveryCountSent","endpointId","getEndpointId","maxUnackedMessages","getMaxUnackedMessages","getEndpointErrorId","spoolerUniqueId","getSpoolerUniqueId","quota","getQuota","maxMsgSize","getMaxMsgSize","maxRedelivery","getMaxRedelivery","queueDiscardBehavior","permissions","BR_REPLAY_ERRORID","consumerProperties","quotaMB","maxMessageSize","maxMessageRedelivery","NONE","_active","_remoteWindowSize","eq","msgType","SMFAdProtocolMessageType","BIND","PROTOTOCOL_ERROR","header","responseCode","pm_respcode","RX_DISCARD_SMF_UNKNOWN_ELEMENT","description","pm_respstr","respEvent","BIND_SENT","newTimeout","UnbindSent","FlowUp","Reconnecting","reconnectAttempts","RBindSent","RAwaitSessionUp","RECONNECTING_AWAIT_SESSION_UP","RECONNECTING_BIND_SENT","RAwaitTimer","emitRebindFailed","RECONNECTING_AWAIT_TIMER","handleReconnectIntervalTimeout","cancelReconnectIntervalTimer","reconnectIntervalTimer","reconnectIntervalInMsecs","flowUpFSM","XferInactive","Xfer","transitionToUnboundFromUp","FLOW_UP_XFER","_sendAcks","FLOW_UP_XFER_INACTIVE","UNBIND_SENT","sendUnbindRequest","_endpointClear","handleUnbindTimeout","response","handleUnbindResponse","getCurrentStateName","UNBIND","CREATE_SENT","sendCreateRequest","getCreate","handleCreateTimeout","handleCreateResponse","CREATE","acceptMessage","messageID","getGuaranteedMessageId","idstr","_fsmDispatch","RX_DISCARD_NO_MATCHING_CONSUMER","setDeliveryCount","messageSuid","_getSpoolerUniqueId","INVALID_SUID","_setSpoolerUniqueId","ackResult","tryReceive","getGuaranteedPreviousMessageId","transportAckRequired","acksPending","maxPendingAcks","OK","DUPLICATE","RX_DISCARD_DUPLICATE","_applicationAcks","_oldUnacked","_setTransportAckTimer","_sendAck","OUT_OF_ORDER","RX_DISCARD_OUT_OF_ORDER","applicationAckRequired","applicationAck","messageId","RX_ACKED","getDestination","_destination","isDisconnected","UNBOUND_AWAITING_FLOWOPEN","requestStartDispatchUser","_userDispatch","applyStartDispatch","unbindAck","getUnbindAck","_flowId","requestStopDispatchUser","stop","_clearTransportAckTimer","_transportAckTimer","_unacked","createDestinationFromDescriptor","createTemporaryDestination","applicationAcks","transportAck","getAck","_addAckToRanges","acksPendingState","currentRange","ackRanges","MAX_CLIENT_ACK_RANGES","bareRanges","range","forceTransportAck","g","setAcked","ackRange","maxWindowSize","Math","Number","POSITIVE_INFINITY","UNBOUND_AWAIT_ANY","CLIENT","MESSAGE","SUBSCRIPTION_OK","SUBSCRIPTION_ERROR","messageConsumerEventName","_messageConsumerEventName","_infoStr","_responseCode","_errorSubcode","_reason","QueueDescriptorValidator","QueuePropertiesValidator","APIPropertiesValidators","validateInstance","valBoolean","valInstance","valIsMember","valNumber","valRange","valTopicStringOrEmpty","valTopicEndpointSubscription","typeDesc","TOPIC_ENDPOINT","isDurable","MessageConsumerPropertiesValidator","rawProperties","hasOwnProperty","something","MAX_VALUE","QueueLib","DEFAULTS","transportAcknowledgeTimeoutInMsecs","transportAcknowledgeThresholdPercentage","_browser","_queueDescriptor","_queueProperties","_bindTimeoutInMsecs","_topicEndpointSubscription","_acknowledgeMode","_transportAcknowledgeTimeoutInMsecs","_transportAcknowledgeThresholdPercentage","_activeIndicationEnabled","newValue","_noLocal","_windowSize","_reconnectAttempts","_reconnectIntervalInMsecs","_createIfMissing","localCounter","applyProperties","superFormatter","_makeFSM","_onFlowActive","_onFlowDisconnected","_onFlowUp","getCapability","handleDataMessage","setMessageConsumer","FLOWCHANGEUPDATE","active","onVRNChanged","_accessType","_queueDiscardBehavior","_respectsTTL","_permissions","isActive","_disposeFSM","addSubscription","topic","requestTimeout","updateQueueSubscription","success","subCode","respCode","respText","removeSubscription","queue","dispatch","_dispatchOne","_dispatchOneAutoAck","_dispatchOneBare","_onFirstMessageListener","_availableListener","_flush","caught","isAcknowledged","acknowledge","messageConsumer","_messageConsumer","_setupEventListers","_onConsumerUp","_onConsumerConnectFailed","_onConsumerDown","_onConsumerDownError","_onConsumerMessage","_onConsumerDisposed","_onConsumerGMDisabled","removeMessageFromQueue","_guaranteedMsgId","_acked","base","fromNumber","fromValue","_acksPending","ZERO","prevMessageID","_lastReceived","lt","gte","_lastAcked","MessagePublisher","MessagePublisherEventName","MessagePublisherPropertiesValidator","PublisherFSMEvent","PublisherFSMEventNames","_lastSent","_next","longToString","MessageIds","lastSent","setLastSent","next","PER_MESSAGE","WINDOWED","ACKNOWLEDGED_MESSAGE","FLOW_NAME_CHANGED","GUARANTEED_MESSAGING_DOWN","REJECTED_MESSAGE","DISCONNECT_FAILED_ERROR","TRANSPORT_FULL","TransportCapabilities","defaultEnablePublisher","globallyEnabled","webSocketAvailable","web","webSocket","getDefaults","enabled","connectRetryCount","_enabled","defined","_connectRetryCount","_connectTimeoutInMsecs","PublisherFSM","_bindWaiting","_onBindWaiting","_onBindFailed","_onDown","_onUp","publisher","_flowName","publisherId","_publisherId","handleAck","handleNack","ctrlMessage","nack","CLIENTACK","CLIENTNACK","CLOSEPUBFLOW","prepareAdMessageAndSend","dataMsg","isBindWaiting","RESEND_COMPLETE","smfmessage","getEventText","_eventText","SolclientSession","PublisherStateNames","TransportReturnCode","ConnectReason","_publisher","_stateEvents","_guaranteedEnabled","_sendWindow","_resetConnectedInfo","_notifiedWindowClosed","_transportFlowControlled","PublisherUnbound","emitDownAndBindWaiting","PublisherOpenFlowSent","OPENFLOWSENT","emitOpenFlowFailedError","handleOpenFlowResponse","adpMsg","smfRespHeader","OPENPUBFLOW","returnCode","mappedSubcode","lastMsgIDAcked","getWindow","flowName","getFlowName","getPublisherId","_messageIds","_unackedList","_connectReason","messages","count","_renumber","setFlowId","setPublisherId","payloadSizeLimit","MAX_GUARANTEED_MSG_SIZE","getValue","_memoized_payload","_handleAck","_firstUnackedToSend","handleOpenFlowTimeout","handleUnknownFlowName","sendOpenFlow","openPubFlowMsg","getOpenMessagePublisher","rxMsgObj","PublisherCloseFlowSent","PublisherUp","pEvent","CLOSEFLOWSENT","handleCloseFlowResponse","handleCloseFlowTimeout","sendCloseFlow","closePubFlowMsg","getCloseMessagePublisher","_handleAckEvent","emitFlowUp","PublisherRetransmitting","PublisherDataXfer","_scheduleStateEvents","DATA_XFER","_maybeEmitCanSend","PublisherFlowControlled","FLOW_CONTROLLED","RETRANSMITTING","retransmit","_resendFromUnacked","TX_WINDOW_CLOSED","unackedList","_payload_is_memoized","_memoized_csumm","dupMsg","payloadSize","Encode","adaptMessageToSmf_payloadMemoize","_cloneNumbers","msgId","sendToTransport","NO_SPACE","setRedelivered","_startAckTimer","pop","TX_ACKS_RXED","openFlow","messageIds","reportAcked","reportNacked","numAcked","lastAckedMessage","_resetAckTimer","_clearAckTimer","list","resendIndex","m","sendData","failover","_ackTimer","_emitStateEvents","pair","_handleAckTimeout","TX_ACK_TIMEOUT","current","setGuaranteedPreviousMessageId","setGuaranteedMessageId","fromMsg","toMsg","_setPostEventAction","desc","_postEventAction","FAILED","MessageDumpStandardProvider","MessageDumpUtil","createMessage","createReplicationGroupMessageId","fromString","LIVE","CACHED","SUSPECT","DIRECT","PERSISTENT","NON_PERSISTENT","MSGDUMP_BRIEF","MSGDUMP_FULL","DebugLib","MessageDumpUtilLib","fpDestination","dest","fpSenderId","getSenderId","fpAppmsgType","getApplicationMessageType","fpAppMsgId","getApplicationMessageId","fpSequenceNumber","sequenceNum","getSequenceNumber","fpTopicSequenceNumber","topicSeqNo","getTopicSequenceNumber","isLong","fpCorrelationId","getCorrelationId","fpHttpContentType","fpHttpContentEncoding","fpSendTimestamp","timestamp","getSenderTimestamp","formatDate","fpRcvTimestamp","getReceiverTimestamp","fpClassOfService","getUserCos","fpDeliveryMode","getDeliveryMode","fpGuaranteedMsgId","fpReplicationGroupMessageId","rgmid","getReplicationGroupMessageId","fpTimeToLive","timeToLive","getTimeToLive","mdu","d","getTime","fpExpiration","getGMExpiration","fpMessageDMQEligible","isDMQEligible","fpMessageRedelivered","isRedelivered","fpMessageDeliveryCount","getDeliveryCount","fpDiscardIndication","isDiscardIndication","fpAckImmediately","isAcknowledgeImmediately","fpElidingEligible","isElidingEligible","fpReplyMessage","isReplyMessage","fpReplyTo","replyTo","getReplyTo","fpDeliverToOne","isDeliverToOne","fpCacheMessage","getCacheStatus","fpCacheRequestId","cacheRequestId","getCacheRequestId","fpUserPropertyMap","flags","propMap","getUserPropertyMap","getKeys","detailValue","printMap","fpCorrelationTag","strValue","getCorrelationKey","fpUserData","notEmpty","getUserData","fpSdtStream","sdtFieldValue","getSdtContainer","STREAM","countItems","printStream","fpSdtMap","MAP","fpBinaryAttachment","_binaryAttachment","att","fpXmlContent","xml","getXmlContent","fpXmlMetadata","xmlMetadata","getXmlMetadata","MessageDumpStandardProviderLib","MessageDumpState","dumpProviders","providers","getOutOfRangeValue","rawData","sdtField","getSubcode","VALUE_OUTSIDE_SUPPORTED_RANGE","getSourceData","sdtMap","indent","nothing","lines","strIndent","sort","getField","BYTEARRAY","sdtStream","rewind","hasNext","getNext","DESTINATION","timeStamp","dump","separator","colPadding","sb","theSeparator","needSeparator","theColPadding","provider","isPresent","BINARY","TEXT","COS1","COS2","COS3","SDTCodec","isBoolean","isInstanceOfOrNothing","isNumberOrNothing","isStringOrNothing","MESSAGE_CLONE_OPTIONS","circular","includeNonEnumerable","initMessage","_deliveryMode","_userCos","_cacheStatus","_spoolerUniqueId","_priority","_deliveryCount","_messageType","setApplicationMessageId","_applicationMessageId","setApplicationMessageType","_applicationMessageType","getBinaryAttachment","setBinaryAttachment","_setBinaryAttachment","_cacheRequestId","_setCacheRequestID","cacheRequestID","_correlationId","setCorrelationId","setCorrelationKey","_deliverToOne","setDeliverToOne","_setDeliverToOne","setDeliveryMode","_setDeliveryMode","setDestination","_setDestination","_discardIndication","setDiscardIndication","_setDiscardIndication","_elidingEligible","setElidingEligible","_setElidingEligible","getPublisherMessageId","_publisherMsgId","setPublisherMessageId","_timeToLive","setTimeToLive","_expiration","setGMExpiration","_dmqEligible","setDMQEligible","_setDMQEligible","_guaranteedPrevMsgId","getMessageConsumer","_setSpoolerMessageId","_spoolerMessageId","smid","suid","msgid","_topicSequenceNumber","setTopicSequenceNumber","deliveryCount","_ackImmediately","setAcknowledgeImmediately","_setAcknowledgeImmediately","_setCacheStatus","cacheStatus","_replyMessage","_redelivered","setAsReplyMessage","_receiverTimestamp","_replyTo","setReplyTo","_senderId","setSenderId","_senderTimestamp","setSenderTimestamp","_sequenceNumberError","_sequenceNumber","setSequenceNumber","_autoSequenceNumber","getPriority","setUserCos","_setUserCos","setPriority","_setPriority","_userData","setUserData","_setUserData","_xmlContent","getXmlContentDecoded","setXmlContent","setValue","_setXmlContentInternal","setXmlMetadata","_setXmlMetadata","_xmlMetadata","binaryMetadataChunk","_binaryMetaChunk","meta","_smfHeader","hasAutoSequenceNumber","hasAutoSenderTimestamp","_autoSenderTimestamp","_userPropertyMap","setUserPropertyMap","setSdtContainer","container","structuredContainer","_structuredContainer","STRING","binaryAttachment","binaryAttachmentLength","parseSingleElement","validFlags","f","ReplayStartType","RMID_VERSION_1_PREFIX","RMID_LEN","validRmidHexRegex","isValue","effectiveMessageId","_replayStartValue","RGMID","_suid","_messageId","compare","otherReplicationGroupMessageId","oId","gt","hexString","toBytesBE","rgmidStr","rmidBufs","rmidHex","test","rmidBuffer","buflen","readUInt32BE","TYPE_DESCRIPTION","DESINATION_TYPE_TO_DESCRIPTOR_TYPE","queueSpec","maybeAdaptFromDestination","_durable","NONEXCLUSIVE","valTopicString","NOTIFY_SENDER_ON","NOTIFY_SENDER_OFF","READ_ONLY","CONSUME","MODIFY_TOPIC","DELETE","_quotaMB","_maxMessageSize","_discardBehavior","_maxMessageRedelivery","ReplayStartLocationDate","createReplayStartLocationBeginning","createReplayStartLocationDate","dateTime","BEGINNING","DATE","SDTDestType","EncodeSingleElement","IEEE754LIB","ParseSingleElement","StringToBuffer","encodeSingleElement","stringToBuffer","SDTDataTypes","EncodeHeader","tag","valueLen","byte0","strSdtLen","Stream","EncodeInteger","vIn","byteI","floor","EncodeSingleElementLib","UtilLib","encodeHeader","EncodeMap","encodeMap","sdtmap","buf","sdtfield","strKeyField","strKeyName","nullTerminate","encodeSingleElementToBuf","DestinationLib","EncodeStream","int48ToStr","encodeStream","C_2_48","pow","fieldVal","BOOL","Boolean","UINT8","UnsignedInteger","INT8","Integer","UINT16","INT16","UINT32","INT32","UINT64","INT64","WCHAR","Char","ByteArray","FLOATTYPE","Float","toIEEE754Single","DOUBLETYPE","toIEEE754Double","NULLTYPE","Null","UNKNOWN","hdr","sdtstream","toIEEE754","ebits","fbits","bias","Infinity","abs","ln","LN2","bits","parseInt","fromIEEE754","j","NaN","strToByteArr","byteArrToStr","fromIEEE754Double","fromIEEE754Single","ParseDestination","dataBuf","destType","readUInt8","destBytes","create","ParseInteger","autoDecodeVarLengthNumber","ParseFieldHeader","onebyte","elemType","lenBytes","elemLen","ParseFloat","readFloatBE","readDoubleBE","createField","readUIntBE","isSigned","readInt8","readInt16BE","readUInt16BE","readInt32BE","longValue","getNumBitsAbs","toNumber","field","setError","ParseSingleElementLib","ParseMap","datalen","mapObj","keyFieldHeader","parseFieldHeader","keyString","valueFieldHeader","valueField","addField","ParseStream","parseFloatField","parseIntegerField","parseMapAt","parseStreamAt","parseDestination","fieldHeader","elemValLen","SMFMessage","SMF_MESSAGE","streamObj","validateSdtField","_value","getValueNoThrow","_map","deleteField","typeOrField","SDTFieldLib","_stream","_writable","_readPt","sourceData","inspect","SDTMapContainerLib","SDTStreamContainerLib","ValidateLib","baseTypes","failInvalidParameter","valueType","instanceOf","ClientCapabilityType","SessionEventName","createSession","sessionProperties","messageCallbackInfo","eventCallbackInfo","BASIC","CLIENT_CERTIFICATE","AUTHENTICATION_SCHEME_BASIC","AUTHENTICATION_SCHEME_CLIENT_CERTIFICATE","OAUTH2","PEER_SOFTWARE_VERSION","PEER_SOFTWARE_DATE","PEER_PLATFORM","PEER_PORT_SPEED","PEER_PORT_TYPE","MAX_DIRECT_MSG_SIZE","PEER_ROUTER_NAME","MESSAGE_ELIDING","NO_LOCAL","TEMPORARY_ENDPOINT","GUARANTEED_MESSAGE_PUBLISH","GUARANTEED_MESSAGE_BROWSE","ENDPOINT_MGMT","SELECTOR","ACTIVE_CONSUMER_INDICATION","COMPRESSION","CUT_THROUGH","ENDPOINT_DISCARD_BEHAVIOR","ENDPOINT_MESSAGE_TTL","JNDI","PER_TOPIC_SEQUENCE_NUMBERING","QUEUE_SUBSCRIPTIONS","SUBSCRIPTION_MANAGER","TRANSACTED_SESSION","COMPRESSED_SSL","UNBIND_ACK","BR_ERRORID","CorrelatedRequest","timer","respRecvdCallback","DefaultCapabilities","createDefaultCapabilities","assumedMaxAdSize","Process","C_2_32","leftPad","GlobalContext","sessionCounter","idCounter","RandId","random","toFixed","NextSessionCounter","NextId","GenerateClientName","product","platform","GenerateUserIdentification","GenerateClientDescription","parseURL","hostListDNSFilter","dns","dnsLookupPromise","url","Promise","host","hostname","lookup","address","resolved","code","errno","syscall","urls","cb","promises","all","then","catch","parseURLs","rawURLs","rawURL","HostInfo","waitTime","HostList","connectRetries","reconnectRetries","connectRetriesPerHost","reconnectRetryWaitInMsecs","hosts","href","connectTryCount","reconnectTryCount","connectTryCountPerHost","_mutableState","resolveHosts","succeeded","wasConnected","disconnected","hostPointer","hostTries","listTries","exhausted","lastHostInfo","getNextHost","hostTriesMax","listTriesMax","isNewList","isNewHost","didJustFinishList","hostInfo","connectWaitTimeInMsecs","currentHostToString","hostNumber","messageRxCBFunction","userObject","CLIENT_NAME","CLIENT_DESCRIPTION","OutstandingDataRequest","correlationId","replyReceivedCBFunction","reqFailedCBFunction","P2PUtil","getP2PInboxTopic","getP2PTopicSubscription","sessionEventCBFunction","UP_NOTICE","REJECTED_MESSAGE_ERROR","PROPERTY_UPDATE_OK","PROPERTY_UPDATE_ERROR","CAN_ACCEPT_DATA","DISCONNECTED","RECONNECTING_NOTICE","RECONNECTED_NOTICE","REPUBLISHING_UNACKED_MESSAGES","UNSUBSCRIBE_TE_TOPIC_OK","UNSUBSCRIBE_TE_TOPIC_ERROR","GUARANTEED_MESSAGE_PUBLISHER_DOWN","CONNECT_TIMEOUT","CONNECT_WAIT_TIMEOUT","DOWNGRADE_TIMEOUT","TRANSPORT_UP","TRANSPORT_DESTROYED","TRANSPORT_CAN_ACCEPT_DATA","TRANSPORT_PARSE_ERROR","TRANSPORT_PROTOCOL_SMP","TRANSPORT_PROTOCOL_CLIENTCTRL","EXCEPTION","SUBSCRIBE_TIMEOUT","CREATE_SUBSCRIBER","SEND_ERROR","FLOWS_DISCONNECTED","TRANSPORT_FLUSHED","DNS_RESOLUTION_COMPLETE","TRANSPORT_CHANGE_DONE","buildType","Superclass","superclassArgs","sessionEventCode","_sessionEventCode","errorSubCode","SUPERCLASS_FOR_SESSION_EVENT","SUPERCLASS_ARGS","sec","rc","ck","TYPE_CACHE","build","SessionFSMEvent","fields","eventText","eventReason","smfMsg","sessionId","guaranteedFlowObject","ConsumerLib","PublisherLib","TransportLib","SessionRequestType","SessionStateName","StatsByMode","SubscriptionUpdateTimeoutMessages","STAT_TX_BYMODE_BYTES","STAT_TX_BYMODE_MSGS","STAT_RX_BYMODE_BYTES","STAT_RX_BYMODE_MSGS","STAT_TX_BYMODE_REDELIVERED","STAT_TX_BYMODE_BYTES_REDELIVERED","SessionFSM","stats","_sessionProperties","_sessionStatistics","_hosts","_consumers","_flowInterfaceFactory","send","enqueueOutstandingCorrelatedReq","_userBackpressured","clearCurrentError","SessionDisconnected","sEvent","disposeInternal","SessionConnecting","CONNECTING","handleTransportDestroyed","_currentHost","_connectWaitTimer","WaitingForInterConnectTimeout","WaitingForTransport","setConnectTimer","_connectFailEvent","_connectSuccessEvent","DestroyingTransport","_reconnectRetries","_currentError","emitSessionEvent","setCurrentError","WaitingForDNS","sessionEvent","errEvent","clearConnectTimer","SessionTransportUp","WAITING_FOR_DNS","DESTROYING_TRANSPORT","destroyTransportSession","WAITING_FOR_INTERCONNECT_TIMEOUT","WAITING_FOR_TRANSPORT","errorMessage","initTransport","WaitingForTransportUp","WAITING_FOR_TRANSPORT_UP","_justEntered","_transport","sendClientCtrlLogin","WaitingForLogin","WAITING_FOR_LOGIN","setClientCtrlTimer","clientCtrlMsg","getResponse","checkNoLocal","checkCompressedSsl","updateReadonlySessionProps","WaitForTransportChange","rawSubcode","responseString","requestDowngrade","clearClientCtrlTimer","WAITING_FOR_TRANSPORT_CHANGE","updateTransportCompression","newTransport","ReapplyingSubscriptions","REAPPLYING_SUBSCRIPTIONS","copySubscriptionCacheKeys","reapplySubscriptions","WaitForSubConfirm","WaitForCanAcceptData","clearSubscriptionCacheKeys","WAITING_FOR_SUBCONFIRM","subscriptionStr","encodedUtf8Subscription","DestroyTransport","canConnectPublisher","_defaultPublisher","WaitingForMessagePublisher","WAITING_FOR_CAN_ACCEPT_DATA","WAITING_FOR_PUBFLOW","sendPublisherSessionUpEvent","canConnectConsumer","sendConsumerSessionUpEvent","FullyConnected","SessionDisconnecting","cleanupSession","handleSubscriptionUpdateError","clearKeepAlive","FULLY_CONNECTED","scheduleKeepAlive","DISCONNECTING","DisconnectingFlows","DISCONNECTING_FLOWS","gatherPendingFlows","isGathering","adaptedListenForDestroy","installfn","downEvents","known","pending","onFlowDown","checkPendingFlows","proceed","FlushingTransport","FLUSHING_TRANSPORT","flushTransport","flushTransportSession","onTransportFlushed","addToSubscriptionCache","_subscriptionCache","_subscriptionCacheCount","cancelOutstandingCorrelatedReq","_correlatedReqs","req","_clientCtrlTimer","_connectTimer","_keepAliveTimer","resetKeepAliveCounter","noLocalSupported","caps","getRouterCapabilities","_compressedTLS","checkSessionDestinationCapability","_subscriptionCacheKeys","p2pTopic","p2pInboxBase","createMessagePublisher","publisherProperties","isAD","createMessageConsumer","conusmerProperties","createQueueBrowser","destroy","_smfClient","operations","_kaStats","removeFromSubscriptionCache","operationKey","sendEvent","reqTimeoutCb","reqTimeout","respRecvCallback","readTimeoutInMsecs","outstandingReq","errorInFsm","errorEventText","flush","nextCorrelationTag","TX_TOTAL_DATA_MSGS","TX_DIRECT_MSGS","TX_PERSISTENT_MSGS","TX_NONPERSISTENT_MSGS","TX_TOTAL_DATA_BYTES","TX_DIRECT_BYTES","TX_PERSISTENT_BYTES","TX_NONPERSISTENT_BYTES","getTransportInfo","getInfoStr","handleADCtrlMessage","pm_corrtag","updateRxStats","cancelledRequest","RX_REPLY_MSG_DISCARD","handleADTrMessage","pm_ad_flowid","handleApiSubscriptionTimeout","timeoutMsg","handleClientCtrlMessage","SMFClientCtrlMessageType","LOGIN","SMFClient","SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG","handleClientCtrlResponse","handleClientCtrlTimeout","handleConnectTimeout","handleUpdatePropertyTimeout","handleRejectedTrMessage","topicNameRaw","pm_tr_topicname_bytes","replace","handleSMFMessage","discardMessage","SMFProtocol","TRMSG","smf_adf","ADCTRL","CLIENTCTRL","SMP","handleSMPMessage","KEEPALIVE","KEEPALIVEV2","handleUnknownProtocolMessage","handleSMFParseError","transportError","request","confirm","handleSubscriptionTimeout","handleTransportEvent","transportEvent","getTransportEventCode","TransportSessionEventCode","getSessionId","DESTROYED_NOTICE","GuaranteedFlowControlledRelief","PARSE_FAILURE","TSESSION","messageType","lastMsgWritten","lastBytesWritten","rxData","rxError","TransportFactory","createTransport","injectTransportInterceptor","_transportInterceptor","interceptor","setInterceptor","keepAliveTimeout","_keepAliveCounter","keepAliveIntervalsLimit","clientStats","getClientStats","prestatMsgWritten","msgWritten","prestatBytesWritten","bytesWritten","kaMsg","KeepAliveMessage","prepareAndSendMessage","deliveryMode","adLocallyDisabled","_gmSendDisallowed","requestConfirmation","topicDestination","sendSubscribe","sub","keepAliveIntervalInMsecs","statTarget","forceAllowEnqueue","content","encodeCompoundMessage","updateTxStats","compressionLevel","match","_plaintextTLS","sslConnectionDowngradeTo","PLAINTEXT","ClientCtrlMessage","getLogin","smpMsg","SMPMessage","getSubscriptionMessage","sendUpdateProperty","mutableSessionProperty","getUpdate","transportDowngradeTimeoutInMsecs","subscriptionUpdate","subject","requestType","default","isSMP","REMOVE_DTE_SUBSCRIPTION","ADD_SUBSCRIPTION","ADD_P2PINBOX","getDTEUnsubscribeMessage","REMOVE_SUBSCRIPTION","queueSubscriptionUpdate","getQueueSubscriptionMessage","origReq","smfMessage","pm_deliverymode","msgStatKey","bytesStatKey","msgLength","RX_TOTAL_DATA_MSGS","RX_TOTAL_DATA_BYTES","smf_di","RX_DISCARD_MSG_INDICATION","RX_CONTROL_MSGS","RX_CONTROL_BYTES","TX_REQUEST_SENT","TX_CONTROL_MSGS","TX_CONTROL_BYTES","clientCtrlRespMsg","_setVpnNameInUse","getVpnNameInUseValue","oldVirtualRouterName","virtualRouterName","newVirtualRouterName","getVridInUseValue","_setVirtualRouterName","handleVirtualRouterNameChange","_setP2pInboxBase","getP2PTopicValue","_setP2pInboxInUse","updateCapabilities","gmCap","_getCapability","oldName","newName","severTls","startCompression","SessionOperation","CTRL","SEND","QUERY_OPERATION","SessionPropertiesLib","valArrayIsMember","valArrayOfString","valLength","valNotEmpty","valString","valStringOrArray","ALLOWED_PROTOCOLS","valClientName","validateClientName","enumInstance","allowNull","valSslExcludedProtocols","supported","SUPPORTED_SSL_PROTOCOLS","protocol","prtcl","valSslCipherSuites","string","empty","ciphers","SUPPORTED_CIPHER_SUITES","cipher","valSslTrustedCommonNameList","valUrlList","valArray","included","validatePropsSupportedByTransport","transportProtocol","nonHttpPropsSet","HTTP_BINARY_STREAMING","HTTP_BINARY","HTTP_BASE64","isHttpTransport","propNames","useSsl","regex","arrayLength","currententry","matchUrl","SessionPropertiesValidator","webTransportProtocolList","useClientCert","authenticationScheme","equal","idToken","accessToken","WS_BINARY","sslValidateCertificate","sslPfxSet","sslPfx","sslPrivateKeySet","sslPrivateKey","sslCertSet","sslCertificate","nonHTTPTransportPropsSet","recommendedMin","defaultConnectTimeoutInMsecs","connectTimeout","NodeSslConstants","DEFAULT_CIPHER_SUITES","SessionPropertiesBase","_tpProtocol","_transportProtocolList","_tpDowngradeTimeout","transportProtocolInUse","_tpProtocolInUse","_setTransportProtocolInUse","webTransportProtocolInUse","_setWebTransportProtocolInUse","transportContentType","_tpContentType","sslExcludedProtocols","_sslExcludedProtocols","sslCipherSuites","_sslCipherSuites","_sslValidateCert","env","NODE_TLS_REJECT_UNAUTHORIZED","sslTrustStores","_sslTrustStores","sslTrustedCommonNameList","_sslTrustedCNList","_sslPfx","sslPfxPassword","_sslPfxPasswd","_sslPrivateKey","sslPrivateKeyPassword","_sslPrivateKeyPasswd","_sslCertificate","sslProtocol","_sslProtocol","_compressionLevel","_sslConnectionDowngradeTo","_lendsInspect","_vpnNameInUse","_virtualRouterName","_p2pInboxInUse","_p2pInboxBase","_userIdentification","_publisherProperties","makeDefaults","_authScheme","_accessToken","_idToken","issuerIdentifier","_issuerIdentifier","_url","password","_password","userName","_userName","clientName","_clientName","applicationDescription","_appDesc","vpnName","_vpnName","vpnNameInUse","_connectTimeout","transportCount","connectDowngradeDefault","_connectRetries","_connectRetriesPerHost","_reconnectRetryWaitInMsecs","generateSendTimestamps","_genSendTimestamps","generateReceiveTimestamps","_genReceiveTimestamps","includeSenderId","_includeSenderId","generateSequenceNumber","_genSequenceNumber","_kaInterval","_kaIntervalsLimit","p2pInboxInUse","userIdentification","_setUserIdentification","subscriberLocalPriority","_subLocalPriority","subscriberNetworkPriority","_subNetworkPriority","ignoreDuplicateSubscriptionError","_ignoreDupSubError","ignoreSubscriptionNotFoundError","_ignoreSubNotFoundError","_reapplySubcriptions","_readTimeout","sendBufferMaxSize","_sendBufferMaxSize","_assumedMaxAdSize","maxWebPayload","_maxWebPayload","SslProtocolExcludeConstantMap","REMOVE_P2PINBOX","SESSION_ERROR","TRANSPORT_FAIL","CONNECTED","MessageLib","CACHE_REQUEST_PREFIX","isValidADTransport","SOLCLIENT_REQUEST_PREFIX","messageCallback","eventCallback","_sessionFSM","_messageCallbackInfo","wrapMessageCallback","_eventCallbackInfo","wrapEventCallback","selectedProtocol","defaultList","transportProtocolDefaultList","sliceIndex","validForAD","_adDisabledReason","transportProtocols","invalid","_sessionStats","_outstandingDataReqs","_capabilities","_seqNum","allowOperation","stateName","subscribe","isBooleanOrNothing","isRangeCompareOrNothing","handleSubscriptionUpdateResponse","handleQueueSubscriptionUpdateResponse","unsubscribe","unsubscribeDurableTopicEndpoint","createFromSpec","handleDTEUnsubscribeResponse","updateProperty","respMsg","oldP2pTopicName","oldP2pTopic","newP2pTopicName","newP2pTopic","afterAddCallback","smpResp","resp","afterRemoveCallback","updateAuthenticationOnReconnect","authenticationProperties","allowedProperties","newProps","getSessionProperties","validateAndSendMessage","sendRequest","requestFailedCBFunction","isFunctionOrNothing","replyToTopic","enqueueOutstandingDataReq","sendReply","messageToReplyTo","replyMessage","getSessionState","getTransportProtocol","capabilityType","isNumber","sessionStateName","getFSMState","WAITING_FOR_SESSION_UP","WAITING_FOR_P2PINBOX_REG","createCacheSession","browserProperties","destinationType","vrn","localName","operationEnum","allow","anything","NEW","routerCapabilities","sendDest","senderTimestamp","noSenderTimestamp","now","sequenceNumber","noSequenceNumber","senderId","noSenderId","reqFailedCb","replyRecvdCb","none","TX_REQUEST_TIMEOUT","requestEvent","cancelOutstandingDataReq","dataReq","dataMessageIn","dataMessage","RX_REPLY_MSG_RECVED","requestConfirm","adCtrlMessage","getEventCBInfo","setEventCBInfo","eventCBInfo","getMessageCBInfo","setMessageCBInfo","messageCBInfo","rfu","buildErrorEvent","object","CodecLib","BinaryMetaBlock","SMFAdProtocolParam","SMFClientCtrlParam","SMFParameterType","SMFExtendedParameterType","SMFSMPMessageType","SMFSMPMessageTypeFlags","SMFTransportSessionMessageType","SMFParameter","setBits","encAdp0Param","uh","paramtype","byte1","encAdp8Param","encAdp16Param","encAdp32Param","encAdp64Param","RSValueLenMap","encAdpReplayParam","valType","valObj","encAdp64AckPairParam","encAdpUTF8NTParam","byte2","parseAdpAt","adpVersion","twobyte","paramUH","paramType","paramValueLen","paramLen","smfParam","addParameter","encAdp","paramspace","paramarray","getParameterArray","param","WINDOW","EP_DURABLE","ACCESSTYPE","FLOWTYPE","EP_RESPECTS_TTL","TRANSACTION_CTRL_MESSAGE_TYPE","TRANSACTED_SESSION_STATE","ACTIVE_FLOW_INDICATION","WANT_FLOW_CHANGE_NOTIFY","MAX_REDELIVERY","getUh","EP_BEHAVIOUR","FLOWID","TRANSPORT_WINDOW","EP_ALLOTHER_PERMISSION","EP_QUOTA","EP_MAX_MSGSIZE","GRANTED_PERMISSION","TRANSACTED_SESSION_ID","PUBLISHER_ID","LASTMSGIDSENT","LASTMSGIDACKED","LASTMSGIDRECEIVED","TRANSACTION_ID","ENDPOINT_ERROR_ID","REPLAY_START_LOCATION","replayParamVal","APPLICATION_ACK","ranges","QUEUENAME","DTENAME","TOPICNAME","FLOWNAME","TRANSACTED_SESSION_NAME","TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY","TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK","TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK","NOLOCAL","APPLICATION_PUB_ACK","paramdata","version","threebytes","padBytes","twobytes","ContentSummaryType","ParamParse","ParseSMF","parseCCAt","payloadLen","ccMsg","paramUh","smfP","encCC","paramSpace","paramArray","currentParam","currentParamOneByte","paramData","ContentSummaryElement","position","XML_META","XML_PAYLOAD","BINARY_ATTACHMENT","CID_LIST","BINARY_METADATA","SolclientDestinationLib","SolclientMessageLib","SolclientSDTLib","PriorityUserCosMap","parseSMFAt","parseSMPAt","parseTsSmfMsgAt","userCosForPriority","BIN_STRUCTYPES","adaptBinaryMetaToMessage","binaryMeta","messageIn","messageSdt","payload","preambleByte0","preambleByte1","h","headerMap","ci","mi","mt","rt","si","sn","ts","payloadPosition","headerLength","payloadLength","stream","smf_dto","smf_elidingEligible","smf_deadMessageQueueEligible","smf_priority","pm_msg_priority","pm_userdata","pm_ad_redelflag","pm_ad_flowredelflag","pm_ad_msgid","pm_ad_prevmsgid","pm_ad_publisherid","pm_ad_publishermsgid","pm_ad_topicSequenceNumber","pm_ad_redeliveryCount","pm_ad_spooler_unique_id","pm_ad_replication_mate_ack_message_id","pm_ad_local_spooler_message_id","pm_ad_ttl","payloadOffset","cs","pm_content_summary","currentChunk","chunkBegin","chunkEnd","fromEncodedSmf","adaptSmfToMessage","SMFHeader","base64Encode","encContentSummary","encDeliveryMode","encLightSMFParam","encodeSMFParam","encodeSMFExtendedParam","encSmp","priorityForUserCos","addContentElementToArrays","csumm","payloadArray","dataChunk","cstype","cse","addToMapIfPresent","encodedSdtPayload","sdtPreamble","sdtStreamContainer","adaptMessageToBinaryMeta","binaryMetaSMF","asEncodedSmf","MAX_24BITS","adaptMessageToSmf","smfHeaderIn","payloadBytes","adaptMessageToSmf_payloadFinalize","pm_ad_publishermsgId","pm_ad_ackimm","pm_queue_len","pm_queue_offset","userData","adaptMessageToSmf_nonPayload","maskValues","bitRange","DI_BIT","ELIDING_ELIGIBLE_BIT","DTO_BIT","ADF_BIT","DMQE_BIT","VERSION_BITS","UH_BITS","PROTOCOL_BITS","PRIORITY_BITS","TTL_BITS","QT_OFFSET_BYTES","QT_LEN_BYTES","encodeSMF","w1","smf_version","smf_uh","smf_ttl","params","TR_TOPICNAME","LIGHT_QUEUE_NAME_OFFSET","pm_topic_len","LIGHT_TOPIC_NAME_OFFSET","pm_topic_offset","LIGHT_CORRELATION","LIGHT_ACK_IMMEDIATELY","MESSAGEPRIORITY","USERDATA","pm_username","USERNAME","pm_password","PASSWORD","RESPONSE","DELIVERY_MODE","ASSURED_MESSAGE_ID","ASSURED_PREVMESSAGE_ID","ASSURED_FLOWID","ASSURED_REDELIVERED_FLAG","AD_TIMETOLIVE","pm_ad_publisherMsgId","PUBLISHER_MSGID","MESSAGE_CONTENT_SUMMARY","extendedStreamContents","extendedUH","pm_oauth2_access_token","OAUTH2_ACCESS_TOKEN","pm_oidc_id_token","OIDC_ID_TOKEN","pm_oauth2_issuer_identifier","OAUTH2_ISSUER_IDENTIFIER","EXTENDED_TYPE_STREAM","encodedParams","hdrlen","msglen","setMessageSizes","setPayloadSize","SMFUH","delModeEnumBidiMap","lutDelModeToEnum","lutEnumToDelMode","uhTypeMap","paramTypeCount","lenMap","idx","lightMap","lenCount","ContentSummaryDecodeMap","delmode","elements","cumulativeSize","elementType","elementDeclaredLength","elementSize","cst","currentElement","contentSummaryArr","messageElementDescriptions","currentContentSummary","currentSizeStr","firstByte","lengthModeMap","lengthMode","lengthString","base64Decode","isSMFHeaderAvailable","isSMFHeaderValid","parseSMFExtendedStream","streamLen","pUH","AD_REDELIVERY_COUNT","AD_SPOOLER_UNIQUE_ID","AD_ACK_MESSAGE_ID","AD_REPL_MATE_ACK_MSGID","isSMFAvailable","remaining","readHeaderOnly","word1","headerLen","word3","paramByte1","prmUh","lwpType","lwpLen","lwpValueLen","parsedQueueOffsets","parseTopicQueueOffsets","parsedTopicOffsets","pStart","pType","pValueLen","pLen","pm_ad_publisher_id","parsedResponse","parseResponseParam","SUB_ID_LIST","GENERIC_ATTACHMENT","parseDeliveryMode","AD_TOPICSEQUENCE_NUMBER","contentSummary","parseContentSummary","AD_FLOWREDELIVERED_FLAG","ADDSUBSCRIPTION","REMSUBSCRIPTION","ADDQUEUESUBSCRIPTION","REMQUEUESUBSCRIPTION","msgFlags","smpFlags","queueLength","encodedUtf8QueueName","subsLength","TransportSMFMessage","remains","parseTsSmfHdrAt","smfheader","transportSMFMessage","tsHdrLen","tsHeaderLength","CREATE_RESP","rtrTagLen","routerTag","tsHeaderPreLength","tsDestroyHeaderPreSid","tsCreateHeader","tsDataTokenPreSid","tsDataStreamTokenPreSid","genTsCreateHeader","genTsDestroyHeader","sid","genTsDataTokenMsg","genTsDataStreamTokenMsg","paddingBytes","genTsDataMsgHeaderParts","BaseMessage","bUInt8","bUInt16BE","bUInt32BE","bUInt64BE","EndpointTypeToParam","QueueDescriptorTypeToParam","QUEUE_PERMISSIONS_TO_BITS","ACCESS_TYPE_INT_TO_ENUM","ACCESS_TYPE_ENUM_TO_BITS","DISCARD_ENUM_TO_VALUE","addQueueProperties","skipAccessType","IGNORE","_readParameter","decoder","bufMethod","getParameter","getBuffer","getBegin","masked","ENDPOINT_ID","GRANTED_PERMISSIONS","getLastMsgIdReceived","MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW","SPOOLER_UNIQUE_ID","REJECT","endpointTypeParam","lastMsgIdSent","adMsg","topicSubscription","wantFlowChangeUpdate","lastMsgIdReceived","endpointBytes","endpointType","rsValue","multiply","UNSUBSCRIBE","lastMessageIdAcked","applicationAckRanges","_parameters","bufSmf","chunkCount","fourbyte","SMFClientCtrlAuthType","BOOLEAN_CAPS_BITS","CLIENT_CAPS_VALUES","p2pParam","P2PTOPIC","vpnParam","MSGVPNNAME","vridParam","VRIDNAME","getUserIdValue","userIdParam","USERID","capParam","ROUTER_CAPABILITIES","prmParseCapabilitiesValue","SOFTWAREVERSION","SOFTWAREDATE","PLATFORM","PHYSICALROUTERNAME","dto","local","network","strDtoPriority","strCapabilities","capsIn","CT","boolCapCount","capsByte","bitIndex","msbIndex","capsKey","capLen","sprop","compressedTLS","plaintextTLS","cc","isClientCert","DELIVERTOONEPRIORITY","prmGetDtoPriorityValue","CLIENTDESC","AUTHENTICATION_SCHEME","CLIENTNAME","mode","formattedDate","SSL_DOWNGRADE","clientCaps","clientCapList","highestCap","capBits","cap","clientCapsToStr","CLIENT_CAPABILITIES","keepaliveVal","KEEP_ALIVE_INTERVAL","UPDATE","appdesc","strName","encodeResult","ttl","smf_msgLen","smf_tqd","unknownProtoFlag","begin","_uh","_begin","getEnd","SMF_SMP_FLAG_TOPIC","_encodedQueueName","_encodedClientName","isFlag","flagMask","setFlag","smp","SMF_SMP_FLAG_RESPREQUIRED","SMF_SMP_FLAG_PERSIST","TRANSACTIONCTRL","XACTRL","TRANSPORT_PRIORITY","LINGER_OPTION","NUM_MESSAGES_SPOOLED","PUBLISHER_FLAGS","APP_MSG_ID_TYPE","QUEUE_ENDPOINT_HASH","PAYLOAD","ACK_SEQUENCE_NUMBER","ACK_RECONCILE_REQUEST","START_OF_ACK_RECONCILE","TIMESTAMP","BRIDGE_MSG_VPN_NAME","BRIDGE_ROUTER_NAME","BRIDGE_VERSION","CONNECTION_TYPE","ROUTER_CAPABILITIES_EXTENDED","REQUIRES_RELEASE_7","PADDING","CSPF","CSMP","PUBMSG","XMLLINK","WSE","SEMP","SUBCTRL","PUBCTRL","SMRP","SMF_IN_SMF","SMF_IN_RV","ADCTRL_PASSTHROUGH","FLAG_FILTER","FLAG_PERSIST","SMF_SMP_FLAG_DELIVERALWAYS","ADDSUBSCRIPTIONFORCLIENTNAME","REMSUBSCRIPTIONFORCLIENTNAME","DESTROY","DESTROY_RESP","DATA","DATA_TOKEN","DATA_STREAM_TOKEN","CacheContext","CacheRequest","cacheCBFunction","getCallback","getUserObject","cacheRequestCorrelationId","CacheGetResultCode","INVALID","matchTopic","sessionID","isSuspect","hasMore","hasTimestamps","messageStream","clusterNameStream","CacheGetResult","readFromStream","FULFILL","FLOW_THRU","_returnCode","_subcode","_topic","getReturnCode","getReturnSubcode","getTopic","getError","CacheRequestType","BULK_MSG","REGISTER_REQUEST","REGISTER_RESPONSE","HEARTBEAT_REQUEST","HEARTBEAT_RESPONSE","EVENT_NOTIFY","EVENT_ACK","ACTION_REQUEST","ACTION_RESPONSE","GET_REQUEST","GET_RESPONSE","GET_NEXT_REQUEST","GET_NEXT_RESPONSE","SET_REQUEST","SET_RESPONSE","GET_MSG_REQUEST","GET_MSG_RESPONSE","GET_NEXT_MSG_REQUEST","GET_NEXT_MSG_RESPONSE","UNREGISTER_IND","BULK_SET_REQUEST","BULK_SET_RESPONSE","PURGE_MSG_SEQUENCE_REQUEST","PURGE_MSG_SEQUENCE_RESPONSE","GET_MSG_SEQUENCE_REQUEST","GET_NEXT_MSG_SEQUENCE_REQUEST","GET_TOPIC_INFO_REQUEST","GET_TOPIC_INFO_RESPONSE","READY_MARKER","GET_TOPIC_INFO_REQUEST_RANGE","SYNC_READY_MARKER","VACUUM_REQUEST","VACUUM_RESPONSE","cacheSession","cacheMessageType","requestID","cbInfo","liveDataAction","cacheName","subscriptionWaiting","replyReceived","dataReceived","correlationID","childRequests","parentRequest","queuedLiveData","liveDataFulfilled","timeoutHandle","getRootRequest","addChild","childIn","child","removeChild","childIndex","collapse","clearRequestTimeout","getRequestID","getCBInfo","getLiveDataAction","startRequestTimeout","cacheSessionTimeoutCB","timeoutMsec","VERSION","DEFAULT_REPLY_SIZE_LIMIT","REPLY_SIZE_LIMIT","FAIL","INCOMPLETE","REQUEST_COMPLETE","LIVE_DATA_FULFILL","ERROR_RESPONSE","INVALID_SESSION","REQUEST_ALREADY_IN_PROGRESS","NO_DATA","SUSPECT_DATA","CACHE_SESSION_DISPOSED","maxAgeSec","maxMessages","includeOtherClusters","cachePrefix","getCacheName","setCacheName","getMaxMessageAgeSec","setMaxMessageAgeSec","getMaxMessages","setMaxMessages","getTimeoutMsec","setTimeoutMsec","CacheSessionSubscribeInfo","SessionLib","noOp","privateInterface","_validateProps","_outstandingRequests","_outstandingIDs","_nextMessageCallbackInfo","_nextSessionEventCallbackInfo","_sessionIF","_connectToSession","_handleMessage","_createCompoundEventCB","nextDelegate","rfuObject","_handleSessionEvent","_processSessionEvent","cbUserObject","_sendToNextDelegate","_checkSubscriptionStatus","_getOutstandingRequest","_handleSubscriptionSuccess","_handleSubscriptionError","requestIn","_startCacheRequest","_terminateRequest","_checkRequestCompletion","parent","_unregisterRequest","_sendSeeOther","cacheGetResult","clusterName","childRequest","_registerRequest","_handleCacheRequestTimeout","_sendGetNext","nextRequest","_relevantLiveData","streamField","_incStat","CACHE_REQUEST_FULFILL_DISCARD_RESPONSE","_decodeMessageStream","RX_CACHE_MSG","exception","checkCID","_performLiveDataAction","_fulfillRequest","_trackCompletionStats","_notifyCallback","sendCacheRequest","arguments","_notifyCallbackError","matchingRequestKeys","conflictKeys","conflictRequest","waitingForSubscribeInfo","_subscriptionWaiting","_handleCacheRequestFailed","suppressClusters","round","CACHE_REQUEST_SENT","CACHE_REQUEST_OK_RESPONSE","CACHE_REQUEST_LIVE_DATA_FULFILL","CACHE_REQUEST_INCOMPLETE_RESPONSE","CACHE_REQUEST_FAIL_RESPONSE","innerMessage","cacheRequest","TX_PERSISTENT_REDELIVERED","TX_NONPERSISTENT_REDELIVERED","TX_PERSISTENT_BYTES_REDELIVERED","TX_NONPERSISTENT_BYTES_REDELIVERED","RX_DIRECT_MSGS","RX_PERSISTENT_MSGS","RX_NONPERSISTENT_MSGS","RX_DIRECT_BYTES","RX_PERSISTENT_BYTES","RX_NONPERSISTENT_BYTES","TX_WINDOW_CLOSE","_parent","_statsMap","TransportSessionStates","BaseSMFClient","rxSmfCB","rxMessageErrorCB","_rxSmfCB","_rxMessageErrorCB","_correlationCounter","SMF_MAX_CORRELATION","concatFrom","allocUnsafe","buf0","copy","readUInt32BEFrag","bufList","listOffsetParam","byteIndexParam","listOffset","byteIndex","BufferQueue","maxSize","_queue","_maxSize","peekView","oIndex","put","adaptData","advance","done","chunk","logPeekBuffer","bufPair","_incomingBuffer","rxDataString","_rxDataCB","rxDataArrayBuffer","rxDataBuffer","putSuccess","messageLen","msgBuffer","_sessionId","fs","SolclientSessionLib","NodeTLSOptsMixin","checkCertificateCNs","cert","_props","valid","cn","createTLSOptions","constMap","trimmed","tsContents","tsFile","readFileSync","navigator","appVersion","CompressedTransport","TcpRawTransport","TcpTlsTransport","TlsOnlyTransport","Duplex","ShuntableTransport","_shunted","_dontEnd","_underlyingTransport","underlyingTransport","_interimBuffer","_transportDrained","_connected","shunt","dontEnd","_write","INVALID_STATE_FOR_OPERATION","_read","unpause","pause","eventCB","onConnect","onError","onClose","onDrain","resendBuffer","setNoDelay","arg","shunted","zlib","TransportBase","TransportSessionEvent","TransportSessionState","client","_clientstats","_waitForSocketDrain","_waitForCompressorDrain","_flushCallback","_socketDrained","_compressorDrained","_state","_socketError","_transportSession","_compressor","_decompressor","setClientStats","setUnderlyingTransport","newUnderlyingTransoprt","WAITING_FOR_DESTROY","write","onData","_client","Z_SYNC_FLUSH","_eventCB","onZlibError","_destroy","CONNECTION_FAILED","stage2destroy","onOpen","WAITING_FOR_CREATE","highWaterMark","createDeflateRaw","createInflateRaw","sendCompressed","onCompressorDrain","onerrorStub","unpipe","_hadError","close","resume","prevCallback","net","TransportClientStats","_canSendNeeded","_drained","_rawSocket","rehome","parseHostPort","urlString","port","urlParsed","_ssl","originalSocket","hadError","errorMsg","Socket","bufferSize","tls","_tlsSocket","tlsOptions","socket","getUnderlyingTransport","_shuntableTransport","duplexOptions","tlsShutdown","tlsShutdownStage2","transportProps","immediate","beginDowngrade","_interceptor","removed","installed","urlParts","validSchemes","WebTransportCapabilities","WebTransport","getId","compressingLayer","plaintextTransport","tlsLayer","uncompressedTransport","encryptedTransport","compress","precallback","WebTransportsLib","lutTransportProtocols","StateBase64","StateBinary","StateStreamingAndBinary","StateWebSocketBinary","TransportProtocolHandler","useSSL","transport","downgradeTransport","TransportConstructor","switchState","onEnter","completeDowngrade","canCompleteDowngrade","getNextState","newState","DOWNGRADE_FAILED","DOWNGRADE_SUCCEEDED","tsEventCode","_transportEventCode","_sid","transportEventCode","getResponseCode","TSHState","tpProtocol","exitCallback","nextState","_transportProtocol","_exitCallback","_nextState","_unsupportedRuntimeMessage","userAgent","setNextState","getUseSsl","validateLegal","HTTPLib","HTTPConnection","HTTPTransportSession","sendXhrBinary","sendXhrText","TimingBucket","XHRFactory","prependOrigin","location","origin","WaitedToken","HadToken","ReturnedToken","bucketCount","base64Enc","streamProgressEvents","rxDataCb","connectionErrorCb","contentType","connectionClose","Options","_streamProgressBytes","_xhr","_rxDataCb","_connErrorCb","_reqActive","_REQCOUNTER","_REQBASE","_handleAbortedReq","browserSupportsXhrBinary","recStat","attempt","maxRetry","abort","open","onreadystatechange","xhrStateChange","sentdata","readyState","RS_LOADING","LOADING","RS_DONE","DONE","status","responseType","responseText","decodedData","statusText","responseTextLen","sentdataLen","responseTextDump","nextMaxRetry","isUsingBase64","xhr","check","onprogress","WebTransportSessionBase","PacketReadState","baseUrl","_haveToken","_confMaxWebPayload","_maxPayloadBytes","_destroyTimer","_destroyTimeout","_createUrl","_routerUrl","_rxChannelClient","_httpSendConn","_httpReceiveConn","_smfDataTokenTSHeader","_routerTag","_useBinaryTransport","_useStreamingTransport","_streamingTransportPadding","_packetReadState","agent","_contentType","connectTimerExpiry","destroyCleanup","updateMaxWebPayload","trLessEncapSMF","connectInternal","_connError","_createConn","handleCreateConnFailure","createMsg","createConnectTimeout","connError","cancelConnectTimeout","destroyTimerExpiry","handleRxDataToken","handleSendFailure","destroyMsg","_queuedData","enqueueData","remainder","allowEnqueue","enqueueFailNoSpace","transportPacketLen","_smfDataTSHeaderParts","_queuedDataSize","initPreformattedHeaders","sendQueuedData","getQueuedDataToSend","tsRc","smfresponse","useBase64","useStreaming","handleRxStreaming","handleSmfMessage","handleSmfParseError","handleRxData","handleDestroyResponse","cancelDestroyTimeout","innerResponse","tsmsg","TotalPayloadToRead","smfErrResponse","responseErrStr","handleRxError","errorInfo","asyncSendEvent","finalize","sendXhrBinaryMSIE10","overrideMimeType","setRequestHeader","sendXhrBinaryXHR2","connClose","allowFail","XMLHttpRequest","exitCb","xhrBinary","streaming","WebSocketTransportSession","browserSupportsBinaryWebSockets","browserSupportsStreamingResponse","WebTransportEvent","DOWNGRADE","WebTransportState","WebTransportFSM","transportIn","WebTransportDown","wEvent","WebTransportConnecting","destroyInternal","_destroyMsg","WebTransportDestroying","getConnError","_eventReason","notifyEvent","_transportEvent","attemptDowngrade","WebTransportUp","WebTransportDowngrading","DOWNGRADING","notifyDowngradeFailed","_downgradeMsg","DESTROYING","tsEvent","bytesAllowed","getBufferedAmount","elemLength","_transportHandler","_webTransportFsm","handleDestroyed","_lastDowngradeSucceeded","WebSocketCloseCodes","http","https","MyWebSocket","WebSocket","createWebSocketOptions","onDrainCallback","Agent","keepAlive","wsAgent","origCreateConnection","createConnection","opts","adaptURL","_socket","msgBuf","wasClean","maybeEmitCanSend","maybeEmitFlush","onBufferedAmountPoll","scheduleQuery","WAITING_FOR_CONNECT","onMessage","_socketOptions","ondrain","binaryType","onopen","onmessage","onclose","onerror","force","bufferAllow","maxPayloadBytes","validator","typeInstance","typeInstanceDesc","boolean","allowUndefined","allowEmpty","allowDuplicate","ele","typedesc","cloneObj","acc","NODE_OS_TYPES","Darwin","Windows_NT","NODE_PROCESS","os","ostype","osname","nodeVersionStr","release","arch","LUT_PRINTABLE","padLeftRight","minLen","padSide","padChar","leastSpaces","spaces","capitalizeWord","isEmptyFun","hexdump","printable","spacer","linelen","sLength","heredoc","literals","substitutions","subst","buckets","normalized","cont","MODE","FORMATTED_DATE","pad","SUMMARY","BaseChecks","instanceOfAny","types","truthy","fn","rangeGe","rangeMinInclusive","rangeGt","rangeMin","rangeLe","rangeMaxInclusive","rangeLt","rangeMax","rangeCompare","operator","operand","epsilon","expected","member","function","orNull","orUndefined","orNothing","thenGen","doOp","elseFn","when","condition","unless","NO_OBJ","subcodeSummary","got","expectedStr","gotStr","validatorArgs","validateError","typename","memberOfEnum","isMember","memberOf","objectValues","isNumberOrNull","isRangeCompare","isStringOrNull","_instanceof","nativeMap","nativeSet","nativePromise","depth","allParents","allChildren","useBuffer","_clone","proto","reject","__isArray","__isRegExp","RegExp","__getRegExpFlags","__isDate","getPrototypeOf","keyChild","valueChild","entryChild","getOwnPropertySymbols","symbols","symbol","allPropertyNames","propertyName","__objToStr","o","re","ignoreCase","multiline","clonePrototype","createWebSocketStream","Server","Receiver","Sender","WebSocketServer","EMPTY_BUFFER","totalLength","_mask","mask","_unmask","toArrayBuffer","toBuffer","readOnly","isView","bufferUtil","unmask","BINARY_TYPES","alloc","GUID","kForOnEventAttribute","Symbol","kListener","kStatusCode","kWebSocket","NOOP","kCode","kData","kError","kMessage","kReason","kTarget","kType","kWasClean","Event","CloseEvent","ErrorEvent","MessageEvent","EventTarget","addEventListener","wrapper","isBinary","_closeFrameReceived","_closeFrameSent","removeEventListener","handler","listeners","tokenChars","format","configurations","offers","extensionName","paramName","mustUnescape","isEscaping","inQuotes","SyntaxError","token","kDone","kRun","concurrency","jobs","job","Limiter","TRAILER","kPerMessageDeflate","kTotalLength","kCallback","kBuffers","zlibLimiter","deflateOnData","inflateOnData","_maxPayload","RangeError","inflateOnError","_inflate","isServer","maxPayload","_options","_threshold","threshold","_isServer","_deflate","concurrencyLimit","offer","serverNoContextTakeover","server_no_context_takeover","clientNoContextTakeover","client_no_context_takeover","serverMaxWindowBits","server_max_window_bits","clientMaxWindowBits","client_max_window_bits","accept","normalizeParams","acceptAsServer","acceptAsClient","cleanup","accepted","num","isInteger","TypeError","decompress","fin","_decompress","_compress","windowBits","Z_DEFAULT_WINDOWBITS","zlibInflateOptions","_readableState","endEmitted","zlibDeflateOptions","Writable","PerMessageDeflate","isValidStatusCode","isValidUTF8","ErrorCtor","statusCode","errorCode","_binaryType","_extensions","_skipUTF8Validation","skipUTF8Validation","_bufferedBytes","_buffers","_compressed","_payloadLength","_fragmented","_masked","_fin","_opcode","_totalPayloadLength","_messageLength","_fragments","_loop","startLoop","consume","dst","getInfo","getPayloadLength16","getPayloadLength64","getMask","getData","compressed","haveLength","controlMessage","er","fragments","randomFillSync","applyMask","kByteLength","maskBuffer","generateMask","_generateMask","_maskBuffer","_firstFragment","_deflating","merge","skipMasking","opcode","rsv1","writeUInt16BE","writeUIntBE","enqueue","sendFrame","frame","ping","pong","perMessageDeflate","binary","destroyed","dequeue","Reflect","cork","uncork","emitClose","duplexOnEnd","_writableState","finished","duplexOnError","ws","terminateOnDestroy","duplex","autoDestroy","objectMode","writableObjectMode","CLOSED","nextTick","called","_final","isPaused","protocols","_isValidUTF8","createHash","subprotocol","keyRegex","server","socketOnError","abortHandshake","headers","STATUS_CODES","Connection","handleProtocols","clientTracking","verifyClient","noServer","backlog","_server","createServer","res","body","writeHead","listen","emitConnection","_removeListeners","addListeners","listening","upgrade","head","handleUpgrade","clients","_shouldEmitClose","shouldHandle","method","secWebSocketProtocol","secWebSocketExtensions","secure","authorized","encrypted","verified","completeUpgrade","readable","update","digest","_protocol","setSocket","randomBytes","Readable","URL","readyStates","subprotocolRegex","protocolVersions","_closeCode","_closeMessage","_closeTimer","_paused","_readyState","_receiver","_sender","_bufferedAmount","_redirects","initAsClient","bufferedAmount","receiver","receiverOnConclude","receiverOnDrain","receiverOnError","receiverOnMessage","receiverOnPing","receiverOnPong","unshift","socketOnClose","socketOnData","socketOnEnd","OPEN","_req","CLOSING","errorEmitted","sendAfterClose","needDrain","websocket","protocolVersion","followRedirects","maxRedirects","socketPath","parsedUrl","isSecure","isUnixSocket","invalidURLMessage","pathname","hash","emitErrorAndClose","defaultPort","protocolSet","tlsConnect","netConnect","Upgrade","search","handshakeTimeout","Origin","username","auth","parts","_originalHost","entries","authorization","cookie","aborted","addr","serverProt","protError","extensionNames","servername","isIP","setHeader","receiverOnFinish","read","property","require","wasm","WebAssembly","Instance","Module","unsigned","ctz32","clz32","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","radix","radixToPower","power","mul","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","div","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","ne","lessThan","comp","lessThanOrEqual","lte","le","greaterThan","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiplier","b00","divide","divisor","approx","toUnsigned","shru","shr","shl","log2","ceil","delta","approxRes","approxRem","modulo","mod","countLeadingZeros","clz","countTrailingZeros","ctz","and","or","xor","shiftLeft","shiftRight","shiftRightUnsigned","shr_u","rotateLeft","rotl","rotateRight","rotr","toSigned","toBytes","toBytesLE","hi","lo","fromBytes","fromBytesLE","fromBytesBE","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}