{"version":3,"file":"solclient-full.js","mappings":"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","sources":["webpack://solclientjs/./index.js","webpack://solclientjs/./modules/solclient-convert/api.js","webpack://solclientjs/./modules/solclient-convert/lib/base64.js","webpack://solclientjs/./modules/solclient-convert/lib/bits.js","webpack://solclientjs/./modules/solclient-convert/lib/convert.js","webpack://solclientjs/./modules/solclient-convert/lib/hex.js","webpack://solclientjs/./modules/solclient-convert/lib/long.js","webpack://solclientjs/./modules/solclient-core/api-internal.js","webpack://solclientjs/./modules/solclient-core/api.js","webpack://solclientjs/./modules/solclient-debug/api.js","webpack://solclientjs/./modules/solclient-debug/lib/debug.js","webpack://solclientjs/./modules/solclient-destination/api.js","webpack://solclientjs/./modules/solclient-destination/lib/destination-from-network.js","webpack://solclientjs/./modules/solclient-destination/lib/destination-type.js","webpack://solclientjs/./modules/solclient-destination/lib/destination-util.js","webpack://solclientjs/./modules/solclient-destination/lib/destination.js","webpack://solclientjs/./modules/solclient-destination/lib/queue.js","webpack://solclientjs/./modules/solclient-destination/lib/subscription-info.js","webpack://solclientjs/./modules/solclient-destination/lib/topic.js","webpack://solclientjs/./modules/solclient-env/api.js","webpack://solclientjs/./modules/solclient-error/api.js","webpack://solclientjs/./modules/solclient-error/lib/error-response-subcode-mapper.js","webpack://solclientjs/./modules/solclient-error/lib/error-subcodes.js","webpack://solclientjs/./modules/solclient-error/lib/not-implemented-error.js","webpack://solclientjs/./modules/solclient-error/lib/operation-error.js","webpack://solclientjs/./modules/solclient-error/lib/request-error.js","webpack://solclientjs/./modules/solclient-error/lib/request-event-codes.js","webpack://solclientjs/./modules/solclient-error/lib/solace-error.js","webpack://solclientjs/./modules/solclient-eskit/api.js","webpack://solclientjs/./modules/solclient-eskit/lib/array-operations.js","webpack://solclientjs/./modules/solclient-eskit/lib/assert.js","webpack://solclientjs/./modules/solclient-eskit/lib/bidi-map.js","webpack://solclientjs/./modules/solclient-eskit/lib/enum.js","webpack://solclientjs/./modules/solclient-eskit/lib/iterator.js","webpack://solclientjs/./modules/solclient-eskit/lib/lazy.js","webpack://solclientjs/./modules/solclient-eskit/lib/make-map.js","webpack://solclientjs/./modules/solclient-eskit/lib/mixin.js","webpack://solclientjs/./modules/solclient-eskit/lib/resolver.js","webpack://solclientjs/./modules/solclient-eskit/lib/set-operations.js","webpack://solclientjs/./modules/solclient-events/api.js","webpack://solclientjs/./modules/solclient-events/lib/event-emitter.js","webpack://solclientjs/./modules/solclient-events/lib/timer.js","webpack://solclientjs/./modules/solclient-factory/api.js","webpack://solclientjs/./modules/solclient-factory/lib/profile-binding.js","webpack://solclientjs/./modules/solclient-factory/lib/solclient-factory-profiles.js","webpack://solclientjs/./modules/solclient-factory/lib/solclient-factory-properties.js","webpack://solclientjs/./modules/solclient-factory/lib/solclient-factory.js","webpack://solclientjs/./modules/solclient-flow/api.js","webpack://solclientjs/./modules/solclient-flow/lib/flow-operation.js","webpack://solclientjs/./modules/solclient-flow/lib/flow.js","webpack://solclientjs/./modules/solclient-flow/lib/private-flow-event-names.js","webpack://solclientjs/./modules/solclient-fsm/api.js","webpack://solclientjs/./modules/solclient-fsm/lib/entry-point.js","webpack://solclientjs/./modules/solclient-fsm/lib/event.js","webpack://solclientjs/./modules/solclient-fsm/lib/exit-point.js","webpack://solclientjs/./modules/solclient-fsm/lib/object.js","webpack://solclientjs/./modules/solclient-fsm/lib/state-context.js","webpack://solclientjs/./modules/solclient-fsm/lib/state-machine.js","webpack://solclientjs/./modules/solclient-fsm/lib/state.js","webpack://solclientjs/./modules/solclient-log/api.js","webpack://solclientjs/./modules/solclient-log/lib/console-log-impl.js","webpack://solclientjs/./modules/solclient-log/lib/global-binding.js","webpack://solclientjs/./modules/solclient-log/lib/log-impl.js","webpack://solclientjs/./modules/solclient-log/lib/log-levels.js","webpack://solclientjs/./modules/solclient-message-consumer/api.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/application-acks.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/consumer-flows.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/consumer-fsm-event-names.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/consumer-fsm-event.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/consumer-fsm.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/consumer-state-names.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer-acknowledge-modes.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer-event-names.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer-event.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer-properties-validator.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer-properties.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-dispatcher.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/queue-browser-event-names.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/queue-browser-properties.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/queue-browser.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/transport-acks.js","webpack://solclientjs/./modules/solclient-message-publisher/api.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-ids.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-publisher-acknowledge-modes.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-publisher-event-names.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-publisher-properties-validator.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-publisher-properties.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-publisher.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/publisher-fsm-event-names.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/publisher-fsm-event.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/publisher-fsm.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/publisher-state-names.js","webpack://solclientjs/./modules/solclient-message/api.js","webpack://solclientjs/./modules/solclient-message/lib/message-cache-status.js","webpack://solclientjs/./modules/solclient-message/lib/message-delivery-mode-types.js","webpack://solclientjs/./modules/solclient-message/lib/message-dump-flags.js","webpack://solclientjs/./modules/solclient-message/lib/message-dump-standard-provider.js","webpack://solclientjs/./modules/solclient-message/lib/message-dump-util.js","webpack://solclientjs/./modules/solclient-message/lib/message-types.js","webpack://solclientjs/./modules/solclient-message/lib/message-user-cos-types.js","webpack://solclientjs/./modules/solclient-message/lib/message.js","webpack://solclientjs/./modules/solclient-message/lib/replication-group-message-id.js","webpack://solclientjs/./modules/solclient-queue/api.js","webpack://solclientjs/./modules/solclient-queue/lib/abstract-queue-descriptor.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-access-types.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-descriptor-validator.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-descriptor.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-discard-behaviors.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-permissions.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-properties-validator.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-properties.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-types.js","webpack://solclientjs/./modules/solclient-replaystart/api.js","webpack://solclientjs/./modules/solclient-replaystart/lib/replayStartLocation.js","webpack://solclientjs/./modules/solclient-replaystart/lib/replayStartLocationBeginning.js","webpack://solclientjs/./modules/solclient-replaystart/lib/replayStartLocationDate.js","webpack://solclientjs/./modules/solclient-sdt/api.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/api.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/encode-header.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/encode-integer.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/encode-map.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/encode-single-element.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/encode-stream.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/ieee754lib.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-destination.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-field-header.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-float.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-integer.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-map.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-single-element.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-stream.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-data-types.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-destination-types.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-field-types.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-field.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-map-container.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-stream-container.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-unsupported-value-error.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-value-error-subcodes.js","webpack://solclientjs/./modules/solclient-sdt/lib/validate-sdt-field.js","webpack://solclientjs/./modules/solclient-session/api.js","webpack://solclientjs/./modules/solclient-session/lib/authentication-schemes.js","webpack://solclientjs/./modules/solclient-session/lib/capability-types.js","webpack://solclientjs/./modules/solclient-session/lib/correlated-request.js","webpack://solclientjs/./modules/solclient-session/lib/default-capabilities.js","webpack://solclientjs/./modules/solclient-session/lib/global-context.js","webpack://solclientjs/./modules/solclient-session/lib/host-list-dns-filter.js","webpack://solclientjs/./modules/solclient-session/lib/host-list.js","webpack://solclientjs/./modules/solclient-session/lib/message-rx-cb-info.js","webpack://solclientjs/./modules/solclient-session/lib/mutable-session-properties.js","webpack://solclientjs/./modules/solclient-session/lib/outstanding-data-request.js","webpack://solclientjs/./modules/solclient-session/lib/p2p-util.js","webpack://solclientjs/./modules/solclient-session/lib/session-event-cb-info.js","webpack://solclientjs/./modules/solclient-session/lib/session-event-codes.js","webpack://solclientjs/./modules/solclient-session/lib/session-event-names.js","webpack://solclientjs/./modules/solclient-session/lib/session-event.js","webpack://solclientjs/./modules/solclient-session/lib/session-fsm-event.js","webpack://solclientjs/./modules/solclient-session/lib/session-fsm.js","webpack://solclientjs/./modules/solclient-session/lib/session-operations.js","webpack://solclientjs/./modules/solclient-session/lib/session-properties-validator.js","webpack://solclientjs/./modules/solclient-session/lib/session-properties.js","webpack://solclientjs/./modules/solclient-session/lib/session-request-types.js","webpack://solclientjs/./modules/solclient-session/lib/session-state-names.js","webpack://solclientjs/./modules/solclient-session/lib/session-states.js","webpack://solclientjs/./modules/solclient-session/lib/session.js","webpack://solclientjs/./modules/solclient-session/lib/ssl-downgrades.js","webpack://solclientjs/./modules/solclient-session/lib/subscription-update-timeout-messages.js","webpack://solclientjs/./modules/solclient-smf/api.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/adprotocol.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/api.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/client-ctrl.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/content-summary-element.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/content-summary-types.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/decode.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/encode.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/param-parse.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/parse-smf.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/priority-user-cos-map.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/smp.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/transport.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/adprotocol-message.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/api.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/base-message.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/binary-meta-block.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/client-ctrl-message.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/keep-alive-message.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/smf-header.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/smf-parameter.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/smf-uh.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/smp-message.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/transport-smf-message.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-adprotocol-message-types.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-adprotocol-params.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-client-ctrl-message-types.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-client-ctrl-params.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-parameter-types.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-protocols.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-smp-message-type-flags.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-smp-message-types.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-transport-session-message-types.js","webpack://solclientjs/./modules/solclient-solcache-session/api.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-cb-info.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-context.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-get-result-codes.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-get-result.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-live-data-actions.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-request-result.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-request-types.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-request.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-return-codes.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-return-subcodes.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-session-properties.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-session-subscribe-info.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-session.js","webpack://solclientjs/./modules/solclient-stats/api.js","webpack://solclientjs/./modules/solclient-stats/lib/stat-bymode.js","webpack://solclientjs/./modules/solclient-stats/lib/stat-types.js","webpack://solclientjs/./modules/solclient-stats/lib/stats.js","webpack://solclientjs/./modules/solclient-transport/api.js","webpack://solclientjs/./modules/solclient-transport/lib/base-smf-client.js","webpack://solclientjs/./modules/solclient-transport/lib/buffer-queue.js","webpack://solclientjs/./modules/solclient-transport/lib/buffer-smf-client.js","webpack://solclientjs/./modules/solclient-transport/lib/node-tls-opts-mixin.js","webpack://solclientjs/./modules/solclient-transport/lib/smf-client.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/api.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/shuntable-transport.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/transport-compression.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/transport-tcp-plaintext.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/transport-tcp-tls.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/transport-tls.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-base.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-capabilities.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-client-stats.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-error.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-factory.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-protocol-handler.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-protocols.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-return-codes.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-session-event-codes.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-session-event.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-session-states.js","webpack://solclientjs/./modules/solclient-transport/lib/tsh-state.js","webpack://solclientjs/./modules/solclient-transport/lib/web/api.js","webpack://solclientjs/./modules/solclient-transport/lib/web/http/api.js","webpack://solclientjs/./modules/solclient-transport/lib/web/http/http-connection.js","webpack://solclientjs/./modules/solclient-transport/lib/web/http/http-transport-session.js","webpack://solclientjs/./modules/solclient-transport/lib/web/http/send-xhr.js","webpack://solclientjs/./modules/solclient-transport/lib/web/http/xhr-factory.js","webpack://solclientjs/./modules/solclient-transport/lib/web/state-base64.js","webpack://solclientjs/./modules/solclient-transport/lib/web/state-binary.js","webpack://solclientjs/./modules/solclient-transport/lib/web/state-streaming-and-binary.js","webpack://solclientjs/./modules/solclient-transport/lib/web/state-websocket-binary.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport-capabilities.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport-events.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport-fsm.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport-session-base.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport-states.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport.js","webpack://solclientjs/./modules/solclient-transport/lib/web/websocket-close-codes.js","webpack://solclientjs/./modules/solclient-transport/lib/web/websocket-transport-session.js","webpack://solclientjs/./modules/solclient-util/api.js","webpack://solclientjs/./modules/solclient-util/lib/api-properties-validators.js","webpack://solclientjs/./modules/solclient-util/lib/api-properties.js","webpack://solclientjs/./modules/solclient-util/lib/array-utils.js","webpack://solclientjs/./modules/solclient-util/lib/process.js","webpack://solclientjs/./modules/solclient-util/lib/string-buffer.js","webpack://solclientjs/./modules/solclient-util/lib/string-utils.js","webpack://solclientjs/./modules/solclient-util/lib/timing-bucket.js","webpack://solclientjs/./modules/solclient-util/lib/url.js","webpack://solclientjs/./modules/solclient-util/lib/uuid.js","webpack://solclientjs/./modules/solclient-util/lib/version.js","webpack://solclientjs/./modules/solclient-validate/api.js","webpack://solclientjs/./modules/solclient-validate/lib/base-checks.js","webpack://solclientjs/./modules/solclient-validate/lib/check.js","webpack://solclientjs/./modules/solclient-validate/lib/parameter.js","webpack://solclientjs/./node_modules/clone/clone.js","webpack://solclientjs/./node_modules/ws/index.js","webpack://solclientjs/./node_modules/ws/lib/buffer-util.js","webpack://solclientjs/./node_modules/ws/lib/constants.js","webpack://solclientjs/./node_modules/ws/lib/event-target.js","webpack://solclientjs/./node_modules/ws/lib/extension.js","webpack://solclientjs/./node_modules/ws/lib/limiter.js","webpack://solclientjs/./node_modules/ws/lib/permessage-deflate.js","webpack://solclientjs/./node_modules/ws/lib/receiver.js","webpack://solclientjs/./node_modules/ws/lib/sender.js","webpack://solclientjs/./node_modules/ws/lib/stream.js","webpack://solclientjs/./node_modules/ws/lib/subprotocol.js","webpack://solclientjs/./node_modules/ws/lib/validation.js","webpack://solclientjs/./node_modules/ws/lib/websocket-server.js","webpack://solclientjs/./node_modules/ws/lib/websocket.js","webpack://solclientjs/external commonjs2 \"bufferutil\"","webpack://solclientjs/external commonjs2 \"utf-8-validate\"","webpack://solclientjs/external node-commonjs \"buffer\"","webpack://solclientjs/external node-commonjs \"constants\"","webpack://solclientjs/external node-commonjs \"crypto\"","webpack://solclientjs/external node-commonjs \"dns\"","webpack://solclientjs/external node-commonjs \"events\"","webpack://solclientjs/external node-commonjs \"fs\"","webpack://solclientjs/external node-commonjs \"http\"","webpack://solclientjs/external node-commonjs \"https\"","webpack://solclientjs/external node-commonjs \"net\"","webpack://solclientjs/external node-commonjs \"os\"","webpack://solclientjs/external node-commonjs \"stream\"","webpack://solclientjs/external node-commonjs \"tls\"","webpack://solclientjs/external node-commonjs \"url\"","webpack://solclientjs/external node-commonjs \"zlib\"","webpack://solclientjs/./node_modules/long/umd/index.js","webpack://solclientjs/webpack/bootstrap","webpack://solclientjs/webpack/startup"],"sourcesContent":["// Node entry point\n//global.BUILD_ENV = require('./define.config.js');\nmodule.exports = require('solclient-core');\n\n","const { Base64 } = require('./lib/base64');\nconst { Bits } = require('./lib/bits');\nconst { Convert } = require('./lib/convert');\nconst { Hex } = require('./lib/hex');\nconst { Long } = require('./lib/long');\n\nmodule.exports.Base64 = Base64;\nmodule.exports.Bits = Bits;\nmodule.exports.Convert = Convert;\nmodule.exports.Hex = Hex;\nmodule.exports.Long = Long;\n","// This code was written by Tyler Akins and has been placed in the\n// public domain.  It would be nice if you left this header intact.\n// Base64 code from Tyler Akins -- http://rumkin.com\n\n// It has been modified by me (Edward Funnekotter) to improve its\n// efficiency\n\n// It has been modified by me (Justin Bowes) to avoid using it whenever\n// possible in favour of browser or buffer implementations.\n\nconst KEY_STR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst ENC_LUT = [\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, 99, -1, -1, 99, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  99, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, 62, -1, -1, -1, 63,\n  52, 53, 54, 55, 56, 57, 58, 59,\n  60, 61, -1, -1, -1, 64, -1, -1,\n\n    // 64\n  -1, 0, 1, 2, 3, 4, 5, 6,\n  7, 8, 9, 10, 11, 12, 13, 14,\n  15, 16, 17, 18, 19, 20, 21, 22,\n  23, 24, 25, -1, -1, -1, -1, -1,\n  -1, 26, 27, 28, 29, 30, 31, 32,\n  33, 34, 35, 36, 37, 38, 39, 40,\n  41, 42, 43, 44, 45, 46, 47, 48,\n  49, 50, 51, -1, -1, -1, -1, -1,\n\n    // 128\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n\n    // 192\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1];\n\nclass DecodeError extends Error {\n\n}\n\nconst LegacyEncoder = {\n  /**\n   * Encodes a string in base64\n   * @param {String} input The string to encode in base64.\n   * @returns {String} base64 encoded input\n   * @private\n   */\n  base64_encode(input) {\n    let output = '';\n    let i = 0;\n    do {\n      const chr1 = input.charCodeAt(i++);\n      const chr2 = input.charCodeAt(i++);\n      const chr3 = input.charCodeAt(i++);\n\n      const enc1 = chr1 >> 2;\n      const enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n      let enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n      let enc4 = chr3 & 63;\n\n      if (isNaN(chr2)) {\n        enc3 = enc4 = 64;\n      } else if (isNaN(chr3)) {\n        enc4 = 64;\n      }\n\n      output += KEY_STR.charAt(enc1);\n      output += KEY_STR.charAt(enc2);\n      output += KEY_STR.charAt(enc3);\n      output += KEY_STR.charAt(enc4);\n    } while (i < input.length);\n\n    return output;\n  },\n\n  /**\n   * Decodes a base64 string.\n   * @param {String} input The base64 string to decode.\n   * @returns {String} binary output\n   * @private\n   */\n  base64_decode(input) {\n    let output = '';\n    let i = 0;\n\n    do {\n      while (ENC_LUT[input.charCodeAt(i)] > 64) {\n        i++;\n      }\n      const enc1 = ENC_LUT[input.charCodeAt(i++)];\n      const enc2 = ENC_LUT[input.charCodeAt(i++)];\n      const enc3 = ENC_LUT[input.charCodeAt(i++)];\n      const enc4 = ENC_LUT[input.charCodeAt(i++)];\n\n      if (enc1 < 0 || enc2 < 0 || enc3 < 0 || enc4 < 0) {\n        // Invalid character in base64 text\n        // alert(\"enc at \" + i + \": \" + enc1 + \", \" + enc2 + \", \" + enc3 + \", \" + enc4);\n        throw new DecodeError('Invalid base64 character');\n      }\n\n      const chr1 = (enc1 << 2) | (enc2 >> 4);\n      const chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n      const chr3 = ((enc3 & 3) << 6) | enc4;\n\n      output += String.fromCharCode(chr1);\n\n      if (enc3 !== 64) {\n        output += String.fromCharCode(chr2);\n      }\n      if (enc4 !== 64) {\n        output += String.fromCharCode(chr3);\n      }\n    } while (i < input.length - 3);\n\n    return output;\n  },\n};\n\nconst isNode = typeof window === 'undefined'; // !node\nconst hasBuffer = typeof Buffer !== 'undefined';\nconst hasBlob = typeof Blob !== 'undefined'; // !node, !ie9\nconst BufferEncoder = (hasBuffer && (hasBlob || isNode))\n  ? {\n    base64_encode: str => Buffer.from(str, 'binary').toString('base64'),\n    base64_decode: str => Buffer.from(str, 'base64').toString('binary'),\n  }\n  : {};\n/* eslint-env browser */\n/* eslint-disable dot-notation */\nconst WindowEncoder = (typeof window !== 'undefined')\n  ? {\n    base64_encode: window['btoa'] ? b => window['btoa'](b) : null,\n    base64_decode: window['atob'] ? a => window['atob'](a) : null,\n  }\n  : {};\n/* eslint-enable dot-notation */\n\nconst Base64 = {\n  encode: (WindowEncoder.base64_encode ||\n           BufferEncoder.base64_encode ||\n           LegacyEncoder.base64_encode),\n  decode: (WindowEncoder.base64_decode ||\n           BufferEncoder.base64_decode ||\n           LegacyEncoder.base64_decode),\n};\n\nmodule.exports.Base64 = Base64;\n","const Bits = {\n  get(val, shift, numBits) {\n    return (val >>> shift) & ((0x01 << numBits) - 1);\n  },\n\n  set(dataIn, val, shift, numBits) {\n    const curMask = (1 << numBits) - 1;\n    const shiftedVal = (val & curMask) << shift;\n    const data = dataIn & ~(curMask << shift);\n    return (data | shiftedVal);\n  },\n};\n\nmodule.exports.Bits = Bits;\n","const Long = require('long');\n\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n/**\n * @module\n * ===========================================================================\n * Convert\n *\n * This collection of functions performs all required string to number and number to string\n * conversions\n * ============================================================================\n * @private\n */\n\nconst TWO_ZEROES_STR = String.fromCharCode(0, 0);\nconst THREE_ZEROES_STR = String.fromCharCode(0, 0, 0);\nconst FOUR_ZEROES_STR = String.fromCharCode(0, 0, 0, 0);\n\nconst BYTEARRAY_CONVERT_CHUNK = 8192;\nconst UNSIGNED_LSHIFT_24 = (256 * 256 * 256);\n\nconst ARRAY_BUFFER_CONVERT_CHUNK = 32768;\n\nfunction stringToUint8Array(data) {\n  const dataLength = data.length;\n  const arrayBuf = new ArrayBuffer(dataLength);\n  const uint8Array = new Uint8Array(arrayBuf, 0, dataLength);\n  for (let i = 0; i < dataLength; i++) {\n    uint8Array[i] = data.charCodeAt(i);\n  }\n  return uint8Array;\n}\n\nfunction arrayBufferToString(ab) {\n  if (!ab) return '';\n  const len = ab.byteLength;\n  const u8 = new Uint8Array(ab);\n  if (len < ARRAY_BUFFER_CONVERT_CHUNK) {\n    return String.fromCharCode.apply(null, u8);\n  }\n\n  let k = 0;\n  let r = '';\n  while (k < len) {\n    // slice is clamped, inclusive of startIndex, exclusive of lastIndex\n    r += String.fromCharCode.apply(null, u8.subarray(k, k + ARRAY_BUFFER_CONVERT_CHUNK));\n    k += ARRAY_BUFFER_CONVERT_CHUNK;\n  }\n  return r;\n}\n\nfunction stringToArrayBuffer(str) {\n  return stringToUint8Array(str).buffer;\n}\n\nfunction int8ToStr(int8) {\n  return String.fromCharCode(int8 & 0xff);\n}\n\nfunction int16ToStr(int16) {\n  return (\n      String.fromCharCode((int16 >> 8) & 0xff) +\n      String.fromCharCode(int16 & 0xff)\n  );\n}\n\nfunction int24ToStr(int24) {\n  return (\n      String.fromCharCode((int24 >> 16) & 0xff) +\n      String.fromCharCode((int24 >> 8) & 0xff) +\n      String.fromCharCode(int24 & 0xff)\n  );\n}\n\nfunction int32ToStr(int32) {\n  // It is expected that there are a lot of small numbers\n  // being converted, so it is worth doing a few checks for\n  // efficiency (on firefox it is about 3 times quicker for small numbers\n  // to do the check - it is 2 times quicker for chrome)\n\n  if (int32 === 0) return FOUR_ZEROES_STR;\n  if (int32 > 0) {\n    if (int32 < 256) {\n      return THREE_ZEROES_STR + String.fromCharCode(int32);\n    }\n    if (int32 < 65536) {\n      return TWO_ZEROES_STR + String.fromCharCode(int32 >> 8) + String.fromCharCode(int32 & 0xff);\n    }\n  }\n\n  return (\n      String.fromCharCode((int32 >> 24) & 0xff) +\n      String.fromCharCode((int32 >> 16) & 0xff) +\n      String.fromCharCode((int32 >> 8) & 0xff) +\n      String.fromCharCode(int32 & 0xff)\n  );\n}\n\nfunction int64ToStr(int64) {\n  if (typeof int64 !== 'number') {\n    return int32ToStr(int64.high) + int32ToStr(int64.low);\n  }\n\n  // It is expected that there are a lot of small numbers\n  // being converted, so it is worth doing a few checks for\n  // efficiency (on firefox it is about 3 times quicker for small numbers\n  // to do the check - it is 2 times quicker for chrome)\n  if (int64 >= 0) {\n    if (int64 < 256) {\n      return FOUR_ZEROES_STR + THREE_ZEROES_STR + String.fromCharCode(int64);\n    }\n    if (int64 < 65536) {\n      return FOUR_ZEROES_STR + TWO_ZEROES_STR +\n        String.fromCharCode(int64 >> 8) + String.fromCharCode(int64 & 0xff);\n    }\n    if (int64 < 4294967296) {\n      return FOUR_ZEROES_STR + (String.fromCharCode((int64 >> 24) & 0xff) +\n        String.fromCharCode((int64 >> 16) & 0xff) +\n        String.fromCharCode((int64 >> 8) & 0xff) +\n        String.fromCharCode(int64 & 0xff));\n    }\n  }\n  return String.fromCharCode((int64 >> 56) & 0xFF) +\n        String.fromCharCode((int64 >> 48) & 0xFF) +\n        String.fromCharCode((int64 >> 40) & 0xFF) +\n        String.fromCharCode((int64 >> 32) & 0xFF) +\n        String.fromCharCode((int64 >> 24) & 0xff) +\n        String.fromCharCode((int64 >> 16) & 0xff) +\n        String.fromCharCode((int64 >> 8) & 0xff) +\n        String.fromCharCode(int64 & 0xff);\n}\n\nfunction byteArrayToStr(byteArray) {\n  const len = byteArray.length;\n  if (len < BYTEARRAY_CONVERT_CHUNK) {\n    return String.fromCharCode.apply(null, byteArray);\n  }\n\n  let k = 0;\n  let r = '';\n\n  while (k < len) {\n    // slice is clamped, inclusive of startIndex, exclusive of lastIndex\n    r += String.fromCharCode.apply(null, byteArray.slice(k, k + BYTEARRAY_CONVERT_CHUNK));\n    k += BYTEARRAY_CONVERT_CHUNK;\n  }\n\n  return r;\n}\n\nfunction strToByteArray(str) {\n  const result = [];\n  let i;\n  for (i = 0; i < str.length; i++) {\n    result[i] = str.charCodeAt(i);\n  }\n  return result;\n}\n\nfunction strToHexArray(str) {\n  function toHex(c) {\n    return c.charCodeAt(0).toString(16);\n  }\n  return Array.prototype.map.call(str.split(''), toHex);\n}\n\nfunction strToInt8(data) {\n  return data.charCodeAt(0) & 0xff;\n}\n\nfunction strToInt16(data) {\n  return (\n      (data.charCodeAt(0) << 8) +\n      (data.charCodeAt(1))\n  );\n}\n\nfunction strToInt24(data) {\n  return (\n      (data.charCodeAt(0) << 16) +\n      (data.charCodeAt(1) << 8) +\n      (data.charCodeAt(2))\n  );\n}\n\nfunction strToInt32(data) {\n    // SIGNED integer\n  return (\n      (data.charCodeAt(0) << 24) +\n      (data.charCodeAt(1) << 16) +\n      (data.charCodeAt(2) << 8) +\n      (data.charCodeAt(3))\n  );\n}\n\nfunction strToUInt32(data) {\n  // WARNING: you cannot use a << 24 to shift a byte into\n  // a 32-bit string, because all shifts in JS are signed\n  return (\n      (data.charCodeAt(0) * UNSIGNED_LSHIFT_24) +\n      (data.charCodeAt(1) << 16) +\n      (data.charCodeAt(2) << 8) +\n      (data.charCodeAt(3))\n  );\n}\n\nfunction strToUInt64(data) {\n  return Long.fromBits(strToUInt32(data.substr(4, 4)),\n                       strToUInt32(data.substr(0, 4)),\n                       true);\n}\n\nfunction ucs2ToUtf8(ucs2) {\n  return unescape(encodeURIComponent(ucs2));\n}\n\nfunction utf8ToUcs2(utf8) {\n  return decodeURIComponent(escape(utf8));\n}\n\nfunction anythingToBuffer(value) {\n  if (BufferImpl.isBuffer(value)) {\n    return value;\n  }\n  if (typeof value === 'string') {\n    return BufferImpl.from(value, 'latin1');\n  }\n  if (value instanceof ArrayBuffer) {\n    return BufferImpl.from(value);\n  }\n  //TypedArrays and DataView:\n  if (value.buffer instanceof ArrayBuffer &&\n    typeof value.byteLength === 'number' &&\n    typeof value.byteOffset === 'number') {\n    if (value.byteOffset === 0 && value.byteLength === value.buffer.byteLength) {\n      // \"full sice\", no actual offset: just use the raw buffer.\n      return BufferImpl.from(value.buffer);\n    }\n    return BufferImpl.from(value.buffer, value.byteOffset, value.byteLength);\n  }\n  throw new OperationError('Parameter value failed validation',\n    ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n    'Expecting Buffer/Uint8Array, also accepting string, ArrayBuffer, any TypedArray, or DataView.');\n}\n\nconst Convert = {\n  arrayBufferToString,\n  stringToArrayBuffer,\n  stringToUint8Array,\n\n  int8ToStr,\n  strToInt8,\n\n  int16ToStr,\n  strToInt16,\n\n  int24ToStr,\n  strToInt24,\n\n  int32ToStr,\n  strToInt32,\n  strToUInt32,\n\n  int64ToStr,\n  strToUInt64,\n\n  byteArrayToStr,\n  strToByteArray,\n\n  strToHexArray,\n\n  ucs2ToUtf8,\n  utf8ToUcs2,\n  anythingToBuffer,\n};\n\nmodule.exports.Convert = Convert;\n","function numToHex(n) {\n  if (typeof n !== 'number') {\n    return '';\n  }\n  const s = n.toString(16);\n  return (s.length < 2) ? `0${s}` : s;\n}\n\n\nfunction formatHexString(obj) {\n  if (typeof obj === 'number') {\n    return `0x${numToHex(obj)}`;\n  }\n\n  if (typeof obj === 'object' && Array.isArray(obj)) {\n    return obj.map(numToHex).join();\n  }\n\n  if (typeof obj === 'string') {\n    return Array.prototype.map.call(obj, (_, i) => numToHex(obj.charCodeAt(i))).join('');\n  }\n\n  return null;\n}\n\nconst Hex = {\n  formatHexString,\n};\n\nmodule.exports.Hex = Hex;\n","module.exports.Long = require('long');\n","/**\n * SolclientJS internal API for white-box integration testing\n * @private\n */\n\n/* _eslint-disable sort-requires/sort-requires */\n\nconst Convert = require('solclient-convert');\nconst Debug = require('solclient-debug');\nconst Destination = require('solclient-destination');\nconst Error = require('solclient-error');\nconst ESKit = require('solclient-eskit');\nconst Factory = require('solclient-factory');\nconst FSM = require('solclient-fsm');\nconst Log = require('solclient-log');\nconst Message = require('solclient-message');\nconst Publisher = require('solclient-message-publisher');\nconst SDT = require('solclient-sdt');\nconst Session = require('solclient-session');\nconst SMF = require('solclient-smf');\nconst SolcacheSession = require('solclient-solcache-session');\nconst TestEnv = require('solclient-env');\nconst Transport = require('solclient-transport');\nconst Util = require('solclient-util');\nconst Validate = require('solclient-validate');\n\nmodule.exports = {\n  Convert,\n  Debug,\n  Destination,\n  Error,\n  ESKit,\n  Factory,\n  FSM,\n  Log,\n  Message,\n  Publisher,\n  SDT,\n  Session,\n  SMF,\n  SolcacheSession,\n  TestEnv,\n  Transport,\n  Util,\n  Validate,\n};\n","/**\n * <h1> Overview </h1>\n *\n * This is the Solace Corporation Messaging API for JavaScript. Concepts defined in this API are\n * similar to those defined in other Solace Messaging APIs for Java, C, and .NET.\n *\n * <h1> Concepts </h1>\n *\n * Some general concepts:\n *\n * <li> All function calls are non-blocking; confirmation, if requested, is returned to the calling\n * client application in the form of callbacks. </li>\n *\n */\n\n/* _eslint-disable sort-requires/sort-requires */\n\n// -------------------------- Solclient Factory ------------------------------\n// Load me before the rest of the API as a plug-in point for modules\nconst FactoryLib = require('solclient-factory');\n// ---------------------------------------------------------------------------\n\nconst {\n  SolclientFactory,\n  SolclientFactoryProfiles,\n  SolclientFactoryProperties,\n} = FactoryLib;\n\nconst {\n  Long,\n} = require('solclient-convert');\nconst {\n  Destination,\n  DestinationType,\n  Topic,\n} = require('solclient-destination');\nconst {\n  ErrorSubcode,\n  NotImplementedError,\n  OperationError,\n  RequestError,\n  RequestEventCode,\n} = require('solclient-error');\nconst {\n  makeIterator,\n} = require('solclient-eskit');\nconst {\n  ConsoleLogImpl,\n  LogImpl,\n  LogLevel,\n} = require('solclient-log');\nconst {\n  Message,\n  MessageCacheStatus,\n  MessageDeliveryModeType,\n  MessageDumpFlag,\n  MessageType,\n  MessageUserCosType,\n  ReplicationGroupMessageId,\n} = require('solclient-message');\nconst {\n  MessageConsumer,\n  MessageConsumerAcknowledgeMode,\n  MessageConsumerEventName,\n  MessageConsumerProperties,\n  QueueBrowser,\n  QueueBrowserEventName,\n  QueueBrowserProperties,\n} = require('solclient-message-consumer');\nconst {\n  ReplayStartLocation,\n  ReplayStartLocationBeginning,\n} = require('solclient-replaystart');\nconst {\n  MessagePublisherAcknowledgeMode,\n  MessagePublisherProperties,\n} = require('solclient-message-publisher');\nconst {\n  AbstractQueueDescriptor,\n  QueueAccessType,\n  QueueDescriptor,\n  QueueDiscardBehavior,\n  QueuePermissions,\n  QueueProperties,\n  QueueType,\n} = require('solclient-queue');\nconst {\n  SDTField,\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n} = require('solclient-sdt');\nconst {\n  AuthenticationScheme,\n  CapabilityType,\n  MessageRxCBInfo,\n  MutableSessionProperty,\n  Session,\n  SessionEvent,\n  SessionEventCBInfo,\n  SessionEventCode,\n  SessionProperties,\n  SessionState,\n  SslDowngrade,\n} = require('solclient-session');\nconst {\n  CacheCBInfo,\n  CacheLiveDataAction,\n  CacheRequestResult,\n  CacheReturnCode,\n  CacheReturnSubcode,\n  CacheSession,\n  CacheSessionProperties,\n} = require('solclient-solcache-session');\nconst {\n  StatType,\n} = require('solclient-stats');\nconst {\n  TransportError,\n  TransportProtocol,\n} = require('solclient-transport');\nconst {\n  Version,\n} = require('solclient-util');\n\n// --------------------------- Internal API -- do not use --------------------\n// Load me last. I disappear in production mode\nconst _internal = require('./api-internal.js');\n// ---------------------------------------------------------------------------\n\n\n/**\n * @namespace\n * @public\n */\nconst solace = {\n  AbstractQueueDescriptor,\n  AuthenticationScheme,\n  CacheCBInfo,\n  CacheLiveDataAction,\n  CacheRequestResult,\n  CacheReturnCode,\n  CacheReturnSubcode,\n  CacheSession,\n  CacheSessionProperties,\n  CapabilityType,\n  ConsoleLogImpl,\n  Destination,\n  DestinationType,\n  ErrorSubcode,\n  LogImpl,\n  LogLevel,\n  Long,\n  Message,\n  MessageCacheStatus,\n  MessageConsumer,\n  MessageConsumerAcknowledgeMode,\n  MessageConsumerEventName,\n  MessageConsumerProperties,\n  MessageDeliveryModeType,\n  MessageDumpFlag,\n  MessagePublisherAcknowledgeMode,\n  MessagePublisherProperties,\n  MessageRxCBInfo,\n  MessageType,\n  MessageUserCosType,\n  MutableSessionProperty,\n  NotImplementedError,\n  OperationError,\n  QueueAccessType,\n  QueueBrowser,\n  QueueBrowserEventName,\n  QueueBrowserProperties,\n  QueueDescriptor,\n  QueueDiscardBehavior,\n  QueuePermissions,\n  QueueProperties,\n  QueueType,\n  ReplayStartLocation,\n  /*\n   * This should not be here ReplayStartLocationBeginning should not be a publicly exposed type.\n   * This type must remain for backwards compatibility however it was never indented for use\n   * by applications.\n   * */\n  ReplayStartLocationBeginning,\n  ReplicationGroupMessageId,\n  RequestError,\n  RequestEventCode,\n  SDTField,\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n  Session,\n  SessionEvent,\n  SessionEventCBInfo,\n  SessionEventCode,\n  SessionProperties,\n  SessionState,\n  SolclientFactory,\n  SolclientFactoryProfiles,\n  SolclientFactoryProperties,\n  SslDowngrade,\n  StatType,\n  Topic,\n  TransportError,\n  TransportProtocol,\n  Version,\n\n  makeIterator,\n\n  _internal, //\n};\n\nObject.assign(module.exports, solace);\n","const { Debug } = require('./lib/debug');\n\nmodule.exports.Debug = Debug;\n","/* eslint-disable global-require */\n// Do late binding for these debug utilities to break cyclic dependencies.\n\nconst PRINTABLE_LUT = (() => {\n  const tmp = [];\n  for (let c = 0; c < 256; ++c) {\n    tmp[c] = (c < 33 || c > 126) ? '.' : String.fromCharCode(c);\n  }\n  return tmp;\n})();\n\nconst SPACER = '   ';\nconst UNPRINTABLE = '.';\n\n\nfunction formatDumpBytes(data, showDecode, leftPadding) {\n  const { StringBuffer, StringUtils } = require('solclient-util');\n  const { isEmpty, padLeft, padRight } = StringUtils;\n\n  if (isEmpty(data)) {\n    return null;\n  }\n\n  const output = new StringBuffer();\n  const ascii = new StringBuffer();\n  const line = new StringBuffer();\n  let lineBytes = 0;\n  const asciiOffset = 54;\n\n  for (let i = 0, dataLen = data.length; i < dataLen; ++i) {\n    const ccode = data.charCodeAt(i);\n    //const ccode = dataBuf.readInt8(i);\n    line.append(padLeft(ccode.toString(16), 2, '0'), ' ');\n    ascii.append(PRINTABLE_LUT[ccode] || UNPRINTABLE);\n    lineBytes++;\n\n    if (lineBytes === 8) {\n      line.append(SPACER);\n    }\n\n    if (lineBytes === 16 || i === data.length - 1) {\n      if (leftPadding > 0) {\n        output.append(padRight('', leftPadding, ' '));\n      }\n\n      output.append(padRight(line.toString(), asciiOffset, ' '));\n\n      if (showDecode) {\n        output.append(ascii);\n      }\n\n      output.append('\\n');\n      line.clear();\n      ascii.clear();\n      lineBytes = 0;\n    }\n  }\n\n  return output.toString();\n}\n\nfunction parseSMFStream(data) {\n  const { Codec: { Decode: { decodeCompoundMessage } } } = require('solclient-smf');\n  const { LOG_WARN, LOG_ERROR } = require('solclient-log');\n\n  if (data === null) {\n    LOG_ERROR('data null in debugParseSmfStream');\n    return;\n  }\n  let pos = 0;\n  LOG_WARN(`parseSMFStream(): Starting parse, length ${data.length}`);\n  while (pos < data.length) {\n    const incomingMsg = decodeCompoundMessage(data, pos);\n    const smf = incomingMsg ? incomingMsg.smfHeader : null;\n    if (!(incomingMsg && smf)) {\n      // couldn't decode! Lost SMF framing.\n      LOG_WARN(\"parseSMFStream(): couldn't decode message.\");\n      LOG_WARN(`Position: ${pos} length: ${data.length}`);\n      return;\n    }\n\n    LOG_WARN(`>> Pos(${pos}) Protocol ${smf.smf_protocol}, Length: ${smf.messageLength}`);\n    pos += smf.messageLength;\n  }\n}\n\nconst Debug = {\n  formatDumpBytes,\n  parseSMFStream,\n};\n\nmodule.exports.Debug = Debug;\n","const { Destination } = require('./lib/destination');\nconst { DestinationFromNetwork } = require('./lib/destination-from-network');\nconst { DestinationType } = require('./lib/destination-type');\nconst { DestinationUtil } = require('./lib/destination-util');\nconst { Parameter } = require('solclient-validate');\nconst { Queue } = require('./lib/queue');\nconst { SolclientFactory } = require('solclient-factory');\nconst { Topic } = require('./lib/topic');\n\n\n/**\n * Creates a topic {@link solace.Destination} instance. When the returned Destination is set as\n * the destination of a message via {@link solace.Message#setDestination}, the message will be\n * delivered to direct subscribers or topic endpoints subscribed to the given topic.\n *\n * @param {String} topicName The topic string for the new topic.\n * @returns {solace.Destination} The newly created topic destination.\n * @method\n * @name solace.SolclientFactory.createTopicDestination\n */\nSolclientFactory.createTopicDestination = SolclientFactory.createFactory((topicName) => {\n  Parameter.isString('topicName', topicName);\n  return Topic.createFromName(topicName);\n});\n/* @deprecated @*/\nSolclientFactory.createTopic = SolclientFactory.createFactory(topicName => new Topic(topicName));\n\n/**\n * Creates a durable queue {@link solace.Destination} instance. When the returned Destination is\n * set as the destination of a message via {@link solace.Message#setDestination}, the message will\n * be delivered to the Guaranteed Message queue on the Solace Message Router of the same name.\n *\n * @since 10.0.0\n * @param {String} queueName The queueName of the queue\n * @returns {solace.Destination} The newly created queue destination.\n * @method\n * @name solace.SolclientFactory.createDurableQueueDestination\n */\nSolclientFactory.createDurableQueueDestination = SolclientFactory.createFactory((queueName) => {\n  Parameter.isString('queueName', queueName);\n  return Queue.createFromLocalName(queueName);\n});\n\nmodule.exports.Destination = Destination;\nmodule.exports.DestinationFromNetwork = DestinationFromNetwork;\nmodule.exports.DestinationType = DestinationType;\nmodule.exports.DestinationUtil = DestinationUtil;\nmodule.exports.Queue = Queue;\nmodule.exports.Topic = Topic;\n","const { DestinationType } = require('./destination-type');\nconst { DestinationUtil } = require('./destination-util');\nconst { Queue } = require('./queue');\nconst { Topic } = require('./topic');\n\nconst QUEUE_PREFIX = '#P2P/QUE/';\nconst QUEUE_PREFIX_LEN = QUEUE_PREFIX.length;\nconst TEMPORARY_QUEUE_PREFIX = '#P2P/QTMP/';\n\nfunction createDestinationFromName(networkTopicName, networkTopicBytes = undefined) {\n  if (networkTopicName === null || networkTopicName.length === 0) {\n    return null;\n  }\n\n  const spec = {\n    name:  networkTopicName,\n    bytes: networkTopicBytes || DestinationUtil.encodeBytes(networkTopicName),\n  };\n  if (networkTopicName[0] === '#') {\n    if (networkTopicName.startsWith(QUEUE_PREFIX)) {\n      const offset = QUEUE_PREFIX_LEN;\n      spec.name = networkTopicName.substr(offset);\n      spec.type = DestinationType.QUEUE;\n      spec.offset = offset;\n      return new Queue(spec);\n    } else if (networkTopicName.startsWith(TEMPORARY_QUEUE_PREFIX)) {\n      spec.name = networkTopicName;\n      spec.type = DestinationType.TEMPORARY_QUEUE;\n      spec.offset = 0;\n      return new Queue(spec);\n    }\n  }\n  return new Topic(spec);\n}\n\nfunction createDestinationFromBytes(networkTopicBytes) {\n  if (networkTopicBytes === null || networkTopicBytes.length === 0) {\n    return null;\n  }\n\n  const networkTopicName = DestinationUtil.decodeBytes(networkTopicBytes);\n  return createDestinationFromName(networkTopicName, networkTopicBytes);\n}\n\nconst DestinationFromNetwork = {\n  createDestinationFromBytes,\n  createDestinationFromName,\n};\n\nmodule.exports.DestinationFromNetwork = DestinationFromNetwork;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumerates destination types for destination objects.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst DestinationType = {\n  /**\n   * A Topic destination.\n   */\n  TOPIC:           'topic',\n  /**\n   * A queue destination.\n   */\n  QUEUE:           'queue',\n  /**\n   * A temporary queue destination.\n   */\n  TEMPORARY_QUEUE: 'temporary_queue',\n};\n\nmodule.exports.DestinationType = Enum.new(DestinationType);\n\n/* eslint-disable */\n// Manually demangle these names; bug 70131\nmodule.exports.DestinationType._setCanonical({\n  'TOPIC':           DestinationType.TOPIC,\n  'QUEUE':           DestinationType.QUEUE,\n  'TEMPORARY_QUEUE': DestinationType.TEMPORARY_QUEUE\n});\n/* eslint-enable */\n","const SolclientFactoryLib = require('solclient-factory');\nconst { Convert } = require('solclient-convert');\nconst { DestinationType } = require('./destination-type');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SubscriptionInfo } = require('./subscription-info');\nconst { UUID, StringUtils } = require('solclient-util');\n\nconst { ucs2ToUtf8, utf8ToUcs2 } = Convert;\nconst { ProfileBinding } = SolclientFactoryLib;\n\nconst { toSafeChars, stripNullTerminate } = StringUtils;\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst DESTINATION_PREFIX_FROM_TYPE = {\n  [DestinationType.QUEUE]:           '#P2P/QUE/',\n  [DestinationType.TEMPORARY_QUEUE]: '#P2P/QTMP/',\n};\n\nfunction createTemporaryName(type, vrid, name) {\n  const id = name || UUID.generateUUID();\n  switch (type) {\n    case DestinationType.TOPIC:\n      return `#P2P/TTMP/${vrid}/${id}`;\n    case DestinationType.TEMPORARY_QUEUE:\n      return `#P2P/QTMP/${vrid}/${id}`;\n    default:\n      LOG_ERROR('Unknown/invalid destination type', DestinationType.describe(type));\n  }\n  return undefined;\n}\n\nfunction createPrefix(type) {\n  return DESTINATION_PREFIX_FROM_TYPE[type] || '';\n}\n\nfunction createOperationError(type, errorStr) {\n  return new OperationError(`Invalid ${type}: ${errorStr}`, ErrorSubcode.INVALID_TOPIC_SYNTAX);\n}\n\n// This function validates topics in all code paths -- legacy code paths that relied on validating\n// topics as they were used, and newer code paths that validate Destinations on construction.  We\n// must not add validation here that could break legacy apps that used the deprecated 'new Topic'\n// interface that doesn't perform validation, and subsequently rely on validate-on-use.\n//\n// More strict checks done during Destination construction should be placed in validateAndEncode.\n// @return { error, isWildcarded }.  isWildcarded will not be defined if erorr is defined.\nfunction legacyValidate(type, bytes, name,\n                        exceptionCreator = createOperationError.bind(null, type)) {\n  let error;\n\n  /*\n    * TRB topics can contain any utf-8 character and must be <= 250 bytes\n    * in length.\n    * '*', if present in a level, must be the last character in that level.\n    * May not have empty levels.\n    */\n\n  // Check minimum length using name, since the bytes may include a destination type prefix.\n  // e.g. #P2P/QUE/ should fail on length, not empty level.\n  const nameLength = name.length;\n  if (nameLength < 1) {\n    error = exceptionCreator('Too short (must be >= 1 character).');\n    return { error };\n  }\n\n  // Check maximum length using encoded bytes, since UTF-8 is a variable length encoding.\n  const bytesLength = bytes.length;\n  if (bytesLength > 251) { // null terminator doesn't count\n    error = exceptionCreator(`Too long (encoding must be <= 250 bytes); name is ${\n                             bytesLength - 1} bytes: '${name}'`);\n    return { error };\n  }\n\n  let isWildcarded = false;\n  if (name.charAt(nameLength - 1) === '>') {\n    isWildcarded = true;\n  }\n\n  for (let i = 0; i < nameLength; ++i) {\n    switch (name.charAt(i)) {\n      case '/':\n        if (i === 0 || i === (nameLength - 1) || name.charAt(i - 1) === '/') {\n          error = exceptionCreator(`Empty level(s) in '${name}'@${i}.`);\n          return { error };\n        }\n        break;\n\n      case '*':\n        if ((i < (nameLength - 1)) && (name.charAt(i + 1) !== '/')) {\n          // must not have something other than '/' to the right\n          error = exceptionCreator(`Illegal wildcard(s) in '${name}'@${i}.`);\n          return { error };\n        }\n\n        isWildcarded = true;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  return { isWildcarded };\n}\n\nfunction encodeBytes(bytes) {\n  return ProfileBinding.value.topicUtf8Encode\n    ? `${ucs2ToUtf8(bytes)}\\u0000`\n    : `${bytes}\\u0000`;\n}\n\nfunction decodeBytes(bytes) {\n  return stripNullTerminate(ProfileBinding.value.topicUtf8Encode\n    ? utf8ToUcs2(bytes)\n    : bytes);\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @returns {Object} {bytes, offset, networkName} The result of the encoding.\n *\n * @private\n */\nfunction encode(type, name) {\n  const prefix = createPrefix(type);\n  const offset = prefix.length;\n  const networkName = prefix + name;\n  const bytes = encodeBytes(networkName);\n  return { bytes, offset, networkName };\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {Function} [exceptionCreator=createOperationError] A function to create an exception if an\n *   error is encountered.\n * @returns {Object} {bytes, error, offset, isWildcarded} The result of the encoding and any\n *      validation error\n *\n * @private\n */\nfunction validateAndEncode(type, name, exceptionCreator = createOperationError.bind(null, type)) {\n  const { bytes, offset } = encode(type, name);\n  const { error: constError, isWildcarded } = legacyValidate(type, bytes, name, exceptionCreator);\n  let error = constError;\n  let subscriptionInfo = {};\n  subscriptionInfo.isWildcarded = isWildcarded;\n\n  // If there was no 'legacy' error, perform an additional check to see if the provided name starts\n  // with a reserved prefix.  It shouldn't.  Prefixes should always be added by us by encode().\n  if (!error) {\n    Object.keys(DESTINATION_PREFIX_FROM_TYPE).some((prefixType) => {\n      const prefix = DESTINATION_PREFIX_FROM_TYPE[prefixType];\n      if (!name.startsWith(prefix)) {\n        return false; // keep processing more array elements.\n      }\n\n      error = exceptionCreator(`Reserved prefix '${prefix}' found at start of '${name}'`);\n      return true;\n    });\n  }\n\n  if (!error) {\n    // parse subscription information from destination name\n    const { error: errorConst, subInfo: subInfoConst } =\n      SubscriptionInfo.parseFromName(name, type);\n    error = errorConst;\n    subscriptionInfo = subInfoConst;\n  }\n\n  return { bytes, offset, error, isWildcarded, subscriptionInfo };\n}\n\nconst DestinationUtil = {\n  createPrefix,\n  createTemporaryName,\n  decodeBytes,\n  encode,\n  encodeBytes,\n  legacyValidate,\n  toSafeChars,\n  validateAndEncode,\n};\n\nmodule.exports.DestinationUtil = DestinationUtil;\n","const { DestinationType } = require('./destination-type');\nconst { DestinationUtil } = require('./destination-util');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instances from\n * one of the following:</b>\n * * {@link solace.SolclientFactory.createTopicDestination}\n * * {@link solace.SolclientFactory.createDurableQueueDestination}\n * * {@link solace.MessageConsumer#getDestination}\n * * {@link solace.SDTField#getValue} when {@link solace.SDTField#getType} returns\n *   {@link solace.SDTFieldType.DESTINATION}.\n *\n * Represents a message destination.\n *\n * Publishers can send messages to topics or queues, to which subscribers can subscribe or\n * bind. A Destination specifies the target of such an operation.\n * @hideconstructor\n * @memberof solace\n */\nclass Destination {\n\n  /*\n   * @constructor\n   * @param {String|solace.Destination|Object} spec The name of the destination, or, the\n   *  destination to copy. If this is a {@link solace.Destination} then all other parameters are\n   *  ignored.\n   * @param {solace.DestinationType} [type=solace.DestinationType.Topic] The type of destination\n   *  to create\n   * @deprecated since 10.0 Applications should not call this constructor.\n   *  Use the factory methods on {@link solace.SolclientFactory}.\n   **/\n  constructor(spec, type = DestinationType.TOPIC) {\n    if (typeof spec === 'object') {\n      this._name = spec.name;\n      this._type = spec.type;\n      this._bytes = spec.bytes;\n      this._offset = spec.offset;\n      if (spec.isValidated) {\n        this._isValidated = true;\n        this._isWildcarded = spec.isWildcarded;\n        this._subscriptionInfo = spec.subscriptionInfo || {};\n      } else {\n        this._isValidated = false;\n        this._subscriptionInfo = {};\n      }\n    } else {\n      this._name = spec;\n      this._type = type;\n\n      // Don't validate encoding for deprecated construction path.\n      // This path would have more restrictions now, and it allows\n      // sdkperf a path for arbitrary topic construction.\n      const result = DestinationUtil.encode(type, spec);\n      this._bytes = result.bytes;\n      this._offset = result.offset;\n      this._isValidated = false;\n      this._subscriptionInfo = {};\n    }\n  }\n\n  /**\n   * @returns {String} The destination name specified at creation time.\n   */\n  getName() {\n    return this._name;\n  }\n\n  /**\n   * @type {String}\n   * @readonly\n   */\n  get name() {\n    return this.getName();\n  }\n\n  /**\n   * @returns {solace.DestinationType} The destination type\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * @type {solace.DestinationType}\n   * @readonly\n   */\n  get type() {\n    return this.getType();\n  }\n\n  /**\n   * @returns {String} Returns the null-terminated UTF-8 encoded destination bytes.\n   *\n   * @private\n   */\n  getBytes() {\n    return this._bytes;\n  }\n  get bytes() {\n    return this.getBytes();\n  }\n\n  getOffset() {\n    return this._offset;\n  }\n  get offset() {\n    return this.getOffset();\n  }\n\n  /**\n   * This provides the legacy validation that was done post-creation and is used in some code paths\n   * on use.  It is preferred to use non-deprecated ways of creating destinations, which do\n   * validation on create instead.\n   * @throws OperationError if the destination is not valid.\n   * @private\n   */\n  validate() {\n    if (this._isValidated) {\n      if (this._error) throw this._error;\n      return;\n    }\n\n    const { error, isWildcarded } =\n      DestinationUtil.legacyValidate(this.type, this.bytes, this.name);\n    this._isValidated = true;\n    if (error) {\n      this._error = error;\n      throw error;\n    }\n    this._isWildcarded = isWildcarded;\n  }\n\n  /**\n   * This is really only useful for topics.  If a queue name contains a wildcarded construct, it is\n   * up to the router what to do -- it would either reject it or treat the wildcard as literal.  But\n   * it is included here for all destination types since we have the info.\n   * @returns {Boolean} True if the underlying name represents a wildcarded topic; false otherwise.\n   * @throws {OperationError} If the destination is not valid.\n   * @private\n   */\n  isWildcarded() {\n    this.validate();\n    return this._isWildcarded;\n  }\n\n  /**\n   * @returns {Object} subscriptionInfo object or empty object\n   * @private\n   */\n  getSubscriptionInfo() {\n    return this._subscriptionInfo || {};\n  }\n\n  /**\n   * @returns {String} A generic description of the Destination.\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  /**\n   * @param {*} other The other object for comparison\n   * @returns {Boolean} True if the passed destination is the same\n   * @private\n   */\n  equals(other) {\n    if (!(other instanceof Destination)) {\n      return false;\n    }\n    return (this.toString().valueOf() === other.toString().valueOf());\n  }\n}\n\nmodule.exports.Destination = Destination;\n","const DestinationUtilLib = require('./destination-util');\nconst { assert } = require('solclient-eskit');\nconst { Destination } = require('./destination');\nconst { DestinationType } = require('./destination-type');\n\n/**\n * @classdesc\n * Represents a Queue, which is a type of {@link solace.Destination}.\n *\n * Instances should be acquired through\n * {@link solace.SolclientFactory.createDurableQueueDestination} or by calling\n * {@link solace.MessageConsumer#getDestination} on a consumer bound to a temporary queue.\n *\n * @extends solace.Destination\n * @memberof solace\n * @private\n */\nclass Queue extends Destination {\n\n  /**\n   * @param {Object} spec The spec for this instance\n   * @private\n   */\n  constructor(spec) {\n    assert(spec.name, 'Queue name not supplied');\n    assert(spec.type === DestinationType.QUEUE\n           || spec.type === DestinationType.TEMPORARY_QUEUE, 'Queue spec.type is invalid');\n    assert(spec.bytes, 'Queue spec missing bytes');\n    assert(spec.offset !== undefined, 'Queue spec missing offset');\n    super(spec);\n  }\n\n  getOffset() {\n    return this._offset;\n  }\n  get offset() {\n    return this.getOffset();\n  }\n\n  [util_inspect_custom]() {\n    return `[Queue ${this.getName()}]`;\n  }\n\n  /**\n   * @static\n   * @param {String} queueName The name of the queue (no prefix)\n   * @returns {Queue} a Queue\n   * @private\n   */\n  static createFromLocalName(queueName) {\n    const encoding = DestinationUtilLib.DestinationUtil.validateAndEncode(\n      DestinationType.QUEUE, queueName);\n    if (encoding.error) {\n      throw encoding.error;\n    }\n    return new Queue({\n      name:             queueName,\n      type:             DestinationType.QUEUE,\n      isValidated:      true,\n      bytes:            encoding.bytes,\n      offset:           encoding.offset,\n      isWildcarded:     encoding.isWildcarded,\n      /* probably don't need this until queues get subscription attributes */\n      subscriptionInfo: encoding.subscriptionInfo,\n    });\n  }\n\n}\n\nmodule.exports.Queue = Queue;\n","const { DestinationType } = require('./destination-type');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n/**\n * determines if subscription has the #noexport/ prefix\n *\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {Number} offset The index offset into the name to parse\n * @param {solace.SubscriptionInfo} result The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, index, result} returns the parsing index and result\n *   where the result is a {solace.SubscriptionInfo} that contains information about the\n *   subscription like {Boolean} isNoExport\n * @private\n */\nfunction subscriptionParseNoExport(type, name, bytes, offset, result) {\n  const NOEXPORT_PREFIX = '#noexport/';\n  const NOEXPORT_PREFIX_LEN = NOEXPORT_PREFIX.length;\n  let index = offset;\n  let error;\n  if (name.length - index > NOEXPORT_PREFIX_LEN && !result.isNoExport) {\n    if (name.startsWith(NOEXPORT_PREFIX, index)) {\n      index += NOEXPORT_PREFIX_LEN;\n      result.isNoExport = true;\n    } else {\n      result.isNoExport = false;\n    }\n  } else {\n    result.isNoExport = false;\n  }\n  return { error, index, result };\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {Number} offset The index offset into the name to parse\n * @param {solace.SubscriptionInfo} result The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, index, result} returns the parsing index and result\n *   where the result is a {solace.SubscriptionInfo} that contains information about the\n *   subscription like {Boolean} isShared or {String} shareGroup or {Number}\n *   dispatchTopicIndex\n * @private\n */\nfunction subscriptionParseShare(type, name, bytes, offset,\n                                result, exceptionCreator) {\n  const SHARE_PREFIX = '#share/';\n  const SHARE_PREFIX_LEN = SHARE_PREFIX.length;\n  const LEVEL_DELIMETER = '/';\n  const LEVEL_DELIMETER_LEN = LEVEL_DELIMETER.length;\n  let index = offset;\n  let error;\n  let groupIndex = -1;\n  let shareGroup;\n  if (name.length - index > SHARE_PREFIX_LEN && !result.isShare) {\n    /* parse '#share/' prefix */\n    /*\n     * name starts with '#share/' prefix\n     * and has enough room for at least one character for share group\n     */\n    if (name.startsWith(SHARE_PREFIX, offset)\n        && (name.length - (index + SHARE_PREFIX_LEN)) > LEVEL_DELIMETER_LEN + 1) {\n      index += SHARE_PREFIX_LEN;\n      /* parse share group to next '/' */\n      groupIndex = index;\n      index = name.indexOf(LEVEL_DELIMETER, groupIndex);\n      if (index > 0) {\n        shareGroup = name.substring(groupIndex, index);\n        index += LEVEL_DELIMETER_LEN;\n        result.isShare = true;\n        result.shareGroup = shareGroup;\n        result.dispatchTopicIndex = index;\n      } else {\n        // error\n        error = exceptionCreator(`Illegal share Group in '${name}'@${groupIndex}.`);\n        result.isShare = true;\n      }\n    } else {\n      // not share subscription\n      result.isShare = false;\n    }\n  } else {\n    // not share subscription\n    result.isShare = false;\n  }\n  return { error, index, result };\n}\n\n/**\n * @param {Array.Function} layers The parsing functions executed from 0 to layers.length\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {solace.SubscriptionInfo} subInfo The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, result} returns the parsed information in the SubscriptionInfo\n * object and error, when error is set result's values may be partially set\n * @private\n */\nfunction subscriptionStringParse(layers, type, name, bytes, subInfo, exceptionCreator) {\n  const parseLayers = layers.length || 0;\n  let offset = 0;\n  let error;\n  let result = subInfo || {};\n  for (let i = 0; i < parseLayers; ++i) {\n    const { error: constError, index: constOffset, result: constResult } =\n      layers[i](type, name, bytes, offset, result, exceptionCreator);\n    offset = constOffset;\n    result = constResult;\n    error = constError;\n    if (error) break;\n  }\n  return { error, result };\n}\n\n// Subscription parser map by DestinationType\n// Currently only Topics have subscription information to parse, but more can be added as needed\n// The _layers attribute for the parser defines the order of parsing destination names\n// The _layers are made up of functions that can execute with the signature:\n//   { error, index, result } function funcName(type, name, bytes, result[, exceptionCreator])\n// To add more subscription information parsing add more layers to _layers of the DestinationType\nconst SUBSCRIPTION_LAYER_PARSER_FROM_TYPE = {\n  [DestinationType.TOPIC]: {\n    _layers: [subscriptionParseNoExport, subscriptionParseShare],\n    parse:   function subParse(type, name, bytes, subInfo, exceptionCreator) {\n      const { error, result } =\n        subscriptionStringParse(this._layers, type, name, bytes, subInfo, exceptionCreator);\n      return { error, result };\n    },\n  },\n};\n\nfunction createOperationError(type, errorStr) {\n  return new OperationError(`Invalid ${type}: ${errorStr}`, ErrorSubcode.INVALID_TOPIC_SYNTAX);\n}\n\n/**\n * @classdesc\n * <b> This class is not exposed. This object contains useful subscription information about\n * a {solace.Destination#name}</b>\n * @hideconstructor\n * @memberof solace\n * @private\n */\nclass SubscriptionInfo {\n  /**\n   * @constructor\n   * @param {String} name The name of the destination to be used as a subscription\n   * @private\n   */\n  constructor(name) {\n    this._name = name;\n    // set default values\n    this._isShare = false;\n    this._isNoExport = false;\n    this._dispatchTopicIndex = -1;\n    this._shareGroup = null;\n  }\n\n  /**\n   * @returns {String} The destination name specified at creation time\n   */\n  getName() {\n    return this._name;\n  }\n\n  /**\n   * @returns {String} subscription name\n   * @readonly\n   */\n  get name() {\n    return this.getName();\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#isShare\n   * @type {Boolean}\n   * @description Boolean Flag to indicate the {solace.SubscriptionInfo#name} is a shared\n   * subscription\n   * @default false\n   */\n  get isShare() {\n    return this._isShare;\n  }\n  set isShare(value) {\n    this._isShare = value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#isNoExport\n   * @type {Boolean}\n   * @description Boolean Flag to indicate the {solace.SubscriptionInfo#name} is a no export\n   * subscription\n   * @default false\n   */\n  get isNoExport() {\n    return this._isNoExport;\n  }\n  set isNoExport(value) {\n    this._isNoExport = value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#dispatchTopicIndex\n   * @type {Number}\n   * @description String index of the topic filter after subscription prefixes\n   * @default 0, the whole name as the topic filter\n   */\n  get dispatchTopicIndex() {\n    return this._dispatchTopicIndex < 0 ? 0 : this._dispatchTopicIndex;\n  }\n  set dispatchTopicIndex(value) {\n    this._dispatchTopicIndex = value < 0 ? -1 /* uninitialized*/ : value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#shareGroup\n   * @type {?String}\n   * @description The Share group of a shared subscription, should be null if\n   * {solace.SubscriptionInfo#isShare} is false\n   */\n  get shareGroup() {\n    return this.isShare ? this._shareGroup : null;\n  }\n  set shareGroup(value) {\n    if (this.isShare) {\n      this._shareGroup = value;\n    }\n  }\n\n  /**\n   * @returns {String} A generic description of the SubscriptionInfo\n   */\n  toString() {\n    return util_inspect(this);\n  }\n  /**\n   * @static\n   * @type {Object}\n   * @param {String} name The name of the destination\n   * @param {DestinationType} type The Destination type\n   * @returns {Object} the subscription infomation from the destination name\n   * @private\n   */\n  static parseFromName(name, type = DestinationType.TOPIC) {\n    let subInfo = new SubscriptionInfo(name);\n    let error = null;\n    const parser = SUBSCRIPTION_LAYER_PARSER_FROM_TYPE[type];\n    if (parser) {\n      const { error: errorConst, result: subInfoConst } =\n      parser.parse(type, name, null, subInfo, createOperationError.bind(null, type));\n      subInfo = subInfoConst;\n      error = errorConst;\n    }\n    return { error, subInfo };\n  }\n}\nmodule.exports.SubscriptionInfo = SubscriptionInfo;\n","const DestinationUtilLib = require('./destination-util');\nconst { Destination } = require('./destination');\nconst { DestinationType } = require('./destination-type');\n\n/**\n * @classdesc\n * Represents a Topic, which is a type of {@link solace.Destination}.\n *\n * @extends solace.Destination\n * @memberof solace\n * @deprecated since 10.0 Applications should not directly refer to this type.\n *  {@link solace.Destination} provides the full interface available to topic, and it can be\n *  determined whether the destination represents a topic if {@link solace.Destination#getType}\n *  returns {@link solace.DestinationType.TOPIC}.\n */\nclass Topic extends Destination {\n  /**\n   * @param {Object} spec The topic spec\n   * @private\n   */\n  constructor(spec) {\n    if (typeof spec === 'object') {\n      super({\n        type:             DestinationType.TOPIC,\n        name:             spec.name,\n        bytes:            spec.bytes,\n        offset:           spec.offset,\n        isValidated:      spec.isValidated,\n        isWildcarded:     spec.isWildcarded,\n        subscriptionInfo: spec.subscriptionInfo,\n      });\n    } else {\n      // Deprecated path -- super will do topic encode\n      super(spec, DestinationType.TOPIC);\n    }\n  }\n\n  [util_inspect_custom]() {\n    return `[Topic ${this.getName()}]`;\n  }\n\n  /**\n   * @static\n   * @param {String} topicName The name for the topic\n   * @returns {Topic} the Topic\n   * @private\n   */\n  static createFromName(topicName) {\n    const encoding = DestinationUtilLib.DestinationUtil.validateAndEncode(\n      DestinationType.TOPIC, topicName);\n    if (encoding.error) {\n      throw encoding.error;\n    }\n    return new Topic({\n      name:             topicName,\n      isValidated:      true,\n      bytes:            encoding.bytes,\n      offset:           encoding.offset,\n      isWildcarded:     encoding.isWildcarded,\n      subscriptionInfo: encoding.subscriptionInfo,\n    });\n  }\n}\n\nmodule.exports.Topic = Topic;\n","function apiEnv(envObject) {\n  if (typeof BUILD_ENV !== 'undefined' && !BUILD_ENV.TEST) {\n    throw new Error('Test environment will not override build environment');\n  }\n  global.BUILD_ENV = Object.assign({}, envObject, { TEST: true });\n  return global.BUILD_ENV;\n}\n\nif (typeof BUILD_ENV !== 'undefined' && BUILD_ENV.TEST === false) {\n  apiEnv.target = () => apiEnv();\n} else {\n  const configs = {\n    node: {\n      TARGET_NAME: 'node',\n      TARGET_NODE: true,\n    },\n    browser: {\n      TARGET_NAME:    'browser',\n      TARGET_BROWSER: true,\n    },\n    debug: {\n      MODE_NAME:    'debug',\n      MODE_DEBUG:   true,\n      MODE_RELEASE: false,\n    },\n    release: {\n      MODE_NAME:    'release',\n      MODE_DEBUG:   false,\n      MODE_RELEASE: true,\n    },\n  };\n\n  apiEnv.target = function named(...args) {\n    const objects = args.map((arg) => {\n      if (typeof arg === 'string') {\n        const obj = configs[arg];\n        if (!obj) {\n          throw new Error(`Environment ${arg} is not defined; use ${Object.keys(configs).join(', ')}`);\n        }\n        return obj;\n      } else if (arg && typeof arg === 'object') {\n        return arg;\n      }\n\n      throw new Error(`Unrecognized argument ${arg}`);\n    });\n    return apiEnv(Object.assign(...objects));\n  };\n}\nmodule.exports = apiEnv;\n","const { ErrorResponseSubcodeMapper } = require('./lib/error-response-subcode-mapper');\nconst { ErrorSubcode } = require('./lib/error-subcodes');\nconst { NotImplementedError } = require('./lib/not-implemented-error');\nconst { OperationError } = require('./lib/operation-error');\nconst { RequestError } = require('./lib/request-error');\nconst { RequestEventCode } = require('./lib/request-event-codes');\nconst { SolaceError } = require('./lib/solace-error');\n\nmodule.exports.ErrorResponseSubcodeMapper = ErrorResponseSubcodeMapper;\nmodule.exports.ErrorSubcode = ErrorSubcode;\nmodule.exports.NotImplementedError = NotImplementedError;\nmodule.exports.OperationError = OperationError;\nmodule.exports.RequestError = RequestError;\nmodule.exports.RequestEventCode = RequestEventCode;\nmodule.exports.SolaceError = SolaceError;\n","const { ErrorSubcode } = require('./error-subcodes');\nconst { makeMap } = require('solclient-eskit');\n\n/* eslint-disable max-len */\n\nconst SC = ErrorSubcode;\n\nconst ROOT_MAPPING = makeMap(\n  400, makeMap(\n    'client name parse error', SC.CLIENT_NAME_INVALID,\n    'document is too large', SC.MESSAGE_TOO_LARGE,\n    'inactivity timeout', SC.INACTIVITY_TIMEOUT,\n    'max num subscriptions exceeded', SC.SUBSCRIPTION_TOO_MANY,\n    'message too long', SC.MESSAGE_TOO_LARGE,\n    'nolocal discard', SC.NOLOCAL_DISCARD,\n    'not enough space', SC.OUT_OF_RESOURCES,\n    'subscription already exists', SC.SUBSCRIPTION_ALREADY_PRESENT,\n    'subscription attributes conflict with existing subscription', SC.SUBSCRIPTION_ATTRIBUTES_CONFLICT,\n    'subscription not found', SC.SUBSCRIPTION_NOT_FOUND,\n    'subscription parse error', SC.SUBSCRIPTION_INVALID,\n    'topic parse error', SC.INVALID_TOPIC_SYNTAX,\n    'unknown transport session identifier', SC.UNKNOWN_TRANSPORT_SESSION_ID,\n    'xml parse error', SC.XML_PARSE_ERROR,\n    'unsupported ssl downgrade value', SC.LOGIN_FAILURE\n  ),\n  401, makeMap(\n    '', SC.LOGIN_FAILURE\n  ),\n  403, makeMap(\n    'basic authentication is shutdown', SC.BASIC_AUTHENTICATION_IS_SHUTDOWN,\n    'client certificate authentication is shutdown', SC.CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN,\n    'client name already in use', SC.CLIENT_NAME_ALREADY_IN_USE,\n    'client username is shutdown', SC.CLIENT_USERNAME_IS_SHUTDOWN,\n    'dynamic clients not allowed', SC.DYNAMIC_CLIENTS_NOT_ALLOWED,\n    'invalid virtual router address', SC.INVALID_VIRTUAL_ADDRESS,\n    'forbidden', SC.CLIENT_ACL_DENIED,\n    'message vpn not allowed', SC.MESSAGE_VPN_NOT_ALLOWED,\n    'publish acl denied', SC.PUBLISH_ACL_DENIED,\n    'replication is standby', SC.REPLICATION_IS_STANDBY,\n    'selector does not match', SC.SELECTOR_DOES_NOT_MATCH,\n    'subscription acl denied', SC.SUBSCRIPTION_ACL_DENIED,\n    'subscription does not match', SC.SUBSCRIPTION_DOES_NOT_MATCH,\n    'compression is shutdown', SC.LOGIN_FAILURE,\n    'shared subscriptions not supported on topic endpoints', SC.SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED,\n    'shared subscriptions not supported on queues', SC.SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED,\n    'shared subscription permission denied', SC.SHARED_SUBSCRIPTIONS_NOT_ALLOWED\n  ),\n  404, makeMap(\n    '', SC.LOGIN_FAILURE\n  ),\n  503, makeMap(\n    'low priority msg congestion', SC.LOW_PRIORITY_MSG_CONGESTION,\n    'message vpn unavailable', SC.MESSAGE_VPN_UNAVAILABLE,\n    'replication is standby', SC.REPLICATION_IS_STANDBY,\n    'service unavailable', SC.GM_UNAVAILABLE,\n    'spool over quota', SC.SPOOL_OVER_QUOTA,\n    'subscriber delete in progress', SC.CLIENT_DELETE_IN_PROGRESS,\n    'too many clients', SC.TOO_MANY_CLIENTS,\n    'too many connections for vpn', SC.TOO_MANY_CLIENTS,\n    'max message usage exceeded', SC.MAX_MESSAGE_USAGE_EXCEEDED\n  ),\n  507, makeMap(\n    'ad not ready', SC.GM_NOT_READY\n  )\n);\n\nconst AD_MAPPING = makeMap(\n  'PARENT', ROOT_MAPPING,\n  400, makeMap(\n    'already bound', SC.ALREADY_BOUND,\n    'endpoint already exists', SC.ENDPOINT_ALREADY_EXISTS,\n    'subscription already exists', SC.SUBSCRIPTION_ALREADY_PRESENT,\n    'already exists', SC.ENDPOINT_ALREADY_EXISTS,\n    'endpoint property mismatch', SC.ENDPOINT_PROPERTY_MISMATCH,\n    'invalid durable topic endpoint name', SC.INVALID_DTE_NAME,\n    'invalid selector', SC.INVALID_SELECTOR,\n    'invalid topic name', SC.INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT,\n    'queue not found', SC.QUEUE_NOT_FOUND,\n    'quota out of range', SC.QUOTA_OUT_OF_RANGE,\n    'unknown flow name', SC.UNKNOWN_FLOW_NAME,\n    'unsubscribe not allowed', SC.UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND\n  ),\n  403, makeMap(\n    'permission not allowed', SC.PERMISSION_NOT_ALLOWED,\n    'client initiated replay not allowed on non-exclusive topic endpoint', SC.CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED,\n    'client initiated replay not allowed on non-exclusive queue', SC.CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED,\n    'client initiated replay from inactive flow not allowed', SC.CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED,\n    'client initiated replay from browser flow not allowed', SC.CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED,\n    'replay not supported on temporary topic endpoint', SC.REPLAY_TEMPORARY_NOT_SUPPORTED,\n    'replay not supported on temporary queue', SC.REPLAY_TEMPORARY_NOT_SUPPORTED,\n    'unknown start location type', SC.UNKNOWN_START_LOCATION_TYPE,\n    'mismatched endpoint error id', SC.MISMATCHED_ENDPOINT_ERROR_ID,\n    'replay start message unavailable', SC.REPLAY_START_MESSAGE_NOT_AVAILABLE\n  ),\n  503, makeMap(\n    'durable topic endpoint shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'endpoint shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'max clients exceeded for durable topic endpoint', SC.MAX_CLIENTS_FOR_TE,\n    'max clients exceeded for queue', SC.MAX_CLIENTS_FOR_QUEUE,\n    'no more non-durable queue or topic endpoint', SC.NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT,\n    'no subscription match', SC.NO_SUBSCRIPTION_MATCH,\n    'queue shutdown', SC.QUEUE_SHUTDOWN,\n    'te shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'unknown durable topic endpoint', SC.UNKNOWN_TOPIC_ENDPOINT_NAME,\n    'unknown queue', SC.UNKNOWN_QUEUE_NAME,\n    'replay disabled', SC.REPLAY_DISABLED,\n    'replay cancelled', SC.REPLAY_CANCELLED,\n    'replay message unavailable', SC.REPLAY_MESSAGE_UNAVAILABLE,\n    'replay started', SC.REPLAY_STARTED,\n    'replayed message rejected by topic endpoint', SC.REPLAY_MESSAGE_REJECTED,\n    'replayed message rejected by queue\"', SC.REPLAY_MESSAGE_REJECTED,\n    'replay log modified', SC.REPLAY_LOG_MODIFIED,\n    'mismatched endpoint error id', SC.MISMATCHED_ENDPOINT_ERROR_ID,\n    'out of replay resources', SC.OUT_OF_REPLAY_RESOURCES,\n    'topic or selector modified on durable topic endpoint', SC.TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT,\n    'replay failed', SC.REPLAY_FAILED,\n    'replay start time not available', SC.REPLAY_START_TIME_NOT_AVAILABLE,\n    'replay start message unavailable', SC.REPLAY_START_MESSAGE_NOT_AVAILABLE\n  )\n);\n\nfunction getSubcodeMappingInner(root, respErrorCode, respStr) {\n  if (respErrorCode === 200) {\n    // success response, error subcode is 0 -  transport session use 0 as OK\n    return 0;\n  }\n  const codeMap = root[respErrorCode] || {};\n  const searchKey = (respStr || '').toLowerCase();\n  const foundKey = Object.keys(codeMap)\n    .find(mapKey => mapKey === searchKey || searchKey.indexOf(mapKey) >= 0);\n\n  if (foundKey) {\n    return codeMap[foundKey];\n  }\n\n  if (codeMap['']) {\n    return codeMap[''];\n  }\n\n  /* eslint-disable dot-notation */\n  // Don't access string keys via dot properties\n  if (root['PARENT']) {\n    return getSubcodeMappingInner(root['PARENT'], respErrorCode, respStr);\n  }\n  /* eslint-enable dot-notation */\n\n  return undefined;\n}\n\nfunction getSubcodeMapping(root, respErrorCode, respStr) {\n  const result = getSubcodeMappingInner(root, respErrorCode, respStr);\n  if (result === undefined) {\n    return SC.UNKNOWN_ERROR;\n  }\n  return result;\n}\n\n/**\n * @classdesc\n * Return {ErrorSubcode} based on response code and response string\n * from the router.\n * @private\n */\nconst ErrorResponseSubcodeMapper = {\n  /**\n   * @param {Number} respErrorCode The response code (an HTTP-like integer) to use in the lookup.\n   * @param {String} respStr The response string to use in the lookup.\n   * @returns {solace.ErrorSubcode} The subcode found, or ErrorSubcode.UNKNOWN_ERROR if not found.\n   * @static\n   * @private\n   */\n  getErrorSubcode(respErrorCode, respStr) {\n    return getSubcodeMapping(ROOT_MAPPING, respErrorCode, respStr);\n  },\n\n  getADErrorSubcode(respErrorCode, respStr) {\n    return getSubcodeMapping(AD_MAPPING, respErrorCode, respStr);\n  },\n};\n\nmodule.exports.ErrorResponseSubcodeMapper = ErrorResponseSubcodeMapper;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Defines an error subcode enumeration which is returned as a property of\n * the errors/exceptions thrown by the API. The subcode provides more detailed\n * error information.\n *\n * The following subcodes can apply to error responses resulting from\n * any API method.\n * * {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}\n * * {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n * * {@link solace.ErrorSubcode.INTERNAL_ERROR}\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst ErrorSubcode = {\n  /////////////\n  // SESSION //\n  /////////////\n  /**\n   * Errors that do not have a proper subcode.\n   */\n  UNKNOWN_ERROR:                                 0xFFFFFFFF,\n  /**\n   * No error is associated with this event.\n   */\n  NO_ERROR:                                      0,\n  /**\n   * The session is already connected.\n   */\n  // SESSION_ALREADY_CONNECTED: 1,\n  /**\n   * The session is not connected.\n   */\n  SESSION_NOT_CONNECTED:                         2,\n  /**\n   * The performed session operation is invalid given the state\n   * or configuration of the session.\n   * @deprecated Use {@link solace.ErrorSubCode.INVALID_OPERATION}\n   */\n  INVALID_SESSION_OPERATION:                     3,\n  /**\n   * The performed session operation is invalid given the state\n   * or configuration of the session.\n   */\n  INVALID_OPERATION:                             3,\n  /**\n   * An API call failed due to a timeout.\n   */\n  TIMEOUT:                                       4,\n  /////////////////\n  // MESSAGE VPN //\n  /////////////////\n  /**\n   * The Message VPN name configured for the session does not exist.\n   *\n   * Causes:\n   *  * 403 Message VPN Not Allowed\n   */\n  MESSAGE_VPN_NOT_ALLOWED:                       5,\n  /**\n   * The Message VPN name set for the session (or the default VPN if none\n   * was set) is currently shutdown on the router.\n   *\n   * Causes:\n   *  * 503 Message VPN Unavailable\n   */\n  MESSAGE_VPN_UNAVAILABLE:                       6,\n  ////////////\n  // CLIENT //\n  ////////////\n  /**\n   * The username for the client is administratively shutdown\n   * on the router.\n   *\n   * Causes:\n   *  * 403 Client Username Is Shutdown\n   */\n  CLIENT_USERNAME_IS_SHUTDOWN:                   7,\n  /**\n   * The username for the session has not been set and dynamic\n   * clients are not allowed.\n   *\n   * Causes:\n   *  * 403 Dynamic Clients Not Allowed\n   */\n  DYNAMIC_CLIENTS_NOT_ALLOWED:                   8,\n  /**\n   * The session is attempting to use a client name that is\n   * in use by another client, and the router is configured to reject the\n   * new session.\n   * A client name cannot be used by multiple clients in the same Message\n   * VPN.\n   *\n   * Causes:\n   *  * 403 Client Name Already In Use\n   */\n  CLIENT_NAME_ALREADY_IN_USE:                    9,\n  /**\n   * The client name chosen has been rejected as invalid by the router.\n   *\n   * Causes:\n   *  * 400 Client Name Parse Error\n   */\n  CLIENT_NAME_INVALID:                           10,\n  /**\n   * The client login is not currently possible because a previous\n   * instance of same client was being deleted.\n   *\n   * Causes:\n   *  * 503 Subscriber Delete In Progress\n   */\n  CLIENT_DELETE_IN_PROGRESS:                     11,\n  /**\n   * The client login is not currently possible because the maximum\n   * number of active clients on router has already been reached.\n   *\n   * Causes:\n   *  * 503 Too Many Clients\n   *  * 503 Too Many Connections for VPN\n   */\n  TOO_MANY_CLIENTS:                              12,\n  /**\n   * The client could not log into the router.\n   *\n   * Causes:\n   *  * 401 error codes\n   *  * 404 error codes\n   *  * Failed to send a session setup message in the transport.\n   */\n  LOGIN_FAILURE:                                 13,\n  //////////\n  // VRID //\n  //////////\n  /**\n   * An attempt was made to connect to the wrong IP address on\n   * the router (must use CVRID if configured), or the router CVRID has\n   * changed and this was detected on reconnect.\n   *\n   * Causes:\n   *  * 403 Invalid Virtual Router Address\n   */\n  INVALID_VIRTUAL_ADDRESS:                       14,\n  /////////\n  // ACL //\n  /////////\n  /**\n   * The client login to the router was denied because the\n   * IP address/netmask combination used for the client is designated in the\n   * ACL (Access Control List) profile associated with that client.\n   *\n   * Causes:\n   *  * 403 Forbidden\n   */\n  CLIENT_ACL_DENIED:                             15,\n  /**\n   * Adding a subscription was denied because it matched a\n   * subscription that was defined as denied on the ACL (Access Control List)\n   * profile associated with the client.\n   *\n   * Causes:\n   *  * 403 Subscription ACL Denied\n   */\n  SUBSCRIPTION_ACL_DENIED:                       16,\n  /**\n   * A message could not be published because its topic matched\n   * a topic defined as denied on the ACL (Access Control List) profile\n   * associated with the client.\n   *\n   * Causes:\n   *  * 403 Publish ACL Denied\n   */\n  PUBLISH_ACL_DENIED:                            17,\n  ////////////////\n  // VALIDATION //\n  ////////////////\n  /**\n   * An API call was made with an out-of-range parameter.\n   */\n  PARAMETER_OUT_OF_RANGE:                        18,\n  /**\n   * An API call was made with a parameter combination\n   * that is not valid.\n   */\n  PARAMETER_CONFLICT:                            19,\n  /**\n   * An API call was made with a parameter of incorrect type.\n   */\n  PARAMETER_INVALID_TYPE:                        20,\n  //////////////////\n  // FATAL ERRORS //\n  //////////////////\n  /**\n   *  An API call had an internal error (not an application fault).\n   */\n  INTERNAL_ERROR:                                21,\n  /**\n   * An API call failed due to insufficient space in the transport\n   * buffer to accept more data,\n   * or due to exhaustion of the Guaranteed Messaging Window on a publisher.\n   * After an insufficient space error of either kind, the\n   * listeners on the {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}\n   * event are notified when it is possible to retry the failed operation.\n   */\n  INSUFFICIENT_SPACE:                            22,\n  /**\n   * The message router has rejected the request. All available\n   * resources of the requested type are in use.\n   *\n   * Causes:\n   *  * 400 Not Enough Space\n   */\n  OUT_OF_RESOURCES:                              23,\n  /**\n   * An API call failed due to a protocol error with the router\n   * (not an application fault).\n   */\n  PROTOCOL_ERROR:                                24,\n  /**\n   * An API call failed due to a communication error. This typically indicates the\n   * transport connection to the message router has been unexpectedly closed.\n   */\n  COMMUNICATION_ERROR:                           25,\n  ////////////////\n  // KEEP ALIVE //\n  ////////////////\n  /**\n   * The session keep-alive detected a failed session.\n   */\n  KEEP_ALIVE_FAILURE:                            26,\n  /////////////////////\n  // MESSAGE RELATED //\n  /////////////////////\n  /**\n   * An attempt was made to use a topic which is longer\n   * than the maximum that is supported.\n   */\n  // TOPIC_TOO_LARGE: 27,\n  /**\n   * A send call was made that did not have a topic in a mode\n   * where one is required (for example, client mode).\n   */\n  TOPIC_MISSING:                                 28,\n  /**\n   *  An attempt was made to send a message with a total\n   * size greater than that supported by the protocol. (???)\n   */\n  //  MAX_TOTAL_MSGSIZE_EXCEEDED: 29,\n  /**\n   * An attempt was made to send a message with user data larger\n   * than the maximum that is supported.\n   */\n  // USER_DATA_TOO_LARGE: 30,\n  /**\n   * An attempt was made to use a topic which has a syntax that\n   * is not supported.\n   *\n   * Causes:\n   *  * 400 Topic Parse Error\n   */\n  INVALID_TOPIC_SYNTAX:                          31,\n  /**\n   * The client attempted to send a message larger than that\n   * supported by the router.\n   *\n   * Causes:\n   *  * 400 Document Is Too Large\n   *  * 400 Message Too Long\n   */\n  MESSAGE_TOO_LARGE:                             32,\n  /**\n   * The router could not parse an XML message.\n   *\n   * Causes:\n   *  * 400 XML Parse Error\n   */\n  XML_PARSE_ERROR:                               33,\n  ///////////////////\n  // SUBSCRIPTIONS //\n  ///////////////////\n  /**\n   * The client attempted to add a subscription that already\n   * exists. This subcode is only returned if the session property\n   * 'IgnoreDuplicateSubscriptionError' is not enabled.\n   *\n   * Causes:\n   * 400 Subscription Already Exists)\n   */\n  SUBSCRIPTION_ALREADY_PRESENT:                  34,\n  /**\n   * The client attempted to remove a subscription which did not exist.\n   * This subcode is only returned if the session property\n   * 'IgnoreDuplicateSubscriptionError' is not enabled.\n   *\n   * Causes:\n   * 400 Subscription Not Found)\n   */\n  SUBSCRIPTION_NOT_FOUND:                        35,\n  /**\n   * The client attempted to add/remove a subscription that\n   * is not valid.\n   *\n   * Causes:\n   *  * 400 Subscription Parse Error\n   */\n  SUBSCRIPTION_INVALID:                          36,\n  /**\n   * The router rejected a subscription add or remove request\n   * for a reason not separately enumerated.\n   */\n  SUBSCRIPTION_ERROR_OTHER:                      37,\n  /**\n   * The client attempted to add a subscription that\n   * exceeded the maximum number allowed.\n   *\n   * Causes:\n   *  * 400 Max Num Subscriptions Exceeded\n   */\n  SUBSCRIPTION_TOO_MANY:                         38,\n  /**\n   *  The client attempted to add a subscription which already\n   * exists but it has different properties.\n   *\n   * Causes:\n   *  * 400 Subscription Attributes Conflict With Existing Subscription\n   */\n  SUBSCRIPTION_ATTRIBUTES_CONFLICT:              39,\n  /**\n   * The client attempted to establish a session with No Local\n   * enabled and the capability is not supported by the router.\n   */\n  NO_LOCAL_NOT_SUPPORTED:                        40,\n  ////////////////////\n  // UNKNOWN ERRORS //\n  ////////////////////\n  /**\n   * The router rejected a control message for another reason\n   * not separately enumerated.\n   */\n  // CONTROL_ERROR_OTHER: 41,\n  /**\n   * The router rejected a data message for a reason\n   * not separately enumerated.\n   */\n  DATA_ERROR_OTHER:                              42,\n  //////////////////////\n  // TRANSPORT ERRORS //\n  //////////////////////\n  /**\n   * Failed to create the HTTP connection.\n   */\n  CREATE_XHR_FAILED:                             43,\n  /**\n   * Failed to create the transport.\n   */\n  CONNECTION_ERROR:                              44,\n  /**\n   * Failed to decode the data.\n   */\n  DATA_DECODE_ERROR:                             45,\n  /**\n   * @deprecated\n   * The session was inactive for too long.\n   *\n   * Causes:\n   * * 400 Inactivity Timeout\n   */\n  INACTIVITY_TIMEOUT:                            46,\n  /**\n   * @deprecated\n   * The router does not know this session's identifier.\n   *\n   * Causes:\n   * * 400 Unknown Transport Session Identfier\n   */\n  UNKNOWN_TRANSPORT_SESSION_ID:                  47,\n  /**\n   * @deprecated This subcode is not used since 10.0.0.\n   * Guaranteed Messages (with a delivery mode other than DIRECT) are not supported.\n   */\n  AD_MESSAGING_NOT_SUPPORTED:                    48,\n  /**\n   * @deprecated\n   * Creating the WebSocket transport failed.\n   */\n  CREATE_WEBSOCKET_FAILED:                       49,\n  /**\n   * An attempt to perform an operation using a VPN that is configured to be\n   * STANDBY for replication.\n   *\n   * Causes:\n   * * 403 Replication Is Standby\n   */\n  REPLICATION_IS_STANDBY:                        50,\n  ////////////////////\n  // Authentication //\n  ////////////////////\n  /**\n   * Basic authentication is administratively shut down on the\n   * router.\n   *\n   * Causes:\n   *  * 403 Basic Authentication is Shutdown\n   */\n  BASIC_AUTHENTICATION_IS_SHUTDOWN:              51,\n  /**\n   * Client certificate authentication is administratively\n   * shut down on the router.\n   *\n   * Causes:\n   *  * 403 Client Certificate Authentication Is Shutdown\n   */\n  CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN: 52,\n  //////////////////////\n  // Guaranteed Messaging //\n  //////////////////////\n  /**\n   * Guaranteed Messaging services are not enabled on the router.\n   *\n   * Causes:\n   *  * 503 Service Unavailable\n   */\n  GM_UNAVAILABLE:                                100,\n  /**\n   * The session attempted to connect to a Guaranteed Message Publisher\n   * that does not exist on this router.\n   * All unacked messages held by the API are renumbered and redelivered. This subCode\n   * is handled internally and will not be seen by the application. After successfully\n   * renumbereing and redelivering the messages, if any messages are resent, listeners\n   * on the @{link solace.SessionEventCode#event:REPUBLISHING_UNACKED_MESSAGES} event are\n   * invoked.\n   *\n   * Causes:\n   * * 400 Unknown Flow Name\n   * @private\n   */\n  UNKNOWN_FLOW_NAME:                             111,\n  /**\n   * Already bound to the Queue or not authorized to bind to the Queue.\n   *\n   * Causes:\n   *  * 400 Already Bound\n   */\n  ALREADY_BOUND:                                 112,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Topic Endpoint with an\n   * invalid topic.\n   *\n   * Causes:\n   *  * 400 Invalid Topic Name\n   */\n  INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT:         113,\n  /**\n   * An attempt was made to bind to an unknown Queue name (for example, not\n   * configured on the router).\n   *\n   * Causes:\n   *  * 503 Unknown Queue\n   */\n  UNKNOWN_QUEUE_NAME:                            114,\n  /**\n   * An attempt was made to perform an operation on an unknown Guaranteed Messaging\n   * Topic Endpoint name (for example, not configured on router).\n   *\n   * Causes:\n   *  * 503 Unknown Durable Topic Endpoint\n   */\n  UNKNOWN_TOPIC_ENDPOINT_NAME:                   115,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Queue that has already reached\n   * its maximum number of clients.\n   *\n   * Causes:\n   *  * 503 Max clients exceeded for Queue\n   */\n  MAX_CLIENTS_FOR_QUEUE:                         116,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Topic Endpoint that has already\n   * reached its maximum number of clients.\n   *\n   * Causes:\n   *  * 503 Max clients exceeded for durable Topic Endpoint\n   */\n  MAX_CLIENTS_FOR_TE:                            117,\n  /**\n   * An unexpected unbind response was received for a Guaranteed Messaging Queue or Topic\n   * Endpoint (for example, the Queue or Topic Endpoint was deleted from the router).\n   */\n  UNEXPECTED_UNBIND:                             118,\n  /**\n   * The specified Guaranteed Messaging Queue was not found when publishing a message.\n   *\n   * Causes:\n   *  * 400 Queue Not Found\n   */\n  QUEUE_NOT_FOUND:                               119,\n  /**\n   * Message was not delivered because the Guaranteed Message spool is over its\n   * allotted space quota.\n   *\n   * Causes:\n   *  * 503 Spool Over Quota\n   */\n  SPOOL_OVER_QUOTA:                              120,\n  /**\n   * An attempt was made to operate on a shutdown Guaranteed Messaging queue.\n   *\n   * Causes:\n   *  * 503 Queue Shutdown\n   */\n  QUEUE_SHUTDOWN:                                121,\n  /**\n   * An attempt was made to operate on a shutdown Guaranteed Messaging Topic Endpoint.\n   *\n   * Causes:\n   *  * 503 Durable Topic Endpoint Shutdown\n   *  * 503 TE Shutdown\n   *  * 503 Endpoint Shutdown\n   */\n  TOPIC_ENDPOINT_SHUTDOWN:                       122,\n  /**\n   * An attempt was made to bind to a non-durable Guaranteed Messaging Queue or Topic\n   * Endpoint, and the router is out of resources.\n   *\n   * Causes:\n   *  * 503 No More Non-Durable Queue or Topic Endpoint\n   */\n  NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT:   123,\n  /**\n   * An attempt was made to create a Queue or Topic Endpoint that already exists.\n   * This subcode is only returned if\n   * {@link solace.SessionProperties.ignoreProvisionEndpointExists} was not set for the current\n   * session.\n   *\n   * Causes:\n   *  * 400 Endpoint Already Exists\n   */\n  ENDPOINT_ALREADY_EXISTS:                       124,\n  /**\n   * An attempt was made to delete or create a Queue or Topic Endpoint when the\n   * Session does not have authorization for the action. This subcode is also returned when an\n   * attempt is made to remove a message from an endpoint when the Session does not have 'consume'\n   * authorization, or when an attempt is made to add or remove a Topic subscription from a Queue\n   * when the Session does not have 'modify-topic' authorization.\n   *\n   * Causes:\n   *  * 403 Permission Not Allowed\n   */\n  PERMISSION_NOT_ALLOWED:                        125,\n  /**\n   * An attempt was made to bind to a Queue or Topic Endpoint with an invalid\n   * selector.\n   *\n   * Causes:\n   *  * 400 Invalid Selector\n   */\n  INVALID_SELECTOR:                              126,\n  /**\n   * Publishing the message was denied due to exceeding the maximum spooled message\n   * count.\n   *\n   * Causes:\n   *  * 503 Max message usage exceeded\n   */\n  MAX_MESSAGE_USAGE_EXCEEDED:                    127,\n  /**\n   * An attempt was made to create a dynamic durable endpoint, and it was found to\n   * exist with different properties.\n   *\n   * Causes:\n   *  * 400 Endpoint Property Mismatch\n   */\n  ENDPOINT_PROPERTY_MISMATCH:                    128,\n  /**\n   * The client attempted to publish an Guaranteed Messaging message to a topic that\n   * did not have any guaranteed subscription matches, or only matched a replicated topic.\n   *\n   * Causes:\n   *  * 503 No Subscription Match\n   */\n  NO_SUBSCRIPTION_MATCH:                         129,\n  /**\n   * The application attempted to acknowledge a message that arrived via a delivery\n   * mode that does not allow acknowledgements.\n   */\n  MESSAGE_DELIVERY_MODE_MISMATCH:                130,\n  /**\n   * The message was already acknowledged.\n   */\n  MESSAGE_ALREADY_ACKNOWLEDGED:                  131,\n  /**\n   * The API-supplied subscription did not match when attempting to bind to a\n   * non-exclusive durable topic endoint.\n   *\n   * Causes:\n   *  * 403 Subscription Does Not Match\n   */\n\n  SUBSCRIPTION_DOES_NOT_MATCH:                       133,\n  /**\n   * The API-supplied selector did not match when attempting to bind to a\n   * non-exclusive durable topic endpoint.\n   *\n   * Causes:\n   *  * 403 Selector Does Not Match\n   */\n  SELECTOR_DOES_NOT_MATCH:                           134,\n  /**\n   * The subscriber has provided an incorrectly formatted durable topic endpoint name.\n   *\n   * Causes:\n   *  * 400 Invalid Durable Topic Endpoint Name\n   */\n  INVALID_DTE_NAME:                                  135,\n  /**\n   * The unsubscribe request was denied by the router because the durable topic endpoint\n   * had one or more clients bound.\n   *\n   * Causes:\n   *  * 400 Unsubscribe Not Allowed, Client(s) Bound To DTE\n   */\n  UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND:             136,\n  /**\n   * An application callback threw an error back to the API. The reason property describes\n   * the error that occurred.\n   */\n  CALLBACK_ERROR:                                    137,\n  /**\n   * A published message was discarded by the router because it will not be published\n   * anywhere based on the NoLocal properties. This can be considered normal.\n   *\n   * Causes:\n   * * 400 Nolocal Discard\n   */\n  NOLOCAL_DISCARD:                                   138,\n  /**\n   * The operation is delayed because Guaranteed Messaging is not ready on the router.\n   *\n   * Causes:\n   * 507 Ad Not Ready\n   */\n  GM_NOT_READY:                                      140,\n  /**\n   * The message was rejected because one or more matching endpoints'\n   * reject-low-priority-msg-limit was exceeded.\n   *\n   * Causes:\n   * * 503 Low Priority Msg Congestion\n   */\n  LOW_PRIORITY_MSG_CONGESTION:                       141,\n  /**\n   * The specified endpoint quota was out of range.\n   *\n   * Causes:\n   * 400 Quota Out Of Range\n   */\n  QUOTA_OUT_OF_RANGE:                                142,\n  /**\n   * Unable to load the certificate from the TrustStore for a SSL\n   * secured session.\n   */\n  FAILED_LOADING_TRUSTSTORE:                         143,\n  /**\n   * The client failed to load certificate and/or private key files.\n   */\n  FAILED_LOADING_CERTIFICATE_AND_KEY:                144,\n  /**\n   * DNS resolution failed for all hostnames.\n   */\n  UNRESOLVED_HOSTS:                                  145,\n  /**\n   * Replay is not supported on the Solace Message Router\n   */\n  REPLAY_NOT_SUPPORTED:                              146,\n  /**\n   *  Replay is not enabled in the message-vpn\n   */\n  REPLAY_DISABLED:                                   147,\n  /**\n   *  The client attempted to start replay on a flow bound to a non-exclusive endpoint\n   */\n  CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED: 148,\n  /**\n   *  The client attempted to start replay on an inactive flow\n   */\n  CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED: 149,\n  /**\n   *  N/A - Browser Flows are not supported.\n   */\n  CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED:  150,\n  /**\n   *  Replay is not supported on temporary endpoints\n   */\n  REPLAY_TEMPORARY_NOT_SUPPORTED:                    151,\n  /**\n   *  The client attempted to start a replay but provided an unknown start location type.\n   */\n  UNKNOWN_START_LOCATION_TYPE:                       152,\n  /**\n   *  A replay in progress on a flow was administratively cancelled, causing the flow to be unbound\n   */\n  REPLAY_CANCELLED:                                  153,\n  /**\n   *  A replay in progress on a flow failed because messages to be replayed were trimmed\n   *  from the replay log\n   */\n  REPLAY_MESSAGE_UNAVAILABLE:                        154,\n  /**\n   *  A replay was requested but the requested start time is not available in the replay log\n   */\n  REPLAY_START_TIME_NOT_AVAILABLE:                   155,\n  /**\n   *  The Solace Message Router attempted to replay a message, but the queue/topic\n   *  endpoint rejected the message to the sender\n   */\n  REPLAY_MESSAGE_REJECTED:                           156,\n  /**\n   *  A replay in progress on a flow failed because the replay log was modified\n   */\n  REPLAY_LOG_MODIFIED:                               157,\n  /**\n   * Endpoint error ID in the bind request does not match the endpoint's error ID.\n   */\n  MISMATCHED_ENDPOINT_ERROR_ID:                      158,\n  /**\n   * A replay was requested, but the router does not have sufficient resources\n   * to fulfill the request, due to too many active replays.\n   */\n  OUT_OF_REPLAY_RESOURCES:                           159,\n\n  /**\n   * A replay was in progress on a Durable Topic Endpoint (DTE)\n   * when its topic or selector was modified, causing the replay to fail.\n   */\n  TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT: 160,\n  /**\n   *  A replay in progress on a flow failed\n   */\n  REPLAY_FAILED:                                        161,\n  /**\n   *  A replay was started on the queue or DTE, either by another client or by the router.\n   */\n  REPLAY_STARTED:                                       162,\n  /**\n   * Router does not support Compressed TLS\n   */\n  COMPRESSED_TLS_NOT_SUPPORTED:                         163,\n  /**\n   * The client attempted to add a shared subscription, but the capability is not supported\n   * by the appliance.\n   */\n  SHARED_SUBSCRIPTIONS_NOT_SUPPORTED:                   164,\n  /**\n   * The client attempted to add a shared subscription on a client that is not permitted to\n   * use shared subscriptions.\n   */\n  SHARED_SUBSCRIPTIONS_NOT_ALLOWED:                     165,\n  /**\n   * The client attempted to add a shared subscription to a queue or topic endpoint.\n   */\n  SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED:            166,\n  /**\n   * A replay was requested but the requested start message is not available in the replay log.\n   */\n  REPLAY_START_MESSAGE_NOT_AVAILABLE:                   167,\n  /**\n   * Replication Group Message Id are not comparable.\n   * Messages must be published to the same broker or HA pair for their Replicaton Group\n   * Message Id to be comparable.\n   */\n  MESSAGE_ID_NOT_COMPARABLE:                            168,\n};\n\nmodule.exports.ErrorSubcode = Enum.new(ErrorSubcode);\n","const { SolaceError } = require('./solace-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * An error thrown when calling an API that has not been implemented.\n * @hideconstructor\n * @extends {solace.SolaceError}\n *\n * @memberof solace\n */\nclass NotImplementedError extends SolaceError {\n  /*\n   * Creates an instance of NotImplementedError.\n   * @param {any} message The message to include in the error.\n   * @memberof NotImplementedError\n   */\n  constructor(message) {\n    super('NotImplementedError', message || '', NotImplementedError);\n  }\n  /**\n   * The name of the error.\n   * @name solace.NotImplementedError#name\n   * @type {String}\n   * @readonly\n   * @description 'NotImplementedError'\n   */\n}\n\nmodule.exports.NotImplementedError = NotImplementedError;\n\n","const { SolaceError } = require('./solace-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * An error thrown by the API when an operational error is encountered.\n * @memberof solace\n * @extends {solace.SolaceError}\n * @hideconstructor\n */\nclass OperationError extends SolaceError {\n\n  /*\n   * @constructor\n   * @param {String} message The message to include in the error.\n   * @param {Number} [subcode] The subcode. See {@link ErrorSubcode} for valid values\n   * @param {Object} [reason] Embedded error or exception (optional)\n   */\n  constructor(message, subcode, reason) {\n    /**\n     * The name of the error.\n     * @name solace.OperationError#name\n     * @type {String}\n     * @readonly\n     * @description 'OperationError'\n     */\n    super('OperationError', message, OperationError);\n    /**\n     * The subcode for the error. @see {@link solace.ErrorSubcode}\n     * @name solace.OperationError#subcode\n     * @type {solace.ErrorSubcode}\n     */\n    this.subcode = subcode;\n    /**\n     * The reason for the error: an embedded error object or exception.\n     * @name solace.OperationError#reason\n     * @type {Object}\n     */\n    this.reason = reason;\n  }\n\n}\n\nmodule.exports.OperationError = OperationError;\n","const { ErrorSubcode } = require('./error-subcodes');\nconst { OperationError } = require('./operation-error');\nconst { RequestEventCode } = require('./request-event-codes');\n\n\nconst SUBCODE_FROM_EC = {\n  [RequestEventCode.REQUEST_ABORTED]: ErrorSubcode.SESSION_NOT_CONNECTED,\n  [RequestEventCode.REQUEST_TIMEOUT]: ErrorSubcode.TIMEOUT,\n};\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a request failure event; request failure events are passed to the application\n * event handling callback provided when sending the request {@link solace.Session#sendRequest}\n * @memberof solace\n * @extends solace.OperationError\n * @hideconstructor\n */\nclass RequestError extends OperationError {\n  /*\n   * <b>This class is not exposed for construction by API users.</b> Instances of this object will\n   * be passed to the application in calls to the application's\n   * {@link solace.Session.requestFailedCallback}, provided when invoking\n   * {@link solace.Session.sendReqeust}.\n   * @constructor\n   * @param {String} message Information string\n   * @param {solace.RequestEventCode} eventCode The event code\n   * @param {Object} [correlationKey] Any associated correlation key\n   * @param {Object} [reason] Any additional information\n   * @private\n   */\n  constructor(message, eventCode, correlationKey, reason) {\n    super(message, SUBCODE_FROM_EC[eventCode], reason);\n    /**\n     * The name of the error.\n     * @name solace.RequestError#name\n     * @type {String}\n     * @readonly\n     * @description 'RequestError'\n     */\n    this.name = 'RequestError';\n    this._eventCode = eventCode;\n    this._correlationKey = correlationKey;\n  }\n\n  /**\n   * @type {solace.SessionEventCode}\n   * @name solace.RequestError#requestEventCode\n   * @description A code that provides more information about the error event.\n   */\n  get requestEventCode() {\n    return this._requestEventCode;\n  }\n\n  /**\n   * @deprecated Use {@link solace.RequestError#subcode}\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link ErrorSubcode}\n   */\n  get errorSubcode() {\n    return super.subcode;\n  }\n\n  [util_inspect_custom]() {\n    const superObj = super[util_inspect_custom] ? super[util_inspect_custom]() : {};\n    return Object.assign(superObj, {\n      'requestEventCode': RequestEventCode.describe(this.requestEventCode),\n      'infoStr':          this.infoStr,\n      'correlationKey':   this.correlationKey,\n    });\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n}\n\nmodule.exports.RequestError = RequestError;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An attribute of {@link solace.RequestError}. This enumeration represents the\n * different errors emitted by\n * {@link solace.Session.requestFailedCallback}\n * when a {@link solace.Session#sendRequest} fails.\n *\n * The client application receives a request error with event code\n * {@link solace.RequestEventCode.REQUEST_ABORTED}\n * when the underlying connection is successfully closed, or closed as a result\n * of a communication error.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst RequestEventCode = {\n  /**\n   * A request was aborted because the session is disconnected.\n   */\n  REQUEST_ABORTED: 8,\n  /**\n   * The event represents a timed-out request API call.\n   */\n  REQUEST_TIMEOUT: 9,\n};\n\nmodule.exports.RequestEventCode = Enum.new(RequestEventCode);\n","/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * The base class for all errors thrown by the API.\n * @hideconstructor\n * @extends {Error}\n *\n * @memberof solace\n */\nclass SolaceError extends Error {\n  constructor(type, message, constructor) {\n    super(message || '');\n    /**\n     * Error Message.\n     * @name solace.SolaceError#message\n     * @type {String}\n     */\n    this.message = message; // force set\n    /**\n     * The name of the error.\n     * @name solace.SolaceError#name\n     * @type {String}\n     */\n    this.name = type;\n\n    // ES6 error semantics are disappointing\n    // Cleaner stack capture for V8-based VMs\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, constructor);\n    } else {\n      this.stack = new Error().stack;\n    }\n  }\n\n}\n\nmodule.exports.SolaceError = SolaceError;\n","const { ArrayOperations } = require('./lib/array-operations');\nconst { assert } = require('./lib/assert');\nconst { BidiMap } = require('./lib/bidi-map');\nconst { Enum } = require('./lib/enum');\nconst { Iterator } = require('./lib/iterator');\nconst { Lazy } = require('./lib/lazy');\nconst { makeMap } = require('./lib/make-map');\nconst { Mixin } = require('./lib/mixin');\nconst { Resolver } = require('./lib/resolver');\nconst { SetOperations } = require('./lib/set-operations');\n\nmodule.exports.assert = assert;\nmodule.exports.ArrayOperations = ArrayOperations;\nmodule.exports.BidiMap = BidiMap;\nmodule.exports.Enum = Enum;\nmodule.exports.Iterator = Iterator;\nmodule.exports.Lazy = Lazy;\nmodule.exports.makeIterator = Iterator.makeIterator;\nmodule.exports.makeMap = makeMap;\nmodule.exports.Mixin = Mixin;\nmodule.exports.mixin = Mixin.mixin;\nmodule.exports.Resolver = Resolver;\nmodule.exports.resolve = Resolver.resolve;\nmodule.exports.SetOperations = SetOperations;\n","/* eslint-disable no-nested-ternary */\n\nfunction defaultComparator(a, b) {\n  const astr = String(a);\n  const bstr = String(b);\n  return astr > bstr ? 1 : (astr < bstr ? -1 : 0);\n}\n\nfunction insertOrdered(array, element, comparator = defaultComparator) {\n  const result = [...array];\n  return this.inplaceInsertOrdered(result, element, comparator);\n}\n\nfunction inplaceInsertOrdered(array, element, comparator = defaultComparator) {\n  let index = 0;\n  let min = 0;\n  let max = array.length;\n  // Optimize for empty array\n  if (max > 0) {\n    // Optimize for append\n    if (comparator(element, array[max - 1]) > 0) {\n      index = max;\n    } else {\n      // Binary search\n      index = (min + max) >> 1; // math.floor((min + max) / 2)\n      while (max > min) {\n        if (comparator(element, array[index]) < 0) {\n          max = index;\n        } else {\n          min = index + 1;\n        }\n        index = (min + max) >> 1; // math.floor((min + max) / 2)\n      }\n    }\n  }\n  array.splice(index, 0, element);\n}\n\nmodule.exports = {\n  ArrayOperations: {\n    defaultComparator,\n    insertOrdered,\n    inplaceInsertOrdered,\n  },\n};\n","let assert;\n\n/**\n * Browsers and Node share a common console.assert interface, console.assert(assertion, ...);\n * In Node, console.assert throws AssertionError if its assertion is falsy.\n * In browsers, they print to the console.\n * Extend browser behaviour to also throw.\n */\n\nif (BUILD_ENV.MODE_DEBUG) {\n  let internalAssert;\n  if (BUILD_ENV.TARGET_NODE) {\n    // _eslint-disable-next-line no-console\n    internalAssert = console.assert;\n  } else {\n    internalAssert = function browserAssert(assertion, ...args) {\n      if (!assertion) {\n        throw new Error(`Assertion error: ${typeof assertion} ${assertion} (${args.join(' ')})`);\n      }\n    };\n  }\n  // Now, wrap the assert in a catch and rethrow to give us a single place\n  // to set assert breakpoints.\n  assert = function outerAssert(...args) {\n    // eslint-disable-next-line no-useless-catch\n    try {\n      internalAssert(...args);\n    } catch (e) {\n      // if (BUILD_ENV.MODE_DEBUG) debugger;\n      throw (e);\n    }\n  };\n} else {\n  // In production mode, asserts are generally disabled.\n  assert = () => {};\n}\n\nmodule.exports.assert = assert;\n","/**\n * @private\n */\nclass BidiMap {\n  constructor(...pairs) {\n    this.forward = new Map();\n    this.reverse = new Map();\n    pairs.forEach((p) => {\n      this.setValues(p[0], p[1]);\n    });\n  }\n\n  /**\n   * Sets the key => value and value => key relationships for the supplied parameters.\n   *\n   * Method name is #set, not #put, for alignment with ES map method names.\n   * @param {*} key The key for the forward mapping (value in the reverse mapping)\n   * @param {*} value The value for the forward mapping (key in the reverse mapping)\n   */\n  setValues(key, value) {\n    this.forward.set(key, value);\n    this.reverse.set(value, key);\n  }\n\n}\n\nmodule.exports.BidiMap = BidiMap;\n","function enumName(instance, keys, value) {\n  const matches = keys.filter(k => instance[k] === value);\n  return matches.length ? matches[0] : null;\n}\n\nfunction enumValues(instance, keys) {\n  return Array.from(new Set(keys.map(k => instance[k])));\n}\n\n/**\n * The base for all enumerated types. Provides common functionality such as\n * collections of keys and values, reverse mapping, and readable descriptions. Also\n * supports overriding the canonical key-value mapping to maintain readability in\n * minified environments.\n *\n * @mixin\n * @memberof solace\n */\nclass Enum {\n\n  /**\n   * Creates an Enum with the given key-value mapping.\n   *\n   * @param {Object} values The key-value mapping to use. This mapping is set as the initial\n   * canonical key-value mapping. To override, use {@link solace.Enum#_setCanonical}.\n   */\n  constructor(values) {\n    Object.defineProperties(this, {\n      _canonical: {\n        value:        null,\n        enumerable:   false,\n        writable:     true,\n        configurable: true,\n      },\n    });\n    this._setCanonical(values);\n  }\n\n  /**\n   * Resets the canonical key value mapping for the enumeration. Using this method,\n   * you add additional sets of keys that map to the same values, and specify that\n   * these new keys take precedence for reverse mapping. Any older set of keys is made\n   * non-canonical and non-enumerable.\n   *\n   * @example\n   * const c = new Enum({ HELLO: 'world' });\n   * c._setCanonical({ MAD: 'world' });\n   * c.nameOf('world') === 'MAD'; // true\n   *\n   * @param {Object} values The new key-value mapping to add to the object and set as canonical.\n   * @param {Boolean} final Whether this enumeration should accept further reconfiguration.\n   * @private\n   */\n  _setCanonical(values, final = false) {\n    this._canonical = Object.assign({}, values);\n    Object.keys(this).forEach((key) => {\n      const descriptor = Object.getOwnPropertyDescriptor(this, key);\n      if (descriptor.value !== undefined) {\n        Object.defineProperty(this, key, {\n          enumerable:   false,\n          writable:     true,\n          configurable: true,\n          value:        descriptor.value,\n        });\n      }\n    });\n    Object.keys(values).forEach((key) => {\n      Object.defineProperty(this, key, {\n        enumerable:   true,\n        writable:     !final,\n        configurable: !final,\n        value:        values[key],\n      });\n    });\n  }\n\n  /**\n   * Create a human-readable string describing the given enumeration value. This\n   * result is informational and may vary between SDK versions.\n   *\n   * Currently, it either returns the value provided (if the associated key is\n   * the same), or a string of the form `key (value)`.\n   *\n   * @example\n   * console.log(new Enum({ ANSWER: 42 }).describe(42)); // ANSWER (42)\n   * console.log(new Enum({ ECHO: 'ECHO' })).describe('ECHO'); // ECHO\n   *\n   * @param {any} enumValue The value on which to perform reverse mapping.\n   * @param {String} [noneValue=''] The string to return if the enumeration value is\n   *    undefined or null.\n   * @param {String} [unknownValue='<unknown>'] The string to return if the enumeration\n   *    value was not found in any of the canonical keys.\n   * @returns {String} A human-readable description of the reverse mapping for the value.\n   */\n  describe(enumValue, noneValue = '<none>', unknownValue = '<unknown>') {\n    if (enumValue === null || enumValue === undefined) return noneValue;\n    const name = enumName(this._canonical,\n                          Object.keys(this._canonical || {}),\n                          enumValue)\n                 || unknownValue;\n    return name === enumValue ? name : `${name} (${enumValue})`;\n  }\n\n  /**\n   * Returns the canonical name in this enumeration for the given value. This function is\n   * designed to facilitate reflection, whereas for display\n   *\n   * @param {any} enumValue The value for which to get the enumeration key.\n   * @returns {String} The name for the given value.\n   */\n  nameOf(enumValue) {\n    return enumName(this._canonical, Object.keys(this._canonical || {}), enumValue);\n  }\n\n  /**\n   * Returns all canonical names/keys in this enumeration.\n   *\n   * @readonly\n   * @returns {Array.<String>} All canonical names in this enumeration.\n   */\n  get names() {\n    return Object.keys(this._canonical || {});\n  }\n\n  /**\n   * Returns all values assigned to canonical keys in this enumeration.\n   *\n   * @readonly\n   * @returns {Array} All values defined for enumeration keys.\n   */\n  get values() {\n    return enumValues(this._canonical, Object.keys(this._canonical || {}));\n  }\n\n  /**\n   * A property returning true to faciliate duck-typing with {solace.Enum} objects.\n   *\n   * @readonly\n   * @returns {Boolean} true This is an enumeration.\n   */\n  get isEnum() { // eslint-disable-line class-methods-use-this\n    return true;\n  }\n\n  /**\n   * Returns the name of an enuerated value given the\n   * enumeration and the value.\n   *\n   * @param {Object} instance The enumeration instance.\n   * @param {*} value The value for which to return the key name.\n   * @returns {String} The key name for the given enumeration value.\n   */\n  static nameOf(instance, value) {\n    return instance.nameOf(value);\n  }\n\n  /**\n   * Returns values defined on this enumeration for the given keys. To get the enumeration keys,\n   * use {@link Object#keys}.\n   * @param {Object} instance The enumeration on which to return values.\n   * @returns {Array} The values defined on the given enumeration.\n   **/\n  static values(instance) {\n    return instance.values();\n  }\n\n  /**\n   * Alternate construction method for enumerations.\n   *\n   * @static\n   * @param {Object} values Initial key-value mapping\n   * @returns {solace.Enum} A new enumeration instance\n   * @private\n   */\n  static new(values) {\n    return new Enum(values);\n  }\n\n  /**\n   * Constructs a private enumeration in which the values are equal to the keys.\n   *\n   * @static\n   * @param {Array.<String>} strings Key names. The values will be equal to the keys.\n   * @returns {solace.Enum} An enumeration instance of the given strings\n   * @private\n   */\n  static ofStrings(strings) {\n    const map = {};\n    strings.forEach((s) => {\n      map[s] = s;\n    });\n    return Enum.new(map);\n  }\n\n  /**\n   * Constructs an enumeration in which each key is assigned a distinct integer value.\n   * Enums created this way are subject to renumbering if keys are reordered.\n   *\n   * @static\n   * @param {Array.<String>} keys Key names. The values will be sequential from zero.\n   * @returns {solace.Enum} An enumeration instance of the given values\n   * @private\n   */\n  static ofNumbers(keys) {\n    const map = {};\n    keys.forEach((key, index) => {\n      map[key] = index;\n    });\n    return Enum.new(map);\n  }\n}\n\nmodule.exports.Enum = Enum;\n","/**\n * An object managing a traversal of an Array-like object.\n *\n * @memberof solace\n * @property {function} deref Returns the value the iterator is\n *      referencing.\n * @property {function} incr Increments the iterator's reference in the\n *      iterator's data set.\n * @property {function} end Tests whether the iterator is at the end of\n *      the data set.  This MUST return false when calling deref() or\n *      incr().\n * @private\n */\nclass Iterator {\n\n  /**\n   * Creates an iterator to forward iterate over a specific contiguous\n   * section of an array, specifically in the range [start, end)\n   * @param {Array} arr The array to iterate over\n   * @param {Number} [start=0] The first item the iterator should\n   *  dereference\n   * @param {Number} [end=arr.length] One beyond the last item in the array\n   *  that the iterator should dereference.\n   * @constructor\n   */\n  constructor(arr, start = 0, end = arr.length) {\n    /**\n     * The array being iterated.\n     * @type {Array}\n     * @private\n     */\n    this._arr = arr;\n    /**\n     * The current index of the enumeration.\n     * @private\n     * @type {Number}\n     */\n    this._index = start;\n    /**\n     * The exclusive end index, or the length, of the array.\n     * @type {Number}\n     */\n    this._end = end;\n  }\n\n  /**\n   * Returns the element at the iterator's position.\n   * @returns {Object} The array element at the current position.\n   */\n  deref() {\n    return this._arr[this._index];\n  }\n\n  /**\n   * Increments the iterator.\n   * @returns {Number} The new position of the iterator.\n   */\n  incr() {\n    return ++this._index;\n  }\n\n  /**\n   * Reports whether the iterator has completed its iteration.\n   * @returns {Boolean} True if the iterator has reached the end of the iteration.\n   */\n  end() {\n    return this._index >= this._end;\n  }\n\n  /**\n   * Creates an iterator to forward iterate over a specific contiguous\n   * section of an array, specifically in the range [start, end)\n   *\n   * @param {Array} arr The array to iterate over\n   * @param {Number} [start=0] The first item the iterator should\n   *  dereference\n   * @param {Number} [end=arr.length] One beyond the last item in the array\n   *  that the iterator should dereference.\n   * @returns {solace.Iterator} An iterator to the specified set of data.\n   */\n  static makeIterator(arr, start = 0, end = arr.length) {\n    return new Iterator(arr, start, end);\n  }\n\n}\n\n// Expose both the static constructor function and the class.\nmodule.exports.Iterator = Iterator;\n","const DEFAULT_PROPERTY_OPTIONS = {\n  enumerable: true,\n};\n\nfunction setPropertyValue(target, key, value, options = null) {\n  Object.defineProperty(\n          target,\n          key,\n          Object.assign({ value }, DEFAULT_PROPERTY_OPTIONS, options));\n}\n\n\nfunction lazyProperty(target, key, evalFn) {\n  Object.defineProperty(\n    target,\n    key,\n    Object.assign({\n      configurable: true, // Allow replacing this property with resolved value.\n      get:          () => {\n        // The getter evaluates the function provided.\n        // It replaces itself with the value it resolves.\n        const result = evalFn(target, key);\n        setPropertyValue(target, key, result);\n        return result;\n      },\n      set: (value) => {\n        setPropertyValue(target, key, value);\n      },\n    }, DEFAULT_PROPERTY_OPTIONS));\n  return target;\n}\n\nfunction lazyProperties(target, obj) {\n  Object.keys(obj).forEach((k) => {\n    lazyProperty(target, k, obj[k]);\n  });\n  return obj;\n}\n\nfunction lazyValue(evalFn) {\n  return lazyProperty({}, 'value', evalFn);\n}\n\nconst Lazy = {\n  lazyProperties,\n  lazyProperty,\n  lazyValue,\n};\n\nmodule.exports.Lazy = Lazy;\n","\n// Avoid closure compiler nonsense\nmodule.exports.makeMap = function makeMap(...keyValuePairs) {\n  const result = {};\n  for (let i = 0; i < keyValuePairs.length; i += 2) {\n    result[keyValuePairs[i]] = keyValuePairs[i + 1];\n  }\n  return result;\n};\n","const Mixin = {};\n\n  /**\n   * @param  {Object} target The class to augment\n   * @param  {Object} add The class to mix in.\n   * @returns {Object} The augmented class\n   */\nMixin.mixin = function mixin(target, add) {\n  const targetProto = target.prototype;\n  const addProto = add.prototype;\n  Object.getOwnPropertyNames(addProto).forEach((name) => {\n    if (name === 'constructor') return;\n    Object.defineProperty(targetProto, name, Object.getOwnPropertyDescriptor(addProto, name));\n  });\n  return target;\n};\n\nmodule.exports.Mixin = Mixin;\n","const { Lazy } = require('./lazy');\n\nconst { lazyProperty } = Lazy;\n\nfunction traversePath(commonSource, keySource, pathArr) {\n  return pathArr.reduce((source, value) => {\n    if (typeof value === 'string') {\n      return source[value];\n    }\n    return value;\n  }, keySource);\n}\n\n/**\n * @classdesc\n * Deferred resolution for imports. A heavyweight method of breaking circular dependencies.\n * Each specified key (see below) is resolved once by a function that lazily evaluates a\n * path.\n * <pre>\n * const resolved = new Resolver({\n *  foo: [FooLib, 'fooContainer'],        // Resolves foo from FooLib.fooContainer.foo lazily\n *  bar: ['foo'],                         // Resolves bar from previously defined foo lazily\n *  'baz,quux': [FooLib, 'bazsAndQuuxes'] // baz = FooLib.bazsAndQuuxes.baz,\n *                                        // quux = FooLib.bazsAndQuuxes.quux\n * });\n * </pre>\n * In most cases this is equivalent to using FooLib.fooContainer.foo, et cetera, directly.\n * Prefer that approach unless the dependencies are deeply hierarchical. Prefer the Resolver\n * when one-time evaluation and aliasing a path makes the code more DRY and readable.\n * @private\n */\nclass Resolver {\n  constructor(options, source) {\n    // For every key...\n    Object.keys(options).forEach((compoundKey) => {\n      // Split out key names if multiple were provided\n      compoundKey.split(',').map(k => k.trim()).forEach((key) => {\n        // Build a path array. The key name is the implicit last element.\n        const rawPath = options[compoundKey];\n        const path = typeof rawPath === 'string' ? rawPath.split('.') : rawPath;\n        const pathArr = (Array.isArray(path) ? path : [path]).concat(key);\n        // Create a defer for this key.\n        lazyProperty(this, key, () => traversePath(source, this, pathArr));\n      });\n    });\n  }\n\n  static resolve(options, source) {\n    return new Resolver(options, source);\n  }\n}\n\n\nmodule.exports.Resolver = Resolver;\n","/* eslint-disable no-restricted-syntax */\n\nfunction isSuperset(set, subset) {\n  return Array.from(subset).every(elem => set.has(elem));\n}\n\nfunction inplaceUnion(setA, setB) {\n  setB.forEach((elem) => {\n    setA.add(elem);\n  });\n  return setA;\n}\n\nfunction union(setA, setB) {\n  return inplaceUnion(new Set(setA), setB);\n}\n\nfunction inplaceIntersection(setA, setB) {\n  setA.forEach((elem) => {\n    if (!setB.has(elem)) {\n      setA.delete(elem);\n    }\n  });\n  return setA;\n}\n\nfunction intersection(setA, setB) {\n  return new Set(Array.from(setA).filter(elem => setB.has(elem)));\n}\n\nfunction inplaceDifference(setA, setB) {\n  setB.forEach((elem) => {\n    setA.delete(elem);\n  });\n  return setA;\n}\n\nfunction difference(setA, setB) {\n  return new Set(Array.from(setA).filter(elem => !setB.has(elem)));\n}\n\nmodule.exports = {\n  SetOperations: {\n    inplaceDifference,\n    inplaceIntersection,\n    inplaceUnion,\n    isSuperset,\n    difference,\n    intersection,\n    union,\n  },\n}\n;\n","const { EventEmitter } = require('./lib/event-emitter');\nconst { Timer } = require('./lib/timer');\n\nmodule.exports = {\n  EventEmitter,\n  Timer,\n};\n","const NodeEventEmitter = require('events').EventEmitter;\nconst { ArrayUtils } = require('solclient-util');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_WARN } = require('solclient-log');\n\nconst { flatten, includes } = ArrayUtils;\nconst NODE_DEFAULT_EVENTS = ['error', 'newListener', 'removeListener'];\nconst BLACKLIST_DIRECT = ['newListener', 'removeListener'];\n\nfunction buildFilter(emits) {\n  if (typeof emits === 'function') return k => includes(NODE_DEFAULT_EVENTS, k) || emits(k);\n  if (!Array.isArray(emits)) return null;\n  const emitSet = new Set(flatten(emits));\n  NODE_DEFAULT_EVENTS.forEach(el => emitSet.add(el));\n  const emitArray = Array.from(emitSet);\n  return k => includes(emitArray, k);\n}\n\nconst DISABLED_ACTIONS = {\n  ignore() {},\n  fail() {\n    throw new Error('Emitter disabled');\n  },\n};\n\nclass EventEmitter extends NodeEventEmitter {\n  /**\n   * Creates an instance of EventEmitter.\n   *\n   * An EventEmitter is an object that periodically emits events that cause function objects, known\n   * as listeners, to be called. It exposes functions to attach passed functions to named events.\n   *\n   * Typically, event names are camel-cased strings, but any valid JavaScript property key can be\n   * used.\n   *\n   * @param {?Object} options Options for the emitter\n   * @param {String} [options.direct] An event that is to be directly dispatched when possible.\n   *  Direct dispatch is a performance optimization that minimizes EventEmitter overhead. Direct\n   *  dispatch skips the safe error handling path; use _formatErrorEvent if required.\n   * @param {Array.<string>} [options.emits] Valid event names. If specified, listeners for other\n   *  events are rejected. Array can be nested, e.g. `['foo', ['bar1', 'bar2']]`\n   * @param {Boolean} [options.unsafe] Determines whether dispatch is less exception-safe.\n   *  * When `false`, if an event listener throws an error, the error is thrown all the way back\n   *    to the emitting stack frame. This makes it the emitter's responsibility to catch exceptions\n   *    in listeners. This avoids a try-catch frame and may be more performant.\n   *  * When `true`, if an event listener throws an error, and an `error` listener exists, the\n   *    exception is dispatched to that listener wrapped in an {@link solace.OperationError},\n   *    `subcode={@link solace.ErrorSubcode.CALLBACK_ERROR}`. The originating event and the error\n   *    thrown by the listener are available on `event` and `error` fields respectively.\n   *\n   *  In all cases, throwing an exception in a listener prevents the event being received by\n   *  later listeners.\n   *\n   *  This option does not affect any event selected for `options.direct`, which always uses\n   *  unsafe dispatch.\n   *\n   * @memberof solace\n   * @extends {EventEmitter}\n   * @private\n   */\n  constructor(options) {\n    super();\n    const { direct, emits, unsafe, formatEventName } = options || {};\n    this.formatEventName = formatEventName || (name => name);\n\n    // Direct mode path:\n    //  emit --> (direct emit || bareEmit).\n    const bareEmit = this.emit.bind(this);\n    this._installDirectFilter(direct, bareEmit);\n\n    // Indirect mode path:\n    //  verifier -> error handlers -> emit --> bareEmit\n    this._installErrorHandlers(unsafe);\n    this._installEmitVerifier();\n\n    this._listenerVerificationFilter = buildFilter(emits);\n    this._emits = emits;\n  }\n\n  _installDirectFilter(direct, bareEmit) {\n    if (!direct) return;\n      // Direct mode class instance modifications\n\n    if (includes(BLACKLIST_DIRECT, direct)) {\n      throw new OperationError(\n        `Cannot configure listener collection events [${BLACKLIST_DIRECT.join(', ')}] as direct`,\n        ErrorSubcode.INTERNAL_ERROR);\n    }\n\n    // The default direct emitter is the base emitter. Skip any overrides we installed.\n    this._defaultEmitDirect = (...args) => bareEmit(direct, ...args);\n\n    // Initally not direct for 0 listeners\n    this.emitDirect = this._defaultEmitDirect;\n    this._directEventName = direct;\n\n    this.on = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.on(eventName, listener);\n      this._setEmitDirect(eventName, true, listener);\n      return ret;\n    };\n\n    this.addListener = (eventName, listener) => this.on(eventName, listener);\n\n    this.once = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.once(eventName, listener);\n      this._setEmitDirect(eventName, false);\n      return ret;\n    };\n\n    this.prependListener = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.prependListener(eventName, listener);\n      this._setEmitDirect(eventName, true, listener);\n      return ret;\n    };\n\n    this.prependOnceListener = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.prependOnceListener(eventName, listener);\n      this._setEmitDirect(eventName, false);\n      return ret;\n    };\n\n    this.removeAllListeners = (eventName) => {\n      const ret = super.removeAllListeners(eventName);\n      if ((eventName === this._directEventName) || (eventName === undefined)) {\n        this.emitDirect = this._defaultEmitDirect;\n      }\n      return ret;\n    };\n\n    this.removeListener = (eventName, listener) => {\n      const ret = super.removeListener(eventName, listener);\n      if ((eventName === this._directEventName) && (this.listenerCount(eventName) === 0)) {\n        this.emitDirect = this._defaultEmitDirect;\n      }\n      return ret;\n    };\n\n    this.directListenerCount = () => this.listenerCount(this._directEventName);\n\n    this.setOnFirstDirectListener = (firstDirect) => {\n      this._onFirstDirectListener = firstDirect;\n    };\n  }\n\n  _setEmitDirect(eventName, onListener, listener) {\n    if (eventName !== this._directEventName) {\n      return;\n    }\n\n    if (onListener && (this.directListenerCount() === 1)) {\n      this.emitDirect = listener;\n    } else {\n      this.emitDirect = this._defaultEmitDirect;\n    }\n\n    if ((this.directListenerCount() === 1) && (this._onFirstDirectListener !== undefined)) {\n      this._onFirstDirectListener();\n    }\n  }\n\n  _verifyListenerEvent(event) {\n    if (!this._listenerVerificationFilter) return;\n\n    if (event === undefined || event === null) {\n      this.throwInternal(\n          new OperationError(`Emitter rejects listener for no-name event: ${event}`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n    }\n    if (!this._listenerVerificationFilter(event)) {\n      this.throwInternal(\n        new OperationError(`Emitter rejects listeners for ${event}, emits ${this._emits}`,\n                            ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n    }\n  }\n\n  _installEmitVerifier() {\n    if (BUILD_ENV.MODE_DEBUG) {\n      // Debug mode: always add assert for empty event name\n      const emitBase = this.emit.bind(this);\n      this.emit = (name, ...args) => {\n        if (name === undefined || name === null) {\n          this.throwInternal(new OperationError(`Emitter rejects no-name event: ${name}`));\n        }\n        emitBase(name, ...args);\n      };\n    }\n  }\n\n  _installErrorHandlers(unsafe) {\n    if (unsafe) {\n      // If unsafe, there's no try/catch/emit so throwInternal just throws\n      this.throwInternal = (err) => { throw err; };\n      return;\n    }\n\n    // Install try/catch/emit-as-event if not unsafe mode.\n    // Introduces throwInternal, which sets the _internalError flag restore\n    // orignal throw-to-emitter functionality in case of internal error\n\n    const emitBase = this.emit.bind(this);\n\n    this.throwInternal = function throwInternal(err) {\n      this._internalError = true;\n      throw err;\n    };\n\n    this.emit = (name, ...args) => {\n      try {\n        emitBase(name, ...args);\n      } catch (ex) {\n        if (this._internalError) {\n          this._internalError = undefined;\n          throw ex; // rethrow\n        }\n\n        const err = this.formatErrorEvent(ex, name, ...args);\n        try {\n          LOG_WARN(`Listener for '${err.info.event.formattedName}' threw exception, dispatching to 'error'`);\n          emitBase('error', err);\n        } catch (innerEx) {\n          LOG_WARN(\"Listener for 'error' threw exception:\", innerEx, '\\nOriginal exception:', ex);\n        }\n      }\n    };\n  }\n\n  get isDirect() {\n    return this.emitDirect && (this.emitDirect !== this._defaultEmitDirect);\n  }\n\n  formatErrorEvent(ex, name, ...args) {\n    const formattedName = this.formatEventName(name);\n    return Object.assign(new OperationError(\n      `Unhandled error in event handler for '${formattedName}'`,\n      ErrorSubcode.CALLBACK_ERROR,\n      `On event: ${[name, ...args]} ${ex}`\n    ), {\n      stack: ex.stack,\n      info:  {\n        event: { name, formattedName, args },\n        error: ex,\n      },\n    });\n  }\n\n  disableEmitter() {\n    this._defaultEmitDirect = DISABLED_ACTIONS.ignore;\n    // If this is a direct-enabled emitter, this will also cause emitDirect to be set to\n    // _defaultEmitDirect, which is now DISALBED_ACTIONS.ignore.\n    this.removeAllListeners();\n    this.emit = DISABLED_ACTIONS.ignore;\n    // Freeze listeners by first disabling remove, then add.\n    this.addListener('removeListener', DISABLED_ACTIONS.fail);\n    this.addListener('newListener', DISABLED_ACTIONS.fail);\n  }\n\n}\n\nmodule.exports.EventEmitter = EventEmitter;\n","/**\n * @private\n */\nclass Timer {\n  /**\n   * Creates an instance of Timer.\n   * @param {function} cancel The action to perform on cancellation\n   */\n  constructor(cancel) {\n    this.cancel = () => {\n      this.cancel = () => {}; // change to no-op\n      cancel();\n    };\n  }\n\n  /**\n   * @static\n   * @param {Number} interval The interval for the timer, in milliseconds.\n   * @param {function} onInterval The function to invoke on expiration.\n   * @param {any} [args] Any arguments to pass to the onExpire callback.\n   * @returns {Timer} A new timer object.\n   */\n  static newInterval(interval, onInterval, ...args) {\n    const timerRef = setInterval(onInterval, interval, ...args);\n    return new Timer(() => clearInterval(timerRef));\n  }\n\n  /**\n   * @static\n   * @param {Number} timeout The timeout for the timer, in milliseconds.\n   * @param {function} onExpire The function to invoke on expiration.\n   * @param {any} [args] Any arguments to pass to the onExpire callback.\n   * @returns {Timer} A new timer object.\n   */\n  static newTimeout(timeout, onExpire, ...args) {\n    const timerRef = setTimeout(onExpire, timeout, ...args);\n    return new Timer(() => clearTimeout(timerRef));\n  }\n}\n\nmodule.exports.Timer = Timer;\n","const { FactoryProfile, SolclientFactoryProfiles } = require('./lib/solclient-factory-profiles');\nconst { ProfileBinding } = require('./lib/profile-binding');\nconst { SolclientFactory } = require('./lib/solclient-factory');\nconst { SolclientFactoryProperties } = require('./lib/solclient-factory-properties');\n\nmodule.exports.FactoryProfile = FactoryProfile;\nmodule.exports.ProfileBinding = ProfileBinding;\nmodule.exports.SolclientFactoryProfiles = SolclientFactoryProfiles;\nmodule.exports.SolclientFactoryProperties = SolclientFactoryProperties;\nmodule.exports.SolclientFactory = SolclientFactory;\n\n","const { OperationError } = require('solclient-error');\n\nlet binding = null;\n\nconst ProfileBinding = {\n  get value() {\n    if (binding === null) {\n      throw new OperationError('Profile binding not initialized. Call solace.SolclientFactory.init');\n    }\n    return binding;\n  },\n  set value(value) {\n    // private, so we'll allow it for testing\n    binding = value;\n  },\n};\n\nmodule.exports.ProfileBinding = ProfileBinding;\n","// Preferred configuration for the profile system:\n\n// End user:\n//  opaque profiles, property-style access\n// API implementation:\n//  inherited properties, property-style access\n// A root, forward compatible profile\n// A legacy, backwards compatible profile\n// Feature/milestone profiles that inherit from one of these two configurations\n\n// The lowest-friction way of doing this is using prototype inheritance.\n// Also considered:\n//  getProperty() with child->parent pointers -- mixes string\n//    and property access\n//  ES6 proxies -- not universal and not shimmable\n\n// Necessary to abuse prototype inheritance for static property inheritance:\n/* eslint-disable class-methods-use-this */\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.SolclientFactoryProfiles}.</b>\n *\n * A factory profile determines the default functionality of the API. Profiles are predefined\n * combinations of capabilities that represent a mutually-consistent, valid configuration state\n * for API features.\n *\n * The factory may be initialized exactly once, with a single factory profile.\n *\n * Changing which factory profile is used by {@link solace.SolclientFactory.init} may result in\n * different default property values, validation, function signatures and implementations.\n *\n * Changing the factory profile will not change relationships between API methods. That is,\n * assuming all properties and arguments are explicitly set, an application may call the\n * API with the same values as before to cause the same result, unless explicitly noted.\n *\n * If no profile is specified, the default will provide equivalent functionality to\n * SolclientJS version 7.x. New applications are encouraged to use the\n * {@link solace.SolclientFactoryProfiles.version10_5} profile for the best compatibility with\n * other APIs (excluding 7.x JavaScript APIs).\n *\n * @memberof solace\n * @private\n */\nclass FactoryProfile {\n  /**\n   * Returns whether Guaranteed Messaging is enabled for the API. When `true`,\n   * AD publishing capability is enabled by default.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get guaranteedMessagingEnabled() { return undefined; }\n\n  /**\n   * Returns whether the API will allow Comet (long-held HTTP request) transports\n   * to be used. If this is `true`, transport protocols may fall back to HTTP\n   * if a connection cannot be established with a preferred protocol.\n   *\n   *  * NOTE: Guaranteed Messaging cannot be enabled if Comet is enabled.\n   *\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  get cometEnabled() { return undefined; }\n\n  /**\n   * Returns whether the API performs UTF-8 encoding on user strings where the SMF\n   * spec requires it.\n   *  * When this is `true`, the API will correctly interoperate with other Solace APIs that send\n   *    UTF-8 encoded topics.\n   *  * When this is `false`, the API will interoperate correctly with 7.x and earlier JavaScript\n   *    APIs, that used an arbitrary encoding for such strings.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() { return undefined; }\n\n  /**\n   * Returns whether the API returns BYTEARRAY SDT values as Strings.\n   *\n   * In older versions (before 10.5) of the API,\n   * an SDTField with type BYTEARRAY returned a String from getValue().\n   * Newer versions (since 10.5),\n   * getValue() for the same type returns an actual ByteArray, unless this property is `true`.\n   *\n   *  * When this is `true`, SDTField.getValue() returns a String for a BYTEARRAY.\n   *  * When this is `false`, SDTField.getValue() returns a ByteArray for a BYTEARRAY.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return undefined; }\n\n  [util_inspect_custom]() {\n    return {\n      'guaranteedMessagingEnabled': this.guaranteedMessagingEnabled,\n      'cometEnabled':               this.cometEnabled,\n      'topicUtf8Encode':            this.topicUtf8Encode,\n      'byteArrayAsString':          this.byteArrayAsString,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\n/**\n * The Version 7 profile for SolclientJS. This profile sets factory and session default values\n * that provide SolclientJS 7.x behaviour, and interoperability with SolclientJS 7.x clients.\n *\n * @namespace\n * @type {solace.FactoryProfile}\n * @name version7\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version7Profile extends FactoryProfile {\n  /**\n   * Returns `false`: Guaranteed Messaging is disabled by default to maintain availability of Comet\n   * HTTP transports by default.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API. Note that version 7.x SolclientJS\n   * clients cannot send or receive any messages using Guaranteed Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() { return !!BUILD_ENV.TARGET_NODE; }\n\n  /**\n   * Returns true: Comet HTTP transports are enabled for the API. The API user may, by default,\n   * select Comet HTTP transport protocol, and the API may fall back to these protocols during a\n   * connection attempt.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() { return !!BUILD_ENV.TARGET_BROWSER; }\n  /**\n   * Returns false: topic UTF-8 encoding is disabled for the API. The network encoding of topics is\n   * compatible with other SolclientJS 7.x clients, and may not be interoperable with other\n   * Solace Messaging APIs.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() { return false; }\n\n  /**\n   * Returns true: getValue() of SDTFields of type BYTEARRAY return a string,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version7.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return true; }\n}\nconst legacyInstance = new Version7Profile();\n\n/**\n * The Version 10 profile for SolclientJS. This profile sets factory and session default values\n * that provide the full capability of the API as of version 10.0, including interoperability with\n * other Solace Messaging products.\n *\n * @namespace\n * @name version10\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version10Profile extends FactoryProfile {\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API,\n   * with the result that {@link solace.MessagePublisherProperties#enabled} is `true` by default\n   * on platforms that support Guaranteed Messaging publishing.\n   *\n   * Where the {@link solace.TransportType.WS_BINARY} transport is unavailable,\n   * {@link solace.MessagePublisherProperties#enabled} is `false` by\n   * default.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled by default for the API.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() {\n    return true;\n  }\n  /**\n   * Returns `false`: Comet HTTP transports are disabled for the API. The API will not select or\n   * fall back to HTTP Comet transport protocols, which are mutually exclusive of Guaranteed\n   * Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() {\n    return false;\n  }\n  /**\n   * Returns `true`: the API will encode topics for interoperability with other Solace Messaging\n   * products. SolclientJS 7.x clients may fail to correctly decode when topic names that include\n   * multi-byte UTF-8 code points.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() {\n    return true;\n  }\n\n  /**\n   * Returns true: getValue() of SDTFields of type BYTEARRAY return a string,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version10.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return true; }\n}\n\nconst v10Instance = new Version10Profile();\n\n/**\n * The Version 10.5 profile for SolclientJS. This profile sets factory and session default values\n * that provide the full capability of the API as of version 10.5, including interoperability with\n * other Solace Messaging products.\n *\n * @namespace\n * @name version10_5\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version105Profile extends FactoryProfile {\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API,\n   * with the result that {@link solace.MessagePublisherProperties#enabled} is `true` by default\n   * on platforms that support Guaranteed Messaging publishing.\n   *\n   * Where the {@link solace.TransportType.WS_BINARY} transport is unavailable,\n   * {@link solace.MessagePublisherProperties#enabled} is `false` by\n   * default.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled by default for the API.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() {\n    return true;\n  }\n  /**\n   * Returns `false`: Comet HTTP transports are disabled for the API. The API will not select or\n   * fall back to HTTP Comet transport protocols, which are mutually exclusive of Guaranteed\n   * Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() {\n    return false;\n  }\n  /**\n   * Returns `true`: the API will encode topics for interoperability with other Solace Messaging\n   * products. SolclientJS 7.x clients may fail to correctly decode when topic names that include\n   * multi-byte UTF-8 code points.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() {\n    return true;\n  }\n\n  /**\n   * Returns false: getValue() of SDTFields of type BYTEARRAY return a Uint8Array,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return false; }\n}\n\n\nconst forwardInstance = new Version105Profile();\n\n/**\n * The collection of predefined factory profiles available for application use.\n *\n * See each member for a description of its configuration.\n *\n * @namespace\n * @memberof solace\n * @FactoryProfile\n */\nconst SolclientFactoryProfiles = {\n  _legacy:  legacyInstance,\n  _v10:     v10Instance,\n  _forward: forwardInstance,\n  _default: legacyInstance,\n\n  /**\n   * The version 7 profile for browsers. {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * The version 7 profile configures API defaults for interoperability with the\n   * SolclientJS 7.x API, and applications that use it.\n   *\n   * {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * @name version7\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  /**\n   * The version 7 profile for Node.JS. {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * A version 7 profile configures API defaults for interoperability with the\n   * SolclientJS 7.x API, and applications that use it.\n   *\n   * {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * @name version7\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  version7: legacyInstance,\n\n  /**\n   * The version 10 profile for Node.JS.\n   *\n   * The version 10 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   * It provides a backwards-compatibility mode for existing applications\n   * expecting SDTField.getValue() to return a string for BYTEARRAYs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10}\n   *\n   * @name version10\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  /**\n   * The version 10 profile for browsers.\n   *\n   * The version 10 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   * It provides a backwards-compatibility mode for existing applications\n   * expecting SDTField.getValue() to return a string for BYTEARRAYs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10}\n   *\n   * @name version10\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  version10: v10Instance,\n\n  /**\n   * The version 10.5 profile for browsers.\n   *\n   * The version 10.5 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10_5}\n   *\n   * @name version10_5\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  /**\n   * The version 10.5 profile for Node.JS.\n   *\n   * The version 10.5 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10_5}\n   *\n   * @name version10_5\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  version10_5: forwardInstance,\n\n  [util_inspect_custom]() {\n    return {\n      'version7':    this.version7,\n      'version10':   this.version10,\n      'version10_5': this.version10_5,\n    };\n  },\n\n  toString() {\n    return util_inspect(this);\n  },\n};\n\nmodule.exports.FactoryProfile = FactoryProfile;\nmodule.exports.SolclientFactoryProfiles = SolclientFactoryProfiles;\n","const { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\n\nfunction getDefaultLogLevel() {\n  // break dependency loop\n  // eslint-disable-next-line global-require\n  const { LogLevel } = require('solclient-log');\n  return LogLevel.INFO;\n}\n\n/**\n * @classdesc\n * Properties used during initialization of {@link solace.SolclientFactory}.\n *\n * @memberof solace\n */\nclass SolclientFactoryProperties extends APIProperties {\n  /**\n   * Creates an instance of SolclientFactoryProperties.\n   *\n   * @param {Object} [options] The property names and values to apply to this instance\n   * @param {solace.LogLevel} [options.logLevel]  logLevel (default={@link solace.LogLevel.INFO}\n   * @param {solace.LogImpl} [options.logger]     log implementation (default=NULL)\n   * @param {solace.SolclientFactoryProfiles} [options.profile] Javascript profile\n   *  (default={@link solace.SolclientFactoryProfiles.version7})\n   * @memberOf SolclientFactoryProperties\n   */\n  constructor(options) {\n    super({\n      logLevel: getDefaultLogLevel(),\n      logger:   null,\n    }, options);\n  }\n\n  /**\n   * The factory profile to use. The following factory profiles are available:\n   * * {@link solace.SolclientFactoryProfiles.version7}, a backwards-compatible profile\n   *      for existing solClientJS 7.x applications\n   * * {@link solace.SolclientFactoryProfiles.version10}, the recommended profile\n   *      for new applications\n   *\n   * @type {solace.SolclientFactoryProfiles}\n   */\n  get profile() {\n    return this._profile;\n  }\n  set profile(profile) {\n    this._profile = profile;\n  }\n\n  /**\n   * The logging level to use for filtering log events. Messages with a level of lesser importance\n   * than this will be filtered out and not logged.\n   * @type {solace.LogLevel}\n   */\n  get logLevel() {\n    return Check.number(this._logLevel) ? this._logLevel : getDefaultLogLevel();\n  }\n  set logLevel(val) {\n    this._logLevel = val;\n  }\n\n  /**\n   * The logging implementation to use. In the debug API, the log implementation will be called\n   * for every log statement not filtered out by the log level. If no implementation is supplied,\n   * the default implementation will be used, which logs to the global console object.\n   * @type {solace.LogImpl}\n   */\n  get logger() {\n    return this._logger || null;\n  }\n  set logger(val) {\n    this._logger = val;\n  }\n\n  [util_inspect_custom]() {\n    // break dependency loop\n    // eslint-disable-next-line global-require\n    const { LogLevel } = require('solclient-log');\n    return {\n      'logLevel': LogLevel.describe(this._logLevel),\n      'profile':  this._profile,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.SolclientFactoryProperties = SolclientFactoryProperties;\n","const {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst { FactoryProfile, SolclientFactoryProfiles } = require('./solclient-factory-profiles');\nconst { Parameter } = require('solclient-validate');\nconst { ProfileBinding } = require('./profile-binding');\nconst { SolclientFactoryProperties } = require('./solclient-factory-properties');\n\nconst factoryState = {\n  initializeCount: 0,\n  initializers:    [],\n};\n/**\n * @global\n * @name solClientJS\n * @description\n * <b>solClientJS</b> is a full functioned Solace Messaging API written entirely in JavaScript.\n * Applications using the <i>solClientJS</i> API can access all the features of a\n * Solace Message Router.\n *\n * The API is intended for use by applications written in JavaScript, targetting\n * either <b>NODE</b> or a traditional web browser.\n *\n * All classes, objects, methods of the API are encapsulated in the {@link solace} namespace.\n * The starting point for all applications is {@link solace.SolclientFactory}. This factory object\n * generates the {@link solace.Session} for connecting to the Solace Message Router.\n * {@link solace.SolclientFactory} also generates the {@link solace.Message} object\n * which enncapsulates the messages and {@link solace.Destination} the application will use\n * to send and receive data.\n * @summary The Solace Message Router Messaging API for Javascript.\n * @importTypeDefinitions import {EventEmitter} from 'events';\n * @importTypeDefinitions import {Long} from 'long';\n */\n\n/**\n * A singleton used as the main factory for the messaging APIs. The very first operation by\n * any application must be to initialize the API:\n * * {@link solace.SolclientFactory.init}\n *\n * <i>SolclientFactory</i> provides methods to construct:\n * * {@link solace.Session}\n * * {@link solace.Message}\n * * {@link solace.Destination}\n *\n * Additionally <i>SolclientFactory</i> manages the\n * logging level in the API.\n * @namespace\n * @public\n * @memberof solace\n */\nconst SolclientFactory = {\n\n  /**\n   * Adds a function to be called on factory initialization\n   * @param {function(factoryProps, factoryState)} func initializer function to be called\n   * @internal\n   */\n  addInitializer(func) {\n    factoryState.initializers.push(func);\n  },\n\n  /**\n   * @param {function} func function to wrap\n   * @returns {function} new factory method\n   * @internal\n   */\n  createFactory(func) {\n    return function factoryMethod(...args) {\n      if (factoryState.initializeCount === 0) {\n        throw new OperationError('SolclientFactory not initialized', ErrorSubcode.INVALID_OPERATION);\n      }\n      return func(...args);\n    };\n  },\n\n  /**\n   * Initialize global properties. This function must be called before any other API call is made.\n   *\n   * Note: After the first call to this method, subsequent calls have no effect.\n   *\n   * @param {solace.SolclientFactoryProperties} [factoryProps] The initialization properties for\n   *  the factory, if required.\n   * @param {solace.LogImpl} [factoryProps.logger] A logging implementation\n   * @param {solace.LogLevel}[factoryProps.logLevel] The logging level to use\n   *  for filtering log events.\n   * @param {solace.SolclientFactoryProfiles}\n   *  [factoryProps.profile=solace.SolclientFactoryProfiles.version7]\n   *     The factory profile. This class cannot be created by an API user; choose one of the static\n   *     instances from {@link solace.SolclientFactoryProfiles}.\n   * @throws {solace.OperationError} Invalid logger implementation\n   * @returns {solace.SolclientFactory} For method chaining\n   */\n  init(factoryProps) {\n    if (factoryState.initializeCount > 0) {\n      return this;\n    }\n\n    const props = new SolclientFactoryProperties(factoryProps);\n    const profile = factoryProps && factoryProps.profile || SolclientFactoryProfiles.version7;\n    Parameter.isInstanceOf('factoryProps.profile', profile, FactoryProfile);\n    ProfileBinding.value = profile;\n\n    factoryState.initializers.forEach((initializer) => {\n      initializer.call(this, props, factoryState);\n    });\n    ++factoryState.initializeCount;\n\n    if ((factoryProps !== undefined) && (factoryProps !== null)) {\n      // Factory should not depend on other packages at file scope\n      // eslint-disable-next-line global-require\n      const { LOG_DEBUG } = require('solclient-log');\n      LOG_DEBUG('Factory properties:\\n', factoryProps);\n    }\n    return this;\n  },\n\n  /**\n   * @private\n   */\n  reset() {\n    factoryState.initializeCount = 0;\n  },\n\n\n  /**\n   * @returns {Number} Count of factory initializations.\n   *    Nonzero means cannot be initialized again.\n   * @internal\n   */\n  _getInitializeCount() {\n    return factoryState.initializeCount;\n  },\n\n  /**\n   * @private\n   * @name solace.SolclientFactory.profiles\n   * @type {solace.SolclientFactoryProfiles}\n   * @readonly\n   * @description The collection of {@link solace.FactoryProfile}. See a description of\n   * each in {@link solace.SolclientFactoryProfiles}.\n   */\n  get profiles() {\n    return SolclientFactoryProfiles;\n  },\n};\n\nmodule.exports.SolclientFactory = SolclientFactory;\n","const { Flow } = require('./lib/flow');\nconst { FlowOperation } = require('./lib/flow-operation');\nconst { PrivateFlowEventName } = require('./lib/private-flow-event-names');\n\nmodule.exports.Flow = Flow;\nmodule.exports.FlowOperation = FlowOperation;\nmodule.exports.PrivateFlowEventName = PrivateFlowEventName;\n","const { Enum } = require('solclient-eskit');\n\nconst FlowOperation = {\n  CONNECT:         'FlowOperation_CONNECT',\n  DISCONNECT:      'FlowOperation_DISCONNECT',\n  START:           'FlowOperation_START',\n  STOP:            'FlowOperation_STOP',\n  DISPOSE:         'FlowOperation_DESTROY',\n  GET_STATS:       'FlowOperation_GET_STATS',\n  RESET_STATS:     'FlowOperation_RESET_STATS',\n  GET_PROPERTIES:  'FlowOperation_GET_PROPERTIES',\n  GET_DESTINATION: 'FlowOperation_GET_DESTINATION',\n};\n\nmodule.exports.FlowOperation = Enum.new(FlowOperation);\n","const {\n  ErrorSubcode,\n  NotImplementedError,\n  OperationError,\n} = require('solclient-error');\nconst { EventEmitter } = require('solclient-events');\nconst { FlowOperation } = require('./flow-operation');\nconst { LogFormatter } = require('solclient-log');\nconst { PrivateFlowEventName } = require('./private-flow-event-names');\nconst { Stats } = require('solclient-stats');\n\n// Unless flow is disposed, these operations are always allowed\nconst ALWAYS_OPS = [\n  FlowOperation.DISPOSE,\n  FlowOperation.GET_STATS,\n  FlowOperation.GET_PROPERTIES,\n  FlowOperation.RESET_STATS,\n];\n\n\n/**\n * @classdesc Flow\n * * <b>This class is not exposed for construction by API users.</b>\n * A Flow is an abstract base class. A Flow represents a guaranteed message connection to the\n * Solace Message Router. There may be many Guaranteed Message\n * Consumers on a {@link solace.Session}, each\n * instantiated as a {@link solace.MessageConsumer}.\n * @memberof solace\n * @extends {solace.EventEmitter}\n * @private\n */\nclass Flow extends EventEmitter {\n\n  /**\n   * Creates a Flow instance.\n   * @constructor Flow\n   * @param {APIProperties} flowProperties The properties object for this flow.\n   * @param {Object} sessionInterfaceFactory Function that creates session interface methods\n   * @param {Object} [emitterOptions] The options to pass to the EventEmitter constructor.\n   * @private\n   */\n  constructor(flowProperties, sessionInterfaceFactory, emitterOptions) {\n    const emitterOptionsFull = Object.assign({}, emitterOptions);\n    emitterOptionsFull.emits = (emitterOptionsFull.emits || []).concat(\n      PrivateFlowEventName.values\n    );\n    super(emitterOptionsFull);\n    const sessionInterface = sessionInterfaceFactory(this);\n    const self = this;\n    this.logger = new LogFormatter((...args) =>\n      [`[session=${sessionInterface.sessionIdHex}]`, `[flow=${self.flowIdDec}]`, ...args]);\n    this.log = this.logger.wrap(this.log, this);\n    // dispose() was called on this flow.\n    // It is not always executed immediately, leaving time for the auto-ack.\n    this._disposing = false;\n    // The flow truly was destroyed, no more delays.\n    this._disposed = false;\n    this._userDisconnected = true;\n    this._properties = flowProperties;\n    this._sessionInterface = sessionInterface;\n    this._stats = new Stats(sessionInterface);\n    this._privateEventEmitter = new EventEmitter(emitterOptionsFull);\n  }\n\n  // Private event emitter functions, hidden from the public interface.\n  _emit(type, ...args) {\n    this._privateEventEmitter.emit(type, ...args);\n    this.emit(type, ...args);\n  }\n  _on(type, listener) {\n    this._privateEventEmitter.on(type, listener);\n  }\n  _once(type, listener) {\n    this._privateEventEmitter.once(type, listener);\n  }\n  _removeListener(type, listener) {\n    this._privateEventEmitter.removeListener(type, listener);\n  }\n\n  /**\n   * Clears all statistics for this Guaranteed Message Connection. All previous Guaranteed\n   * Message Connection statistics are lost\n   * when this is called.\n   * @throws {solace.OperationError}\n   *  * if the Message Consumer is disposed. subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  clearStats() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Clearing stats');\n    this._operationCheck(FlowOperation.RESET_STATS);\n    this._stats.resetStats();\n  }\n\n  /**\n   * Establish a Guaranteed Messaging connection.\n   * The Messge Consumer may immediately begin emitting events. The application is expected to\n   * add listeners for events on this Message Consumer before calling this method.\n   */\n  connect() {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Connecting');\n    this.userDisconnected = false;\n    this._operationCheck(FlowOperation.CONNECT);\n  }\n\n  /**\n   * Disposes the Guaranteed Message connection, removing all listeners and releasing references.\n   */\n  dispose() {\n    const { LOG_TRACE, LOG_DEBUG } = this.logger;\n    // The session may dispose the publisher or consumer, so be tolerant of\n    // multiple attempts to do so.\n    if (this._disposed || this._disposing) {\n      LOG_TRACE('Ignoring #dispose on disposed Guaranteed Message connection');\n      return;\n    }\n    LOG_TRACE('Disposing');\n\n    this._operationCheck(FlowOperation.DISPOSE);\n\n    this._disposing = true;\n\n    const terminate = () => {\n      this._disposed = true;\n      this._properties = null;\n      this._userDisconnected = true;\n      this._emit(this.getDisposedEvent());\n      this.disableEmitter();\n      this._privateEventEmitter.disableEmitter();\n      LOG_DEBUG('Disposed');\n    };\n    if (this._fsm._midDispatch) {\n      // weird case, dispose was called by the user from a message callback:\n      // Guard this in a timeout\n      const terminateWithRunningFSM = () => {\n        this._fsm.terminateFsm();\n        terminate();\n      };\n      //setImmediate(() => terminateWithRunningFSM());\n      setTimeout(() => terminateWithRunningFSM(), 0);\n    } else {\n      // normal case:\n      terminate();\n    }\n  }\n\n  /**\n   * Disconnects the Message Consumer in such a way that it can be reconnected.\n   */\n  disconnect() {\n    this._operationCheck(FlowOperation.DISCONNECT);\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Disconnecting');\n    this.userDisconnected = true;\n  }\n\n  /**\n   *\n   * Begins a disconnect that is not user-initiated.\n   *\n   * Must be overridden.\n   *\n   * @private\n   * @memberof Flow\n   */\n  _disconnectSession() {\n    this._operationCheck(FlowOperation.DISCONNECT);\n  }\n\n  /**\n   * Gets the event to be returned when the Consumer or Publisher is disposed.\n   *\n   * Must be overridden.\n   *\n   * @private\n   * @memberof Flow\n   */\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Abstract method');\n  }\n\n  /**\n   * Creates and returns copy of the properties for this object.\n   * @returns {?} The properties object\n   * @internal\n   */\n  getProperties() {\n    this._operationCheck(FlowOperation.GET_PROPERTIES);\n    return this._properties.clone();\n  }\n\n  /**\n   * Returns a statistic for this Guaranteed Message connection.\n   *\n   * @param {solace.StatType} statType The statistic to return.\n   * @returns {Number} The value for the statistic.\n   */\n  getStat(statType) {\n    this._operationCheck(FlowOperation.GET_STATS);\n    return this._stats.getStat(statType);\n  }\n\n  /**\n   * @param {AdMessage} message The message to be handled by this Consumer or Publisher\n   * @private\n   */\n  handleUncorrelatedControlMessage(message) { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Guaranteed Message Connection does not implement a control message handler', message);\n  }\n\n  /**\n   * @param {StatType} statType The stat to increment\n   * @param {Number} [value] The value to add to the statistic.\n   * @private\n   */\n  incStat(statType, value) {\n    this._stats.incStat(statType, value);\n  }\n\n  /**\n   * @param {any} event The event to be handled by this objects's FSM\n   * @private\n   */\n  processFSMEvent(event) {\n    this._fsm.processEvent(event);\n  }\n\n  /**\n   * @returns {String} An inspection of this object's properties\n   * @private\n   */\n  [util_inspect_custom]() {\n    return {\n      'flowId': this.flowIdDec,\n    };\n  }\n\n  /**\n   * @returns {String} A description of this Guaranteed Message Connection\n   */\n  toString() {\n    return this[util_inspect_custom]();\n  }\n\n  /**\n   * @returns {Boolean} Whether this Publisher or Consumer can be connected.\n   * @readonly\n   * @private\n   */\n  get canAck() {\n    return !this.disposed;\n  }\n\n  /**\n   * Returns true if this Guaranteed Message Consumer was disposed.\n   */\n  get disposed() {\n    return this._disposed;\n  }\n\n  get flowIdDec() {\n    return this.flowId || '(N/A)';\n  }\n\n  /**\n   * @returns {Number} The ID for this flow\n   * @readonly\n   * @private\n   */\n  get flowId() { // eslint-disable-line class-methods-use-this\n    return new NotImplementedError('Flow does not implement ID accessor');\n  }\n\n  /**\n   * @returns {solace.Session} The owning session for this MessageConsumer.\n   * @readonly\n   */\n  get session() {\n    return this._session;\n  }\n\n  get userDisconnected() {\n    return this._userDisconnecte;\n  }\n  set userDisconnected(value) {\n    this._userDisconnected = value;\n  }\n\n  /**\n   * @param {FlowOperation} operation The operation to check\n   * @returns {Boolean} `true` if the operation is allowed.\n   * @throws {@link solace.OperationError} if the operation is not allowed.\n   * @private\n   */\n  _operationCheck(operation) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Checking operation ${FlowOperation.describe(operation)}`);\n    if (this._disposed) {\n      throw new OperationError('Operation is invalid for Message Consumer in disposed state',\n                               ErrorSubcode.INVALID_OPERATION);\n    }\n\n    // Any read-only operation is always valid unless the object was disposed\n    // (which purges properties)\n    if (ALWAYS_OPS.some(v => v === operation)) return true;\n\n    if (operation === FlowOperation.DISCONNECT && this._isDisconnected()) {\n      throw new OperationError(\n        'Operation is invalid for Message Consumer in disconnected state',\n        ErrorSubcode.INVALID_OPERATION\n      );\n    }\n\n    return undefined;\n  }\n\n  _isDisconnected() { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Flow#_isDisconnected not implemented');\n  }\n\n}\n\nmodule.exports.Flow = Flow;\n","const { Enum } = require('solclient-eskit');\n\nconst PrivateFlowEventName = {\n  BIND_WAITING: 'PrivateFlowEventName_bindWaiting',\n};\n\nmodule.exports.PrivateFlowEventName = Enum.new(PrivateFlowEventName);\n","/**\n * @module solace/fsm\n */\n\nconst { FsmEvent } = require('./lib/event');\nconst { State } = require('./lib/state');\nconst { StateMachine } = require('./lib/state-machine');\n\nmodule.exports.FsmEvent = FsmEvent;\nmodule.exports.State = State;\nmodule.exports.StateMachine = StateMachine;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\n\n/**\n * @classdesc\n * This object type represents an entryPoint for a particular FSM state.\n *\n * Note this initial implementation isn't particularly efficient, but it is\n * very simple by making use of two state objects (one just inside of and\n * one just outside of) the state the entryPoint belongs to.  If necessary, we\n * could optimize this if we wish.\n * @extends FsmObject\n * @private\n */\nclass EntryPoint extends FsmObject {\n\n  /**\n  * @constructor\n  * @param {Object} spec The object specifier used to implement the named\n  *      parameter idiom.\n  * @param {fsm.State} spec.state The state that the entryPoint belongs\n  *      to.\n  * @param {String} spec.entryPointName The name of the entryPoint.\n  * @param {fsm.StateContext~reactionCallback} spec.func The reaction\n  *      function for the entryPoint, which defines where to transition to\n  *      after state has been entered.\n  */\n  constructor(spec) {\n    super({ name: spec.entryPointName });\n\n    let innerState;\n    this.impl = this.impl || {};\n    // The outer portion of the entryPoint accepts incoming transitions before\n    // entering the entryPoint's state.  Then the entryPoint's state is\n    // entered through the use of the outerEntryPoint's initial transition.\n    this.impl.outerState = new StateLib.State({\n      name:          `${spec.state.getName()} outerEntryPoint: ${spec.entryPointName}`,\n      parentContext: spec.state.getParent(),\n    }).initial(() => spec.state.transitionTo(innerState));\n\n    // The job of the inner portion of the entryPoint is to follow a\n    // transition as specified by the application's reaction function.\n    innerState = new StateLib.State({\n      name:          `${spec.state.getName()} innerEntryPoint: ${spec.entryPointName}`,\n      parentContext: spec.state,\n    }).initial(spec.func);\n  }\n\n  /**\n   * @returns {fsm.State} The destination state for a transition to the\n   *      EntryPoint.\n   */\n  getDestState() {\n    return this.impl.outerState;\n  }\n}\n\nmodule.exports.EntryPoint = EntryPoint;\n","const { FsmObject } = require('./object');\n\nclass FsmEvent extends FsmObject {\n}\n\nmodule.exports.FsmEvent = FsmEvent;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\n\n/**\n * @classdesc\n * This object type represents an exitPoint for a particular FSM state.\n *\n * Note this initial implementation isn't particularly efficient, but it is\n * very simple by making use of two state objects (one just inside of and\n * one just outside of) the state the exitPoint belongs to.  If necessary, we\n * could optimize this if we wish.\n * @private\n */\nclass ExitPoint extends FsmObject {\n\n  /**\n  * @constructor\n  * @param {Object} spec The object specifier used to implement the named\n  *      parameter idiom.\n  * @param {fsm.State} spec.state The state that the exitPoint belongs\n  *      to.\n  * @param {String} spec.exitPointName The name of the exitPoint.\n  * @param {fsm.StateContext~reactionCallback} spec.func The reaction\n  *      function for the exitPoint, which defines where to transition to\n  *      after state has been exited.\n  */\n  constructor(spec) {\n    super({ name: spec.exitPointName });\n\n    let outerState;\n    // The inner portion of the exitPoint accepts incoming transitions before\n    // exiting the exitPoint's state.  Then the exitPoint's state is exited\n    // through the use of the innerExitPoint's initial transition.\n    this.impl.innerState = new StateLib.State({\n      name:          `${spec.state.getName()} innerExitPoint: ${spec.exitPointName}`,\n      parentContext: spec.state,\n    }).initial(() => spec.state.transitionTo(outerState));\n\n        // The job of the outer portion of the exitPoint is to follow a\n        // transition as specified by the application's reaction function.\n    outerState = new StateLib.State({\n      name:          `${spec.state.getName()} outerExitPoint: ${spec.exitPointName}`,\n      parentContext: spec.state.getParent(),\n    }).initial(spec.func);\n  }\n\n  getDestState() {\n    return this.impl.innerState;\n  }\n}\n\nmodule.exports.ExitPoint = ExitPoint;\n","const { OperationError } = require('solclient-error');\n\n/**\n * @classdesc\n * This is a base class for various FSM-related objects.\n * @private\n */\nclass FsmObject {\n\n  /**\n   * @constructor\n   * @param {Object} spec The object specifier used to implement the named\n   *      parameter idiom.\n   * @param {String} spec.name The name of the object.\n   */\n  constructor(spec) {\n    if (!spec) {\n      throw new OperationError('No spec provided');\n    }\n    if (!spec.name) {\n      throw new OperationError('No name provided for spec');\n    }\n    this.impl = {\n      name: spec.name,\n    };\n  }\n\n  /**\n   * @returns {String} A string representation of the object.\n   */\n  toString() {\n    let extraStringInfo = this.getExtraStringInfo();\n    if (extraStringInfo.length > 0) {\n      extraStringInfo = `; ${extraStringInfo}`;\n    }\n    return `{${this.constructor.name}: ${this.getName()}${extraStringInfo}}`;\n  }\n\n  /**\n   * This is overridden by classes wanting to add more data, typically in the\n   * form of 'name: value; name: value'.\n   * @returns {String} Extra string information to be included in the object's\n   *      toString() output.\n   */\n  getExtraStringInfo() { // eslint-disable-line class-methods-use-this\n    return '';\n  }\n\n  /**\n   * @returns {?String} The name passed into the object specifier.\n   */\n  getName() {\n    return this.impl.name;\n  }\n\n}\n\nmodule.exports.FsmObject = FsmObject;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\nconst { Iterator } = require('solclient-eskit');\nconst { LOG_TRACE } = require('solclient-log');\n\nconst { makeIterator } = Iterator;\n\n/**\n * React to an event.\n * @callback StateContext.reactionCallback\n * @param {FsmEvent} event The event to react to.\n * @returns {StateContext.ReactionResult} One of the many possible\n *      reaction results that can be created by one of the following methods:\n *          - {@link StateContext#transitionTo}\n *          - {@link FsmState#internalTransition}\n *          - {@link FsmState#externalTransitionTo}\n *          - {@link FsmState#terminate}\n *          - {@link FsmState#eventUnhandled}\n */\n\n\n/**\n * @classdesc\n * This abstract class can host one or more states.  Concrete examples would\n * be a state, which can host one or more inner states, or a state machine,\n * which would typically have multiple top-level states.  It also serves as a\n * context in which transitions can occur.\n * @memberof solace\n * @private\n */\nclass StateContext extends FsmObject {\n  /**\n   * @constructor\n   * @param {Object} spec Object specifier used to implement the named parameter\n   *  idiom.\n   * @param {String} spec.name The name of the context.\n   */\n  constructor(spec) {\n    super(spec);\n    this.impl = this.impl || {};\n    this.impl.logPadding = '';\n  }\n\n  /**\n   * Gets the state-machine that hosts this state context.\n   * @returns {StateMachine} The FSM that hosts this context.\n   */\n  getStateMachine() {\n    return this.impl.ancestorList[0];\n  }\n\n  /**\n   * Sets the initial reaction for the state context.\n   * @param {StateContext.reactionCallback} func The reaction callback to be\n   *      called after the state is entered as the deepest state of a\n   *      transition, or for a state machine when it is started.\n   * @returns {StateContext} The object this function was called on\n   */\n  initial(func) {\n    if (this.impl.initialReaction) {\n      this.log(`Replacing ${this} initialReaction ${this.impl.initialReaction} with ${func}`);\n    }\n    this.impl.initialReaction = func.bind(this);\n    return this;\n  }\n\n  /**\n   * This is used for 'local' transitions.  However, we extend the formal\n   * definition of local transitions here.  The formal definition is that\n   * the dest state is within the src state, and the src state is not\n   * exited.  We extend this definition to include states where the src\n   * state is within dest. In this case, a local transition means that dest\n   * will not be exited and entered and the transition will occur in the\n   * context of dest before executing dest's initial transition.  Note that\n   * this definition of local transition matches that of\n   * {@link https://en.wikipedia.org/wiki/UML_state_machine#Local_versus_external_transitions|Wikipedia}.\n   * But it does not match figure 14.34 or section 14.5.12 of the\n   * {@link http://www.omg.org/spec/UML/2.5/PDF/|Formal UML Specification v2.5}.\n   * Nevertheless, it does seem helpful to be able to express a transition\n   * that does leave the destination state vs. a transition that does not.\n   *\n   * If neither the source nor the dest states are within the other, the\n   * behaviour is the same as an external transition -- src is always exited\n   * and dest is always entered.\n   *\n   * This is included in the StateContext instead of within the State itself\n   * since this can be used by the initial reaction for a state machine.\n   *\n   * @param {State} state The state to transition to.\n   * @param {StateContext.actionCallback} [action] Optional The action to perform as\n   *      part of the transition, if desired.\n   * @returns {StateContext.ReactionResult} the result object used\n   *      internally for further processing of the event.\n   */\n  transitionTo(state, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state,\n      action,\n    });\n  }\n\n  /**\n   * Used to terminate the FSM.\n   * @param {StateContext.actionCallback} action An optional action to\n   *      take within the FSM context after all states have been exited.\n   * @returns {StateContext.ReactionResult} The reaction result for the termination.\n   */\n  terminate(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getFinalState(),\n      action,\n    });\n  }\n\n  /**\n   * A callback to execute an action as part of a transition in the\n   * appropriate context.\n   *\n   * To be used only by the FSM infrastructure or unit tests.\n   *\n   * @callback StateContext.actionCallback\n   * @param {StateContext} context The context within which the action is\n   *      executed.  When the active state changes, this is done after\n   *      states are exited and before states are entered.  It is the\n   *      deepest context that contains the last exited and first entered\n   *      state as part of the transition.\n   * @param {FsmEvent} event The event that triggered the transition.\n   * @returns {Array.<StateContext>} The context's ancestor list.\n   * @protected\n   */\n  getAncestorList() {\n    return this.impl.ancestorList;\n  }\n\n  /**\n   * Perform a debug log with appropriate padding for the context.  The padding\n   * helps to visualize the level within the hierarchical state machine.\n   * @protected\n   */\n  log(...args) {\n    LOG_TRACE(this.impl.logPadding, ...args);\n  }\n\n  /**\n   * Called when the initial transition for the context needs to be taken.\n   * @param {FsmEvent} [event] The event causing this transition; undefined for the\n   *      FSM's initial transition.\n   * @returns {StateContext.ReactionResult} the result to be processed by\n   *      the FSM infrastructure.\n   * @protected\n   */\n  onInitial(event) {\n    let result;\n\n    if (this.impl.initialReaction) {\n      this.log(`Initial: for ${this}`);\n      result = this.impl.initialReaction(event);\n      if (result.external) {\n        throw new Error(`Initial reaction for ${this} returned external transitions`);\n      }\n      return result;\n    }\n\n    if (!(this instanceof (StateLib.State))) {\n      throw new Error(`Missing initial reaction for ${this}`);\n    }\n\n    // If there is no initial reaction, then we just enter this state.\n    // Technically this is a malformed FSM if there are inner states and\n    // this state has no initial reaction.  We won't police this since it\n    // isn't easily done with the data we are otherwise maintaining (we only\n    // know about parent states, not children), and such a problem would be\n    // easily caught by testing of the FSM.\n    return this.transitionTo(this);\n  }\n\n  /**\n   * After a reaction function has been called, this function processes the\n   * returned {@link StateContext.ReactionResult}.\n   * @param {StateContext.ReactionResult} result The result of a reaction.\n   * @param {FsmEvent|undefined} e The event that triggered the reaction;\n   *      undefined if this was due to the initial reaction.\n   * @returns {State} The active state of the FSM after the ReactionResult was\n   *      processed.\n   * @protected\n   */\n  processReactionResult(result, e) {\n    let curContext = this;\n\n    if (!result.destState) {\n      return this;\n    }\n\n    const destStateIter = this.lowestCommonAncestor(result);\n\n    // exit states until we get to the LCA\n    while (curContext !== destStateIter.deref()) {\n      curContext.onExit();\n      curContext = curContext.getParent();\n    }\n\n    // perform the transition\n    if (result.action) {\n      result.action(curContext, e);\n    }\n\n    curContext.log(`Action: transition to ${result.destState} in context ${curContext}`);\n\n    // Start by incrementing the iterator so we don't enter the\n    // context, which we are already in.  Then enter remaining states\n    // in the list.\n    for (destStateIter.incr(); !destStateIter.end(); destStateIter.incr()) {\n      curContext = destStateIter.deref();\n      curContext.onEntry();\n    }\n\n    // execute the initial transition in the destState.\n    const destInitial = curContext.onInitial(e);\n    if (destInitial.destState !== curContext) {\n      return curContext.processReactionResult(destInitial, e);\n    }\n    return curContext;\n  }\n\n  /**\n   * For a given reactionResult, this function returns an iterator to the\n   * context in which to process a transition from 'self' to\n   * 'reactionResult.destState'.  Advancing the iterator provides the states\n   * that need to be entered after the transition is processed.\n   * @param {ReactionResult} reactionResult An object created with one of the\n   *                                        reaction result methods defined in\n   *                                        either a state context or a state.\n   * @returns {Iterator} The iterator where the first element is the\n   * context in which to execute the transaction, and subsequent elements are\n   * to be entered after executing the transaction.\n   * @protected\n   */\n  lowestCommonAncestor(reactionResult) {\n    const ancestorList = this.impl.ancestorList;\n    const destAncestorList = reactionResult.destState.getAncestorList();\n    let i;\n\n    // Make sure the states belong to the same state machine\n    if (ancestorList[0] !== destAncestorList[0]) {\n      throw new Error(`No common ancestor between (${this} in ${ancestorList[0]}) and (${reactionResult.destState} in ${destAncestorList[0]})`);\n    }\n\n    // Optimize case where the two states are the same.  This would be the\n    // case for internal and self-transitions.\n    if (this === reactionResult.destState) {\n      i = ancestorList.length;\n      if (reactionResult.external) {\n        // self-transition, must exit then re-enter state.  Therefore,\n        // the context is our parent.\n        --i;\n      }\n    } else {\n      for (i = 1; i < ancestorList.length; ++i) {\n        if (ancestorList[i] !== destAncestorList[i]) {\n          break;\n        }\n      }\n\n      // Check if one state is within the other state.\n      if ((i === ancestorList.length) || (i === destAncestorList.length)) {\n        // One state within the other. Check whether this is a local\n        // or an external transition.\n        if (reactionResult.external) {\n          --i;    // Need to exit/re-enter the outermost state\n        }\n      }\n    }\n\n    // Here 'i' points to the first state to be entered after executing the\n    // transition.  We make the iterator with 'i-1' so that the first element\n    // is the context within which to execute the transition.\n    return makeIterator(destAncestorList, i - 1);\n  }\n\n  setLogPadding(padding) {\n    this.impl.logPadding = padding;\n  }\n}\n\n/**\n * @classdesc\n * A ReactionResult is suitable as a return value from a reaction function\n * or an initial reaction.\n * @private\n */\nStateContext.ReactionResult = class {\n  /**\n   * The ReactionResult constructor should never be invoked by users of the\n   * infrastructure. It should only be used by various public methods of\n   * StateContext or State, which return a ReactionResult.\n   *\n   * @param {Object} spec Defined according to members described below for\n   *      events that are handled by the reaction function; undefined if the\n   *      event was not handled by the reaction function.  For initial\n   *      reactions, spec must NOT be undefined.\n   * @param {StateContext} spec.caller The state context from which\n   *      {StateContext.ReactionResult} is being constructed.\n   * @param {State} spec.destState The destination state to\n   *      transition to.\n   * @param {StateContext.actionCallback} [spec.action] The function to call in\n   *      the transition context after the appropriate states have been\n   *      exited, if desired; undefined if no action is to be performed as a\n   *      result of the transition.\n   * @param {Boolean} spec.external True if the transition is an external\n   *      transition; false or undefined otherwise.\n   * @constructor\n   */\n  constructor(spec) {\n    if (!spec || !spec.caller || !(spec.caller instanceof StateContext)) {\n      throw new Error('spec.caller is required to be a StateContext');\n    }\n\n    if (!spec.caller.getStateMachine().isRunning()) {\n      throw new Error('ReactionResult objects can only be created while processing events');\n    }\n    if (spec.destState) {\n      if (!(spec.destState instanceof StateLib.State)) {\n        throw new Error('destState must be a State object');\n      }\n      if (spec.action && (typeof (spec.action) !== 'function')) {\n        throw new Error('action must be a function');\n      }\n      this.destState = spec.destState;\n      this.action = spec.action;\n      this.external = spec.external;\n    }\n  }\n};\n\nmodule.exports.StateContext = StateContext;\n","const { LOG_ERROR } = require('solclient-log');\nconst { State } = require('./state');\nconst { StateContext } = require('./state-context');\n\n/**\n * @classdesc\n * This is a state machine that can host states.  States themselves can also\n * host inner states in a hierarchical manner.  This class also provides the\n * basic interface for manipulating the current state via processing of\n * events, and querying the current state through 'getActiveState' methods.\n *\n * @private\n * @memberof solace\n */\nclass StateMachine extends StateContext {\n  /**\n   * @constructor\n   *\n   * @param {Object} spec The object specifier for the FSM.\n   * @param {String} spec.name The name of the FSM, used in debug logs.\n   */\n  constructor(spec) {\n    if (spec.parentContext) {\n      throw new Error(`State machine cannot have parent state: ${spec.parentContext}`);\n    }\n    super(spec);\n    this.impl.ancestorList = [this];\n    this.impl.eventQueue = [];\n    this.impl.finalState = new State({ name: 'impl.final', parentContext: this });\n    this.impl.handleUncaughtException = (ev, exc) => {\n      LOG_ERROR(`Uncaught exception in ${this} while processing ${ev}: ${exc.stack}`);\n      return this.terminate();\n    };\n  }\n\n  /**\n   * This method enqueues the given function, and begins execution of queued functions if\n   * they aren't already executing.\n   * @param {Function} func The function to enqueue and execute.\n   * @returns {Boolean} `true` if the supplied function has completed; false if it was deferred.\n   */\n  process(func) {\n    const { impl } = this;\n    const { eventQueue } = impl;\n\n    eventQueue.push(func);\n    if (impl.processingEvents) {\n      return false;\n    }\n    impl.processingEvents = true;\n\n    while (eventQueue.length) {\n      const evt = eventQueue.shift();\n      evt.apply(this);\n    }\n\n    impl.processingEvents = false;\n    this._onEventCompletion();\n    return true;\n  }\n\n  /**\n   * This method starts a state machine after it has been created and states\n   * have been associated and configured any time getCurrentState() returns\n   * undefined.  This would be after initial creation and after the state\n   * machine has terminated (i.e. transitioned to the final state).\n   */\n  start() {\n    if (this.getCurrentState()) {\n      throw new Error(`Cannot start ${this.getName()}; it is already started.`);\n    }\n\n    this.process(() => {\n      const result = this.onInitial();\n\n      // A state machine's onInitial must specify a destState, the state\n      // cannot be the state machine itself, and the state must have the\n      // state machine as the top ancestor.\n      if (result.destState === undefined) {\n        throw new Error(`Missing destination state from initial transition for ${this}`);\n      }\n\n      if (result.destState === this) {\n        throw new Error(`Destination state for initial transition for ${this} cannot be the FSM.`);\n      }\n\n      const destAncestorList = result.destState.getAncestorList();\n      if (destAncestorList[0] !== this) {\n        throw new Error(`Invalid destination state (${result.destState\n          }) from initial transition for state machine (${this\n          }); destState ancestor (${destAncestorList[0]})`);\n      }\n\n      this.impl.currentState = this.processReactionResult(result);\n    });\n  }\n\n  /**\n   * Used to query whether the state machine is currently running\n   * @returns {Boolean} `true` if the state machine is processing events; false otherwise.\n   */\n  isRunning() {\n    return this.impl.processingEvents;\n  }\n\n  /**\n   * This is the main function to invoke an FSM with an event.\n   * @param {FsmEvent} evt The event to be processed by the FSM.\n   */\n  processEvent(evt) {\n    const { impl } = this;\n    if (!this.process(() => {\n      this.log(`Processing event ${evt}`);\n      let result;\n      if (impl.currentState) {\n        try {\n          result = impl.currentState.handleEvent(evt);\n          impl.currentState = impl.currentState.processReactionResult(result, evt);\n        } catch (exc) {\n          this.log(`Caught exception ${exc}, continuing`);\n          result = impl.handleUncaughtException.call(impl.currentState,\n                                                     evt,\n                                                     exc);\n          impl.currentState = impl.currentState.processReactionResult(result, evt);\n        }\n      }\n    })) {\n      // Didn't run immediately\n      this.log(`Deferring event ${evt}`);\n    }\n  }\n\n  /**\n   * Terminates the FSM by transitioning the FSM to its final state. After\n   * this returns, the FSM may be started again with @link start.  This method\n   * should only be called externally from the FSM, not from within a reaction.\n   * To terminate the FSM within a reaction, use the\n   * {@link StateContext.ReactionResult} returned by {@link State#terminate}.\n   */\n  terminateFsm() {\n    const curState = this.getCurrentState();\n    if (!curState) {\n      return;\n    }\n    if (this.impl.processingEvents) {\n      throw new Error('Cannot terminate state machine while FSM is processing ' +\n            'events. To terminate the FSM from within a reaction, return ' +\n            'State~terminate() from a reaction.');\n    }\n    this.process(() => {\n      const result = curState.terminate();\n      this.impl.currentState = curState.processReactionResult(result);\n    });\n  }\n\n  /**\n   * This should only be called from within the context of a reaction\n   * function, which is to say a function called by the FSM infrastructure\n   * that returns {@link StateContext~ReactionResult}.  The purpose of this\n   * function is to set a function to be called after the currently\n   * executing event is completely handled, which includes the execution of\n   * any events that have been or will be queued as a result of processing\n   * the current event.\n   *\n   * Typical uses of this would be to set a function that does one of:\n   * 1. Throws an exception to the caller.\n   * 2. Calls an application callback.\n   * @param {Function} postEventAction function to call when the FSM has finished\n   *  processing events.  The context (i.e. 'this') will be the FSM when it\n   *  is called.\n   */\n  setPostEventAction(postEventAction) {\n    if (!this.impl.processingEvents) {\n      throw new Error('Cannot set post event hook unless FSM is processing events.');\n    }\n    if (!postEventAction || typeof postEventAction !== 'function') {\n      // TBD: Do we need to allow clearing of the hook?  Not that\n      // I'm aware of for the known use cases.  If we want to allow\n      // it, I propose adding a 'clearPostEventAction' rather than\n      // allowing null or undefined as the argument.\n      throw new Error(`postEventAction must be a function; got (${postEventAction})`);\n    }\n    this.impl.postEventAction = postEventAction.bind(this);\n  }\n\n  /**\n   * Called by the FSM when it finishes processing events.  If a\n   * postEventAction had been set, it will be called, then cleared.\n   * @private\n   */\n  _onEventCompletion() {\n    const action = this.impl.postEventAction;\n    if (action) {\n      this.impl.postEventAction = undefined;\n      this.log('Running post event action');\n      action.apply(this);\n    }\n  }\n\n  /**\n   * Returns the innermost active state.\n   *\n   * If regions were implemented, this would return an iterator to innermost\n   * active states.\n   *\n   * @returns {StateContext} The innermost active state.\n   */\n  getCurrentState() {\n    return this.impl.currentState;\n  }\n\n  /**\n   * Gets an active state by name.  Returns undefined if the named state is\n   * not currently active.\n   *\n   * Note the returned state may not be the innermost state as returned by\n   * {@link StateMachine#getCurrentState}.  If the innermost active state is not\n   * returned, the returned state is guaranteed to contain the innermost active\n   * state.\n   *\n   * @param {String} name The name of the state to be retrieved.\n   * @returns {?StateContext} The state with the specified name, if the\n   *      state is active; undefined otherwise.  Note the returned state may not\n   *      be the innermost active state.\n   */\n  getActiveState(name) {\n    const activeStates = this.impl.currentState.getAncestorList();\n    // Don't include the first ancestor in the loop since it is the state\n    // machine itself, not a state.\n    for (let i = 1; i < activeStates.length; ++i) {\n      if (activeStates[i].getName() === name) {\n        return activeStates[i];\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Checks if the named state is currently active.\n   * @param {String} name The name of the state to be queried.\n   * @returns {Boolean} Whether or not the named state is active.\n   */\n  isStateActive(name) {\n    return this.getActiveState(name) !== undefined;\n  }\n\n  /**\n   * Allows a reaction to be registered for unhandled events in the FSM.  The\n   * default reaction is to log the unhandled event at debug and remain in the\n   * current state with no other side effects.\n   * @param {StateContext.reactionCallback} r The reaction to be invoked when an\n   *      event is unhandled by the FSM.\n   * @returns {StateMachine} This StateMachine object.\n   */\n  unhandledEventReaction(r) {\n    if (typeof r !== 'function') {\n      throw new Error(`In ${this}: unhandled event reaction must be a function; got ${r}`);\n    }\n    this.impl.handleUnhandledEvent = r.bind(this);\n    return this;\n  }\n\n  /**\n   * This allows a reaction to be registered for uncaught exceptions while\n   * processing events.  Generally, it is preferred to catch exceptions from\n   * within reaction functions.  However, this is a good way to safeguard\n   * against missed exceptions.  Usually an error should be logged here,\n   * which is the default behaviour.\n   *\n   * Also note that this is only called for either:\n   * - an exception thrown from an event reaction;\n   * - an exception thrown from a transition action\n   * If exceptions are thrown from within state entry, exit, initials, etc,\n   * this function is not invoked.  These functions may end up getting\n   * invoked from the transition taken as a result of the exception in the\n   * first place.  The generate another exception would be difficult to\n   * handle in a sensible way.  Users of this infrastructure must always\n   * catch exceptions from these functions.\n   *\n   * @param {fsm.StateContext.reactionCallback} r The reaction to be\n   *      invoked when an exception has not been caught by another of the\n   *      FSM's reactionCallbacks.  When this function is invoked, 'this'\n   *      will be the FSM's current state.\n   * @returns {StateMachine} `this`, for method chaining.\n   */\n  uncaughtExceptionReaction(r) {\n    if (typeof r !== 'function') {\n      throw new Error(`In ${this}: Uncaught exception reaction must be a function; got ${r}`);\n    }\n    this.impl.handleUncaughtException = r;\n    return this;\n  }\n\n  /**\n   * Used by the implementation to get the final state.  This should never be\n   * used by applications.  Their only need to reference this state should be\n   * indirectly via the {@link State#terminate} function.\n   * @returns {State} The FSM's final state, which is a hidden implementation\n   *      detail of the FSM.\n   * @protected\n   */\n  getFinalState() {\n    return this.impl.finalState;\n  }\n}\n\nmodule.exports.StateMachine = StateMachine;\n","const { EntryPoint } = require('./entry-point');\nconst { ExitPoint } = require('./exit-point');\nconst { StateContext } = require('./state-context');\n\n/**\n * @classdesc\n * This class represents a state in a state machine.\n * @private\n */\nclass State extends StateContext {\n  /**\n   * @constructor\n   * @param {Object} spec Object specifier used to implement the named parameter\n   *  idiom.  In addition to the properties documented here, it is also expected\n   *  to have properties required by the [StateContext base class]{@link StateContext}.\n   * @param {String} spec.name The name of the state, used in debug logs.\n   * @param {State|StateMachine} spec.parentContext One of:\n   *  - The parent state object or;\n   *  - The stateMachine object for top-level states.\n   * @param {Object} [extensions] Additional methods to add to the state.\n   */\n  constructor(spec, extensions = null) {\n    super(spec);\n\n    const parentContext = spec.parentContext;\n    Object.assign(this.impl, {\n      parentContext,\n      reactions:            {},\n      entryPoints:          {},\n      exitPoints:           {},\n      ancestorList:         [...parentContext.getAncestorList(), this],\n      handleUnhandledEvent: e => (\n        parentContext.handleEvent\n          ? parentContext.handleEvent(e)\n          : parentContext.impl.handleUnhandledEvent(e)\n      ),\n    });\n    if (parentContext) this.log = parentContext.log.bind(this);\n\n    // Extend and bind functions\n    Object.keys(extensions || {}).forEach((k) => {\n      const extension = extensions[k];\n      this[k] = typeof extension === 'function' ? extension.bind(this) : extension;\n    });\n\n    this.setLogPadding(' '.repeat(this.impl.ancestorList.length));\n  }\n\n  /**\n   * Register a reaction function for a particular event.\n   * @param {String} eventName The name of the event func is to react to.\n   * @param {StateContext.reactionCallback} func The function to call when\n   *  the state processes an event with the name eventName.  The function is\n   *  bound to this object so that this refers to this state object when it\n   *  is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  reaction(eventName, func) {\n    if (!eventName) throw new Error('No event name for reaction');\n    if (!func) throw new Error(`No reaction function for reaction ${eventName}`);\n\n    this.log(`Adding reaction to ${this} for event ${eventName}`);\n\n    if (this.impl.reactions[eventName]) {\n      this.log(`Replacing reaction ${this.impl.reactions[eventName]} with ${func}`);\n    }\n    this.impl.reactions[eventName] = func.bind(this);\n    return this;\n  }\n\n  /**\n   * Create an entryPoint for this state.\n   * @param {String} entryPointName The name of the entryPoint being created.\n   * @param {StateContext.reactionCallback} func The reaction to invoke after\n   *  the state is entered via this entryPoint\n   * @returns {State} This state object.\n   * @public\n   */\n  entryPoint(entryPointName, func) {\n    if (!entryPointName) throw new Error('No entry point name for entry point');\n    if (!func) throw new Error(`No reaction function for entry point ${entryPointName}`);\n\n    this.log(`Adding entryPoint ${entryPointName} to ${this}`);\n\n    if (this.impl.entryPoints[entryPointName]) {\n      this.log(`EntryPoint ${entryPointName} already exists in ${this}`);\n      return this;\n    }\n\n    this.impl.entryPoints[entryPointName] = new EntryPoint({\n      state: this,\n      entryPointName,\n      func,\n    });\n\n    return this;\n  }\n\n  /**\n   * Create an exitPoint for this state.\n   * @param {String} exitPointName The name of the exitPoint being created.\n   * @param {StateContext.reactionCallback} func The reaction to invoke after\n   *  the state is exited via this exitPoint.\n   * @returns {State} This state object.\n   * @public\n   */\n  exitPoint(exitPointName, func) {\n    if (!exitPointName) throw new Error('No exit point name for entry point');\n    if (!func) throw new Error(`No reaction function for exit point ${exitPointName}`);\n\n    this.log(`Adding exitPoint ${exitPointName} to ${this}`);\n\n    if (this.impl.exitPoints[exitPointName]) {\n      this.log(`ExitPoint ${exitPointName} already exists in  ${this}`);\n      return this;\n    }\n\n    this.impl.exitPoints[exitPointName] = new ExitPoint({\n      state: this,\n      exitPointName,\n      func,\n    });\n\n    return this;\n  }\n\n  /**\n   * @param {String} entryPointName The name of the entry point to be\n   *      transitioned to.\n   * @returns { StateContext } The state context to transition to when\n   *      entering via the state's entryPoint named entryPointName.\n   * @protected\n   */\n  getEntryPointDestState(entryPointName) {\n    if (this.impl.entryPoints[entryPointName] === undefined) {\n      this.log(`${this}: EntryPoint ${entryPointName} does not exist.`);\n      return this;\n    }\n\n    return this.impl.entryPoints[entryPointName].getDestState();\n  }\n\n  /**\n   * @param {String} exitPointName The name of the exit point to be\n   *      transitioned to.\n   * @returns {StateContext} The state context to transition to when\n   *      exiting via the state's exitPoint named exitPointName.\n   * @protected\n   */\n  getExitPointDestState(exitPointName) {\n    if (this.impl.exitPoints[exitPointName] === undefined) {\n      this.log(`${this}: ExitPoint ${exitPointName} does not exist.`);\n      return this;\n    }\n\n    return this.impl.exitPoints[exitPointName].getDestState();\n  }\n\n  /**\n   * Register a function to be called when the state is entered.\n   * @param {function} func The function to call when the state is entered.\n   *  The function is bound to this object so that this refers to this\n   *  state object when it is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  entry(func) {\n    if (this.impl.appEntryFunc) {\n      this.log(`Replacing entry function ${this.impl.appEntryFunc} with ${func}`);\n    }\n    this.impl.appEntryFunc = func.bind(this);\n    return this;\n  }\n\n  /**\n   * Register a function to be called when the state is exited.\n   * @param {function} func The function to call when the state is exited.\n   *  The function is bound to this object so that this refers to this\n   *  state object when it is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  exit(func) {\n    if (this.impl.appExitFunc) {\n      this.log(`Replacing exit function ${this.impl.appExitFunc} with ${func}`);\n    }\n    this.impl.appExitFunc = func.bind(this);\n    return this;\n  }\n\n  /**\n   * This is the same as [transitionTo]{@link StateContext#transitionTo},\n   * except the outermost state is exited if the source state is within the\n   * dest state or vice versa.  If one state is not within the other, this\n   * is equivalent to [transitionTo]{@link StateContext#transitionTo}.\n   * @param {State} state The state to transition to; if undefined, it is\n   *      a self-transition.\n   * @param {StateContext.actionCallback} [action] Optional The action to perform as part\n   *      of the transition, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition.\n   */\n  externalTransitionTo(state, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state,\n      action,\n      external:  true,\n    });\n  }\n\n  /**\n   * This is similar to [transitionTo]{@link StateContext#transitionTo}, except\n   * that this is a transition to a named entryPoint created on state.  If the\n   * named entryPoint does not exist, this is a malformed FSM and the behaviour\n   * is undefined.\n   * @param {State} state The state that has the named entryPoint.\n   * @param {String} entryPointName The name of the entryPoint of state.\n   * @param {StateContext.actionCallback} action The action to perform as part of\n   *      the transaction, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  transitionToEntryPoint(state, entryPointName, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state.getEntryPointDestState(entryPointName),\n      action,\n    });\n  }\n\n  /**\n   * This is similar to [transitionTo]{@link StateContext#transitionTo}, except\n   * that this is a transition to a named exitPoint created on state.  If the\n   * named exitPoint does not exist, this is a malformed FSM and the behaviour\n   * is undefined.\n   * @param {State} state The state that has the named exitPoint.\n   * @param {String} exitPointName The name of the exitPoint of state.\n   * @param {StateContext.actionCallback} [action] Optional The\n   * action to perform as part of the transaction, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  transitionToExitPoint(state, exitPointName, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state.getExitPointDestState(exitPointName),\n      action,\n    });\n  }\n\n  /**\n   * If a reaction evaluates the guard conditions for the reaction and none\n   * succeed, the eventUnhandled\n   * [ReactionResult]{@link StateContext.ReactionResult} should be\n   * returned.  This causes the FSM to continue looking for a reaction to\n   * process the event.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  eventUnhandled() {\n    return new StateContext.ReactionResult({\n      caller: this,\n    });\n  }\n\n  /**\n   * This [ReactionResult]{@link StateContext.ReactionResult} is used\n   * when an event has been handled in a state and the transition is a local\n   * transition back to itself.  Note that internal transitions never cause\n   * state exits or entries -- if the internal transition is defined in an\n   * outer state that contains the active state, then the behaviour is as if the\n   * active state has inherited the internal transition from the outer state.\n   * @param {?Function} action The action to perform in the transition.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  internalTransition(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getCurrentState(),\n      action,\n    });\n  }\n\n  /**\n   * Used to terminate the FSM.\n   * @param {StateContext.actionCallback} action An optional action to\n   *      take within the FSM context after all states have been exited.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  terminate(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getFinalState(),\n      action,\n    });\n  }\n\n\n  /**\n   * @returns {StateContext} The parent state context for this state, which\n   *      could either be an outer state, or the state machine for top-level\n   *      states.\n   * @protected\n   */\n  getParent() {\n    return this.impl.parentContext;\n  }\n\n  /**\n   * Called when a state is being entered.  Calls the app's registered entry\n   * function, if any.\n   * @protected\n   */\n  onEntry() {\n    this.log(`Entering: ${this}`);\n    if (this.impl.appEntryFunc) {\n      this.impl.appEntryFunc();\n    }\n  }\n\n  /**\n   * Called when a state is being exited.  Calls the app's registered exit\n   * function, if any.\n   * @protected\n   */\n  onExit() {\n    this.log(`Exiting: ${this}`);\n    if (this.impl.appExitFunc) {\n      this.impl.appExitFunc();\n    }\n  }\n\n  /**\n   * Called when a state is to handle an event.\n   * @param {FsmEvent} e The event to handle.\n   * @returns {ReactionResult} The result of handling the event.\n   * @protected\n   */\n  handleEvent(e) {\n    this.log(`Process: ${e}`);\n    const reaction = this.impl.reactions[e.getName()];\n    if (reaction) {\n      const result = reaction(e);\n      // All ReactionResults in which an event is considered handled\n      // have a destState defined.\n      if (!result) {\n        this.log(`Reaction returned undefined: ${e} in ${this}`);\n      }\n      if (result.destState) {\n        this.log(`Handled: ${e}`);\n        return result;\n      }\n      this.log(`Unhandled: ${e} in ${this}`);\n    } else {\n      this.log(`No reaction: ${e} in ${this}`);\n    }\n\n    return this.impl.handleUnhandledEvent(e);\n  }\n}\n\nmodule.exports.State = State;\n","const { ConsoleLogImpl } = require('./lib/console-log-impl');\nconst { GlobalBinding } = require('./lib/global-binding');\nconst { LogImpl } = require('./lib/log-impl');\nconst { LogLevel } = require('./lib/log-levels');\n\nconst { Parameter } = require('solclient-validate');\nconst { SolclientFactory } = require('solclient-factory');\n\nconst {\n  isEnumMember,\n  isFunction,\n} = Parameter;\n\nconst {\n  getImpl,\n  getLogLevel,\n  setImpl,\n  setLogLevel,\n} = GlobalBinding;\n\nconst forwarder = {};\nfunction buildLogForwarder() {\n  Object.assign(forwarder, {\n    trace(...args) {\n      const impl = getImpl();\n      if (impl && impl.trace && getLogLevel() >= LogLevel.TRACE) {\n        impl.trace.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    debug(...args) {\n      const impl = getImpl();\n      if (impl && impl.debug && getLogLevel() >= LogLevel.DEBUG) {\n        impl.debug.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    info(...args) {\n      const impl = getImpl();\n      if (impl && impl.info && getLogLevel() >= LogLevel.INFO) {\n        impl.info.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    warn(...args) {\n      const impl = getImpl();\n      if (impl && impl.warn && getLogLevel() >= LogLevel.WARN) {\n        impl.warn.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    error(...args) {\n      const impl = getImpl();\n      if (impl && impl.error && getLogLevel() >= LogLevel.ERROR) {\n        impl.error.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    fatal(...args) {\n      const impl = getImpl();\n      if (impl && impl.fatal) {\n        impl.fatal.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n  });\n}\nbuildLogForwarder(); // stripped by production build\n\nfunction addGlobalFuncs(source, target) {\n  Object.keys(forwarder).forEach((k) => {\n    target[`LOG_${k.toUpperCase()}`] = source[k];\n  });\n}\n\nclass LogFormatter {\n  constructor(formatter) {\n    this._formatter = (() => {\n      if (typeof formatter === 'function') return formatter;\n      if (typeof formatter === 'string') return function prepend(...args) { return [formatter, ...args]; };\n      if (!formatter) return function passthrough(...args) { return [...args]; };\n      return formatter;\n    })();\n    const self = this;\n    Object.keys(forwarder).forEach((key) => {\n      this[key] = function forward(...args) {\n        return forwarder[key].apply(null, self._formatter(...args));\n      };\n    });\n    addGlobalFuncs(this, this);\n  }\n\n  get formatter() {\n    return this._formatter;\n  }\n  set formatter(func) {\n    this._formatter = func;\n  }\n\n  wrap(genericFunction, targetSelf) {\n    const self = this;\n    return function genericLogWrapper(...args) {\n      return genericFunction.apply(targetSelf, self._formatter(...args));\n    };\n  }\n\n}\n\n/**\n * Gets the current log level, which was set by {@link solace.SolclientFactory.init} or a\n * subsequent call to {@link solace.SolclientFactory.setLogLevel}.\n *\n * @returns {solace.LogLevel} The current log level.\n */\nSolclientFactory.getLogLevel = () => getLogLevel();\n\n  /**\n   * This method changes the current log level from the level set when\n   * {@link solace.SolclientFactory.init} was called.\n   *\n   * @param {solace.LogLevel} newLevel The new log level to set.\n   * @throws {solace.OperationError} Invalid log level\n   */\nSolclientFactory.setLogLevel = (newLevel) => {\n  isEnumMember('logLevel', newLevel, LogLevel);\n  setLogLevel(newLevel);\n};\n\nSolclientFactory.addInitializer((props) => {\n  setLogLevel(props.logLevel);\n\n  const logger = props.logger || getImpl() || new ConsoleLogImpl();\n  // Validate that the supplied log implementation is a superset of LogImpl\n  Object.keys(new LogImpl()).forEach(key => isFunction(`logger.${key}`, logger[key]));\n\n  setImpl(logger);\n});\n\naddGlobalFuncs(forwarder, module.exports);\nmodule.exports.LogImpl = LogImpl;\nmodule.exports.LogLevel = LogLevel;\nmodule.exports.Binding = GlobalBinding;\nmodule.exports.ConsoleLogImpl = ConsoleLogImpl;\nGlobalBinding.setImpl(new ConsoleLogImpl());\nmodule.exports.LogFormatter = LogFormatter;\n","const { LogImpl } = require('./log-impl');\n\nconst STUB = () => undefined;\n\nfunction generateLogHeader(levelStr) {\n  const date = new Date();\n  const levelStrPadding = ' '.repeat(6 - levelStr.length);\n  let YY = String(date.getFullYear());\n  let MM = String(date.getMonth() + 1);\n  let DD = String(date.getDate());\n  let hh = String(date.getHours());\n  let mm = String(date.getMinutes());\n  let ss = String(date.getSeconds());\n  let ms = String(date.getMilliseconds());\n\n  YY = '0'.repeat(4 - YY.length) + YY;\n  MM = MM.length < 2 ? `0${MM}` : MM;\n  DD = DD.length < 2 ? `0${DD}` : DD;\n  hh = hh.length < 2 ? `0${hh}` : hh;\n  mm = mm.length < 2 ? `0${mm}` : mm;\n  ss = ss.length < 2 ? `0${ss}` : ss;\n  ms = ms.length < 3 ? `0${ms}` : ms;\n  ms = ms.length < 3 ? `0${ms}` : ms; // twice: pad to 3\n\n  return [`${YY}-${MM}-${DD} ${hh}:${mm}:${ss}.${ms}`, `${levelStr}${levelStrPadding}`];\n}\n\n/**\n * @classdesc\n * A log implementation that uses the global or window console.\n *\n * This is the default log implementation used by the API if no logger was\n * supplied via {@link solace.SolclientFactoryProperties}.\n *\n * @memberof solace\n * @private\n */\nclass ConsoleLogImpl extends LogImpl {\n  /**\n   * @constructor\n   * @param {Object} [consoleIn] The console to which to apply this implementation. If\n   *  not specified, uses the global or window console.\n   */\n  constructor(consoleIn) {\n    /**\n     * Logs the given arguments at TRACE level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.log\n     *  * console.debug\n     *\n     * @name solace.ConsoleLogImpl#trace\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _trace = STUB;\n\n    /**\n     * Logs the given arguments at DEBUG level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.log\n     *  * console.debug\n     *\n     * @name solace.ConsoleLogImpl#debug\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _debug = STUB;\n\n    /**\n     * Logs the given arguments at INFO level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#info\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _info = STUB;\n\n    /**\n     * Logs the given arguments at WARN level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.warn\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#warn\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _warn = STUB;\n\n\n    /**\n     * Logs the given arguments at ERROR level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#error\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _error = STUB;\n\n    /**\n     * Logs the given arguments at FATAL level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#fatal\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _fatal = STUB;\n\n    const console = consoleIn || (\n      typeof window === 'undefined'\n        /* eslint-env node */ ? global\n        /* eslint-env browser */ : window\n      ).console;\n    /* eslint-env shared-node-browser */\n\n    if (console && (console.log || console.warn)) {\n      /* eslint-disable no-console */\n      // Where console.log is supported, it is preferred over console.debug\n      // https://developer.mozilla.org/en-US/docs/DOM/console\n      // console methods in IE9 are object, not function, unfortunately\n      //\n      // Also, console.trace outputs a stack trace on some platforms.  So we\n      // use the same underlying logger as debug for trace to avoid the\n      // excessive verbosity that would result.\n      if (console.log && console.log !== undefined) {\n        _trace = Function.prototype.bind.call(console.log, console);\n        _debug = Function.prototype.bind.call(console.log, console);\n      } else if (console.debug && typeof console.debug === 'function') {\n        _trace = Function.prototype.bind.call(console.debug, console);\n        _debug = Function.prototype.bind.call(console.debug, console);\n      }\n\n      // Where console.info exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      if (console.info && console.info !== undefined) {\n        _info = Function.prototype.bind.call(console.info, console);\n      } else {\n        _info = Function.prototype.bind.call(console.log, console);\n      }\n\n      // Where console.warn exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      if (console.warn && console.warn !== undefined) {\n        _warn = Function.prototype.bind.call(console.warn, console);\n      } else {\n        _warn = Function.prototype.bind.call(console.log, console);\n      }\n\n      // Where console.error exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      //\n      // console.fatal is not present in any known console implementation. Use\n      // console.error or console.log.\n      if (console.error && console.error !== undefined) {\n        _error = Function.prototype.bind.call(console.error, console);\n        _fatal = Function.prototype.bind.call(console.error, console);\n      } else {\n        _error = Function.prototype.bind.call(console.log, console);\n        _fatal = Function.prototype.bind.call(console.log, console);\n      }\n\n      /* eslint-enable no-console */\n    } // else no console implementation was found, so the default (stub) is used for each level.\n\n    super((...args) => { _trace(...generateLogHeader('TRACE'), ...args); },\n          (...args) => { _debug(...generateLogHeader('DEBUG'), ...args); },\n          (...args) => { _info(...generateLogHeader('INFO'), ...args); },\n          (...args) => { _warn(...generateLogHeader('WARN'), ...args); },\n          (...args) => { _error(...generateLogHeader('ERROR'), ...args); },\n          (...args) => { _fatal(...generateLogHeader('FATAL'), ...args); });\n  }\n\n\n}\n\nmodule.exports.ConsoleLogImpl = ConsoleLogImpl;\n","const { LogLevel } = require('./log-levels');\n\nconst state = {\n  impl:  null,\n  level: LogLevel.INFO,\n};\n\nconst LogBinding = {};\nLogBinding.getImpl = function getImpl() {\n  return state.impl;\n};\n\nLogBinding.setImpl = function setImpl(impl) {\n  state.impl = impl;\n};\n\nLogBinding.getLogLevel = function getLogLevel() {\n  return state.level;\n};\n\nLogBinding.setLogLevel = function setLogLevel(level) {\n  state.level = level;\n};\n\nmodule.exports.GlobalBinding = LogBinding;\n","/* eslint-disable class-methods-use-this */ // declare prototype stubs\n\n/**\n * A logging callback. It must accept any valid number of arguments of any type. It must not throw.\n *\n * @callback\n * @function\n * @name solace.LogImpl.loggingCallback\n * @param {...*} args The arguments to log. Typically this is a mixture of strings and\n *  objects to be inspected. A simple implementation might call .toString() on each\n *  argument.\n */\n\n/**\n * @classdesc\n * A class that provides a binding to a log implementation. Applications that need to\n * control API logging must construct a LogImpl\n * instance, a log implementation that can be set in\n * {@link solace.SolclientFactoryProperties#logger}.\n * The binding will call the supplied log methods with the\n * parameters supplied to each.\n * @memberof solace\n */\nclass LogImpl {\n  /**\n   * @param {solace.LogImpl.loggingCallback} trace Callback for {@link solace.LogLevel.TRACE} logs.\n   * @param {solace.LogImpl.loggingCallback} debug Callback for {@link solace.LogLevel.DEBUG} logs.\n   * @param {solace.LogImpl.loggingCallback} info Callback for {@link solace.LogLevel.INFO} logs.\n   * @param {solace.LogImpl.loggingCallback} warn Callback for {@link solace.LogLevel.WARN} logs.\n   * @param {solace.LogImpl.loggingCallback} error Callback for {@link solace.LogLevel.ERROR} logs.\n   * @param {solace.LogImpl.loggingCallback} fatal Callback for {@link solace.LogLevel.FATAL} logs.\n   *\n   * @constructor\n   */\n  constructor(trace, debug, info, warn, error, fatal) {\n    Object.assign(this, {\n      trace,\n      debug,\n      info,\n      warn,\n      error,\n      fatal,\n    });\n  }\n\n  trace() {}\n  debug() {}\n  info() {}\n  warn() {}\n  error() {}\n  fatal() {}\n}\n\nmodule.exports.LogImpl = LogImpl;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents a log level enumeration.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst LogLevel = {\n  /**\n   * Fatal. Rserved for unrecoverable errors.\n   * @type {Number}\n   */\n  FATAL: 0,\n  /**\n   * Error. An internal error to the API or Solace Message Router.\n   * @type {Number}\n   */\n  ERROR: 1,\n  /**\n   * Warn. An external error which may be caused by the application passing invalid\n   * arguments or objects to the API. Often accompanied by an thrown exception.\n   * @type {Number}\n   */\n  WARN:  2,\n  /**\n   * Info. An unexpected event or occurrence that does not affect the sane\n   * operation of the SDK or application.\n   * @type {Number}\n   */\n  INFO:  3,\n  /**\n   * Debug. The highest (least) level of debug logs. Debug logs provide an overview of\n   * the API operation.\n   * @type {Number}\n   */\n  DEBUG: 4,\n  /**\n   * Trace. The loweest (most verbose) level of debug logs.\n   * @type {Number}\n   */\n  TRACE: 5,\n};\n\nmodule.exports.LogLevel = Enum.new(LogLevel);\n","const { ConsumerFlows } = require('./lib/consumer-flows');\nconst { ConsumerFSMEvent } = require('./lib/consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./lib/consumer-fsm-event-names');\nconst { MessageConsumer } = require('./lib/message-consumer');\nconst { MessageConsumerAcknowledgeMode } = require('./lib/message-consumer-acknowledge-modes');\nconst { MessageConsumerEvent } = require('./lib/message-consumer-event');\nconst { MessageConsumerEventName } = require('./lib/message-consumer-event-names');\nconst { MessageConsumerProperties } = require('./lib/message-consumer-properties');\nconst { QueueBrowser } = require('./lib/queue-browser');\nconst { QueueBrowserEventName } = require('./lib/queue-browser-event-names');\nconst { QueueBrowserProperties } = require('./lib/queue-browser-properties');\n\nmodule.exports.ConsumerFlows = ConsumerFlows;\nmodule.exports.ConsumerFSMEvent = ConsumerFSMEvent;\nmodule.exports.ConsumerFSMEventNames = ConsumerFSMEventNames;\nmodule.exports.MessageConsumer = MessageConsumer;\nmodule.exports.MessageConsumerEvent = MessageConsumerEvent;\nmodule.exports.MessageConsumerAcknowledgeMode = MessageConsumerAcknowledgeMode;\nmodule.exports.MessageConsumerEventName = MessageConsumerEventName;\nmodule.exports.MessageConsumerProperties = MessageConsumerProperties;\nmodule.exports.QueueBrowser = QueueBrowser;\nmodule.exports.QueueBrowserEventName = QueueBrowserEventName;\nmodule.exports.QueueBrowserProperties = QueueBrowserProperties;\n","const { Enum, assert } = require('solclient-eskit');\nconst { LOG_DEBUG, LOG_ERROR } = require('solclient-log');\n\n/**\n * @private\n */\nconst ApplicationAckState = Enum.new({\n  UNACKED:        'UNACKED',\n  ACKED_NOT_SENT: 'ACKED_NOT_SENT',\n  ACKED_SENT:     'ACKED_SENT',\n});\n\n// For the ring buffer update index, we have two key-value options:\n//  Map() - generally faster where supported\n//  Object - seems to automatically coerce keys to string, which is what we want in this case\n// By using Map and explicly creating a .key attribute and using it whenever possible,\n// we should get performance that is no worse than Object, which may have to perform that\n// coercion more often.\n\n/**\n * @private\n */\nclass ApplicationAck {\n  constructor(id, state) {\n    if (id) {\n      this.exists = true;\n      this.id = id;\n      this.key = id.toString();\n      this.state = state || ApplicationAckState.UNACKED;\n    } else {\n      this.exists = false;\n    }\n  }\n\n  set(id, state) {\n    this.exists = true;\n    this.id = id;\n    this.key = id.toString();\n    this.state = state || ApplicationAckState.UNACKED;\n  }\n\n  clear() {\n    this.exists = false;\n    this.id = null;\n    this.key = null;\n    this.state = null;\n  }\n}\n\n/**\n * @private\n */\nclass ApplicationAckRingBuffer {\n  /**\n   * Creates an instance of ApplicationAckRingBuffer. A standard ring buffer except that\n   * it reserves an empty entry so that an operation can occur during insert that includes\n   * both the new element and any element to be evicted. Also includes an ID-to-index map\n   * to speed updates.\n   *\n   * @param {Number} size The number of entries in the ring. Effective size is (size - 1).\n   * @memberof ApplicationAckRingBuffer\n   */\n  constructor(size) {\n    LOG_DEBUG('Creating application ack ring buffer with size ', size, ' retained size', size - 1);\n    assert(size >= 2); // one always free doesn't work with < 2 elements\n    this._size = size;\n    this._insertIndex = 0;\n    /**\n     * @property {Array.<?ApplicationAck>}\n     */\n    this._buffer = Array(size).fill(null).map(() => new ApplicationAck());\n    /**\n     * @property {Map.<String, Number>}\n     */\n    this._index = new Map();\n  }\n\n  reset() {\n    this._insertIndex = 0;\n    this._buffer.forEach((ack) => { ack.exists = false; });\n    this._index.clear();\n  }\n\n  /**\n   * @param {Long} id The id of the new entry\n   * @param {function(ApplicationAck)} beforeEvictCallback Call this before operation completes\n   * @returns {any} Return value of beforeEvictCallback\n   * @private\n   */\n  insert(id, beforeEvictCallback) {\n    assert(beforeEvictCallback);\n    assert(id);\n\n    const size = this._size;\n    const buffer = this._buffer;\n    const index = this._index;\n    const insertIndex = this._insertIndex;\n\n    /*\n     * Because of the postprocessing step, we are not re-entrant safe. It is expected\n     * that we are called from TCP -> Transport -> Session -> acceptMessage().\n     * This assert verifies that the postprocess cleanup has happened.\n     */\n    assert(!buffer[insertIndex].exists, 'Invariant not enforced (before): insert index not empty');\n\n    // First, insert.\n    const inserting = buffer[insertIndex];\n    inserting.set(id, ApplicationAckState.UNACKED);\n    if (index.has(inserting.key)) {\n      LOG_ERROR(`Duplicate ID: ${index.get(inserting.key)} insertIndex: ${insertIndex}`);\n    }\n    index.set(inserting.key, insertIndex);\n\n    const evictingIndex = (insertIndex + 1) % size;\n    const evicting = buffer[evictingIndex];\n    let result;\n    try {\n      result = beforeEvictCallback(evicting.exists ? evicting : null);\n    } finally {\n      // Always clean up to keep the RB in a consistent state.\n      // If inProgressCallback threw, this runs before the exception propagates.\n\n      // Update insert index for next operation.\n      this._insertIndex = (insertIndex + 1) % size;\n\n      if (evicting.exists) {\n        index.delete(evicting.key);\n        evicting.clear();\n      }\n    }\n\n    assert(!buffer[this._insertIndex].exists, 'Invariant not enforced (after): insert index not empty');\n    return result;\n  }\n\n  /**\n   * Returns the number of elements in this ringbuffer. Will increase to\n   * one less than the size provided to the constructor as the buffer is used.\n   *\n   * @readonly\n   * @memberof ApplicationAckRingBuffer\n   */\n  get length() {\n    return this._index.size;\n  }\n\n  /**\n   * Returns the first element in the ring buffer.\n   *\n   * This could be called from the evict callback, so insert needs to be sure\n   * that internal state is correct for that scenario.\n   *\n   * The expected case is that the first element is at insertIndex + 1, but if the\n   * buffer has not been filled yet, we will iterate the buffer and skip nonexistent\n   * elements to find it.\n   *\n   * This is a little inefficient until we have received this._size messages, but after\n   * that it is more efficient than maintaining a read pointer.\n   *\n   * @returns {?ApplicationAck} The first ack in the buffer.\n   */\n  front() {\n    if (this.length === 0) return null;\n\n    const buffer = this._buffer;\n    const insertIndex = this._insertIndex;\n    const size = this._size;\n    const firstIndex = (insertIndex + 1) % size;\n    // Cannot assert invariant here: insert is usually in progress.\n\n    // Buffer full case\n    if (buffer[firstIndex].exists) return buffer[firstIndex];\n\n    // Not yet filled case\n    // The last checked element for the iteration is the start point,\n    //  plus size, a full lap including the start index,\n    //  minus 1, to exclude the start\n    //  minus 1, to exclude the invariant null entry\n    for (let rawIndex = firstIndex, lastIndex = firstIndex + size - 1;\n         rawIndex <= lastIndex;\n         ++rawIndex) {\n      const readIndex = rawIndex % size;\n      const element = buffer[readIndex];\n      if (element.exists) {\n        return element;\n      }\n    }\n\n    // Buffer is completely empty\n    assert(this._index.size === 0, '#front() failed so buffer must be empty');\n    return null;\n  }\n\n  /**\n   * Rather than implementing the iterator protocol, which requires Symbol support,\n   * we'll implement a forEach that behaves as though this is an array.\n   *\n   * @param {function(ApplicationAppState, index, collection)} callback The iteration callback\n   */\n  forEach(callback) {\n    if (this.length === 0) return;\n\n    const buffer = this._buffer;\n    const size = this._size;\n    let index = 0;\n\n    for (let rawIndex = this._insertIndex + 1, lastIndex = this._insertIndex + size;\n         rawIndex <= lastIndex;\n         ++rawIndex) {\n      const readIndex = rawIndex % size;\n      const element = buffer[readIndex];\n      if (element.exists) {\n        callback(element, index++, this);\n      }\n    }\n\n    assert(index > 0, 'Not empty but did not dispatch');\n  }\n\n  /**\n   * @param {Long} id The ID to update\n   * @param {ApplicationAckState} state The new state for the ID\n   * @private\n   */\n  updateAckState(id, state) {\n    const key = id.toString(); assert(this._index.has(key), 'Ack key not found');\n    const buffer = this._buffer;\n    const updateIndex = this._index.get(key);\n    const existing = buffer[updateIndex]; assert(existing, 'Ack key has no entry');\n    existing.state = state;\n  }\n\n  /**\n   * @param {Long} id The ID to look up\n   * @returns {Boolean} `true` if this ID exists in the ringbuffer\n   */\n  has(id) {\n    const key = id.toString();\n    return this._index.has(key);\n  }\n}\n\nObject.assign(module.exports, {\n  ApplicationAckState,\n  ApplicationAck,\n  ApplicationAckRingBuffer,\n});\n","const { assert } = require('solclient-eskit');\nconst { MessageConsumer } = require('./message-consumer');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\n\nclass ConsumerFlows {\n  /**\n   * Defines a set of Guaranteed Messaging Flows.  There are two sets allocated, one\n   * for publishers (typically just one entry) and one for Subscribers.\n   * There is a separate set for flows in RECONNECTING state.\n   * These need special treatment during SESSION_DOWN:\n   * they need to be notified, but not waited on by the session FSM.\n   * Flows in _reconnectingFlows are not in _allFLows.\n   * @param {any} options Construction options\n   * @private\n   */\n  constructor() {\n    this._allFlows = new Set();\n    this._reconnectingFlows = new Set();\n    // Flows by id (UP)\n    this._flowsById = {};\n  }\n\n  add(flow) {\n    assert(flow instanceof MessageConsumer, 'Flow was not a consumer');\n    if (this._allFlows.has(flow)) {\n      return flow;\n    }\n\n    const flowUp = () => {\n      // Don't worry about flow collisions -- the router assigned the new flow to the same ID\n      // so it won't address the old flow. Retain the old flow in _allFlows and make sure we\n      // dispose the right flow.\n      this._flowsById[flow.flowId] = flow;\n    };\n    const flowDisposed = () => {\n      const flowId = flow.flowId;\n      this._allFlows.delete(flow);\n      this._reconnectingFlows.delete(flow);\n      const flowById = this._flowsById[flowId];\n      // If this test fails, the router reassigned the flow ID, and we were only keeping the\n      // _allFlows set reference for blanket cleanup.\n      if (flowById === flow) {\n        delete this._flowsById[flowId];\n      }\n      // Flow will be disposed and this will happen automatically\n    };\n    const flowReconnecting = () => {\n      flowDisposed();\n      this._reconnectingFlows.add(flow);\n    };\n    const flowReconnected = () => {\n      flowUp();\n      this._allFlows.add(flow);\n      this._reconnectingFlows.delete(flow);\n    };\n    const flowDown = () => {\n      this._reconnectingFlows.delete(flow);\n    };\n\n    flow._on(MessageConsumerEventName.UP, flowUp);\n    flow._on(MessageConsumerEventName.RECONNECTED, flowReconnected);\n    flow._on(MessageConsumerEventName.DISPOSED, flowDisposed);\n    flow._on(MessageConsumerEventName.RECONNECTING, flowReconnecting);\n    flow._on(MessageConsumerEventName.DOWN, flowDown);\n    flow._on(MessageConsumerEventName.DOWN_ERROR, flowDown);\n\n    this._allFlows.add(flow);\n    return flow;\n  }\n\n  get flows() {\n    return Array.from(this._allFlows);\n  }\n  get reconnectingFlows() {\n    return Array.from(this._reconnectingFlows);\n  }\n\n  getFlowById(flowId) {\n    return this._flowsById[flowId];\n  }\n\n  disposeAll() {\n    this._allFlows.forEach(flow => flow.dispose());\n  }\n\n}\n\nmodule.exports.ConsumerFlows = ConsumerFlows;\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * Events on the Consumer FSM\n * @enum {string}\n ********************************************************************************/\nconst ConsumerFSMEventNames = {\n  SESSION_UP:                 'SESSION_UP',\n  SESSION_UP_NO_AD:           'SESSION_UP_NO_AD',\n  SESSION_DOWN:               'SESSION_DOWN',\n  SESSION_DISCONNECT:         'SESSION_DISCONNECT',\n  FLOW_FAILED:                'FLOW_FAILED',\n  FLOW_UP:                    'FLOW_UP',\n  FLOW_ACTIVE_IND:            'FLOW_ACTIVE_IND',\n  FLOW_CLOSE:                 'FLOW_CLOSE',\n  FLOW_OPEN:                  'FLOW_OPEN',\n  FLOW_UNBOUND:               'FLOW_UNBOUND',\n  ACK:                        'ACK',\n  ACK_TIMEOUT:                'ACK_TIMEOUT',\n  BIND_TIMEOUT:               'BIND_TIMEOUT',\n  CREATE_TIMEOUT:             'CREATE_TIMEOUT',\n  UNBIND_TIMEOUT:             'UNBIND_TIMEOUT',\n  CAN_SEND:                   'CAN_SEND',\n  TRANSPORT_ERROR:            'TRANSPORT_ERROR',\n  DISPOSE:                    'DISPOSE',\n  VIRTUALROUTER_NAME_CHANGED: 'VIRTUALROUTER_NAME_CHANGED',\n  RECONNECT_INTERVAL_TIMEOUT: 'RECONNECT_INTERVAL_TIMEOUT',\n  BIND_RESPONSE:              'BIND_RESPONSE',\n  CREATE_FAILED:              'CREATE_FAILED',\n  CREATE_SUCCESS:             'CREATE_SUCCESS',\n};\n\nmodule.exports.ConsumerFSMEventNames = Enum.new(ConsumerFSMEventNames);\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { FsmEvent } = require('solclient-fsm');\n\n/**\n *\n * ConsumerFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the Subscriber FSM.  This extension provides members to carry information specfic to\n * the Subscriber FSM transitions.\n *\n * @extends FsmEvent\n * @private\n */\nclass ConsumerFSMEvent extends FsmEvent {\n  constructor(spec, details) {\n    super(spec);\n    this.details = details;\n  }\n}\n\nmodule.exports.ConsumerFSMEvent = ConsumerFSMEvent;\n","const SMFLib = require('solclient-smf');\nconst { ApplicationAck,\n        ApplicationAckRingBuffer,\n        ApplicationAckState } = require('./application-acks');\nconst { assert } = require('solclient-eskit');\nconst { CapabilityType } = require('solclient-session');\nconst { ConsumerFSMEvent } = require('./consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./consumer-fsm-event-names');\nconst { ConsumerStateNames } = require('./consumer-state-names');\nconst { DestinationFromNetwork,\n        DestinationType,\n        Queue,\n        Topic } = require('solclient-destination');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { LogFormatter } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { MessageDispatcher } = require('./message-dispatcher');\nconst { PrivateFlowEventName } = require('solclient-flow');\nconst { QueueAccessType,\n        QueueDescriptor,\n        QueuePermissions,\n        QueueProperties,\n        QueueType } = require('solclient-queue');\nconst { RgmidFactory } = require('solclient-message');\nconst { State, StateMachine } = require('solclient-fsm');\nconst { Stats } = require('solclient-stats');\nconst { StatType } = require('solclient-stats');\nconst { Timer } = require('solclient-events');\nconst { TransportAcks,\n        TransportAckResult } = require('./transport-acks');\n\nconst RING_BUFFER_SIZE = 512;\nconst ZERO_APP_ACK = new ApplicationAck(Long.UZERO, ApplicationAckState.ACKED_SENT);\n\nclass ConsumerFSM extends StateMachine {\n  constructor({ name, consumer, sessionInterface, properties } = {}) {\n    super({ name });\n\n    const fsm = this;\n    const formatter = function formatter(...args) {\n      return [\n        `[session=${sessionInterface.sessionIdHex}]`,\n        `[message-consumer-fsm=${consumer.flowIdDec}]`,\n        ...args,\n      ];\n    };\n    const logger = this.logger = new LogFormatter(formatter);\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n      LOG_ERROR,\n    } = logger;\n    this.log = logger.wrap(this.log, this);\n\n    const autoAck = properties.acknowledgeMode === MessageConsumerAcknowledgeMode.AUTO;\n\n    this._consumer = consumer;\n    this._sessionInterface = sessionInterface;\n\n    // Save copies of properties accessed outside the constructor\n    this._acknowledgeTimeoutInMsecs = properties.acknowledgeTimeoutInMsecs;\n    this._acknowledgeThreshold = properties.acknowledgeThreshold;\n    this._localPreferredWindowSize = properties.windowSize;\n    this._localMaxWindowSize = properties.windowSize;\n\n    this._messageDispatch = new MessageDispatcher({ emitter: consumer, autoAck, logger });\n\n    this._stats = new Stats();\n\n    this._resetRemoteConnectionState();\n    this._resetLocalConnectionState();\n\n    // Flag to delay flow dispose() for autoAck.\n    this._midDispatch = false;\n    // Save a copy to clear out on first successful bind\n    this._replayStartLocation = properties.replayStartLocation;\n\n    this._errorCausingReconnect = null;\n    //**********************************************************************************************\n    // A bit of infrastructure around post-event actions, which includes maintaining a queue of\n    // pending actions, and some logic to pre-process the actions before performing them.\n\n    // These should not be the same as any MessageConsumerEventName value or they will collide in\n    // the actionLocations object during event pre-processing.\n    const emitEventActionType = 'EMIT';\n    const startDispatchActionType = 'DISPATCH';\n    const stopDispatchActionType = 'NO_DISPATCH';\n\n    let postEventActions = [];\n    function preprocessPostEventActions(startIndex) {\n      // first pre-process post event actions.  This isn't an exhaustive search of every possible\n      // combination of event sequences, as many are practically impossible, and therefore\n      // impossible to test.  We only handle sequences that are known to be possible.  If there\n      // are other sequences that need to be considered, we can add processing for them when we\n      // know they are possible.\n      LOG_TRACE(`Pre-processing post event action list @${startIndex}`, postEventActions);\n      const actionLocations = {};\n      postEventActions.forEach((action, i, arr) => {\n        function cancelAction(firstActionName, cancellingActionName) {\n          if (actionLocations[firstActionName] === undefined) {\n            return;\n          }\n          const firstLocation = actionLocations[firstActionName];\n          LOG_TRACE(`Cancelling post event action ${firstActionName}@${firstLocation} with ${\n            cancellingActionName}@${i}`);\n          actionLocations[firstActionName] = undefined;\n          arr[firstLocation] = null;\n          arr[i] = null;\n        }\n        if ((i < startIndex) || (!action)) {\n          LOG_TRACE(`Skip n/a action@${i}, start: ${startIndex}, action:`, action);\n          return;\n        }\n        switch (action.type) {\n          case emitEventActionType:\n            switch (action.data) {\n              case MessageConsumerEventName.UP:\n              case MessageConsumerEventName.ACTIVE:\n              case MessageConsumerEventName.RECONNECTED:\n                actionLocations[action.data] = i;\n                break;\n\n              case MessageConsumerEventName.DOWN:\n              case MessageConsumerEventName.DOWN_ERROR:\n              //case MessageConsumerEventName.RECONNECTED: // I can't get this to work :-/\n                cancelAction(MessageConsumerEventName.UP, action.data);\n                break;\n\n              case MessageConsumerEventName.INACTIVE:\n                cancelAction(MessageConsumerEventName.ACTIVE, action.data);\n                break;\n\n              default:\n                LOG_ERROR(`Unexpected event in post-event action: ${action.data}`);\n                break;\n            }\n            break;\n\n          case startDispatchActionType:\n            actionLocations[action.type] = i;\n            break;\n\n          case stopDispatchActionType:\n            cancelAction(startDispatchActionType, action.type);\n            break;\n\n          default:\n            break;\n        }\n      });\n    }\n\n    function processPostEventActions() {\n      let preprocessedActions = 0;\n      let i;\n\n      // Now we've pre-processed the list, execute any remaining non-null entries.  We don't use a\n      // foreach loop since foreach won't include elements added after processing has started.  This\n      // can occur if a callback causes more postEventActions to be added.\n      LOG_TRACE('Executing post event action list', postEventActions);\n      for (i = 0; i < postEventActions.length; ++i) {\n        if (preprocessedActions < postEventActions.length) {\n          preprocessPostEventActions(i);\n          preprocessedActions = postEventActions.length;\n        }\n        const action = postEventActions[i];\n        LOG_TRACE(`Action ${i}:`, action);\n        if (!action) {\n          continue;\n        }\n        switch (action.type) {\n          case emitEventActionType:\n            if (action.error !== undefined) {\n              consumer._emit(action.data, action.error);\n            } else {\n              consumer._emit(action.data);\n            }\n            break;\n\n          case stopDispatchActionType:\n            // We don't actually do the stop here -- it is always done when this is enqueued.\n            // The reason for enqueuing this event is to that it can cencel a startDispatch, if\n            // present.\n            break;\n\n          case startDispatchActionType:\n            this.requestStartDispatchFSM();\n            break;\n\n          default:\n            LOG_ERROR(`Unhandled post event action type: ${action.type}`);\n            break;\n        }\n      }\n      postEventActions = [];\n    }\n\n    function addPostEventAction(type, data, error) {\n      let newEvent;\n      if (data !== undefined) {\n        newEvent = { type, data, error };\n      } else {\n        newEvent = { type };\n      }\n      postEventActions.push(newEvent);\n      LOG_TRACE(`Added post event action ${postEventActions.length}:`, newEvent);\n      if (postEventActions.length === 1) {\n        fsm.setPostEventAction(processPostEventActions);\n      }\n    }\n\n    const addEventToEmit = (event, error) => {\n      if (!properties.activeIndicationEnabled) {\n        if ((event === MessageConsumerEventName.INACTIVE) ||\n            (event === MessageConsumerEventName.ACTIVE)) {\n          LOG_TRACE(`Skip emitting ${event} due to disabled flow active indications`);\n          return;\n        }\n      }\n      addPostEventAction(emitEventActionType, event, error);\n    };\n    const requestStartDispatch = () => {\n      addPostEventAction(startDispatchActionType);\n    };\n    const requestStopDispatch = () => {\n      // We do the stop inline, then add a post-event action so that it can have the effect of\n      // cancelling a previous start.  It will not execute the stop when processed however since we\n      // have already done it here.\n      this.requestStopDispatchFSM();\n      addPostEventAction(stopDispatchActionType);\n    };\n\n    this._addEventToEmit = addEventToEmit;\n    this._requestStartDispatch = requestStartDispatch;\n    this._requestStopDispatch = requestStopDispatch;\n\n    // End of post-event action infrastructure\n\n    // Utility functions\n    function emitBindFailed(error) {\n      assert(error instanceof OperationError);\n      consumer._emit(MessageConsumerEventName.CONNECT_FAILED_ERROR, error);\n    }\n\n    function emitRebindFailed(error) {\n      assert(error instanceof OperationError);\n      consumer._emit(MessageConsumerEventName.DOWN_ERROR, error);\n    }\n\n    function verifyEndpointSubscription(destination) {\n      let error = null;\n      if (destination) {\n        const subInfo = destination.getSubscriptionInfo();\n        if (subInfo && (subInfo.isShare || subInfo.isNoExport) &&\n            !fsm._sessionInterface.isCapable(CapabilityType.SHARED_SUBSCRIPTIONS)) {\n          error = new OperationError('Shared Subscriptions not Supported',\n                                     ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED);\n        }\n      }\n      return error;\n    }\n    //**********************************************************************************************\n    // ChoicePoints on transitions.\n    // Not every transition is  unilateral. In some cases, particularly with session-up/flow-open\n    // we want to check the session capabilities, which will effect which transition is taken.\n    // The following choicePoints are NOT generic, they may only be used in the documented states\n    // to control the transition out of that state.\n    // ChoicePoints must return a new state (this.transitionTo())\n    //\n    // checkCapabiltiesChoicePoint - Check the session capabilities against the consumer properties.\n    // If all requested properties are supported by the session capabilties, transitionTo(BindSent).\n    // otherwise emitError and transitionTo unbound.\n    // Used in:  fsm.Unbound.AwaitFlowOpen\n    //           fsm.Unbound.AwaitSessionUp\n    //\n    function checkCapabilitiesChoicePoint(curState) {\n      let error = null;\n      if (fsm._replayStartLocation !== undefined &&\n        !fsm._sessionInterface.isCapable(CapabilityType.MESSAGE_REPLAY)) {\n        error = new OperationError('Message Replay Not Supported',\n              ErrorSubcode.REPLAY_NOT_SUPPORTED);\n      } else if (properties.topicEndpointSubscription) {\n        error = verifyEndpointSubscription(properties.topicEndpointSubscription);\n      }\n\n      if (error) {\n        // Transition to Unbound means we wait for both SessionUp and flow open, which is rare.\n        // It makes sense here though, because the next session might be capable,\n        // but this one surely isn't.\n        // (and FLOW_DOWN is emitted, so we are waiting for both.)\n        return curState.transitionTo(fsm.Unbound, () =>\n              emitBindFailed(error));\n      }\n      // OK to bind\n      if (properties.createIfMissing &&\n        properties.queueDescriptor &&\n        properties.queueDescriptor.durable) {\n        return curState.transitionTo(fsm.CreateSent);\n      }\n      return curState.transitionTo(fsm.BindSent);\n    }\n    // End of ChoicePoints\n    //*********************************************************************************************\n    // FSM config\n\n    function handleAccidentalBind(msg) {\n      // Unbind with timout-recursion using flowid.\n\n      LOG_TRACE(`handleAccidentalBind mssg: ${msg}`);\n      const correlationTag = sessionInterface.getCorrelationTag();\n      const message = SMFLib.AdProtocolMessage.getCloseMessageConsumer(msg.flowId, correlationTag);\n      sessionInterface.sendControl(message);\n      sessionInterface.enqueueRequest(\n        correlationTag,\n        () => this.handleAccidentalBind(msg),\n        properties.connectTimeoutInMsecs,\n        null,\n        null); //ignore response. Maybe log?\n    }\n\n    this.unhandledEventReaction(function onUnhandledEvent(event) {\n      switch (event.getName()) {\n        case ConsumerFSMEventNames.VIRTUALROUTER_NAME_CHANGED:\n          LOG_INFO('VirtualRouter name change: clearing all acknowledgement state');\n          fsm._resetRemoteConnectionState();\n          return this;\n        case ConsumerFSMEventNames.FLOW_UNBOUND:\n          LOG_INFO('Received unsolicited unbind. Flow may be manually reconnected.');\n          return this.transitionToUnbound(MessageConsumerEventName.DOWN_ERROR, event.details);\n        case ConsumerFSMEventNames.DISPOSE:\n          fsm._dispose();\n          return fsm.getCurrentState().terminate();\n        case ConsumerFSMEventNames.BIND_RESPONSE:\n          LOG_TRACE('Unhandled bind, assuming accidental BIND duplication');\n          handleAccidentalBind(event.details);\n          return this;\n        default:\n          LOG_TRACE(`Ignoring event ${event.getName()} in state ${this.getCurrentState().getName()}`);\n          return this;\n      }\n    });\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.Unbound, (context) => {\n        LOG_INFO(`Starting ${context.getStateMachine().getName()}`);\n      });\n    });\n\n    /*\n      We don't transition directly from Unbound to BindSent.\n      We need the following events:\n       * FLOW_OPEN\n       * SESSION_UP\n      (The session ensures we get SESSION_UP or SESSION_UP_NO_AD if we are created\n      and there is a session already up.)\n      The Unbound base state implements transitions to its wait state children:\n       * FLOW_OPEN -> AwaitSessionUp\n       * SESSION_UP -> AwaitFlowOpen\n      It also has the following transitions that pull the FSM out of its children\n      and back to itself:\n       * FLOW_CLOSE\n       * SESSION_DOWN\n      The child states can override these with internal transitions.\n     */\n    this.Unbound = new State({\n      name:          ConsumerStateNames.UNBOUND,\n      parentContext: fsm,\n    }, {\n      emitDisabledEvent() {\n        consumer._emit(MessageConsumerEventName.GM_DISABLED);\n      },\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSesssionDisconnect() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_OPEN, function onFlowOpen() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp); // Enter child state\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        if (fsm._sessionInterface.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME)) {\n          return this.transitionTo(fsm.Unbound.AwaitFlowOpen); // Enter child state\n        }\n        LOG_WARN(`Consumer is not supported by router for this client on sessionId 0x${\n                 fsm._sessionInterface.sessionIdHex}`);\n        // Act as if the child state handled this\n        return this.internalTransition(() => this.emitDisabledEvent());\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP_NO_AD, function onSessionUpNoAD() {\n        // Act as if the child state handled this\n        return this.internalTransition(() => this.emitDisabledEvent());\n      })\n      .exit(() => {\n        fsm._connectAttempts = properties.connectAttempts;\n      });\n\n    /*\n      In this state, we have received FLOW_OPEN, but no SESSION_UP.\n      SESSION_DOWN does not cancel this wait, so we must override the\n      parent and explicitly do nothing.\n    */\n    this.Unbound.AwaitSessionUp = new State({\n      name:          ConsumerStateNames.UNBOUND_AWAIT_SESSION_UP,\n      parentContext: this.Unbound,\n    }, {\n      emitBindWaiting() {\n        consumer._emit(PrivateFlowEventName.BIND_WAITING);\n      },\n    })\n      .entry(function onEntry() {\n        this.emitBindWaiting();\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.internalTransition(); // Don't exit; continue waiting\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.internalTransition(); // Don't exit; continue waiting\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        return checkCapabilitiesChoicePoint(this);\n      });\n\n    /*\n      In this state, we have received SESSION_UP but not FLOW_OPEN.\n      If we get FLOW_OPEN, attempt to bind. Any other event is handled\n      by the parent.\n     */\n    this.Unbound.AwaitFlowOpen = new State({\n      name:          ConsumerStateNames.UNBOUND_AWAIT_FLOWOPEN,\n      parentContext: this.Unbound,\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_OPEN, function onFlowOpen() {\n        return checkCapabilitiesChoicePoint(this);\n      });\n    // Factored out the extension object from the State constructor for reuse in\n    // flow auto-reconnect sister-states.\n    this.BindSentExtensions = {\n      sendBindRequest() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const transportAcks = fsm._transportAcks;\n\n        fsm._endpointEnsure();\n        const endpoint = fsm._endpoint;\n        const subscription = fsm._subscription;\n\n        const message = SMFLib.AdProtocolMessage.getOpenMessageConsumer(\n          properties.queueDescriptor,\n          properties.queueProperties,\n          endpoint,\n          subscription,\n          correlationTag,\n          properties.windowSize,\n          properties.noLocal,\n          properties.activeIndicationEnabled,\n          transportAcks.lastAcked,\n          transportAcks.lastReceived,\n          properties.browser,\n          fsm._replayStartLocation,\n          consumer.endpointErrorId);\n        sessionInterface.sendControl(message);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        this.handleBindTimeout.bind(this),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        this.handleBindResponse.bind(this));\n        LOG_TRACE('Sent consumer bind request with arguments', [\n          properties.queueDescriptor,\n          properties.queueProperties,\n          endpoint,\n          subscription,\n          correlationTag,\n          properties.windowSize,\n          properties.noLocal,\n          properties.activeIndicationEnabled,\n          transportAcks.lastAcked,\n          transportAcks.lastReceived,\n          properties.browser,\n          fsm._replayStartLocation,\n          consumer.endpointErrorId]);\n      },\n      cancelBindRequestTimer() {\n        LOG_TRACE('Cancelling bindRequestTimer.');\n        this.bindRequestTimer.cancel();\n      },\n      handleBindTimeout() {\n        LOG_INFO('Bind timeout');\n        fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.BIND_TIMEOUT }));\n      },\n      handleExpectedBind(msg) {\n        const accessTypeOrDefault = x => (x === undefined ? QueueAccessType.EXCLUSIVE : x);\n\n        const attrs = {\n          lastMsgIdAcked:       msg.getLastMsgIdAcked(),\n          flowId:               msg.getFlowId(),\n          accessType:           accessTypeOrDefault(msg.getAccessType()),\n          topicEndpointBytes:   msg.getTopicEndpointBytes(),\n          grantedPermissions:   msg.getGrantedPermissions(),\n          allOthersPermissions: msg.getAllOthersPermissions(),\n          respectsTTL:          msg.getRespectsTTL(),\n          activeFlow:           msg.getActiveFlow(),\n          wantFlowChangeNotify: msg.getWantFlowChangeNotify(),\n          discardBehavior:      msg.getQueueDiscardBehavior(),\n          deliveryCountSent:    msg.getEndpointDeliveryCountSent(),\n          endpointId:           msg.getEndpointId(),\n          maxUnackedMessages:   msg.getMaxUnackedMessages(),\n          endpointErrorId:      msg.getEndpointErrorId(),\n          spoolerUniqueId:      msg.getSpoolerUniqueId(),\n          quota:                msg.getQuota(),\n          maxMsgSize:           msg.getMaxMsgSize(),\n          maxRedelivery:        msg.getMaxRedelivery(),\n        };\n        LOG_DEBUG('BIND response attributes:', attrs);\n\n        Object.assign(consumer, {\n          accessType:           attrs.accessType,\n          queueDiscardBehavior: attrs.discardBehavior,\n          deliveryCountSent:    attrs.deliveryCountSent,\n          endpointId:           attrs.endpointId,\n          respectsTTL:          attrs.respectsTTL,\n          flowId:               attrs.flowId,\n          permissions:          attrs.grantedPermissions,\n          wantFlowChangeNotify: attrs.wantFlowChangeNotify,\n          endpointErrorId:      attrs.endpointErrorId,\n          spoolerUniqueId:      attrs.spoolerUniqueId,\n        });\n        if (fsm._sessionInterface.isCapable(CapabilityType.BR_REPLAY_ERRORID)) {\n          consumer.endpointErrorId = attrs.endpointErrorId;\n        }\n\n        if (attrs.topicEndpointBytes && attrs.topicEndpointBytes.length) {\n          attrs.endpoint = DestinationFromNetwork.createDestinationFromBytes(\n            attrs.topicEndpointBytes);\n          LOG_DEBUG('Overwriting local endpoint:', fsm._endpoint, 'with remote:', attrs.endpoint);\n          fsm._endpoint = attrs.endpoint;\n          const consumerProperties = fsm._consumer._properties;\n          consumerProperties.queueDescriptor = new QueueDescriptor({\n            name:    attrs.endpoint.name,\n            type:    consumerProperties.queueDescriptor.type,\n            durable: consumerProperties.queueDescriptor.durable,\n          });\n        }\n\n        const consumerProperties = fsm._consumer._properties;\n        consumerProperties.queueProperties = new QueueProperties({\n          respectsTTL:          attrs.respectsTTL,\n          permissions:          attrs.allOthersPermissions,\n          quotaMB:              attrs.quota,\n          maxMessageSize:       attrs.maxMsgSize,\n          discardBehavior:      attrs.discardBehavior,\n          maxMessageRedelivery: attrs.maxRedelivery,\n          accessType:           attrs.accessType,\n        });\n        if (!consumerProperties.queueProperties.permissions) {\n          consumerProperties.queueProperties.permissions = QueuePermissions.NONE;\n        }\n\n\n        Object.assign(fsm, {\n          _active:           attrs.activeFlow,\n          _remoteWindowSize: attrs.maxUnackedMessages,\n        });\n\n        if (Long.UZERO.eq(fsm._transportAcks.lastAcked)) {\n          fsm._transportAcks.lastAcked = attrs.lastMsgIdAcked || Long.UZERO;\n        } else {\n          LOG_DEBUG(`Retaining last acked/last received: ${fsm._transportAcks}`);\n        }\n        //return this.transitionTo(fsm.FlowUp);\n        //return fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_UP }));\n      },\n      handleBindResponse(msg) {\n        LOG_TRACE(`handleBindResponse called for message ${msg}`);\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.BIND) {\n          LOG_INFO(`Unexpected message type in bind response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n          return fsm.processEvent(\n            new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.FLOW_FAILED },\n              new OperationError(`Unexpected bind response: ${\n                                 SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`,\n                                 ErrorSubcode.PROTOTOCOL_ERROR)));\n        }\n\n        const header = msg.smfHeader;\n        const responseCode = header.pm_respcode;\n\n        if (responseCode === null) {\n          // Drop message and increment stats. Flow will time out\n          this._consumer.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Open-Publisher-Flow Request message on sessionId 0x${\n                    this._sessionInterface.sessionIdHex}`);\n          return undefined;\n        }\n\n        if (responseCode !== 200) {\n          const description = header.pm_respstr;\n          const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                            description);\n          LOG_INFO('Flow failed (bind):', responseCode, description, ErrorSubcode.describe(errorSubcode));\n          LOG_DEBUG('subcode:', errorSubcode);\n          return fsm.processEvent(new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.FLOW_FAILED },\n              new OperationError(description, errorSubcode, { responseCode })));\n        }\n\n        const respEvent = { name: ConsumerFSMEventNames.BIND_RESPONSE };\n        return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n      },\n    };\n    this.BindSent = new State({\n      name:          ConsumerStateNames.BIND_SENT,\n      parentContext: fsm,\n    }, this.BindSentExtensions)\n      .entry(function onEntry() {\n        fsm._connectAttempts--;\n        this.sendBindRequest();\n        this.bindRequestTimer = Timer.newTimeout(properties.connectTimeoutInMsecs,\n                                                 this.handleBindTimeout);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.DOWN));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.BIND_TIMEOUT, function onBindTimeout() {\n        LOG_TRACE(`Bind timeout, connectAttempts left: ${fsm._connectAttempts}`);\n        if (fsm._connectAttempts > 0) {\n          return this.externalTransitionTo(fsm.BindSent);\n        }\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen,\n                                 () => emitBindFailed(\n                                    new OperationError('Bind failed due to timeout',\n                                                       ErrorSubcode.TIMEOUT)));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_FAILED, function onFlowFailed(evt) {\n        // Act like a newly created flow\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitBindFailed(evt.details));\n      })\n      .reaction(ConsumerFSMEventNames.BIND_RESPONSE, function onBindResponse(event) {\n        this.handleExpectedBind(event.details);\n        //return this;\n        return this.transitionTo(fsm.FlowUp);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.FlowUp);\n      })\n      .exit(function onExit() {\n        this.cancelBindRequestTimer();\n      });\n    this.Reconnecting = new State({\n      name:          ConsumerStateNames.RECONNECTING,\n      parentContext: fsm,\n    })\n      .entry(function onEntry() {\n        LOG_TRACE('RECONNECTING onEntry: emitting RECONNECTING, resetting attempt counters');\n        LOG_TRACE(`this._errorCausingReconnect: ${this._errorCausingReconnect}`);\n        LOG_TRACE(`fsm._errorCausingReconnect: ${fsm._errorCausingReconnect}`);\n        consumer._emit(MessageConsumerEventName.RECONNECTING, fsm._errorCausingReconnect);\n        fsm._connectAttempts = properties.connectAttempts;\n        fsm.reconnectAttempts = properties.reconnectAttempts;\n      })\n      .initial(\n        function onInitial() {\n          return this.transitionTo(fsm.Reconnecting.RBindSent);\n        })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.transitionTo(fsm.Reconnecting.RAwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Reconnecting.RAwaitSessionUp);\n      });\n    this.Reconnecting.RAwaitSessionUp = new State({\n      name:          ConsumerStateNames.RECONNECTING_AWAIT_SESSION_UP,\n      parentContext: this.Reconnecting,\n    })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        fsm._connectAttempts = properties.connectAttempts;\n        return this.transitionTo(fsm.Reconnecting.RBindSent);\n      });\n    this.Reconnecting.RBindSent = new State({\n      name:          ConsumerStateNames.RECONNECTING_BIND_SENT,\n      parentContext: this.Reconnecting,\n    }, this.BindSentExtensions)\n      .entry(function onEntry() {\n        fsm._connectAttempts--;\n        this.sendBindRequest();\n        this.bindRequestTimer = Timer.newTimeout(properties.connectTimeoutInMsecs,\n                                                 this.handleBindTimeout);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        // TODO: This is probably wrong in the original state machine too:\n        // flowid is either missing or stale. Keeping it the same as there for now.\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.BIND_TIMEOUT, function onBindTimeout() {\n        LOG_TRACE(`Bind timeout during reconnect, connectAttempts left: ${fsm._connectAttempts}`);\n        if (fsm._connectAttempts > 0) {\n          return this.externalTransitionTo(fsm.Reconnecting.RBindSent);\n        }\n        // Running out of rebinds is a non rebindable failure, so break the reconect loop.\n        LOG_TRACE('Running out of rebinds is a non rebindable failure, so break the reconect loop.');\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen,\n                                 () => emitBindFailed(\n                                    new OperationError('Rebind failed due to timeout',\n                                                       ErrorSubcode.TIMEOUT)));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_FAILED, function onFlowFailed(evt) {\n        // These three reconnect-errors are \"rebindable\",\n        // anything else breaks the reconnect loop.\n        if (fsm.reconnectAttempts > 0 || fsm.reconnectAttempts === -1) {\n          if (evt && evt.details && evt.details.subcode) {\n            if (evt.details.subcode === ErrorSubcode.QUEUE_SHUTDOWN ||\n              evt.details.subcode === ErrorSubcode.TOPIC_ENDPOINT_SHUTDOWN ||\n              evt.details.subcode === ErrorSubcode.GM_UNAVAILABLE) {\n              LOG_TRACE(`ReconnectAttempts left: ${fsm.reconnectAttempts} subcode: ${evt.details.subcode}, giving it another shot.`);\n              return this.transitionTo(fsm.Reconnecting.RAwaitTimer);\n            }\n          } else {\n            LOG_DEBUG(`Hmm, no subcode in FLOW_FAILED? ${evt}`);\n          }\n        } else {\n          LOG_TRACE(`Ran out of reconnectAttempts: ${fsm.reconnectAttempts}`);\n        }\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitRebindFailed(evt.details));\n      })\n      .reaction(ConsumerFSMEventNames.BIND_RESPONSE, function onBindResponse(event) {\n        this.handleExpectedBind(event.details);\n        //return this;\n        return this.transitionTo(fsm.FlowUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.RECONNECTED));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.FlowUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.RECONNECTED));\n                                 //() => consumer._emit(MessageConsumerEventName.RECONNECTING));\n      })\n      .exit(function onExit() {\n        this.cancelBindRequestTimer();\n      });\n    this.Reconnecting.RAwaitTimer = new State({\n      name:          ConsumerStateNames.RECONNECTING_AWAIT_TIMER,\n      parentContext: this.Reconnecting,\n    }, {\n      handleReconnectIntervalTimeout() {\n        LOG_DEBUG('Reconnect interval timeout (expected)');\n        fsm.processEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.RECONNECT_INTERVAL_TIMEOUT }));\n      },\n      cancelReconnectIntervalTimer() {\n        this.reconnectIntervalTimer.cancel();\n      },\n\n    }).entry(function onEntry() {\n      if (fsm.reconnectAttempts > 0) {\n        --fsm.reconnectAttempts;\n      }\n      LOG_TRACE(`Setting up timer for ${properties.reconnectIntervalInMsecs}. reconnectAttempts left: ${fsm.reconnectAttempts}`);\n      this.reconnectIntervalTimer = Timer.newTimeout(properties.reconnectIntervalInMsecs,\n                                                     this.handleReconnectIntervalTimeout);\n    }).exit(function onExit() {\n      this.cancelReconnectIntervalTimer();\n    }).reaction(ConsumerFSMEventNames.RECONNECT_INTERVAL_TIMEOUT, function onTimeout() {\n      fsm._connectAttempts = properties.connectAttempts;\n      return this.transitionTo(fsm.Reconnecting.RBindSent);\n    })\n    ;\n\n    const flowUpFSM = this.FlowUp = new State({\n      name:          ConsumerStateNames.FLOW_UP,\n      parentContext: fsm,\n    })\n      .initial(\n        function onInitial() {\n          return this.transitionTo(fsm._active === 0\n            ? flowUpFSM.XferInactive\n            : flowUpFSM.Xfer);\n        }\n      )\n      .entry(() => {\n        fsm._replayStartLocation = undefined; //SOL-12945: only replay once.\n        // This is ugly, but I can't coerce the post event action queue to work with me:\n        // RECONNECTING should suppress UP.\n        if (!fsm._errorCausingReconnect) {\n          LOG_TRACE('Emittging UP, because there is no errorCausingReconnect');\n          fsm._addEventToEmit(MessageConsumerEventName.UP);\n        } else {\n          LOG_TRACE('Not emittging UP, because there is errorCausingReconnect');\n          fsm._errorCausingReconnect = null;\n        }\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDisconnect() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.DOWN));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        // Acks will be sent by UnbindSent\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UNBOUND, event =>\n        // Acks will be sent by UnbindSent\n        fsm.transitionToUnboundFromUp(\n          properties,\n          MessageConsumerEventName.DOWN_ERROR,\n          event.details)\n      );\n\n    flowUpFSM.Xfer = new State({\n      name:          ConsumerStateNames.FLOW_UP_XFER,\n      parentContext: flowUpFSM,\n    })\n      .entry(() => {\n        fsm._addEventToEmit(MessageConsumerEventName.ACTIVE);\n        fsm._sendAcks(true);\n        fsm._requestStartDispatch();\n      })\n      .exit(() => {\n        fsm._addEventToEmit(MessageConsumerEventName.INACTIVE);\n        fsm._requestStopDispatch();\n      })\n      // Here we send acks on disconnect.  Acks for the FLOW_CLOSE event are coupled to the sending\n      // of the unbind.\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        fsm._sendAcks(true);            // send acks, then...\n        return this.eventUnhandled();   // let the parent state handle the remaining steps.\n      });\n\n    flowUpFSM.XferInactive = new State({\n      name:          ConsumerStateNames.FLOW_UP_XFER_INACTIVE,\n      parentContext: flowUpFSM,\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_ACTIVE_IND, function onFlowActiveIndication() {\n        return this.transitionTo(flowUpFSM.Xfer);\n      });\n\n    this.UnbindSent = new State({\n      name:          ConsumerStateNames.UNBIND_SENT,\n      parentContext: fsm,\n    }, {\n\n      sendUnbindRequest() {\n        // Don't do this on entry to UNBIND, do it when the user\n        // wants to unbind\n\n        fsm._endpointClear();\n        try {\n          const correlationTag = sessionInterface.getCorrelationTag();\n          const message = SMFLib.AdProtocolMessage.getCloseMessageConsumer(consumer.flowId,\n                                                                           correlationTag);\n          sessionInterface.sendControl(message);\n          sessionInterface.enqueueRequest(\n            correlationTag,\n            () => this.handleUnbindTimeout(),\n            properties.connectTimeoutInMsecs,\n            null,\n            response => this.handleUnbindResponse(response));\n          LOG_INFO('Sent consumer unbind request with arguments',\n                   {\n                     flowId: consumer.flowId,\n                     correlationTag,\n                   });\n        } catch (e) {\n          LOG_INFO(`Exception in sendUnbindRequest while trying to send unbind request: ${e}`);\n          LOG_DEBUG(`Session (${sessionInterface.getCurrentStateName()}) assumed lost before flow unbind could be sent. Considering this flow unbound.`);\n          fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_UNBOUND }));\n        }\n      },\n\n      handleUnbindTimeout() {\n        LOG_INFO('Unbind timeout');\n        return fsm.processEvent(\n          new ConsumerFSMEvent({ name: ConsumerFSMEventNames.UNBIND_TIMEOUT })\n        );\n      },\n\n      handleUnbindResponse(msg) {\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.UNBIND) {\n          LOG_INFO(`Unexpected message type in bind response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n        }\n        const responseCode = msg.smfHeader.pm_respcode;\n        const description = msg.smfHeader.pm_respstr;\n        const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                          description);\n        consumer.endpointErrorId = msg.getEndpointErrorId();\n        LOG_INFO('Flow failed (unbind):', responseCode, description, ErrorSubcode.describe(errorSubcode));\n        return fsm.processEvent(new ConsumerFSMEvent(\n          { name: ConsumerFSMEventNames.FLOW_UNBOUND },\n          new OperationError(description, errorSubcode, responseCode)));\n      },\n\n    })\n      .entry(function onEntry() {\n        this.sendUnbindRequest();\n      })\n      .reaction(ConsumerFSMEventNames.UNBIND_TIMEOUT, function onUnbindTimeout() {\n        return this.externalTransitionTo(fsm.UnbindSent);\n      })\n      // The choice point will emit on this transition, not on exit, which is OK:\n      // we don't want to repeatedly dispatch \"unbound\" when the unbinds are timing out\n      .reaction(ConsumerFSMEventNames.FLOW_UNBOUND,\n                () => fsm.transitionToUnbound(MessageConsumerEventName.DOWN));\n\n\n    this.CreateSent = new State({\n      name:          ConsumerStateNames.CREATE_SENT,\n      parentContext: fsm,\n    }, {\n      sendCreateRequest() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const message = SMFLib.AdProtocolMessage.getCreate(\n          properties.queueDescriptor,\n          properties.queueProperties,\n          correlationTag);\n        sessionInterface.sendControl(message);\n        sessionInterface.enqueueRequest(\n          correlationTag,\n          this.handleCreateTimeout.bind(this),\n          properties.connectTimeoutInMsecs,\n          null,\n          this.handleCreateResponse.bind(this));\n      },\n      handleCreateTimeout() {\n        LOG_INFO('Create timeout');\n        fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.CREATE_TIMEOUT }));\n      },\n      handleCreateResponse(msg) {\n        LOG_TRACE(`handleCreateResponse called for message ${msg}`);\n\n\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.CREATE) {\n          LOG_INFO(`Unexpected message type in create response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n          return fsm.processEvent(\n            new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.CREATE_FAILED },\n              new OperationError(`Unexpected create response: ${\n                                 SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`,\n                                 ErrorSubcode.PROTOTOCOL_ERROR)));\n        }\n\n        const header = msg.smfHeader;\n        const responseCode = header.pm_respcode;\n\n        if (responseCode !== 200) {\n          const description = header.pm_respstr;\n          const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                            description);\n          LOG_INFO('Endpoint create failed:', responseCode, description, ErrorSubcode.describe(errorSubcode));\n          LOG_DEBUG('subcode:', errorSubcode);\n          if (errorSubcode === ErrorSubcode.ENDPOINT_ALREADY_EXISTS) {\n            LOG_TRACE('subcode recognized as ALREADY EXISTS:', errorSubcode);\n            const respEvent = { name: ConsumerFSMEventNames.CREATE_SUCCESS };\n            return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n          }\n          LOG_TRACE('subcode not recognized as ALREADY EXISTS:', errorSubcode);\n          return fsm.processEvent(new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.CREATE_FAILED },\n              new OperationError(description, errorSubcode, { responseCode })));\n        }\n\n        const respEvent = { name: ConsumerFSMEventNames.CREATE_SUCCESS };\n        return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n      },\n    }\n    )\n      .entry(function onEntry() {\n        //send create request\n        this.sendCreateRequest();\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_TIMEOUT, function onCreateTimeout() {\n        LOG_DEBUG('Create timeout, just moving on to bind and hoping for the best.');\n        return this.externalTransitionTo(fsm.BindSent);\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_SUCCESS, function onCreateSuccess() {\n        return this.externalTransitionTo(fsm.BindSent);\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_FAILED, function onCreateFailed(evt) {\n        // \"queue exists\" should be noticed in the response handler and emit CREATE_SUCCESS.:\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitBindFailed(evt.details));\n      });\n  }\n\n  /**\n   *\n   * @param {solace.Message} message The message being accepted by the flow.\n   * @returns {Boolean} True if the message was accepted.\n   * @private\n   */\n  acceptMessage(message) {\n    const { LOG_TRACE, LOG_DEBUG } = this.logger;\n    const messageID = message.getGuaranteedMessageId();\n    const idstr = messageID.toString();\n    const consumer = this._consumer;\n\n    if (!this._fsmDispatch) {\n      // We're disconnecting. Drop the message.\n      LOG_TRACE('Dropping message because this flow cannot acknowledge it');\n      consumer.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n      return false;\n    }\n    //Booby trap getDeliveryCount() on the message if the flow doesn't support it:\n    if (!consumer.deliveryCountSent) {\n      message.setDeliveryCount(-1);\n    }\n    // SMF flow suid can be updated via data message if there is a\n    // header parameter containing the suid. All subsequent data messages\n    // without suid must have the stored Flow suid set on data message.\n    //\n    // Update flow with message suid if and only if there was an initialized\n    // suid from the flow bind response.\n    // There is a legacy router case where suid are passed opaquely through the\n    // network of brokers on the message. In the case where a suid is present\n    // on a message without a suid on the bind response this indicates the suid\n    // is not an update to subsequent messages suid values. As the current broker\n    // connected does not support suid generation or assignment.\n    //\n    // Note a spooler unique id is only set if the message SMF\n    // contained the SpoolerUniqueId header parameter.\n    // See decode for details.\n    const messageSuid = message._getSpoolerUniqueId();\n    if (RgmidFactory.INVALID_SUID.eq(messageSuid)) {\n      // set the message suid value to stored consumer suid value\n      message._setSpoolerUniqueId(consumer.spoolerUniqueId);\n    } else if (consumer.spoolerUniqueId !== undefined\n        && !RgmidFactory.INVALID_SUID.eq(consumer.spoolerUniqueId)) {\n      // otherwise update the consumer with new suid value if consumer suid was initialized\n      const consumerSuidStr = consumer.spoolerUniqueId.toString();\n      const msgSuidStr = messageSuid.toString();\n      LOG_DEBUG('Updating Consumer message spoolerUniqueId from ', consumerSuidStr,\n                ' to ', msgSuidStr);\n      consumer.spoolerUniqueId = messageSuid;\n    } else if ((consumer.spoolerUniqueId === undefined\n        || RgmidFactory.INVALID_SUID.eq(consumer.spoolerUniqueId))\n        && !RgmidFactory.INVALID_SUID.eq(messageSuid)) {\n      // clear the message spooler unique id on flows without initial spooler\n      // unique id as rmid is not supported\n      message._setSpoolerUniqueId(RgmidFactory.INVALID_SUID);\n    }\n\n    const transportAcks = this._transportAcks;\n    const ackResult = transportAcks.tryReceive(messageID,\n                                               message.getGuaranteedPreviousMessageId());\n    const transportAckRequired = transportAcks.acksPending > this.maxPendingAcks;\n    switch (ackResult) {\n      case TransportAckResult.OK:\n        break; // carry on\n      case TransportAckResult.DUPLICATE:\n        consumer.incStat(StatType.RX_DISCARD_DUPLICATE);\n        // Two options here: could check membership in the ringbuffer,\n        // or could check whether the ID is less than ringbuffer.front().\n        // Untested assumption: arithmetic comparison on boxed Long at front()\n        // is more computationally expensive than native Map() lookup.\n        if (!this._applicationAcks.has(messageID) &&\n            !this._oldUnacked.has(idstr)) {\n          LOG_TRACE('Will application ack unknown duplicate ID', idstr);\n          this._sendAck([[messageID, messageID]]);\n        } else if (transportAckRequired) {\n          this._sendAcks(transportAckRequired);\n        } else {\n          // if we are receiving dups we should make sure we send\n          // and ack in case we don't receive any non duplicates\n          // and we don't receive enough duplicates to exceed\n          // maxPendingAcks.  Eventually we would but only after\n          // the  router retransmitted many times.\n          this._setTransportAckTimer();\n        }\n        return false;\n      case TransportAckResult.OUT_OF_ORDER:\n        consumer.incStat(StatType.RX_DISCARD_OUT_OF_ORDER);\n        return false;\n      default:\n        assert(false, 'Unhandled transport ack result', ackResult);\n        return false;\n    }\n\n    return this._applicationAcks.insert(messageID, (evicting) => {\n      let applicationAckRequired = false;\n      if (evicting) {\n        switch (evicting.state) {\n          case ApplicationAckState.UNACKED:\n            this._oldUnacked.add(evicting.key);\n            break;\n          case ApplicationAckState.ACKED_NOT_SENT:\n            applicationAckRequired = true;\n            break;\n          case ApplicationAckState.ACKED_SENT:\n            // OK to evict\n            break;\n          default:\n            assert(false,\n                   'Unhandled application ack state',\n                   ApplicationAckState.describe(evicting.state));\n        }\n      }\n\n      this._midDispatch = true;\n      this._messageDispatch.push(message);\n      this._midDispatch = false;\n\n      if (transportAckRequired || applicationAckRequired) {\n        LOG_TRACE('Need to send acks:',\n                  'transport', transportAckRequired,\n                  'application', applicationAckRequired);\n        this._sendAcks(transportAckRequired);\n      } else {\n        this._setTransportAckTimer();\n      }\n\n      return true;\n    });\n  }\n\n  applicationAck(messageId) {\n    const { LOG_TRACE } = this.logger;\n\n    const idstr = messageId.toString();\n    this._consumer.incStat(StatType.RX_ACKED);\n\n    // Was the message old, and demoted to _oldUnacked?\n    if (this._oldUnacked.delete(idstr)) { // True if idstr was member\n      // It was old. Ack immediatesly.\n      LOG_TRACE('Application acking old message immediately');\n      this._sendAck([[messageId, messageId]]);\n      return;\n    }\n\n    // We can't regress the ack_state this way; message.acknowledge() throws if called\n    // more than once.\n    this._applicationAcks.updateAckState(messageId, ApplicationAckState.ACKED_NOT_SENT);\n    this._setTransportAckTimer();\n  }\n\n  getDestination() {\n    this._endpointEnsure();\n    return this._destination;\n  }\n\n  isDisconnected() {\n    if (!this.getCurrentState()) return true;\n    return (\n      this.getActiveState(ConsumerStateNames.UNBOUND) ||\n      this.getActiveState(ConsumerStateNames.UNBOUND_AWAITING_FLOWOPEN)\n    );\n  }\n\n  requestStartDispatchUser() {\n    this._userDispatch = true;\n    this.applyStartDispatch();\n  }\n\n  requestStartDispatchFSM() {\n    this._fsmDispatch = true;\n    this.applyStartDispatch();\n  }\n\n  applyStartDispatch() {\n    if (this._userDispatch && this._fsmDispatch) {\n      this.log(`Starting message dispatch (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n      this._messageDispatch.start();\n      this._localMaxWindowSize = this._localPreferredWindowSize;\n      this._sendAcks(true);\n    } else {\n      this.log(`Not starting message dispatch (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    }\n  }\n\n  transitionToUnbound(eventName, error) {\n    const consumer = this._consumer;\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Flow down, user disconnected?', consumer.userDisconnected);\n\n    return this.transitionTo(this.Unbound.AwaitFlowOpen, () =>\n      this._addEventToEmit(eventName, error));\n  }\n\n  transitionToUnboundFromUp(properties, eventName, error) {\n    const consumer = this._consumer;\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Choice point for FLOW_UNBOUND in FlowUp state.');\n    // Always clear duplicate filter state on \"Replay started\"\n    // (no way to maintain it and drop the replayed messages as duplicates)\n    if (error && error instanceof OperationError && error.subcode) {\n      if (error.subcode === ErrorSubcode.REPLAY_STARTED) {\n        // \"this\" is the fsm.\n        this._transportAcks.reset();\n        this._applicationAcks.reset();\n      }\n    }\n    if (consumer.endpointErrorId &&\n      this._sessionInterface.isCapable(CapabilityType.MESSAGE_REPLAY)) {\n      LOG_TRACE(`Acking unsolicited unbind with endpointErrorId ${consumer.endpointErrorId}`);\n      const unbindAck = SMFLib.AdProtocolMessage.getUnbindAck(consumer._flowId,\n                                                              consumer.endpointErrorId,\n                                                              this._transportAcks.lastAcked);\n      this._sessionInterface.sendControl(unbindAck); // Must succeed or throw\n    }\n    if (properties.reconnectAttempts === -1 || properties.reconnectAttempts > 0) {\n      if (error && error instanceof OperationError && error.subcode) {\n        if (error.subcode === ErrorSubcode.REPLAY_STARTED ||\n          error.subcode === ErrorSubcode.GM_UNAVAILABLE) {\n          LOG_TRACE(`Saving errorCausingReconnect: ${error}`);\n          this._errorCausingReconnect = error;\n          // Reconnecting state emits the RECONNECTING event.\n          return this.transitionTo(this.Reconnecting);\n        }\n      }\n    } //else: flow reconnect feature disabled, or not applicable.\n    return this.transitionTo(this.Unbound.AwaitFlowOpen, () =>\n      this._addEventToEmit(eventName, error));\n  }\n\n  requestStopDispatchUser() {\n    this._userDispatch = false;\n    this.log(`Stop dispatch user (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    this._messageDispatch.stop();\n  }\n\n  requestStopDispatchFSM() {\n    this._fsmDispatch = false;\n    this.log(`Stop dispatch FSM (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    this._sendAcks(true);\n  }\n\n  _clearTransportAckTimer() {\n    if (!this._transportAckTimer) return;\n\n    clearTimeout(this._transportAckTimer);\n    this._transportAckTimer = null;\n  }\n\n  _dispose() {\n    this._clearTransportAckTimer();\n    this._endpointClear();\n    this._destination = undefined;\n    this._unacked = null;\n    this._messageDispatch = null;\n    this._transportAcks = null;\n    this._consumer = null;\n    this._sessionInterface = null;\n  }\n\n  _endpointClear() {\n    this._endpoint = undefined;\n    this._subscription = undefined;\n  }\n\n  _endpointEnsure() {\n    if (this._endpoint) {\n      // The endpoint, destination and any possible topic subscription are generated\n      // at the same time. Use the presence of the endpoint to determine whether\n      // any of this has already been done.\n      return;\n    }\n\n    const sessionInterface = this._sessionInterface;\n    const properties = this._consumer._properties;\n    const { queueDescriptor } = properties;\n\n    let destination;\n    let endpoint;\n    let subscription;\n    if (queueDescriptor.type === QueueType.QUEUE) {\n      // The publish destination needs a prefix. Create a destination from\n      // the descriptor, then derive the endpoint name from that.\n      destination = sessionInterface.createDestinationFromDescriptor(queueDescriptor);\n\n      // The bind target is the queue name encoded as though a topic -- no prefix\n      // Use the offset information to build a bind target\n      endpoint = new Queue({\n        name:   destination.name,\n        type:   DestinationType.QUEUE,\n        offset: 0,\n        bytes:  destination.bytes.substr(destination.offset),\n      });\n\n      subscription = undefined;\n    } else {\n      // QueueType.TOPIC_ENDPOINT\n      endpoint = queueDescriptor.name\n        ? sessionInterface.createDestinationFromDescriptor(queueDescriptor)\n        : new Topic({ name: '\\0?', offset: 0, bytes: '\\0' });\n      subscription = properties.topicEndpointSubscription ||\n        sessionInterface.createTemporaryDestination(DestinationType.TOPIC);\n      destination = subscription;\n    }\n\n    // Using Object.assign to enforce the invariant that these three properties are set together\n    // or not at all.\n    Object.assign(this, {\n      _destination:  destination,\n      _endpoint:     endpoint,\n      _subscription: subscription,\n    });\n\n    // Update the properties object (if TTMP, we may modify it again)\n    properties.queueDescriptor = new QueueDescriptor({\n      name:    endpoint.name,\n      type:    queueDescriptor.type,\n      durable: queueDescriptor.durable,\n    });\n  }\n\n  _resetLocalConnectionState() {\n    Object.assign(this, {\n      _remoteWindowSize: 0,\n      _active:           undefined,\n      _fsmDispatch:      false,\n      _userDispatch:     true, // User flow is initially started\n    });\n  }\n\n  _resetRemoteConnectionState() {\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Initializing transport acks');\n    this._transportAcks = new TransportAcks();\n\n    LOG_TRACE('Initializing application acks');\n    this._applicationAcks = new ApplicationAckRingBuffer(RING_BUFFER_SIZE);\n    this._oldUnacked = new Set();\n\n    LOG_TRACE('Initializing endpointErrorId');\n    this._consumer.endpointErrorId = undefined;\n  }\n\n  /**\n   * Sends a single ack.\n   *\n   * @param {Array.<ackpair>} applicationAcks The application ack ranges to send\n   * @memberof ConsumerFSM\n   * @private\n   */\n  _sendAck(applicationAcks) {\n    const transportAck = SMFLib.AdProtocolMessage.getAck(\n      this._consumer.flowId,\n      this._transportAcks.lastReceived,\n      this.windowSize,\n      applicationAcks);\n    this._sessionInterface.sendControl(transportAck); // Must succeed or throw\n  }\n\n  /**\n   * Adds the current ack ranges to an accumulator. Call this for each applicationAck.\n   * When a range ends (we receive an unacked), or we are explictly flushing\n   * (applicationAck === null), we convert the accumulator to acks, send them, update state,\n   * and reset accumulators.\n   *\n   * This should be called at least once with the last invocation having ackRange = null.\n   * This invokes the flush path, which is necessary if any ranges were in progress,\n   * and this is the only path that repects the forceTransportAck flag.\n   *\n   * @param {Object} acksPendingState State associated with this activity\n   * @param {ApplicationAck} applicationAck The ack to process for ack ranges.\n   *    If `null`, any pending acks are flushed and a transport ack is sent, if\n   *    required.\n   * @private\n   */\n  _addAckToRanges(acksPendingState, applicationAck = null) {\n    const currentRange = acksPendingState.currentRange;\n    const ackRanges = acksPendingState.ackRanges;\n\n    if (applicationAck && applicationAck.state !== ApplicationAckState.UNACKED) {\n      currentRange.push(applicationAck);\n      return; // Wait for end of range or flush\n    }\n\n    // We received an UNACKED or a null ack (flush). Complete this range.\n    if (currentRange.length) {\n      ackRanges.push(currentRange);\n    }\n\n    // If we're flushing or we've hit the protocol limit for ranges in a single ack,\n    // we send ack messages, update ack states and clear the accumulator.\n    // This condition will be true at least once (must flush at the end).\n    if (applicationAck === null ||\n        ackRanges.length === SMFLib.AdProtocolMessage.MAX_CLIENT_ACK_RANGES) {\n      // Reduce each range to a first and last ID.\n      const bareRanges = ackRanges.map(range => [range[0].id, range[range.length - 1].id]);\n\n      if (bareRanges.length || acksPendingState.forceTransportAck) {\n        // We send the ranges. This could throw.\n        const { LOG_TRACE } = this.logger;\n        this._sendAck(bareRanges);\n        // Warning: this log statement reduces debug performance by 25%!\n        LOG_TRACE(\n          'Sent ack: ',\n          `Transport ack: ${this._transportAcks.lastReceived}`,\n          `Application acks: ${bareRanges.length\n            ? bareRanges.map(g => `[${g[0]}..${g[1]}]`)\n            : '[]'}`\n        );\n        // If the intent was to force a transport ack, that condition is fulfilled.\n        this._transportAcks.setAcked();\n        acksPendingState.forceTransportAck = false;\n      }\n\n      // Since the range send succeeded, update the ack states.\n      ackRanges.forEach((ackRange) => {\n        ackRange.forEach((ack) => {\n          if (ack.state !== ApplicationAckState.ACKED_SENT) {\n            try {\n              this._applicationAcks.updateAckState(ack.id,\n                                                   ApplicationAckState.ACKED_SENT);\n            } catch (e) {\n              const { LOG_ERROR } = this.logger;\n              LOG_ERROR(`Marking ack ${ack.id} as sent failed: ${e}`);\n            }\n          }\n        });\n      });\n\n      // Clear the main accumulator since it has hit the wire.\n      acksPendingState.ackRanges = [];\n    }\n    // Clear the accumulator for this range.\n    acksPendingState.currentRange = [];\n  }\n\n  /**\n   * Sends acknowledgements, along with a window update for this flow.\n   *\n   * @param {Boolean} forceTransportAck `true` sends transport ack even if no acks pending\n   * @private\n   */\n  _sendAcks(forceTransportAck = false) {\n    this._clearTransportAckTimer();\n\n    const applicationAcks = this._applicationAcks;\n    const transportAcks = this._transportAcks;\n\n    // This state is temporary and shared with the ack generating function.\n    const acksPendingState = {\n      forceTransportAck: forceTransportAck || (transportAcks.acksPending > 0),\n      ackRanges:         [],\n      currentRange:      [],\n    };\n\n    // If the first ringbuffer ack state is acked and there are no unacked before this,\n    // we can create an ack range that includes zero.\n    // If the first ringbuffer ack state is unacked, we can say nothing about the\n    // range before the first acked ID in the ringbuffer.\n    const front = this._applicationAcks.front();\n    if (this._oldUnacked.size === 0 && front && front.state !== ApplicationAckState.UNACKED) {\n      // State is acked_sent so we don't try to update the ring buffer.\n      this._addAckToRanges(acksPendingState, ZERO_APP_ACK);\n      // We know that front will be added to this range by the iteration.\n    }\n\n    // Build ack ranges using the accumulator\n    applicationAcks.forEach(ack => this._addAckToRanges(acksPendingState, ack));\n    // Flush the last pending ack range.\n    this._addAckToRanges(acksPendingState);\n\n    // On successful exit, we've sent and cleared all accumulators, and we've sent\n    // a transport ack if we were supposed to do that.\n    assert(acksPendingState.forceTransportAck === false);\n    assert(acksPendingState.currentRange.length === 0);\n    assert(acksPendingState.ackRanges.length === 0);\n  }\n\n  _setTransportAckTimer() {\n    if (this._transportAckTimer) return;\n    if (this._consumer.disposed) return;\n    this._transportAckTimer = setTimeout(\n      () => this._sendAcks(true),\n      this._acknowledgeTimeoutInMsecs\n    );\n  }\n\n  get maxWindowSize() {\n    return Math.min(this._localMaxWindowSize,\n                    this._remoteWindowSize || Number.POSITIVE_INFINITY);\n  }\n\n  get windowSize() {\n    return this.maxWindowSize - this._messageDispatch.length;\n  }\n\n  get maxPendingAcks() {\n    return this.windowSize * this._acknowledgeThreshold / 100.0;\n  }\n\n}\n\nmodule.exports.ConsumerFSM = ConsumerFSM;\n","const { Enum } = require('solclient-eskit');\n\nconst ConsumerStateNames = {\n  UNBOUND:                       'UNBOUND',\n  UNBOUND_AWAIT_SESSION_UP:      'UNBOUND_AWAIT_SESSION_UP',\n  UNBOUND_AWAIT_FLOWOPEN:        'UNBOUND_AWAIT_FLOWOPEN',\n  UNBOUND_AWAIT_ANY:             'UNBOUND_AWAIT_ANY',\n  BIND_SENT:                     'BIND_SENT',\n  FLOW_UP:                       'FLOW_UP',\n  FLOW_UP_XFER:                  'FLOW_UP_XFER',\n  FLOW_UP_XFER_INACTIVE:         'FLOW_UP_XFER_INACTIVE',\n  UNBIND_SENT:                   'UNBIND_SENT',\n  RECONNECTING:                  'RECONNECTING',\n  RECONNECTING_BIND_SENT:        'RECONNECTING_BIND_SENT',\n  RECONNECTING_AWAIT_SESSION_UP: 'RECONNECTING_AWAIT_SESSION_UP',\n  RECONNECTING_AWAIT_TIMER:      'RECONNECTING_AWAIT_TIMER',\n  CREATE_SENT:                   'CREATE_SENT',\n};\n\nmodule.exports.ConsumerStateNames = Enum.new(ConsumerStateNames);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of consumer acknowledgement modes. The corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#acknowledgeMode}\n * configures how acknowledgments are generated for received Guaranteed messages.\n *\n * When received messages are acknowledged they are removed from the Guaranteed\n * Message storage on the Solace Message Router. Message Consumer acknowledgements,\n * <b>only</b> remove messages from the Solace Message Router.\n *\n * In particular, withholding Message Consumer Acknowledgemnts does not stop\n * message delivery. For Message Consumer flow control see\n * {@link solace.MessageConsumer.stop}/{@link solace.MessageConsumer.start}. Message Consumer\n * flow control may also be imlpemented by removing the\n * {@link solace.MessageConsumerEventName#event:MESSAGE} listener.\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst MessageConsumerAcknowledgeMode = {\n  /**\n   * The API automatically acknowledges any message that was delivered to all\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} listeners with no exception thrown\n   * on any of them.\n   */\n  AUTO:   'AUTO',\n  /**\n   * The API acknowledges a message only when the application calls\n   * {@link solace.Message#acknowledge}.\n   */\n  CLIENT: 'CLIENT',\n};\n\nmodule.exports.MessageConsumerAcknowledgeMode = Enum.new(MessageConsumerAcknowledgeMode);\n","const { Enum } = require('solclient-eskit');\n/**\n * An enumeration of message consumer event names. A {@link solace.MessageConsumer} will emit\n * these events as part of its lifecycle.  Applications, having created a MessageConsumer can\n * choose to listen to all of the events described here, or any subset of these events. For Example:\n * <pre>\n *   <code>\n *     mc = solace.Session.createMessageConsumer(...);\n *     mc.on(solace.MessageConsumerEventName.CONNECT_FAILED_ERROR,\n *           function connectFailedErrorEventCb(error) {\n *             // error can be used as an OperationError object\n *           });\n *   </code>\n * </pre>\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst MessageConsumerEventName = {\n  /**\n   * The message consumer is established.\n   * @event solace.MessageConsumerEventName#UP\n   */\n  UP:                   'MessageConsumerEventName_up',\n  /**\n   * The message consumer is successfully disconnected.\n   * The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#DOWN\n   */\n  DOWN:                 'MessageConsumerEventName_down',\n /**\n   * The message consumer has become active.\n   *\n   * @event solace.MessageConsumerEventName#ACTIVE\n   */\n  ACTIVE:               'MessageConsumerEventName_active',\n  /**\n   * The message consumer has become inactive.\n   *\n   * @event solace.MessageConsumerEventName#INACTIVE\n   */\n  INACTIVE:             'MessageConsumerEventName_inactive',\n  /**\n   * The message consumer was established and then disconnected by the router,\n   * likely due to operator intervention. The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#DOWN_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  DOWN_ERROR:           'MessageConsumerEventName_downError',\n  /**\n   * The message consumer was established and then disconnected by the router,\n   * likely due to operator intervention, but flow auto reconnect is active.\n   * The message consumer is disabled, but actively reconnecting.\n   * Expect a RECONNECTED or DOWN_ERROR on success of failure. respectively.\n   * See also MessageConsumerProperties.reconnectAttempts and reconnectIntervalInMsecs.\n   *\n   * @event solace.MessageConsumerEventName#RECONNECTING\n   * @param {solace.OperationError} error Details of the error that triggered the reconnect.\n   */\n  RECONNECTING:         'MessageConsumerEventName_reconnecting',\n  /**\n   * The message consumer successfully auto-reconnected.\n   *\n   * @event solace.MessageConsumerEventName#RECONNECTED\n   */\n  RECONNECTED:          'MessageConsumerEventName_reconnected',\n  /**\n   * The message consumer attempted to connect but was unsuccessful.\n   * The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  CONNECT_FAILED_ERROR: 'MessageConsumerEventName_connectFailedError',\n  /**\n   * The message consumer will not connect because the current session is incompatible\n   * with Guaranteed Messaging. The message consumer is disabled until a compatible session\n   * is available.\n   *\n   * @event solace.MessageConsumerEventName#GM_DISABLED\n   */\n  GM_DISABLED:          'MessageConsumerEventName_GMDisabled',\n  /**\n   * The message consumer is being disposed. No further events will be emitted.\n   *\n   * @event solace.MessageConsumerEventName#DISPOSED\n   */\n  DISPOSED:             'MessageConsumerEventName_disposed',\n  /**\n   * A message was received on the message consumer.\n   *\n   * If the application throws an exception in this listener, and the consumer was configured\n   * to automatically acknowledge messages\n   * (see {@link solace.MessageConsumerProperties#acknowledgeMode}),\n   * the API will not acknowledge the message, since it\n   * may not have been successfully processed by the application. Such a message must be\n   * acknowledged manually. If the application did not retain a reference to the message, it\n   * may be redelivered by calling {@link solace.MessageConsumer#disconnect} followed by\n   * {@link solace.MessageConsumer#connect} depending on the configuration of the queue.\n   *\n   * When there is no listener for <i>MESSAGE</i> on a MessageConsumer, messages are queued\n   * internally until a listener is added.\n   *\n   * @event solace.MessageConsumerEventName#MESSAGE\n   * @param {solace.Message} message The received message being delivered in this event.\n   */\n  MESSAGE:              'MessageConsumerEventName_message',\n  /**\n   * The subscribe or unsubscribe operation succeeded on the queue.\n   * @event solace.MessageConsumerEventName#SUBSCRIPTION_OK\n   * @param {solace.MessageConsumerEvent} event The details related\n   * to the successful subscription update.\n   */\n  SUBSCRIPTION_OK:      'MessageConsumerEventName_ok',\n  /**\n   * The Solace Message Router rejected a queue subscription (add or remove).\n   * @event solace.MessageConsumerEventName#SUBSCRIPTION_ERROR\n   * @param {solace.MessageConsumerEvent} error The details related\n   * to the failed subscription update.\n   */\n  SUBSCRIPTION_ERROR:   'MessageConsumerEventName_error',\n\n};\n\nmodule.exports.MessageConsumerEventName = Enum.new(MessageConsumerEventName);\n","const { ErrorSubcode } = require('solclient-error');\n\n\n/**\n * Message consumer event objects. A {@link solace.MessageConsumer} will emit\n * these events related to queue subscription management:\n * MessageConsumerEventName.SUBSCRIPTION_OK and\n * MessageConsumerEventName.SUBSCRIPTION_ERROR.\n *\n * Similar to SessionEvent.\n * Also compatible with RequestError.\n *\n * @memberof solace\n */\nclass MessageConsumerEvent {\n  /**\n   * @constructor\n   * @param {String} messageConsumerEventName one of the MessageConsumerEventNames.\n   * @param {String} infoStr Information string\n   * @param {Number} [responseCode] Any associated router response code\n   * @param {solace.ErrorSubcode} [errorSubcode] Any associated error subcode\n   * @param {Object} [correlationKey] Any associated correlation key\n   * @param {String} [reason] Any additional information\n   * @private\n   */\n  constructor(\n    messageConsumerEventName,\n    infoStr,\n    responseCode = undefined,\n    errorSubcode = 0,\n    correlationKey = undefined,\n    reason = undefined) {\n    this._messageConsumerEventName = messageConsumerEventName;\n    this._infoStr = infoStr;\n    this._responseCode = responseCode;\n    this._errorSubcode = errorSubcode;\n    this._correlationKey = correlationKey; // optional\n    this._reason = reason; // optional\n  }\n\n  /**\n   * @type {String}\n   * @description the appropriate MessageConsumerEventName\n   *\n   *   MessageConsumerEventName.SUBSCRIPTION_OK or\n   *   MessageConsumerEventName.SUBSCRIPTION_ERROR.\n   */\n  get messageConsumerEventName() {\n    return this._messageConsumerEventName;\n  }\n\n  /**\n   * @type {String}\n   * @description the appropriate MessageConsumerEventName\n   *\n   *   MessageConsumerEventName.SUBSCRIPTION_OK or\n   *   MessageConsumerEventName.SUBSCRIPTION_ERROR.\n   */\n  get name() {\n    return this._messageConsumerEventName;\n  }\n\n  /**\n   * @type {String}\n   * @description if applicable, an information string returned by the Solace Message Router.\n   */\n  get infoStr() {\n    return this._infoStr;\n  }\n\n  /**\n   * @type {?Number}\n   * @description if applicable, a response code returned by the Solace Message Router.\n   */\n  get responseCode() {\n    return this._responseCode;\n  }\n\n  /**\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n   * same as subcode.\n   */\n  get errorSubcode() {\n    return this._errorSubcode;\n  }\n\n  /**\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n   * Same as errorSubcode.\n   */\n  get subcode() {\n    return this._errorSubcode;\n  }\n\n  /**\n   * @type {?Object}\n   * @description A user-specified object\n   * made available in the response or confirmation event by including it as a\n   * parameter in the orignal API call.  If the user did not specify a\n   * correlationKey, it will be <code>null</code>.\n   */\n  get correlationKey() {\n    return this._correlationKey;\n  }\n\n  /**\n   * @type {?String}\n   * @description Additional information if it is applicable.\n   *\n   * In case of subscribe or publish events, it constains the topic.\n   */\n  get reason() {\n    return this._reason;\n  }\n  /**\n   * @param {Object} value The reason info object\n   * @internal\n   */\n  set reason(value) {\n    this._reason = value;\n  }\n\n  /**\n   * @type {?solace.SessionEventCode}\n   * @description Only here for compatibility with the RequestError exception class.\n   * Always returns undefined for a MessageConsumerEvent.\n   */\n  // eslint-disable-next-line class-methods-use-this\n  get requestEventCode() {\n    return undefined;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'messageConsumerEventName': this.messageConsumerEventName,\n      'infoStr':                  this.infoStr,\n      'responseCode':             this.responseCode,\n      'errorSubcode':             ErrorSubcode.describe(this.errorSubcode),\n      'correlationKey':           this.correlationKey ? this.correlationKey.toString() : null,\n      'reason':                   this.reason ? this.reason : null,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.MessageConsumerEvent = MessageConsumerEvent;\n","const {\n  AbstractQueueDescriptor,\n  QueueDescriptor,\n  QueueDescriptorValidator,\n  QueueProperties,\n  QueuePropertiesValidator,\n  QueueType,\n} = require('solclient-queue');\nconst { APIPropertiesValidators } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { OperationError, ErrorSubcode } = require('solclient-error');\nconst { ReplayStartLocation } = require('solclient-replaystart');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valInstance,\n  valIsMember,\n  valNumber,\n  valRange,\n  valTopicStringOrEmpty,\n} = APIPropertiesValidators;\n\nfunction valTopicEndpointSubscription(typeDesc, instance) {\n  if (instance.queueDescriptor.getType() === QueueType.TOPIC_ENDPOINT) {\n    if (instance.queueDescriptor.isDurable() && !instance.createIfMissing) {\n      if (!instance.topicEndpointSubscription) {\n        throw new OperationError('topicEndpointSubscription must be set when queueDescriptor ' +\n                                'refers to a durable topic endpoint and not allowed to create.',\n                                ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    }\n  } else if (instance.topicEndpointSubscription) {\n    // is QueueType.QUEUE\n    throw new OperationError('topicEndpointSubscription is set, but queueDescriptor ' +\n                              'refers to a queue that is not of type QueueType.TOPIC_ENDPOINT',\n                              ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nconst MessageConsumerPropertiesValidator = {\n  validate(prefix, instance, rawProperties) {\n    if (Object.prototype.hasOwnProperty.call(rawProperties, 'transportAcknowledgeTimeoutInMsecs') &&\n        Object.prototype.hasOwnProperty.call(rawProperties, 'acknowledgeTimeoutInMsecs')) {\n      throw new OperationError(`${prefix} validation: transportAcknowledgeTimeoutInMsecs and acknowledgeTimeoutInMsecs are mutually exclusive`,\n                                ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n    if (Object.prototype.hasOwnProperty.call(rawProperties, 'transportAcknowledgeThresholdPercentage') &&\n        Object.prototype.hasOwnProperty.call(rawProperties, 'acknowledgeThreshold')) {\n      throw new OperationError(`${prefix} validation: transportAcknowledgeThresholdPercentage and acknowledgeThreshold are mutually exclusive`,\n          ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n\n    const v = validateInstance.bind(null, prefix, instance);\n    if (!(instance.queueDescriptor instanceof AbstractQueueDescriptor ||\n          instance.queueDescriptor instanceof QueueDescriptor)) {\n      throw new OperationError(`${prefix} validation: queue descriptor must be ` +\n                                'an AbstractQueueDescriptor or a QueueDescriptor',\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    QueueDescriptorValidator.validate(instance.queueDescriptor);\n\n    if (instance.queueProperties) {\n      if (instance.queueDescriptor.durable && !instance.createIfMissing) {\n        throw new OperationError(`${prefix} validation: queueProperties cannot be set unless ` +\n          'queueDescriptor refers to a temporary queue, or createIfMissing is set.',\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      v('queueProperties', [valInstance, QueueProperties, 'QueueProperties']);\n      QueuePropertiesValidator.validate(instance.queueProperties);\n      if (!instance.queueDescriptor.durable &&\n        Check.something(instance.queueProperties.accessType)) {\n        throw new OperationError(`${prefix} validation: queueProperties cannot specify accessType ` +\n                                 'in creation of a temporary queue',\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    }\n\n    // Validate TE subscription\n\n    if (instance.queueDescriptor.type === QueueType.TOPIC_ENDPOINT) {\n      // QueueType.TOPIC_ENDPOINT\n      if (instance.queueDescriptor.durable &&\n        !instance.createIfMissing &&\n        !instance.topicEndpointSubscription) {\n        throw new OperationError(`${prefix} validation: topicEndpointSubscription must be set for durable ` +\n          'topic endpoints unless creation is allowed.',\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    } else if (instance.topicEndpointSubscription) {\n      throw new OperationError(`${prefix} validation: topicEndpointSubscription cannot be set unless ` +\n        'descriptor.type is TOPIC_ENDPOINT',\n        ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n    v('connectAttempts', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('topicEndpointSubscription', [valTopicEndpointSubscription], [valTopicStringOrEmpty]);\n\n    v('acknowledgeMode', [valIsMember, MessageConsumerAcknowledgeMode, 'MessageConsumerAcknowledgeMode']);\n    v('transportAcknowledgeTimeoutInMsecs', [valNumber], [valRange, 20, 1500]);\n    v('transportAcknowledgeThresholdPercentage', [valNumber], [valRange, 1, 75]);\n\n    v('activeIndicationEnabled', [valBoolean]);\n    v('noLocal', [valBoolean]);\n    v('windowSize', [valNumber], [valRange, 1, 255]);\n    v('reconnectIntervalInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n\n    if (instance.activeIndicationEnabled &&\n      instance.queueDescriptor.type !== QueueType.QUEUE) {\n      throw new OperationError(\n        `${prefix} validation: activeIndicationEnabled may only be true for ` +\n        'QUEUE destinations',\n        ErrorSubcode.PARAMETER_CONFLICT\n      );\n    }\n    if (instance.replayStartLocation &&\n      !(instance.replayStartLocation instanceof ReplayStartLocation)) {\n      throw new OperationError(`${prefix} validation: replayStartLocation must be ` +\n        'an instance of ReplayStartLocation',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n};\n\nmodule.exports.MessageConsumerPropertiesValidator = MessageConsumerPropertiesValidator;\n","const QueueLib = require('solclient-queue');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { Topic } = require('solclient-destination');\n\nconst DEFAULTS = {\n  queueDescriptor:                         undefined,\n  queueProperties:                         undefined,\n  connectTimeoutInMsecs:                   10000,\n  connectAttempts:                         3,\n  topicEndpointSubscription:               undefined,\n  // selector: undefined,\n  acknowledgeMode:                         MessageConsumerAcknowledgeMode.AUTO,\n  transportAcknowledgeTimeoutInMsecs:      1000,\n  transportAcknowledgeThresholdPercentage: 60,\n  activeIndicationEnabled:                 false,\n  noLocal:                                 false,\n  windowSize:                              255,\n  _browser:                                false,\n  replayStartLocation:                     undefined,\n  reconnectAttempts:                       -1,\n  reconnectIntervalInMsecs:                3000,\n  createIfMissing:                         false,\n};\n\n/**\n * @classdesc\n * Defines the properties for a {@link solace.MessageConsumer}.\n *\n * @memberof solace\n */\nclass MessageConsumerProperties extends APIProperties {\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Defines the queue from which to consume.\n   *  * For durable queues and durable topic endpoints, this must be a\n   *    {@link solace.QueueDescriptor} unless\n   *    {@link solace.MessageConsumerProperties#createIfMissing} is set.\n   *  * When an {@link solace.AbstractQueueDescriptor} is used, the name is generated when\n   *    the {@link solace.MessageConsumer} is connected. The generated descriptor can be queried\n   *    from the consumer after it has successfully connected by calling\n   *    {@link solace.MessageConsumer#getProperties}.\n   * @type {solace.QueueDescriptor}\n   */\n  get queueDescriptor() {\n    return Check.something(this._queueDescriptor)\n      ? this._queueDescriptor\n      : DEFAULTS.queueDescriptor;\n  }\n  set queueDescriptor(value) {\n    if (value instanceof QueueLib.AbstractQueueDescriptor) {\n      this._queueDescriptor = value;\n    } else if (value) {\n      this._queueDescriptor = value.name\n        ? new QueueLib.QueueDescriptor(value)\n        : new QueueLib.AbstractQueueDescriptor(value);\n    } else {\n      this._queueDescriptor = value;\n    }\n  }\n\n  /**\n   * Gets the properties of the remote queue.\n   *  * For temporary queues and temporary topic endpoints,\n   *    or if {@link solace.MessageConsumerProperties#createIfMissing} is true,\n   *    these properties define the endpoint that is created.\n   *  * For durable queues, these must be unset on consumer creation\n   *    unless {@link solace.MessageConsumerProperties#createIfMissing} is set.\n   *    The values will be populated\n   *    after the queue is connected and can be retrieved by calling\n   *    {@link solace.MessageConsumer#getProperties}.\n   * @type {solace.QueueProperties}\n   */\n  get queueProperties() {\n    return Check.something(this._queueProperties)\n      ? this._queueProperties\n      : DEFAULTS.queueProperties;\n  }\n  set queueProperties(value) {\n    if (value) {\n      this._queueProperties = new QueueLib.QueueProperties(value);\n    } else {\n      this._queueProperties = value;\n    }\n  }\n\n  // ------------ Properties controlling connection of the consumer ----------------\n  /**\n   * The bind timeout in milliseconds when creating a connection to the Solace Message Router.\n   *  * The valid range is >= 50.\n   * @type {Number}\n   * @default 10000\n   */\n  get connectTimeoutInMsecs() {\n    return Check.something(this._bindTimeoutInMsecs)\n      ? this._bindTimeoutInMsecs\n      : DEFAULTS.connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(value) {\n    this._bindTimeoutInMsecs = value;\n  }\n\n  /**\n   * Gets and sets the maximum number of bind attempts when creating a connection to the\n   * Solace Message Router.\n   *  * The valid range is >= 1.\n   * @type {Number}\n   * @default 3\n   */\n  get connectAttempts() {\n    return Check.something(this._connectAttempts)\n      ? this._connectAttempts\n      : DEFAULTS.connectAttempts;\n  }\n  set connectAttempts(val) {\n    this._connectAttempts = val;\n  }\n\n  // ------------ Properties applied to the queue when connecting ----------------\n\n  /**\n   * This must be undefined if the type of the\n   * {@link solace.MessageConsumerProperties#queueDescriptor} is not\n   * {@link solace.QueueType.TOPIC_ENDPOINT}.\n   *\n   * If {@link solace.MessageConsumerProperties#queueDescriptor} is\n   * not durable, or {@link solace.MessageConsumerProperties#createIfMissing} is true,\n   * this may be left undefined to generate the topic endpoint's\n   * destination. When generated, the destination can be obtained from\n   * the {@link solace.MessageConsumer} after it is connected by calling\n   * {@link solace.MessageConsumer#getDestination}.\n   *\n   * @type {solace.Destination}\n   * @default undefined\n   */\n  get topicEndpointSubscription() {\n    return this._topicEndpointSubscription;\n  }\n  set topicEndpointSubscription(val) {\n    // Avoid instanceof check failing on Node 4?\n    if (typeof val === 'string') {\n      this._topicEndpointSubscription = Topic.createFromName(val);\n    } else {\n      this._topicEndpointSubscription = val;\n    }\n  }\n\n  // ----------- Properties controlling an established connection to a queue --------------\n\n  /**\n   * The Application Acknowledgement mode for the Message Consumer.\n   *\n   * When the acknowledgement mode is {@link solace.MessageConsumerAcknowledgeMode.CLIENT},\n   * a message is Application Acknowledged when the application calls\n   * {@link solace.Message#acknowledge} on that message.\n   *\n   * When the acknowledge mode is {@link solace.MessageConsumerAcknowledgeMode.AUTO}, a message is\n   * Application Acknowledged by the API after all\n   * {@link solace.MessageConsumerEventName#event:MESSAGE}\n   * listeners are called and none throw an exception. If a message handler throws, the message\n   * can still be acknowledged by calling {@link solace.Message#acknowledge}, but this would not be\n   * a recommended practice.\n   *\n   * When received messages are Application Acknowledged they are removed from the Guaranteed\n   * Message storage on the Solace Message Router. Message Consumer Application Acknowledged,\n   * <b>only</b> remove messages from the Solace Message Router.\n   *\n   * In particular, withholding Message Consumer Acknowledgemnts does not stop\n   * message delivery. For Message Consumer flow control (aka transport acknowledgemeent) see\n   * {@link solace.MessageConsumer#stop}/{@link solace.MessageConsumer#start}. Message Consumer\n   * flow control may also be imlpemented by removing the\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} listener.\n   *\n   * Flow control and transport acknowledgements characteristics are defined by\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeThresholdPercentage} and\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeTimeoutInMsecs}\n   *\n   * @type {solace.MessageConsumerAcknowledgeMode}\n   * @default solace.MessageConsumerAcknowledgeMode.AUTO\n   */\n  get acknowledgeMode() {\n    return Check.something(this._acknowledgeMode)\n      ? this._acknowledgeMode\n      : DEFAULTS.acknowledgeMode;\n  }\n  set acknowledgeMode(value) {\n    this._acknowledgeMode = value;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging.\n   * When the {@link solace.MessageConsumerProperties#transportAcknowledgeTimeoutInMsecs}\n   * is not exceeded, acknowledgements will be returned to the router at intervals not\n   * less than this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   * @deprecated\n   */\n  get acknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set acknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   * @deprecated\n   */\n  get acknowledgeThreshold() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set acknowledgeThreshold(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging.\n   * When the {@link solace.MessageConsumerProperties.transportAcknowledgeTimeoutInMsecs}\n   * is not exceeded, acknowledgements will be returned to the router at intervals not less than\n   * this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   */\n  get transportAcknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set transportAcknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   */\n  get transportAcknowledgeThresholdPercentage() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set transportAcknowledgeThresholdPercentage(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n  /**\n   * @description When enabled, a Guaranteed Messaging Consumer requests Active and Inactive\n   * events from the router and emits them to interested listeners.\n   * @type {Boolean}\n   * @default false\n   * @see {@link solace.MessageConsumerEventName.ACTIVE}\n   * @see {@link solace.MessageConsumerEventName.INACTIVE}\n   */\n  get activeIndicationEnabled() {\n    return Check.something(this._activeIndicationEnabled)\n      ? this._activeIndicationEnabled\n      : DEFAULTS.activeIndicationEnabled;\n  }\n  set activeIndicationEnabled(newValue) {\n    this._activeIndicationEnabled = newValue;\n  }\n\n  /**\n   * When enabled, a Guaranteed Messaging Consumer does not receive messages published\n   * in the same Session, even if the endpoint contains a subscription that matches the published\n   * message.\n   * @type {Boolean}\n   * @default false\n   */\n  get noLocal() {\n    return Check.something(this._noLocal)\n      ? this._noLocal\n      : DEFAULTS.noLocal;\n  }\n  set noLocal(newValue) {\n    this._noLocal = newValue;\n  }\n\n  /**\n   * The window size for Guaranteed Message delivery.  This is the maximum number of messages that\n   * will be prefetched from the Solace Messaging Router and queued internally by the API while\n   * waiting for the application to accept delivery of the messages.\n   *   * The valid range is 1 <= windowSize <= 255.\n   * @type {Number}\n   * @default 255\n   */\n  get windowSize() {\n    return Check.something(this._windowSize)\n      ? this._windowSize :\n      DEFAULTS.windowSize;\n  }\n  set windowSize(val) {\n    this._windowSize = val;\n  }\n\n  /**\n   * When enabled, a Guaranteed Messaging Consumer will connect as a queue browser\n   * @type {Boolean}\n   * @default false\n   * @private\n   * @internal\n   */\n  get browser() {\n    return Check.something(this._browser)\n      ? this._browser :\n      DEFAULTS._browser;\n  }\n  set browser(newValue) {\n    this._browser = newValue;\n  }\n  /**\n   * When a Flow is created, the application may request replay of messages from the replay log,\n   * even messages that have been previously delivered and removed the from topic endpoint or queue.\n   * The default is undefined, and indicates that no replay is requested.\n   *\n   * When defined the replay start location must be a {@link solace.ReplayStartLocation} object\n   * as returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationBeginning} or\n   * {@link solace.SolClientFactory.createReplayStartLocationDate}.\n   *\n   * The {@link solace.ReplayStartLocation} returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationBeginning}\n   * indicate that all messages available should be replayed.\n   *\n   * The replay start location returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationDate}\n   * indicates that all messages logged since a given date must be retrieved.\n   * @type {solace.ReplayStartLocation}\n   * @default undefined.\n   */\n  get replayStartLocation() {\n    return Check.something(this._replayStartLocation)\n      ? this._replayStartLocation :\n        DEFAULTS.replayStartLocation;\n  }\n  set replayStartLocation(newValue) {\n    this._replayStartLocation = newValue;\n  }\n\n  /**\n   * When a connected flow receives an unsolicited unbind event with subcode\n   * REPLAY_STARTED or GM_UNAVAILABLE, the SDK can reconnect the flow automatically.\n   * This property controls the flow auto reconnect feature:\n   * 0: Disable flow auto reconnect for this consumer flow.\n   * -1: Enable flow auto reconnect for this consumer flow, infiinite retries (default)\n   * <n, positive number>: Enable flow auto reconnect for this consumer flow, n retries.\n   *\n   * When the flow auto rebind is enabled, DOWN_ERRORs with REPLAY_STARTED and GM_UNAVAILABLE\n   * are handled internally, and not (immediately) emitted to the application.\n   * A RECONNECTING event (with the same subcode) is emitted instead,\n   * ideally followed by a RECONNECTED event when the reconnect succeedes.\n   * In case of REPLAY_STARTED, the window of message IDs and acknowledgements are reset\n   * to allow replay packets to be passed to the application without marking them as duplicates.\n   * In case of GM_UNAVAILABLE, flow state is preserved.\n   *\n   * If reconnecting fails after exhausting the number of retries, a DOWN_ERROR is emitted\n   * with the details of the last retry.\n   *\n   *\n   * @type {Number}\n   * @default -1\n   */\n  get reconnectAttempts() {\n    return Check.something(this._reconnectAttempts)\n      ? this._reconnectAttempts :\n        DEFAULTS.reconnectAttempts;\n  }\n  set reconnectAttempts(newValue) {\n    this._reconnectAttempts = newValue;\n  }\n\n  /**\n   * Time to wait between flow auto reconnect attempts, in milliseconds.\n   * See {@link solace.MessageConsumerProperties.reconnectAttempts}\n   * Defaults to 3 seconds (3000)\n   *  * The valid range is >= 50.\n   *\n   * @type {Number}\n   * @default 3000\n   */\n  get reconnectIntervalInMsecs() {\n    return Check.something(this._reconnectIntervalInMsecs)\n      ? this._reconnectIntervalInMsecs :\n        DEFAULTS.reconnectIntervalInMsecs;\n  }\n  set reconnectIntervalInMsecs(newValue) {\n    this._reconnectIntervalInMsecs = newValue;\n  }\n\n  /**\n   * If the endpoint is durable, it won't be auto-created unless this flag is set.\n   * This flag has no effect for temporary endpoints, those are always created if missing.\n   * This flag has no effect for existing endpoints.\n   *\n   * Off by default for backwards compatibility.\n   *\n   * @type {Boolean}\n   * @default false\n   *\n   */\n  get createIfMissing() {\n    return Check.something(this._createIfMissing)\n      ? this._createIfMissing :\n        DEFAULTS.createIfMissing;\n  }\n\n  set createIfMissing(newValue) {\n    this._createIfMissing = newValue;\n  }\n\n}\nmodule.exports.MessageConsumerProperties = MessageConsumerProperties;\n","const SMFLib = require('solclient-smf');\nconst { CapabilityType } = require('solclient-session');\nconst { ConsumerFSM } = require('./consumer-fsm');\nconst { ConsumerFSMEvent } = require('./consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./consumer-fsm-event-names');\nconst { ErrorResponseSubcodeMapper,\n  ErrorSubcode,\n  OperationError } = require('solclient-error');\nconst { Flow, FlowOperation } = require('solclient-flow');\nconst { MessageConsumerEvent } = require('./message-consumer-event');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { MessageConsumerProperties } = require('./message-consumer-properties');\nconst { MessageConsumerPropertiesValidator } = require('./message-consumer-properties-validator');\nconst { Queue, Topic } = require('solclient-destination');\nconst { QueueAccessType, QueuePermissions, QueueDiscardBehavior } = require('solclient-queue');\n\n\nfunction formatEventName(eventName) {\n  return `MessageConsumerEventName.${MessageConsumerEventName.describe(eventName)}`;\n}\n\nlet localCounter = 0;\nfunction getConsumerLocalName() {\n  return `ConsumerFSM ${localCounter++}`;\n}\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * A Message Consumer is created by calling {@link solace.Session#createMessageConsumer}.\n *\n * A MessageConsumer controls Guaranteed Message delivery to this client.\n *\n * Consumer characteristics and behavior are defined by {@link solace.MessageConsumerProperties}.\n * The properties can also be supplied as a simple key-value {Object}. The queue descriptor,\n * {@link solace.MessageConsumerProperties#queueDescriptor} must be specified to identify the\n * Guaranteed Message Queue or Guaranteed Message Topic Endpoint on the Solace Message Router.\n *\n * The MessageConsumer object is an EventEmitter, and will emit events to which the\n * application may choose to subscribe, such as the connection to the Solace Message Router\n * going up or down.\n *\n * If a registered listener for an emitted event throws an exception, this is caught and emitted as\n * an 'error'.\n *\n * @fires solace.MessageConsumerEventName#ACTIVE\n * @fires solace.MessageConsumerEventName#CONNECT_FAILED_ERROR\n * @fires solace.MessageConsumerEventName#DISPOSED\n * @fires solace.MessageConsumerEventName#DOWN\n * @fires solace.MessageConsumerEventName#DOWN_ERROR\n * @fires solace.MessageConsumerEventName#GM_DISABLED\n * @fires solace.MessageConsumerEventName#INACTIVE\n * @fires solace.MessageConsumerEventName#MESSAGE\n * @fires solace.MessageConsumerEventName#UP\n * @fires solace.MessageConsumerEventName#SUBSCRIPTION_OK\n * @fires solace.MessageConsumerEventName#SUBSCRIPTION_ERROR\n *\n *\n * @hideconstructor\n * @extends solace.Flow\n * @memberof solace\n */\nclass MessageConsumer extends Flow {\n  constructor({ properties, sessionInterfaceFactory } = {}) {\n    const applyProperties = new MessageConsumerProperties(properties);\n    MessageConsumerPropertiesValidator.validate(applyProperties.browser ?\n      'QueueBrowserProperties' : 'MessageConsumerProperties',\n                                                applyProperties, properties);\n    super(applyProperties, sessionInterfaceFactory, {\n      direct: MessageConsumerEventName.MESSAGE,\n      emits:  MessageConsumerEventName.values,\n      formatEventName,\n    });\n\n    const superFormatter = this.logger.formatter;\n    this.logger.formatter = (...args) => superFormatter('[message-consumer]', ...args);\n\n    this._active = undefined;\n    this._fsm = this._makeFSM();\n    this.endpointErrorId = undefined;\n\n    this._on(MessageConsumerEventName.ACTIVE, () => this._onFlowActive(true));\n    this._on(MessageConsumerEventName.INACTIVE, () => this._onFlowActive(false));\n    this._on(MessageConsumerEventName.DOWN_ERROR, this._onFlowDisconnected.bind(this));\n    this._on(MessageConsumerEventName.UP, this._onFlowUp.bind(this));\n    this._fsm.start(); // Subscriber flows self-manage, so they start immediately\n  }\n\n  _makeFSM() {\n    const properties = this._properties;\n    const name = `${getConsumerLocalName()}`;\n    return new ConsumerFSM({\n      name,\n      consumer:         this,\n      sessionInterface: this._sessionInterface,\n      properties,\n    });\n  }\n\n  /**\n   * Begins delivery of messages to this consumer. This method opens the protocol window\n   * to the Solace Message Router so further messages can be received.\n   *\n   * A newly created consumer is in started state.\n   *\n   * If the consumer was already started, this method has no effect.\n   *\n   * A consumer is stopped by calling {@link solace.MessageConsumer.stop}\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disposed.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  start() {\n    this._operationCheck(FlowOperation.START);\n    this._fsm.requestStartDispatchUser();\n  }\n\n  /**\n   * Stops messages from being delivered to this consumer from the Solace Message Router.\n   * Messages may continue to be prefetched by the API and queued internally\n   * until {@link solace.MessageConsumer#start} is called.\n   *\n   * If the consumer was already stopped, this method has no effect.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  stop() {\n    this._operationCheck(FlowOperation.STOP);\n    this._fsm.requestStopDispatchUser();\n  }\n\n  /**\n   * Connects the consumer immediately. The application should add event listeners (see\n   * {@link solace.MessageConsumerEventName}). If there is no listener added for\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} then up to a window\n   * {@link solace.MessageConsumerProperties.windowSize} of messages can be queued internally.\n   * to the {@link solace.MessageConsumer} before calling this method.\n   *\n   * @throws {solace.OperationError}\n   *  * if consumer is not supported by router for this client.\n   *  subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   *\n   */\n  connect() {\n    if ((this._sessionInterface.getCapability(CapabilityType.GUARANTEED_MESSAGE_CONSUME)\n        !== null) &&\n        (!this._sessionInterface.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME))) {\n      throw new OperationError('Consumer is not supported by router for this client',\n              ErrorSubcode.INVALID_OPERATION, null);\n    }\n    super.connect();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_OPEN }));\n  }\n\n  /**\n   * Initiates an orderly disconnection of the Message Consumer. The API will send any pending\n   * client acknowledgements on the Message Consumer, then send an unbind request.\n   * Any messages subsequently\n   * received are discarded silently. When the unbind message is acknowledged, the application\n   * receives a {@link solace.MessageConsumerEventName#event:DOWN} event if it has set a listener\n   * for that event.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  disconnect() {\n    super.disconnect();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_CLOSE }));\n  }\n\n  /**\n   * Returns the destination that should be used to publish messages that this consumer\n   * will receive.\n   * * For topic endpoints, this is the topic to which the topic endpoint is subscribed.\n   * * For queues, this is the associated queue destination.\n   *\n   * The destination returned can\n   * be used to set the ReplyTo field in a message, or otherwise communicated\n   * to partners that need to send messages to this Message Consumer. This is especially useful\n   * for temporary endpoints (Queues and Topic Endpoints), as the destination\n   * is unknown before the endpoint is created.\n   *\n   * This method will succeed after {@link solace.MessageConsumerEventName#event:UP} for temporaries\n   * with generated destinations.\n   *\n   * @throws {solace.OperationError}\n   * * if the {@link solace.MessageConsumer} is disconnected and the destination is temporary.\n   *\n   * @returns {solace.Destination} The publishing destination that delivers to this consumer.\n   */\n  getDestination() {\n    const destination = this._fsm.getDestination();\n    if (destination instanceof Queue) {\n      return new Queue(destination);\n    }\n    return new Topic(destination);\n  }\n\n  // Application has disconnected the session, we must continue to orderly shut down\n  // unbinding Message Consumers,\n  // but Message Consumers that are up merely treat this as a 'down' event and\n  // transition to awaitingSessionUp\n  _disconnectSession() {\n    super._disconnectSession();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DISCONNECT }));\n  }\n\n  _operationCheck(operation) {\n    super._operationCheck(operation);\n    switch (operation) {\n      case FlowOperation.GET_DESTINATION:\n        if (this._isDisconnected()) {\n          throw new OperationError('Cannot get destination of a disconnected flow',\n                                   ErrorSubcode.INVALID_OPERATION);\n        }\n        break;\n      default:\n    }\n  }\n\n  // ----\n\n  /**\n   * @param {any} messageId The message ID to ack\n   * @internal\n   */\n  applicationAck(messageId) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Adding application ack for ${messageId}`);\n    this._fsm.applicationAck(messageId);\n  }\n\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    return MessageConsumerEventName.DISPOSED;\n  }\n\n  /**\n   * @param {solace.Message} message The data message to handle\n   * @internal\n   */\n  handleDataMessage(message) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Handling data message');\n    message.setMessageConsumer(this);\n    this._fsm.acceptMessage(message);\n  }\n\n  /**\n   * @override\n   * @param {solace.AdProtocolMessage} message The control message to handle\n   * @internal\n   */\n  handleUncorrelatedControlMessage(message) {\n    const { LOG_INFO, LOG_DEBUG, LOG_TRACE } = this.logger;\n    LOG_INFO('Handling uncorrelated control message');\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.UNBIND: {\n        const responseCode = message.smfHeader.pm_respcode;\n        const description = message.smfHeader.pm_respstr;\n        const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                          description);\n        LOG_TRACE(`Handling uncorrelated UNBIND. endpointErrorId: ${message.getEndpointErrorId()}`);\n        if (message.getEndpointErrorId() !== undefined) {\n          this.endpointErrorId = message.getEndpointErrorId();\n        }\n        this.processFSMEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.FLOW_UNBOUND,\n        },\n          new OperationError(description, errorSubcode, responseCode)\n        ));\n      }\n        break;\n      case SMFAdProtocolMessageType.FLOWCHANGEUPDATE:\n        this.processFSMEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.FLOW_ACTIVE_IND,\n        }, {\n          active: message.getActiveFlow(),\n        }));\n        break;\n      default:\n        LOG_DEBUG('Dropping unhandled AD control message: ',\n                  SMFAdProtocolMessageType.describe(msgType));\n    }\n  }\n\n  /**\n   * Creates and returns copy of the properties for this MessageConsumer.\n   *\n   * If the object was constructed using an {@link solace.AbstractQueueDescriptor},\n   * and the queue descriptor was subsequently connected to an endpoint, the\n   * `MessageConsumerProperties` returned will include a {@link solace.QueueDescriptor}\n   * that contains the resolved name.\n   *\n   * A new copy of the properties object is returned each time this property is accessed.\n   * The returned object cannot be polled for mutations such as the one described above.\n   *\n   * @returns {solace.MessageConsumerProperties} The properties associated with this object.\n   */\n  getProperties() {\n    return super.getProperties();\n  }\n\n  /**\n   * Resets the router state contained in the consumer, e.g. on VRN change\n   *\n   * @memberof MessageConsumer\n   * @internal\n   */\n  onVRNChanged() {\n    this.processFSMEvent(new ConsumerFSMEvent({\n      name: ConsumerFSMEventNames.VIRTUALROUTER_NAME_CHANGED,\n    }));\n  }\n\n  /**\n   * After the MessageConsumer has connected to an endpoint\n   * ({@link solace.MessageConsumerEventName#UP}), accesstype represents\n   *  the access type for the endpoint to which this Message Consumer is bound.\n   * @name solace.MessageConsumer.accessType\n   * @type {solace.QueueAccessType}\n   */\n  get accessType() {\n    return this._accessType;\n  }\n  /**\n   * @param {solace.QueueAccessType} value The value to set\n   * @internal\n   */\n  set accessType(value) {\n    this._accessType = value;\n  }\n\n  /**\n   * Whether the consumer is active. If active indications for the consumer are not\n   * enabled, this will return undefined.\n   * @type {?Boolean}\n   * @internal\n   */\n  get active() {\n    return this._active;\n  }\n  /**\n   * @param {Boolean} value The value to set\n   * @internal\n   */\n  set active(value) {\n    if (value !== this._active) {\n      this._emit(value ? MessageConsumerEventName.ACTIVE : MessageConsumerEventName.INACTIVE);\n    }\n    this._active = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}, queueDiscardBehavior represents\n   * the discard behavior flags for the endpoint to which this Message Consumer is bound.\n   * @name solace.MessageConsumer.queueDiscardBehaviour\n   * @type {solace.QueueDiscardBehavior}\n   */\n  get queueDiscardBehavior() {\n    return this._queueDiscardBehavior;\n  }\n  /**\n   * @param {solace.QueueDiscardBehavior} value The value to set\n   * @internal\n   */\n  set queueDiscardBehavior(value) {\n    this._queueDiscardBehavior = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}\n   * respectsTTL is `true` when the endpoint respects Time To Live on messages\n   * and 'false' otherwise.\n   * @name solace.MessageConsumer.respectsTTL\n   * @type {Boolean}\n   */\n  get respectsTTL() {\n    return this._respectsTTL;\n  }\n  /**\n   * @param {Boolean} value The value to set\n   * @internal\n   */\n  set respectsTTL(value) {\n    this._respectsTTL = value;\n  }\n\n  /**\n   * Gets the flow ID for this consumer. This number will change between reconnects\n   * and is purely informational.\n   * @type {Long}\n   * @internal\n   */\n  get flowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The value to set\n   * @internal\n   */\n  set flowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}, this property represents\n   * permissions granted by the router to this user on this Message Consumer\n   * @name solace.MessageConsumer.permissions\n   * @type {solace.QueuePermissions}\n   */\n  get permissions() {\n    return this._permissions || 0;\n  }\n  /**\n   * @param {Number} value The value to set\n   * @internal\n   */\n  set permissions(value) {\n    this._permissions = value;\n  }\n\n  _onFlowActive(isActive) {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG(`Flow (flowId = ${this._flowId}) became ${isActive ? 'active' : 'inactive'}`);\n    this._active = isActive;\n  }\n\n  _onFlowDisconnected(error) {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`${this} disconnected: ${error}.message`);\n  }\n\n  _disposeFSM() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Disposing FSM');\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.DISPOSE }));\n  }\n\n  _onFlowUp() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`Flow is up: flowId = ${this._flowId}`);\n  }\n\n  [util_inspect_custom]() {\n    return Object.assign(super[util_inspect_custom](), {\n      'destination':          this._destination,\n      'accessType':           QueueAccessType.describe(this.accessType),\n      'permissions':          QueuePermissions.describe(this.permissions),\n      'respectsTTL':          this.respectsTTL,\n      'active':               this.wantFlowChangeNotify ? this.active : '(indications disabled)',\n      'wantFlowChangeNotify': this.wantFlowChangeNotify,\n      'queueDiscardBehavior': QueueDiscardBehavior.describe(this.queueDiscardBehavior),\n      'maxWindowSize':        this._fsm.maxWindowSize,\n    });\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n  _isDisconnected() {\n    return this._fsm.isDisconnected();\n  }\n\n  /**\n   * Subscribe the queue to a topic, always requesting confirmation from the router.\n   *\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_OK} is generated when subscription is\n   * added successfully; otherwise, session event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR} is generated.\n   *\n   * When the application receives the event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.MessageConsumerEvent#reason}.\n   * The returned string is in the format of \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to add.\n   * @param {Object} correlationKey If specified, this value is\n   *                                echoed in the messageConsumer event within\n   *                                {@link MessageConsumerEvent}.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected,\n   *   or the consumer is inactive, down, disconnected, or disposed.\n   *   Or if the consumer is bound to a topic endpoint instead of a queue.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  addSubscription(topic, correlationKey, requestTimeout) {\n    const callback = (success, subCode, respCode, respText) => {\n      if (success) {\n        const event = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_OK, event);\n      } else {\n        const error = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_ERROR,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_ERROR, error);\n      }\n    };\n\n    this._sessionInterface.updateQueueSubscription(\n      topic,\n      this._fsm.getDestination(),\n      true,\n      this,\n      callback,\n      requestTimeout);\n  }\n  /**\n   * Unsubscribe the queue from a topic, requesting confirmation from the router.\n   *\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_OK} is generated when subscription is\n   * removed successfully; otherwise, session event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR} is generated.\n   *\n   * When the application receives the message consumer event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.MessageConsumerEvent#reason}. The returned\n   * string is in the format \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to remove.\n   * @param {Object} correlationKey If <code>null</code> or undefined, a Correlation Key is not set\n   *                                in the confirmation session event.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected,\n   *   or the consumer is inactive, down, disconnected, or disposed.\n   *   Or if the consumer is bound to a topic endpoint instead of a queue.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  removeSubscription(topic, correlationKey, requestTimeout) {\n    const callback = (success, subCode, respCode, respText) => {\n      if (success) {\n        const event = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_OK, event);\n      } else {\n        const error = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_ERROR,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_ERROR, error);\n      }\n    };\n\n    this._sessionInterface.updateQueueSubscription(\n      topic,\n      this._fsm.getDestination(),\n      false,\n      this,\n      callback,\n      requestTimeout);\n  }\n}\n\nmodule.exports.MessageConsumer = MessageConsumer;\n","const { MessageConsumerEventName } = require('./message-consumer-event-names');\n\nfunction formatEventName(x) {\n  return `MessageConsumerEventName.${MessageConsumerEventName.describe(x)}`;\n}\n\nclass MessageDispatcher {\n  constructor({ emitter, autoAck, logger } = {}) {\n    Object.assign(this, {\n      emitter,\n      queue:    [],\n      dispatch: true,\n      formatEventName,\n      logger,\n    });\n    this._dispatchOne = autoAck ? this._dispatchOneAutoAck : this._dispatchOneBare;\n    this.emitter.setOnFirstDirectListener(this._onFirstMessageListener.bind(this));\n    // Although a listener may not be available, we set it to true so that we detect a transition to\n    // false when we attempt to dispatch the first message, which will generate a log that\n    // dispatching is stopped due to a missing listener.\n    this._availableListener = true;\n  }\n\n  start() {\n    this.dispatch = true;\n    this._flush();\n  }\n\n  stop() {\n    this.dispatch = false;\n  }\n\n  get length() {\n    return this.queue.length;\n  }\n\n  push(message) {\n    const { LOG_TRACE } = this.logger;\n    this.queue.push(message);\n\n    if (this.dispatch) {\n      this._flush();\n    } else {\n      LOG_TRACE(`Dispatch disabled, message ${message.getGuaranteedMessageId()} queued locally`);\n    }\n  }\n\n  _onFirstMessageListener() {\n    const { LOG_DEBUG } = this.logger;\n    if (!this._availableListener) {\n      LOG_DEBUG(`Message listener available for dispatcher, ${this.queue.length} messages queued`);\n      LOG_DEBUG(`Dispatcher started and connected: ${this.dispatch ? 'true' : 'false'}`);\n      this._availableListener = true;\n    }\n    this._flush();\n  }\n\n  _flush() {\n    const { LOG_DEBUG } = this.logger;\n    // Check whether dispatch enabled for every element,\n    // to handle when #stop is called from a message handler\n    while (this.queue.length && this.dispatch && (this.emitter.directListenerCount() > 0)) {\n      this._dispatchOne(this.queue.shift());\n    }\n\n    if (this.queue.length && this.dispatch &&\n        (this.emitter.directListenerCount() === 0) && this._availableListener) {\n      LOG_DEBUG('Message dispatching stopped: No message listener registered');\n      this._availableListener = false;\n    }\n  }\n\n  _dispatchOneAutoAck(message) {\n    const { LOG_WARN } = this.logger;\n    // Set the current outbound message, dispatch it, and clear the current outbound message\n    let caught = null;\n\n    // Auto-ack unless the receiver throws.\n    caught = this._dispatchOneBare(message);\n    // Outside of exception block because we want to throw normally from message.acknowledge()\n    if (caught) {\n      LOG_WARN(`Suppressing message acknowledgement for message ${message.getGuaranteedMessageId()\n               } because client threw exception from listener`, caught);\n    } else {\n      // Did the user manually ack for some reason?\n      if (message.isAcknowledged) {\n        LOG_WARN(`Consumer configured to auto-acknowledge messages, but message ${\n                 message.getGuaranteedMessageId()} was application acknowledged`);\n        return;\n      }\n      message.acknowledge(); // No, so ack the message\n    }\n  }\n\n  _dispatchOneBare(message) {\n    const { LOG_WARN } = this.logger;\n    let caught;\n    // Requires the emitter's direct option to be MessageConsumerEventName.MESSAGE\n    if (this.listenerCount === 0) {\n      LOG_WARN(`No listeners to dispatch message ${message.getGuaranteedMessageId()}`);\n    }\n    // Since _dispatchOneBare uses emitDirect, this behaviour is not affected by the presence\n    // of an 'error' handler.\n    try {\n      this.emitter.emitDirect(message);\n    } catch (ex) {\n      // User code threw an exception\n      caught = this.emitter.formatErrorEvent(ex, MessageConsumerEventName.MESSAGE, message);\n      // Also propagating to the common error handler\n      this.emitter.emit('error', caught);\n    }\n    return caught;\n  }\n\n}\n\nmodule.exports = { MessageDispatcher };\n","const { Enum } = require('solclient-eskit');\n/**\n * An enumeration of queue browser event names. A {@link solace.QueueBrowser} will emit\n * these events as part of its lifecycle.  Applications, having created a QueueBrowser can\n * choose to listen to all of the events described here, or any subset of these events. For Example:\n * <pre>\n *   <code>\n *     qb = solace.Session.createQueueBrowser(...);\n *     qb.on(solace.QueueBrowserEventName.CONNECT_FAILED_ERROR,\n *           function connectFailedErrorEventCb(error) {\n *             // details is an OperationError object\n *           });\n *   </code>\n * </pre>\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst QueueBrowserEventName = {\n  /**\n   * The queue browser is established.\n   * @event solace.QueueBrowserEventName#UP\n   */\n  UP:                   'QueueBrowserEventName_up',\n  /**\n   * The queue browser is successfully disconnected.\n   * The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#DOWN\n   */\n  DOWN:                 'QueueBrowserEventName_down',\n /**\n   * The queue browser was established and then disconnected by the router,\n   * likely due to operator intervention. The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#DOWN_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  DOWN_ERROR:           'QueueBrowserEventName_downError',\n  /**\n   * The queue browser attempted to connect but was unsuccessful.\n   * The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  CONNECT_FAILED_ERROR: 'QueueBrowserEventName_connectFailedError',\n  /**\n   * The queue browser will not connect because the current session is incompatible\n   * with Guaranteed Messaging. The queue browser is disabled until a compatible session\n   * is available.\n   *\n   * @event solace.QueueBrowserEventName#GM_DISABLED\n   */\n  GM_DISABLED:          'QueueBrowserEventName_GMDisabled',\n  /**\n   * The queue browser is being disposed. No further events will be emitted.\n   *\n   * @event solace.QueueBrowserEventName#DISPOSED\n   */\n  DISPOSED:             'QueueBrowserEventName_disposed',\n  /**\n   * A message was received on the queue browser.\n   *\n   * If the application did not retain a reference to the message, it\n   * may be redelivered by calling {@link solace.QueueBrowser#disconnect} followed by\n   * {@link solace.QueueBrowser#connect} depending on the configuration of the queue.\n   *\n   * When there is no listener for <i>MESSAGE</i> on a QueueBrowser, messages are queued\n   * internally until a listener is added.\n   *\n   * @event solace.QueueBrowserEventName#MESSAGE\n   * @param {solace.Message} message The received message being delivered in this event.\n   */\n  MESSAGE:              'QueueBrowserEventName_message',\n};\n\nmodule.exports.QueueBrowserEventName = Enum.new(QueueBrowserEventName);\n","const QueueLib = require('solclient-queue');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\n\nconst DEFAULTS = {\n  queueDescriptor:                         undefined,\n  connectTimeoutInMsecs:                   10000,\n  connectAttempts:                         3,\n  windowSize:                              255,\n  transportAcknowledgeTimeoutInMsecs:      1000,\n  transportAcknowledgeThresholdPercentage: 60,\n};\n\n/**\n * @classdesc\n * Defines the properties for a {@link solace.QueueBrowser}.\n *\n * @memberof solace\n */\nclass QueueBrowserProperties extends APIProperties {\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Defines the queue from which to consume.\n   *  * For durable queues and durable topic endpoints, this must be a\n   *    {@link solace.QueueDescriptor}.\n   * @type {solace.QueueDescriptor}\n   */\n  get queueDescriptor() {\n    return Check.something(this._queueDescriptor)\n      ? this._queueDescriptor\n      : DEFAULTS.queueDescriptor;\n  }\n  set queueDescriptor(value) {\n    if (value) {\n      this._queueDescriptor = new QueueLib.QueueDescriptor(value);\n    } else {\n      this._queueDescriptor = value;\n    }\n  }\n\n  // ------------ Properties controlling connection of the consumer ----------------\n  /**\n   * The bind timeout in milliseconds when creating a connection to the Solace Message Router.\n   *  * The valid range is >= 50.\n   * @type {Number}\n   * @default 10000\n   */\n  get connectTimeoutInMsecs() {\n    return Check.something(this._bindTimeoutInMsecs)\n      ? this._bindTimeoutInMsecs\n      : DEFAULTS.connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(value) {\n    this._bindTimeoutInMsecs = value;\n  }\n\n  /**\n   * Gets and sets the maximum number of bind attempts when creating a connection to the\n   * Solace Message Router.\n   *  * The valid range is >= 1.\n   * @type {Number}\n   * @default 3\n   */\n  get connectAttempts() {\n    return Check.something(this._connectAttempts)\n      ? this._connectAttempts\n      : DEFAULTS.connectAttempts;\n  }\n  set connectAttempts(val) {\n    this._connectAttempts = val;\n  }\n\n  // ----------- Properties controlling an established connection to a queue --------------\n  /**\n   * The window size for Guaranteed Message delivery.  This is the maximum number of messages that\n   * will be prefetched from the Solace Messaging Router and queued internally by the API while\n   * waiting for the application to accept delivery of the messages.\n   *   * The valid range is 1 <= windowSize <= 255.\n   * @type {Number}\n   * @default 255\n   */\n  get windowSize() {\n    return Check.something(this._windowSize)\n      ? this._windowSize :\n      DEFAULTS.windowSize;\n  }\n  set windowSize(val) {\n    this._windowSize = val;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging in milliseconds.\n   * When the {@link solace.QueueBrowserProperties.transportAcknowledgeTimeoutInMsecs} is not\n   * exceeded, acknowledgements will be returned to the router at intervals not less than\n   * this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   */\n  get transportAcknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set transportAcknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   */\n  get transportAcknowledgeThresholdPercentage() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set transportAcknowledgeThresholdPercentage(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n}\n\nmodule.exports.QueueBrowserProperties = QueueBrowserProperties;\n","const { EventEmitter } = require('solclient-events');\nconst { LogFormatter } = require('solclient-log');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { QueueBrowserEventName } = require('./queue-browser-event-names');\n\nfunction formatEventName(eventName) {\n  return `QueueBrowserEventName.${QueueBrowserEventName.describe(eventName)}`;\n}\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * A Queue Browser is created by calling {@link solace.Session#createQueueBrowser}.\n *\n * A Queue Browser allows client applications to look at messages spooled on Endpoints\n * without removing them. Messages are browsed from oldest to newest.\n * After being browsed, messages are still available for consumption over normal flows.\n * However, it is possible to selectively remove messages from the persistent store of an Endpoint.\n * In this case, these removed messages will no longer be available for consumption.\n\n * Note: If browsing a queue with an active consumer, no guarantee is made that the browser will\n * receive all messages published to the queue. The consumer can receive and acknowledge messages\n * before they are delivered to the browser.\n *\n * One typical application is to use Browsers to allow message bus administrators to remove “stuck”\n * Guaranteed messages from an Endpoint without having to modify or disrupt existing applications.\n * A message can get stuck if:\n *\n *  1) It has been received by an application, but for some reason, that application has failed to\n *     acknowledge it.\n *  2) All active message selectors have failed to match this particular message and therefore the\n *     message bus has not delivered it to any client yet. The current release only supports\n *     browsing Endpoints of type Queue.\n *\n * Note that the delivery restrictions imposed by the queue’s Access type\n * (exclusive or non-exclusive), do not apply when browsing messages with a Browser.\n *\n * Browser characteristics and behavior are defined by {@link solace.QueueBrowserProperties}.\n * The properties can also be supplied as a simple key-value {Object}. The queue descriptor,\n * {@link solace.QueueBrowserProperties#queueDescriptor} must be specified to identify the\n * Guaranteed Message Queue on the Solace Message Router.\n *\n * The Browser is an EventEmitter, and will emit events to which the application may choose to\n * subscribe, such as the connection to the Solace Message Router going up or down.\n *\n * If a registered listener for an emitted event throws an exception, this is caught and emitted as\n * an 'error'.\n *\n * @fires solace.QueueBrowserEventName#CONNECT_FAILED_ERROR\n * @fires solace.QueueBrowserEventName#DISPOSED\n * @fires solace.QueueBrowserEventName#DOWN\n * @fires solace.QueueBrowserEventName#DOWN_ERROR\n * @fires solace.QueueBrowserEventName#GM_DISABLED\n * @fires solace.QueueBrowserEventName#MESSAGE\n * @fires solace.QueueBrowserEventName#UP\n *\n * @hideconstructor\n * @memberof solace\n */\nclass QueueBrowser extends EventEmitter {\n  constructor(messageConsumer) {\n    super({\n      direct: QueueBrowserEventName.MESSAGE,\n      emits:  QueueBrowserEventName.values,\n      formatEventName,\n    });\n\n    this._messageConsumer = messageConsumer;\n    this.logger = new LogFormatter((...args) =>\n      ['[queue-browser]', ...args]);\n\n    this._setupEventListers();\n  }\n\n  _setupEventListers() {\n    // Listen to message consumer events, redispatch as queue browser events\n    this._messageConsumer.on(MessageConsumerEventName.UP, this._onConsumerUp.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.CONNECT_FAILED_ERROR,\n                             this._onConsumerConnectFailed.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DOWN, this._onConsumerDown.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DOWN_ERROR,\n                             this._onConsumerDownError.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.MESSAGE, this._onConsumerMessage.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DISPOSED,\n                             this._onConsumerDisposed.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.GM_DISABLED,\n                             this._onConsumerGMDisabled.bind(this));\n  }\n\n  _onConsumerMessage(event) {\n    this.emit(QueueBrowserEventName.MESSAGE, event);\n  }\n\n  _onConsumerUp(event) {\n    this.emit(QueueBrowserEventName.UP, event);\n  }\n\n  _onConsumerConnectFailed(event) {\n    this.emit(QueueBrowserEventName.CONNECT_FAILED_ERROR, event);\n  }\n\n  _onConsumerDown(event) {\n    this.emit(QueueBrowserEventName.DOWN, event);\n  }\n\n  _onConsumerDownError(event) {\n    this.emit(QueueBrowserEventName.DOWN_ERROR, event);\n  }\n\n  _onConsumerDisposed(event) {\n    this.emit(QueueBrowserEventName.DISPOSED, event);\n  }\n\n  _onConsumerGMDisabled(event) {\n    this.emit(QueueBrowserEventName.GM_DISABLED, event);\n  }\n\n  /**\n   * Connects the queue browser immediately. The application should add event listeners (see\n   * {@link solace.QueueBrowserEventName}). If there is no listener added for\n   * {@link solace.QueueBrowserEventName#event:MESSAGE} then up to a window\n   * {@link solace.QueueBrowserProperties.windowSize} of messages can be queued internally.\n   * before calling this method.\n   *\n   * @throws {solace.OperationError}\n   *  * if consumer is not supported by router for this client.\n   *  subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   *\n   */\n  connect() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Connecting the queue browser\\'s message consumer');\n      this._messageConsumer.connect();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Initiates an orderly disconnection of the queue browser. The API will send an unbind request.\n   * Any messages subsequently received are discarded silently.\n   * When the unbind message is acknowledged, the application\n   * receives a {@link solace.QueueBrowserEventName#event:DOWN} event if it has set a listener\n   * for that event.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  disconnect() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n\n    try {\n      LOG_DEBUG('Disconnecting the queue browser\\'s message consumer');\n      this._messageConsumer.disconnect();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Begins delivery of messages to this queue browser. This method opens the protocol window\n   * to the Solace Message Router so further messages can be received.\n   *\n   * A newly created queue browser is in started state.\n   *\n   * If the queue browser was already started, this method has no effect.\n   *\n   * A consumer is stopped by calling {@link solace.QueueBrowser.stop}\n   *\n   * @throws {solace.OperationError}\n   * * if the Queue BrowserMessage Consumer is disposed.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  start() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Starting the queue browser\\'s message consumer');\n      this._messageConsumer.start();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Stops messages from being delivered to this queue browser from the Solace Message Router.\n   * Messages may continue to be prefetched by the API and queued internally\n   * until {@link solace.QueueBrowser#start} is called.\n   *\n   * If the queue browser was already stopped, this method has no effect.\n   *\n   * @throws {solace.OperationError}\n   * * if the Queue Browser is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  stop() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Stopping the queue browser\\'s message consumer');\n      this._messageConsumer.stop();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Removes a message from the queue by acknowledging it.\n   *\n   * The {@link solace.QueueBrowser} does not automatically acknowledge messages.\n   * once they have been received.\n   *\n   * The API does not send acknowledgments immediately. It stores the state for\n   * acknowledged messages internally and acknowledges messages, in bulk, when a\n   * threshold or timer is reached.\n   *\n   * @param {Message} message The message to remove\n   */\n  removeMessageFromQueue(message) {\n    // ack the message to delete it\n    this._messageConsumer.applicationAck(message._guaranteedMsgId);\n    message._acked = true;\n  }\n\n}\n\nmodule.exports.QueueBrowser = QueueBrowser;\n","const { Enum } = require('solclient-eskit');\nconst { LOG_TRACE,\n        LOG_DEBUG } = require('solclient-log');\nconst { Long } = require('solclient-convert');\n\nconst TransportAckResult = Enum.new({\n  OK:           0,\n  DUPLICATE:    1,\n  OUT_OF_ORDER: 2,\n});\n\nclass TransportAcks {\n  constructor(id = 0) {\n    const base = typeof id === 'number' ? Long.fromNumber(id, true) : Long.fromValue(id);\n    this.lastAcked = base;\n    this._acksPending = 0;\n  }\n\n  reset() {\n    this._acksPending = 0;\n    this.lastAcked = Long.ZERO;\n  }\n\n  tryReceive(messageID, prevMessageID) {\n    if (this._lastReceived.lt(prevMessageID)) {\n      LOG_DEBUG(`Rejecting out of order message: ${prevMessageID} (last received: ${this._lastReceived})`);\n      return TransportAckResult.OUT_OF_ORDER;\n    }\n    if (this._lastReceived.gte(messageID)) {\n      LOG_DEBUG(`Rejecting duplicate message: ${messageID} (last received: ${this._lastReceived})`);\n      // duplicate messages indicate the router is retransmitting because it expects a transport ack\n      this._acksPending++;\n      return TransportAckResult.DUPLICATE;\n    }\n    LOG_TRACE(`Accepting message: ${messageID}`);\n    this._lastReceived = messageID;\n    this._acksPending++;\n    return TransportAckResult.OK;\n  }\n\n  setAcked() {\n    this._lastAcked = Long.fromValue(this._lastReceived);\n    this._acksPending = 0;\n  }\n\n  get acksPending() {\n    return this._acksPending;\n  }\n\n  get lastAcked() {\n    return this._lastAcked;\n  }\n\n  /**\n   * Resets the beginning of the ack sequence to the given value.\n   * @param {Long} value The value to set as last acknowledged ID.\n   */\n  set lastAcked(value) {\n    LOG_TRACE('Setting last acked:', value.toString());\n    Object.assign(this, {\n      _lastAcked:    Long.fromValue(value),\n      _lastReceived: Long.fromValue(value),\n    });\n  }\n\n  get lastReceived() {\n    return this._lastReceived;\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports = {\n  TransportAcks,\n  TransportAckResult,\n};\n","const { MessagePublisher } = require('./lib/message-publisher');\nconst { MessagePublisherAcknowledgeMode } = require('./lib/message-publisher-acknowledge-modes');\nconst { MessagePublisherEventName } = require('./lib/message-publisher-event-names');\nconst { MessagePublisherProperties } = require('./lib/message-publisher-properties');\nconst { MessagePublisherPropertiesValidator } = require('./lib/message-publisher-properties-validator');\nconst { PublisherFSMEvent } = require('./lib/publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./lib/publisher-fsm-event-names');\n\nmodule.exports.MessagePublisherAcknowledgeMode = MessagePublisherAcknowledgeMode;\nmodule.exports.MessagePublisher = MessagePublisher;\nmodule.exports.MessagePublisherProperties = MessagePublisherProperties;\nmodule.exports.PublisherFSMEvent = PublisherFSMEvent;\nmodule.exports.PublisherFSMEventNames = PublisherFSMEventNames;\nmodule.exports.MessagePublisherPropertiesValidator = MessagePublisherPropertiesValidator;\nmodule.exports.MessagePublisherEventName = MessagePublisherEventName;\n","const { Long } = require('solclient-convert');\n\nconst DEFAULTS = {\n  _lastAcked: Long.fromNumber(0, true),\n  _lastSent:  Long.fromNumber(0, true),\n  _next:      Long.fromNumber(1, true),\n};\n\nconst longToString = v => v.toString(10);\n\nclass MessageIds {\n  constructor(attrs) {\n    Object.assign(this, DEFAULTS, attrs);\n  }\n\n  get lastAcked() {\n    return this._lastAcked;\n  }\n  set lastAcked(value) {\n    this._lastAcked = Long.fromValue(value);\n  }\n\n  get lastSent() {\n    return this._lastSent;\n  }\n  setLastSent(id) {\n    this._lastSent = Long.fromValue(id);\n    this._next = this._lastSent.add(1);\n  }\n\n  get next() {\n    return this._next;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'lastAcked': longToString(this.lastAcked),\n      'lastSent':  longToString(this.lastSent),\n      'next':      longToString(this.next),\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.MessageIds = MessageIds;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents authentication scheme enumeration.\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst MessagePublisherAcknowledgeMode = {\n  /**\n   * @description Applications receive an acknowledgement for every\n   * message.\n   * @type {String}\n   */\n  PER_MESSAGE: 'PER_MESSAGE',\n  /**\n   * @description Applications receive a windowed acknowledgement that\n   * acknowledges the returned correlation identifier and every message sent prior.\n   * @type {String}\n   */\n  WINDOWED:    'WINDOWED',\n};\n\nmodule.exports.MessagePublisherAcknowledgeMode = Enum.new(MessagePublisherAcknowledgeMode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * The publisher currently isn't exposed, and its events are dispatched\n * via the Session. These events are therefore private. They should\n * be moved to MessageConsumerEventName when they are made public.\n * @private\n */\nconst MessagePublisherEventName = Enum.new({\n  ACKNOWLEDGED_MESSAGE:      'MessagePublisherEventName_acknowledgedMessage',\n  CONNECT_FAILED_ERROR:      'MessagePublisherEventName_connectFailedError',\n  CAN_SEND:                  'MessagePublisherEventName_canSend',\n  DISPOSED:                  'MessagePublisherEventName_disposed',\n  DOWN:                      'MessagePublisherEventName_down',\n  FLOW_NAME_CHANGED:         'MessagePublisherEventName_flowNameChanged',\n  GUARANTEED_MESSAGING_DOWN: 'MessagePublisherEventName_guaranteedMessagingDown',\n  REJECTED_MESSAGE:          'MessagePublisherEventName_rejectedMessage',\n  DISCONNECT_FAILED_ERROR:   'MessagePublisherEventName_disconnectFailedError',\n  UP:                        'MessagePublisherEventName_up',\n  TRANSPORT_FULL:            'MessagePublisherEventName_transportFull',\n});\n\nmodule.exports.MessagePublisherEventName = MessagePublisherEventName;\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valNumber,\n  valRange,\n} = APIPropertiesValidators;\n\n\nconst MessagePublisherPropertiesValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'MessagePublisherProperties', instance);\n    v('enabled', [valBoolean]);\n    v('windowSize', [valNumber], [valRange, 1, 255]);\n    v('acknowledgeTimeoutInMsecs', [valNumber], [valRange, 20, 60000]);\n    v('acknowledgeMode', [valIsMember, MessagePublisherAcknowledgeMode, 'MessagePublisherAcknowledgeMode']);\n    v('connectRetryCount', [valNumber], [valRange, 0, Number.MAX_VALUE]);\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n  },\n};\n\nmodule.exports.MessagePublisherPropertiesValidator = MessagePublisherPropertiesValidator;\n","const SolclientFactoryLib = require('solclient-factory');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\nconst { TransportCapabilities } = require('solclient-transport');\n\nfunction defaultEnablePublisher() {\n  const { ProfileBinding } = SolclientFactoryLib;\n  const binding = ProfileBinding.value;\n  const globallyEnabled = binding.guaranteedMessagingEnabled;\n  const webSocketAvailable = TransportCapabilities.web.webSocket();\n  return globallyEnabled && webSocketAvailable;\n}\n\nfunction getDefaults() {\n  return {\n    enabled:                   defaultEnablePublisher(),\n    windowSize:                50,\n    acknowledgeTimeoutInMsecs: 2000,\n    acknowledgeMode:           MessagePublisherAcknowledgeMode.PER_MESSAGE,\n    connectRetryCount:         3,\n    connectTimeoutInMsecs:     5000,\n  };\n}\n\n/**\n * @classdesc\n * Properties that define the configuration for a guaranteed message publisher.\n *\n * @memberof solace\n */\nclass MessagePublisherProperties extends APIProperties {\n  /**\n   * @constructor\n   * @param {Object} options Properties to apply to the newly constructed object.\n   */\n  constructor(options) {\n    super(getDefaults(), options || {});\n  }\n  /**\n   * @name solace.MessagePublisherProperties#enabled\n   * @type {Boolean}\n   * @description When enabled, a Guaranteed Messaging Publisher\n   * is automatically created when a session is connected.\n   *\n   * The default value is the same as the value provided to\n   * {@link solace.SolclientFactory.init},\n   * in the profile, {@link solace.SolclientFactoryProperties#profile},\n   * in the field {@link solace.FactoryProfile#guaranteedMessagingEnabled}.\n   */\n  get enabled() {\n    return this._enabled;\n  }\n  set enabled(newValue) {\n    this._enabled = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#windowSize\n   * @default 50\n   * @type {Number}\n   * @description  Maximum number of messages that can be published\n   * without acknowledgment.\n   *  * The valid range is 1 <= value <= 255\n   */\n  get windowSize() {\n    return Check.defined(this._windowSize)\n      ? this._windowSize\n      : getDefaults().windowSize;\n  }\n  set windowSize(newValue) {\n    this._windowSize = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#acknowledgeTimeoutInMsecs\n   * @type {Number}\n   * @default 2000\n   * @description  The time to wait for an acknowledgement,\n   * in milliseconds, before retransmitting unacknowledged\n   * messages.\n   *  * The valid range is 20 <= value <= 60000.\n   */\n  get acknowledgeTimeoutInMsecs() {\n    return Check.defined(this._acknowledgeTimeoutInMsecs)\n      ? this._acknowledgeTimeoutInMsecs\n      : getDefaults().acknowledgeTimeoutInMsecs;\n  }\n  set acknowledgeTimeoutInMsecs(newValue) {\n    this._acknowledgeTimeoutInMsecs = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#acknowledgeMode\n   * @type {solace.MessagePublisherAcknowledgeMode}\n   * @default {@link solace.MessagePublisherAcknowledgeMode.PER_MESSAGE}\n   * @description  The message-router sends windowed acknowledgements\n   * which the API converts to per-message acknowledgement by default. If\n   * acknowledgeMode is Windowed, then the API will simply pass through\n   * the message-router acknowledgements.\n   */\n  get acknowledgeMode() {\n    return this._acknowledgeMode || MessagePublisherAcknowledgeMode.PER_MESSAGE;\n  }\n  set acknowledgeMode(newValue) {\n    this._acknowledgeMode = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#connectRetryCount\n   * @type {Number}\n   * @default 3\n   * @description The number of times to retry a bind (aka open-flow) request\n   * before deciding the the Guaranteed Message Publisher cannot be started.\n   *  * The valid range 0 <= value.\n   * @private\n   */\n  get connectRetryCount() {\n    return Check.defined(this._connectRetryCount)\n      ? this._connectRetryCount\n      : getDefaults().connectRetryCount;\n  }\n  set connectRetryCount(newValue) {\n    this._connectRetryCount = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @default 5000\n   * @description  The time to wait for an bind response,\n   * in milliseconds, before retransmitting the bind request.\n   *  * The valid range is 50 <= value</li>\n   * @private\n   */\n  get connectTimeoutInMsecs() {\n    return Check.defined(this._connectTimeoutInMsecs)\n      ? this._connectTimeoutInMsecs\n      : getDefaults().connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(newValue) {\n    this._connectTimeoutInMsecs = newValue;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      enabled:                   this.enabled,\n      windowSize:                this.windowSize,\n      acknowledgeTimeoutInMsecs: this.acknowledgeTimeoutInMsecs,\n      acknowledgeMode:           MessagePublisherAcknowledgeMode.describe(this.acknowledgeMode),\n      connectRetryCount:         this.connectRetryCount,\n      connectTimeoutInMsecs:     this.connectTimeoutInMsecs,\n    };\n  }\n}\n\nmodule.exports.MessagePublisherProperties = MessagePublisherProperties;\n","const SMFLib = require('solclient-smf');\nconst { Flow, PrivateFlowEventName } = require('solclient-flow');\nconst { LogFormatter } = require('solclient-log');\nconst { MessagePublisherEventName } = require('./message-publisher-event-names');\nconst { MessagePublisherProperties } = require('./message-publisher-properties');\nconst { PublisherFSM } = require('./publisher-fsm');\nconst { PublisherFSMEvent } = require('./publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./publisher-fsm-event-names');\n\nconst { LOG_WARN } = new LogFormatter();\n\nclass MessagePublisher extends Flow {\n  /**\n   * Represents a Guaranteed Message Publisher.  This object must be used to publish\n   * Guaranteed Messages on a session.\n   *\n   * Publishers are created on sessions.  In this implementation the session functions are provided\n   * by the sessionFSM.  Publishers require the session to provide\n   * basic communications functions:\n   *  * send - send a message to the transport\n   *  * getCorrelationTag - return a unique transport correlation tag\n   *  * enqueueOutstandingCorrelatedReq - enqueue a callback for a received message\n   *    on a correlation tag\n   *\n   * @constructor\n   * @param {Object} properties Expected schema is\n   *  {@link solace.MessagePublisherProperties}\n   * @param {Object} sessionInterfaceFactory The session for the Guaranteed Message Publisher\n   * @private\n   */\n  constructor({ properties, sessionInterfaceFactory } = {}) {\n    const applyProperties = new MessagePublisherProperties(properties);\n    super(applyProperties, sessionInterfaceFactory, {\n      direct: MessagePublisherEventName.ACKNOWLEDGED_MESSAGE,\n      emits:  MessagePublisherEventName.values, // super adds MessageConsumerEventName\n    });\n    this._fsm = this._makeFSM();\n    const logger = new LogFormatter();\n    logger.formatter = function formatter(...args) {\n      return [\n        '[message-publisher]',\n        ...args,\n      ];\n    };\n    this.log = logger.wrap(this.log, this);\n\n    // Doesn't emit anything unless started; won't start unless bindWaiting\n    this._bindWaiting = true;\n\n    this.on(PrivateFlowEventName.BIND_WAITING, this._onBindWaiting.bind(this));\n    this.on(MessagePublisherEventName.CONNECT_FAILED_ERROR, this._onBindFailed.bind(this));\n    this.on(MessagePublisherEventName.DOWN, this._onDown.bind(this));\n    this.on(MessagePublisherEventName.UP, this._onUp.bind(this));\n  }\n\n  _onBindFailed() {\n    this._bindWaiting = false;\n  }\n\n  _onBindWaiting() {\n    this._bindWaiting = true;\n  }\n\n  _onDown() {\n    this._bindWaiting = false;\n  }\n\n  _onUp() {\n    this._bindWaiting = false;\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  _makeFSM() {\n    return new PublisherFSM({\n      publisher:        this,\n      name:             'PublisherFSM',\n      sessionInterface: this._sessionInterface,\n      properties:       this._properties,\n    });\n  }\n\n  /**\n   * @returns {Long} The flow ID of this flow\n   */\n  get flowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The flow ID for this flow\n   * @private\n   */\n  set flowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * @returns {String} The publisher name set for this flow\n   */\n  get name() {\n    return this._flowName;\n  }\n  /**\n   * @param {String} value The name to set on this flow\n   * @private\n   */\n  set name(value) {\n    this._flowName = value;\n  }\n\n  /**\n   * @returns {Number} The publisher ID set on this flow\n   */\n  get publisherId() {\n    return this._publisherId;\n  }\n  /**\n   * @param {Number} value The publisher ID to set on this flow\n   */\n  set publisherId(value) {\n    this._publisherId = value;\n  }\n\n  /**\n   * @readonly\n   * @returns {solace.MessagePublisherProperties} A clone of the publisher's properties.\n   */\n  get properties() {\n    return this._properties.clone();\n  }\n\n  /**\n   *\n   * @override\n   * @memberof MessagePublisher\n   */\n  connect() {\n    super.connect();\n    if (!this._fsm.getCurrentState()) {\n      this._fsm.start();\n    }\n  }\n\n  /**\n   * Application has disconnected the session, so\n   * disconnects the Guaranteed Message Publisher.\n   * @private\n   */\n  _disconnectSession() {\n    super._disconnectSession();\n    this.processFSMEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_CLOSE }));\n  }\n\n  /**\n   * @returns {solace.MessagePublisherEventName} The name of the disposed event for this flow\n   * @private\n   */\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    return MessagePublisherEventName.DISPOSED;\n  }\n\n  /**\n   * Handles an incoming ACK for the given message ID.\n   * @param {Long} id The message id for acknowledgement.\n   * @private\n   */\n  handleAck(id) {\n    this.processFSMEvent(new PublisherFSMEvent(\n      { name: PublisherFSMEventNames.ACK },\n      { ack: id }\n    ));\n  }\n\n  /**\n   * Handles an incoming NACK for the given message ID.\n   * @param {Long} id The message id for acknowledgement.\n   * @param {AdCtrlMessage} ctrlMessage The NACK message\n   * @private\n   */\n  handleNack(id, ctrlMessage) {\n    this.processFSMEvent(new PublisherFSMEvent(\n      { name: PublisherFSMEventNames.ACK },\n      { nack: id, ctrlMessage }\n    ));\n  }\n\n  /**\n   * @override\n   */\n  handleUncorrelatedControlMessage(message) {\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.CLIENTACK:\n        {\n          const id = message.getLastMsgIdAcked();\n          if (message.smfHeader.pm_respcode > 299) {\n            this.handleNack(id, message);\n          } else {\n            this.handleAck(id);\n          }\n          break;\n        }\n      case SMFAdProtocolMessageType.CLIENTNACK:\n        {\n          const id = message.getLastMsgIdAcked();\n          this.handleNack(id, message);\n          break;\n        }\n      case SMFAdProtocolMessageType.CLOSEPUBFLOW:\n        this.processFSMEvent(new PublisherFSMEvent(\n          { name: PublisherFSMEventNames.FLOW_UNBOUND })\n        );\n        break;\n      default:\n        LOG_WARN(`Dropping unhandled AD control message for ${this}`,\n                 SMFAdProtocolMessageType.describe(msgType));\n    }\n  }\n\n  /**\n   * Prepares an AD message for publishing on this flow.\n   * @param {Message} dataMsg The message to be prepared for publishing.\n   * @returns {TransportReturnCode} transport level returnCode\n   * @private\n   */\n  prepareAdMessageAndSend(dataMsg) {\n    return this._fsm.prepareAdMessageAndSend(dataMsg);\n  }\n\n  isBindWaiting() {\n    return this._bindWaiting;\n  }\n\n  /**\n   * @returns {String} Formatted inspector output\n   * @private\n   */\n  [util_inspect_custom]() {\n    return Object.assign(super[util_inspect_custom](), {\n      'name':        this.name,\n      'publisherId': this.publisherId,\n    });\n  }\n\n  /**\n   * @override\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  /**\n   * Disposes the FSM associated with this flow.\n   *\n   * @private\n   */\n  _disposeFSM() {\n    this.processFSMEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.DISPOSE }));\n  }\n\n  _isDisconnected() {\n    return this._fsm.isDisconnected();\n  }\n\n}\n\nmodule.exports.MessagePublisher = MessagePublisher;\n","const { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * Events on the Publisher FSM\n * @enum {string}\n ********************************************************************************/\nconst PublisherFSMEventNames = {\n  SESSION_UP:       'PublisherSessionUp',\n  SESSION_UP_NO_AD: 'PublisherSessionUpNoAD',\n  SESSION_DOWN:     'PublisherSessionDown',\n  FLOW_FAILED:      'MessagePublisherFailed',\n  FLOW_UP:          'MessagePublisherUp',\n  FLOW_CLOSE:       'MessagePublisherClose',\n  FLOW_UNBOUND:     'MessagePublisherUnbound',\n  TRANSPORT_FULL:   'PublisherTransportFull',\n  ACK:              'PublisherAck',\n  ACK_TIMEOUT:      'PublisherAckTimeout',\n  BIND_TIMEOUT:     'PublisherBindTimeout',\n  UNBIND_TIMEOUT:   'PublisherUnbindTimeout',\n  CAN_SEND:         'PublisherCanSend',\n  TRANSPORT_ERROR:  'PublisherTransportError',\n  RESEND_COMPLETE:  'PublisherResendComplete',\n  DISPOSE:          'PublisherDispose',\n};\n\nmodule.exports.PublisherFSMEventNames = Enum.new(PublisherFSMEventNames);\n","const { FsmEvent } = require('solclient-fsm');\n\n/**\n *\n * PublisherFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the SessionFSM.  This extension provides members to carry information specfic to\n * the SessionFSM transitions.\n * @extends {FsmEvent}\n * @private\n */\nclass PublisherFSMEvent extends FsmEvent {\n  /**\n   * @constructor\n   * @param {Object} spec The specification for this event\n   * @param {?Object} details The details to assign to this event object\n   * @param {Message|BaseMessage} smfmessage The message associated with this event\n   */\n  constructor(spec, details, smfmessage) {\n    super(spec);\n    Object.assign(this, details);\n    Object.assign(this, smfmessage);\n  }\n  getEventText() {\n    return this._eventText;\n  }\n}\n\nmodule.exports.PublisherFSMEvent = PublisherFSMEvent;\n","const SMFLib = require('solclient-smf');\n// No idea why the usual import idiom does not work.\n//const { CapabilityType } = require('solclient-session');\nconst SolclientSession = require('solclient-session');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { LogFormatter } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageIds } = require('./message-ids');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\nconst { MessagePublisherEventName } = require('./message-publisher-event-names');\nconst { PrivateFlowEventName } = require('solclient-flow');\nconst { PublisherFSMEvent } = require('./publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./publisher-fsm-event-names');\nconst { PublisherStateNames } = require('./publisher-state-names');\nconst { State, StateMachine } = require('solclient-fsm');\nconst { StatType } = require('solclient-stats');\nconst { TransportReturnCode } = require('solclient-transport');\n\nconst ConnectReason = {\n  INIT:     0, // never connected: message renumbering required\n  RESUME:   1, // connected before\n  FAILOVER: 2, // after a DR failover: message renumbering and message republish event required\n};\n\nclass PublisherFSM extends StateMachine {\n  constructor({ publisher, name, sessionInterface, properties } = {}) {\n    super({ name });\n    /** @type {MessagePublisher} */\n    const fsm = this;\n    const currentState = () => {\n      const state = fsm.getCurrentState();\n      return state ? state.getName() : '<not running>';\n    };\n    this.logger = new LogFormatter((...args) => [\n      `[session=${sessionInterface.sessionIdHex}]`,\n      `[message-publisher-fsm=${publisher.flowIdDec}]`,\n      `[${currentState()}]`,\n      ...args,\n    ]);\n    this.log = this.logger.wrap(this.log, this);\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n    } = this.logger;\n\n    Object.assign(this, {\n      _publisher:                 publisher,\n      _acknowledgeMode:           properties.acknowledgeMode,\n      _acknowledgeTimeoutInMsecs: properties.acknowledgeTimeoutInMsecs,\n      _sessionInterface:          sessionInterface,\n      _windowSize:                properties.windowSize,\n      _stateEvents:               [],\n    });\n    // The publisher is not even constructed when publisherProperties.enabled is false\n    // so we could just set _guaranteedEnabled to true, but lets be thorough as at\n    // some point we may want to have sendADMessage() be responsible for throwing all\n    // errors. As it is, when publisher properties enabled is false, the session-fsm\n    // throws an error and when the message-spool is shutdown (close-flow received) the\n    // publisher-fsm thtows and error.\n    this._guaranteedEnabled = properties.enabled;\n    this._sendWindow = properties.windowSize;\n    this._resetConnectedInfo();\n    this._notifiedWindowClosed = false;\n    // We need a boolean to track the transport flow\n    // controlled state. prepareAdMessageAndSend is called by the\n    // session to prepare a message for publish and we\n    // need to return whether or not we are flow controlled\n    // without invoking the FSM or calling methods on the\n    // FSM.\n    // We consider all down states and all resending states equal\n    // to flow-controlled as in all states me must queue the message\n    // to the unacked list and not attempt to send directly.\n    // This is strictly a performance issue.\n    this._transportFlowControlled = true;\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.PublisherUnbound,\n                               (context) => {\n                                 LOG_TRACE(`Starting ${context.getStateMachine().getName()}`);\n                               }\n      );\n    });\n\n    fsm.unhandledEventReaction(function onUnhandledEvent(event) {\n      switch (event.getName()) {\n        case PublisherFSMEventNames.FLOW_UNBOUND:\n          // the router has closed the flow, likely due to operator\n          // shutdown on the message spool. Throw on any attempt\n          // to publish\n          this._guaranteedEnabled = false;\n          this._publisher.emit(MessagePublisherEventName.GUARANTEED_MESSAGING_DOWN);\n          return this.transitionTo(\n            fsm.PublisherUnbound,\n            (context) => {\n              LOG_TRACE(`Received close publisher for ${context.getStateMachine().getName()}`);\n            });\n        case PublisherFSMEventNames.DISPOSE:\n          LOG_TRACE('Received dispose request');\n          break;\n        case PublisherFSMEventNames.TRANSPORT_FULL:\n          LOG_TRACE('Received TRANSPORT_FULL');\n          break;\n        case PublisherFSMEventNames.CAN_SEND:\n          // This is ok because the session just sends the publisher CAN_SEND whenever received\n          // from transport, even if the publisher is not in use, or hasn't caused the flow control\n          LOG_TRACE('Received CAN_SEND when not flow controlled');\n          break;\n        default:\n          LOG_TRACE(`Ignoring event ${event.getName()}`);\n      }\n      return this;\n    });\n\n    fsm.PublisherUnbound = new State({\n      name:          PublisherStateNames.UNBOUND,\n      parentContext: fsm,\n    }, {\n      emitDownAndBindWaiting() {\n        LOG_TRACE('Emit down and bind waiting');\n        publisher.emit(MessagePublisherEventName.DOWN);\n        publisher.emit(PrivateFlowEventName.BIND_WAITING);\n      },\n    })\n      .entry(function onEntry() {\n        this.emitDownAndBindWaiting();\n        fsm._connectRetryCount = properties.connectRetryCount;\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UNBOUND, function onFlowUnbind() {\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.SESSION_UP, function onSessionUp() {\n        return this.transitionTo(fsm.PublisherOpenFlowSent);\n      });\n\n    fsm.PublisherOpenFlowSent = new State({\n      name:          PublisherStateNames.OPENFLOWSENT,\n      parentContext: fsm,\n    }, {\n      emitOpenFlowFailedError(details) {\n        publisher.emit(MessagePublisherEventName.CONNECT_FAILED_ERROR, details);\n      },\n      /**\n       * @param {AdProtocolMessage} adpMsg An OPENFLOW response.\n       * @description Handle an incoming Guaranteed Messaging Protocol Message.\n       * @returns {?} The result of processing an event, or null if no event was dispatched.\n       * @private\n       */\n      handleOpenFlowResponse(adpMsg) {\n        const smfRespHeader = adpMsg.smfHeader;\n        const respCode = smfRespHeader.pm_respcode;\n        /*\n         * Assured Control Protocol messages are received on publisher and consumer flows. The\n         * message types for each are unique, so we can determine whether it is a publisher or\n         * consumer by message type.  A specific publisher or consumer is found by the flowId, or\n         * by the correlation tag in the case of OPEN-FLOW (publisher) or BIND (consumer) responses.\n         */\n        if (adpMsg.msgType !== SMFLib.SMFAdProtocolMessageType.OPENPUBFLOW) {\n          return fsm.processEvent(new PublisherFSMEvent(\n              { name: PublisherFSMEventNames.FLOW_FAILED },\n              {\n                returnCode:  respCode,\n                description: `Unexpected response: ${SMFLib.SMFAdProtocolMessageType.describe(adpMsg.msgType)}`,\n              }\n          ));\n        }\n\n        /*\n         * The response code will indicate whether we create a PUB_FLOW_UP (200 OK) event\n         * or a PUB_FLOW_FAIL (any other response) event, or treat this as an invalid\n         * message (received a OPEN-PUB-FLOW request).\n         */\n\n        if (respCode === null) {\n          // Drop message and increment stats\n          publisher.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Open-Publisher-Flow Request message on sessionId 0x${\n                    sessionInterface.sessionIdHex}`);\n          return null;\n        }\n\n        if (respCode !== 200) {\n          const respStr = smfRespHeader.pm_respstr;\n          const mappedSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(respCode, respStr);\n          return fsm.processEvent(new PublisherFSMEvent(\n            { name: PublisherFSMEventNames.FLOW_FAILED },\n            {\n              subcode:     mappedSubcode,\n              returnCode:  respCode,\n              description: respStr,\n            })\n          );\n        }\n\n        LOG_TRACE('Handling OPENPUBFLOW message');\n\n        // typical response: { lastmsgidacked window flowid flowname publisher_id }\n\n        const lastMsgIDAcked = adpMsg.getLastMsgIdAcked();\n        const window = adpMsg.getWindow();\n        const flowId = adpMsg.getFlowId();\n        const flowName = adpMsg.getFlowName();\n        const publisherId = adpMsg.getPublisherId();\n\n        LOG_DEBUG(`OPENPUBFLOW response attributes: lastMsgIDAcked=${lastMsgIDAcked} window=${window} flowId=${flowId} flowName=${flowName} publisherId=${publisherId}`);\n\n        LOG_TRACE(`Local before handling response: ${fsm._messageIds}`);\n\n        if (window === undefined) {\n          return fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  { description: 'Window parameter not found' })\n          );\n        }\n        if (window > this._windowSize) {\n          return fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  { description: 'Invalid window negotiation' })\n          );\n        }\n        // reduce sendWindow by the size of unAckedList but do not reduce below zero\n        fsm._sendWindow = window - fsm._unackedList.length;\n        if (fsm._sendWindow < 0) fsm._sendWindow = 0;\n\n        // update publisher info before renumbering\n        Object.assign(fsm._publisher, {\n          name: flowName,\n          flowId,\n          publisherId,\n        });\n        // we may have been disabled by a previous closeFlow messsage, now that\n        // we know hte message spool is enabled again, set _guaranteedEnabled back\n        // to true\n        fsm._guaranteedEnabled = true;\n\n        if ((fsm._connectReason === ConnectReason.INIT) ||\n          (fsm._connectReason === ConnectReason.FAILOVER)) {\n          // reset 'lastSent' before renumbering\n          fsm._messageIds.setLastSent(lastMsgIDAcked);\n\n          LOG_DEBUG(`Renumbering unacked/unsent messages: fsm._messageIds=${fsm._messageIds}, lastMsgIDAcked=${lastMsgIDAcked}, type=${fsm._connectReason}`);\n          if (fsm._connectReason === ConnectReason.FAILOVER) {\n            publisher.emit(MessagePublisherEventName.FLOW_NAME_CHANGED, {\n              messages: [...fsm._unackedList],\n              count:    fsm._unackedList.length,\n            });\n          }\n          fsm._connectReason = ConnectReason.RESUME;\n          fsm._unackedList.forEach((message) => {\n            const oldId = message.getGuaranteedMessageId();\n            fsm._renumber(message);\n            LOG_TRACE(`Renumbering message ID: from ${oldId} to ${message.getGuaranteedMessageId()}`);\n            fsm._messageIds.setLastSent(message.getGuaranteedMessageId());\n          });\n        } else {\n          fsm._unackedList.forEach((message) => {\n            message.setFlowId(flowId);\n            message.setPublisherId(publisher.publisherId);\n            LOG_TRACE(`Set FlowId to ${flowId} in msg# ${message.getGuaranteedMessageId()}`);\n          });\n        }\n        // Either way, make sure none of the messages is above the size limit:\n        const payloadSizeLimit = fsm._sessionInterface.getCapability(SolclientSession.CapabilityType.MAX_GUARANTEED_MSG_SIZE).getValue();\n        fsm._unackedList.forEach((message) => {\n          if (payloadSizeLimit < message._memoized_payload.length) {\n            LOG_WARN(`Message size ${message._memoized_payload.length} above broker limit ${payloadSizeLimit}`);\n          }\n        });\n\n\n        if (fsm._unackedList.length) {\n          fsm._handleAck(lastMsgIDAcked, false, adpMsg, true);\n          // the starting point for retransmitting.  If lastMsgIdAcked doesn't\n          // ack anything this does not get updates, causing us to possible send\n          // messages out of order, or not start sending at all\n          fsm._firstUnackedToSend = fsm._unackedList[0];\n        } else {\n          fsm._messageIds.lastAcked = Long.fromValue(lastMsgIDAcked);\n        }\n        LOG_TRACE(`Local after applying lastMsgIDAcked: ${fsm._messageIds}`);\n\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_UP }));\n      },\n      /**\n       * @returns {?} The result of processing an BIND_TIMEOUT event\n       * @private\n       */\n      handleOpenFlowTimeout() {\n        LOG_INFO('Open publisher connection timeout');\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.BIND_TIMEOUT }));\n      },\n      handleUnknownFlowName() {\n        LOG_INFO('Flow name unknown, republish required');\n        // Don't send the FLOW_NAME_CHANGED message yet -- it specifically indicates\n        // that duplicate messages should be expected. Wait until the flow is successfully\n        // connected and messages are being renumbered.\n        fsm._resetConnectedInfo(true);\n        return this.externalTransitionTo(fsm.PublisherOpenFlowSent);\n      },\n      /**\n       * Send a Publisher Open Flow Request.\n       * @private\n       */\n      sendOpenFlow() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        LOG_TRACE(`sendOpenFlow correlationTag: ${correlationTag}`);\n        const openPubFlowMsg = SMFLib.AdProtocolMessage.getOpenMessagePublisher(\n          fsm._messageIds.lastAcked,\n          fsm._messageIds.lastSent,\n          properties.windowSize,\n          fsm._publisher._flowName,\n          correlationTag\n        );\n        LOG_TRACE('sendOpenFlow openPubFlowMsg constituents:');\n        LOG_TRACE(`fsm._messageIds.lastAcked:${fsm._messageIds.lastAcked} fsm._messageIds.lastSent:${fsm._messageIds.lastSent} properties.windowSize:${properties.windowSize} fsm._publisher._flowName:${fsm._publisher._flowName} `);\n        sessionInterface.sendControl(openPubFlowMsg);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        () => this.handleOpenFlowTimeout(),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        rxMsgObj => this.handleOpenFlowResponse(rxMsgObj));\n        LOG_TRACE('Sent open publisher connection');\n      },\n    })\n      .entry(function onEntry() {\n        try {\n          this.sendOpenFlow();\n        } catch (e) {\n          LOG_WARN(`Exception during bind attempt: ${e}`);\n          fsm.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.SESSION_DOWN }));\n        }\n      })\n      .reaction(PublisherFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(fsm.PublisherCloseFlowSent);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.PublisherUp);\n      })\n      .reaction(PublisherFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.BIND_TIMEOUT, function onOpenFlowTimeout() {\n        if (fsm._connectRetryCount > 0) {\n          fsm._connectRetryCount--;\n          return this.externalTransitionTo(fsm.PublisherOpenFlowSent);\n        }\n        this.emitOpenFlowFailedError({\n          subcode:     ErrorSubcode.TIMEOUT,\n          description: 'Open publisher connection failed due to timeout',\n        });\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_FAILED, function onFlowFailed(pEvent) {\n        const { subcode, returnCode, description } = pEvent;\n        LOG_TRACE(`FLOW_FAILED in PublisherOpenFlowSent state: subcode: ${subcode}, returnCode: ${returnCode}, description: ${description}`);\n        switch (pEvent.subcode) {\n          case ErrorSubcode.UNKNOWN_FLOW_NAME:\n            // DR or long HA failover\n            return this.handleUnknownFlowName();\n          // case ErrorSubcode.GM_NOT_READY: Fail the session\n          default:\n            this.emitOpenFlowFailedError({\n              event: pEvent,\n              subcode,\n              returnCode,\n              description,\n            });\n            // Otherwise, the flow is invalid\n            fsm._resetConnectedInfo();\n        }\n        return this.transitionTo(fsm.PublisherUnbound);\n      });\n\n    fsm.PublisherCloseFlowSent = new State({\n      name:          PublisherStateNames.CLOSEFLOWSENT,\n      parentContext: fsm,\n    }, {\n      handleCloseFlowResponse(response) {\n        const smfRespHeader = response.smfHeader;\n        const respCode = smfRespHeader.pm_respcode;\n\n        if (response.msgType !== SMFLib.SMFAdProtocolMessageType.CLOSEPUBFLOW) {\n          return fsm.processEvent(new PublisherFSMEvent(\n            { name: PublisherFSMEventNames.FLOW_FAILED },\n            {\n              returnCode:  respCode,\n              description: `Unexpected response: ${SMFLib.SMFAdProtocolMessageType.describe(response.msgType)}`,\n            }));\n        }\n\n        if (respCode === null) {\n          // Drop message  and increment stats\n          publisher.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Close-Publisher-Flow Request message on sessionId 0x${\n                    sessionInterface.sessionIdHex}`);\n          return null;\n        }\n\n        if (respCode !== 200) {\n          fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  {\n                                    returnCode:  respCode,\n                                    description: smfRespHeader.pm_respstr,\n                                  }));\n        }\n\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_UNBOUND }));\n      },\n\n      handleCloseFlowTimeout() {\n        LOG_INFO('Close publisher connection timeout.');\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.UNBIND_TIMEOUT }));\n      },\n\n      sendCloseFlow() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const closePubFlowMsg = SMFLib.AdProtocolMessage.getCloseMessagePublisher(\n          fsm._publisher.flowId,\n          correlationTag\n        );\n        sessionInterface.sendControl(closePubFlowMsg);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        () => this.handleCloseFlowTimeout(),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        rxMsgObj => this.handleCloseFlowResponse(rxMsgObj));\n        LOG_TRACE('Sent close publisher connection');\n      },\n    })\n      .entry(function onEntry() {\n        this.sendCloseFlow();\n        return this;\n      })\n      .reaction(PublisherFSMEventNames.ACK, function onAck(event) {\n        fsm._handleAckEvent(event);\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UNBOUND, function onFlowUnbound() {\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_FAILED, function onCloseFlowFailed(/*pEvent*/) {\n        this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.UNBIND_TIMEOUT, function onCloseFlowTimeout() {\n        return this.transitionTo(fsm.PublisherCloseFlowSent);\n      });\n\n    fsm.PublisherUp = new State({\n      name:          PublisherStateNames.UP,\n      parentContext: fsm,\n    }, {\n      emitFlowUp() {\n        publisher.emit(MessagePublisherEventName.UP);\n      },\n    })\n      .initial(function initial() {\n        return this.transitionTo(\n          fsm._unackedList.length\n            ? fsm.PublisherRetransmitting\n            : fsm.PublisherDataXfer\n        );\n      })\n      .entry(function onEntry() {\n        // The state isn't changed on entry, so don't emit yet.\n        LOG_DEBUG('Flow is UP');\n        fsm._scheduleStateEvents(fsm.PublisherUp, () => this.emitFlowUp());\n        return this;\n      })\n      .reaction(PublisherFSMEventNames.ACK, function onAck(event) {\n        LOG_DEBUG('Ack received');\n        fsm._handleAckEvent(event);\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.ACK_TIMEOUT, function onAckTimeout() {\n        // the starting point when we get the CAN_SEND\n        fsm._firstUnackedToSend = fsm._unackedList[0];\n        return this.transitionTo(fsm.PublisherRetransmitting);\n      })\n        .reaction(PublisherFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n          return this.transitionTo(fsm.PublisherCloseFlowSent);\n        })\n        .reaction(PublisherFSMEventNames.SESSION_DOWN, function onSessionDown() {\n          return this.transitionTo(fsm.PublisherUnbound);\n        })\n        .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onWindowClosed() {\n          return this.internalTransition();\n        });\n\n    fsm.PublisherDataXfer = new State({\n      name:          PublisherStateNames.DATA_XFER,\n      parentContext: fsm.PublisherUp,\n    })\n      .entry(() => {\n        // publisher is up and capable of sending GM messages directly from the application\n        fsm._transportFlowControlled = false;\n        fsm._scheduleStateEvents(fsm.PublisherDataXfer, () => fsm._maybeEmitCanSend());\n      })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        return this.transitionTo(fsm.PublisherFlowControlled);\n      })\n      .exit(() => {\n        // publisher cannot send messages to transport and must queue in unAckedList until\n        // re-entering PublisherDataXfer\n        // set a FSM boolean that is checked in prepareADMessageAndSend() we\n        // need to avoid FSM interactions on the fast path so resort to\n        // this boolean.\n        fsm._transportFlowControlled = true;\n      });\n\n    fsm.PublisherFlowControlled = new State({\n      name:          PublisherStateNames.FLOW_CONTROLLED,\n      parentContext: fsm.PublisherUp,\n    })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        // Unusual event, as only the FSM can send messages when we're in flow-controlled state\n        LOG_INFO('Attempt to send while flow controlled');\n        // Fall out and do the action for PublisherUp\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.CAN_SEND, function onCanSend() {\n        //\n        // start sending from tune unAcked list.\n        return this.transitionTo(fsm.PublisherRetransmitting);\n      });\n\n    fsm.PublisherRetransmitting = new State({\n      name:          PublisherStateNames.RETRANSMITTING,\n      parentContext: fsm.PublisherUp,\n    }, {\n      retransmit() {\n        try {\n          fsm._resendFromUnacked();\n        } catch (ex) {\n          // Resend failed:\n          if (ex instanceof OperationError && ex.subcode === ErrorSubcode.INSUFFICIENT_SPACE) {\n            LOG_DEBUG('Publisher resendFromUnacked blocked due to insufficient space, wait for CAN_SEND');\n            fsm.processEvent(\n              new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n          } else {\n            // send failed.  Fail the publisher\n            LOG_INFO(`Publisher resendFromUnacked failed: ${ex}`);\n            fsm.processEvent(\n              new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED }));\n          }\n        }\n      },\n    })\n      .entry(function onEntry() {\n        this.retransmit();\n      })\n      .reaction(PublisherFSMEventNames.RESEND_COMPLETE, function onResendComplete() {\n        return this.transitionTo(fsm.PublisherDataXfer);\n      })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        // Transport flow controlled while resending/recovering from flow control. Go\n        // to flow controlled state and wait for CAN_SEND\n        LOG_DEBUG(`Transport full while retransmitting, unacked remaining: ${fsm._unackedList.length}`);\n        // Fall out and do the action for PublisherUp\n        return this.transitionTo(fsm.PublisherFlowControlled);\n      });\n  }\n\n  isDisconnected() {\n    if (!this.getCurrentState()) return true;\n    return !!this.getActiveState(PublisherStateNames.UNBOUND);\n  }\n\n  /**\n\n   * Prepare and send a Guaranteed Message. This method updates FSM variables including\n   * lastSendMessage.\n   *\n   * @private\n   * @param {Message} dataMsg The message to prepare\n   * @returns {TransportReturnCode} return the status from the transport send\n   */\n  prepareAdMessageAndSend(dataMsg) {\n    if (!this._guaranteedEnabled) {\n      throw new OperationError('Session does not provide Guaranteed Message Publish capability',\n        ErrorSubcode.GM_UNAVAILABLE,\n        'close flow received from message-router');\n    }\n    if (this._sendWindow <= 0) {\n      this._publisher.incStat(StatType.TX_WINDOW_CLOSED);\n      this._notifiedWindowClosed = true;\n      throw new OperationError(\n        'Guaranteed Message Window Closed',\n        ErrorSubcode.INSUFFICIENT_SPACE\n      );\n    }\n\n\n    const unackedList = this._unackedList;\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n    } = this.logger;\n\n    if (dataMsg._payload_is_memoized) {\n      dataMsg._payload_is_memoized = false;\n      dataMsg._memoized_csumm = undefined;\n      dataMsg._memoized_payload = undefined;\n    }\n    const dupMsg = dataMsg.clone();\n    const payloadSize = SMFLib.Codec.Encode.adaptMessageToSmf_payloadMemoize(dupMsg);\n    var payloadSizeLimit = 0;\n    try {\n      payloadSizeLimit = this._sessionInterface.getCapability(SolclientSession.CapabilityType.MAX_GUARANTEED_MSG_SIZE).getValue();\n      LOG_TRACE(`Payload size limit: ${payloadSizeLimit}`);\n    } catch (e) {\n      LOG_INFO('Can\\'t pre-check payload size, broker not connected yet?');\n      LOG_TRACE(e.stack);\n    }\n    if ((0 < payloadSizeLimit) && (payloadSize > payloadSizeLimit)) {\n      throw new OperationError(\n        `Encoded payload size (${payloadSize}) exceeds broker size limit (MAX_GUARANTEED_MSG_SIZE, ${payloadSizeLimit})`,\n        ErrorSubcode.MESSAGE_TOO_LARGE\n      );\n    }\n\n    --this._sendWindow;\n    this._renumber(dupMsg);\n    this._cloneNumbers(dupMsg, dataMsg);\n\n    unackedList.push(dupMsg);\n    // Update the messgeIds, lastSend/next values only on a successful send or enqueue,\n    // from this point on we will return OK from this send method.\n    const msgId = dupMsg.getGuaranteedMessageId();\n    this._messageIds.setLastSent(msgId);\n    LOG_TRACE(`Prepare and send AD message ID = ${msgId}, \n      unackedListSize = ${unackedList.length}, sendWindow = ${this._sendWindow}`);\n    // Note that the transport sender can be flow controlled at the transport\n    // level, which means the message should not be sent. So simply return\n    // We also consider set-up/down-states as _transportFlowControlled. We must be up\n    // and not retransmitting to\n    // send directly from application space.\n    if (this._transportFlowControlled) {\n      // we may receive acknowledgements while transport flow controlled which can\n      // cause our firstUnAckedToSend to become undefined, if this is the first message\n      // queued in that case, set firstUnAckedToSend\n      if (this._firstUnackedToSend === undefined) {\n        this._firstUnackedToSend = dupMsg;\n      }\n      return TransportReturnCode.OK;\n    }\n    // We use the session sendToTransport directly which may throw or  otherwise\n    // return an error. If so, catch the eror and remove the message from the unackedlist\n    // before rethrowing the error.\n    let returnCode;\n    try {\n      returnCode = this._sessionInterface.sendToTransport(dupMsg);\n      if (returnCode !== TransportReturnCode.OK) {\n        if (returnCode === TransportReturnCode.NO_SPACE) {\n          returnCode = TransportReturnCode.OK;\n          this._firstUnackedToSend = dupMsg;  // the starting point when we get the CAN_SEND\n          this.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n        } else {\n          //\n          LOG_DEBUG(`prepareAdMessageAndSend: saw returnCode = ${returnCode}`);\n        }\n      } else {\n        // The message has successfully been sent once. Set the redelivered flag in case we need to\n        // resend it later.\n        dupMsg.setRedelivered(true);\n      }\n      // TBD: Should we start AckTimer when flow controlled?\n      this._startAckTimer();\n    } catch (ex) {\n      if (ex instanceof OperationError) {\n        LOG_DEBUG(`prepareAdMessageAndSend: caught OperationError: ${ErrorSubcode.describe(ex.subcode)} - ${ex.message}`);\n        // OperationErrors are encoding or other errors caused by the field contents the\n        // application has set on the message.  So we throw the error back at the\n        // application after undoing the queueing operations.\n        unackedList.pop();\n        this._messageIds.setLastSent(dupMsg.getGuaranteedPreviousMessageId());\n        ++this._sendWindow;\n        throw (ex);\n      } else {\n        LOG_DEBUG(`prepareAdMessageAndSend: caught ${ex.message}`);\n        throw ex;\n      }\n    }\n    return TransportReturnCode.OK;\n  }\n\n  _handleAckEvent(event) {\n    this._publisher.incStat(StatType.TX_ACKS_RXED);\n    this._handleAck(event.ack || event.nack, !!event.nack, event.ctrlMessage);\n  }\n\n  _handleAck(id, nack, ctrlMessage = undefined, openFlow = false) {\n    const {\n      _messageIds: messageIds,\n      _unackedList: unackedList,\n    } = this;\n    const { LOG_DEBUG, LOG_INFO } = this.logger;\n\n    if (messageIds.lastAcked.gte(id)) {\n      if (openFlow) {\n        LOG_DEBUG(`Implicit acks up to date: remote ack for ${id}, local ids ${this._messageIds}`);\n      } else {\n        LOG_INFO(`Dropping ack: remote ack for ${id}, local ids ${this._messageIds}`);\n      }\n      return;\n    }\n\n    const reportAcked = [];\n\n    // Assumption: the unacked message list is in increasing order of message ID.\n    // The assured message ID should be automatically generated, immutable and\n    // monotonically increasing.\n\n    // While the acked ID is greater than an element at the beginning of the unacked list...\n    while (unackedList.length &&\n           id.gte(unackedList[0].getGuaranteedMessageId())) {\n      // That unacked message is now acked. Shift it off and append to list of acked.\n      reportAcked.push(unackedList.shift());\n    }\n\n    // if we have removed the firstUnacked, reset it to the beginning of the list\n    if (unackedList.indexOf(this._firstUnackedToSend) === -1) {\n      this._firstUnackedToSend = unackedList[0];\n    }\n\n\n    // Recover some window space from the acked IDs.\n    this._sendWindow += reportAcked.length;\n    LOG_DEBUG('Send window size is now', this._sendWindow);\n\n\n    // The last acked ID is now the one we received.\n    // Don't let an exception in event dispatching prevent this from being set -- do it now.\n    messageIds.lastAcked = id;\n\n    // If we're NACKing, it's only the last message.\n    const reportNacked = nack ? reportAcked.pop() : null;\n\n    // Any ACKs?\n    // reportAcked is constant from here on\n    const numAcked = reportAcked.length;\n    if (numAcked) {\n      if (this._acknowledgeMode === MessagePublisherAcknowledgeMode.PER_MESSAGE) {\n        LOG_DEBUG(`Ack received: lastAckedMsgId=${id}, numAckedMsgs=${numAcked}, numUnackedMsgs=${unackedList.length}`);\n        for (let i = 0; i < numAcked; ++i) {\n          this._publisher.emit(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, reportAcked[i]);\n        }\n      } else {\n        const lastAckedMessage = reportAcked[numAcked - 1];\n        LOG_DEBUG(`Acking single message with ID ${lastAckedMessage.getGuaranteedMessageId()} from router ack on ${id}`);\n        this._publisher.emit(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, lastAckedMessage);\n      }\n    }\n\n    // Terminating NACK?\n    if (reportNacked) {\n      LOG_DEBUG(`Nacking single message with ID ${reportNacked.getGuaranteedMessageId()} from router ack on ${id}`);\n      this._publisher.emit(MessagePublisherEventName.REJECTED_MESSAGE, reportNacked, ctrlMessage);\n    }\n\n    LOG_DEBUG('Unacked messages remaining: ', unackedList.length);\n\n    if (unackedList.length) {\n      // There are more messages to be acked. Reset the ack timer.\n      this._resetAckTimer();\n    } else {\n      this._clearAckTimer();\n    }\n    //\n    // send can-send to applicatino if necessary.\n    this._maybeEmitCanSend();\n  }\n\n  _maybeEmitCanSend() {\n    const { LOG_TRACE } = this.logger;\n    if (!this._notifiedWindowClosed) return;\n    if (this._sendWindow === 0) {\n      // Should log this since it is called AFTER the state change\n      LOG_TRACE('Suppressing CAN_SEND with zero window available');\n      return;\n    }\n    this._notifiedWindowClosed = false; // Set before emitting in case we re-enter\n    this._publisher.emit(MessagePublisherEventName.CAN_SEND);\n  }\n\n  _resendFromUnacked() {\n    const { LOG_ERROR, LOG_INFO, LOG_DEBUG } = this.logger;\n    // We choose to start the ack timer after the message resend. The resend could\n    // take longer than the ack timeout in poor conditions.\n    //\n    // If any message is successfully resent, we need to restart the ack timer,\n    // even if we are throwing.\n    const list = this._unackedList;\n    let resendIndex = list.indexOf(this._firstUnackedToSend);\n    if (resendIndex === -1) {\n      // first Unacked may be null if all have been resent alreadygrunt -\n      // in which case the list  should be empty\n      if (this._firstUnackedToSend) {\n        LOG_ERROR(`Could not find first Unacked Messages in unacked message list: msgId = ${this._firstUnackedToSend.getGuaranteedMessageId}`);\n      }\n      if (list.length === 0) {\n        // Nothing to resend: return to DataXfer\n        LOG_DEBUG(`Nothing to resend: ${this._messageIds.toString()}`);\n        this.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.RESEND_COMPLETE })\n        );\n      }\n      return;\n    }\n    LOG_DEBUG(`Resending unacked messages from ${resendIndex} to ${list.length - 1}: `,\n              list.map(m => m.getGuaranteedMessageId().toString()));\n    while (resendIndex < list.length) {\n      if (list[resendIndex].getPublisherId() !== this._publisher.publisherId) {\n        LOG_ERROR(`Resending on invalid publisherId '${list[resendIndex].getPublisherId()}'when it should be '${this._publisher.publisherId}'`);\n      }\n      const returnCode = this._sessionInterface.sendData(list[resendIndex]);\n      if (returnCode === TransportReturnCode.NO_SPACE) {\n        // the starting point when we get the CAN_SEND from the transport\n        this._firstUnackedToSend = list[resendIndex];\n        LOG_INFO('Publisher sendMessage blocked due to insufficient space, wait for CAN_SEND');\n        this.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n        return;\n      }\n      if (returnCode !== TransportReturnCode.OK) {\n        // session-FSM is already processing the error\n        return;\n      }\n      // The message has successfullly been sent once. Set the redelivered flag in case we need to\n      // resend it later\n      list[resendIndex].setRedelivered(true);\n      resendIndex++;\n      this._startAckTimer();\n    }\n    // Resend successful: return to DataXfer\n    LOG_DEBUG(`Resend complete: ${this._messageIds.toString()}`);\n    this.processEvent(\n      new PublisherFSMEvent({ name: PublisherFSMEventNames.RESEND_COMPLETE })\n    );\n  }\n\n  _resetConnectedInfo(failover = false) {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Resetting connected flow info');\n\n    if (this._ackTimer) this._clearAckTimer();\n\n    Object.assign(this, {\n      _messageIds: new MessageIds(),\n    });\n\n    Object.assign(this._publisher, {\n      publisherId: undefined,\n      flowId:      undefined,\n      flowName:    null,\n    });\n\n    if (failover) {\n      this._connectReason = ConnectReason.FAILOVER;\n    } else {\n      // Full reset\n      this._unackedList = [];\n      this._connectReason = ConnectReason.INIT;\n    }\n  }\n\n  _clearAckTimer() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Clear ack timer ${this._ackTimer ? this._ackTimer : 'undefined or null or zero'}`);\n    if (!this._ackTimer) return;\n    clearTimeout(this._ackTimer);\n    this._ackTimer = null;\n  }\n\n  _emitStateEvents() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Emitting deferred state events');\n    while (this._stateEvents.length) {\n      const pair = this._stateEvents.shift();\n      const state = pair[0];\n      const event = pair[1];\n      // If the state requesting this event is still active...\n      if (this.getActiveState(state.getName())) {\n        // then do its action\n        event.apply(state);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  _handleAckTimeout() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Ack Timeout');\n    this._ackTimer = null;\n    this._publisher.incStat(StatType.TX_ACK_TIMEOUT);\n    this.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.ACK_TIMEOUT }));\n  }\n\n  /**\n   * If the remote flow changes, any remote state applied to the unacked messages needs to\n   * be reapplied.\n   *\n   * @param {solace.Message} message The message to renumber.\n   * @private\n   */\n  _renumber(message) {\n    const messageIds = this._messageIds;\n    const current = messageIds.next;\n    message.setGuaranteedPreviousMessageId(messageIds.lastSent);\n    message.setGuaranteedMessageId(current);\n\n    const publisher = this._publisher;\n    message.setFlowId(publisher.flowId);\n    message.setPublisherId(publisher.publisherId);\n  }\n\n  _cloneNumbers(fromMsg, toMsg) {\n    toMsg.setGuaranteedPreviousMessageId(fromMsg.getGuaranteedPreviousMessageId());\n    toMsg.setGuaranteedMessageId(fromMsg.getGuaranteedMessageId());\n    toMsg.setFlowId(fromMsg.getFlowId());\n    toMsg.setPublisherId(fromMsg.getPublisherId());\n  }\n\n  _resetAckTimer() {\n    this._clearAckTimer();\n    this._startAckTimer();\n  }\n\n  _scheduleStateEvents(state, event) {\n    this._stateEvents.push([state, event]);\n    this._setPostEventAction(() => this._emitStateEvents(), 'Emit state events');\n  }\n\n  _setPostEventAction(action, desc = 'No action') {\n    const { LOG_DEBUG, LOG_WARN } = this.logger;\n    if (this._postEventAction && this._postEventAction.desc === desc) {\n      LOG_DEBUG('Keeping same post event action');\n      return;\n    }\n\n    if (this._postEventAction && this._postEventAction.desc) {\n      LOG_WARN(`Replacing post event action ${this._postEventAction.desc} with ${desc}`);\n    }\n    this._postEventAction = { action: action || (() => {}), desc };\n    this.setPostEventAction(() => {\n      this._postEventAction.action();\n      this._postEventAction = null;\n    });\n  }\n\n  /**\n   * @private\n   */\n  _startAckTimer() {\n    // const { LOG_TRACE } = this.logger;\n    // LOG_TRACE(`Start ack timer ${this._ackTimer ? this._ackTimer : 'undefined or null or zero'\n    //           }: ${this._acknowledgeTimeoutInMsecs} ms`);\n    if (this._ackTimer) return;\n    this._ackTimer = setTimeout(() => this._handleAckTimeout(),\n                                this._acknowledgeTimeoutInMsecs);\n  }\n\n}\n\nmodule.exports.PublisherFSM = PublisherFSM;\n","const { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * @enum {string}\n * State names on the Publisher FSM\n ********************************************************************************/\nconst PublisherStateNames = {\n  UNBOUND:         'PublisherUnbound',\n  OPENFLOWSENT:    'PublisherOpenFlowSent',\n  UP:              'PublisherUp',\n  FAILED:          'PublisherFailed',\n  CLOSEFLOWSENT:   'PublisherCloseFlowSent',\n  DATA_XFER:       'PublisherDataXfer',\n  FLOW_CONTROLLED: 'MessagePublisherFlowControlled',\n  RETRANSMITTING:  'PublisherRetransmitting',\n};\n\nmodule.exports.PublisherStateNames = Enum.new(PublisherStateNames);\n","const {\n  ReplicationGroupMessageId,\n  RgmidFactory,\n} = require('./lib/replication-group-message-id');\nconst { Message } = require('./lib/message');\nconst { MessageCacheStatus } = require('./lib/message-cache-status');\nconst { MessageDeliveryModeType } = require('./lib/message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./lib/message-dump-flags');\nconst { MessageDumpStandardProvider } = require('./lib/message-dump-standard-provider');\nconst { MessageDumpUtil } = require('./lib/message-dump-util');\nconst { MessageType } = require('./lib/message-types');\nconst { MessageUserCosType } = require('./lib/message-user-cos-types');\nconst { SolclientFactory } = require('solclient-factory');\n\n/**\n * Creates a {@link solace.Message} instance.\n * @returns {solace.Message} a new message instance.\n * @method\n * @name solace.SolclientFactory.createMessage\n */\nSolclientFactory.createMessage = SolclientFactory.createFactory(() => new Message());\n\n/**\n * Creates a {@link solace.ReplicationGroupMessageId} instance from string.\n * A ReplicationGroupMessageId is also a {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that only messages spooled\n * in the replay log since the message after the given ReplicationGroupMesageId\n * should be replayed.\n * @param {string} id a serialized ReplicationGroupMessageId had previously been returned\n *   from {@link solace.ReplicationGroupMessageId.toString}.\n * @returns {solace.ReplicationGroupMessageId} a new ReplicationGroupMessageId instance\n * @method\n * @name solace.SolclientFactory.createReplicationGroupMessageId\n * @throws {solace.OperationError}\n * * if parameter is not a string.\n *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n * * if incorrect format is detected.\n *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n */\nSolclientFactory.createReplicationGroupMessageId = SolclientFactory.createFactory(id =>\n  RgmidFactory.fromString(id));\n\nmodule.exports.Message = Message;\nmodule.exports.MessageCacheStatus = MessageCacheStatus;\nmodule.exports.MessageDeliveryModeType = MessageDeliveryModeType;\nmodule.exports.MessageDumpFlag = MessageDumpFlag;\nmodule.exports.MessageDumpStandardProvider = MessageDumpStandardProvider;\nmodule.exports.MessageDumpUtil = MessageDumpUtil;\nmodule.exports.MessageType = MessageType;\nmodule.exports.MessageUserCosType = MessageUserCosType;\nmodule.exports.ReplicationGroupMessageId = ReplicationGroupMessageId;\nmodule.exports.RgmidFactory = RgmidFactory;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An attribue of a {@link solace.Message}. Applications receive messages due to subscriptions on\n * topics, or consumers connected to durable objects.  The MessageCacheStatus of such messages is:\n * {@link solace.MessageCacheStatus.LIVE}.\n *\n * Message are also delivered to an application\n * as a result of a cache request (see {@link solace.CacheSession#sendCacheRequest}) which\n * have a MessageCacheStatus that is {@link solace.MessageCacheStatus.CACHED} or\n * {@link solace.MessageCacheStatus.SUSPECT}.\n *\n * The MessageCacheStatus is retrieved with {@link solace.Message#getCacheStatus}.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageCacheStatus = {\n  /**\n   * The message is live.\n   * @type {Number}\n   */\n  LIVE:    0,\n  /**\n   * The message was retrieveed from a solCache Instance.\n   * @type {Number}\n   */\n  CACHED:  1,\n  /**\n   * The message was retrieved from a suspect solCache Instance.\n   * @type {Number}\n   */\n  SUSPECT: 2,\n\n};\n\nmodule.exports.MessageCacheStatus = Enum.new(MessageCacheStatus);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message delivery modes.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageDeliveryModeType = {\n  /**\n   * This mode provides at-most-once message delivery. Direct messages have\n   * the following characteristics:\n   *   * They are not retained for clients that are not connected to a Solace Message Router.\n   *   * They can be discarded when congestion or system failures are encountered.\n   *   * They can be reordered in the event of network topology changes.\n   *\n   * Direct messages are most appropriate for messaging applications that require very\n   * high-rate or very low-latency message transmission. Direct Messaging enables\n   * applications to efficiently publish messages to a large number of clients\n   * with matching subscriptions.\n   */\n  DIRECT:         0,\n  /**\n   * A Persistent delivery mode is used for Guaranteed Messaging, and this delivery mode\n   * is most appropriate for applications that require persistent storage of the messages\n   * they send or intend to receive. Persistent messages have the following characteristics:\n   *\n   *  * They cannot be discarded or lost (once they are acknowledged by the Solace Message Router).\n   *  * They cannot be reordered in the event of network topology changes.\n   *  * They cannot be delivered more than once to a single client (unless the redelivered\n   *    message flag is applied).\n   *  * When they match subscriptions on durable endpoints, they are retained for a client\n   *    when that client is not connected.\n   *\n   * Persistent messages are most appropriate for applications that require persistent storage\n   * of the messages they send or intend to receive.\n   */\n  PERSISTENT:     1,\n  /**\n   * This mode is functionally the same as Persistent. It exists to facilitate interaction\n   * with JMS applications. In most situations where you want to use Guaranteed Messaging,\n   * it is recommended that you use {@link solace.MessageDeliveryModeType.PERSISTENT}.\n   */\n  NON_PERSISTENT: 2,\n};\n\nmodule.exports.MessageDeliveryModeType = Enum.new(MessageDeliveryModeType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message dump formats. It controls\n * the output of {@link solace.Message#dump}.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageDumpFlag = {\n  /**\n   * Display only the length of the binary attachment, XML content and user property maps.\n   */\n  MSGDUMP_BRIEF: 0,\n  /**\n   * Display the entire message contents.\n   */\n  MSGDUMP_FULL:  1,\n};\n\nmodule.exports.MessageDumpFlag = Enum.new(MessageDumpFlag);\n","const DebugLib = require('solclient-debug');\nconst MessageDumpUtilLib = require('./message-dump-util');\nconst { Destination } = require('solclient-destination');\nconst { LOG_ERROR } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageCacheStatus } = require('./message-cache-status');\nconst { MessageDeliveryModeType } = require('./message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { MessageUserCosType } = require('./message-user-cos-types');\nconst { SDTMapContainer, SDTFieldType } = require('solclient-sdt');\nconst { StringUtils } = require('solclient-util');\n\n\nconst MessageDumpStandardProvider = {\n\n  fpDestination(message/* , flags*/) {\n    const dest = message.getDestination();\n    if (dest !== null && dest instanceof Destination) {\n      return ['Destination', true, dest.toString(), null];\n    }\n    return ['Destination', false, '', null];\n  },\n\n  fpSenderId(message/* , flags*/) {\n    return ['SenderId', (message.getSenderId() !== undefined && message.getSenderId() !== null), message.getSenderId(), null];\n  },\n\n  fpAppmsgType(message/* , flags*/) {\n    return ['AppMessageType', (message.getApplicationMessageType() !== undefined && message.getApplicationMessageType() !== null),\n      message.getApplicationMessageType(), null];\n  },\n\n  fpAppMsgId(message/* , flags*/) {\n    return ['AppMessageID', (message.getApplicationMessageId() !== undefined && message.getApplicationMessageId() !== null),\n      message.getApplicationMessageId(), null];\n  },\n\n  fpSequenceNumber(message/* , flags*/) {\n    const sequenceNum = message.getSequenceNumber();\n    if (typeof sequenceNum === 'number') {\n      return ['SequenceNumber', true, sequenceNum, null];\n    }\n    return ['SequenceNumber', false, '', null];\n  },\n\n  fpTopicSequenceNumber(message/*, flags */) {\n    const topicSeqNo = message.getTopicSequenceNumber();\n    if (Long.isLong(topicSeqNo)) {\n      return ['TopicSequenceNumber', true, topicSeqNo.toString(), null];\n    }\n    return ['TopicequenceNumber', false, '', null];\n  },\n\n  fpCorrelationId(message/* , flags*/) {\n    return ['CorrelationId', (message.getCorrelationId() !== undefined && message.getCorrelationId() !== null),\n      message.getCorrelationId(), null];\n  },\n\n  fpHttpContentType(/*message*/ /*, flags*/) {\n    return ['HTTP Content Type', false, undefined, null];\n  },\n\n  fpHttpContentEncoding(/*message*/ /*, flags*/) {\n    return ['HTTP Content Encoding', false, undefined, null];\n  },\n\n  fpSendTimestamp(message/* , flags*/) {\n    const timestamp = message.getSenderTimestamp();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['SendTimestamp', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['SendTimestamp', false, '', null];\n  },\n\n  fpRcvTimestamp(message/* , flags*/) {\n    const timestamp = message.getReceiverTimestamp();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['RcvTimestamp', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['RcvTimestamp', false, '', null];\n  },\n\n  fpClassOfService(message/* , flags*/) {\n    const cos = message.getUserCos();\n    if (typeof cos === 'number') {\n      return ['Class Of Service', true, MessageUserCosType.nameOf(message.getUserCos()), null];\n    }\n    return ['Class Of Service', false, '', null];\n  },\n\n//  fpPriority(message/* , flags*/) {\n//    const prio = message.getPriority() !== undefined ? message.getPriority() : 'undefined';\n//    return ['Message Priority', true, prio, null];\n//  },\n\n  fpDeliveryMode(message/* , flags*/) {\n    const mode = message.getDeliveryMode();\n    if (typeof mode === 'number') {\n      return ['DeliveryMode', true, MessageDeliveryModeType.nameOf(message.getDeliveryMode()), null];\n    }\n    return ['DeliveryMode', false, '', null];\n  },\n\n  fpGuaranteedMsgId(message/*, flags*/) {\n    const msgId = message.getGuaranteedMessageId();\n    if (Long.isLong(msgId)) {\n      return ['Message Id', true, msgId.toString(10), null];\n    }\n    return ['Message Id', false, '', null];\n  },\n\n  fpReplicationGroupMessageId(message/* , flags*/) {\n    const rgmid = message.getReplicationGroupMessageId();\n    if (rgmid === undefined) {\n      return ['Replication Group Message Id', false, '', null];\n    }\n    return ['Replication Group Message Id', true, rgmid.toString(), null];\n  },\n\n  fpTimeToLive(message/* , flags */) {\n    const timeToLive = message.getTimeToLive();\n    if (typeof timeToLive === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      const d = new Date();\n      return ['TimeToLive', true,\n        `${timeToLive} (${mdu.formatDate(d.getTime() + timeToLive)})`, null];\n    }\n    return ['TimeToLive', false, '', null];\n  },\n\n  fpExpiration(message/*, flags*/) {\n    const timestamp = message.getGMExpiration();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['Expiration', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['Expiration', false, '', null];\n  },\n\n  fpMessageDMQEligible(message/* , flags*/) {\n    return ['DMQ Eligible', message.isDMQEligible(), '', null];\n  },\n\n  fpMessageRedelivered(message/* , flags*/) {\n    return ['Message Re-delivered', message.isRedelivered(), '', null];\n  },\n\n  fpMessageDeliveryCount(message/* , flags*/) {\n    //TODO: exception handling!\n    try {\n      return ['Message Delivery Count', true, message.getDeliveryCount(), null];\n    } catch (e) {\n      return ['Message Delivery Count', false, '', null];\n    }\n  },\n\n  fpDiscardIndication(message/* , flags*/) {\n    return ['Discard Indication', message.isDiscardIndication(), '', null];\n  },\n\n  fpAckImmediately(message/* , flags*/) {\n    return ['ACK Immediately', message.isAcknowledgeImmediately(), '', null];\n  },\n\n  fpElidingEligible(message/* , flags*/) {\n    return ['Eliding Eligible', message.isElidingEligible(), '', null];\n  },\n\n  fpReplyMessage(message/* , flags*/) {\n    return ['Reply Message', message.isReplyMessage(), '', null];\n  },\n\n  fpReplyTo(message/* , flags*/) {\n    const replyTo = message.getReplyTo();\n    if (replyTo !== null && replyTo instanceof Destination) {\n      return ['ReplyTo', true, replyTo.toString(), null];\n    }\n    return ['ReplyTo', false, '', null];\n  },\n\n  fpDeliverToOne(message/* , flags*/) {\n    return ['Deliver To One', message.isDeliverToOne(), '', null];\n  },\n\n  fpCacheMessage(message/* , flags*/) {\n    return ['Message from cache', message.getCacheStatus() !== MessageCacheStatus.LIVE, '', null];\n  },\n\n  fpCacheRequestId(message/*, flags */) {\n    const cacheRequestId = message.getCacheRequestId();\n    if (Long.isLong(cacheRequestId)) {\n      return ['Cache Request Id', true, cacheRequestId.toString, null];\n    }\n    return ['Cache Request Id', false, '', null];\n  },\n\n  fpUserPropertyMap(message, flags) {\n    const propMap = message.getUserPropertyMap();\n    if (propMap !== null && propMap instanceof SDTMapContainer) {\n      const value = `${propMap.getKeys().length} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          const mdu = MessageDumpUtilLib.MessageDumpUtil;\n          detailValue = mdu.printMap(propMap, 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['User Property Map', true, value, detailValue];\n    }\n    return ['User Property Map', false, '', null];\n  },\n\n  fpCorrelationTag(message/*, flags*/) {\n    const strValue = message.getCorrelationKey();\n    return ['Correlation Tag Pointer', (strValue !== undefined && strValue !== null),\n      strValue, null];\n  },\n\n  fpUserData(message/* , flags*/) {\n    if (StringUtils.notEmpty(message.getUserData())) {\n      return ['User Data', true, `len=${message.getUserData().length}`,\n        DebugLib.Debug.formatDumpBytes(message.getUserData(), true, 2)];\n    }\n    return ['User Data', false, '', null];\n  },\n\n  fpSdtStream(message, flags) {\n    const sdtFieldValue = message.getSdtContainer();\n    if (sdtFieldValue !== null && sdtFieldValue.getType() === SDTFieldType.STREAM) {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      const value = `${mdu.countItems(sdtFieldValue.getValue())} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          detailValue = mdu.printStream(sdtFieldValue.getValue(), 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['SDT Stream', true, value, detailValue];\n    }\n    return ['SDT Stream', false, '', null];\n  },\n\n  fpSdtMap(message, flags) {\n    const sdtFieldValue = message.getSdtContainer();\n    if (sdtFieldValue !== null && sdtFieldValue.getType() === SDTFieldType.MAP) {\n      const value = `${sdtFieldValue.getValue().getKeys().length} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          const mdu = MessageDumpUtilLib.MessageDumpUtil;\n          detailValue = mdu.printMap(sdtFieldValue.getValue(), 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['SDT Map', true, value, detailValue];\n    }\n    return ['SDT Map', false, '', null];\n  },\n\n  fpBinaryAttachment(message, flags) {\n    if (!message._binaryAttachment || message._binaryAttachment.length < 1) {\n      return ['Binary Attachment', false, '', null];\n    }\n    const att = message._binaryAttachment.toString('latin1');\n    const value = `len=${att.length}`;\n    let detailValue = null;\n    if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n      detailValue = DebugLib.Debug.formatDumpBytes(att, true, 2);\n    }\n    return ['Binary Attachment', true, value, detailValue];\n  },\n\n  fpXmlContent(message, flags) {\n    const xml = message.getXmlContent();\n    if (StringUtils.notEmpty(xml)) {\n      const value = `len=${xml.length}`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        detailValue = DebugLib.Debug.formatDumpBytes(xml, true, 2);\n      }\n      return ['XML', true, value, detailValue];\n    }\n    return ['XML', false, '', null];\n  },\n\n  fpXmlMetadata(message, flags) {\n    const xmlMetadata = message.getXmlMetadata();\n    if (StringUtils.notEmpty(xmlMetadata)) {\n      const value = `len=${xmlMetadata.length}`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        detailValue = DebugLib.Debug.formatDumpBytes(xmlMetadata, true, 2);\n      }\n      return ['XML Metadata', true, value, detailValue];\n    }\n    return ['XML Metadata', false, '', null];\n  },\n};\n\nmodule.exports.MessageDumpStandardProvider = MessageDumpStandardProvider;\n","const DebugLib = require('solclient-debug');\nconst MessageDumpStandardProviderLib = require('./message-dump-standard-provider');\nconst {\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n} = require('solclient-sdt');\nconst { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { StringBuffer, StringUtils } = require('solclient-util');\n\nconst MessageDumpState = {\n  get dumpProviders() {\n    const providers = MessageDumpStandardProviderLib.MessageDumpStandardProvider;\n    return Object.keys(providers).map(k => providers[k]);\n  },\n};\n\nconst MessageDumpUtil = {\n  getOutOfRangeValue(rawData) {\n    if (typeof rawData === 'string') {\n      return `<out of range>\\n${DebugLib.Debug.formatDumpBytes(rawData)}`;\n    }\n    return `<out of range>\\n${DebugLib.Debug.formatDumpBytes(rawData.toString('latin1'))}`;\n  },\n\n  getValue(sdtField) {\n    let value = null;\n    try {\n      value = sdtField.getValue();\n      return value;\n    } catch (e) {\n      if (e instanceof SDTUnsupportedValueError) {\n        if (e.getSubcode() === SDTValueErrorSubcode.VALUE_OUTSIDE_SUPPORTED_RANGE) {\n          return this.getOutOfRangeValue(e.getSourceData());\n        }\n      } else if (e instanceof OperationError && e.subcode === ErrorSubcode.PARAMETER_INVALID_TYPE) {\n        return '<invalid type>';\n      }\n      throw e;\n    }\n  },\n\n  printMap(sdtMap, indent) {\n    if (Check.nothing(sdtMap) || !(sdtMap instanceof SDTMapContainer)) {\n      return null;\n    }\n    const lines = [];\n    const strIndent = StringUtils.padRight('', indent, ' ');\n    const keys = sdtMap.getKeys().sort();\n    keys.forEach((key) => {\n      const sdtFieldValue = sdtMap.getField(key);\n      const type = sdtFieldValue.getType();\n      const value = this.getValue(sdtFieldValue);\n      let strValue;\n      switch (type) {\n        case SDTFieldType.MAP:\n          strValue = `\\n${this.printMap(value, indent + 2)}`;\n          break;\n        case SDTFieldType.STREAM:\n          strValue = `\\n${this.printStream(value, indent + 2)}`;\n          break;\n        case SDTFieldType.BYTEARRAY:\n          strValue = DebugLib.Debug.formatDumpBytes(value.toString('latin1'), false, 0);\n          if (strValue !== null && strValue.substr(-1) === '\\n') {\n            strValue = strValue.substring(0, strValue.length - 1);\n          }\n          break;\n        default:\n          strValue = (value !== null) ? value.toString() : null;\n      }\n      lines.push(`${strIndent}Key '${key}' (${SDTFieldType.nameOf(type)}): ${strValue}`);\n    });\n    return lines.join('\\n');\n  },\n\n  printStream(sdtStream, indent) {\n    if (Check.nothing(sdtStream) || !(sdtStream instanceof SDTStreamContainer)) {\n      return null;\n    }\n    sdtStream.rewind();\n    const lines = [];\n    const strIndent = StringUtils.padRight('', indent, ' ');\n    while (sdtStream.hasNext()) {\n      const sdtFieldValue = sdtStream.getNext();\n      const type = sdtFieldValue.getType();\n      const value = this.getValue(sdtFieldValue);\n\n      let strValue;\n      switch (type) {\n        case SDTFieldType.MAP:\n          strValue = `\\n${this.printMap(value, indent + 2)}`;\n          break;\n        case SDTFieldType.STREAM:\n          strValue = `\\n${this.printStream(value, indent + 2)}`;\n          break;\n        case SDTFieldType.BYTEARRAY:\n          strValue = DebugLib.Debug.formatDumpBytes(value.toString('latin1'), false, 0);\n          if (strValue !== null && strValue.substr(-1) === '\\n') {\n            strValue = strValue.substring(0, strValue.length - 1);\n          }\n          break;\n        case SDTFieldType.DESTINATION:\n          strValue = value.toString();\n          break;\n        default:\n          strValue = (value !== null) ? value.toString() : null;\n      }\n      lines.push(`${strIndent}(${SDTFieldType.nameOf(type)}): ${strValue}`);\n    }\n    sdtStream.rewind();\n    return lines.join('\\n');\n  },\n\n  countItems(sdtStream) {\n    if (Check.nothing(sdtStream) || (!(sdtStream instanceof SDTStreamContainer))) {\n      return 0;\n    }\n    sdtStream.rewind();\n    let count = 0;\n    while (sdtStream.hasNext()) {\n      sdtStream.getNext();\n      count++;\n    }\n    sdtStream.rewind();\n    return count;\n  },\n\n  formatDate(timeStamp) {\n    return new Date(timeStamp).toString();\n  },\n\n  dump(message, flags, separator, colPadding) {\n    const sb = new StringBuffer();\n    let theSeparator = '\\n';\n    let needSeparator = false;\n    let theColPadding = 40;\n    if (separator !== undefined && separator !== null && typeof separator === 'string') {\n      theSeparator = separator;\n    }\n    if (colPadding !== undefined && colPadding !== null && typeof colPadding === 'number') {\n      theColPadding = colPadding;\n    }\n\n    MessageDumpState.dumpProviders.forEach((provider, index) => {\n      const [key, isPresent, value, detailValue] = provider(message, flags);\n      if (!isPresent) {\n        return;\n      }\n      if (needSeparator) {\n        sb.append(theSeparator);\n      }\n\n      if (value === null || value.length === 0) {\n        // If we have no VALUE field, this is probably a boolean flag\n        // and we just end up displaying the key and a newline.\n        sb.append(key);\n      } else {\n        sb.append(StringUtils.padRight(`${key}:`, theColPadding, ' '));\n        sb.append(value);\n      }\n\n      if (detailValue !== null && (flags & MessageDumpFlag.MSGDUMP_FULL)) {\n        sb.append('\\n');\n        if (detailValue.indexOf('  ') !== 0) {\n          sb.append('  ');\n        }\n        sb.append(detailValue);\n        if (detailValue.substr(-1) !== '\\n' && index < (MessageDumpState.dumpProviders.length - 1)) {\n          sb.append('\\n');\n        }\n      }\n      needSeparator = true;\n    });\n    return sb.toString();\n  },\n};\n\nmodule.exports.MessageDumpUtil = MessageDumpUtil;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message payload types\n * (see {@link solace.Message#getBinaryAttachment})\n *\n * A message may contain unstructured byte data, or a structured container.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageType = {\n  /**\n   * Binary message (unstructured bytes stored in the binary attachment message part).\n   * @type {Number}\n   */\n  BINARY: 0,\n  /**\n   * Structured map message.\n   * @type {Number}\n   */\n  MAP:    1,\n  /**\n   * Structured stream message.\n   * @type {Number}\n   */\n  STREAM: 2,\n  /**\n   * Structured text message.\n   * @type {Number}\n   */\n  TEXT:   3,\n};\n\nmodule.exports.MessageType = Enum.new(MessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of user Class of Service (COS) levels. The COS is set\n * on a Message with {@link solace.Message#setUserCos}\n * The Class of Service has different semantics for direct and guaranteed messages.\n *\n * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n * class of service selects the weighted round-robin delivery queue when the\n * message is forwarded to a consumer.  {@link solace.MessageUserCosType.COS1} are the\n * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n *\n * For messages published as guaranteed messages\n * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n * {@link solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n * with {@link solace.MessageUserCosType.COS1} can be rejected by the Solace Message Router if\n * that message would cause any queue or topic-endpoint to exceed its configured\n * low-priority-max-msg-count.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageUserCosType = {\n  /**\n   * Direct Messages: Lowest priority, use Solace Message Router client D-1 queues for delivery.\n   *\n   * Guaranteed Messages: Messages can be rejected if the message would cause any\n   * queue or topic-endpoint to exceed its configured <i>low-priority-max-msg-count</i>.\n   * @type {Number}\n   */\n  COS1: 0,\n  /**\n   * Direct Messages: Medium priority, use Solace Message Router client D-2 queues for delivery.\n   *\n   * Guaranteed Messages: N/A (same as COS3)\n   * @type {Number}\n   */\n  COS2: 1,\n  /**\n   * Direct Messages: Highest priority, use Solace Message Router client D-3 queues for delivery.\n   *\n   * Guaranteed Messages: Messages are not rejected for exceeding <i>low-priority-max-msg-count</i>.\n   * Messages may still be rejected for other reasons such as Queue 'Spool Over Quota'.\n   * @type {Number}\n   */\n  COS3: 2,\n};\n\nmodule.exports.MessageUserCosType = Enum.new(MessageUserCosType);\n","const clone = require('clone');\nconst SolclientFactoryLib = require('solclient-factory');\nconst { Codec: SDTCodec } = require('solclient-sdt');\nconst { Convert } = require('solclient-convert');\nconst { Destination } = require('solclient-destination');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_DEBUG } = require('solclient-log');\nconst { MessageCacheStatus } = require('./message-cache-status');\nconst { MessageDeliveryModeType } = require('./message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { MessageDumpUtil } = require('./message-dump-util');\nconst { MessageType } = require('./message-types');\nconst { MessageUserCosType } = require('./message-user-cos-types');\nconst { Parameter } = require('solclient-validate');\nconst { RgmidFactory } = require('./replication-group-message-id');\nconst { SDTField, SDTFieldType, SDTMapContainer, SDTUnsupportedValueError } = require('solclient-sdt');\n\nconst { ProfileBinding } = SolclientFactoryLib;\n\nconst {\n  utf8ToUcs2,\n  anythingToBuffer,\n} = Convert;\nconst {\n  isBoolean,\n  isEnumMember,\n  isInstanceOf,\n  isInstanceOfOrNothing,\n  isNumberOrNothing,\n  isStringOrNothing,\n} = Parameter;\n\n// When a message is cloned for sending,\n// * We assume that it may NOT include circular references.\n//   These are also unsupported in the encoder.\n// * We assume that all properties to be cloned are enumerable.\n//   This has significant (~10% AD send rate) performance impact.\n\nconst MESSAGE_CLONE_OPTIONS = { circular: false, includeNonEnumerable: false };\n\n/**\n * Function called on construct/reset. Sets the initial values for fields that have them.\n * @param {Message} message The message to initialize\n * @internal\n */\nfunction initMessage(message) {\n  message._deliveryMode = MessageDeliveryModeType.DIRECT;\n  message._userCos = MessageUserCosType.COS1;\n  message._cacheStatus = MessageCacheStatus.LIVE;\n  message._spoolerUniqueId = undefined;\n  /* message._spoolerMessageId does not to be set to undefined\n   * message._spoolerMessageId should only be set when\n   * message._spoolerUniqueId is set to a value\n   * other than undefined or RgmidFactory.INVALID_SUID\n   */\n  message._priority = undefined;\n  message._deliveryCount = -1; //Makes the accessor throw, never returned to user.\n}\n\n/**\n * Function called on reset only. Clears every field in the message. Call #initMessage\n * to set initial values.\n * @param {Message} message The message to clear\n * @internal\n */\nfunction clearMessage(message) {\n  const fields = Object.keys(message);\n  fields.forEach(f => delete message[f]);\n}\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.SolclientFactory.createMessage}</b>\n * <p>\n * A message is a container that can be used to store and send messages to and from the\n * Solace Message Router.\n *\n * Applications manage the lifecycle of a message; a message is created by calling\n * {@link solace.SolclientFactory.createMessage} and is freed by dereferencing it.\n *\n * API operations that cache or mutate messages always take a copy. A message may\n * be created, mutated by the API user, and sent multiple times.\n *\n * The Message Object provides methods to manipulate the common Solace\n * message header fields that are optionally sent in the binary metadata\n * portion of the Solace message.\n *\n * Applications can also use the structured data API {@link solace.Message#setSdtContainer}\n * to add containers (maps or streams) and their fields to the binary payload or\n * to the User Property map contained within the binary metadata.\n *\n * This does not prevent applications from ignoring these\n * methods and sending payload in the binary payload as an opaque binary field for\n * end-to-end communications\n *\n * @memberof solace\n */\nclass Message {\n\n  /**\n   * @constructor\n   * @hideconstructor\n   **/\n  constructor() {\n    initMessage(this);\n  }\n\n  /**\n   * Gets the payload type ({@link solace.MessageType}) of the message. A message has a\n   * structured payload if one was attached via {@link solace.Message#setSdtContainer} otherwise\n   * if the payload is attached via {@link Message@setBinaryAttachment} then it\n   * is unstructured ({@link solace.MessageType#BINARY})\n   *\n   * @returns {solace.MessageType} The structured payload type.\n   * @default {solace.MessageType.BINARY}\n   */\n  getType() {\n    return this._messageType || MessageType.BINARY; // This is OK; BINARY === 0.\n  }\n\n  /**\n   * Sets the application-provided message ID.\n   * @param {?String} value The new value for the application-provided message ID.\n   */\n  setApplicationMessageId(value) {\n    this._applicationMessageId = isStringOrNothing('applicationMessageId', value);\n  }\n\n  /**\n   * Gets the application-provided message ID.\n   * @returns {?String} The application provided message ID.\n   */\n  getApplicationMessageId() {\n    return this._applicationMessageId;\n  }\n\n  /**\n   * Sets the application message type. This value is used by applications\n   * only, and is passed through the API and Solace Message Router untouched.\n   * @param {?String} value The application message type.\n   */\n  setApplicationMessageType(value) {\n    this._applicationMessageType = isStringOrNothing('applicationMessageType', value);\n  }\n\n  /**\n   * Gets the application message type. This value is used by applications\n   * only, and is passed through the API and Solace Message Router untouched.\n   * @returns {?String} The application message type.\n   */\n  getApplicationMessageType() {\n    return this._applicationMessageType;\n  }\n\n  /**\n   * Gets the binary attachment part of the message.\n   *\n   * Backward compatibility note: Using the version10 factory profile or older,\n   * the binary attachment is returned as a 'latin1' String:\n   * Each character has a code in the range * 0-255\n   * representing the value of a single received byte at that position.\n   *\n   * @returns {?Uint8Array} A TypedArray view of the binary attachment.\n   */\n  getBinaryAttachment() {\n    if (this._binaryAttachment && ProfileBinding.value.byteArrayAsString) {\n      return this._binaryAttachment.toString('latin1');\n    }\n    return this._binaryAttachment;\n  }\n\n  /**\n   * Sets the binary attachment part of the message.\n   *\n   * The binary attachment is conceptually an array of bytes.\n   * When this method is used, the message payload type is {@link solace.MessageType#BINARY}\n   * See {@link solace.Message#getType}.\n   *\n   * Applications may set the binary attachment to NULL or undefined to\n   * remove the binary attachment and create a message with no payload.\n   *\n   * The following types are accepted:\n   *   Buffer (the nodeJS native type or equivalent)\n   *   ArrayBuffer,\n   *   Any DataView or TypedArray,\n   *   'latin1' String for backwards compatibility:\n   *     each character has a code in the range 0-255\n   *     representing exactly one byte in the attachment.\n   *\n   * @param {?Uint8Array} value Sets the binary attachment part of the message.\n   */\n  setBinaryAttachment(value) {\n    if (value) {\n      this._messageType = MessageType.BINARY;\n    }\n    this._setBinaryAttachment(anythingToBuffer(value));\n  }\n  _setBinaryAttachment(value) {\n    this._binaryAttachment = value;\n  }\n\n  /**\n   * Given a Message containing a cached message, return the cache Request Id that\n   * the application set in the call to {@link solace.CacheSession#sendCacheRequest}.\n   *\n   * @returns {?Number} The request ID of the cache request associated with this message.\n   */\n  getCacheRequestId() {\n    return this._cacheRequestId;\n  }\n\n  /**\n   * @private\n   * @param {Number} cacheRequestID The cache request ID associated with this message\n   */\n  _setCacheRequestID(cacheRequestID) {\n    this._cacheRequestId = cacheRequestID;\n  }\n\n  /**\n   * Gets the correlation ID.  The message Correlation Id\n   * is carried in the Solace message headers unmodified by the API and\n   * the Solace Message Router. This field may be used for peer-to-peer\n   * message synchronization and is commonly used for correlating\n   * a request to a reply. See {@link solace.Session#sendRequest}.\n   * @returns {?String} The correlation ID associated with the message.\n   */\n  getCorrelationId() {\n    return this._correlationId;\n  }\n\n  /**\n   * Sets the correlation ID. The message Correlation Id\n   * is carried in the Solace message headers unmodified by the API and\n   * the Solace Message Router. This field may be used for peer-to-peer\n   * message synchronization and is commonly used for correlating\n   * a request to a reply. See {@link solace.Session#sendRequest}.\n   * @param {?String} value The correlation ID to associate with the message.\n   */\n  setCorrelationId(value) {\n    this._correlationId = isStringOrNothing('correlationId', value);\n  }\n\n  /**\n   * Gets the correlation Key. A correlation key is used to correlate\n   * a message with its acknowledgement or rejection. The correlation key is an object that is\n   * passed back to the client during the router acknowledgement or rejection.\n   *\n   * The correlation key is a local reference\n   * used by applications generating Guaranteed messages. Messages that are\n   * sent in either {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT} mode may set the correlation key.\n   * @returns {?Object} The correlation Key associated with the message,\n   * or <code>null</code>, if unset.\n   */\n  getCorrelationKey() {\n    return this._correlationKey || null;\n  }\n\n  /**\n   * Sets the correlation Key. A correlation key is used to correlate\n   * a message with its acknowledgement or rejection. The correlation key is an object that is\n   * passed back to the client during the router acknowledgement or rejection.\n   *\n   * The correlation key is a local reference\n   * used by applications generating Guaranteed Messages. Messages that are\n   * sent in either {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT} mode may set the correlation key. If this\n   * method is used, the correlation information is returned\n   * when the {@link solace.SessionEventCode#event:ACKNOWLEDGED_MESSAGE} event\n   * is later received for an acknowledged message or when the\n   * {@link solace.SessionEventCode#event:REJECTED_MESSAGE_ERROR} is received for a rejected\n   * message.\n   *\n   * The API only maintains a reference to the passed object.  If the application requires the\n   * contents are unmodified for proper correlation, then it is the application's responsibility\n   * to ensure the contents of the object are not modified.\n   *\n   * Important: <b>The Correlation Key is not included in the\n   * transmitted message and is only used with the local API</b>\n   * @param {Object} value The correlation Key to associate with the message.\n   */\n  setCorrelationKey(value) {\n    this._correlationKey = value;\n  }\n\n  /**\n   * Gets whether the message is configured for delivering to one client only.\n   * @returns {Boolean} indicates whether the message is configured for\n   * delivering to one client only.\n   * @deprecated use Shared Subscriptions instead.\n   */\n  isDeliverToOne() {\n    return this._deliverToOne || false;\n  }\n\n  /**\n   * Sets whether the message is configured for delivering to one client only.\n   * @param {Boolean} value whether the message is configured for delivering to one client only.\n   * @deprecated use Shared Subscriptions instead.\n   */\n  setDeliverToOne(value) {\n    this._setDeliverToOne(this._deliverToOne = isBoolean('deliverToOne', value));\n  }\n  _setDeliverToOne(value) {\n    this._deliverToOne = value;\n  }\n\n  /**\n   * Gets the delivery mode of the message.\n   * @returns {solace.MessageDeliveryModeType} representing the delivery mode of the message.\n   */\n  getDeliveryMode() {\n    return this._deliveryMode;\n  }\n\n  /**\n   * Sets the delivery mode of the message.\n   * @param {solace.MessageDeliveryModeType} value The message delivery mode.\n   */\n  setDeliveryMode(value) {\n    this._setDeliveryMode(isEnumMember('deliveryMode', value, MessageDeliveryModeType));\n  }\n  _setDeliveryMode(value) {\n    this._deliveryMode = value;\n  }\n\n  /**\n   * Gets the destination to which the message was published.\n   * @returns {?Destination} The destination to which a message was published.\n   */\n  getDestination() {\n    return this._destination;\n  }\n\n  /**\n   * Sets the destination ({@link solace.DestinationType#Topic} or\n   * {@link solace.DestinationType#Queue}) to publish the message to.\n   * @param {Destination} value The destination to publish the message to.\n   */\n  setDestination(value) {\n    this._setDestination(isInstanceOf('destination', value, Destination));\n  }\n  _setDestination(value) {\n    this._destination = value;\n  }\n\n  /**\n   * Indicates whether one or more messages have been discarded prior\n   * to the current message. This indicates congestion discards only and\n   * is not affected by message eliding.\n   * @returns {Boolean} Returns true if one or more messages have been\n   * discarded prior to the current message; otherwise, it returns false.\n   */\n  isDiscardIndication() {\n    return this._discardIndication || false;\n  }\n\n  /**\n   * @private\n   * @param {Boolean} value The new value for discard indication\n   */\n  setDiscardIndication(value) {\n    this._setDiscardIndication(isBoolean('discardIndication', value));\n  }\n  _setDiscardIndication(value) {\n    this._discardIndication = value;\n  }\n\n  /**\n   * Returns whether the message is eligible for eliding.\n   * <p>\n   * Message eliding enables filtering of data to avoid transmitting\n   * every single update to a subscribing client.\n   * <p>\n   * This property does not indicate whether the message was elided.\n   *\n   * @returns {Boolean} indicates whether the message is eligible for eliding.\n   */\n  isElidingEligible() {\n    return this._elidingEligible || false;\n  }\n\n  /**\n   * Sets whether the message is eligible for eliding.\n   * <p>\n   * Message eliding enables filtering of data to avoid transmitting\n   * every single update to a subscribing client.\n   * <p>\n   * This property does not indicate whether the message was elided.\n   *\n   * @param {Boolean} value sets whether the message is eligible for eliding.\n   */\n  setElidingEligible(value) {\n    this._setElidingEligible(isBoolean('setElidingEligible', value));\n  }\n  _setElidingEligible(value) {\n    this._elidingEligible = value;\n  }\n\n  /// ---------------------------------------------------------\n  // * Internal use only methods on the message, for fields set by the internal\n  // * publisher\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {Number} The publisher ID\n   * @private\n   */\n  getPublisherId() {\n    return this._publisherId;\n  }\n  /**\n   * @param {Number} value  The publisher ID to set\n   * @private\n   */\n  setPublisherId(value) {\n    this._publisherId = value;\n  }\n\n  /**\n   * @returns {Number} The publisher message ID\n   * @private\n   */\n  getPublisherMessageId() {\n    return this._publisherMsgId;\n  }\n  /**\n   * @param {Number} value The publisher message ID to set\n   * @private\n   */\n  setPublisherMessageId(value) {\n    this._publisherMsgId = value;\n  }\n\n  /// -------------------------------------------------------------\n  // * User-settable properties for publishing\n  /// -------------------------------------------------------------\n\n  /**\n   * @returns {Number} The Guaranteed Message TTL, in milliseconds.\n   */\n  getTimeToLive() {\n    return this._timeToLive;\n  }\n  /**\n   * @param {Number} value The Guaranteed Message TTL to set, in milliseconds.\n   *\n   * The time to live is the number of milliseconds the message may be stored on the\n   * Solace Message Router before the message is discarded or moved to a Dead Message\n   * Queue. See {@link solace.Message.setDMQEligible}.\n   *\n   * Setting the Time To Live to zero disables TTL for the message.\n   *\n   * This property is only valid for Guaranteed messages (Persistent and Non-Persistent).\n   * It has no effect when used in conjunction with other message types unless the message\n   * is promoted by the appliance to a Guaranteed message.\n   *\n   * The maxium allowed time to live is 3.1536E11 (315360000000) which is\n   * approximately 10 years.\n   */\n  setTimeToLive(value) {\n    const MAX_MESSAGE_TTL_MS = (10 * 365 * 24 * 60 * 60 * 1000); // approximately 10 years\n\n    // Allow parser and initializer to set timeToLive to undefined\n    if (value === null || value === undefined) {\n      this._timeToLive = value;\n      return;\n    }\n    if (typeof value !== 'number' || isNaN(value)) {\n      throw new OperationError('Invalid type for time to live',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (value < 0 || value > MAX_MESSAGE_TTL_MS) {\n      throw new OperationError('Invalid time to live value',\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._timeToLive = value;\n  }\n\n  /**\n   * @returns {?Number} The Guaranteed Message expiration value.\n   * The expiration time is the UTC time\n   * (that is, the number of milliseconds from midnight January 1, 1970 UTC) when the\n   * message is to expire.\n   */\n  getGMExpiration() {\n    return this._expiration;\n  }\n  /**\n   * Set the expiration time field. The expiration time is the UTC time\n   * (that is, the number of milliseconds from midnight January 1, 1970 UTC) when the\n   * message is to expire. The expiration time is carried in the message when set to\n   * a non-zero value. Expiration time is not included when this value is set to zero or\n   * undefined\n   *\n   * The message expiration time is carried to clients that receive the message\n   * unmodified and does not effect the life cycle of the message. Use\n   * {@link solace.Message#setTimeToLive} to enforce message expiry in the network.\n   *\n   * @param {?Number} value The new Guaranteed Message expiration value\n   */\n  setGMExpiration(value) {\n    this._expiration = isNumberOrNothing('GMExpiration', value);\n  }\n\n  /**\n   * @returns {Boolean} Whether this message is Guaranteed Message DMQ eligible\n   */\n  isDMQEligible() {\n    return this._dmqEligible || false;\n  }\n  /**\n   * @param {Boolean} value The new value for Guaranteed Message DMQ (Dead Message Queue) Eligible.\n   * When this property is set, when the message expires in the network\n   * the message is saved on a appliance dead message queue. Otherwise the expired message is\n   * discarded. See {@link solace.Message#setTimeToLive}.\n   * @default false\n   */\n  setDMQEligible(value) {\n    this._setDMQEligible(isBoolean('DMQEligible', value));\n  }\n  _setDMQEligible(value) {\n    this._dmqEligible = value;\n  }\n\n  /// ---------------------------------------------------------\n  // * Internal use only methods on the message, for fields set by the consumer flow\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {Long} The ID of the flow that received this message\n   * @private\n   */\n  getFlowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The flow ID that received this message\n   * @private\n   */\n  setFlowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * @returns {Long} The Guaranteed Message prevMsgId\n   * @private\n   */\n  getGuaranteedPreviousMessageId() {\n    return this._guaranteedPrevMsgId;\n  }\n  /**\n   * @param {Long} value The Guaranteed Message prevMsgId to set\n   * @private\n   */\n  setGuaranteedPreviousMessageId(value) {\n    this._guaranteedPrevMsgId = value;\n  }\n\n  /**\n   * @param {Long} value Spooler unique id value\n   * @private\n   */\n  _setSpoolerUniqueId(value) {\n    this._spoolerUniqueId = value;\n  }\n\n  /**\n   * @returns {?Long} value of Spooler unique id\n   * @private\n   */\n  _getSpoolerUniqueId() {\n    // This can be set via the smf header or by the message consumer\n    // using _setSpoolerUniqueId.\n    // The message consumer check if a data message has a suid set\n    // the updates the consumer stored value for suid from the message value.\n    // If the message does not have a suid the message consumer sets the suid\n    // of the message using _setSpoolerUniqueId.\n    // See consumer-fsm.acceptMessage for details.\n    if (this._spoolerUniqueId === undefined) {\n      return RgmidFactory.INVALID_SUID;\n    }\n    return this._spoolerUniqueId;\n  }\n\n  /// ---------------------------------------------------------\n  // * Properties set by the Message Consumer\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {?solace.MessageConsumer} The associated Message Consumer, if received by a consumer\n   */\n  getMessageConsumer() {\n    return this._consumer;\n  }\n  /**\n   * @param {solace.MessageConsumer} value The Message Consumer to associate with this message\n   * @private\n   */\n  setMessageConsumer(value) {\n    this._consumer = value;\n  }\n\n  /**\n   * This message ID is NOT a universal unique identifier for the message.\n   * There is no use for this message ID in an application.\n   * Internally this message ID is used when a message is acknowledged\n   * calling Message.acknowledge().\n   * No other meaning should be inferred from the value of this message ID.\n   * @returns {?Long} A field in the message structure intended for internal use.\n   * @deprecated There is no useful purpose for this method. Do not use it.\n   */\n  getGuaranteedMessageId() {\n    return this._guaranteedMsgId;\n  }\n  /**\n   * @param {Long} value The Guaranteed Message msgId to set\n   * @private\n   */\n  setGuaranteedMessageId(value) {\n    this._guaranteedMsgId = value;\n  }\n\n  /**\n   * @param {Long} value Spooler message id value, this can be the mateAckId or the AckId\n   * @private\n   */\n  _setSpoolerMessageId(value) {\n    this._spoolerMessageId = value;\n  }\n\n  /**\n   * Returns the Replication Group Message Id\n   * @returns {?solace.ReplicationGroupMessageId} The replication group message id\n   *  assigned by the router.\n   */\n  getReplicationGroupMessageId() {\n    if (this._spoolerUniqueId === undefined\n       || RgmidFactory.INVALID_SUID.eq(this._spoolerUniqueId)) {\n      return undefined;\n    }\n    /* use this._spoolerMessageId if possible otherwise use this._guaranteedMsgId */\n    const smid = this._spoolerMessageId || this._guaranteedMsgId;\n    /* Note smid as this._guaranteedMsgId must have a value\n     * if this._spoolerUniqueId is not RgmidFactory.INVALID_SUID */\n    return RgmidFactory.from({ suid: this._spoolerUniqueId, msgid: smid });\n  }\n\n  /**\n   * Returns the Topic Sequence Number.  If there is no topic sequence number\n   * undefined is returned.\n   * @returns {?Long} The Topic Sequence number assigned to this message by the Message Router.\n   */\n  getTopicSequenceNumber() {\n    return this._topicSequenceNumber;\n  }\n\n  /**\n   * @param {Long} topicSeqNo The Topic Sequence Number to set\n   * @private\n   */\n  setTopicSequenceNumber(topicSeqNo) {\n    this._topicSequenceNumber = topicSeqNo;\n  }\n\n  /**\n   * Returns the delivery count.\n   * @returns {?Number} The delivery count reported by the broker.\n   */\n\n  getDeliveryCount() {\n    if (this._deliveryCount === -1) {\n      throw new OperationError('Endpoint does not report delivery count.',\n        ErrorSubcode.INVALID_OPERATION);\n    } // else\n    return this._deliveryCount;\n  }\n\n  /**\n   * @param {Number} deliveryCount on this message.\n   * @private\n   */\n  setDeliveryCount(deliveryCount) {\n    this._deliveryCount = deliveryCount;\n  }\n\n  /**\n   * Acknowledges this message.\n   *\n   * If the {@link solace.MessageConsumer} on which this message was received is configured to use\n   * {@link solace.MessageConsumerAckMode.CLIENT}, then when a message is received by an\n   * application, the application must call this method to explicitly acknowledge reception of the\n   * message. This frees local and router resources associated with an unacknowledged message.\n   *\n   * The API does not send acknowledgments immediately. It stores the state for\n   * acknowledged messages internally and acknowledges messages, in bulk, when a\n   * threshold or timer is reached.\n   *\n   * @throws {@link solace.OperationError}\n   *  * if this message was not received via Guaranteed Message;\n   *    subcode: {@link solace.ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH}\n   *  * if the associated {@link solace.Session} is not connected;\n   *    subcode: {@link solace.ErrorSubcode.SESSION_NOT_CONNECTED}\n   *  * if the associated {@link solace.MessageConsumer} is not connectedl\n   *    subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  acknowledge() {\n    if (this._consumer.getProperties().browser) {\n      throw new OperationError('Messages delivered to a Queue Browser can only be deleted by calling QueueBrowser.removeMessageFromQueue()',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    if (this._acked) {\n      throw new OperationError('Message can only be acknowledged once',\n        ErrorSubcode.MESSAGE_ALREADY_ACKNOWLEDGED);\n    }\n    if (this._deliveryMode === MessageDeliveryModeType.DIRECT) {\n      throw new OperationError('Cannot acknowledge a DIRECT message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer) {\n      throw new OperationError('Cannot acknowledge a locally-created message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer._sessionInterface.canAck) {\n      throw new OperationError('Cannot acknowledge using associated session',\n        ErrorSubcode.SESSION_NOT_CONNECTED);\n    }\n    if (!this._consumer.canAck) {\n      throw new OperationError('Cannot acknowledge using associated Message Consumer',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    this._consumer.applicationAck(this._guaranteedMsgId);\n    this._acked = true;\n  }\n\n  /**\n   * Returns whether acknowledge() has been called on this message.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n  get isAcknowledged() {\n    return this._acked || false;\n  }\n\n  /**\n   * Test if the Acknowledge Immediately message property is set or not.\n   * When the Acknowledge Immediately property is set to true on an outgoing\n   * Guaranteed Message,\n   * it indicates that the Solace Message Router should Acknowledge this message\n   * immediately upon receipt.\n   *\n   * This property, when set by a publisher, may or may not be removed by the\n   * Solace Message Router prior to delivery to a consumer, so message consumers\n   * must not expect the property value indicates how the message was\n   * originally published\n   * @returns {Boolean} Whether this message was set to acknowledge immediately.\n   */\n  isAcknowledgeImmediately() {\n    return this._ackImmediately || false;\n  }\n  /**\n   * Set the optional Acknoweledge Immediately message property.\n   * When the Acknowledge Immediately property is set to true on an outgoing Guaranteed Message,\n   * it indicates that the Solace Message Router should acknoweledge this message\n   * immediately upon receipt. By default the property is set to false on newly created messages.\n   *\n   * This property, when set by a publisher, may or may not be removed by the appliance\n   * prior to delivery to a consumer, so message consumers must not expect the property value\n   * indicates how the message was originally published. Therefore if a received message\n   * is forwarded by the application, the Acknowledge Immediately property should be\n   * explicitly set to the desired value (true or false).\n   *\n   * Setting this property on an outgoing direct message has no effect.\n   *\n   * @param {Boolean} value Whether to acknowledge this message immediately.\n   */\n  setAcknowledgeImmediately(value) {\n    this._setAcknowledgeImmediately(isBoolean('acknowledgeImmediately', value));\n  }\n  _setAcknowledgeImmediately(value) {\n    this._ackImmediately = value;\n  }\n\n  /**\n   * Gets the cache status of this message.\n   *\n   * @returns {?solace.MessageCacheStatus} The cache status of this message. The status\n   * will be MessageCacheStatus.LIVE unless the message was returned in a\n   * reply to a cache request.\n   */\n  getCacheStatus() {\n    return this._cacheStatus;\n  }\n\n  /**\n   * @param {solace.MessageCacheStatus} cacheStatus The new cache status for this message\n   * @private\n   */\n  _setCacheStatus(cacheStatus) {\n    this._cacheStatus = cacheStatus;\n  }\n\n  /**\n   * Returns whether the message's reply field is set, indicating\n   * that this message is a reply to a previous request. See {@link solace.Session#sendRequest}.\n   * @returns {Boolean} Indicates the state of the reply field.\n   */\n  isReplyMessage() {\n    return this._replyMessage || false;\n  }\n\n  /**\n   * Indicates whether the message has been marked as redelivered by the Solace Message Router.\n   * @returns {Boolean} Indicates whether the redelivered flag is set.\n   */\n  isRedelivered() {\n    return this._redelivered || false;\n  }\n  /**\n   * @param {Boolean} value The redelivered flag\n   * @private\n   */\n  setRedelivered(value) {\n    this._redelivered = value;\n  }\n\n  /**\n   * Sets the <i>reply</i> field of the message.\n   * @param {Boolean} value Sets whether to flag the message as a reply.\n   */\n  setAsReplyMessage(value) {\n    this._replyMessage = isBoolean('asReplyMessage', value);\n  }\n\n  /**\n   * Gets the receive timestamp (in milliseconds, from midnight, January 1, 1970 UTC).\n   * @returns {?Number} The receive timestamp, if set.\n   */\n  getReceiverTimestamp() {\n    return this._receiverTimestamp;\n  }\n\n  /**\n   * Gets the replyTo destination\n   * @returns {?solace.Destination} The value of the replyTo destination, if set.\n   */\n  getReplyTo() {\n    return this._replyTo;\n  }\n\n  /**\n   * Sets the replyTo destination\n   * @param {solace.Destination} value The replyTo destination.\n   */\n  setReplyTo(value) {\n    this._replyTo = isInstanceOfOrNothing('replyTo', value, Destination);\n  }\n\n  /**\n   * Returns the Sender's ID.\n   * @returns {?String} The Sender's ID, if set.\n   */\n  getSenderId() {\n    return this._senderId;\n  }\n\n  /**\n   * Sets the Sender ID for the message\n   * @param {String} value The Sender ID for the message.\n   */\n  setSenderId(value) {\n    this._senderId = isStringOrNothing('senderId', value);\n  }\n\n  /**\n   * Gets the send timestamp (in milliseconds, from midnight, January 1,\n   * 1970 UTC).\n   * @returns {?Number} The send timestamp, if set.\n   */\n  getSenderTimestamp() {\n    return this._senderTimestamp;\n  }\n\n  /**\n   * Sets the send timestamp (in milliseconds, from midnight, January 1,\n   * 1970 UTC). This field can be generated automatically during message\n   * publishing, but it will not be generated if previously set to a non-null value by this method.\n   * See {@link solace.SessionProperties#generateSendTimestamps}.\n   *\n   * An application that publishes the same {@link solace.Messsage} multiple times and\n   * also wants generted timestamps on each messages, should set the sender timestamp\n   * to undefined after each call to {@link solace.Session#send}.\n   * @param {?Number} value The value to set as the send timestamp.\n   */\n  setSenderTimestamp(value) {\n    this._senderTimestamp = isNumberOrNothing('senderTimestamp', value);\n  }\n\n  /**\n   * Gets the sequence number.\n   * <p>\n   * This is an application-defined field,\n   * see <code>{@link solace.Message#setSequenceNumber}()</code>.\n   * @returns {?Number} The sequence number, if set\n   * @throws {@link solace.SDTUnsupportedValueError} in case the sequence number is out of range.\n   */\n  getSequenceNumber() {\n    if (this._sequenceNumberError) {\n      throw this._sequenceNumberError;\n    }\n    return this._sequenceNumber;\n  }\n\n  /**\n   * Sets the application-defined sequence number. If the sequence number\n   * is not set, or set to undefined, and {@link solace.SessionProperties#generateSequenceNumber}\n   * is true, then a sequence number is automatically generated for each sent message.\n   * @param {?Number} value The sequence number.\n   */\n  setSequenceNumber(value) {\n    if (value instanceof SDTUnsupportedValueError) {\n      this._sequenceNumberError = value;\n    } else {\n      this._sequenceNumber = isNumberOrNothing('sequenceNumber', value);\n      this._sequenceNumberError = undefined;\n      //TODO: this is probably wrong. Shouldn't it be cleared if value === undefined?\n      this._autoSequenceNumber = false;\n    }\n  }\n\n  /**\n   * Gets the Class of Service (CoS) value for the message.\n   * The Class of Service has different semantics for direct and guaranteed messages.\n   *\n   * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * class of service selects the weighted round-robin delivery queue when the\n   * message is forwarded to a consumer.  {@link solace.MessageUserCosType.COS1} are the\n   * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n   *\n   * For messages published as guaranteed messages\n   * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n   * with {@link solace.MessageUserCosType.COS1} can be rejected by the Solace Message Router if\n   * that message would cause any queue or topic-endpoint to exceed its configured\n   * low-priority-max-msg-count.\n   *\n   * @returns {solace.MessageUserCosType} The COS value.\n   */\n  getUserCos() {\n    return this._userCos;\n  }\n\n  /**\n   * Gets the Message Priority Parameter (JMS Priority) value for the message.\n   * Numerical values between 0 and 255 are valid return values,\n   * undefined means the parameter is not present.\n   *\n   * If destination queues and topic endpoints for this message\n   * are configured to respect message priority,\n   * the values 0 through 9 can be used to affect the priority\n   * of delivery to consumers of those queues or topic endpoints.\n   * For the purposes of prioritized message delivery,\n   * values larger than 9 are treated the same as 9.\n   *\n   * @returns {?Number} The Message Priority Parameter value.\n   */\n  getPriority() {\n    return this._priority;\n  }\n\n  /**\n   * Sets the Class of Service (CoS) value for the message.\n   *\n   * The Class of Service has different semantics for direct and guaranteed messages.\n   *\n   * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * class of service selects the weighted round-robin delivery queue when the\n   * message is forwarded to a consumer.  {@link solace.MessageUserCosType#COS1} are the\n   * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n   *\n   * For messages published as guaranteed messages\n   * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n   * with {@link solace.MessageUserCosType#COS1} can be rejected by the Solace Message Router if\n   * that message would cause any queue or topic-endpoint to exceed its configured\n   * low-priority-max-msg-count.\n   *\n   * @param {solace.MessageUserCosType} value The COS value.\n   * @default {solace.MessageUserCosType#COS1}\n   */\n  setUserCos(value) {\n    this._setUserCos(isEnumMember('userCos', value, MessageUserCosType));\n  }\n  _setUserCos(value) {\n    this._userCos = value;\n  }\n\n  /**\n   * Sets the Message Priority Parameter (JMS Priority) value for the message.\n   * Numerical values between 0 and 255 are accepted,\n   * use undefined to unset.\n   *\n   * If destination queues and topic endpoints for this message\n   * are configured to respect message priority,\n   * the values 0 through 9 can be used to affect the priority\n   * of delivery to consumers of those queues or topic endpoints.\n   * For the purposes of prioritized message delivery, values larger than 9\n   * are treated the same as 9.\n   *\n   * @param {?Number} value The priority value.\n   */\n  setPriority(value) {\n    if (value === undefined || value === null) {\n      this._setPriority(undefined);\n      return;\n    }\n    if (typeof value !== 'number' || isNaN(value)) {\n      throw new OperationError('Invalid type for message priority',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (value < 0 || value > 255) {\n      throw new OperationError('Invalid priority value',\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._setPriority(value);\n  }\n\n  _setPriority(value) {\n    this._priority = value;\n  }\n\n  /**\n   * Gets the user data part of the message.\n   * @returns {String} The user data part of the message, if set.\n   */\n  getUserData() {\n    return this._userData;\n  }\n\n  /**\n   * Sets the user data part of the message.\n   * @param {String} value The user data part of the message.\n   */\n  setUserData(value) {\n    this._setUserData(isStringOrNothing('userData', value));\n  }\n  _setUserData(value) {\n    this._userData = value;\n  }\n\n  /**\n   * Gets the XML content part of the message.\n   * Notice that the content is encoded as UTF-8 characters,\n   * it needs to be decoded as JavaScript surrogate pair: decodeURIComponent(escape(value))\n   * @returns {?String} The XML content part of the message, if set.\n   */\n  getXmlContent() {\n    return this._xmlContent;\n  }\n\n  /**\n   * Gets the XML content part of the message decoded from UTF-8 encoding of the characters.\n   * @returns {?String} The XML content part of the message. Returns <code>null</code> if not\n   * present.\n   */\n  getXmlContentDecoded() {\n    return this._xmlContent ? utf8ToUcs2(this._xmlContent) : this._xmlContent;\n  }\n\n  /**\n   * Sets the XML content part of the message.\n   * The content is encoded by replacing each instance of certain characters\n   * by one, two, three, or four escape sequences representing the\n   * UTF-8 encoding of the character.\n   * @param {String} value The XML content part of the message.\n   */\n  setXmlContent(value) {\n    const setValue = isStringOrNothing('xmlContent', value);\n    this._xmlContent = setValue ? unescape(encodeURIComponent(setValue)) : setValue;\n  }\n\n  /**\n   * Internal set for the XML content part of the message.\n   * @param {String} value The XML content part of the message.\n   * @private\n   */\n  _setXmlContentInternal(value) {\n    this._xmlContent = isStringOrNothing('xmlContentInternal', value);\n  }\n\n  /**\n   * Sets the message's XML metadata section.\n   * @param {String} value The XML metadata.\n   */\n  setXmlMetadata(value) {\n    this._setXmlMetadata(isStringOrNothing('xmlMetadata', value));\n  }\n  _setXmlMetadata(value) {\n    this._xmlMetadata = value;\n  }\n\n  /**\n   * Gets the message's XML metadata section.\n   * @returns {?String} The XML metadata, if set.\n   */\n  getXmlMetadata() {\n    return this._xmlMetadata;\n  }\n\n  /**\n   * @private\n   */\n  get binaryMetadataChunk() {\n    return this._binaryMetaChunk || null;\n  }\n  /**\n   * @param {?String} meta The meta chunk to set\n   * @private\n   */\n  set binaryMetadataChunk(meta) {\n    this._binaryMetaChunk = meta;\n  }\n\n  /**\n   * @private\n   */\n  get smfHeader() {\n    return this._smfHeader;\n  }\n  /**\n   * @param {SMFHeader} val The SMF header to set\n   * @private\n   */\n  set smfHeader(val) {\n    this._smfHeader = val;\n  }\n\n  /**\n   * @private\n   */\n  get hasAutoSequenceNumber() {\n    return this._autoSequenceNumber || false;\n  }\n  /**\n   * @param {Boolean} value Value to set\n   * @private\n   */\n  set hasAutoSequenceNumber(value) {\n    this._autoSequenceNumber = value;\n  }\n\n  /**\n   * @private\n   */\n  get hasAutoSenderTimestamp() {\n    return this._autoSenderTimestamp || false;\n  }\n  /**\n   * @param {Number} value Value to set\n   * @private\n   */\n  set hasAutoSenderTimestamp(value) {\n    this._autoSenderTimestamp = value;\n  }\n\n  /**\n   * Gets the user property map carried in the message binary metadata.\n   *\n   * @returns {?solace.SDTMapContainer} The user properties map, if set.\n   */\n  getUserPropertyMap() {\n    return this._userPropertyMap;\n  }\n\n  /**\n   * Allows users to specify their own user properties to be carried\n   * in the message binary metadata separate from the payload.\n   * @param {?SDTMapContainer} value The user property map.\n   */\n  setUserPropertyMap(value) {\n    this._userPropertyMap = isInstanceOfOrNothing('userPropertyMap', value, SDTMapContainer);\n  }\n\n  /**\n   * Makes this message a strutured data message by assigning it a\n   * structured data type (SDT) container payload (such as a\n   * {@link solace.SDTMapContainer}, {@link solace.SDTStreamContainer}\n   * or a {@link solace.SDTFieldType.String}, which is transported in the binary attachment field.\n   *\n   * Assigning a SDT container updates the message's Type property to\n   * the appropriate value.\n   *\n   * The container argument must be a {@link solace.SDTField} with a type\n   * of {@link solace.SDTFieldType.MAP}, {@link solace.SDTFieldType.STREAM},\n   * or {@link solace.SDTFieldType.STRING}.\n   *\n   * @param {?solace.SDTField} container The SDTField container to send in this message.\n   */\n  setSdtContainer(container) {\n    const structuredContainer = isInstanceOfOrNothing('sdtContainer', container, SDTField);\n    if (structuredContainer === null || structuredContainer === undefined) {\n      // clear\n      this._structuredContainer = null;\n      this.setBinaryAttachment(null);\n      return;\n    }\n\n    this._setBinaryAttachment(null);\n    const sdtType = structuredContainer.getType();\n    switch (sdtType) {\n      case SDTFieldType.MAP:\n        this._messageType = MessageType.MAP;\n        break;\n      case SDTFieldType.STREAM:\n        this._messageType = MessageType.STREAM;\n        break;\n      case SDTFieldType.STRING:\n        this._messageType = MessageType.TEXT;\n        break;\n      default:\n        throw new OperationError('Invalid parameter: expected SDTField Type of ' +\n          'MAP, STREAM, or STRING.',\n          ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    this._structuredContainer = structuredContainer;\n  }\n\n  /**\n   * Gets the message's structured data container, if this is a structured data message.\n   *\n   * @returns {SDTField|null} A field with a payload of {String}, {@link SDTMapContainer},\n   * or {@link SDTStreamContainer} if one was set in the message; otherwise, null.\n   */\n  getSdtContainer() {\n    const msgType = this.getType();\n    const binaryAttachment = this._binaryAttachment;\n    const binaryAttachmentLength = binaryAttachment ? binaryAttachment.length : 0;\n\n    if (msgType === MessageType.BINARY) {\n      LOG_DEBUG(`getSdtContainer returned null, reason: msgType=${msgType}`);\n      return null;\n    }\n\n    // MAP, STREAM or TEXT\n    // Use cached structured container if available\n    if (typeof this._structuredContainer !== 'undefined') {\n      return this._structuredContainer;\n    }\n\n    if (binaryAttachmentLength === 0) {\n      LOG_DEBUG(`getSdtContainer returned null, reason: len=${binaryAttachmentLength}`);\n      this._structuredContainer = null;\n    } else {\n      // Last resort: Decode binary attachment.\n      // Cache structured container for later access\n      this._structuredContainer = SDTCodec.parseSingleElement(binaryAttachment, 0);\n    }\n\n\n    return this._structuredContainer;\n  }\n\n  /**\n   * Produces a human-readable dump of the message's properties and\n   * contents. Applications must not parse the output, as its format is\n   * not a defined part of the API and subject to change.\n   *\n   * <p>\n   * Output can be controlled by the <code>flags</code> parameter. The values are:\n   * <ul>\n   * <li>{@link MessageDumpFlag.MSGDUMP_BRIEF} Display only the length of the\n   *                          binary attachment, xml attachment, and user property map\n   * <li>{@link MessageDumpFlag.MSGDUMP_FULL} Display the entire message.\n   * </ul>\n   * </p>\n   *\n   * @param {Number} [flags]  Optional flags controlling the output, such as whether\n   *                          to include verbose (binary dump) information\n   * @returns {String} A string representation of the message.\n   */\n  dump(flags = MessageDumpFlag.MSGDUMP_FULL) {\n    const validFlags = isEnumMember('flags', flags, MessageDumpFlag);\n    return MessageDumpUtil.dump(this, validFlags);\n  }\n\n  /**\n   * Clones the message\n   * @returns {Message} A clone of this message\n   * @private\n   */\n  clone() {\n    return clone(this, MESSAGE_CLONE_OPTIONS);\n  }\n\n  /**\n   * Releases all memory associated with this message. All values are reinitialized\n   * to defaults. The message is no longer associated with any session or consumer.\n   */\n  reset() {\n    clearMessage(this);\n    initMessage(this);\n  }\n}\n\nmodule.exports.Message = Message;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Long } = require('solclient-convert');\nconst { Parameter } = require('solclient-validate');\nconst { ReplayStartLocation, ReplayStartType } = require('solclient-replaystart');\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\nconst RMID_VERSION_1_PREFIX = 'rmid1:';\n/* prefix length + 3 '-' + 16 bytes of hex (32) */\nconst RMID_LEN = RMID_VERSION_1_PREFIX.length + 3 + 16 * 2; // 41\n/* regex for testing if data component of the rmid string parsing is valid */\nconst validRmidHexRegex = /^[0-9a-fA-F]{32}$/g;\nconst INVALID_SUID = Long.UZERO;\n\nconst {\n  isString,\n  isValue,\n  isInstanceOf,\n} = Parameter;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n *  {@link solace.SolclientFactory.createReplicationGroupMessageId} or from\n *  {@link solace.Message.getReplicationGroupMessageId}</b>\n * <p>\n * ReplicationGroupMessageId specifies a Replication Group Message ID.\n * Can be used to specify a {@link solace.ReplayStartLocation} for the message after this id.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}.\n *\n * @extends solace.ReplayStartLocation\n * @memberof solace\n * @hideconstructor\n */\nclass ReplicationGroupMessageId extends ReplayStartLocation {\n  /**\n   *@param {Long} spoolerUniqueId spooler id component of rgmid\n   *@param {Long} effectiveMessageId message id component of rgmid\n   *@private\n   */\n  constructor(spoolerUniqueId, effectiveMessageId) {\n    super({\n      _replayStartValue: {\n        suid:      spoolerUniqueId,\n        messageId: effectiveMessageId,\n      },\n      _type: ReplayStartType.RGMID,\n    });\n    /**\n     * _suid {Long} spoolerUniqueId component of the replication group message id\n     *              this should be unique to the replaication group\n     * @private\n     */\n    this._suid = spoolerUniqueId;\n    /**\n     * _messageId {Long} effectiveMessageId component of the replication group message id\n     *              this should be unique to the message in the replication group\n     * @private\n     */\n    this._messageId = effectiveMessageId;\n  }\n  /**\n   * Compares with other ReplicationGroupMessageId\n   * @param {ReplicationGroupMessageId} otherReplicationGroupMessageId the other id to compare\n   * @returns {Number} 0 if the ReplicationGroupMessageId is equal to the other\n   *   ReplicationGroupMessageId.\n   *   < 0 if the ReplicationGroupMessageId is less than the other ReplicationGroupMessageId.\n   *   \\> 0 if the ReplicationGroupMessageId is greater than the other ReplicationGroupMessageId.\n   * @throws {solace.OperationError}\n   * * if the otherReplicationGroupMessageId is not a ReplicationGroupMessageId type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the otherReplicationGroupMessageId is not comparable as it is from different origins\n   *   and can not be compared.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_ID_NOT_COMPARABLE}.\n   */\n  compare(otherReplicationGroupMessageId) {\n    isInstanceOf('otherReplicationGroupMessageId', otherReplicationGroupMessageId, ReplicationGroupMessageId);\n    const oId = otherReplicationGroupMessageId;\n    if (!this._suid.equals(oId._suid)) {\n      const message = 'Unable to compare Replication Group Message ID from different origins';\n      throw new OperationError(`Parameter otherReplicationGroupMessageId[${oId.toString()\n        }] failed validation`,\n        ErrorSubcode.MESSAGE_ID_NOT_COMPARABLE, message);\n    }\n    if (this._messageId.gt(oId._messageId)) {\n      return 1;\n    } else if (this._messageId.lt(oId._messageId)) {\n      return -1;\n    }\n    return 0;\n  }\n  [util_inspect_custom]() {\n    return `[Replication Group Message Id: ${this.toString()}]`;\n  }\n  /**\n   * @override\n   * @description\n   * The ReplicationGroupMessageId toString() method returns a string that can later be passed to\n   * {@link solace.SolclientFactory.createReplicationGroupMessageId} to create a\n   * ReplicationGroupMessageId object.\n   * @returns {String} serialized string of the ReplicationGroupMessageId\n   */\n  toString() {\n    const idBuffer = BufferImpl.from(this._suid.toBytesBE().concat(this._messageId.toBytesBE()));\n    const hexString = idBuffer.toString('hex');\n    const sep = '-';\n    return `${RMID_VERSION_1_PREFIX}${hexString.substring(0, 5)}${sep\n    }${hexString.substring(5, 16)}${sep}${hexString.substring(16, 24)}${sep\n    }${hexString.substring(24, 32)}`;\n  }\n}\n\n/**\n * factory method for creating Replication Group Message Ids\n * @param {Object} spec object specification for building\n * @returns {ReplicationGroupMessageId} id instance for spec.\n * @private\n */\nfunction createReplicationGroupMessageId(spec) {\n  /* later this can be enhanced for other implementations of rgmids */\n  return new ReplicationGroupMessageId(spec.suid, spec.msgid);\n}\n\nfunction fromString(rgmidStr) {\n  /* check parameter type */\n  isString('id', rgmidStr);\n  /* validate rmid string to represent 128 bits of id data\n   * must be of format:\n   * rmid1:ttttt-rrrrrrrrrrr-mmmmmmmm-llllllll\n   *\n   * Where:\n   *\n   * * rmid1: This indicates it is a Replication Group Message ID (allows for some sanity\n   *    checking that the bytes to follow are in fact a Replication Group Message ID).\n   *    The '1' is a version to differentiate from a new type of Replication Group Message ID\n   *    that may be introduced later.\n   * * ttttt: Timestamp portion of SUID, 20 bits.\n   * * rrrrrrrrrrr: Random portion of SUID, 44 bits.\n   * * mmmmmmmm: Most significant 32-bits of ack message ID.\n   * * llllllll: Least significant 32-bits of ack message ID.\n   */\n  isValue('id', rgmidStr.length, RMID_LEN, ErrorSubcode.PARAMETER_OUT_OF_RANGE, `length expected: ${RMID_LEN} but is ${rgmidStr.length}`);\n  if (!rgmidStr.startsWith(RMID_VERSION_1_PREFIX)) {\n    /* raise invalid format error */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, does not start with ${RMID_VERSION_1_PREFIX}`);\n  }\n  const rmidBufs = rgmidStr.substring(RMID_VERSION_1_PREFIX.length).split('-');\n  if (rmidBufs.length !== 4 ||\n      rmidBufs[0].length !== 5 ||\n      rmidBufs[1].length !== 11 ||\n      rmidBufs[2].length !== 8 ||\n      rmidBufs[3].length !== 8) {\n    /* raise invalid format error */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, does not have valid separation of components`);\n  }\n  /* convert rmid data string (hex) to bytes\n   * note use Buffer to read hex string to bytes as Long.from(str, 16) uses inaccurate\n   *  calculation and loses precision, while Buffer.from(str, 'hex') does not.\n   * Browser BufferImpl is dependent on parseInt reading the string text 2 characters\n   *  at a time letting a hex string chuck of [0-9][notHex], eg '9G', is parsed as a\n   *  value 9 not NaN leading to a \"valid\" read. This means data integrity is lost\n   *  on browser buffer parsing of hex. An independent string check is required to avoid this.\n   */\n  /* valid rmid component concatenated are hex only string with 32 character length */\n  const rmidHex = rmidBufs.join('').trim();\n  /* validRmidHexRegex uses the global flag and must be reset to advance the global regex\n   * lastIndex.\n   * reset regex\n   */\n  validRmidHexRegex.test('');\n  if (!validRmidHexRegex.test(rmidHex)) {\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, invalid data string value`);\n  }\n  /* convert hex string to bytes */\n  let rmidBuffer;\n  try {\n    rmidBuffer = BufferImpl.from(rmidHex, 'hex');\n  } catch (ex) {\n    /* error parsing hex string into buffer */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, failed to read data, cause: ${ex.message}`);\n  }\n  /* validate read data len is expected for 128 bits of data */\n  const buflen = rmidBuffer ? rmidBuffer.length : 0;\n  if (buflen !== 16) {\n    /* error occured during read */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, failed to read data from id expected length of 16 got ${buflen}`);\n  }\n  /* extract components into long storage */\n  const suid = Long.fromBits(rmidBuffer.readUInt32BE(4), rmidBuffer.readUInt32BE(0), true);\n  if (suid.eq(INVALID_SUID)) {\n    /* invalid suid detected raise out of range parameter OperationError */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, has invalid origin`);\n  }\n  const msgid = Long.fromBits(rmidBuffer.readUInt32BE(12), rmidBuffer.readUInt32BE(8), true);\n  /* return created id object with Long values */\n  return createReplicationGroupMessageId({ suid, msgid });\n}\n\nconst RgmidFactory = {};\nRgmidFactory.fromString = fromString;\nRgmidFactory.from = createReplicationGroupMessageId;\nRgmidFactory.INVALID_SUID = INVALID_SUID;\n\nmodule.exports.ReplicationGroupMessageId = ReplicationGroupMessageId;\nmodule.exports.RgmidFactory = RgmidFactory;\n","const { AbstractQueueDescriptor } = require('./lib/abstract-queue-descriptor');\nconst { QueueAccessType } = require('./lib/queue-access-types');\nconst { QueueDescriptor } = require('./lib/queue-descriptor');\nconst { QueueDescriptorValidator } = require('./lib/queue-descriptor-validator');\nconst { QueueDiscardBehavior } = require('./lib/queue-discard-behaviors');\nconst { QueuePermissions } = require('./lib/queue-permissions');\nconst { QueueProperties } = require('./lib/queue-properties');\nconst { QueuePropertiesValidator } = require('./lib/queue-properties-validator');\nconst { QueueType } = require('./lib/queue-types');\n\nmodule.exports.AbstractQueueDescriptor = AbstractQueueDescriptor;\nmodule.exports.QueueAccessType = QueueAccessType;\nmodule.exports.QueueDescriptor = QueueDescriptor;\nmodule.exports.QueueDescriptorValidator = QueueDescriptorValidator;\nmodule.exports.QueueDiscardBehavior = QueueDiscardBehavior;\nmodule.exports.QueuePermissions = QueuePermissions;\nmodule.exports.QueueProperties = QueueProperties;\nmodule.exports.QueuePropertiesValidator = QueuePropertiesValidator;\nmodule.exports.QueueType = QueueType;\n","const { APIProperties } = require('solclient-util');\nconst { DestinationType } = require('solclient-destination');\nconst { OperationError, ErrorSubcode } = require('solclient-error');\nconst { QueueType } = require('./queue-types');\n\nconst DEFAULTS = {\n  durable: true,\n  type:    undefined,\n};\n\nconst TYPE_DESCRIPTION = {\n  [QueueType.QUEUE]:          'queue',\n  [QueueType.TOPIC_ENDPOINT]: 'topic endpoint',\n};\n\nconst DESINATION_TYPE_TO_DESCRIPTOR_TYPE = {\n  [DestinationType.TOPIC]:           null,\n  [DestinationType.QUEUE]:           QueueType.QUEUE,\n  [DestinationType.TEMPORARY_QUEUE]: QueueType.QUEUE,\n};\n\nfunction maybeAdaptFromDestination(spec) {\n  if (spec && spec.name && spec.type && DestinationType.values.includes(spec.type)) {\n    const targetType = DESINATION_TYPE_TO_DESCRIPTOR_TYPE[spec.type];\n    if (!targetType) {\n      throw new OperationError(`Cannot create a descriptor from a ${\n                               DestinationType.describe(spec.type)} destination`,\n                               ErrorSubcode.PARAMETER_CONFLICT);\n    }\n    return {\n      name:    spec.name,\n      type:    QueueType.QUEUE,\n      durable: spec.type !== DestinationType.TEMPORARY_QUEUE,\n    };\n  }\n  return spec;\n}\n\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * <p>\n * This is a base class for {@link solace.QueueDescriptor}. API users should access the\n * methods described here through a {@link solace.QueueDescriptor}.\n * @memberof solace\n * @hideconstructor\n */\nclass AbstractQueueDescriptor extends APIProperties {\n  /*\n   * @param {Object|solace.AbstractQueueDescriptor} queueSpec A specification for this descriptor.\n   * @param {solace.QueueType} queueSpec.type The type of queue for this specification.\n   * @param {Boolean} [queueSpec.durable=true] Whether this spec refers to a durable queue.\n   * @constructor\n   */\n  constructor(queueSpec) { // eslint-disable-line no-useless-constructor\n    super(DEFAULTS, maybeAdaptFromDestination(queueSpec));\n  }\n\n  /**\n   * Gets the queue type to which this descriptor refers.\n   * @returns {solace.QueueType} The queue type that this object describes\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * @type {solace.QueueType}\n   * @description The Queue Type.\n   */\n  get type() {\n    return this.getType();\n  }\n  set type(value) {\n    this._type = value;\n  }\n\n  /**\n   * Gets whether this descriptor refers to a durable queue.\n   *\n   * @returns {Boolean} `true` if this describes a durable queue\n   */\n  isDurable() { // eslint-disable-line class-methods-use-this\n    return this._durable;\n  }\n  /**\n   * @type {Boolean}\n   * @description True if this descriptor refers to a durable queue.\n   */\n  get durable() {\n    return this.isDurable();\n  }\n  set durable(value) {\n    this._durable = value;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'type':    this.type,\n      'durable': this.durable,\n    };\n  }\n\n  /**\n   * An informational summary of this object, subject to change.\n   * @returns {String} A summary of this object.\n   */\n  toString() {\n    return `${!this.isDurable() ? 'non' : ''}-durable ` +\n           `${TYPE_DESCRIPTION[this.getType()]}`;\n  }\n\n}\n\nmodule.exports.AbstractQueueDescriptor = AbstractQueueDescriptor;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents the possible endpoint access types. The corresponding endpoint property is\n * {@link solace.QueueProperties#accessType}.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueAccessType = {\n  /**\n   * @description An exclusive endpoint. The first client to bind\n   * receives the stored messages on the Endpoint.\n   * @type {String}\n   */\n  EXCLUSIVE:    'EXCLUSIVE',\n  /**\n   * @description A non-exclusive (shared) Queue. Each client to bind\n   * receives messages in a round robin fashion.\n   * @type {String}\n   */\n  NONEXCLUSIVE: 'NONEXCLUSIVE',\n};\n\nmodule.exports.QueueAccessType = Enum.new(QueueAccessType);\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { QueueDescriptor } = require('./queue-descriptor');\nconst { QueueType } = require('./queue-types');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valTopicString,\n} = APIPropertiesValidators;\n\n\nconst QueueDescriptorValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'QueueDescriptor', instance);\n    if (instance instanceof QueueDescriptor) {\n      v('name', [valTopicString]);\n    } // else is abstract; don't check name\n    v('type', [valIsMember, QueueType, 'QueueType']);\n    v('durable', [valBoolean]);\n  },\n};\n\nmodule.exports.QueueDescriptorValidator = QueueDescriptorValidator;\n","const { AbstractQueueDescriptor } = require('./abstract-queue-descriptor');\nconst { Destination } = require('solclient-destination');\n\nconst DEFAULTS = {\n  name:    undefined,\n  durable: true,\n};\n\n/**\n * This class identifies a queue or topic endpoint on the message router.\n *\n * Operations that make use of queue descriptors include\n *  * {@link solace.Session#createMessageConsumer}\n *  * {@link solace.Session#dteUnsubscribe}\n *\n * @classdesc QueueDescriptor\n * @extends {AbstractQueueDescriptor}\n * @memberof solace\n */\nclass QueueDescriptor extends AbstractQueueDescriptor {\n\n  /**\n   * Creates an instance of {@link solace.QueueDescriptor}.\n   *\n   * @param {Object|solace.QueueDescriptor} queueSpec A specification for this descriptor.\n   * @param {String} queueSpec.name The remote name to which this specification refers.\n   * @param {solace.QueueType} queueSpec.type The type of queue for this specification.\n   * @param {Boolean} [queueSpec.durable=true] `true` if this refers to a durable queue.\n   */\n  constructor(queueSpec) {\n    super(queueSpec instanceof Destination\n            ? { name: queueSpec.name, type: queueSpec.type } // synthesize durable later\n            : Object.assign({ }, DEFAULTS, queueSpec));\n  }\n\n  /**\n   * Gets/sets the remote name to which this descriptor refers.\n   * @returns {String} The name of the queue.\n   */\n  getName() {\n    return this._name;\n  }\n  get name() {\n    return this.getName();\n  }\n  set name(value) {\n    this._name = value;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'name':    this.name,\n      'type':    this.type,\n      'durable': this.durable,\n    };\n  }\n\n  /**\n   * An informational summary of this object, subject to change.\n   * @returns {String} A summary of this object.\n   */\n  toString() {\n    return `${super.toString()} '${this.getName()}'`;\n  }\n\n  /**\n   * @static\n   * @param {any} spec The descriptor spec\n   * @returns {QueueDescriptor|AbstractQueueDescriptor} A new descriptor for the spec\n   * @private\n   */\n  static createFromSpec(spec) {\n    if (spec.name) return new QueueDescriptor(spec);\n    return AbstractQueueDescriptor(spec);\n  }\n}\n\nmodule.exports.QueueDescriptor = QueueDescriptor;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumerates the behavior options when a message cannot be added to an endpoint\n * (for example, the maximum quota {@link solace.QueueProperties#quotaMB} was exceeded).\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueDiscardBehavior = {\n  /**\n   * @description Send the publisher a message reject notification.\n   * @type {String}\n   */\n  NOTIFY_SENDER_ON:  'NOTIFY_SENDER_ON',\n  /**\n   * @description Discard the message and acknowledge it.\n   * @type {String}\n   */\n  NOTIFY_SENDER_OFF: 'NOTIFY_SENDER_OFF',\n};\n\nmodule.exports.QueueDiscardBehavior = Enum.new(QueueDiscardBehavior);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents the permissions applicable to a queue.\n *\n * The corresponding endpoint property is\n * {@link solace.QueueProperties#permissions}.\n *\n * The access controls:\n *  * the permissions for all other users of the queue, this only applies to\n *  non-durable queues {@link solace.QueueProperties#permissions};\n *  * for the current Message Consumer  on a queue or endpoint,\n *    {@link solace.MessageConsumer.permissions}\n *\n * For example, creating a temporary topic endpoint with MODIFY_TOPIC will allow\n * other users to modify the topic subscribed to that endpoint.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueuePermissions = {\n  /**\n   * @description No client other than the queue's owner may access the endpoint.\n   */\n  NONE:         'NONE',\n  /**\n   * @description Client may read messages but not consume them.\n   * @type {String}\n   */\n  READ_ONLY:    'READ_ONLY',\n  /**\n   * @description  Client may read and consume messages.\n   * @type {String}\n   */\n  CONSUME:      'CONSUME',\n  /**\n   * @description Client may read and consume messages, and modify topic(s) associated with the\n   * queue.\n   * @type {String}\n   */\n  MODIFY_TOPIC: 'MODIFY_TOPIC',\n  /**\n   * @description Client may read and consume messages, modify topic(s) associated with the\n   * queue, and delete the queue.\n   * @type {String}\n   */\n  DELETE:       'DELETE',\n};\n\nmodule.exports.QueuePermissions = Enum.new(QueuePermissions);\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { QueueAccessType } = require('./queue-access-types');\nconst { QueueDiscardBehavior } = require('./queue-discard-behaviors');\nconst { QueuePermissions } = require('./queue-permissions');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valNumber,\n  valRange,\n} = APIPropertiesValidators;\n\n\nconst QueuePropertiesValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'QueueProperties', instance);\n    if (instance.permissions !== undefined && instance.permissions !== null) {\n      v('permissions', [valIsMember, QueuePermissions, 'QueuePermissions']);\n    }\n    if (instance.accessType !== undefined && instance.accessType !== null) {\n      v('accessType', [valIsMember, QueueAccessType, 'QueueAccessType']);\n    }\n    if (instance.quotaMB !== undefined && instance.quotaMB !== null) {\n      v('quotaMB', [valNumber], [valRange, 0, Number.POSITIVE_INFINITY]);\n    }\n    if (instance.maxMessageSize !== undefined && instance.maxMessageSize !== null) {\n      v('maxMessageSize', [valNumber], [valRange, 0, Number.POSITIVE_INFINITY]);\n    }\n    if (instance.respectsTTL !== undefined && instance.respectsTTL !== null) {\n      v('respectsTTL', [valBoolean]);\n    }\n    if (instance.discardBehavior !== undefined && instance.discardBehavior !== null) {\n      v('discardBehavior', [valIsMember, QueueDiscardBehavior, 'QueueDiscardBehavior']);\n    }\n    if (instance.maxMessageRedelivery !== undefined && instance.maxMessageRedelivery !== null) {\n      v('maxMessageRedelivery', [valNumber], [valRange, 0, 255]);\n    }\n  },\n};\n\nmodule.exports.QueuePropertiesValidator = QueuePropertiesValidator;\n","const { APIProperties } = require('solclient-util');\nconst { QueueAccessType } = require('./queue-access-types');\nconst { QueueDiscardBehavior } = require('./queue-discard-behaviors');\nconst { QueuePermissions } = require('./queue-permissions');\n\nconst DEFAULTS = {\n  permissions:          undefined,\n  accessType:           undefined,\n  quotaMB:              undefined,\n  maxMessageSize:       undefined,\n  respectsTTL:          undefined,\n  discardBehavior:      undefined,\n  maxMessageRedelivery: undefined,\n};\n\n/**\n * @classdesc\n * Represents a queue properties object. May be passed in to\n * {@link solace.Session#createMessageConsumer} when creating a\n * {@link solace.MessageConsumer} object.  Upon creation of a queue, undefined queue\n * properties are set to default values chosen by the router.\n *\n * @memberof solace\n */\nclass QueueProperties extends APIProperties {\n\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Gets/sets permissions for this queue.\n   *\n   * When creating a temporary queue, these are the permissions that apply\n   * to all other users; the user creating the temporary queue is always\n   * granted DELETE permissions.\n   *\n   * @type {solace.QueuePermissions}\n   * @default undefined\n   */\n  get permissions() {\n    return this._permissions;\n  }\n  set permissions(newValue) {\n    this._permissions = newValue;\n  }\n\n  /**\n   * Gets/sets the access type for this queue.\n   *\n   * This parameter must NOT be set when creating a temporary queue via\n   * {@link solace.Session#createMessageConsumer}. Such a queue has its\n   * access type determined by the remote message router.\n   *\n   * @type {solace.QueueAccessType}\n   * @default undefined\n   */\n  get accessType() {\n    return this._accessType || DEFAULTS.accessType;\n  }\n  set accessType(newValue) {\n    this._accessType = newValue;\n  }\n\n  /**\n   * Gets/sets the quota, in megabytes, for this queue.\n   *  * The allowed values are (0 <= quotaMB) || undefined.\n   *  * A value of 0 configures the queue to act as a Last-Value-Queue (LVQ), where the router\n   *    enforces a Queue depth of one, and only the most current message is spooled by the\n   *    queue. When a new message is received, the current queued message is first\n   *    automatically deleted from the queue, then the new message is spooled.\n   * @type {?Number}\n   * @default undefined\n   */\n  get quotaMB() {\n    return this._quotaMB;\n  }\n  set quotaMB(newValue) {\n    this._quotaMB = newValue;\n  }\n\n  /**\n   * Gets/sets the maximum message size, in bytes, for any single message spooled on this queue.\n   * @type {Number}\n   * @default undefined\n   */\n  get maxMessageSize() {\n    return this._maxMessageSize;\n  }\n  set maxMessageSize(newValue) {\n    this._maxMessageSize = newValue;\n  }\n\n  /**\n   * Gets/sets whether this queue respects Time To Live on messages.\n   * @type {Boolean}\n   * @default false\n   */\n  get respectsTTL() {\n    return this._respectsTTL;\n  }\n  set respectsTTL(newValue) {\n    this._respectsTTL = newValue;\n  }\n\n  /**\n   * Gets/sets the discard behavior for this queue.\n   * @type {solace.QueueDiscardBehavior}\n   * @default {solace.QueueDiscardBehavior.NOTIFY_SENDER_OFF}\n   */\n  get discardBehavior() {\n    return this._discardBehavior;\n  }\n  set discardBehavior(newValue) {\n    this._discardBehavior = newValue;\n  }\n\n  /**\n   * Gets/sets the maximum number of times to attempt message redelivery for this queue.\n   *  * The valid range is 0 <= maxMessageRedelivery <= 255\n   *  * A value of 0 means retry forever.\n   * @type {Number}\n   * @default undefined\n   */\n  get maxMessageRedelivery() {\n    return this._maxMessageRedelivery;\n  }\n  set maxMessageRedelivery(newValue) {\n    this._maxMessageRedelivery = newValue;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'permissions':     QueuePermissions.describe(this.permissions),\n      'accessType':      QueueAccessType.describe(this.accessType),\n      'quotaMB':         this.quotaMB,\n      'maxMessageSize':  this.maxMessageSize,\n      'respectsTTL':     this.respectsTTL,\n      'discardBehavior': this.discardBehavior\n                            ? QueueDiscardBehavior.describe(this.discardBehavior)\n                            : 'undefined',\n      'maxMessageRedelivery': this.maxMessageRedelivery,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.QueueProperties = QueueProperties;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Specifies the type of remote resource to which an\n * {@link solace.AbstractQueueDescriptor} refers.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueType = {\n  /**\n   * @description The queue descriptor refers to a queue endpoint.\n   * @type {String}\n   */\n  QUEUE:          'QUEUE',\n  /**\n   * @description The queue descriptor refers to a topic endpoint.\n   * @type {String}\n   */\n  TOPIC_ENDPOINT: 'TOPIC_ENDPOINT',\n};\n\nmodule.exports.QueueType = Enum.new(QueueType);\n","const { Parameter } = require('solclient-validate');\nconst { ReplayStartLocation, ReplayStartType } = require('./lib/replayStartLocation');\nconst { ReplayStartLocationBeginning } = require('./lib/replayStartLocationBeginning');\nconst { ReplayStartLocationDate } = require('./lib/replayStartLocationDate');\nconst { SolclientFactory } = require('solclient-factory');\n\n\nmodule.exports.ReplayStartLocation = ReplayStartLocation;\nmodule.exports.ReplayStartLocationBeginning = ReplayStartLocationBeginning;\nmodule.exports.ReplayStartLocationDate = ReplayStartLocationDate;\nmodule.exports.ReplayStartType = ReplayStartType;\n\n/**\n * Creates a ReplayStartLocation {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that all messages available\n * in the replay log should be retrieved.\n *\n *\n * @returns {solace.ReplayStartLocation} The newly created ReplayStartLocation\n * @method\n * @name solace.SolclientFactory.createReplayStartLocationBeginning\n */\nSolclientFactory.createReplayStartLocationBeginning = SolclientFactory.createFactory(() =>\n  new ReplayStartLocationBeginning()\n);\n/**\n * Creates a ReplayStartLocation {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that only messages spooled\n * in the replay log since the given Date should be retrieved.\n *\n * @param {Date} dateTime The Date object the represents the date and time of the replay\n * start location.  dateTime is always converted to UTC time if not already a UTC time.\n * @returns {solace.ReplayStartLocation} The newly created ReplayStartLocation\n * @method\n * @name solace.SolclientFactory.createReplayStartLocationDate\n */\nSolclientFactory.createReplayStartLocationDate = SolclientFactory.createFactory(dateTime =>\n  ReplayStartLocationDate.createReplayStartLocationDate(Parameter.isInstanceOf('date', dateTime, Date))\n);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration for smf replay start location value type\n *@private\n */\nconst ReplayStartType = Enum.new({\n  // the value of the Enum is the value of the smf type\n  BEGINNING: 0x00,\n  DATE:      0x01,\n  RGMID:     0x02,\n});\n\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from one of the following:</b>\n * * {@link solace.SolclientFactory.createReplayStartLocationBeginning}\n * * {@link solace.SolclientFactory.createReplayStartLocationDate}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n * The single member variable, _replayStartTime is undefined in ReplayStartLocationBeginning and\n * contains the elapsed time in milliseconds since the epoch in ReplayStartLocationDate\n *\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocation {\n  /**\n   * @constructor\n   * @param {SObject} spec The ReplayStartLocation spec\n   * Use the factory methods on {@link solace.SolclientFactory}.\n   * @private\n   */\n  constructor(spec) {\n    Object.assign(this, spec);\n    if (this._type === undefined) {\n      // use default replay start location type when not specified\n      this._type = ReplayStartType.BEGINNING;\n    }\n  }\n  /**\n   * @returns {String} A generic description of the Destination.\n   */\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.ReplayStartLocation = ReplayStartLocation;\nmodule.exports.ReplayStartType = ReplayStartType;\n","const { ReplayStartLocation, ReplayStartType } = require('./replayStartLocation');\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from the following:</b>\n *  * {@link solace.SolclientFactory.createReplayStartLocationBeginning}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n *\n * @extends {ReplayStartLocation}\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocationBeginning extends ReplayStartLocation {\n  /**\n   * @private\n   */\n  constructor() {\n    super({\n      _type: ReplayStartType.BEGINNING,\n    });\n  }\n  static [util_inspect_custom]() {\n    return 'BEGINNING';\n  }\n}\n\nmodule.exports.ReplayStartLocationBeginning = ReplayStartLocationBeginning;\n","const { ReplayStartLocation, ReplayStartType } = require('./replayStartLocation');\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from the following:</b>\n *  * {@link solace.SolclientFactory.createReplayStartLocationDate}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n *\n * @extends ReplayStartLocation\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocationDate extends ReplayStartLocation {\n  /**\n   * @param {Object} spec The topic spec\n   * @private\n   */\n  constructor(spec) {\n    super({\n      _replayStartValue: spec.getTime(),\n      _type:             ReplayStartType.DATE,\n    });\n  }\n  [util_inspect_custom]() {\n    return `[Epoch Time: ${this._replayStartValue}]`;\n  }\n  /**\n   * @static\n   * @param {Date} dateTime The Date for the replay start location\n   * @returns {ReplayStartLocation} the ReplayStartLocation\n   * @private\n   */\n  static createReplayStartLocationDate(dateTime) {\n    return new ReplayStartLocationDate(dateTime);\n  }\n}\n\nmodule.exports.ReplayStartLocationDate = ReplayStartLocationDate;\n","const { Codec } = require('./lib/codec');\nconst { SDTDestType } = require('./lib/sdt-destination-types');\nconst { SDTField } = require('./lib/sdt-field');\nconst { SDTFieldType } = require('./lib/sdt-field-types');\nconst { SDTMapContainer } = require('./lib/sdt-map-container');\nconst { SDTStreamContainer } = require('./lib/sdt-stream-container');\nconst { SDTUnsupportedValueError } = require('./lib/sdt-unsupported-value-error');\nconst { SDTValueErrorSubcode } = require('./lib/sdt-value-error-subcodes');\n\nmodule.exports.Codec = Codec;\nmodule.exports.SDTDestType = SDTDestType;\nmodule.exports.SDTField = SDTField;\nmodule.exports.SDTFieldType = SDTFieldType;\nmodule.exports.SDTMapContainer = SDTMapContainer;\nmodule.exports.SDTStreamContainer = SDTStreamContainer;\nmodule.exports.SDTUnsupportedValueError = SDTUnsupportedValueError;\nmodule.exports.SDTValueErrorSubcode = SDTValueErrorSubcode;\n","const { EncodeSingleElement } = require('./encode-single-element');\nconst { IEEE754LIB } = require('./ieee754lib');\nconst { ParseSingleElement, StringToBuffer } = require('./parse-single-element');\n\nconst { encodeSingleElement } = EncodeSingleElement;\nconst { parseSingleElement } = ParseSingleElement;\nconst { stringToBuffer } = StringToBuffer;\n\nconst Codec = {\n  encodeSingleElement,\n  parseSingleElement,\n  stringToBuffer,\n  IEEE754LIB,\n};\n\nmodule.exports.Codec = Codec;\n","const { Convert } = require('solclient-convert');\nconst { SDTDataTypes } = require('../sdt-data-types');\n\nconst EncodeHeader = {};\nEncodeHeader.encodeHeader = function encodeHeader(tag, valueLen) {\n  // Tag in first 6 bits, then (lenbytes-1) in 2 bits\n  let byte0 = (tag << 2) & 0xFF;\n  let strSdtLen = null;\n\n  if (tag === SDTDataTypes.Map || tag === SDTDataTypes.Stream) {\n    // force 4 bytes\n    strSdtLen = Convert.int32ToStr(valueLen + 5);\n    byte0 |= 3; // 4 length bytes\n  } else if (valueLen + 2 <= 255) {\n    strSdtLen = Convert.int8ToStr(valueLen + 2);\n    byte0 |= 0; // 1 length byte\n  } else if (valueLen + 3 <= 65535) {\n    strSdtLen = Convert.int16ToStr(valueLen + 3);\n    byte0 |= 1; // 2 length bytes\n  } else {\n    strSdtLen = Convert.int32ToStr(valueLen + 5);\n    byte0 |= 3; // 4 length bytes\n  }\n  const ret = Convert.int8ToStr(byte0) + strSdtLen;\n  return ret;\n};\n\nmodule.exports.EncodeHeader = EncodeHeader;\n","\nconst EncodeInteger = {};\n\nEncodeInteger.int48ToStr = function int48ToStr(vIn) {\n  let v = vIn;\n  const bytes = [];\n  for (let i = 0; i < 6; i++) {\n    const byteI = (v % 256);\n    v = Math.floor(v / 256);\n    bytes.push(String.fromCharCode(byteI));\n  }\n  bytes.reverse();\n  return bytes.join('');\n};\n\nmodule.exports.EncodeInteger = EncodeInteger;\n","const EncodeSingleElementLib = require('./encode-single-element');\nconst UtilLib = require('solclient-util');\nconst { EncodeHeader } = require('./encode-header');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTMapContainer } = require('../sdt-map-container');\n\nconst { encodeHeader } = EncodeHeader;\n\nconst EncodeMap = {\n  /**\n   * Encodes an SDT map.\n   * @param  {Object} sdtmap The map to parse\n   * @returns {String}        The map in binary string format\n   */\n  encodeMap(sdtmap) {\n    const buf = [];\n    if (!(sdtmap instanceof SDTMapContainer)) {\n      return null; // skip!\n    }\n    const keys = sdtmap.getKeys();\n    let sdtfield = null;\n    let strKeyField = null;\n    let strKeyName = null;\n    let i;\n    for (i = 0; i < keys.length; i++) {\n      sdtfield = sdtmap.getField(keys[i]);\n      if (sdtfield) {\n        // === KEY ===\n        strKeyName = UtilLib.StringUtils.nullTerminate(keys[i]);\n        strKeyField = encodeHeader(SDTDataTypes.String, strKeyName.length);\n        strKeyField += strKeyName;\n        buf.push(strKeyField);\n\n        // === VALUE ===\n        EncodeSingleElementLib.EncodeSingleElement.encodeSingleElementToBuf(sdtfield, buf);\n      }\n    } // end iter over keys\n    return buf.join('');\n  },\n};\n\nmodule.exports.EncodeMap = EncodeMap;\n","const DestinationLib = require('solclient-destination');\nconst { Convert } = require('solclient-convert');\nconst { EncodeHeader } = require('./encode-header');\nconst { EncodeInteger } = require('./encode-integer');\nconst { EncodeMap } = require('./encode-map');\nconst { EncodeStream } = require('./encode-stream');\nconst { IEEE754LIB } = require('./ieee754lib');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTDestType } = require('../sdt-destination-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { StringUtils } = require('solclient-util');\n\nconst { encodeHeader } = EncodeHeader;\nconst { int48ToStr } = EncodeInteger;\nconst { encodeMap } = EncodeMap;\nconst { encodeStream } = EncodeStream;\n\nconst { nullTerminate } = StringUtils;\n\nconst C_2_48 = Math.pow(2, 48);\n\n// UCS-2 --> UTF-8 conversion\nfunction strencode(data) {\n  return unescape(encodeURIComponent(data));\n}\n\n// Encode an SDTField into provided buffer buf\nfunction encodeSingleElementToBuf(sdtfield, buf) {\n  if (!(sdtfield instanceof SDTField)) {\n    return false;\n  }\n  // we write the header at the end, once we know the size\n  const value = sdtfield.getValue();\n  let fieldVal = null;\n  let tag = 0; // SMF TAG\n  switch (sdtfield.getType()) {\n    case SDTFieldType.BOOL:\n      tag = SDTDataTypes.Boolean;\n      fieldVal = Convert.int8ToStr(value ? 1 : 0);\n      break;\n    case SDTFieldType.UINT8:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int8ToStr(value);\n      break;\n    case SDTFieldType.INT8:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int8ToStr(value);\n      break;\n    case SDTFieldType.UINT16:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int16ToStr(value);\n      break;\n    case SDTFieldType.INT16:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int16ToStr(value);\n      break;\n    case SDTFieldType.UINT32:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int32ToStr(value);\n      break;\n    case SDTFieldType.INT32:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int32ToStr(value);\n      break;\n    case SDTFieldType.UINT64:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = String.fromCharCode(0) + String.fromCharCode(0) + int48ToStr(value);\n      break;\n    case SDTFieldType.INT64:\n      tag = SDTDataTypes.Integer;\n      if (value >= 0) {\n        fieldVal = String.fromCharCode(0) + String.fromCharCode(0) + int48ToStr(value);\n      } else {\n        fieldVal = (String.fromCharCode(0xFF) +\n                    String.fromCharCode(0xFF) +\n                    int48ToStr(C_2_48 + value));\n      }\n      break;\n    case SDTFieldType.WCHAR:\n      tag = SDTDataTypes.Char;\n      fieldVal = Convert.int16ToStr(value.charCodeAt(0));\n      break;\n    case SDTFieldType.STRING:\n      tag = SDTDataTypes.String;\n      fieldVal = nullTerminate(strencode(value));\n      break;\n    case SDTFieldType.BYTEARRAY:\n      tag = SDTDataTypes.ByteArray;\n      fieldVal = value.toString('latin1');\n      break;\n    case SDTFieldType.FLOATTYPE:\n      tag = SDTDataTypes.Float;\n      fieldVal = IEEE754LIB.toIEEE754Single(value);\n      break;\n    case SDTFieldType.DOUBLETYPE:\n      tag = SDTDataTypes.Float;\n      fieldVal = IEEE754LIB.toIEEE754Double(value);\n      break;\n    case SDTFieldType.MAP:\n      tag = SDTDataTypes.Map;\n      fieldVal = encodeMap(value);\n      break;\n    case SDTFieldType.STREAM:\n      tag = SDTDataTypes.Stream;\n      fieldVal = encodeStream(value);\n      break;\n    case SDTFieldType.DESTINATION:\n      tag = SDTDataTypes.Destination;\n      if (value instanceof DestinationLib.Destination) {\n        fieldVal = Convert.int8ToStr(SDTDestType[value.getType()])\n          + value.getBytes();\n      }\n      break;\n    case SDTFieldType.NULLTYPE:\n      tag = SDTDataTypes.Null;\n      fieldVal = '';\n      break;\n    case SDTFieldType.UNKNOWN:\n      fieldVal = null;\n      break;\n    default:\n  }\n  if (fieldVal !== null) {\n    const hdr = encodeHeader(tag, fieldVal.length);\n    buf.push(hdr);\n    buf.push(fieldVal);\n    return true;\n  }\n\n  return false;\n}\n\nfunction encodeSingleElement(sdtfield) {\n  const buf = [];\n  encodeSingleElementToBuf(sdtfield, buf);\n  return buf.join('');\n}\n\nconst EncodeSingleElement = {\n  encodeSingleElement,\n  encodeSingleElementToBuf,\n};\n\nmodule.exports.EncodeSingleElement = EncodeSingleElement;\n","const EncodeSingleElementLib = require('./encode-single-element');\nconst { SDTStreamContainer } = require('../sdt-stream-container');\n\nconst EncodeStream = {};\nEncodeStream.encodeStream = function encodeStream(sdtstream) {\n  const buf = [];\n  if (!(sdtstream instanceof SDTStreamContainer)) {\n    return null; // skip!\n  }\n  let sdtfield = null;\n  while (sdtstream.hasNext()) {\n    sdtfield = sdtstream.getNext();\n    if (sdtfield) {\n      EncodeSingleElementLib.EncodeSingleElement.encodeSingleElementToBuf(sdtfield, buf);\n    }\n  } // end iter over stream entries\n  return buf.join('');\n};\n\nmodule.exports.EncodeStream = EncodeStream;\n","const IEEE754LIB = {\n  /**\n   * @preserve\n   * The MIT License\n   *\n   * Copyright (c) 2010 Alan Gutierrez\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\n   * of this software and associated documentation files (the \"Software\"), to deal\n   * in the Software without restriction, including without limitation the rights\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall be included in\n   * all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   * THE SOFTWARE.\n   */\n\n  toIEEE754(vIn, ebits, fbits) {\n    let v = vIn;\n    const bias = (1 << (ebits - 1)) - 1;\n\n    // Compute sign, exponent, fraction\n    let s;\n    let e;\n    let f;\n    if (isNaN(v)) {\n      e = (1 << bias) - 1;\n      f = 1;\n      s = 0;\n    } else if (v === Infinity || v === -Infinity) {\n      e = (1 << bias) - 1;\n      f = 0;\n      s = (v < 0) ? 1 : 0;\n    } else if (v === 0) {\n      e = 0;\n      f = 0;\n      s = (1 / v === -Infinity) ? 1 : 0;\n    } else {\n      s = v < 0;\n      v = Math.abs(v);\n\n      if (v >= Math.pow(2, 1 - bias)) {\n        const ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n        e = ln + bias;\n        f = (v * Math.pow(2, fbits - ln)) - Math.pow(2, fbits);\n      } else {\n        e = 0;\n        f = v / Math.pow(2, 1 - bias - fbits);\n      }\n    }\n\n    // Pack sign, exponent, fraction\n    const bits = [];\n    for (let i = fbits; i; i -= 1) {\n      bits.push(f % 2 ? 1 : 0);\n      f = Math.floor(f / 2);\n    }\n    for (let i = ebits; i; i -= 1) {\n      bits.push(e % 2 ? 1 : 0);\n      e = Math.floor(e / 2);\n    }\n    bits.push(s ? 1 : 0);\n    bits.reverse();\n    let str = bits.join('');\n\n    // Bits to bytes\n    const bytes = [];\n    while (str.length) {\n      bytes.push(parseInt(str.substring(0, 8), 2));\n      str = str.substring(8);\n    }\n    return bytes;\n  },\n\n  fromIEEE754(bytes, ebits, fbits) {\n    // Bytes to bits\n    const bits = [];\n    for (let i = bytes.length; i; i -= 1) {\n      let byteI = bytes[i - 1];\n      for (let j = 8; j; j -= 1) {\n        bits.push(byteI % 2 ? 1 : 0);\n        byteI >>= 1;\n      }\n    }\n    bits.reverse();\n    const str = bits.join('');\n\n    // Unpack sign, exponent, fraction\n    const bias = (1 << (ebits - 1)) - 1;\n    const s = parseInt(str.substring(0, 1), 2) ? -1 : 1;\n    const e = parseInt(str.substring(1, 1 + ebits), 2);\n    const f = parseInt(str.substring(1 + ebits), 2);\n\n    // Produce number\n    if (e === (1 << ebits) - 1) {\n      return f !== 0 ? NaN : s * Infinity;\n    }\n    if (e > 0) {\n      return s * Math.pow(2, e - bias) * (1 + f / Math.pow(2, fbits));\n    }\n    if (f !== 0) {\n      return s * Math.pow(2, -(bias - 1)) * (f / Math.pow(2, fbits));\n    }\n    return 0;\n  },\n  strToByteArr(str) {\n    const bytes = [];\n    for (let i = 0; i < str.length; i++) { bytes.push(str.charCodeAt(i) & 0xFF); }\n    return bytes;\n  },\n  byteArrToStr(bytes) {\n    const str = [];\n    for (let i = 0; i < bytes.length; i++) { str.push(String.fromCharCode(bytes[i] & 0xFF)); }\n    return str.join('');\n  },\n  fromIEEE754Double(b) { return this.fromIEEE754(this.strToByteArr(b), 11, 52); },\n  toIEEE754Double(v) { return this.byteArrToStr(this.toIEEE754(v, 11, 52)); },\n  fromIEEE754Single(b) { return this.fromIEEE754(this.strToByteArr(b), 8, 23); },\n  toIEEE754Single(v) { return this.byteArrToStr(this.toIEEE754(v, 8, 23)); },\n};\n\nmodule.exports.IEEE754LIB = IEEE754LIB;\n","const { DestinationFromNetwork, DestinationType, Queue } = require('solclient-destination');\nconst { LOG_DEBUG, LOG_INFO } = require('solclient-log');\nconst { SDTDestType } = require('../sdt-destination-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { Topic } = require('solclient-destination');\n\nconst ParseDestination = {};\nParseDestination.parseDestination = function parseDestination(dataBuf, pos, len) {\n  const destType = dataBuf.readUInt8(pos);\n  const destBytes = dataBuf.toString('latin1', pos + 1, pos + len);\n  // first try to create a destination from the string, this handles strings with\n  // the preamble ('#P2P/QUE' or '#P2P/TQUE').\n  let destination = DestinationFromNetwork.createDestinationFromBytes(destBytes);\n  if (SDTDestType[destination.type] !== destType) {\n    // SDT destination type does not match the string format. This means either:\n    //    * that the string contains a queue preamble and the type is topic,\n    //      so just make it a topic\n    //    * that the type is queue and the string does not have the preamble, which means we\n    //      should construct a queue.\n    if (SDTDestType[DestinationType.QUEUE] === destType) {\n      destination = Queue.createFromLocalName(destBytes); //createFromLocal has issue with buffer\n    } else if (SDTDestType[DestinationType.TOPIC] === destType) {\n      LOG_DEBUG(`Found and allowed SDT field with  destination type ${destType} when decoding ${destBytes} to ${destination.type}`);\n      //\n      // override the format and set destType as specified in the SMF (i.e. TOPIC)\n      destination = new Topic(destBytes);\n    } else {\n      LOG_INFO(`Drop SDT field with invalid destination type ${destType} when decoding ${destBytes} to ${destination.type}`);\n      return null;\n    }\n  }\n  return SDTField.create(SDTFieldType.DESTINATION, destination);\n};\n\nmodule.exports.ParseDestination = ParseDestination;\n","const { ParseInteger } = require('./parse-integer');\n\nconst { autoDecodeVarLengthNumber } = ParseInteger;\n\nconst ParseFieldHeader = {};\n// Parse the header part of an SDT field.\n// Returns [TYPE, DECLARED_LENGTH, VALUE_DATA_LENGTH, CONSUMED_BYTES]\nParseFieldHeader.parseFieldHeader = function parseFieldHeader(dataBuf, offset) {\n  let pos = offset;\n  const onebyte = dataBuf.readUInt8(pos);\n  const elemType = (onebyte & 0xFC) >> 2;\n  const lenBytes = (onebyte & 0x03) + 1;\n  pos++;\n  const elemLen = autoDecodeVarLengthNumber(dataBuf, pos, lenBytes);\n  pos += lenBytes;\n  const elemValLen = elemLen - (1 + lenBytes);\n  return [elemType, elemLen, elemValLen, pos - offset];\n};\n\nmodule.exports.ParseFieldHeader = ParseFieldHeader;\n","const { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\n\nconst ParseFloat = {};\nParseFloat.parseFloatField = function parseFloatField(buf, pos, len) {\n  switch (len) {\n    case 4:\n      return SDTField.create(SDTFieldType.FLOATTYPE, buf.readFloatBE(pos));\n    case 8:\n      return SDTField.create(SDTFieldType.DOUBLETYPE, buf.readDoubleBE(pos));\n    default:\n      return SDTField.create(SDTFieldType.UNKNOWN, buf.toString('latin1', pos, pos + len));\n  }\n};\n\nmodule.exports.ParseFloat = ParseFloat;\n","const Long = require('long');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTUnsupportedValueError } = require('../sdt-unsupported-value-error');\nconst { SDTValueErrorSubcode } = require('../sdt-value-error-subcodes');\n\nconst { create: createField } = SDTField;\n\nconst ParseInteger = {};\n\n// Util: decode 1, 2, 3, 4 byte UINT.\nParseInteger.autoDecodeVarLengthNumber = function autoDecodeVarLengthNumber(dataBuf, pos, len) {\n  if ([1, 2, 3, 4].includes(len)) {\n    return dataBuf.readUIntBE(pos, len);\n  }\n  return false;\n};\n\n// Parse an integer SDT Field: [U]INT 8, 16, 32, 64.\nParseInteger.parseIntegerField = function parseIntegerField(isSigned, dataBuf, pos, len) {\n  let val = 0;\n\n  switch (len) {\n    case 1:\n      if (isSigned) {\n        val = dataBuf.readInt8(pos);\n        return createField(SDTFieldType.INT8, val);\n      } // else unsigned:\n      val = dataBuf.readUInt8(pos);\n      return createField(SDTFieldType.UINT8, val);\n\n    case 2:\n      if (isSigned) {\n        val = dataBuf.readInt16BE(pos);\n        return createField(SDTFieldType.INT16, val);\n      } // else signed:\n      val = dataBuf.readUInt16BE(pos);\n      return createField(SDTFieldType.UINT16, val);\n\n    case 4:\n      if (isSigned) {\n        val = dataBuf.readInt32BE(pos);\n        return createField(SDTFieldType.INT32, val);\n      } // else signed:\n      val = dataBuf.readUInt32BE(pos);\n      return createField(SDTFieldType.UINT32, val);\n\n    case 8:\n      {\n        let error = null;\n        const longValue =\n          Long.fromBits(dataBuf.readUInt32BE(pos + 4), dataBuf.readUInt32BE(pos), !isSigned);\n        if (longValue.getNumBitsAbs() > 48) {\n          error = new SDTUnsupportedValueError('Value is not supported',\n            SDTValueErrorSubcode.VALUE_OUTSIDE_SUPPORTED_RANGE,\n            dataBuf.toString('latin1', pos, len));\n        }\n        val = longValue.toNumber();\n        const field = createField(isSigned ? SDTFieldType.INT64 : SDTFieldType.UINT64, val);\n        if (error) {\n          field.setError(error);\n        }\n\n        return field;\n      }\n\n    default:\n      return null;\n  }\n};\n\nmodule.exports.ParseInteger = ParseInteger;\n","const ParseSingleElementLib = require('./parse-single-element');\nconst { LOG_ERROR } = require('solclient-log');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTMapContainer } = require('../sdt-map-container');\n\nconst ParseMap = {};\nParseMap.parseMapAt = function parseMapAt(dataBuf, offset, datalen) {\n  const mapObj = new SDTMapContainer();\n  let pos = offset;\n  while (pos < offset + datalen) {\n    // === key field ===\n    const keyFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    pos += keyFieldHeader[3]; // consumed bytes\n    // pos now points to start of string\n    if (keyFieldHeader[0] !== SDTDataTypes.String) {\n      // Fail!\n      LOG_ERROR(\"Error parsing SDTMAP, expected to find a string field as map key, and didn't\");\n      LOG_ERROR(`Type of key: ${keyFieldHeader[0]}`);\n      return SDTField.create(SDTFieldType.MAP, null);\n    }\n    const keyString = dataBuf.toString('latin1', pos, pos + keyFieldHeader[2] - 1);\n    pos += keyFieldHeader[2];\n\n    // === value field ===\n    // pos now points to start of next value\n    const valueFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    const valueField = ParseSingleElementLib.ParseSingleElement.parseSingleElement(dataBuf, pos);\n    pos += valueFieldHeader[1]; // declared field length\n    if (valueField) {\n      mapObj.addField(keyString, valueField);\n    }\n  }\n  return SDTField.create(SDTFieldType.MAP, mapObj);\n};\n\nmodule.exports.ParseMap = ParseMap;\n","const { Convert } = require('solclient-convert');\nconst { LOG_DEBUG } = require('solclient-log');\nconst { ParseDestination } = require('./parse-destination');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { ParseFloat } = require('./parse-float');\nconst { ParseInteger } = require('./parse-integer');\nconst { ParseMap } = require('./parse-map');\nconst { ParseStream } = require('./parse-stream');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\n\nconst {\n  utf8ToUcs2,\n} = Convert;\nconst { parseFieldHeader } = ParseFieldHeader;\nconst { parseFloatField } = ParseFloat;\nconst { parseIntegerField } = ParseInteger;\nconst { parseMapAt } = ParseMap;\nconst { parseStreamAt } = ParseStream;\nconst { parseDestination } = ParseDestination;\n\nconst ParseSingleElement = {\n  // Parse single SDT element, returns SDTField\n  parseSingleElement(dataBuf, offset) {\n    const fieldHeader = parseFieldHeader(dataBuf, offset);\n    if (!fieldHeader) {\n      LOG_DEBUG(`parseSingleElement return false, fieldHeader=${fieldHeader}`);\n      return null;\n    }\n\n    const pos = offset + fieldHeader[3];\n\n    // For use inside switch\n    const elemValLen = fieldHeader[2];\n\n    switch (fieldHeader[0]) {\n      case SDTDataTypes.Null:\n        return SDTField.create(SDTFieldType.NULLTYPE, null);\n      case SDTDataTypes.Boolean:\n        return SDTField.create(SDTFieldType.BOOL, dataBuf.readUInt8(pos) !== 0);\n      case SDTDataTypes.Integer:\n        return parseIntegerField(true, dataBuf, pos, elemValLen);\n      case SDTDataTypes.UnsignedInteger:\n        return parseIntegerField(false, dataBuf, pos, elemValLen);\n      case SDTDataTypes.Float:\n        return parseFloatField(dataBuf, pos, elemValLen);\n      case SDTDataTypes.Char:\n        return SDTField.create(SDTFieldType.WCHAR,\n                               String.fromCharCode(dataBuf.readUInt16BE(pos)));\n      case SDTDataTypes.ByteArray:\n        return SDTField.create(SDTFieldType.BYTEARRAY,\n                               dataBuf.slice(pos, pos + elemValLen));\n      case SDTDataTypes.String:\n        // strip last byte (null-terminator)\n        return SDTField.create(SDTFieldType.STRING,\n                               utf8ToUcs2(dataBuf.toString('latin1', pos, pos + elemValLen - 1)));\n      case SDTDataTypes.Destination:\n        return parseDestination(dataBuf, pos, elemValLen);\n      case SDTDataTypes.SMFMessage:\n        return SDTField.create(SDTFieldType.SMF_MESSAGE, dataBuf.slice(pos, pos + elemValLen));\n      case SDTDataTypes.Map:\n        return parseMapAt(dataBuf, pos, elemValLen);\n      case SDTDataTypes.Stream:\n        return parseStreamAt(dataBuf, pos, elemValLen);\n      default:\n        // removed toString conversion as a test\n        return SDTField.create(SDTFieldType.UNKNOWN,\n                               dataBuf.toString('latin1', pos, pos + elemValLen));\n    }\n  },\n};\n\nconst StringToBuffer = {\n  stringToBuffer(str) {\n    const BufferImpl = require('buffer').Buffer;\n    return BufferImpl.from(str, 'latin1');\n  },\n};\n\nmodule.exports.ParseSingleElement = ParseSingleElement;\nmodule.exports.StringToBuffer = StringToBuffer;\n","const ParseSingleElementLib = require('./parse-single-element');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTStreamContainer } = require('../sdt-stream-container');\n\nconst ParseStream = {};\nParseStream.parseStreamAt = function parseStreamAt(dataBuf, offset, datalen) {\n  const streamObj = new SDTStreamContainer();\n  let pos = offset;\n  while (pos < offset + datalen) {\n    const valueFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    const valueField = ParseSingleElementLib.ParseSingleElement.parseSingleElement(dataBuf, pos);\n    pos += valueFieldHeader[1]; // declared field length\n    if (valueField) {\n      streamObj.addField(valueField);\n    }\n  }\n  return SDTField.create(SDTFieldType.STREAM, streamObj);\n};\n\nmodule.exports.ParseStream = ParseStream;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SDTDataTypes = {\n  Null:            0x00,\n  Boolean:         0x01,\n  Integer:         0x02,\n  UnsignedInteger: 0x03,\n  Float:           0x04,\n  Char:            0x05,\n  ByteArray:       0x06,\n  String:          0x07,\n  Destination:     0x08,\n  SMFMessage:      0x09,\n  Map:             0x0A,\n  Stream:          0x0B,\n};\n\nmodule.exports.SDTDataTypes = Enum.new(SDTDataTypes);\n","const { DestinationType } = require('solclient-destination');\nconst { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of all SDT data types.\n * @enum {number}\n * @namespace\n * @memberof solace\n * @private\n */\nconst SDTDestType = {\n  [DestinationType.TOPIC]:           0x00,\n  [DestinationType.QUEUE]:           0x01,\n  [DestinationType.TEMPORARY_QUEUE]: 0x01,\n};\n\nmodule.exports.SDTDestType = Enum.new(SDTDestType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of all SDT data types.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SDTFieldType = {\n  /**\n   * @type {Number}\n   * @description Maps to a boolean.\n   */\n  BOOL:        0,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT8:       1,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  INT8:        2,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT16:      3,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  INT16:       4,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT32:      5,\n  /**\n   *@type {Number}\n   * @description Maps to a number.\n   */\n  INT32:       6,\n  /**\n   * @type {Number}\n   * @description Maps to a number. <br>\n   * <strong>Warning:</strong> Supports 48-bit integers (range: 0 to 2<sup>48</sup>-1).\n   * When decoding, only the lower 48 bits are considered significant.\n   */\n  UINT64:      7,\n  /**\n   * @type {Number}\n   * @description Maps to a number. <br>\n   * <strong>Warning:</strong> Supports 48-bit integers + sign (range: -(2<sup>48</sup>-1) to\n   * 2<sup>48</sup>-1). When decoding, only the lower 48 bits are considered significant.\n   */\n  INT64:       8,\n  /**\n   * @type {Number}\n   * @description A single character; maps to a string.\n   */\n  WCHAR:       9,\n  /**\n   * @type {Number}\n   * @description Maps to a string.\n   */\n  STRING:      10,\n  /**\n   * @type {Number}\n   * @description Maps to a Uint8Array.\n   *\n   * Backward compatibility note:\n   * Using the version_10 factory profile or older, the getValue() method of a BYTEARRAY sdtField\n   * returns the byte array in 'latin1' String representation.\n   * Later profiles return a Uint8Array (in the form of a nodeJS Buffer instance in fact)\n   *\n   * When creating a field of type BYTEARRAY, the following datatypes are all accepted as value:\n   *   Buffer (the nodeJS native type or equivalent)\n   *   ArrayBuffer,\n   *   Any DataView or TypedArray,\n   *   'latin1' String for backwards compatibility:\n   *     each character has a code in the range 0-255\n   *     representing exactly one byte in the attachment.\n   */\n  BYTEARRAY:   11,\n  /**\n   * @type {Number}\n   * @description Single-precision float; maps to a number.\n   */\n  FLOATTYPE:   12,\n  /**\n   * @type {Number}\n   * @description Double-precision float; maps to a number.\n   */\n  DOUBLETYPE:  13,\n  /**\n   * @type {Number}\n   * @description Maps to {@link SDTMapContainer}.\n   */\n  MAP:         14,\n  /**\n   * @type {Number}\n   * @description Maps to {@link SDTStreamContainer}.\n   */\n  STREAM:      15,\n  /**\n   * @type {Number}\n   * @description Maps to {@link Destination}.\n   */\n  DESTINATION: 16,\n  /**\n   * @type {Number}\n   * @description Maps to <code>null</code>.\n   */\n  NULLTYPE:    17,\n  /**\n   * @type {Number}\n   * @description Maps to an unknown type.\n   */\n  UNKNOWN:     18,\n  /**\n   * @type {Number}\n   * @description Maps to an encoded SMF message.\n   */\n  SMF_MESSAGE: 19,\n};\n\nmodule.exports.SDTFieldType = Enum.new(SDTFieldType);\n","const SolclientFactoryLib = require('solclient-factory');\nconst { Convert } = require('solclient-convert');\nconst { SDTFieldType } = require('./sdt-field-types');\nconst { validateSdtField } = require('./validate-sdt-field');\n\nconst { anythingToBuffer } = Convert;\nconst { ProfileBinding } = SolclientFactoryLib;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a SDT (Structured Data Type) field. To create an instance of an <code>SDTField</code>,\n * call {@link solace.SDTField.create}.\n *\n * SDTField objects are used in Solace Containers ({@link solace.SDTMapContainer}\n * and {@link solace.SDTStreamContainer}). The <b>deprecated</b> usage of\n * {@link solace.SDTMapContainer#addField} and {@link solace.SDTStreamContainer#addField}\n * take a SDTField object as an argument. The preferred usage is to pass a\n * {@link solace.SDTFieldType} and value as arguments.\n *\n * SDTField objectts must be used as an argument to {@link solace.Message#setSdtContainer}.\n * The only valid SDTField objects for {@link solace.Message#setSdtContainer} are:\n * * {@link solace.SDTFieldType.STREAM}\n * * {@link solace.SDTFieldType.MAP}\n * * {@link solace.SDTFieldType.STRING}\n * @hideconstructor\n * @memberof solace\n */\nclass SDTField {\n\n  /*\n   * @constructor\n   * @param {SDTFieldType} [type=SDTFieldType.NULLTYPE] The field type to construct\n   * @param {*} value The value to be encapsulated\n   * @throws {solace.OperationError} if value does not match type\n   * @private\n   */\n  constructor(type = SDTFieldType.NULLTYPE, value = null) {\n    const err = validateSdtField(type, value);\n    if (err !== null) {\n      throw (err);\n    }\n    this._type = type;\n    if (type === SDTFieldType.BYTEARRAY) {\n      this._value = anythingToBuffer(value);\n    } else {\n      this._value = value;\n    }\n    this._error = undefined;\n  }\n\n  /**\n   * Gets the type of field represented.\n   * @returns {solace.SDTFieldType} The type of field represented.\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * Gets the field value.\n   * @returns {*} Field value (as one of the supported data types).\n   * @throws {solace.SDTUnsupportedValueError} if value found in the field\n   * is not in range supported by the platform/runtime.\n   */\n  getValue() {\n    if (this._error !== undefined) {\n      throw (this._error);\n    }\n    return this.getValueNoThrow();\n  }\n\n  /**\n   * Gets the field value or error object.\n   * @returns {*} Field value (as one of the supported data types) or\n   * {solace.SDTUnsupportedValueError} if value found in the field\n   * is not in range supported by the platform/runtime.\n   * @private\n   */\n  getValueNoThrow() {\n    if (this._error !== undefined) {\n      return this._error;\n    }\n    if (this._type === SDTFieldType.BYTEARRAY && ProfileBinding.value.byteArrayAsString) {\n      return this._value.toString('latin1');\n    }\n    return this._value;\n  }\n\n  /**\n   * Sets an error on the object to be thrown on getValue().\n   * Used only by parse-integer, as it is possible to receive\n   * 64 bit integers that cannot be represented in a javaScript number.\n   * JavaScript numbers are floats and can only hold a 48 bit integer.\n   * @private\n   * @param {solace.SDTUnsupportedValueError} err error object.\n   */\n  setError(err) {\n    this._error = err;\n  }\n\n  toString() {\n    return `[SDTField type:${this._type} value:${this._value}]`;\n  }\n\n  /**\n   * Create a new SDTField instance representing a Value of a given Type.\n   *\n   * @param {solace.SDTFieldType} type The type of field represented.\n   * @param {*} value The corresponding value to store in the field.\n   * @returns {solace.SDTField} The new SDT field with the given type and value\n   * @throws {solace.OperationError} if value does not match type\n   * @static\n   */\n  static create(type, value) {\n    return new SDTField(type, value);\n  }\n\n}\n\nmodule.exports.SDTField = SDTField;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { SDTField } = require('./sdt-field');\n\n/**\n * @classdesc\n * Defines a Structured Data Type (SDT) map container.\n * @memberof solace\n */\nclass SDTMapContainer {\n  /**\n   * @constructor\n   */\n  constructor() {\n    this._map = []; // key-value mappings (keys are strings)\n  }\n\n  /**\n   * Get the list of keys in this map, in unspecified order.\n   * @returns {Array.<String>} Array of defined keys in the map.\n   */\n  getKeys() {\n    return Object.keys(this._map);\n  }\n\n  /**\n   * Return the SDTField with the given key.\n   * @param {String} key The key to look up.\n   * @returns {solace.SDTField} The field referenced by key.\n   */\n  getField(key) {\n    return this._map[key];\n  }\n\n  /**\n   * Delete an SDTField with the given key.\n   * @param {String} key The field key to delete.\n   */\n  deleteField(key) {\n    delete this._map[key];\n  }\n\n  /**\n   * Adds a field to this map. If a key:value mapping already exists for this key, it is replaced.\n   * <p>\n   * @deprecated If <code>typeOrField</code> is a {@link solace.SDTField} instance,\n   * it is added to the map.\n   *\n   * The preferred usage is to pass a {@link solace.SDTFieldType}, then the API will create a\n   * SDTField of this type using <code>value</code> before adding it to the map.\n   *\n   * @param {String} key The key by which to store the given value.\n   * @param {solace.SDTField|solace.SDTFieldType} typeOrField A SDTField instance or SDTFieldType.\n   * @param {*} [value] The value to wrap as an SDTField.\n   * @throws {solace.OperationError} if value does not match type\n   * @throws {solace.SDTUnsupportedValueError} if value is not in range\n   *  supported by the platform/runtime\n   */\n  addField(key, typeOrField, value = undefined) {\n    if (typeOrField instanceof SDTField) {\n      this._map[key] = typeOrField;\n      return;\n    } else if (typeof value !== 'undefined') {\n      this._map[key] = SDTField.create(typeOrField, value);\n      return;\n    }\n    throw new OperationError('Invalid parameters to addField: expected SDTField, or type and value',\n      ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nmodule.exports.SDTMapContainer = SDTMapContainer;\n","const SDTFieldLib = require('./sdt-field');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n/**\n * @classdesc\n * Defines a Structured Data Type (SDT) stream container. A stream is an iterable collection of\n * {@link solace.SDTField}s.\n * @memberof solace\n */\nclass SDTStreamContainer {\n  /**\n   * @constructor\n   */\n  constructor() {\n    this._stream = [];\n    this._writable = true;\n    this._readPt = 0;\n  }\n\n  /**\n   * Returns true if the stream has at least one more {@link solace.SDTField}\n   * at the current position.\n   * @returns {Boolean} true, if there is an available field at the read pointer; false, otherwise.\n   */\n  hasNext() {\n    return (this._stream.length > this._readPt);\n  }\n\n  /**\n   * Returns the next field in the stream and advances the read pointer.\n   * If the end of the stream is reached, it returns undefined.\n   * @returns {solace.SDTField} The next field in the stream.\n   */\n  getNext() {\n    return (this._readPt < this._stream.length) ? this._stream[this._readPt++] : undefined;\n  }\n\n  /**\n   * Rewinds the read pointer to the beginning of the stream. Normally when {@link hasNext}\n   * returns false, a client application must call rewind() to reiterate over the stream's fields.\n   * @throws {@link solace.OperationError} if the stream cannot be rewound.\n   */\n  rewind() {\n    this._readPt = 0;\n  }\n\n  /**\n   * Appends a SDTField to the stream.\n   * <p>\n   * If <code>field</code> is a {@link solace.SDTField}, this field is appended to the stream.\n   * <br>\n   * If <code>field</code> is a {@link solace.SDTFieldType},\n   * then the API will create a SDTField of this\n   * type with a value of <code>optValue</code> and append this new SDTField to\n   * the stream.\n   *\n   * @param {solace.SDTField|solace.SDTFieldType} field The field to append to the stream.\n   * @param {*} [optValue] The value to wrap as an SDTField.\n   */\n  /**\n   * Appends a field to this stream.\n   * <p>\n   * @deprecated If <code>typeOrField</code> is a {@link solace.SDTField} instance,\n   * it is appended to the stream.\n   *\n   * The preferred usage is to pass a {@link solace.SDTFieldType}, then the API will create a\n   * SDTField of this type using <code>value</code> and append this new SDTField\n   * to the stream.\n   *\n   * @param {solace.SDTField|solace.SDTFieldType} typeOrField A SDTField instance or SDTFieldType.\n   * @param {*} [value] The value to wrap as an SDTField.\n   * @throws {@link solace.OperationError} if value does not match type\n   * @throws {@link solace.SDTUnsupportedValueError} if value is not in range\n   *  supported by the platform/runtime\n   */\n  addField(typeOrField, value = undefined) {\n    if (!this._writable) return;\n\n    if (typeOrField instanceof SDTFieldLib.SDTField) {\n      this._stream.push(typeOrField);\n      return;\n    }\n\n    if (typeof value !== 'undefined') {\n      this._stream.push(SDTFieldLib.SDTField.create(typeOrField, value));\n      return;\n    }\n\n    throw new OperationError('Invalid parameters to addField: expected SDTField, or type and value',\n      ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nmodule.exports.SDTStreamContainer = SDTStreamContainer;\n","const DebugLib = require('solclient-debug');\nconst { SolaceError } = require('solclient-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a SDT unsupported value error.  An SDT field was assigned a value that is within\n * the type range for the given SDT type, but is not supported on this platform/runtime.\n * This occurs when a received {@link solace.SDTContainerMap} or {@link solace.SDTContainerStream}\n * contains a field with a value that can not represented in the local architecture.\n * Possible causes include:\n * * receive 64 bit integer that cannot be represented accurately in a javaScript number. JavaScript\n *   numbers are floats and can only hold a 48 bit integer without loss of precission. Any integer\n *   greater than 281474976710655 or less than -281474976710655 will cause this exception.\n * @hideconstructor\n * @extends solace.SolaceError\n * @memberof solace\n */\nclass SDTUnsupportedValueError extends SolaceError {\n  /*\n   * @constructor\n   * @param {String} message The message associated with this error\n   * @param {SDTValueErrorSubcode} subcode The subcode associated with this error\n   * @param {Object} sourceData The original representation of the value\n   */\n  constructor(message, subcode, sourceData) {\n    /**\n     * The name of the error.\n     * @name solace.SDTUnsupportedValueError#name\n     * @type {String}\n     * @readonly\n     * @description 'SDTUnsupportedValue'\n     */\n    super('SDTUnsupportedValue', message);\n    /**\n     * The subcode for the error. see {@link solace.SDTValueErrorSubcode}\n     * @name solace.SDTUnsupportedValueError#subcode\n     * @type {solace.SDTValueErrorSubcode}\n     */\n    this.subcode = subcode;\n    this.sourceData = sourceData || '';\n  }\n\n  inspect() {\n    return super.inspect({\n      subcode:    null,\n      sourceData: v => DebugLib.Debug.formatDumpBytes(v, false, 0),\n    });\n  }\n\n  getSubcode() {\n    return this.subcode;\n  }\n\n  getSourceData() {\n    return this.sourceData;\n  }\n}\n\n\nmodule.exports.SDTUnsupportedValueError = SDTUnsupportedValueError;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of {@link solace.SDTUnsuportedValueError} causes.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SDTValueErrorSubcode = {\n  /**\n   * @type {Number}\n   * @description\n   * The value for this field may be valid on other platforms, but is outside the\n   * range that is supported on this platform for the given type.\n   */\n  VALUE_OUTSIDE_SUPPORTED_RANGE: 1,\n};\n\nmodule.exports.SDTValueErrorSubcode = Enum.new(SDTValueErrorSubcode);\n","const DestinationLib = require('solclient-destination');\nconst SDTMapContainerLib = require('./sdt-map-container');\nconst SDTStreamContainerLib = require('./sdt-stream-container');\nconst ValidateLib = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { SDTFieldType } = require('./sdt-field-types');\n\nconst baseTypes = (() => {\n  const result = [];\n  result[SDTFieldType.BOOL] = 'boolean';\n  result[SDTFieldType.UINT8] = 'number';\n  result[SDTFieldType.INT8] = 'number';\n  result[SDTFieldType.UINT16] = 'number';\n  result[SDTFieldType.INT16] = 'number';\n  result[SDTFieldType.UINT32] = 'number';\n  result[SDTFieldType.INT32] = 'number';\n  result[SDTFieldType.UINT64] = 'number';\n  result[SDTFieldType.INT64] = 'number';\n  result[SDTFieldType.WCHAR] = 'string';\n  result[SDTFieldType.STRING] = 'string';\n  result[SDTFieldType.BYTEARRAY] = 'object'; // Uint8Array\n  result[SDTFieldType.FLOATTYPE] = 'number';\n  result[SDTFieldType.DOUBLETYPE] = 'number';\n  return result;\n})();\n\nfunction failInvalidParameter(valueType) {\n  return new OperationError(\n            `Invalid SDT type:value combination, expected value type ${valueType}`,\n            ErrorSubcode.PARAMETER_INVALID_TYPE);\n}\n\nfunction validateSdtField(type, value) {\n  if (baseTypes[type]) {\n    if ((baseTypes[type] === 'boolean' && typeof value !== 'boolean') ||\n            (baseTypes[type] === 'number' && typeof value !== 'number') ||\n            (baseTypes[type] === 'string' && typeof value !== 'string')) {\n      return failInvalidParameter(baseTypes[type]);\n    }\n  }\n  if (type === SDTFieldType.MAP &&\n      !ValidateLib.Check.instanceOf(value, SDTMapContainerLib.SDTMapContainer)) {\n    return failInvalidParameter('SDTMapContainer');\n  }\n  if (type === SDTFieldType.STREAM &&\n      !ValidateLib.Check.instanceOf(value, SDTStreamContainerLib.SDTStreamContainer)) {\n    return failInvalidParameter('SDTStreamContainer');\n  }\n  if (type === SDTFieldType.DESTINATION &&\n      !ValidateLib.Check.instanceOf(value, DestinationLib.Destination)) {\n    return failInvalidParameter('Destination');\n  }\n  return null;\n}\n\nmodule.exports.validateSdtField = validateSdtField;\n","const { AuthenticationScheme } = require('./lib/authentication-schemes');\nconst { CapabilityType, ClientCapabilityType } = require('./lib/capability-types');\nconst { MessageRxCBInfo } = require('./lib/message-rx-cb-info');\nconst { MutableSessionProperty } = require('./lib/mutable-session-properties');\nconst { Session } = require('./lib/session');\nconst { SessionEvent } = require('./lib/session-event');\nconst { SessionEventCBInfo } = require('./lib/session-event-cb-info');\nconst { SessionEventCode } = require('./lib/session-event-codes');\nconst { SessionEventName } = require('./lib/session-event-names');\nconst { SessionProperties } = require('./lib/session-properties');\nconst { SessionState } = require('./lib/session-states');\n\nconst { SolclientFactory } = require('solclient-factory');\nconst { SslDowngrade } = require('./lib/ssl-downgrades');\n\n/**\n * Creates a session instance.\n * @param {solace.SessionProperties} sessionProperties Properties to configure the session.\n * @param {solace.MessageRxCBInfo} [messageCallbackInfo] <b>Deprecated:</b>\n *    Callback method for messages.  Instead applications should receive message events via\n *    `session.on(solace.SessionEventCode.MESSAGE, (message) => { ... });`\n * @param {solace.SessionEventCBInfo} [eventCallbackInfo] <b>Deprecated:</b> Callback method for\n *    events on the <i>Session</i>. Instaead applications should receive session events via\n *    `session.on(solace.SessionEventCode.<code>, (event) => { ... });`\n * @returns {solace.Session} The newly-created session.\n * @throws {solace.OperationError} if the parameters have an invalid type or value.\n *                          Subcode: {@link ErrorSubcode.PARAMETER_INVALID_TYPE}.\n * @method\n * @name solace.SolclientFactory.createSession\n */\nSolclientFactory.createSession = SolclientFactory.createFactory(\n  (sessionProperties, messageCallbackInfo, eventCallbackInfo) =>\n    new Session(sessionProperties, messageCallbackInfo, eventCallbackInfo));\n\nmodule.exports.AuthenticationScheme = AuthenticationScheme;\nmodule.exports.CapabilityType = CapabilityType;\nmodule.exports.ClientCapabilityType = ClientCapabilityType;\nmodule.exports.MessageRxCBInfo = MessageRxCBInfo;\nmodule.exports.MutableSessionProperty = MutableSessionProperty;\nmodule.exports.Session = Session;\nmodule.exports.SessionEventCBInfo = SessionEventCBInfo;\nmodule.exports.SessionEventCode = SessionEventCode;\nmodule.exports.SessionEvent = SessionEvent;\nmodule.exports.SessionEventName = SessionEventName;\nmodule.exports.SessionProperties = SessionProperties;\nmodule.exports.SessionState = SessionState;\nmodule.exports.SslDowngrade = SslDowngrade;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents authentication schemes that can be used. The corresponding session\n * property is {@link solace.SessionProperties#authenticationScheme}.\n *\n * @readonly\n * @enum {String}\n * @memberof solace\n * @namespace\n */\nconst AuthenticationScheme = {\n  /**\n   * @description Username/Password based authentication scheme.\n   * @type {String}\n   */\n  BASIC:                       'AuthenticationScheme_basic',\n  /**\n   * @name solace.AuthenticationScheme.CLIENT_CERTIFICATE\n   * @default AuthenticationScheme_clientCertificate\n   * @description Client-side certificate based authentication scheme.\n   * @see {@link solace.SessionProperties#sslPfx}\n   * @see {@link solace.SessionProperties#sslPfxPassword}\n   * @see {@link solace.SessionProperties#sslPrivateKey}\n   * @see {@link solace.SessionProperties#sslPrivateKeyPassword}\n   * @see {@link solace.SessionProperties#sslCertificate}\n   * @type {String}\n   * @target node\n   */\n  /**\n   * @description Client-side certificate based authentication scheme.  The certificate and\n   *   private key are provided by the browser.\n   * @type {String}\n   * @target browser\n   */\n  CLIENT_CERTIFICATE:          'AuthenticationScheme_clientCertificate',\n  /**\n   * @deprecated Use {@link solace.AuthenticationScheme.BASIC} instead.\n   * @type {String}\n   */\n  AUTHENTICATION_SCHEME_BASIC: 'AuthenticationScheme_basic',\n\n  /**\n   * @deprecated Use {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} instead.\n   * @type {String}\n   */\n  AUTHENTICATION_SCHEME_CLIENT_CERTIFICATE: 'AuthenticationScheme_clientCertificate',\n\n  /**\n   * @default AuthenticationScheme_oauth2\n   * @description Oauth2 authentication scheme.\n   * @see {@link solace.SessionProperties#accessToken}\n   * @see {@link solace.SessionProperties#idToken}\n   * @see {@link solace.SessionProperties#issuerIdentifier}\n   * @type {String}\n   */\n  OAUTH2: 'AuthenticationScheme_oauth2',\n};\n\nmodule.exports.AuthenticationScheme = Enum.new(AuthenticationScheme);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of peer capabilities.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CapabilityType = {\n  /**\n   * Peer's software load version. Type: string.\n   */\n  PEER_SOFTWARE_VERSION:        0,\n  /**\n   * Peer's software release date. Type: string.\n   */\n  PEER_SOFTWARE_DATE:           1,\n  /**\n   * Peer's platform. Type: string.\n   */\n  PEER_PLATFORM:                2,\n  /**\n   * Speed (in Mbps) of the port the client connects to. Type: number.\n   */\n  PEER_PORT_SPEED:              3,\n  /**\n   * Type of the port the client has connected to (currently 0: Ethernet). Type: number.\n   */\n  PEER_PORT_TYPE:               4,\n  /**\n   * Maximum size of a Direct message (in bytes), including all optional message headers and data.\n   * Type: number.\n   */\n  MAX_DIRECT_MSG_SIZE:          5,\n  /**\n   * Peer's router name. Type: string.\n   *\n   * This property is useful when sending SEMP requests to a peer's SEMP topic, which may be\n   * constructed as `#P2P/routername/#client/SEMP`.\n   */\n  PEER_ROUTER_NAME:             6,\n  /**\n   * Peer supports message eliding. Type: boolean.\n   */\n  MESSAGE_ELIDING:              7,\n  /**\n   * Peer supports NoLocal option (client may avoid receiving messages published by itself).\n   */\n  NO_LOCAL:                     8,\n  /**\n   * Peer supports Guaranteed Message Consumer connections for receiving guaranteed messages.\n   */\n  GUARANTEED_MESSAGE_CONSUME:   9,\n  /**\n   * Peer supports temporary endpoints.\n   */\n  TEMPORARY_ENDPOINT:           10,\n  /**\n   * Peer supports Guaranteed Message Publisher connections for sedning guaranteed messages.\n   */\n  GUARANTEED_MESSAGE_PUBLISH:   11,\n  /**\n   * Peer supports Guaranteed Messages Browser connections for receiving guaranteed messages\n   */\n  GUARANTEED_MESSAGE_BROWSE:    12,\n  /**\n   * Peer supports creating/modify/disposing endpoints.\n   */\n  ENDPOINT_MGMT:                13,\n  /**\n   * Peer supports selectors on Guaranteed Message Consumers.\n   */\n  SELECTOR:                     14,\n  /**\n   * Maximum size of a Direct message (in bytes), including all optional message headers and data.\n   * Type: number.\n   */\n  MAX_GUARANTEED_MSG_SIZE:      15,\n  /**\n   * Peer supports Guaranteed Messaging Consumer state change updates. Type: boolean\n   */\n  ACTIVE_CONSUMER_INDICATION:   16,\n  /**\n   * Peer accepts compressed (DEFLATE) data. Type: boolean.\n   */\n  COMPRESSION:                  17,\n  /**\n   * Peer supports Guaranteed Messaging cut-through. Type: boolean\n   */\n  CUT_THROUGH:                  18,\n  /**\n   * Peer supports provisioned queue and topic-endpoint discard behavior. Type: boolean\n   */\n  ENDPOINT_DISCARD_BEHAVIOR:    19,\n  /**\n   * Peer supports Guaranteed Messaging message TTL and Dead-Message Queues. Type: boolean\n   */\n  ENDPOINT_MESSAGE_TTL:         20,\n  /**\n   * Peer accepts JNDI queries. Type: boolean.\n   */\n  JNDI:                         21,\n  /**\n   * Peer supports per topic sequence numbering for Guaranteed Messaging messages. Type: boolean\n   */\n  PER_TOPIC_SEQUENCE_NUMBERING: 22,\n  /**\n   * Peer supports QueueSubscriptionAdd for managing subscriptions on queue endpoints.\n   * Type: boolean\n   */\n  QUEUE_SUBSCRIPTIONS:          23,\n  /**\n   * Peer supports add/remove subscriptions for a specified clientName. Type: boolean\n   */\n  SUBSCRIPTION_MANAGER:         24,\n  /**\n   * Peer supports transacted sessions. Type: boolean.\n   */\n  TRANSACTED_SESSION:           25,\n  /**\n   * Peer support Message Replay. Type: boolean.\n   */\n  MESSAGE_REPLAY:               26,\n  /**\n   * Peer supports TLS downgrade to compression (encrypted and plaintext) Type: boolean\n   */\n  COMPRESSED_SSL:               27,\n  /**\n   * The peer can support \\#share and \\#noexport subscriptions\n   * Type: Boolean\n   */\n  SHARED_SUBSCRIPTIONS:         28,\n  /**\n   * The EndpointErrorId in replay bind responses can be trusted.\n   */\n  BR_REPLAY_ERRORID:            29,\n};\n\n/**\n * Represents an enumeration of client capabilities.\n * These are sent in the ClientCtrl login messages.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst ClientCapabilityType = {\n  /**\n   * Client implements acknowledgements to router unsolicited unbinds.\n   * Always true.\n   */\n  UNBIND_ACK: 0,\n  /**\n   * Indicates whether a client will process an EndpointErrorId in a BindResponse message.\n   * Always true\n   */\n  BR_ERRORID: 1,\n};\nmodule.exports.CapabilityType = Enum.new(CapabilityType);\nmodule.exports.ClientCapabilityType = Enum.new(ClientCapabilityType);\n","class CorrelatedRequest {\n  /**\n   * Creates an instance of CorrelatedRequest.\n   * @param {String} correlationTag The associated tag\n   * @param {?} timer The opaque timer handle\n   * @param {String} correlationKey The associated key\n   * @param {function} respRecvdCallback The associated callback\n   * @memberof CorrelatedRequest\n   * @private\n   */\n  constructor(correlationTag, timer, correlationKey, respRecvdCallback) {\n    this.correlationTag = correlationTag;\n    this.timer = timer;\n    this.correlationKey = correlationKey;\n    this.respRecvdCallback = respRecvdCallback;\n  }\n}\n\nmodule.exports.CorrelatedRequest = CorrelatedRequest;\n","const { CapabilityType } = require('./capability-types');\n\nmodule.exports.DefaultCapabilities = {\n  createDefaultCapabilities(sessionProperties) {\n    const defaultCapabilities = {\n      [CapabilityType.GUARANTEED_MESSAGE_CONSUME]: true,\n      [CapabilityType.GUARANTEED_MESSAGE_PUBLISH]: true,\n      [CapabilityType.SHARED_SUBSCRIPTIONS]:       true,\n      // The others are set TRUE by CCSMP, but not relevant for us yet\n      // [CapabilityType.TEMPORARY_ENDPOINT]:   true,\n      // [CapabilityType.GUARANTEED_MESSAGE_BROWSE]:         true,\n      // [CapabilityType.ENDPOINT_MGMT]:        true,\n      // [CapabilityType.SELECTOR]:             true,\n      // [CapabilityType.COMPRESSION]:          true,\n      // [CapabilityType.CUT_THROUGH]:          true,\n      // [CapabilityType.QUEUE_SUBSCRIPTIONS]:  true,\n      // [CapabilityType.SUBSCRIPTION_MANAGER]: true,\n      [CapabilityType.MAX_GUARANTEED_MSG_SIZE]: sessionProperties.assumedMaxAdSize,\n    };\n    return defaultCapabilities;\n  },\n};\n","const { Process } = require('solclient-util');\n\nconst C_2_32 = Math.pow(2, 32);\n\nfunction leftPad(str, len) {\n  if (len > str.length) {\n    return '0'.repeat(len - str.length) + str;\n  }\n  return str;\n}\n\nfunction generateRandomId() {\n  const rand = (Math.random() * C_2_32).toFixed(0);\n  return leftPad(rand.toString(), 10);\n}\n\n/**\n * @private\n */\nconst GlobalContext = {\n\n  sessionCounter: 0,\n  idCounter:      0,\n\n  RandId: generateRandomId(),\n\n  NextSessionCounter() {\n    const count = ++this.sessionCounter;\n    return leftPad(count.toString(), 4);\n  },\n\n  NextId() {\n    return ++this.idCounter;\n  },\n\n  GenerateClientName() {\n    const { product, platform } = Process;\n    const result = `${product}/${platform}/${this.RandId}/${this.NextSessionCounter()}`;\n    return result;\n  },\n\n  GenerateUserIdentification() {\n    const { product, platform } = Process;\n    return `${product}/${platform}/${this.RandId}`;\n  },\n\n  GenerateClientDescription() {\n    return `solclientjs/${Process.description}`.substring(0, 254);\n  },\n};\n\nmodule.exports.GlobalContext = GlobalContext;\n","const { LOG_TRACE } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\n\nlet hostListDNSFilter;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-env node */\n  /* eslint-disable global-require */\n  const dns = require('dns');\n  /* eslint-enable global-require */\n\n  // util.promisify is Node 8. This converts an (err, result) callback to a promise.\n  // The purpose is to allow us to use Promise.all, which deals with waiting until\n  // all promises are resolved, and returning the results in correctly ordered array.\n  const dnsLookupPromise = (url, options) => new Promise((resolve) => {\n    const host = parseURL(url).hostname;\n    LOG_TRACE('looking up', url, '=>', host);\n    dns.lookup(host, options, (error, result) => {\n      LOG_TRACE('DNS result', error, result);\n      return error === null\n        ? resolve({ url, host, address: result, resolved: true })\n        : resolve(\n          { url,\n            host,\n            resolved: true,\n            error:    {\n              code:     error['code'], // eslint-disable-line dot-notation\n              errno:    error['errno'], // eslint-disable-line dot-notation\n              hostname: error['hostname'], // eslint-disable-line dot-notation\n              syscall:  error['syscall'], // eslint-disable-line dot-notation\n            },\n          });\n    });\n  });\n\n  /**\n   * Resolution calls back with an array of the following:\n   * `{ url: 'http://example.com/foo', host: 'example.com', address: '10.0.0.1', resolved: true }`\n   * or, on error\n   * `{ url: 'http://example.com/foo', host: 'example.com', resolved: true, error: {\n   *    code: 'ENOTFOUND', errno: 'ENOTFOUND', syscall: 'getaddrinfo'\n   *  } }`\n   *\n   * If resolution could not be performed, because of platform limitations, the callback receives\n   * the following:\n   * `{ url: 'http://example.com/foo', host: 'example.com', address: 'example.com', resolved: false }`\n   *\n   * Even if no DNS lookup is performed, the function can still fail if an invalid URL is provided.\n   *\n   * The function always calls back asynchronously.\n   *\n   * @param {Array.<String>} urls Array of URLs to resolve\n   * @param {function} cb A function called back with results as described above\n   * @private\n   */\n  hostListDNSFilter = function hostListDNSFilterNode(urls, cb) {\n    const promises = urls.map(url => dnsLookupPromise(\n      url,\n      { 'verbatim': true }\n    ));\n    // Call back (null, [{host:, address:}, ...]) if all successful\n    // Call back (err, undefined) fast if any error\n    Promise.all(promises).then(resolved => cb(null, resolved)).catch(err => cb(err));\n  };\n} else {\n  /* eslint-env browser */\n  // Create an always-async callback that allows all hosts.\n  //hostListDNSFilter = (urls, cb) => setImmediate(() => {\n  hostListDNSFilter = (urls, cb) => setTimeout(() => {\n    try {\n      const result = urls.map((url) => {\n        const host = parseURL(url).host;\n        return { url, host, address: host, resolved: false };\n      });\n      return cb(null, result);\n    } catch (e) {\n      return cb(e);\n    }\n  }, 0);\n}\n\nmodule.exports.hostListDNSFilter = hostListDNSFilter;\n","const { assert } = require('solclient-eskit');\nconst { hostListDNSFilter } = require('./host-list-dns-filter');\nconst { LogFormatter } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\n\nfunction parseURLs(rawURLs) {\n  if (Array.isArray(rawURLs)) {\n    return rawURLs.map(rawURL => parseURL(rawURL));\n  }\n  return parseURLs(rawURLs.split(/[,;]/));\n}\n\n/*\n *   \"When using a host list, each time the API works through the host list without establishing\n *    a connection is considered an connect retry.\"\n *   SESSION_CONNECT_RETRIES: \"When using a host list, this property defines how many times to\n *    try to connect or reconnect to a single host before moving to the next host in the list.\"\n *   Details: http://docs.solace.com/Solace-Messaging-APIs/Configuring-Connection-T.htm\n*/\n\n// In general:\n// * set initial state to invalid so that we begin needing a transition.\n// * preincrement all try counts on transition.\n// Specifics:\n// * Select try count for entire list based on whether we were connected.\n// * Try count per host is the same for both connect and reconnect.\n// * When the host changes, the waitTime is 0.\n// * Overriding the above, when the host pointer wraps to 0, the waitTime is nonzero.\n\nclass HostInfo {\n  constructor(props = { url: null, waitTime: 0 }) {\n    Object.assign(this, props);\n  }\n}\n\n/**\n * @private\n */\nclass HostList {\n  constructor({\n    url,\n    connectRetries,\n    reconnectRetries,\n    connectRetriesPerHost,\n    reconnectRetryWaitInMsecs,\n  } = {}) {\n    Object.assign(this, {\n      hosts: parseURLs(url).map(e => e.href),\n\n      // How many times will we traverse the host list without success?\n      // Try to connect one more than the 'retryCount' because we always try once.\n      connectTryCount: (connectRetries === -1\n        ? Number.POSITIVE_INFINITY\n        : connectRetries + 1\n      ),\n\n      // How many times will we traverse the host list after success?\n      reconnectTryCount: (reconnectRetries === -1\n        ? Number.POSITIVE_INFINITY\n        : reconnectRetries\n      ),\n\n      // A value of –1 in the next assignements means retry forever - \"null\" will mean that\n      // try to connect one more than the 'retryCount' because we always try once.\n      connectTryCountPerHost: (connectRetriesPerHost === -1\n        ? Number.POSITIVE_INFINITY\n        : connectRetriesPerHost + 1\n      ),\n\n      // How long do we wait before reattempting the same host or wrapping around the list?\n      reconnectRetryWaitInMsecs,\n\n      // Mutating operations affect only this.\n      _mutableState: {},\n\n      logger: new LogFormatter('[host-list]'),\n    });\n\n    assert(this.hosts.length >= 1);\n    assert(this.connectTryCount >= 1);\n    assert(this.reconnectTryCount >= 0);\n    assert(this.connectTryCountPerHost >= 1);\n  }\n\n  /**\n   * Call before first getNextHost() to validate that at least one URL contains a reachable\n   * hostname.\n   * @param {function(Error)} callback The callback to invoke when DNS resolution completes\n   */\n  resolveHosts(callback) {\n    const { LOG_TRACE, LOG_WARN } = this.logger;\n    hostListDNSFilter(this.hosts, (err, resolved) => {\n      // Exit immediately if the filter threw.\n      if (err) return callback(err);\n      assert(resolved.length === this.hosts.length, 'Resolve did not return a result for all hosts');\n\n      LOG_TRACE('Resolve result', resolved);\n      let succeeded = 0;\n      resolved.forEach((result) => {\n        if (result.address) {\n          ++succeeded;\n        }\n        if (!result.resolved) {\n          // Only log if the lookup was actually performed\n          return;\n        }\n        if (result.address) {\n          LOG_TRACE('DNS resolve OK:    ', result.address, 'for', result.url);\n        } else {\n          LOG_WARN('DNS resolve FAILED:', result.error.code,\n                   `${result.error.syscall}('${result.error.hostname}')`, 'for', result.url);\n        }\n      });\n      return callback(succeeded === 0 ? 'All hosts failed DNS resolution' : null);\n    });\n  }\n\n  /**\n   * @param {Object} state Properties for host selection logic\n   * @memberof HostList\n   */\n  reset(state = { wasConnected: false, disconnected: false }) {\n    // On reset, we always return to the beginning of the host list.\n    // This facilitates DR recovery by returning to the primary router.\n    // Set an invalid initial state that will trigger our first try.\n    Object.assign(this._mutableState, {\n      wasConnected: state.wasConnected,\n      disconnected: state.disconnected,\n      hostPointer:  0,\n      hostTries:    0,\n      listTries:    1,\n      exhausted:    false,\n      lastHostInfo: new HostInfo(),\n    });\n  }\n\n  /**\n   * !returns {HostInfo} Connection information for the next host.\n   * @returns {String} The URL for the next host\n   * @memberof HostList\n   */\n  getNextHost() {\n    const { LOG_TRACE } = this.logger;\n\n    const state = this._mutableState;\n    const wasConnected = state.wasConnected;\n    const lastHostInfo = state.lastHostInfo;\n\n    assert(lastHostInfo, 'Next host request with no prior host info -- did you call reset()?');\n    // Using a try/finally as a \"goto end\" to always log final state. Exceptions not expected\n    // here, although if an assertion fails, the finally log should be helpful.\n    try {\n      // If this was passed into reset, the session is telling us to enforce no more hosts.\n      if (state.disconnected) {\n        LOG_TRACE('Host list set to disconnected, providing null next host');\n        return null;\n      }\n\n      // If exhausted, this function has returned a null url already.\n      assert(!state.exhausted, 'Next host request after host list exhausted');\n\n      // Pull immutable properties from the instance\n      const properties = Object.assign({\n        hosts:        this.hosts,\n        hostTriesMax: this.connectTryCountPerHost,\n        listTriesMax: wasConnected ? this.reconnectTryCount : this.connectTryCount,\n      });\n\n      LOG_TRACE('Getting next host\\n', 'properties', properties, '\\nstate', state);\n      LOG_TRACE('Last host', lastHostInfo);\n\n      // Initial state was valid. This is a host try. Increment.\n      ++state.hostTries;\n      if (state.hostTries > properties.hostTriesMax) {\n        // Increment host pointer, possibly putting it out of bounds.\n        LOG_TRACE(`Exhausted ${state.hostTries} host tries for host ${lastHostInfo.url}.`);\n        ++state.hostPointer;\n        // If the host pointer is out of bounds, we are beginning a new list try.\n        // It was either set out of bounds deliberately by reset() or it was\n        // incremented out of bounds above.\n        if (state.hostPointer >= properties.hosts.length) {\n          // This is a new list try.\n          ++state.listTries;\n          if (state.listTries > properties.listTriesMax) {\n            // Beginning this list try has exceeded our inclusive max. The host list is\n            // exhausted.\n            LOG_TRACE(`Exhausted host list at ${properties.listTriesMax} traversals.`);\n            state.exhausted = true;\n          } else {\n            // Resetting the host pointer to begin this list try.\n            LOG_TRACE(`Host list try (${state.listTries}/${properties.listTriesMax})`);\n            state.hostPointer = 0;\n            state.hostTries = 1; // this is the first try for this host\n          }\n        } else {\n          state.hostTries = 1; // this is the first try for this host\n        }\n      } else {\n        // Continue with this host.\n        LOG_TRACE(`Host try (${state.hostTries}/${properties.hostTriesMax})`);\n      }\n\n      if (state.exhausted) {\n        LOG_TRACE('All hosts exhausted');\n        return null;\n      }\n\n      // Beyond this point, expect a valid host to be returned.\n\n      const url = properties.hosts[state.hostPointer];\n      assert(url, `No host at the host pointer! ${properties.hosts}[${state.hostPointer}]`);\n\n      // Wait time conditions:\n      // 1. On a new list (invalid lastHostInfo), zero waitTime.\n      const isNewList = lastHostInfo.url === null;\n      // 2a. On a new host, zero waitTime...\n      const isNewHost = lastHostInfo.url !== url;\n      // 2b. ...unless we are just restarting the list.\n      const didJustFinishList = lastHostInfo.url !== url && state.hostPointer === 0;\n      // (2b negates 2a for a new list)\n\n      const waitTime = (isNewList || (isNewHost && !didJustFinishList))\n        ? 0\n        : this.reconnectRetryWaitInMsecs;\n\n      // Session FSM was intended to use all of these, but handles its own events presently\n      // and expects waitTime to be a property of the list that mutates per host, so that is\n      // what is done.\n      const hostInfo = new HostInfo({\n        url,\n        waitTime,\n      });\n\n      // Set last host for next time, and return\n      LOG_TRACE('Returning host from', hostInfo);\n      state.lastHostInfo = hostInfo;\n      return hostInfo.url;\n    } finally {\n      LOG_TRACE('Final list state\\n', state);\n    }\n  }\n\n  get connectWaitTimeInMsecs() {\n    assert(this._mutableState.lastHostInfo.url, 'Getting connectWaitTimeInMsecs having never called getNextHostInfo');\n    return this._mutableState.lastHostInfo.waitTime;\n  }\n\n  currentHostToString() {\n    const state = this._mutableState;\n    const wasConnected = state.wasConnected;\n    // Pull immutable properties from the instance\n    const properties = Object.assign({\n      hosts:        this.hosts,\n      hostTriesMax: this.connectTryCountPerHost,\n      listTriesMax: wasConnected ? this.reconnectTryCount : this.connectTryCount,\n    });\n    // host pointer is zero based index into the host list\n    // so translate it to a human readable index\n    const hostNumber = state.hostPointer + 1;\n    return `host '${state.lastHostInfo.url}' (host ${hostNumber} of ${properties.hosts.length})(host connection attempt ${state.hostTries} of ${properties.hostTriesMax})(total ${wasConnected ? 'reconnection' : 'connection'} attempt ${state.listTries} of ${properties.listTriesMax})`;\n  }\n}\n\nmodule.exports.HostList = HostList;\n","/**\n * @classdesc\n *\n * Encapsulates the session's message receive callback function and\n * an optional user-specified object.\n *\n * This class is passed to {@link solace.SolclientFactory.createSession} when creating a session.\n * @deprecated The {@link solace.Session} is an <b>EventEmitter</b>.\n * Use <tt>sessionObject.on({@link solace.SessionEventCode.MESSAGE})</tt> instead.\n *\n * @memberof solace\n */\nclass MessageRxCBInfo {\n\n  /**\n   * Creates an instance of MessageRxCBInfo.\n   *\n   * @param {function(Session, Message, Object)} messageRxCBFunction\n   *          Invoked by the API when a message is received\n   *          over the session. The prototype of this function is the\n   *          following: ({@link solace.Session},\n   *                      {@link solace.Message},\n   *                      {Object})\n   * @param {Object} userObject\n   *          An optional user-specified object passed on every message receive callback.\n   *\n   * @memberof solace\n   */\n  constructor(messageRxCBFunction, userObject) {\n    /**\n     * @type {function(Session, Message, Object)}\n     * @description The prototype of this function is the\n     * following: ({@link solace.Session}, {@link solace.Message}, userObject {Object})\n     */\n    this.messageRxCBFunction = messageRxCBFunction;\n\n    /**\n     * @type {Object}\n     * @description user-specified object\n     */\n    this.userObject = userObject;\n  }\n}\n\nmodule.exports.MessageRxCBInfo = MessageRxCBInfo;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of session properties that can be modified by\n * {@link solace.Session.updateProperty} after the {@link solace.Session} is originally\n * created.\n *\n * These correspond to session properties in {@link solace.SessionProperties}.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MutableSessionProperty = {\n  /**\n   * Client name: {@link solace.SessionProperties#clientName}\n   * @type {Number}\n   */\n  CLIENT_NAME:        1,\n  /**\n   * Application description: {@link solace.SessionProperties#applicationDescription}\n   * @type {Number}\n   */\n  CLIENT_DESCRIPTION: 2,\n};\n\nmodule.exports.MutableSessionProperty = Enum.new(MutableSessionProperty);\n","/**\n * @private\n */\nclass OutstandingDataRequest {\n  constructor(correlationId, timer, replyReceivedCBFunction, reqFailedCBFunction, userObject) {\n    this.correlationId = correlationId;\n    this.timer = timer;\n    this.replyReceivedCBFunction = replyReceivedCBFunction;\n    this.reqFailedCBFunction = reqFailedCBFunction;\n    this.userObject = userObject;\n  }\n}\n\nmodule.exports.OutstandingDataRequest = OutstandingDataRequest;\n","const P2PUtil = {\n  getP2PInboxTopic(base) {\n    return (`${base}/_`);\n  },\n  getP2PTopicSubscription(base) {\n    return (`${base}/>`);\n  },\n};\n\nmodule.exports.P2PUtil = P2PUtil;\n","/**\n * @classdesc\n * Encapsulates the session's event callback function and an optional user-specified object.\n *\n * This class is passed to {@link solace.SolclientFactory.createSession} when creating a session.\n * @deprecated The {@link solace.Session} is an <b>EventEmitter</b>.  Register event handlers\n * against {@link solace.SessionEventCode} events instead.\n *\n * @memberof solace\n */\n\nclass SessionEventCBInfo {\n\n  /**\n   * Creates an instance of SessionEventCBInfo.\n   *\n   * @param {function(Session, SessionEvent, Object, Object)} sessionEventCBFunction\n   *  invoked by the Messaging API when a session event occurs. The prototype\n   *  of this function is the following: ({@link solace.Session},\n   *                                      {@link solace.SessionEvent},\n   *                                      {Object}})\n   * @param {Object} userObject An optional user-specified object passed on\n   * every session event callback.\n   */\n  constructor(sessionEventCBFunction, userObject) {\n    /**\n     * @type {Object}\n     * @description user-specified object\n     */\n    this.userObject = userObject;\n\n    /**\n     * @type {function}\n     * @description The prototype of this function is the\n     * following:\n     * ({@link solace.Session}, {@link solace.SessionEvent},\n     * userObject {Object}, RFUObject {Object})\n     */\n    this.sessionEventCBFunction = sessionEventCBFunction;\n  }\n}\n\nmodule.exports.SessionEventCBInfo = SessionEventCBInfo;\n","const { Enum } = require('solclient-eskit');\n\n\n/**\n * @callback solace.SessionEventCodes.sessionEvent\n * @function\n * @this {solace.Session} The message consumer for the event\n * @param {solace.SessionEvent|solace.OperationError} event The event. If the event is an\n *  error, the event will be an instance of {@link solace.OperationError} but will also be\n *  interface-compatible with {@link solace.SessionEvent}.\n */\n\n\n/**\n * An attribute of {@link SessionEvent}. This enumeration represents the\n * different events emitted by {@link Session} through the session event\n * callback.\n *\n * When a session is no longer in a usable state, the API tears down the underlying\n * connection and notifies the application with one of the following session events:\n *  * {@link solace.SessionEventCode#event:DOWN_ERROR}\n *  * {@link solace.SessionEventCode#event:CONNECT_FAILED_ERROR}\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SessionEventCode = {\n  /**\n   * The Session is ready to send/receive messages and perform control operations.\n   *\n   * At this point the transport session is up, the Session has logged in, and the\n   * P2PInbox subscription is added.\n   *\n   * The session is established.\n   * @event solace.SessionEventCode#UP_NOTICE\n   */\n  UP_NOTICE:                         0,\n  /**\n   * The session was established and then went down.\n   * @event solace.SessionEventCode#DOWN_ERROR\n   * @param {solace.OperationError} error The details related to the session failure.\n   */\n  DOWN_ERROR:                        1,\n  /**\n   * The session attempted to connect but was unsuccessful.\n   * @event solace.SessionEventCode#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error The details related to the failed connection attempt.\n   */\n  CONNECT_FAILED_ERROR:              2,\n  /**\n   * The Solace Message Router rejected a published message.\n   * @event solace.SessionEventCode#REJECTED_MESSAGE_ERROR\n   * @param {solace.RequestError} error The details related to the rejected message.\n   */\n  REJECTED_MESSAGE_ERROR:            4,\n  /**\n   * The Solace Message Router rejected a subscription (add or remove).\n   * @event solace.SessionEventCode#SUBSCRIPTION_ERROR\n   * @param {solace.RequestError} error The details related to the failed subscription update.\n   */\n  SUBSCRIPTION_ERROR:                5,\n  /**\n   * The subscribe or unsubscribe operation succeeded.\n   * @event solace.SessionEventCode#SUBSCRIPTION_OK\n   * @param {solace.SessionEvent} event The details related to the successful subscription update.\n   */\n  SUBSCRIPTION_OK:                   6,\n  /**\n   * The Solace Message Router's Virtual Router Name changed during a reconnect operation.\n   * @event solace.SessionEventCode#VIRTUALROUTER_NAME_CHANGED\n   * @param {solace.SessionEvent} event Information related to the event.\n   */\n  VIRTUALROUTER_NAME_CHANGED:        7,\n  /**\n   * @deprecated\n   * A request was aborted because the session is being disconnected.\n   * Use {@link solace.RequestFailEvent} instead.\n   */\n  REQUEST_ABORTED:                   8,\n  /**\n   * @deprecated\n   * The event represents a timed-out request API call.\n   * Use {@link solace.RequestFailEvent} instead.\n   */\n  REQUEST_TIMEOUT:                   9,\n  /**\n   * The event represents a successful update of a mutable session property.\n   * @event solace.SessionEventCode#PROPERTY_UPDATE_OK\n   * @param {solace.SessionEvent} event Information related to the successful property update.\n   */\n  PROPERTY_UPDATE_OK:                10,\n  /**\n   * The event represents a failed update of a mutable session property.\n   * @event solace.SessionEventCode#PROPERTY_UPDATE_ERROR\n   * @param {solace.RequestError} error The details related to the failed property update.\n   */\n  PROPERTY_UPDATE_ERROR:             11,\n  /**\n   * The session transport can accept data again.  This event will occur after an\n   * {@link solace.OperationError} is thrown from an API call with a subcode of\n   * {@link solace.ErrorSubcode.INSUFFICIENT_SPACE} to indicate the operation can be retried.\n   * This event is used both after session-level transport buffer exhaustion,\n   * and Guaranteed Messaging Window exhaustion.\n   * @event solace.SessionEventCode#CAN_ACCEPT_DATA\n   */\n  CAN_ACCEPT_DATA:                   13,\n  /**\n   * The session connect operation failed, or the session that was once up,\n   * is now disconnected.\n   * @event solace.SessionEventCode#DISCONNECTED\n   */\n  DISCONNECTED:                      14,\n  /**\n   * The session has gone down, and an automatic reconnection attempt is in progress.\n   * @event solace.SessionEventCode#RECONNECTING_NOTICE\n   * @param {solace.SessionEvent} event The details related to the cause of the connection\n   *    interruption.\n   */\n  RECONNECTING_NOTICE:               22,\n  /**\n   * The automatic reconnect of the Session was successful, and the session is established again.\n   * @event solace.SessionEventCode#RECONNECTED_NOTICE\n   * @param {solace.SessionEvent} event The details related to the re-establishment of the\n   *    connection.\n   */\n  RECONNECTED_NOTICE:                23,\n  /**\n   * The session has automatically recovered after the Guaranteed Message publisher\n   * failed to reconnect.\n   * Messages sent but not acknowledged are being renumbered and retransmitted.\n   * Some messages may be duplicated in the system.\n   * @event solace.SessionEventCode#REPUBLISHING_UNACKED_MESSAGES\n   * @param {solace.SessionEvent} event The details related to the republishing of messages on the\n   *    session.  {@link solace.SessionEvent#infoStr} will indicate the number of messages being\n   *    republished, which is an upper bound on the number of messages that could be duplicated due\n   *    to this action.\n   */\n  REPUBLISHING_UNACKED_MESSAGES:     24,\n  /**\n   * A message was acknowledged by the router.\n   * @event solace.SessionEventCode#ACKNOWLEDGED_MESSAGE\n   * @param {solace.SessionEvent} event Allows the acknowledgement to be correlated to the sent\n   *    message.\n   */\n  ACKNOWLEDGED_MESSAGE:              25,\n  /**\n   * Unsubscribing the topic from the Durable Topic Endpoint succeeded.\n   * @event solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_OK\n   */\n  UNSUBSCRIBE_TE_TOPIC_OK:           26,\n  /**\n   * Unsubscribing the topic from the Durable Topic Endpoint failed.\n   * @event solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_ERROR\n   * @param {solace.OperationError} error The details related to the failed attempt to remove the\n   *    subscription from a topic endpoint.\n   */\n  UNSUBSCRIBE_TE_TOPIC_ERROR:        27,\n  /**\n   * A Direct message was received on the session. This event code is only used\n   * on the <b>EventEmitter</b> session interface.  If using the deprecated callback interface,\n   * messages are received via the callback provided in {@link solace.MessageRxCBInfo}.\n   * @event solace.SessionEventCode#MESSAGE\n   * @param {solace.Message} message The message received on the session.\n   */\n  MESSAGE:                           28,\n  /**\n   * Guaranteed Messaging Publisher has been closed by the Solace\n   * message router. This usually indicates an operator has disabled the\n   * message spool.\n   * @event solace.SessionEventCode#GUARANTEED_MESSAGE_PUBLISHER_DOWN\n   * @param {solace.OperationError} error Information related to the error.\n   */\n  GUARANTEED_MESSAGE_PUBLISHER_DOWN: 29,\n};\n\nmodule.exports.SessionEventCode = Enum.new(SessionEventCode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionEventName = {\n  CONNECT:                       'SessionConnect',\n  DISCONNECT:                    'SessionDisconnect',\n  DISPOSE:                       'SessionDispose',\n  CONNECT_TIMEOUT:               'SessionConnectTimeout',\n  CONNECT_WAIT_TIMEOUT:          'SessionConnectWaitTimeout',\n  DOWNGRADE_TIMEOUT:             'SessionDowngradeTimeout',\n  TRANSPORT_UP:                  'SessionTransportUp',\n  TRANSPORT_DESTROYED:           'SessionTransportDestroyed',\n  TRANSPORT_CAN_ACCEPT_DATA:     'SessionTransportCanAcceptData',\n  TRANSPORT_PARSE_ERROR:         'SessionTransportParseError',\n  TRANSPORT_PROTOCOL_SMP:        'SessionSMPMessage',\n  TRANSPORT_PROTOCOL_CLIENTCTRL: 'SessionClientCtrlMessage',\n  EXCEPTION:                     'SessionException',\n  SUBSCRIBE_TIMEOUT:             'SessionSubscribeTimeout',\n  CREATE_SUBSCRIBER:             'SessionCreateSubscriber',\n  FLOW_UP:                       'SessionFlowUp',\n  FLOW_FAILED:                   'SessionFlowFailed',\n  SEND_ERROR:                    'SessionSendError',\n  FLOWS_DISCONNECTED:            'SessionFlowsDisconnected',\n  TRANSPORT_FLUSHED:             'SessionTransportFlushed',\n  DNS_RESOLUTION_COMPLETE:       'SessionDNSResolutionComplete',\n  TRANSPORT_CHANGE_DONE:         'SessionTransportChangeDone',\n};\n\nmodule.exports.SessionEventName = Enum.new(SessionEventName);\n","const { ErrorSubcode,\n        OperationError,\n        RequestError,\n        RequestEventCode } = require('solclient-error');\nconst { SessionEventCode } = require('./session-event-codes');\n\nfunction buildType(Superclass) {\n  /**\n   * @classdesc\n   * Represents a session event; events are passed to the application-provided\n   * event handling callback provided when creating the session.\n   * @memberof solace\n   * @hideconstructor\n   */\n  class SessionEvent extends Superclass {\n    /**\n     * @constructor\n     * @param {Array} superclassArgs Args to pass to super\n     * @param {solace.SessionEventCode} sessionEventCode The event code\n     * @param {String} infoStr Information string\n     * @param {Number} [responseCode] Any associated router response code\n     * @param {solace.ErrorSubcode} [errorSubcode] Any associated error subcode\n     * @param {Object} [correlationKey] Any associated correlation key\n     * @param {String} [reason] Any additional information\n     * @private\n     */\n    constructor(superclassArgs,\n                sessionEventCode,\n                infoStr,\n                responseCode = undefined,\n                errorSubcode = 0,\n                correlationKey = undefined,\n                reason = undefined) {\n      super(...superclassArgs);\n      this._sessionEventCode = sessionEventCode;\n      this._infoStr = infoStr;\n      this._responseCode = responseCode;\n      this._errorSubcode = errorSubcode;\n      this._correlationKey = correlationKey; // optional\n      this._reason = reason; // optional\n    }\n\n    /**\n     * @type {solace.SessionEventCode}\n     * @description Further qualifies the session event.\n     */\n    get sessionEventCode() {\n      return this._sessionEventCode;\n    }\n\n    /**\n     * @type {String}\n     * @description if applicable, an information string returned by the Solace Message Router.\n     */\n    get infoStr() {\n      return this._infoStr;\n    }\n\n    /**\n     * @type {?Number}\n     * @description if applicable, a response code returned by the Solace Message Router.\n     */\n    get responseCode() {\n      return this._responseCode;\n    }\n\n    /**\n     * @type {?solace.ErrorSubcode}\n     * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n     */\n    get errorSubcode() {\n      // _eslint-disable-next-line quote-property\n      return this.subcode || this._errorSubcode;\n    }\n\n    /**\n     * @deprecated Use {@link solace.SessionEvent#errorSubcode} instead.\n     * @readonly\n     */\n    // coverity[identifier_typo]\n    get errorSubCode() {\n      return this.errorSubcode;\n    }\n\n    /**\n     * @type {?Object}\n     * @description A user-specified object\n     * made available in the response or confirmation event by including it as a\n     * parameter in the orignal API call.  If the user did not specify a\n     * correlationKey, it will be <code>null</code>.\n     */\n    get correlationKey() {\n      return this._correlationKey;\n    }\n\n    /**\n     * @type {?String}\n     * @description Additional information if it is applicable.\n     * In case of subscribe or publish errors, it constains the topic.\n     */\n    get reason() {\n      return this._reason;\n    }\n    /**\n     * @param {Object} value The reason info object\n     * @internal\n     */\n    set reason(value) {\n      this._reason = value;\n    }\n\n    [util_inspect_custom]() {\n      // Is this supposed to invoke the custom inspect function of the superclass if it exists?\n      return Object.assign(super[util_inspect_custom] || {}, {\n        'sessionEventCode': SessionEventCode.describe(this.sessionEventCode),\n        'infoStr':          this.infoStr,\n        'responseCode':     this.responseCode,\n        'errorSubcode':     ErrorSubcode.describe(this.errorSubcode),\n        'correlationKey':   this.correlationKey ? this.correlationKey.toString() : null,\n        'reason':           this.reason ? this.reason : null,\n      });\n    }\n\n    toString() {\n      return util_inspect(this);\n    }\n  }\n\n  return SessionEvent;\n}\n\nconst SUPERCLASS_FOR_SESSION_EVENT = {\n  [SessionEventCode.CONNECT_FAILED_ERROR]:              OperationError,\n  [SessionEventCode.DOWN_ERROR]:                        OperationError,\n  [SessionEventCode.GUARANTEED_MESSAGE_PUBLISHER_DOWN]: OperationError,\n  [SessionEventCode.PROPERTY_UPDATE_ERROR]:             RequestError,\n  [SessionEventCode.REJECTED_MESSAGE_ERROR]:            RequestError,\n  [SessionEventCode.SUBSCRIPTION_ERROR]:                RequestError,\n  [SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR]:        OperationError,\n  [RequestEventCode.REQUEST_ABORTED]:                   RequestError,\n  [RequestEventCode.REQUEST_TIMEOUT]:                   RequestError,\n};\n\nconst SUPERCLASS_ARGS = new Map()\n  .set(Object, () => [])\n  .set(OperationError, (sec, infoStr, rc, subcode, ck, reason) => [infoStr, subcode, reason])\n  .set(RequestError, (sec, infoStr, rc, subcode, ck, reason) => [infoStr, sec, ck, reason]);\n\nconst TYPE_CACHE = new Map();\n\nfunction build(sessionEventCode,\n               infoStr,\n               responseCode = undefined,\n               errorSubcode = 0,\n               correlationKey = undefined,\n               reason = undefined) {\n  const Superclass = SUPERCLASS_FOR_SESSION_EVENT[sessionEventCode] || Object;\n  const SessionEvent = (() => {\n    let result = TYPE_CACHE.get(Superclass);\n    if (result) return result;\n    result = buildType(Superclass);\n    TYPE_CACHE.set(Superclass, result);\n    return result;\n  })();\n  const superclassArgsBuilder = (SUPERCLASS_ARGS.get(Superclass) || (() => []));\n  const superclassArgs = superclassArgsBuilder(sessionEventCode,\n                                               infoStr,\n                                               responseCode,\n                                               errorSubcode,\n                                               correlationKey,\n                                               reason);\n  return new SessionEvent(superclassArgs,\n                          sessionEventCode,\n                          infoStr,\n                          responseCode,\n                          errorSubcode,\n                          correlationKey,\n                          reason);\n}\n\n// Expose a type\nconst SessionEvent = buildType(Object);\nSessionEvent.build = build;\n\nmodule.exports.SessionEvent = SessionEvent;\n","const { ErrorSubcode } = require('solclient-error');\nconst { FsmEvent } = require('solclient-fsm');\nconst { Hex } = require('solclient-convert');\n\nconst { formatHexString } = Hex;\n/**\n * SessionFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the SessionFSM.  This extension provides members to carry information specfic to\n * the SessionFSM transitions.\n * @extends FsmEvent\n * @private\n */\nclass SessionFSMEvent extends FsmEvent {\n  constructor(spec, fields) {\n    super(spec);\n    /**\n     * @type {String}\n     * @description Information String for the {SessionEvent}\n     */\n    this.eventText = null;\n    /**\n     * @type {ErrorSubcode}\n     * @description The Solace ErrorSubcode for any generated {SessionEvent}\n     */\n    this.errorSubcode = null;\n    /**\n     * @type {String}\n     * @description The reason string to be included in any generated {SessionEvent}\n     */\n    this.eventReason = null;\n    /**\n     * @type {TransportSMFMessage}\n     * @description A decoded SMF message received from the transport. May be\n     * either a {ClientCtrlMessage} or a {SMPMessage}\n     */\n    this.smfMsg = null;\n    /**\n     * @type {Object}\n     * @description The Transport SessionId retrieved from a {TransportSessionEvent}\n     */\n    this.sessionId = null;\n    /**\n     * @type {Object}\n     * @description The Publisher or Consumer object associated with a GM event.\n     */\n    this.guaranteedFlowObject = null;\n\n    Object.assign(this, fields);\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'eventText':    this.eventText,\n      'eventReason':  this.eventReason,\n      'errorSubcode': ErrorSubcode.describe(this.errorSubcode),\n      'sessionId':    this.sessionId && formatHexString(this.sessionId) || 'N/A',\n    };\n  }\n\n  getExtraStringInfo() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.SessionFSMEvent = SessionFSMEvent;\n","const ConsumerLib = require('solclient-message-consumer');\nconst PublisherLib = require('solclient-message-publisher');\nconst SMFLib = require('solclient-smf');\nconst SolclientFactoryLib = require('solclient-factory');\nconst TransportLib = require('solclient-transport');\n\nconst { assert } = require('solclient-eskit');\nconst { CapabilityType } = require('./capability-types');\nconst { Check } = require('solclient-validate');\nconst { CorrelatedRequest } = require('./correlated-request');\nconst { Destination } = require('solclient-destination');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { FsmEvent,\n        State,\n        StateMachine } = require('solclient-fsm');\nconst { Hex } = require('solclient-convert');\nconst { LogFormatter } = require('solclient-log');\nconst { Message,\n        MessageDeliveryModeType } = require('solclient-message');\nconst { P2PUtil } = require('./p2p-util');\nconst { SessionEvent } = require('./session-event');\nconst { SessionEventCode } = require('./session-event-codes');\nconst { SessionEventName } = require('./session-event-names');\nconst { SessionFSMEvent } = require('./session-fsm-event');\nconst { SessionRequestType } = require('./session-request-types');\nconst { SessionStateName } = require('./session-state-names');\nconst { SslDowngrade } = require('./ssl-downgrades');\nconst { StatType,\n        StatsByMode } = require('solclient-stats');\nconst { StringUtils } = require('solclient-util');\nconst { SubscriptionUpdateTimeoutMessages } = require('./subscription-update-timeout-messages');\n\nconst { formatHexString } = Hex;\nconst { stripNullTerminate } = StringUtils;\nconst { STAT_TX_BYMODE_BYTES,\n        STAT_TX_BYMODE_MSGS,\n        STAT_RX_BYMODE_BYTES,\n        STAT_RX_BYMODE_MSGS,\n        STAT_TX_BYMODE_REDELIVERED,\n        STAT_TX_BYMODE_BYTES_REDELIVERED } = StatsByMode;\n\n/**\n * @param {SessionProperties} sessionProperties The shared reference to the properties of the\n *  owning session\n * @param {Session} session The session owning this FSM\n * @extends StateMachine\n * @private\n */\nclass SessionFSM extends StateMachine {\n  constructor(sessionProperties, session, stats, hosts) {\n    super({ name: 'SessionFSM' });\n    const fsm = this;\n    const logFormatter = function logFormatter(...args) {\n      return [\n        `[session-fsm=${fsm.sessionIdHex || '(N/A)'}]`,\n        `[${fsm.getCurrentStateName()}]`,\n        ...args,\n      ];\n    };\n    const logger = this.logger = new LogFormatter(logFormatter);\n    const { LOG_TRACE, LOG_DEBUG, LOG_INFO } = logger;\n    this.log = logger.wrap(this.log, this);\n    this._sessionProperties = sessionProperties;\n    this._session = session;\n    this._sessionStatistics = stats;\n    this._hosts = hosts;\n    this._consumers = new ConsumerLib.ConsumerFlows();\n    // This is a function that generates this interface. It takes the flow as a construction\n    // parameter, and for some methods, produces a partial application using that flow.\n\n    this._flowInterfaceFactory = flow => ({\n      getCorrelationTag:               this.getCorrelationTag.bind(this),\n      incStat:                         this.incStat.bind(this),\n      sendData:                        message => this.send(message, flow, false),\n      sendToTransport:                 message => this.sendToTransport(message, flow, false),\n      sendControl:                     message => this.send(message, flow, true),\n      enqueueRequest:                  this.enqueueOutstandingCorrelatedReq.bind(this),\n      createDestinationFromDescriptor: session.createDestinationFromDescriptor.bind(session),\n      createTemporaryDestination:      session.createTemporaryDestination.bind(session),\n      isCapable:                       session.isCapable.bind(session),\n      getCapability:                   session.getCapability.bind(session),\n      getCurrentStateName:             this.getCurrentStateName.bind(this),\n      updateQueueSubscription:         session.updateQueueSubscription.bind(session),\n\n      get sessionIdHex() {\n        return fsm.sessionIdHex;\n      },\n      get canAck() {\n        return session.canAck;\n      },\n    });\n\n    // Keeping track of transport backpressure (but not AD window exhaustion),\n    // so we can relieve it on transport reconnect:\n    this._userBackpressured = false;\n\n    this.clearCurrentError();\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.SessionDisconnected,\n                               context => context.getStateMachine().reset());\n    });\n\n    /**\n     * Handles events in the unhandledEventHandler callback\n     * @param {SessionFSMEvent} sEvent\n     * @private\n     */\n    this.unhandledEventReaction(function onUnhandledEvent(sEvent) {\n      const curState = fsm.getCurrentState();\n      switch (sEvent.getName()) {\n        case SessionEventName.CREATE_SUBSCRIBER:\n          // CREATE_SUBSCRIBER is only handled in CONNECTED state.\n          // In all other states we just add the consumer to our\n          // list of unbound consumers that need to be bound when\n          // the session up occurs.\n          assert(fsm._consumers, 'collection has lifetime of FSM instance');\n          fsm._consumers.add(sEvent.guaranteedFlowObject);\n          return this;\n        case SessionEventName.DISPOSE:\n          LOG_DEBUG('Handling DISPOSE');\n          return curState.terminate(() => fsm.disposeInternal());\n        case SessionEventName.FLOW_UP:\n          LOG_DEBUG(`Ignoring FLOW_UP event from ${sEvent.guaranteedFlowObject}`);\n          return this;\n        default:\n          LOG_TRACE(`Ignoring event ${sEvent.getName()} in state ${fsm.getCurrentStateName()}`);\n          return this;\n      }\n    });\n\n    this.SessionConnecting = new State({\n      name:          SessionStateName.CONNECTING,\n      parentContext: fsm,\n    }, {\n      //\n      //  handleTransportDestroyed is called in response to TRANSPORT_DESTROYED\n      //  event and if transport create throws an exception. In both case there is\n      //  no underlying transport and the FSM must move on to the next host.\n      handleTransportDestroyed() {\n        fsm._currentHost = fsm._hosts.getNextHost();\n        if (fsm._currentHost === null) {\n          return this.transitionToExitPoint(fsm.SessionConnecting, 'ErrorExit');\n        }\n\n        const { connectWaitTimeInMsecs } = fsm._hosts;\n        LOG_TRACE(`Wait time for this host is ${connectWaitTimeInMsecs}`);\n        if (connectWaitTimeInMsecs > 0 && !fsm._connectWaitTimer) {\n          fsm._connectWaitTimer = setTimeout(() => {\n            fsm._connectWaitTimer = null;\n            fsm.processEvent(new SessionFSMEvent({ name: SessionEventName.CONNECT_WAIT_TIMEOUT }));\n          }, connectWaitTimeInMsecs);\n          return this.transitionTo(fsm.WaitingForInterConnectTimeout);\n        }\n        return this.transitionTo(fsm.WaitingForTransport);\n      },\n    })\n      .entry(() => {\n        fsm.setConnectTimer();\n      })\n      .entryPoint('DisconnectTransport', function onDisconnectTransport() {\n        fsm._hosts.reset({ wasConnected: undefined, disconnected: true });\n        //\n        // Set the error event, as we have reset the\n        // host list with disconnected:true, we always take the\n        // errorExit path to DISCONNECTED state after this entryPoint.\n        //\n        fsm._connectFailEvent = SessionEventCode.DISCONNECTED;\n        fsm._connectSuccessEvent = SessionEventCode.DISCONNECTED;\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .entryPoint('ReconnectTransport', function onReconnectTransport() {\n        //\n        // Set the error event, this is only used\n        // if we take the errorExit path\n        //\n        fsm._connectFailEvent = SessionEventCode.DOWN_ERROR;\n        fsm._connectSuccessEvent = SessionEventCode.RECONNECTED_NOTICE;\n        // Should we try to reconnect?\n        const disconnected = fsm._sessionProperties._reconnectRetries === 0;\n        fsm._hosts.reset({ wasConnected: true, disconnected });\n        if (!disconnected) {\n          // workaround to make sure session state is changed to connecting when\n          // application gets the session event\n          // positional parameters for SessionEvent constructor\n          // make sure we get the args and err setup now as by the time\n          // the postEventAction runs currentError will be reset.\n          const err = fsm._currentError || {};\n          const args = [err.eventText,    // infoString\n            err.responseCode,             // responseCode\n            err.errorSubcode,             // errorSubcode\n            undefined,                    // correlationKey ... N/A\n            err.eventReason];             // eventReason\n          fsm.setPostEventAction(() => {\n            fsm.setConnectTimer();\n            fsm.emitSessionEvent(SessionEvent.build(SessionEventCode.RECONNECTING_NOTICE, ...args));\n          });\n        }\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .initial(() => {\n        fsm.clearCurrentError();\n        //\n        // Set the error event this is only used\n        // if we take the errorExit path\n        //\n        fsm._connectFailEvent = SessionEventCode.CONNECT_FAILED_ERROR;\n        fsm._connectSuccessEvent = SessionEventCode.UP_NOTICE;\n\n        // Perform host resolution (guaranteed async; replaces a postEventAction)\n        // Do not perform host list operations until this completes (moved to callback)\n        fsm._hosts.resolveHosts((err) => {\n          if (!fsm._hosts) {\n            LOG_TRACE('Ignoring host filter fail because session was disposed');\n            return null;\n          }\n          if (err) {\n            LOG_TRACE('DNS filter failed:', err);\n            fsm.setCurrentError({\n              errorSubcode: ErrorSubcode.UNRESOLVED_HOSTS,\n              eventText:    err,\n            });\n            fsm._hosts.reset({ disconnected: true });\n            return this.processEvent(new SessionFSMEvent({ name: SessionEventName.EXCEPTION }));\n          }\n\n          // Now that the host list has been scanned, we can reset and get next host\n          fsm._hosts.reset({ wasConnected: false });\n          fsm._currentHost = fsm._hosts.getNextHost();\n          return this.processEvent(new SessionFSMEvent(\n            { name: SessionEventName.DNS_RESOLUTION_COMPLETE }\n          ));\n        });\n        return this.transitionTo(fsm.WaitingForDNS);\n      })\n      .reaction(SessionEventName.DNS_RESOLUTION_COMPLETE, function onDNSComplete() {\n        return this.transitionTo(fsm.WaitingForTransport);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* event */) {\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      })\n      .reaction(SessionEventName.CONNECT_TIMEOUT, function onConnectTimeout(/* event */) {\n        fsm.setCurrentError({\n          errorSubcode: ErrorSubcode.TIMEOUT,\n          eventText:    'Connect timeout',\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.SEND_ERROR, function onSendError(sessionEvent) {\n        LOG_INFO(`SEND_ERROR reached SessionConnecting. ${sessionEvent}`);\n        fsm.setCurrentError(sessionEvent);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(errEvent) {\n        fsm.setCurrentError(errEvent);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sessionEvent) {\n        fsm.setCurrentError(sessionEvent);\n        LOG_INFO('TRANSPORT_DESTROYED event');\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .exit(() => {\n        fsm.clearConnectTimer();\n        if (fsm._connectWaitTimer) {\n          clearTimeout(fsm._connectWaitTimer);\n          fsm._connectWaitTimer = null;\n        }\n      })\n      .exitPoint('ConnectedExit', (/* event */) => {\n        // Normal exit to TransportUp.\n        // We need to notify the application they are connected. Use postEventAction to make sure\n        // session state has already changed to TransportUp when application gets the callback.\n        // Use _connectSuccessEvent to send RECONNECTED vs UP depending on entry point.\n        // The text included in the event is currently different for\n        // connect vs reconnect. We should store with as part of _connectSuccessEvent in\n        // the entry point.\n        fsm.setPostEventAction(() => {\n          fsm.emitSessionEvent(SessionEvent.build(fsm._connectSuccessEvent,\n                                                  `'${fsm._hosts.currentHostToString()}'`,\n                                                  200, 0, null, null));\n          if (fsm._userBackpressured) {\n            const sessionEvent = SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                                                    '', null, 0, null, '');\n            fsm.emitSessionEvent(sessionEvent);\n            fsm._userBackpressured = false;\n          }\n        });\n        // Clear current error as we have successfully connected or\n        // reconnected.\n        fsm.clearCurrentError();\n        return this.transitionTo(fsm.SessionTransportUp);\n      })\n      .exitPoint('ErrorExit', function onExit(/* event */) {\n        // Notify the application they are disconnected. Use postEventAction to make sure session\n        // state has already changed to disconnected when application gets the callback.\n        fsm.setPostEventAction(() => {\n          const err = fsm._currentError || {};\n          // positional parameters for SessionEvent constructor\n          const args = [err.eventText,    // infoString\n            err.responseCode,             // responseCode\n            err.errorSubcode,             // errorSubcode\n            undefined,                    // correlationKey ... N/A\n            err.eventReason];             // eventReason\n          fsm.emitSessionEvent(SessionEvent.build(fsm._connectFailEvent, ...args));\n        });\n        return this.transitionTo(fsm.SessionDisconnected);\n      });\n\n    this.WaitingForDNS = new State({\n      name:          SessionStateName.WAITING_FOR_DNS,\n      parentContext: fsm.SessionConnecting,\n    });\n\n    this.DestroyingTransport = new State({\n      name:          SessionStateName.DESTROYING_TRANSPORT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        LOG_INFO('Connecting, disposing transport');\n        fsm.destroyTransportSession('Disconnecting session', 0);\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sessionEvent) {\n        fsm.setCurrentError(sessionEvent);\n        return fsm.SessionConnecting.handleTransportDestroyed.call(this);\n      });\n\n    this.WaitingForInterConnectTimeout = new State({\n      name:          SessionStateName.WAITING_FOR_INTERCONNECT_TIMEOUT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .reaction(SessionEventName.CONNECT_WAIT_TIMEOUT, function onConnectWaitTimeout(/*event*/) {\n        return this.transitionTo(fsm.WaitingForTransport);\n      });\n\n    this.WaitingForTransport = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .initial(() => {\n        const errorMessage = 'Cannot establish transport session: creation failed';\n        fsm.setConnectTimer();\n        fsm.clearCurrentError();\n        try {\n          fsm.initTransport();\n        } catch (e) {\n          this.setCurrentError({\n            eventText:    e.message === errorMessage ? errorMessage : `${errorMessage}: ${e.message}`,\n            errorSubcode: e.subcode || ErrorSubcode.INTERNAL_ERROR,\n            eventReason:  e });\n          return fsm.SessionConnecting.handleTransportDestroyed.call(this);\n        }\n        return this.transitionTo(fsm.WaitingForTransportUp);\n      });\n\n    this.WaitingForTransportUp = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT_UP,\n      parentContext: this.WaitingForTransport,\n    })\n      // This way the code is run only on actual state entry,\n      // not on null transitions (staying in this state)\n      .entry(() => { this._justEntered = true; })\n      .initial(() => {\n        if (!this._justEntered) { return this; }\n        this._justEntered = false;\n        const errorMessage = 'Cannot establish transport session: connection failed';\n        try {\n          const returnCode = fsm._transport.connect();\n          if (returnCode !== TransportLib.TransportReturnCode.OK) {\n            throw new OperationError(\n              errorMessage,\n              ErrorSubcode.CONNECTION_ERROR,\n              TransportLib.TransportReturnCode.describe(returnCode)\n            );\n          }\n          LOG_INFO(`Attempting to connect session '${fsm.sessionId}' to ${fsm._hosts.currentHostToString()}`);\n        } catch (e) {\n          this.setCurrentError({\n            eventText:    e.message === errorMessage ? errorMessage : `${errorMessage}: ${e.message}`,\n            errorSubcode: e.subcode || ErrorSubcode.INTERNAL_ERROR,\n            eventReason:  e });\n          return fsm.SessionConnecting.handleTransportDestroyed.call(this);\n        }\n        return this;\n      })\n      .reaction(SessionEventName.SEND_ERROR, function doNothing(sEvent) {\n        LOG_INFO(`SEND_ERROR while waiting for transport up, doing nothing. ${sEvent}`);\n        return this.internalTransition(null);\n      }\n      )\n      .reaction(SessionEventName.TRANSPORT_UP, function onTransportUp(sEvent) {\n        fsm.sessionId = sEvent.sessionId || '';\n        const returnCode = fsm.sendClientCtrlLogin();\n        if (returnCode === TransportLib.TransportReturnCode.OK) {\n          return this.transitionTo(fsm.WaitingForLogin);\n        }\n        const err = {\n          eventText:    'Failed to send Client Control Login',\n          errorSubcode: ErrorSubcode.LOGIN_FAILURE,\n          responseCode: 400,\n        };\n        fsm.setCurrentError(err);\n        return this.transitionTo(fsm.DestroyingTransport);\n      });\n\n    this.WaitingForLogin = new State({\n      name:          SessionStateName.WAITING_FOR_LOGIN,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        fsm.setClientCtrlTimer();\n      })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_CLIENTCTRL, function onClientCtrl(sEvent) {\n        const clientCtrlMsg = sEvent.smfMsg;\n        const response = clientCtrlMsg.getResponse();\n        const respCode = response.responseCode;\n        const err = {\n          responseCode: respCode,\n        };\n        fsm._responseCode = respCode;\n        if (respCode === 200) {\n          if (!fsm.checkNoLocal(clientCtrlMsg)) {\n            Object.assign(err, {\n              eventText:    'No Local is not supported by the Solace Message Router',\n              errorSubcode: ErrorSubcode.NO_LOCAL_NOT_SUPPORTED,\n            });\n          } else if (!fsm.checkCompressedSsl(clientCtrlMsg)) {\n            Object.assign(err, {\n              eventText:    'Compressed TLS is not supported by the Solace Message Router',\n              errorSubcode: ErrorSubcode.COMPRESSED_TLS_NOT_SUPPORTED,\n            });\n          } else { // Happy path\n            fsm.updateReadonlySessionProps(clientCtrlMsg);\n            return this.transitionTo(fsm.WaitForTransportChange);\n          }\n        } else {\n          const rawSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode,\n                                                                        response.responseString);\n          const subcode = (rawSubcode === ErrorSubcode.UNKNOWN_ERROR) ?\n            ErrorSubcode.LOGIN_FAILURE : rawSubcode;\n          LOG_INFO(`Login failed. Subcode: ${subcode} respCode: ${respCode} ` +\n            `respString: ${response.responseString}`);\n          Object.assign(err, {\n            eventText:    response.responseString,\n            errorSubcode: subcode,\n          });\n        }\n        LOG_TRACE('ClientCtrl error', err);\n        fsm.setCurrentError(err);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.DOWNGRADE_TIMEOUT, function onDowngradeTimeout(/* event */) {\n        if (!fsm._transport.requestDowngrade || fsm._transport.requestDowngrade('ClientCtrl timeout', ErrorSubcode.TIMEOUT) === false) {\n          fsm.setCurrentError({\n            eventText:    'ClientCtrl timeout',\n            errorSubcode: ErrorSubcode.TIMEOUT,\n          });\n          return this.transitionTo(fsm.DestroyingTransport);\n        }\n        // Don't recreate the transport, just try to connect it\n        LOG_TRACE('Downgrade accepted, returning to WaitingForTransportUp');\n        return this.transitionTo(fsm.WaitingForTransportUp);\n      })\n      .exit(() => {\n        fsm.clearClientCtrlTimer();\n      });\n\n    // This is an intermediate state after a successful login.\n    // It gives time to the transport factory (more like a dealership at this point)\n    // to enable compression and/or shut down tls.\n    // The factory may return a new transport immediately,\n    // in which case there is no need to stay in this state.\n    // Or it may return null, and pass the new transport to the callback later.\n    // No messages can be sent while waiting for the callback.\n    this.WaitForTransportChange = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT_CHANGE,\n      parentContext: fsm.SessionConnecting,\n    })\n      .initial(function onInitial() {\n        // Operates on the FSM, must be bound to it.\n        const callback = function onTransportChange(newTransport) {\n          this._transport = newTransport;\n          this.processEvent(new SessionFSMEvent(\n                            { name: SessionEventName.TRANSPORT_CHANGE_DONE }\n          ));\n        };\n        const rc = fsm.updateTransportCompression(callback.bind(fsm));\n        if (rc === null) {\n          // Factory needs time, stay in this state.\n          return this;\n        }\n        fsm._transport = rc;\n        return this.transitionTo(fsm.ReapplyingSubscriptions);\n      })\n      .reaction(SessionEventName.TRANSPORT_CHANGE_DONE, function onTransportChangeDone() {\n        return this.transitionTo(fsm.ReapplyingSubscriptions);\n      });\n\n    this.ReapplyingSubscriptions = new State({\n      name:          SessionStateName.REAPPLYING_SUBSCRIPTIONS,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        LOG_INFO('ReapplyingSubscriptions: entry');\n        fsm.copySubscriptionCacheKeys();\n      })\n      .initial(function onInitial() {\n        if (fsm.reapplySubscriptions() === true) {\n          // all subscriptions applied and waiting for a subscription confirm\n          return this.transitionTo(fsm.WaitForSubConfirm);\n        }\n        // flow controlled while reapplying\n        return this.transitionTo(fsm.WaitForCanAcceptData);\n      })\n      .reaction(SessionEventName.SUBSCRIBE_TIMEOUT, function onSubscribeTimeout() {\n        const respText = 'Subscription timeout while reapplying';\n        const subcode = ErrorSubcode.TIMEOUT;\n        fsm.setCurrentError({\n          eventText:    respText,\n          errorSubcode: subcode,\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .exit(function onExit() {\n        fsm.clearSubscriptionCacheKeys();\n        return this;\n      });\n\n    this.WaitForSubConfirm = new State({\n      name:          SessionStateName.WAITING_FOR_SUBCONFIRM,\n      parentContext: fsm.ReapplyingSubscriptions,\n    })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        // process rxMsgObj\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n        if (respCode !== 200) {\n          const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n          LOG_INFO(`Waiting for subscription confirmation, got ${respCode} (${errorSubcode}) ` +\n                    `'${respText}' on subscription ${subscriptionStr}`);\n          fsm.setCurrentError({\n            eventText:    respText,\n            responseCode: respCode,\n            errorSubcode,\n          });\n          return this.transitionTo(fsm.DestroyTransport);\n        }\n\n        if (fsm._session.canConnectPublisher &&\n            fsm._defaultPublisher &&\n            fsm._defaultPublisher.isBindWaiting()) {\n          return this.transitionTo(fsm.WaitingForMessagePublisher);\n        }\n        return this.transitionToExitPoint(fsm.SessionConnecting, 'ConnectedExit');\n      });\n\n    this.WaitForCanAcceptData = new State({\n      name:          SessionStateName.WAITING_FOR_CAN_ACCEPT_DATA,\n      parentContext: fsm.ReapplyingSubscriptions,\n    })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        // process rxMsgObj\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n        // We are not expecting a SMP response as we have not sent a request-confirm\n        // so this is almost assuredly an error response to a subscription add\n        // check respCode anyway.  if its '200 OK' just ignore it.\n        if (respCode !== 200) {\n          const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n          LOG_DEBUG(`Waiting for can accept data, got ${respCode} (subcode ${errorSubcode}) ` +\n            `'${respText}' on subscription ${subscriptionStr}`);\n          fsm.setCurrentError({\n            eventText:    respText,\n            responseCode: respCode,\n            errorSubcode,\n          });\n          return this.transitionTo(fsm.DestroyingTransport);\n        }\n        // unexpected 200 OK repsonse, log it and continue\n        LOG_INFO(`Unexpected 200 OK response to subscription add for ${subscriptionStr}`);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_CAN_ACCEPT_DATA, function onTransportCanAcceptData() {\n        if (fsm.reapplySubscriptions() === true) {\n          // all subscriptions applied and waiting for a subscription confirm\n          return this.transitionTo(fsm.WaitForSubConfirm);\n        }\n        // flow controlled while reapplying\n        return this.internalTransition(null);\n      });\n\n    this.WaitingForMessagePublisher = new State({\n      name:          SessionStateName.WAITING_FOR_PUBFLOW,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        // Inform the publisher that the session is up and the flow establishment can begin.\n        fsm._defaultPublisher.connect();\n        fsm.sendPublisherSessionUpEvent(fsm._defaultPublisher);\n      })\n      .reaction(SessionEventName.FLOW_UP, function onEvent() {\n        LOG_TRACE(`Flow up ${this}`);\n        if (!fsm._defaultPublisher.isBindWaiting()) {\n          LOG_TRACE('Publisher up');\n          return this.transitionToExitPoint(fsm.SessionConnecting, 'ConnectedExit');\n        }\n        LOG_TRACE('Waiting for more publishers');\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.FLOW_FAILED, function onEvent(sEvent) {\n        fsm.setCurrentError({\n          eventText:    `Guaranteed Message Publisher Failed: ${sEvent.eventText}`,\n          errorSubcode: ErrorSubcode.LOGIN_FAILURE,\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      });\n\n    this.SessionTransportUp = new State({\n      name:          SessionStateName.TRANSPORT_UP,\n      parentContext: fsm,\n    })\n      .entry(function onEntry() {\n        return this;\n      })\n      .initial(function onInitial() {\n        if (fsm._session.canConnectConsumer) {\n          // Inform the subscribers that the session is up and the flow establishment can begin.\n          fsm._consumers.flows.forEach(consumer => fsm.sendConsumerSessionUpEvent(consumer));\n          // Reconnecting flows need session state notification too.\n          fsm._consumers.reconnectingFlows.forEach(\n            consumer => fsm.sendConsumerSessionUpEvent(consumer));\n        }\n        return this.transitionTo(fsm.FullyConnected);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        return this.transitionTo(fsm.SessionDisconnecting);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(sEvent) {\n        fsm.setCurrentError(sEvent);\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.SEND_ERROR, function onSendError(sEvent) {\n        fsm.setCurrentError(sEvent);\n        fsm.cleanupSession();\n        LOG_TRACE('Reconnecting transport after SEND_ERROR (not fully connected)');\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sEvent) {\n        fsm.setCurrentError(sEvent);\n        LOG_INFO('Received unsolicited TRANSPORT_DESTROYED event while transport is up');\n        LOG_TRACE(`TRANSPORT_DESTROYED details: ${sEvent}`);\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n\n        fsm.handleSubscriptionUpdateError(respCode, respText, subscriptionStr, undefined, false);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_CAN_ACCEPT_DATA, function onCanAcceptData(sEvent) {\n        // Notify client for republishing\n        const sessionEvent = SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                                                '', null, 0, null, sEvent.toString());\n        fsm.emitSessionEvent(sessionEvent);\n        fsm._userBackpressured = false;\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.CREATE_SUBSCRIBER, function onCreateSubscriber(sEvent) {\n        // Inform the consumer that the session is up and the flow establishment can begin.\n        const consumer = fsm._consumers.add(sEvent.guaranteedFlowObject);\n        fsm.sendConsumerSessionUpEvent(consumer);\n        return this;\n      })\n      .exit(function onExit() {\n        fsm.clearKeepAlive();\n        return this;\n      });\n\n    this.FullyConnected = new State({\n      name:          SessionStateName.FULLY_CONNECTED,\n      parentContext: fsm.SessionTransportUp,\n    })\n      .entry(() => {\n        fsm._connectFailEvent = SessionEventCode.DOWN_ERROR;\n        fsm.scheduleKeepAlive();\n      });\n\n    this.SessionDisconnected = new State({\n      name:          SessionStateName.DISCONNECTED,\n      parentContext: fsm,\n    })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        fsm.setPostEventAction(() => {\n          fsm.emitSessionEvent(SessionEvent.build(SessionEventCode.DISCONNECTED));\n        });\n\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.CONNECT, function onConnect(/* sEvent */) {\n        return this.transitionTo(fsm.SessionConnecting);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(/* sEvent */) {\n        // do nothing\n        return this.internalTransition(null);\n      });\n    this.SessionDisconnecting = new State({\n      name:          SessionStateName.DISCONNECTING,\n      parentContext: fsm,\n    })\n      .initial(() => {\n        LOG_INFO(`Disconnecting session ${fsm}`);\n        return this.transitionTo(fsm.DisconnectingFlows);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(errEvent) {\n        //\n        // As we are in disconnecting state we have initiated the\n        // disconnect and need to preserve the error subcode that\n        // we set before destroying the transport. The transport, having\n        // no error, will usually return a subcode of zero here.\n        //\n        // This only changes the eventCode, not the subcode. Other properties\n        // are preserved.\n        //\n        fsm.setCurrentError({ errEvent });\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(/* sEvent */) {\n        LOG_INFO('Received unsolicited TRANSPORT_DESTROYED while disconnecting transport');\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      });\n\n    this.DisconnectingFlows = new State({\n      name:          SessionStateName.DISCONNECTING_FLOWS,\n      parentContext: fsm.SessionDisconnecting,\n    }, {\n      // Get all flows to disconnect. This will need to be called at least once.\n      gatherPendingFlows() {\n        const { MessageConsumerEventName } = ConsumerLib;\n\n        // Don't re-enter synchronously to look for new flows.\n        // Flows disconnect synchronously when they are already disconnected.\n        // If this is the case, they throw; they do not emit an event.\n        // If a consumer flow is up, it will immediately emit a BIND_WAITING event and we\n        // handle that.\n        // Since we know that flow#_disconnectSession neither creates a new flow\n        // nor calls a user callback that could do so, we need not look for new\n        // flows that were created.\n        assert(!this.isGathering);\n        this.isGathering = true;\n\n        const adaptedListenForDestroy = (flow, installfn, downEvents) => {\n          assert(flow, 'Trying to listen to undefined flow');\n          // If we already know about this flow, skip it.\n          if (this.known.has(flow)) return;\n          LOG_TRACE(`Adding pending flow ${flow}`);\n          this.known.add(flow);\n          this.pending.add(flow);\n          const onFlowDown = () => {\n            LOG_TRACE(`Removing flow from pending ${flow}`);\n            downEvents.forEach(event => flow._removeListener(event, onFlowDown));\n            this.pending.delete(flow);\n            if (!this.isGathering) this.checkPendingFlows();\n          };\n          downEvents.forEach(event => installfn.call(flow, event, onFlowDown));\n          try {\n            flow._disconnectSession(); // Session has been disconnected by user\n          } catch (ex) {\n             // Synchronously down\n            LOG_TRACE('Flow disconnect threw');\n            LOG_TRACE(ex);\n            onFlowDown();\n          }\n        };\n\n        // See SOL-13556: sending CloseFlow makes it impossible to recover the flow.\n        // This was the code that sent CloseFlow. I'm leaving it here temporarily\n        // in case we want a clean shutdown that waits for acks.\n        /*\n        const { MessagePublisherEventName } = PublisherLib;\n        if (fsm._defaultPublisher) {\n          adaptedListenForDestroy(fsm._defaultPublisher,\n                                  fsm._defaultPublisher.once,\n                                  [MessagePublisherEventName.DOWN]);\n        }\n        */\n        if (fsm._consumers) {\n          fsm._consumers.flows.forEach((flow) => {\n            adaptedListenForDestroy(flow,\n                                    flow._once,\n                                    [\n                                      MessageConsumerEventName.DOWN,\n                                      MessageConsumerEventName.DOWN_ERROR,\n                                    ]);\n          });\n        }\n\n        this.isGathering = false;\n      },\n      // This function is called whenever a flow comes down, whether sync or async.\n      // The body is wrapped in a basic debounce: if we are re-entering (synchronously),\n      // no new flows will be added.\n      checkPendingFlows() {\n        LOG_TRACE('Waiting for disconnects on', this.pending);\n        if (this.pending.size === 0) {\n          // We are out of pending flows, but look for new flows that were just added\n          this.gatherPendingFlows();\n          // Were any flows just added?\n          if (this.pending.size === 0) {\n            this.proceed();\n          }\n        }\n      },\n      proceed() {\n        // All done!\n        // Clear flow sets so they can be disposed\n        this.known = null;\n        this.pending = null;\n        LOG_INFO('All flows disconnected');\n        fsm.processEvent(new FsmEvent({ name: SessionEventName.FLOWS_DISCONNECTED }));\n      },\n    })\n      .entry(function onEntry() {\n        this.known = new Set();\n        this.pending = new Set();\n        this.checkPendingFlows();\n      })\n      .reaction(SessionEventName.FLOWS_DISCONNECTED, function onFlowsDisconnected() {\n        return this.transitionTo(fsm.FlushingTransport);\n      });\n\n    this.FlushingTransport = new State({\n      name:          SessionStateName.FLUSHING_TRANSPORT,\n      parentContext: fsm.SessionDisconnecting,\n    }, {\n      flushTransport() {\n        fsm.cleanupSession();\n        fsm.flushTransportSession(() => this.onTransportFlushed());\n        this.sessionId = null;\n      },\n      onTransportFlushed() {\n        fsm.processEvent(new FsmEvent({ name: SessionEventName.TRANSPORT_FLUSHED }));\n      },\n    })\n      .entry(function onEntry() {\n        LOG_INFO('Flushing transport');\n        this.flushTransport();\n      })\n      .reaction(SessionEventName.TRANSPORT_FLUSHED, function onTransportFlushed() {\n        LOG_INFO('Handle Transport Flushed');\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      });\n  }\n\n  /**\n   * @param {Destination} destination The topic to add\n   * @private\n   */\n  addToSubscriptionCache(destination) {\n    if (Check.nothing(destination) || !this._subscriptionCache) {\n      return;\n    }\n\n    const { LOG_DEBUG } = this.logger;\n    const key = destination.name;\n    if (this._subscriptionCache[key] === null ||\n        this._subscriptionCache[key] === undefined) {\n      LOG_DEBUG(`Cache subscription ${key}`);\n      this._subscriptionCache[key] = destination;\n      LOG_DEBUG('Increment cache count');\n      this._subscriptionCacheCount++;\n    } else {\n      LOG_DEBUG(`Cache subscription ${key}`);\n      this._subscriptionCache[key] = destination;\n    }\n  }\n\n  /**\n   * @param {String} correlationTag The tag of the request to cancel\n   * @returns {CorrelatedRequest} The cancelled request\n   * @private\n   */\n  cancelOutstandingCorrelatedReq(correlationTag) {\n    if (Check.nothing(correlationTag) || !this._correlatedReqs) {\n      return null;\n    }\n    const req = this._correlatedReqs[correlationTag];\n    if (req === null || req === undefined) {\n      return null;\n    }\n\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    LOG_DEBUG(`Cancel outstanding ctrl request correlationTag=${correlationTag\n      }`);\n    if (req.timer) {\n      clearTimeout(req.timer);\n      req.timer = null;\n    }\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`, e);\n    }\n    return req;\n  }\n\n\n  /**\n   * @private\n   */\n  cleanupSession() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Clean up session');\n\n    const {\n      ConsumerFSMEvent,\n      ConsumerFSMEventNames,\n    } = ConsumerLib;\n\n    if (this._correlatedReqs) {\n      Object.keys(this._correlatedReqs).forEach(key =>\n        this.cancelOutstandingCorrelatedReq(key));\n    }\n\n    this.clearConnectTimer();\n    this.clearClientCtrlTimer();\n    this.clearKeepAlive();\n    this._consumers.flows.forEach((consumer) => {\n      consumer.processFSMEvent(\n        new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DOWN })\n      );\n    });\n    // Reconnecting flows need session state notification too.\n    this._consumers.reconnectingFlows.forEach((consumer) => {\n      consumer.processFSMEvent(\n        new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DOWN })\n      );\n    });\n    if (this._defaultPublisher) {\n      this._defaultPublisher.processFSMEvent(\n        new PublisherLib.PublisherFSMEvent({\n          name: PublisherLib.PublisherFSMEventNames.SESSION_DOWN,\n        })\n      );\n    }\n    this._session.cleanupSession();\n  }\n\n  /**\n   * @private\n   */\n  clearClientCtrlTimer() {\n    if (!this._clientCtrlTimer) {\n      return;\n    }\n\n    clearTimeout(this._clientCtrlTimer);\n    this._clientCtrlTimer = null;\n  }\n\n\n  /**\n   * @private\n   */\n  clearConnectTimer() {\n    if (!this._connectTimer) {\n      return;\n    }\n\n    clearTimeout(this._connectTimer);\n    this._connectTimer = undefined;\n  }\n\n  /**\n   * Cancel keep alive task\n   * @private\n   */\n  clearKeepAlive() {\n    const { LOG_INFO } = this.logger;\n\n    if (this._keepAliveTimer) {\n      LOG_INFO('Cancel keepalive timer');\n      clearInterval(this._keepAliveTimer);\n      this._keepAliveTimer = null;\n    }\n\n    this.resetKeepAliveCounter();\n  }\n\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to parse\n   * @returns {Boolean} true if No Local is supported by the router\n   * @private\n   */\n  checkNoLocal(clientCtrlMsg) {\n    let noLocalSupported = true;\n    if (this._sessionProperties.noLocal === true) {\n      const caps = clientCtrlMsg.getRouterCapabilities();\n      if (!caps) {\n        noLocalSupported = false;\n      } else {\n        // Guard for undefined OR non-boolean capability\n        noLocalSupported = (typeof caps[CapabilityType.NO_LOCAL] === 'boolean') ? caps[CapabilityType.NO_LOCAL] : false;\n      }\n    }\n    return noLocalSupported;\n  }\n\n  /**\n   * Check against an odd router version which OKs logins with TLS downgrade to compression,\n   * but does not actually support it, and just downgrades to plain text instead.\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to parse\n   * @returns {Boolean} false if router should have rejected login for unsupported compressed TLS.\n   * @private\n   */\n  checkCompressedSsl(clientCtrlMsg) {\n    const { LOG_TRACE } = this.logger;\n    if (this._compressedTLS) {\n      const caps = clientCtrlMsg.getRouterCapabilities();\n      if (!caps || typeof caps[CapabilityType.COMPRESSED_SSL] !== 'boolean') {\n        LOG_TRACE('Compressed SSL capability missing.');\n        return false;\n      }\n      return caps[CapabilityType.COMPRESSED_SSL] === true;\n    }\n    return true;\n  }\n\n  /**\n   * Check destination against router capablilities\n   * @param {Destination} destination to verify\n   * @returns {?solace.OperationError} error for caller to throw otherwise null\n   * @private\n   */\n  checkSessionDestinationCapability(destination) {\n    let error = null;\n    if (destination && destination.getType()) {\n      if (destination.getSubscriptionInfo()\n          && (destination.getSubscriptionInfo().isShare\n              || destination.getSubscriptionInfo().isNoExport)\n          && !this._session.isCapable(CapabilityType.SHARED_SUBSCRIPTIONS)) {\n        error = new OperationError(\n          'Shared subscriptions are not allowed by router for this client',\n          ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED,\n          null);\n      }\n    }\n    return error;\n  }\n\n  /**\n   * Clears the current error exit information for the FSM.\n   */\n  clearCurrentError() {\n    this._currentError = null;\n  }\n\n  /**\n   * @private\n   */\n  clearSubscriptionCacheKeys() {\n    this._subscriptionCacheKeys = null;\n  }\n\n  /**\n   * @private\n   */\n  copySubscriptionCacheKeys() {\n    // reapply subscriptions if applicable\n    this.clearSubscriptionCacheKeys();\n    this._subscriptionCacheKeys = Object.keys(this._subscriptionCache || {});\n\n    // Add the P2P Inbox subscription, so the subscriptionCache always has\n    // at least one subscription.\n    const p2pTopic = P2PUtil.getP2PTopicSubscription(this._sessionProperties.p2pInboxBase);\n    this._subscriptionCacheKeys.push(p2pTopic);\n  }\n\n  createMessagePublisher() {\n    const { LOG_DEBUG } = this.logger;\n    if (!this._sessionProperties.publisherProperties.enabled) {\n      LOG_DEBUG('Publisher is disabled');\n      return;\n    }\n\n    const {\n      MessagePublisher,\n      MessagePublisherEventName,\n    } = PublisherLib;\n    const publisher = new MessagePublisher({\n      properties:              this._sessionProperties.publisherProperties,\n      sessionInterfaceFactory: this._flowInterfaceFactory,\n    });\n    publisher.on(\n      MessagePublisherEventName.UP,\n      () => this.processEvent(new SessionFSMEvent(\n        { name: SessionEventName.FLOW_UP },\n        { guaranteedFlowObject: publisher })));\n    publisher.on(\n      MessagePublisherEventName.CONNECT_FAILED_ERROR,\n      event => this.processEvent(\n        new SessionFSMEvent(\n          { name: SessionEventName.FLOW_FAILED },\n          {\n            guaranteedFlowObject: publisher,\n            event,\n            eventText:            event.description,\n          })));\n\n    publisher.on(MessagePublisherEventName.REJECTED_MESSAGE, (message, ctrlMessage) => {\n      const header = ctrlMessage.smfHeader;\n      const respCode = header.pm_respcode;\n      const respText = header.pm_respstr;\n      const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(respCode, respText);\n      const event = SessionEvent.build(SessionEventCode.REJECTED_MESSAGE_ERROR,\n                                       respText,\n                                       respCode,\n                                       errorSubcode,\n                                       message.getCorrelationKey());\n      event['message'] = message; // eslint-disable-line dot-notation\n      this.emitSessionEvent(event);\n    });\n    publisher.on(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, (message) => {\n      const event = SessionEvent.build(SessionEventCode.ACKNOWLEDGED_MESSAGE,\n                                       'Message(s) acknowledged',\n                                       undefined,\n                                       0,\n                                       message.getCorrelationKey());\n      event['message'] = message; // eslint-disable-line dot-notation\n      this.emitSessionEvent(event);\n    });\n    publisher.on(MessagePublisherEventName.FLOW_NAME_CHANGED, (data) => {\n      const { messages, count } = data;\n      if (count > 0) {\n        const event = SessionEvent.build(SessionEventCode.REPUBLISHING_UNACKED_MESSAGES,\n                                         `Republishing ${count} messages due to ` +\n          'Guaranteed Message Publisher failed to reconnect');\n        event['messages'] = messages; // eslint-disable-line dot-notation\n        event['count'] = count; // eslint-disable-line dot-notation\n        this.emitSessionEvent(event);\n      }\n    });\n    publisher.on(MessagePublisherEventName.CAN_SEND, () => {\n      this.emitSessionEvent(\n        SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                           `${publisher} window is now open and can send`));\n    });\n    publisher.on(MessagePublisherEventName.GUARANTEED_MESSAGING_DOWN, () => {\n      this.emitSessionEvent(\n        SessionEvent.build(\n          SessionEventCode.GUARANTEED_MESSAGE_PUBLISHER_DOWN,\n          'Guaranteed Message Publishing shut down'));\n    });\n    this._defaultPublisher = publisher;\n  }\n\n  sendConsumerSessionUpEvent(consumer) {\n    const {\n      ConsumerFSMEvent,\n      ConsumerFSMEventNames,\n    } = ConsumerLib;\n    const isAD = this._session.canConnectConsumer;\n    const event = new ConsumerFSMEvent({\n      name: isAD\n        ? ConsumerFSMEventNames.SESSION_UP\n        : ConsumerFSMEventNames.SESSION_UP_NO_AD,\n    });\n    event.guaranteedFlowObject = consumer;\n    consumer.processFSMEvent(event);\n  }\n\n  sendPublisherSessionUpEvent(publisher) {\n    const isAD = this._session.canConnectPublisher;\n    const event = new PublisherLib.PublisherFSMEvent({\n      name: isAD\n        ? PublisherLib.PublisherFSMEventNames.SESSION_UP\n        : PublisherLib.PublisherFSMEventNames.SESSION_UP_NO_AD,\n    });\n    event.guaranteedFlowObject = publisher;\n    publisher.processFSMEvent(event);\n  }\n\n  /**\n   * Creates a Guaranteed Messaging Subscriber.\n   *\n   * @param {Object|MessageConsumerProperties} properties Properties for the flow.\n   *  Expected fields: {@link solace.MessageConsumerProperties}\n   * @returns {solace.MessageConsumer} The newly constructed consumer\n   * @private\n   */\n  createMessageConsumer(properties) {\n    const { MessageConsumer } = ConsumerLib;\n    const consumer = new MessageConsumer({\n      properties,\n      sessionInterfaceFactory: this._flowInterfaceFactory,\n    });\n    // use the conusmer properties instead of properties to ensure the topicEndpointSubscription\n    // has a Topic object\n    const conusmerProperties = consumer.getProperties();\n    if (conusmerProperties.topicEndpointSubscription) {\n      //check topic supported\n      const error =\n          this.checkSessionDestinationCapability(conusmerProperties.topicEndpointSubscription);\n      if (error) {\n        throw error;\n      }\n    }\n    const info = { guaranteedFlowObject: consumer };\n    // Will be added to the guaranteed flow collection by dispatching\n    this.processEvent(\n      new SessionFSMEvent({ name: SessionEventName.CREATE_SUBSCRIBER }, info)\n    );\n    return consumer;\n  }\n\n/**\n   * Creates a Queue Browser.\n   *\n   * @param {Object|QueueBrowserProperties} properties Properties for the queue browser.\n   *  Expected fields: {@link solace.QueueBrowserProperties}\n   * @returns {solace.QueueBrowser} The newly constructed queue browser\n   * @private\n   */\n  createQueueBrowser(properties) {\n    const { MessageConsumerAcknowledgeMode, QueueBrowser } = ConsumerLib;\n    const { LOG_DEBUG } = this.logger;\n\n    LOG_DEBUG(`Creating queue browser with properties:  ${properties}`);\n\n    const consumerProperties = {};\n    consumerProperties.queueDescriptor = properties.queueDescriptor;\n    consumerProperties.acknowledgeMode = MessageConsumerAcknowledgeMode.CLIENT;\n    consumerProperties.browser = true;\n\n    // Optional properties\n    if (Object.prototype.hasOwnProperty.call(properties, 'connectTimeoutInMsecs')) {\n      consumerProperties.connectTimeoutInMsecs = properties.connectTimeoutInMsecs;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'connectAttempts')) {\n      consumerProperties.connectAttempts = properties.connectAttempts;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'windowSize')) {\n      consumerProperties.windowSize = properties.windowSize;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'transportAcknowledgeTimeoutInMsecs')) {\n      consumerProperties.transportAcknowledgeTimeoutInMsecs =\n        properties.transportAcknowledgeTimeoutInMsecs;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'transportAcknowledgeThresholdPercentage')) {\n      consumerProperties.transportAcknowledgeThresholdPercentage =\n        properties.transportAcknowledgeThresholdPercentage;\n    }\n\n    const consumer = this.createMessageConsumer(consumerProperties);\n    const browser = new QueueBrowser(consumer);\n    return browser;\n  }\n\n  /**\n   * @param {String} msg The status message for the operation\n   * @param {Subcode} subcode The subcode reason for the operation\n   * @private\n   */\n  destroyTransportSession(msg, subcode) {\n    if (Check.nothing(this._transport)) {\n      // Just send the event\n      this.processEvent(\n        new SessionFSMEvent({ name: SessionEventName.TRANSPORT_DESTROYED })\n      );\n      return;\n    }\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    LOG_INFO('Destroy transport session');\n\n    const returnCode = this._transport.destroy(msg, subcode);\n    this._smfClient = null;\n\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      LOG_ERROR(`Failed to destroy transport session, return code: ${\n        TransportLib.TransportReturnCode.describe(returnCode)}`);\n    }\n  }\n\n\n  /**\n   * Release all resources associated with the session.\n   * @private\n   */\n  disposeInternal() {\n    if (this._disposed) {\n      return;\n    }\n\n    const operations = {\n      'transport': () => {\n        this.destroyTransportSession('Disposing', 0);\n        this._transport = null;\n        this._smfClient = null;\n      },\n      'session': () => {\n        this.cleanupSession();\n        this._session = null;\n        this._sessionProperties = null;\n        this._correlatedReqs = null;\n        this._flowInterfaceFactory = null;\n      },\n      'statistics': () => {\n        if (this._sessionStatistics) {\n          this._sessionStatistics.resetStats();\n          this._sessionStatistics = null;\n        }\n        this._kaStats = null;\n      },\n      'subscription cache': () => {\n        if (this._subscriptionCache) {\n          Object.keys(this._subscriptionCache).forEach(\n            key => this.removeFromSubscriptionCache(key)\n          );\n          this._subscriptionCache = null;\n        }\n        this.clearSubscriptionCacheKeys();\n        this._subscriptionCacheCount = 0;\n      },\n      'MessagePublishers': () => {\n        if (this._defaultPublisher) {\n          this._defaultPublisher.dispose();\n          this._defaultPublisher = null;\n        }\n      },\n      'MessageConsumers': () => {\n        this._consumers.disposeAll();\n        this._consumers = null;\n      },\n      'host list': () => {\n        this._currentHost = null;\n        this._hosts = null;\n      },\n    };\n\n    Object.keys(operations).forEach((operationKey) => {\n      const { LOG_TRACE, LOG_INFO } = this.logger;\n      const operation = operations[operationKey];\n      try {\n        LOG_TRACE(`Dispose: ${operationKey}`);\n        operation();\n        LOG_TRACE(`Dispose: ${operationKey} succeeded`);\n      } catch (ex) {\n        LOG_INFO(`Dispose: ${operationKey} failed:`, ex, '...continuing');\n      }\n    });\n    this._disposed = true;\n  }\n\n  emitSessionEvent(event) {\n    // Don't log here; callee does it\n    this._session.sendEvent(event);\n  }\n\n  /**\n   * @param {Number} correlationTag The correlation tag\n   * @param {function} reqTimeoutCb The timeout callback\n   * @param {Number} reqTimeout The timeout in milliseconds\n   * @param {Object} correlationKey The correlation key\n   * @param {function} respRecvCallback The success callback\n   * @private\n   */\n  enqueueOutstandingCorrelatedReq(correlationTag,\n                                  reqTimeoutCb,\n                                  reqTimeout,\n                                  correlationKey,\n                                  respRecvCallback) {\n    if (Check.nothing(correlationTag)) {\n      return;\n    }\n\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`Enqueue outstanding ctrl request correlationTag=${correlationTag}`);\n    let timer = null;\n    if (reqTimeoutCb) {\n      timer = setTimeout(reqTimeoutCb, reqTimeout || this._sessionProperties.readTimeoutInMsecs);\n    }\n\n    const outstandingReq = new CorrelatedRequest(correlationTag,\n      timer,\n      correlationKey,\n      respRecvCallback);\n    this._correlatedReqs[correlationTag] = outstandingReq;\n  }\n\n  /**\n   * @param {String} errorEventText Description of the error\n   * @param {ErrorSubcode} errorSubcode Subcode for the error\n   * @param {String} [eventReason] The reason for the error\n   * @returns {undefined}\n   * @memberof SessionFSM\n   * @private\n   */\n  errorInFsm(errorEventText, errorSubcode, eventReason = null) {\n    const { LOG_INFO } = this.logger;\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.EXCEPTION });\n    LOG_INFO(`Handling error in FSM: ${errorEventText} ${eventReason && eventReason.stack}`);\n    this.setCurrentError({\n      eventText: errorEventText,\n      errorSubcode,\n      eventReason,\n    });\n    return this.processEvent(sEvent);\n  }\n\n  flushTransportSession(callback) {\n    if (this._transport) {\n      this._transport.flush(callback);\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * @returns {Number} The next correlation tag\n   * @private\n   */\n  getCorrelationTag() {\n    return this._smfClient.nextCorrelationTag();\n  }\n\n  /**\n   * Get current state name\n   * @returns {String} The name of the current state, or SessionStateName.DISPOSED if the\n   *  FSM is terminated\n   * @private\n   */\n  getCurrentStateName() {\n    const currentState = this.getCurrentState();\n\n    if (!currentState) return null;\n    if (currentState === this.getFinalState()) return SessionStateName.DISPOSED;\n    return this.getCurrentState().getName();\n  }\n\n  /**\n   * Returns the value of a given {@link StatType}.\n   *\n   * @param {StatType} statType The statistic to query.\n   * @returns {?Number} The value for the given stat, if available\n   * @private\n   */\n  getStat(statType) {\n    if (this._sessionStatistics === undefined) {\n      return undefined;\n    }\n    //\n    // TX_TOTAL_DATA_MSGS and TX_TOTAL_DATA_BYTES are summary counters\n    // These stats are calculated as the sum of DIRECT/PERSISTENT/NONPERSISTENT\n    // counters.  This is by design since day one.  As such they do not include\n    // the count of redelivered messages/bytes as TX_PERSISTENT_MSGS and TX_NONPERSISTENT_MSGS\n    // only includes the counts of messages successfully delivered. This is not consistent\n    // with receive stats but it is what it is. This definition is consistent with the other\n    // existing APIs (CCSMP and JCSMP).\n    //\n    if (statType === StatType.TX_TOTAL_DATA_MSGS) {\n      return this._sessionStatistics.getStat(StatType.TX_DIRECT_MSGS) +\n        this._sessionStatistics.getStat(StatType.TX_PERSISTENT_MSGS) +\n        this._sessionStatistics.getStat(StatType.TX_NONPERSISTENT_MSGS);\n    } else if (statType === StatType.TX_TOTAL_DATA_BYTES) {\n      return this._sessionStatistics.getStat(StatType.TX_DIRECT_BYTES) +\n        this._sessionStatistics.getStat(StatType.TX_PERSISTENT_BYTES) +\n        this._sessionStatistics.getStat(StatType.TX_NONPERSISTENT_BYTES);\n    }\n    return this._sessionStatistics.getStat(statType);\n  }\n\n  /**\n   * Gets a transport session information string.\n   * This string is informative only, and applications should not attempt to parse it.\n   *\n   * @returns {String} The current status of the transport\n   */\n  getTransportInfo() {\n    if (Check.nothing(this._transport)) {\n      return 'Not connected.';\n    }\n    return this._transport.getInfoStr();\n  }\n\n  /**\n   * Handle an AD CTRL message given the message, its header, and the previously-identified\n   * candidate flow, which is used if the message has no correlation tag.\n   *\n   * @param {AdProtocolMessage} message The message to handle\n   * @param {SMFHeader} header The header of the message\n   * @returns {SessionFSM} This FSM.\n   * @private\n   */\n  handleADCtrlMessage(message, header) {\n    const flowId = message.getFlowId();\n    const respText = header.pm_respstr;\n    const correlationTag = header.pm_corrtag;\n    const { LOG_INFO, LOG_DEBUG, LOG_WARN } = this.logger;\n\n    if (correlationTag) {\n      // Correlation tag is non-null\n      // Session handles correlated request-reply\n      this.updateRxStats(message);\n\n      LOG_INFO(`Handle SMF response for correlationTag ${correlationTag}`);\n      // find matching correlationTag to cancel timer\n      const cancelledRequest = this.cancelOutstandingCorrelatedReq(correlationTag);\n      if (Check.nothing(cancelledRequest)) {\n        return this.errorInFsm(`Cannot find matching request for response: ${respText}`,\n                               ErrorSubcode.INTERNAL_ERROR);\n      }\n\n      if (cancelledRequest.respRecvdCallback) {\n        // call callback referenced by cancelledRequest\n        // login or update property\n        cancelledRequest.respRecvdCallback(message, cancelledRequest);\n        return this;\n      }\n\n      LOG_DEBUG(`Dropping ADCTRL message due to mismatched correlation tag ${correlationTag}`);\n      this.incStat(StatType.RX_REPLY_MSG_DISCARD);\n      return this;\n    }\n\n    // Unsolicited control message\n    let flow;\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.CLIENTACK:\n      case SMFAdProtocolMessageType.CLIENTNACK:\n      case SMFAdProtocolMessageType.CLOSEPUBFLOW:\n        if (this._defaultPublisher.flowId === flowId) {\n          flow = this._defaultPublisher;\n        } // else drop.\n        break;\n      default:\n        flow = this._consumers.getFlowById(flowId);\n    }\n\n    if (flow && !flow.disposed) {\n      // Found a matching flow\n      this.updateRxStats(message, flow);\n      flow.handleUncorrelatedControlMessage(message);\n      return this;\n    }\n\n    // No matching flow\n    const response = message.getResponse();\n    const rc = response ? `\"${response.responseCode} ${response.responseString}\" ` : '';\n    LOG_WARN(\n      `Dropping ADCTRL.${SMFLib.SMFAdProtocolMessageType.describe(message.msgType)\n      } ${rc}for unknown flow ${flowId}`\n    );\n    this.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n\n    return this;\n  }\n\n  /**\n   * @param {solace.Message} message The AD data message to handle\n   * @param {SMFHeader} header The header for the message\n   * @returns {MessageConsumer} The flow that handled the message, or `null`\n   * @private\n   */\n  handleADTrMessage(message, header) {\n    const { LOG_DEBUG } = this.logger;\n    const flowId = header.pm_ad_flowid;\n    // Get a flow from that ID if possible.\n    const flow = this._consumers.getFlowById(flowId);\n    if (!flow || flow.disposed) {\n      LOG_DEBUG('Dropped incoming AD message for ' +\n                `${flow ? 'disposed' : 'unknown'} flow ID ${flowId}`);\n      this.updateRxStats(message, this._sessionStatistics);\n      this.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n      return null;\n    }\n    this.updateRxStats(message, flow);\n    flow.handleDataMessage(message);\n    return flow;\n  }\n\n  /**\n   * @param {String} correlationTag The correlation tag for the timed out subscription request\n   * @param {String} [timeoutMsg] The reason for the timeout\n   * @private\n   */\n  handleApiSubscriptionTimeout(correlationTag, timeoutMsg) {\n    // remove request from queue\n    if (this._correlatedReqs[correlationTag] === undefined ||\n        this._correlatedReqs[correlationTag] === null) {\n      return;\n    }\n\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    LOG_INFO(`${timeoutMsg || 'Subscription timeout'} for correlationTag=${correlationTag}`);\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}, exception: ${e.message}`);\n    }\n  }\n\n  /**\n   * @param {ClientCtrlMessage} message The message to handle\n   * @param {SMFHeader} header The header from the message\n   * @returns {undefined}\n   * @private\n   */\n  handleClientCtrlMessage(message, header) {\n    let correlationTag;\n    const { LOG_INFO } = this.logger;\n    this.updateRxStats(message);\n    if (message.msgType === SMFLib.SMFClientCtrlMessageType.LOGIN) {\n      // Currently, login requests don't use a correlation tag.\n      // Using here a fake internal one to match the request.\n      correlationTag = TransportLib.SMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG;\n      LOG_INFO('Handle SMF response for ClientCTRL Login');\n    } else {\n      correlationTag = header.pm_corrtag;\n      LOG_INFO(`Handle SMF response for correlationTag ${correlationTag}`);\n    }\n    // find matching correlationTag to cancel timer\n    const cancelledRequest = this.cancelOutstandingCorrelatedReq(correlationTag);\n    if (Check.nothing(cancelledRequest)) {\n      const respText = header.pm_respstr;\n      return this.errorInFsm(`Cannot find matching request for response: ${respText}`,\n                             ErrorSubcode.INTERNAL_ERROR);\n    } else if (cancelledRequest.respRecvdCallback) {\n      // call callback referenced by cancelledRequest\n      // login or update property\n      return cancelledRequest.respRecvdCallback(message);\n    }\n\n    LOG_INFO(`Dropping ClientCtrl message due to mismatched correlation tag ${correlationTag}`);\n    return this.incStat(StatType.RX_REPLY_MSG_DISCARD);\n  }\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to handle\n   * @private\n   */\n  handleClientCtrlResponse(clientCtrlMsg) {\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_PROTOCOL_CLIENTCTRL });\n    sEvent.smfMsg = clientCtrlMsg;\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * @private\n   */\n  handleClientCtrlTimeout() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('ClientCtrl timeout for session');\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.DOWNGRADE_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n\n  /**\n   * @private\n   */\n  handleConnectTimeout() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Connection timeout. Disconnecting');\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.CONNECT_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * Handle control request timeout\n   * @param {String} correlationTag The correlation tag for the timed out operation\n   * @param {String} timeoutMsg The message associated with the timeout\n   * @private\n   */\n  handleUpdatePropertyTimeout(correlationTag, timeoutMsg) {\n    const { LOG_ERROR } = this.logger;\n    // remove request from queue\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}, exception: ${e.message}`);\n    }\n\n    // notify client\n    const sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                            timeoutMsg,\n                                            null,\n                                            ErrorSubcode.TIMEOUT,\n                                            null,\n                                            null);\n    this.sendEvent(sessionEvent);\n  }\n\n  /**\n   * @param {SMFHeader} header The header from the rejected message\n   * @private\n   */\n  handleRejectedTrMessage(header) {\n    // It is trmsg response. For direct message, it must be a failure response\n    const respCode = header.pm_respcode;\n    // Strip a trailing null character.\n    const topicNameRaw = header.pm_tr_topicname_bytes;\n    const topicName = topicNameRaw ? topicNameRaw.replace(/\\0/g, '') : '';\n    const respText = header.pm_respstr;\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n    this.emitSessionEvent(SessionEvent.build(\n      SessionEventCode.REJECTED_MESSAGE_ERROR,\n      respText,\n      respCode,\n      errorSubcode,\n      null, //correlation key\n      `Topic: ${topicName}`)\n    );\n  }\n\n  /**\n   * @param {solace.Message} message The SMF message to handle\n   * @returns {undefined}\n   * @private\n   */\n  handleSMFMessage(message) {\n    try {\n      // Stats for this message might affect both the session and the flow. Need to\n      // determine where the message is handled before handling stats.\n      // Some ADCTRL messages have no flow ID but only a correlation tag.\n      // These are OPENFLOW and we count them as handled by the session.\n\n      const header = message.smfHeader;\n\n      if (header.discardMessage) {\n        // UH==2 on an unknown parameter\n        if (this._sessionStatistics) {\n          this._sessionStatistics.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n        }\n        // do nothing.\n        return null;\n      }\n\n      // Each message type handler must call this.updateRxStats(message, target).\n      // The direct/TRmsg path includes the call here in the switch.\n      switch (header.smf_protocol) {\n        case SMFLib.SMFProtocol.TRMSG:\n          if (header.smf_adf) {\n            return this.handleADTrMessage(message, header);\n          }\n          this.updateRxStats(message, this._sessionStatistics);\n          return header.pm_respcode === 0\n            ? this._session.handleDataMessage(message)\n            : this.handleRejectedTrMessage(header);\n\n        case SMFLib.SMFProtocol.ADCTRL:\n          return this.handleADCtrlMessage(message, header);\n\n        case SMFLib.SMFProtocol.CLIENTCTRL:\n          return this.handleClientCtrlMessage(message, header);\n\n        case SMFLib.SMFProtocol.SMP:\n          return this.handleSMPMessage(message, header);\n\n        case SMFLib.SMFProtocol.KEEPALIVE:\n        case SMFLib.SMFProtocol.KEEPALIVEV2:\n          // do nothing\n          return null;\n\n        default:\n          return this.handleUnknownProtocolMessage(message, header);\n      }\n    } catch (e) {\n      const { LOG_ERROR } = this.logger;\n      LOG_ERROR(`Exception in handleSMFMessage, exception: ${e.stack}`);\n      return this.errorInFsm(`Exception in handleSMFMessage: ${e.message}`,\n                             e.subcode || ErrorSubcode.INTERNAL_ERROR,\n                             e);\n    }\n  }\n\n  /**\n   * @param {TransportError} transportError The SMF parsing error passed from the transport\n   * @returns {undefined}\n   * @private\n   */\n  handleSMFParseError(transportError) {\n    // fatal connection error\n\n    // notify client\n    return this.errorInFsm(transportError,\n                           ErrorSubcode.PROTOCOL_ERROR);\n  }\n\n  handleSMPMessage(message, header) {\n    this.updateRxStats(message);\n\n    // find matching correlationTag to cancel timer\n    const cancelledRequest = this.cancelOutstandingCorrelatedReq(header.pm_corrtag || '');\n    /*\n     * If we find the correlationTag and it has a callback associated with it\n     * then call that callback.  It is likely calling back straight to the application\n     * due to a call to session.subscribe() or session.unsubscribe() or\n     * session.updateProperty().\n     * Otherwise just send a TRANSPORT_PROTOCOL_SMP event to the FSM.\n     */\n    if (Check.nothing(cancelledRequest) || Check.nothing(cancelledRequest.respRecvdCallback)) {\n      /*\n       * correlation tag not found, probably an error response to a subscription\n       * request that did not request-confirm,  or it could be one of the\n       * FSM generated subscriptions and the callback is the anonymous function\n       * in state WaitingForSubConfirmm\n       */\n      const sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_PROTOCOL_SMP });\n      sEvent.smfMsg = message;\n      return this.processEvent(sEvent);\n    }\n\n    // calling through the callback, this should  be a callback in the _session for\n    // applicated generated subscribe/unsubscribe/updateProperty(clientName)\n    return cancelledRequest.respRecvdCallback(message, cancelledRequest);\n  }\n\n  /**\n   * @param {Number} respCode The router response code\n   * @param {String} respText The router response text\n   * @param {String} subscriptionStr The subscription cache key\n   * @param {CorrelatedRequest} request The associated request\n   * @param {Boolean} confirm Whether the user wanted confirmation for the request\n   * @private\n   */\n  handleSubscriptionUpdateError(respCode, respText, subscriptionStr, request, confirm) {\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n\n    //\n    // if it is a not-found or already-present error, it does not affect our subscription\n    // cache, otherwise remove it from the cache.\n    //\n    if (!(errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT ||\n      errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND)) {\n      // remove from cache\n      this.removeFromSubscriptionCache(subscriptionStr);\n    }\n\n    //\n    // notify the client\n    //\n    this._session.handleSubscriptionUpdateError(respCode,\n                                                respText,\n                                                subscriptionStr,\n                                                request,\n                                                confirm);\n  }\n\n  /**\n   * @param {String} correlationTag The correlation tag for the timed out request\n   * @private\n   */\n  handleSubscriptionTimeout(correlationTag) {\n    // remove request from queue\n    const { LOG_ERROR } = this.logger;\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`, e);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.SUBSCRIBE_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * @param {TransportSessionEvent} transportEvent The event to handle\n   * @returns {undefined}\n   * @private\n   */\n  handleTransportEvent(transportEvent) {\n    const { LOG_INFO, LOG_WARN } = this.logger;\n    const infoStr = transportEvent.getInfoStr() || '';\n    LOG_INFO(`Receive transport event: ${transportEvent}`);\n\n    let sEvent;\n\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportLib.TransportSessionEventCode.UP_NOTICE:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_UP });\n        sEvent.sessionId = transportEvent.getSessionId();\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.DESTROYED_NOTICE:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_DESTROYED });\n        sEvent.sessionId = transportEvent.getSessionId();\n        sEvent.eventText = infoStr;\n        sEvent.errorSubcode = transportEvent.getSubcode();\n        sEvent.eventReason = transportEvent;\n        this._smfClient = null; // calling reset does nothing useful here\n        this._transport = null; // transport has been destroyed\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.CAN_ACCEPT_DATA:\n        //\n        // unblock the publisher too\n        this.GuaranteedFlowControlledRelief();\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_CAN_ACCEPT_DATA });\n        sEvent.sessionId = transportEvent.getSessionId();\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.SEND_ERROR:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.SEND_ERROR });\n        sEvent.sessionId = transportEvent.getSessionId();\n        sEvent.eventText = transportEvent.getInfoStr();\n        sEvent.errorSubcode = transportEvent.getSubcode();\n        sEvent.eventReason = transportEvent;\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.DATA_DECODE_ERROR:\n      case TransportLib.TransportSessionEventCode.PARSE_FAILURE:\n        // fatal connection error\n        return this.errorInFsm(transportEvent.getInfoStr(),\n                               transportEvent.getSubcode());\n      default:\n        LOG_WARN('Received unknown transport session event', transportEvent);\n    }\n\n    return true;\n  }\n\n  /**\n   * @param {BaseMessage|Message} message The message to handle\n   * @param {SMFHeader} [header] The SMF header from the message, if available\n   * @returns {undefined}\n   * @private\n   */\n  handleUnknownProtocolMessage(message, header) {\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    // unknown protocol\n    this.updateRxStats(message);\n    if (header && header.smf_protocol === SMFLib.SMFProtocol.TSESSION) {\n      // change state\n      LOG_ERROR(`Received transport session message instead of SMF message, protocol 0x${\n        formatHexString(header.smf_protocol)}`);\n      LOG_ERROR(`Transport MessageType=${message.messageType}, target sessionId=${\n        formatHexString(message.sessionId)}`);\n      // notify client\n      return this.errorInFsm('Received message with unknown protocol',\n                             ErrorSubcode.PARSE_FAILURE);\n    }\n\n    // Drop message of unknown protocol and increment stats\n    if (this._sessionStatistics) {\n      this._sessionStatistics.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n    }\n    LOG_INFO(`Drop message with unknown protocol 0x${formatHexString(header.smf_protocol)}`);\n    return null;\n  }\n\n\n  /**\n   * Increments a session statistic\n   *\n   * @param {StatType} statType The key to increment\n   * @param {?Number} value The amount to increment the value by\n   * @returns {?Number} The new value for the statistic\n   * @private\n   */\n  incStat(statType, value) {\n    return this._sessionStatistics ? this._sessionStatistics.incStat(statType, value) : undefined;\n  }\n\n  /**\n   * @private\n   */\n  initTransport() {\n    const { LOG_INFO } = this.logger;\n    const host = this._currentHost;\n    LOG_INFO(`Creating transport session ${host}`);\n    this._kaStats = { lastMsgWritten: 0, lastBytesWritten: 0 };\n\n    this._smfClient = new TransportLib.SMFClient(\n      rxData => this.handleSMFMessage(rxData),\n      rxError => this.handleSMFParseError(rxError),\n      this\n    );\n\n    this._transport = TransportLib.TransportFactory.createTransport(\n      host,\n      transportEvent => this.handleTransportEvent(transportEvent),\n      this._smfClient,\n      this._sessionProperties.clone(),\n      () => this.sessionIdHex\n    );\n    this.injectTransportInterceptor(this._transportInterceptor);\n  }\n\n  /**\n   * Installs a transport interceptor for the current and any future transports.\n   *\n   * The object methods .installed(instance) and .removed(instance) will be called if present, with\n   * the transport instance as a parameter.\n   *\n   * To stop using transport interceptors, supply a null interceptor argument.\n   *\n   * @param {Object} interceptor An object given access to the internals of the transport instance.\n   * @private\n   */\n  injectTransportInterceptor(interceptor) {\n    this._transportInterceptor = interceptor;\n    if (this._transport) {\n      this._transport.setInterceptor(interceptor);\n    }\n  }\n\n  /**\n   * Call from keep alive scheduled task\n   * @returns {undefined}\n   * @private\n   */\n  keepAliveTimeout() {\n    const { LOG_TRACE, LOG_DEBUG, LOG_INFO } = this.logger;\n    LOG_TRACE('KeepAlive timeout');\n\n    // session is in connected state but hasn't received keep alive response\n    // Less than or equal to because this is the number of *already sent* KAs\n    if (this._keepAliveCounter >= this._sessionProperties.keepAliveIntervalsLimit) {\n      LOG_INFO(`Exceed maximum keep alive intervals limit ${\n                this._sessionProperties.keepAliveIntervalsLimit}`);\n      // stop timers\n      LOG_DEBUG('Stop keep alive timer');\n      if (this._keepAliveTimer) {\n        clearInterval(this._keepAliveTimer);\n      }\n\n      // change session state\n      return this.errorInFsm('Exceed maximum keep alive intervals limit',\n                             ErrorSubcode.KEEP_ALIVE_FAILURE);\n    }\n\n    LOG_TRACE('About to send keep alive');\n\n    const clientStats = this._transport.getClientStats();\n    const prestatMsgWritten = clientStats.msgWritten;\n    const prestatBytesWritten = clientStats.bytesWritten;\n\n    const kaMsg = new SMFLib.KeepAliveMessage();\n    const returnCode = this.send(kaMsg, null, true);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      /*\n       * TransportReturnCode.NO_SPACE is not possible.\n       * Send is called with the forceAllowEnqueue parameter.\n       * So whatever error is returned is fatal\n       */\n      return this.errorInFsm('Cannot send keep alive message',\n                             ErrorSubcode.KEEP_ALIVE_FAILURE);\n    }\n\n    // We need to avoid incrementing the KA counter if we're in the process of\n    // sending a huge message and we've had no opportunity to write a KA message.\n    // Detection: last KA's snapshot of messages written is unchanged, but number of bytes\n    // written has gone up.\n    if (this._kaStats.lastMsgWritten === prestatMsgWritten &&\n      this._kaStats.lastBytesWritten < prestatBytesWritten) {\n      LOG_DEBUG('Keep alive sent',\n                'Not incrementing keep alive counter due to large message send',\n                `KA count = ${this._keepAliveCounter}`\n      );\n    } else {\n      this._keepAliveCounter++;\n      LOG_TRACE(`Last message written: ${this._kaStats.lastMsgWritten}`);\n      LOG_TRACE(`Last bytes written: ${this._kaStats.lastBytesWritten}`);\n      LOG_TRACE(`Keep alive sent, increment keep alive counter, keep alive count = ${\n        this._keepAliveCounter}`);\n    }\n    this._kaStats.lastBytesWritten = clientStats.bytesWritten;\n    this._kaStats.lastMsgWritten = clientStats.msgWritten;\n\n    return true;\n  }\n\n  /**\n   * Prepares a message for sending and then invoke the transport\n   * send method. For guaranteed messages, pass the transport send\n   * method to the publisher so it can be invoked from there and errors\n   * handled within the publisher FSM.\n   * @param {BaseMessage} message The message to prepare.\n   * @private\n   */\n  prepareAndSendMessage(message) {\n    if (message instanceof Message) {\n      let returnCode;\n      // Delegate message preparation where appropriate\n      const deliveryMode = message.getDeliveryMode();\n      switch (deliveryMode) {\n\n        case MessageDeliveryModeType.DIRECT:\n          if (!this._transport) return;\n          message._payload_is_memoized = false;\n          message._memoized_csumm = null;\n          message._memoized_payload = null;\n          returnCode = this.sendToTransport(message);\n          break;\n\n        case MessageDeliveryModeType.PERSISTENT:\n        case MessageDeliveryModeType.NON_PERSISTENT:\n          if (!this._defaultPublisher) {\n            const reason = this._session.adLocallyDisabled\n                ? 'locally disabled'\n                : 'remotely unsupported';\n            throw new OperationError('Session does not provide Guaranteed Message Publish capability',\n                                       ErrorSubcode.GM_UNAVAILABLE,\n                                       reason);\n          } else {\n            if (this._gmSendDisallowed) this._gmSendDisallowed(); // throws if present\n            returnCode = this._defaultPublisher.prepareAdMessageAndSend(message);\n          }\n          break;\n\n        default: {\n          const { LOG_ERROR } = this.logger;\n          LOG_ERROR('Unhandled message delivery mode', MessageDeliveryModeType.describe(deliveryMode));\n        }\n      }\n\n      if (returnCode !== TransportLib.TransportReturnCode.OK) {\n        if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n          // Must be DIRECT message because the Publisher handles NO_SPACE returnCode\n          // internally\n          this._userBackpressured = true;\n          throw new OperationError('Cannot send message - no space in transport',\n            ErrorSubcode.INSUFFICIENT_SPACE,\n            TransportLib.TransportReturnCode.describe(returnCode));\n        }\n\n        // This is a fatal session error\n        this.setCurrentError(new OperationError('Cannot send message',\n            ErrorSubcode.INVALID_OPERATION,\n            TransportLib.TransportReturnCode.describe(returnCode)));\n        this.processEvent(new SessionFSMEvent({ name: SessionEventName.EXCEPTION }));\n      }\n    }\n  }\n\n  GuaranteedFlowControlledRelief() {\n    if (this._defaultPublisher) {\n      this._defaultPublisher.processFSMEvent(\n        new PublisherLib.PublisherFSMEvent({\n          name: PublisherLib.PublisherFSMEventNames.CAN_SEND }));\n    }\n  }\n  /**\n   * Reapply subscriptions.\n   * @returns {Boolean} True if all subscriptions were reapplied. False if WOULD_BLOCK.\n   * @private\n   */\n  reapplySubscriptions() {\n    const { LOG_INFO, LOG_DEBUG } = this.logger;\n    const { SolclientFactory: { createTopicDestination } } = SolclientFactoryLib;\n    LOG_INFO(`Reapplying subscriptions, count=${this._subscriptionCacheKeys.length}`);\n    // add subscriptions and ask for confirm on last one\n\n    if (!this._subscriptionCacheKeys) {\n      // Nothing to do\n      return true;\n    }\n\n    try {\n      while (this._subscriptionCacheKeys.length) {\n        //\n        // The key is the the topic string (topic.getName()).\n        // sendSubscribe() requires a destination, so we encode it here.\n        //\n        // on entry to reapplySubscriptions we added the P2P topic to\n        // subscriptionCacheKeys but there is no corresponding entry in\n        // _subscriptionCache so we no longer use the key to index that actual\n        // cache.\n        // If it becomes necesary to pass the Topic object to sendSubscribe in a\n        // a future enhancement (perhaps to remember flags like request-confirm) then\n        // this logic here needs to be revisisted.\n        const key = this._subscriptionCacheKeys.shift();\n        const requestConfirmation = this._subscriptionCacheKeys.length === 0;\n        const topicDestination = createTopicDestination(key);\n        const rc = this.sendSubscribe(topicDestination,\n                                      requestConfirmation,\n                                      null,\n                                      this._sessionProperties.readTimeoutInMsecs,\n                                      null);\n        if (rc !== TransportLib.TransportReturnCode.OK) {\n          this.errorInFsm(\n            `Error occurred sending subscription: ${TransportLib.TransportReturnCode.describe(rc)}`,\n            ErrorSubcode.INTERNAL_ERROR\n          );\n        }\n      }\n    } catch (e) {\n      if (e instanceof OperationError && e.subcode === ErrorSubcode.INSUFFICIENT_SPACE) {\n        LOG_DEBUG('Apply subscriptions blocked due to insufficient space, wait for can accept data event');\n        return false;\n      }\n      this.errorInFsm(`Unexpected expection occurred while reapplying subscriptions: ${e}`,\n                      e.subcode || ErrorSubcode.INTERNAL_ERROR,\n                      e);\n    }\n    return true;    // sent all subscriptions\n  }\n\n\n  /**\n   * @param {Destination} topic The topic to remove from the subscription cache\n   * @returns {?Destination} The value in the subscription cache at that key\n   * @private\n   */\n  removeFromSubscriptionCache(topic) {\n    if (Check.nothing(topic) || !this._subscriptionCache) {\n      return null;\n    }\n\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    const key = (topic instanceof Destination) ? topic.name : topic;\n    LOG_DEBUG(`Remove subscription ${key}`);\n    const sub = this._subscriptionCache[key];\n    if (sub === undefined || sub === null) {\n      return null;\n    }\n\n    try {\n      const result = delete this._subscriptionCache[key];\n      if (!result) {\n        LOG_ERROR(`Cannot remove subscription ${key}`);\n      } else {\n        this._subscriptionCacheCount--;\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot remove subscription ${key}`, e);\n    }\n    return sub;\n  }\n\n\n  /**\n   * Reset the FSM state and release all objects. This method is called once from\n   * SessionFSM.onInitial\n   * @private\n   */\n  reset() {\n    this.resetStats();\n\n    /**\n     * The following fields are disposed when disconnect is called\n     * and recreated when connect is called again.\n     */\n    this.sessionId = null;\n\n    // Need to reschedule keepAliveTimer when some other write operation happens\n    this._keepAliveTimer = null;\n    this.resetKeepAliveCounter();\n    this._correlatedReqs = {};\n\n    this._disposed = false;\n\n    this._smfClient = null;\n    this._kaStats = { lastMsgWritten: 0, lastBytesWritten: 0 };\n\n    /**\n     * The following fields are destroyed when dispose is called\n     * and cannot be reinitialized.\n     */\n    this._subscriptionCache = null;\n    this._subscriptionCacheKeys = null;\n    this._subscriptionCacheCount = 0;\n    if (this._sessionProperties.reapplySubscriptions) {\n      this._subscriptionCache = {};\n    }\n\n    // When negotiating the initial transport, we can fail and transparently reconnect.\n    // this.resetTransportProtocolHandler();\n    // this._lastKnownGoodTransport = null;\n\n    // event and error information\n    this._eventCode = null;\n    this._responseCode = null;\n    this.eventText = null;\n    this.errorSubcode = null;\n    this.eventReason = null;\n  }\n\n  /**\n   * @private\n   */\n  resetKeepAliveCounter() {\n    // Reset the KA counter. Called by the SMFClient on each SMF chunk received (whether full\n    // message or not).\n    this._keepAliveCounter = 0;\n  }\n\n  /**\n   * @returns {?} The result of calling resetStats().\n   * @private\n   */\n  resetStats() {\n    return this._sessionStatistics ? this._sessionStatistics.resetStats() : undefined;\n  }\n\n\n  /**\n   * Schedule keep alive task\n   * @private\n   */\n  scheduleKeepAlive() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    const { keepAliveIntervalInMsecs } = this._sessionProperties;\n    if (keepAliveIntervalInMsecs === 0) {\n      // Keepalives disabled\n      return;\n    }\n\n    if (this._keepAliveTimer) {\n      clearInterval(this._keepAliveTimer);\n    }\n\n    this._keepAliveTimer = setInterval(() => {\n      try {\n        this.keepAliveTimeout();\n      } catch (e) {\n        LOG_ERROR('Error occurred in keepAliveTimeout', e);\n      }\n    }, keepAliveIntervalInMsecs);\n\n    LOG_DEBUG(`Create Keepalive timer with interval: ${keepAliveIntervalInMsecs}ms`);\n  }\n\n  /**\n   * Provide a method for the session object to use to send\n   * messages to the transport.  This method is only used internally by\n   * the FSM.  The session send() API should invoke sendToTransport() directly\n   * so errors are thrown back to the application.\n   *\n   * @param {solace.Message} message The message to send\n   * @param {Object} [statTarget=this._sessionStatistics] The sender of this message, for stats.\n   * @param {Boolean} [forceAllowEnqueue=false] Set to true to force enqueueing of control messages\n   *\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  send(message, statTarget = this._sessionStatistics, forceAllowEnqueue = false) {\n    try {\n      return this.sendToTransport(message, statTarget, forceAllowEnqueue);\n    } catch (ex) {\n      const { LOG_TRACE } = this.logger;\n      // The send operation threw (or we threw locally), which is always a SessionException.\n      LOG_TRACE(`Error sending message: ${ex.message}: ${ex.stack}`);\n      this.errorInFsm(`Send operation failed: ${ex.message}`,\n                      ex.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    return TransportLib.TransportReturnCode.CONNECTION_ERROR;\n  }\n\n  /**\n   * Provide a method for the session object to use to send\n   * messages to the transport.\n   *\n   * @param {solace.Message} message The message to send\n   * @param {Object} [statTarget=this._sessionStatistics] The sender of this message, for stats.\n   * @param {Boolean} [forceAllowEnqueue=false] Set to true to force enqueueing of control messages\n   *\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendToTransport(message, statTarget = this._sessionStatistics, forceAllowEnqueue = false) {\n    let returnCode = TransportLib.TransportReturnCode.CONNECTION_ERROR;\n\n    if (!this._transport) {\n      throw new OperationError('Transport has been destroyed', ErrorSubcode.INTERNAL_ERROR);\n    }\n    const content = SMFLib.Codec.Encode.encodeCompoundMessage(message);\n    returnCode = this._transport.send(content, forceAllowEnqueue);\n    switch (returnCode) {\n      case TransportLib.TransportReturnCode.OK:\n        this.updateTxStats(message, statTarget);\n        break;\n      case TransportLib.TransportReturnCode.NO_SPACE:\n        if (!forceAllowEnqueue) {\n          // This is allowed.\n          break;\n        }\n      // Else fall through\n      default:\n        throw new OperationError(`Transport returned ${TransportLib.TransportReturnCode.describe(returnCode)}`,\n          ErrorSubcode.INTERNAL_ERROR);\n    }\n\n    return returnCode;\n  }\n\n\n  /**\n   * Initiates the ClientCtrl handshake, called from transportSessionEvent callback\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendClientCtrlLogin() {\n    const { LOG_INFO, LOG_DEBUG, LOG_TRACE } = this.logger;\n\n    this._compressedTLS =\n      ((this._sessionProperties.compressionLevel > 0) &&\n        (this._currentHost.match(/tcps:/i) !== null));\n    this._plaintextTLS =\n      ((this._currentHost.match(/tcps:/i) !== null) &&\n        (this._sessionProperties.sslConnectionDowngradeTo === SslDowngrade.PLAINTEXT));\n    LOG_TRACE(`sendClientLogin plaintextTLS: ${this._plaintextTLS} _compressedTLS: ${this._compressedTLS}`);\n\n    // Don't use the correlation tag. For Login only, the router won't return it.\n    const clientCtrlMsg = SMFLib.ClientCtrlMessage.getLogin(this._sessionProperties,\n                                                            this._compressedTLS,\n                                                            this._plaintextTLS);\n    const returnCode = this.send(clientCtrlMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      this._responseCode = null;\n      this.eventReason = null;\n      // notify client\n      if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n        this.eventText = 'Cannot send client control - no space in transport';\n        this.errorSubcode = ErrorSubcode.INSUFFICIENT_SPACE;\n      } else {\n        LOG_INFO(`Cannot send client ctrl, return code\n          ${TransportLib.TransportReturnCode.describe(returnCode)}`);\n        this.eventText = 'Cannot send client ctrl';\n        this.errorSubcode = ErrorSubcode.INVALID_OPERATION;\n      }\n    } else {\n      // enqueue outstanding request, use a fake correlation tag for Login only\n      const correlationTag = TransportLib.SMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG;\n      LOG_INFO(`Using internally correlationTag=${correlationTag} for tracking ClientCTRL Login`);\n      this.enqueueOutstandingCorrelatedReq(correlationTag,\n                                           null,\n                                           null,\n                                           null,\n                                           rxMsgObj => this.handleClientCtrlResponse(rxMsgObj));\n\n      LOG_DEBUG('Sent client ctrl');\n    }\n    return returnCode;\n  }\n\n  /**\n   *\n   * Internal method for sending subscriptions from SessionConnecting state (reapply or P2P-inbox)\n   *\n   * @param {Destination} topic The topic to subscribe\n   * @param {Boolean} requestConfirmation If true, expect a reply on success also\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout for the request\n   * @param {function} respRecvdCallback The callback on reply received\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendSubscribe(topic, requestConfirmation, correlationKey, requestTimeout, respRecvdCallback) {\n    const { LOG_INFO, LOG_DEBUG } = this.logger;\n    assert(topic instanceof Destination, 'sendSubscribe requires a Destination, not a string');\n    LOG_DEBUG('Sending subscribe: ', topic, requestConfirmation, correlationKey);\n    const correlationTag = this.getCorrelationTag();\n    const smpMsg = SMFLib.SMPMessage.getSubscriptionMessage(correlationTag,\n                                                            topic,\n                                                            true, // set add == true\n                                                            requestConfirmation);\n    assert(smpMsg.encodedUtf8Subscription, 'Encoded SMP message was invalid');\n    const returnCode = this.send(smpMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      LOG_INFO('Subscribe failed', TransportLib.TransportReturnCode.describe(returnCode));\n      return returnCode;\n    }\n    if (requestConfirmation) {\n      this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        () => this.handleSubscriptionTimeout(correlationTag),\n        requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n        correlationKey,\n        respRecvdCallback);\n    }\n    return returnCode;\n  }\n\n  /**\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property key to change\n   * @param {?} newValue The new value for the property\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout for the request\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendUpdateProperty(mutableSessionProperty,\n                     newValue,\n                     correlationKey,\n                     requestTimeout,\n                     respRecvdCallback) {\n    const correlationTag = this._smfClient.nextCorrelationTag();\n    const smpMsg = SMFLib.ClientCtrlMessage.getUpdate(mutableSessionProperty,\n                                                      newValue,\n                                                      correlationTag);\n\n    const returnCode = this.send(smpMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      return returnCode;\n    }\n\n    this.enqueueOutstandingCorrelatedReq(\n      correlationTag,\n      () => this.handleUpdatePropertyTimeout(correlationTag),\n      requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n      correlationKey,\n      respRecvdCallback);\n    return returnCode;\n  }\n\n  /**\n   * @private\n   */\n  setClientCtrlTimer() {\n    this.clearClientCtrlTimer();\n\n    this._clientCtrlTimer = setTimeout(() => this.handleClientCtrlTimeout(),\n                                       this._sessionProperties.transportDowngradeTimeoutInMsecs);\n  }\n\n  /**\n   * @private\n   */\n  setConnectTimer() {\n    this.clearConnectTimer();\n    // The hosts lists provides the wait time for inter-host timeouts.\n    // This timeout is for the entire list.\n    this._connectTimer = setTimeout(() => this.handleConnectTimeout(),\n                                    this._sessionProperties.connectTimeoutInMsecs);\n  }\n\n  /**\n   * Sets the error exit information for the FSM.\n   *\n   * This applies key-value pairs from properties to the current error object,\n   * but does not allow overwriting and does not allow assignment of null or undefined values.\n   *\n   * Only the following fields are relevant, any other fields transferred to currentError by this\n   * method are eventually ignored:\n   *    * eventText\n   *    * responseCode\n   *    * errorSubcode\n   *    * eventReason\n   *\n   * See SessionConnecting exitPoint 'errorExit'. This is the only place the information in\n   * currentError is extracted.\n   *\n   * Could be implemented as `\n   * this._currentError = Object.assign({}, filter(properties), this._currentError)\n   * `\n   * where `filter` is a key-value filter that works as described above.\n   *\n   * @param {Object} source An object with properties to be applied\n   */\n  setCurrentError(source) {\n    const target = this._currentError || {};\n    const { LOG_TRACE } = this.logger;\n    Object.keys(source).forEach((key) => {\n      if (source[key] === null || source[key] === undefined) return false;\n      if (target[key] !== null && target[key] !== undefined) {\n        LOG_TRACE(`Attempt to overwrite property {key=${key}, current value=${target[key]}, incoming value=${source[key]}}`);\n        return false;\n      }\n      target[key] = source[key];\n      return true;\n    });\n    this._currentError = target;\n  }\n\n\n  /**\n   * Send a subscribe or unsubscribe request on behalf of the API.\n   * @param {Destination} subject The target for the update\n   * @param {Boolean} requestConfirmation Request a success message if true\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout in milliseconds\n   * @param {SessionRequestType} requestType The request type\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  subscriptionUpdate(subject,\n                     requestConfirmation,\n                     correlationKey,\n                     requestTimeout,\n                     requestType,\n                     respRecvdCallback) {\n    //check topic supported\n    const error = this.checkSessionDestinationCapability(subject);\n    if (error) {\n      throw error;\n    }\n    const timeoutMsg =\n      SubscriptionUpdateTimeoutMessages[requestType] ||\n      SubscriptionUpdateTimeoutMessages.default;\n    const isSMP = (requestType !== SessionRequestType.REMOVE_DTE_SUBSCRIPTION);\n    const add = (requestType === SessionRequestType.ADD_SUBSCRIPTION ||\n      requestType === SessionRequestType.ADD_P2PINBOX);\n    const correlationTag = this.getCorrelationTag();\n\n    const generateMessage = isSMP\n      ? SMFLib.SMPMessage.getSubscriptionMessage\n      : SMFLib.AdProtocolMessage.getDTEUnsubscribeMessage;\n    const msg = generateMessage(correlationTag,\n                                subject,\n                                add,\n                                requestConfirmation);\n    const returnCode = this.send(msg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      return returnCode;\n    }\n\n    if (requestConfirmation) {\n      this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        () => this.handleApiSubscriptionTimeout(correlationTag,\n                                                timeoutMsg),\n        requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n        correlationKey,\n        respRecvdCallback);\n    }\n    if (requestType === SessionRequestType.ADD_SUBSCRIPTION &&\n      this._sessionProperties.reapplySubscriptions) {\n      this.addToSubscriptionCache(subject);\n    } else if (requestType === SessionRequestType.REMOVE_SUBSCRIPTION &&\n      this._sessionProperties.reapplySubscriptions) {\n      this.removeFromSubscriptionCache(subject);\n    }\n    return returnCode;\n  }\n\n  /**\n   * Send a queue subscribe or unsubscribe request.\n   * @param {Destination} subject The target for the update\n   * @param {Destination} queue The queue where the subscription is added/removed\n   * @param {Number} requestTimeout The timeout in milliseconds\n   * @param {Boolean} add (if true) or remove (if false).\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  queueSubscriptionUpdate(subject,\n                          queue,\n                          requestTimeout,\n                          add,\n                          respRecvdCallback) {\n    const timeoutMsg =\n      add ? SubscriptionUpdateTimeoutMessages[SessionRequestType.ADD_SUBSCRIPTION] :\n      SubscriptionUpdateTimeoutMessages[SessionRequestType.REMOVE_SUBSCRIPTION];\n    const correlationTag = this.getCorrelationTag();\n\n    const msg = SMFLib.SMPMessage.getQueueSubscriptionMessage(\n      correlationTag,\n      subject,\n      queue,\n      add);\n    const returnCode = this.send(msg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      //TODO: act on this.\n      // (throw.)\n      return returnCode;\n    }\n\n    this.enqueueOutstandingCorrelatedReq(\n      correlationTag,\n      () => {\n        const origReq = this._correlatedReqs[correlationTag];\n        //TODO maybe just use the cancel method instead (which returns the original request)\n        this.handleApiSubscriptionTimeout(correlationTag,\n                                          timeoutMsg);\n        respRecvdCallback(null, origReq);\n      },\n      requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n      null, // no need for session machinery to track flow correlationKey.\n      respRecvdCallback);\n    return returnCode;\n  }\n\n  /**\n   * @param {BaseMessage|Message} smfMessage The message received\n   * @param {Stats} [target] The statistics target to update, default is session stats\n   * @private\n   */\n  updateRxStats(smfMessage, target = this._sessionStatistics) {\n    if (!target) {\n      return;\n    }\n    const smfHeader = smfMessage.smfHeader;\n    if (!smfHeader) {\n      return;\n    }\n    const deliveryMode = smfHeader.pm_deliverymode || 0;\n    const msgStatKey = STAT_RX_BYMODE_MSGS[deliveryMode];\n    const bytesStatKey = STAT_RX_BYMODE_BYTES[deliveryMode];\n    const msgLength = smfHeader.messageLength;\n\n    switch (smfHeader.smf_protocol) {\n      case SMFLib.SMFProtocol.TRMSG:\n        if (smfHeader.pm_respcode === 0) {\n          target.incStat(StatType.RX_TOTAL_DATA_MSGS);\n          target.incStat(msgStatKey);\n          target.incStat(StatType.RX_TOTAL_DATA_BYTES, msgLength);\n          target.incStat(bytesStatKey, msgLength);\n          if (smfHeader.smf_di) {\n            target.incStat(StatType.RX_DISCARD_MSG_INDICATION);\n          }\n        }\n        break;\n      case SMFLib.SMFProtocol.CLIENTCTRL:\n      case SMFLib.SMFProtocol.SMP:\n      case SMFLib.SMFProtocol.KEEPALIVE:\n      case SMFLib.SMFProtocol.KEEPALIVEV2:\n      case SMFLib.SMFProtocol.ADCTRL:\n        target.incStat(StatType.RX_CONTROL_MSGS);\n        target.incStat(StatType.RX_CONTROL_BYTES, msgLength);\n        break;\n      default:\n    }\n  }\n\n  /**\n  * @param {BaseMessage|Message} smfMessage The message sent\n  * @param {Stats} [target] The statistics target to update, default is session stats\n  * @private\n  */\n  updateTxStats(smfMessage, target = this._sessionStatistics) {\n    if (!target) {\n      return;\n    }\n    if (smfMessage.getReplyTo !== undefined && smfMessage.getReplyTo()) {\n      // update stats\n      target.incStat(StatType.TX_REQUEST_SENT);\n    }\n    const smfHeader = smfMessage.smfHeader;\n    if (!smfHeader) {\n      return;\n    }\n\n    const deliveryMode = smfHeader.pm_deliverymode || 0;\n    let msgStatKey = STAT_TX_BYMODE_MSGS[deliveryMode];\n    let bytesStatKey = STAT_TX_BYMODE_BYTES[deliveryMode];\n    //\n    // If this is a Guaranteed Message we may need to further refine the stats by the redelivered\n    // status\n    if (deliveryMode !== MessageDeliveryModeType.DIRECT) {\n      if (smfMessage.isRedelivered()) {\n        msgStatKey = STAT_TX_BYMODE_REDELIVERED[deliveryMode];\n        bytesStatKey = STAT_TX_BYMODE_BYTES_REDELIVERED[deliveryMode];\n      }\n    }\n    const msgLength = smfHeader.messageLength;\n\n    switch (smfHeader.smf_protocol) {\n      case SMFLib.SMFProtocol.TRMSG:\n        target.incStat(msgStatKey);\n        target.incStat(bytesStatKey, msgLength);\n        break;\n      case SMFLib.SMFProtocol.CLIENTCTRL:\n      case SMFLib.SMFProtocol.SMP:\n      case SMFLib.SMFProtocol.KEEPALIVE:\n      case SMFLib.SMFProtocol.KEEPALIVEV2:\n      case SMFLib.SMFProtocol.ADCTRL:\n        target.incStat(StatType.TX_CONTROL_MSGS);\n        target.incStat(StatType.TX_CONTROL_BYTES, msgLength);\n        break;\n      default:\n    }\n  }\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlRespMsg The client control message with props\n   * @private\n   */\n  updateReadonlySessionProps(clientCtrlRespMsg) {\n    const props = this._sessionProperties; // Modify session properties in place\n\n    props._setVpnNameInUse(clientCtrlRespMsg.getVpnNameInUseValue() || '');\n    const oldVirtualRouterName = props.virtualRouterName;\n    const newVirtualRouterName = clientCtrlRespMsg.getVridInUseValue() || '';\n    props._setVirtualRouterName(newVirtualRouterName);\n    if (oldVirtualRouterName !== '' && oldVirtualRouterName !== newVirtualRouterName) {\n      this.handleVirtualRouterNameChange(oldVirtualRouterName, newVirtualRouterName);\n    }\n\n    // The Solace Message Router login response should always contain a P2P topic for this client\n    // name. If it doesn't that's an error (and we store \"\").\n    props._setP2pInboxBase(clientCtrlRespMsg.getP2PTopicValue() || '');\n    props._setP2pInboxInUse(P2PUtil.getP2PInboxTopic(props.p2pInboxBase));\n    this._session.updateCapabilities(clientCtrlRespMsg.getRouterCapabilities());\n\n    // Create and cache a guard for GM sending.\n    const gmCap = this._session._getCapability(CapabilityType.GUARANTEED_MESSAGE_PUBLISH);\n    this._gmSendDisallowed = (typeof gmCap === 'boolean' && !gmCap)\n      ? () => {\n        throw new OperationError(\n        'Sending guaranteed message is not allowed by router for this client',\n        ErrorSubcode.INVALID_OPERATION,\n        null);\n      }\n      : null;\n  }\n\n  handleVirtualRouterNameChange(oldName, newName) {\n    if (this._consumers) {\n      this._consumers.flows.forEach(consumer => consumer.onVRNChanged());\n      this._consumers.reconnectingFlows.forEach(consumer => consumer.onVRNChanged());\n    }\n    this.emitSessionEvent(\n      SessionEvent.build(SessionEventCode.VIRTUALROUTER_NAME_CHANGED,\n                         `Virtual router name is changed from ${oldName} to ${newName}`,\n                         null,\n                         0,\n                         null,\n                         null));\n  }\n\n  /**\n   * @returns {String} The session's ID in hexadecimal format\n   * @private\n   */\n  get sessionIdHex() {\n    return this.sessionId && formatHexString(this.sessionId) || 'N/A';\n  }\n\n  updateTransportCompression(callback) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('updateTransportCompression called. ' +\n      `plaintextTLS: ${this._plaintextTLS} _compressedTLS: ${this._compressedTLS}`);\n    if (this._plaintextTLS) {\n      TransportLib.TransportFactory.severTls(this._transport, this._compressedTLS, callback);\n      return null;\n    }\n    if (this._compressedTLS) {\n      const newTransport = TransportLib.TransportFactory.startCompression(this._transport);\n      return newTransport;\n    }\n    // nothing to do.\n    return this._transport;\n  }\n}\n\nmodule.exports.SessionFSM = SessionFSM;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionOperation = {\n  CONNECT:         'CONNECT',\n  DISCONNECT:      'DISCONNECT',\n  CTRL:            'CTRL',\n  SEND:            'SEND',\n  QUERY_OPERATION: 'QUERY_OPERATION',\n};\n\nmodule.exports.SessionOperation = Enum.new(SessionOperation);\n","const PublisherLib = require('solclient-message-publisher');\nconst SessionPropertiesLib = require('./session-properties');\nconst SMFLib = require('solclient-smf');\nconst { APIPropertiesValidators, parseURL } = require('solclient-util');\nconst { AuthenticationScheme } = require('./authentication-schemes');\nconst { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_WARN, LOG_INFO } = require('solclient-log');\nconst { SslDowngrade } = require('./ssl-downgrades');\nconst { TransportProtocol } = require('solclient-transport');\n\nconst {\n  validateInstance,\n  valArrayIsMember,\n  valArrayOfString,\n  valBoolean,\n  valLength,\n  valNotEmpty,\n  valNumber,\n  valRange,\n  valString,\n  valStringOrArray,\n} = APIPropertiesValidators;\n\nconst ALLOWED_PROTOCOLS = ['http:', 'https:', 'ws:', 'wss:', 'tcp:', 'tcps:'];\n\nfunction valClientName(typeDesc, instance, name) {\n  // valString and valLength(160) have already been called.\n  const error =\n    SMFLib.ClientCtrlMessage.validateClientName(\n      instance[name],\n      errorMessage =>\n        new OperationError(`${typeDesc} validation: Property '${name}': ${errorMessage}`,\n                           ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n  if (error) {\n    throw error;\n  }\n}\n\nfunction valIsMember(typeDesc, instance, key, enumInstance, enumName, allowNull) {\n  const val = instance[key];\n  if (allowNull && val === null) return;\n  if (typeof (val) !== 'undefined' && !enumInstance.values.some(v => v === val)) {\n    throw new OperationError(`${typeDesc} validation: Property '${key\n                             }' must be a member of ${enumName}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n  }\n}\n\nfunction valSslExcludedProtocols(typeDesc, instance, name) {\n  const val = instance[name];\n  if (Check.array(val)) {\n    if (val.length > 0) {\n      const supported = SessionPropertiesLib.SessionProperties.SUPPORTED_SSL_PROTOCOLS;\n      val.forEach((protocol) => {\n        const prtcl = protocol.toLowerCase();\n        if (supported.indexOf(prtcl) < 0) {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                                   }' contains unsupported protocol: ${protocol}`,\n                                    ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      });\n    }\n  }\n}\n\nfunction valSslCipherSuites(typeDesc, instance, name) {\n  const val = instance[name];\n  if (val && Check.string(val) && !Check.empty(val)) {\n    const ciphers = val.split(',');\n    const supported = SessionPropertiesLib.SessionProperties.SUPPORTED_CIPHER_SUITES;\n    ciphers.forEach((cipher) => {\n      if (supported.indexOf(cipher.trim()) < 0) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                        }' contains unsupported cipher suite: '${cipher}'`,\n                        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n    });\n  }\n}\n\n// maximum number of common names is 16\nfunction valSslTrustedCommonNameList(typeDesc, instance, name) {\n  const val = instance[name];\n  if (Check.something(val) && Check.array(val) && val.length > 16) {\n    throw new OperationError(`${typeDesc} validation: Property '${name\n                }' length exceeds limit of 16`,\n                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n}\n\nfunction valUrlList(typeDesc, instance, name) {\n  const val = instance[name];\n  const valArray = typeof val === 'string' ? val.split(',') : val;\n  if (!Check.array(valArray)) {\n    throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' not an array or comma-delimited string`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n  }\n  valArray.forEach((el) => {\n    let url = null;\n    try {\n      url = parseURL(el);\n    } catch (ex) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' contained an invalid URL: ${el}`,\n                                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (!Check.included(url.protocol, ALLOWED_PROTOCOLS)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' contained a URL'${url.href\n                                }' with an invalid protocol: '${url.protocol}'`,\n                                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  });\n}\n\nfunction isHttpTransport(transportProtocol) {\n  return (transportProtocol && (\n          transportProtocol === TransportProtocol.HTTP_BINARY_STREAMING ||\n          transportProtocol === TransportProtocol.HTTP_BINARY ||\n          transportProtocol === TransportProtocol.HTTP_BASE64));\n}\n\nfunction validatePropsSupportedByTransport(transportProtocol, nonHttpPropsSet) {\n  if (nonHttpPropsSet.length > 0 && isHttpTransport(transportProtocol)) {\n    const propNames = nonHttpPropsSet.length <= 5 ? nonHttpPropsSet : nonHttpPropsSet.slice(0, 5);\n    throw new OperationError(`SessionProperties validation: properties that are not supported by transport protocol ${\n                    transportProtocol} have been set: ${propNames}`, ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n}\n\nfunction matchUrl(instance, name, regex, all) {\n  const val = instance[name];\n  if (val instanceof Array) {\n    // host list is used, iterate to find at least one entry\n    const arrayLength = val.length;\n    for (let i = 0; i < arrayLength; i++) {\n      const currententry = val[i];\n      if (!all) {\n        if (Check.string(currententry) && currententry.match(regex)) {\n          return true;\n        }\n      } else if (all) {\n        if (!Check.string(currententry) || !currententry.match(regex)) {\n          return false;\n        }\n      }\n    }\n    if (!all) {\n      return false;\n    } else if (all) {\n      return true;\n    }\n  }\n  return (Check.string(val) && val.match(regex));\n}\n\nfunction useSsl(instance, name, all) {\n  return matchUrl(instance, name, /^(https|wss|tcps):/i, all);\n}\n\nconst SessionPropertiesValidator = {\n  validate(props) {\n    // Validation rules: same as JCSMP\n    const v = validateInstance.bind(null, 'SessionProperties', props);\n    v('url', [valNotEmpty], [valStringOrArray], [valUrlList]);\n    v('userName', [valString], [valLength, 189]);\n    v('password', [valString], [valLength, 128]);\n    v('clientName', [valString], [valLength, 160], [valClientName]);\n    v('applicationDescription', [valString], [valLength, 254]);\n    v('vpnName', [valString], [valLength, 32]);\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('connectRetriesPerHost', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('connectRetries', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('reconnectRetries', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('reconnectRetryWaitInMsecs', [valNumber], [valRange, 0, 60000]);\n    v('readTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('sendBufferMaxSize', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('maxWebPayload', [valNumber], [valRange, 100, Number.MAX_VALUE]);\n    if (BUILD_ENV.TARGET_BROWSER) {\n      v('bufferedAmountQueryIntervalInMsecs', [valNumber], [valRange, 4, Number.MAX_VALUE]);\n    }\n    v('generateSendTimestamps', [valBoolean]);\n    v('generateReceiveTimestamps', [valBoolean]);\n    v('includeSenderId', [valBoolean]);\n    v('keepAliveIntervalInMsecs', [valNumber], [valRange, 0, Number.MAX_VALUE]);\n    v('keepAliveIntervalsLimit', [valNumber], [valRange, 3, Number.MAX_VALUE]);\n    v('generateSequenceNumber', [valBoolean]);\n    v('subscriberLocalPriority', [valNumber], [valRange, 1, 4]);\n    v('subscriberNetworkPriority', [valNumber], [valRange, 1, 4]);\n    v('ignoreDuplicateSubscriptionError', [valBoolean]);\n    v('ignoreSubscriptionNotFoundError', [valBoolean]);\n    v('reapplySubscriptions', [valBoolean]);\n    v('noLocal', [valBoolean]);\n    v('transportDowngradeTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('idToken', [valString]);\n    v('accessToken', [valString]);\n\n    if (props.transportProtocol && props.webTransportProtocolList) {\n      throw new OperationError(\"SessionProperties validation: Property 'transportProtocol' and \" +\n                               \"'webTransportProtocolList' cannot be set at the same time\",\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (props.webTransportProtocolList !== null && props.webTransportProtocolList !== undefined) {\n      if (!Array.isArray(props.webTransportProtocolList)) {\n        throw new OperationError(\"Property 'webTransportProtocolList' must be an array if set\",\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (props.webTransportProtocolList.length === 0) {\n        throw new OperationError(\"Property 'webTransportProtocolList' must be non-empty if set\",\n                                 ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n    }\n\n    v('authenticationScheme', [valIsMember, AuthenticationScheme, 'AuthenticationScheme', false]);\n    const useClientCert = props.authenticationScheme === AuthenticationScheme.CLIENT_CERTIFICATE;\n    if (!useSsl(props, 'url', true) && useClientCert) {\n      throw new OperationError(\"SessionProperties validation: Property 'authenticationScheme' cannot be set to client certificate \" +\n                               'for unsecured sessions', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (Check.equal(props.authenticationScheme, AuthenticationScheme.OAUTH2)) {\n      if (!useSsl(props, 'url', true)) {\n        throw new OperationError(`SessionProperties validation: Property 'authenticationScheme' ${''\n                                 }cannot be set to '${AuthenticationScheme.OAUTH2}' unless the ${''\n                                 }session property 'url' is written to use a secure ${''\n                                 }communication protocol like tcps or https.`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      if (Check.empty(props.idToken) && Check.empty(props.accessToken)) {\n        throw new OperationError(`SessionProperties validation: Property 'authenticationScheme' ${''\n                                 }can be set to ${''\n                                 }'${AuthenticationScheme.OAUTH2}' only if there ${''\n                                 }is an accompanying token set as a session property. The ${''\n                                 }token types that are ${''\n                                 }supported for OAuth authentication are OAuth2.0 Access ${''\n                                 }Tokens and OpenID Connect ID Tokens. To set an access token ${''\n                                 }you can use the accessToken session property. To set an id ${''\n                                 }you can use the idToken session property.`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    } else if (!Check.empty(props.idToken) || !Check.empty(props.accessToken)) {\n      LOG_INFO(`SessionProperties validation: Property ${''\n               }'authenticationScheme' must be set to ${''\n               }'${AuthenticationScheme.OAUTH2}'in order to use either ${''\n               } an OAUTH2 access token or an OpenID Connect ID token.`);\n    }\n\n\n    if (BUILD_ENV.TARGET_NODE) {\n      // should not happen since transportProtocol and webTransportProtocolList are not public\n      if (Check.something(props.transportProtocol) &&\n          props.transportProtocol !== TransportProtocol.WS_BINARY) {\n        throw new OperationError(\"SessionProperties validation: properties 'transportProtocol' \" +\n                                 'can only be WS_BINARY',\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (Check.something(props.webTransportProtocolList)) {\n        if (!Check.array(props.webTransportProtocolList)) {\n          throw new OperationError('SessionProperties validation: Property ' +\n                                   \"'webTransportProtocolList' should be type Array\",\n                                   ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n        if (props.webTransportProtocolList.length !== 1 ||\n            props.webTransportProtocolList[0] !== TransportProtocol.WS_BINARY) {\n          throw new OperationError('SessionProperties validation: properties ' +\n                                   \"'webTransportProtocolList' can only contain element WS_BINARY\",\n                                   ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n      }\n\n      v('sslExcludedProtocols', [valArrayOfString], [valSslExcludedProtocols]);\n      v('sslCipherSuites', [valString], [valSslCipherSuites]);\n      v('sslValidateCertificate', [valBoolean]);\n\n      if (props.sslValidateCertificate || useClientCert) {\n        v('sslTrustStores', [valArrayOfString]);\n        v('sslTrustedCommonNameList', [valArrayOfString], [valSslTrustedCommonNameList]);\n      }\n\n      if (useClientCert) {\n        v('sslPfx', [valString]);\n        v('sslPfxPassword', [valString]);\n        v('sslPrivateKey', [valString]);\n        v('sslPrivateKeyPassword', [valString]);\n        v('sslCertificate', [valString]);\n        // either sslPfx or sslPrivateKey and sslCertificate must be specified,\n        // but not at the same time\n        const sslPfxSet = Check.something(props.sslPfx) && props.sslPfx.length;\n        const sslPrivateKeySet = (\n          Check.something(props.sslPrivateKey) &&\n          props.sslPrivateKey.length\n        );\n        const sslCertSet = (\n          Check.something(props.sslCertificate) &&\n          props.sslCertificate.length\n        );\n        if (!sslPfxSet && !sslPrivateKeySet && !sslCertSet) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Either property 'sslPfx', or 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'must be set when authenticationScheme is client certificate',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n        if (sslPfxSet && (sslPrivateKeySet || sslCertSet)) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Property 'sslPfx' can only be set when 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'are not set',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n        if ((sslPrivateKeySet && !sslCertSet) || (!sslPrivateKeySet && sslCertSet)) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Property 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'must be set at the same time',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n\n      v('compressionLevel', [valNumber], [valRange, 0, 9]);\n      // Compression and web protocols do not mix.\n      if (props.compressionLevel > 0) {\n        if (props.url instanceof Array) {\n          const allTcp = props.url.every(url => Check.string(url) && url.match(/tcps?:/i));\n          if (!allTcp) {\n            throw new OperationError('SessionProperties validation: Property ' +\n                                     \"'compressionLevel' is non-zero, \" +\n                                     'but not all URLs in the host list ' +\n                                     'support compression. (tcp:// or tcps:// expected)',\n                                     ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n          }\n        } else if (Check.string(props.url)) {\n          if (!props.url.match(/tcps?:/i)) {\n            throw new OperationError('SessionProperties validation: Property ' +\n                                     \"'compressionLevel' is non-zero, \" +\n                                     'but the url does not ' +\n                                     'support compression. (tcp:// or tcps:// expected)',\n                                     ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n          }\n        } else {\n          throw new OperationError('SessionProperties validation: Property' +\n                                   \"'url' must be string or array of strings.\" +\n                                   ` instead got ${props.url} ` +\n                                   `of type ${typeof props.url}`,\n                                    ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n\n      v('sslConnectionDowngradeTo', [valIsMember, SslDowngrade, 'SslDowngrade', false]);\n    }\n    v('transportProtocol', [valIsMember, TransportProtocol, 'TransportProtocol', true]);\n    v('webTransportProtocolList',\n      [valArrayIsMember, TransportProtocol, 'TransportProtocol',\n        true, false, false]);\n\n    validatePropsSupportedByTransport(props.transportProtocol,\n                                      props.nonHTTPTransportPropsSet);\n\n    if (props.publisherProperties) {\n      PublisherLib.MessagePublisherPropertiesValidator.validate(props.publisherProperties);\n    }\n\n    // Non-errors\n\n    const recommendedMin = props.defaultConnectTimeoutInMsecs;\n    const connectTimeout = props.connectTimeoutInMsecs;\n    const transportCount = props.webTransportProtocolList\n      ? props.webTransportProtocolList.length\n      : 1;\n    if (transportCount > 1 && connectTimeout < recommendedMin) {\n      LOG_WARN(\n        `Connect timeout of ${connectTimeout} msecs is less than default and recommended ` +\n        `minimum of ${recommendedMin} msecs for current transport selection. Transport ` +\n        'downgrades may not complete.');\n    }\n  },\n};\n\nmodule.exports.SessionPropertiesValidator = SessionPropertiesValidator;\n\n","const NodeSslConstants = require('constants');\nconst PublisherLib = require('solclient-message-publisher');\nconst { APIProperties } = require('solclient-util');\nconst { AuthenticationScheme } = require('./authentication-schemes');\nconst { Check } = require('solclient-validate');\nconst { LOG_WARN } = require('solclient-log');\nconst { SslDowngrade } = require('./ssl-downgrades');\n\nfunction makeDefaults() {\n  // Defer binding. Publisher constructor may rely on profile.\n  const { MessagePublisherProperties } = PublisherLib;\n  return {\n    _vpnNameInUse:        '',\n    _virtualRouterName:   '',\n    _p2pInboxInUse:       '',\n    _p2pInboxBase:        '',\n    _userIdentification:  '',\n    _tpProtocolInUse:     null,\n    _tpContentType:       'text/plain',\n    _publisherProperties: new MessagePublisherProperties(),\n  };\n}\n\nconst DEFAULT_CIPHER_SUITES = BUILD_ENV.TARGET_NODE ? [\n  'ECDHE-RSA-AES256-GCM-SHA384',\n  'ECDHE-RSA-AES256-SHA384',\n  'ECDHE-RSA-AES256-SHA',\n  'AES256-GCM-SHA384',\n  'AES256-SHA256',\n  'AES256-SHA',\n  'ECDHE-RSA-DES-CBC3-SHA',\n  'DES-CBC3-SHA',\n  'ECDHE-RSA-AES128-GCM-SHA256',\n  'ECDHE-RSA-AES128-SHA256',\n  'ECDHE-RSA-AES128-SHA',\n  'AES128-GCM-SHA256',\n  'AES128-SHA256',\n  'AES128-SHA',\n].join(',') : null;\n\nconst SUPPORTED_CIPHER_SUITES = BUILD_ENV.TARGET_NODE ? [\n  'AES128-GCM-SHA256',\n  'AES128-SHA',\n  'AES128-SHA256',\n  'AES256-GCM-SHA384',\n  'AES256-SHA',\n  'AES256-SHA256',\n  'DES-CBC3-SHA',\n  'ECDHE-RSA-AES128-GCM-SHA256',\n  'ECDHE-RSA-AES128-SHA',\n  'ECDHE-RSA-AES128-SHA256',\n  'ECDHE-RSA-AES256-GCM-SHA384',\n  'ECDHE-RSA-AES256-SHA',\n  'ECDHE-RSA-AES256-SHA384',\n  'ECDHE-RSA-DES-CBC3-SHA',\n] : null;\n\nconst SUPPORTED_SSL_PROTOCOLS = BUILD_ENV.TARGET_NODE\n? [\n  'tlsv1',\n  'tlsv1.1',\n  'tlsv1.2',\n]\n: null;\n\n/**\n * @lends SessionProperties\n *\n */\nclass SessionPropertiesBrowser extends APIProperties {\n  /**\n   * This property is deprecated.  It is recommended to use\n   * {@link solace.SessionProperties#webTransportProtocolList} instead, which explicitly lists all\n   * web transport protocols that may be used when establishing a session.\n   *\n   * This property specifies the web transport protocol that will initially be selected by the\n   * session for its connection attempt. If this protocol fails, the session will attempt other\n   * protocols in accordance with its transport protocol connect policy.\n   *\n   * If {@link solace.FactoryProfile#cometEnabled} is `true`, the selection of\n   * any {@link solace.TransportProtocol} will result in the inclusion of\n   * fallback protocols in {@link solace.SessionProperties#webTransportProtocolList}.\n   * This makes the session incompatible with Guaranteed Messaging.\n   *\n   * To create a Guaranteed Messaging compatible session with\n   * {@link solace.FactoryProfile#cometEnabled} set to `true`, ensure the session's\n   * {@link solace.SessionProperties#webTransportProtocoList} is set to only\n   * {@link solace.TransportProtocol.WS_BINARY}.\n   *\n   *  * Mutually exclusive to property webTransportProtocolList\n   *\n   * @name solace.SessionProperties#transportProtocol\n   * @type {solace.TransportProtocol}\n   * @default null\n   * @deprecated\n   * @target browser\n   */\n  get transportProtocol() {\n    return Check.nothing(this._tpProtocol) ? null : this._tpProtocol;\n  }\n  set transportProtocol(newValue) {\n    this._tpProtocol = newValue;\n  }\n\n\n  /**\n   * @name solace.SessionProperties#transportDowngradeTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout, in milliseconds, that must elapse before the session will abandon a\n   * connection attempt with the current transport protocol if no response is received, and begin\n   * a new connection attempt with a downgraded transport protocol. If no remaining downgrades\n   * exist, the session will continue the current connection attempt until the connection timeout\n   * expires. Note that the WS_BINARY transport will also attempt a downgrade if the underlying\n   * WebSocket fails to connect before this period elapses.\n   *  * The valid range is > 0.\n   * @default 3000\n   * @target browser\n   */\n  get transportDowngradeTimeoutInMsecs() {\n    return Check.nothing(this._tpDowngradeTimeout) ? 3000 : this._tpDowngradeTimeout;\n  }\n  set transportDowngradeTimeoutInMsecs(newValue) {\n    this._tpDowngradeTimeout = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#webTransportProtocolList\n   * @type {Array.<solace.TransportProtocol>}\n   * @description The user provided web transport protocol list indicating the initial protocol\n   * to be used by the session for its connection attempt, and the protocols to try\n   * subsequently if the attempt fails.\n   *  * Mutually exclusive to property transportProtocol\n   * @default null\n   * @target browser\n   */\n  get webTransportProtocolList() {\n    return Check.nothing(this._transportProtocolList)\n             ? null\n             : this._transportProtocolList;\n  }\n  set webTransportProtocolList(newValue) {\n    this._transportProtocolList = newValue;\n  }\n\n  /**\n   * @private\n   * @name SessionProperties#bufferedAmountQueryIntervalInMsecs\n   * @type {Number}\n   * @description When WebSocket transport protocol is used, SolClient uses this property\n   * and {@link solace.SessionProperties.maxWebPayload} to throttle the publishing rate in order to\n   * avoid network saturation.\n   *  * The valid range is >=4.\n   * @default 100\n   */\n  get bufferedAmountQueryIntervalInMsecs() {\n    return Check.nothing(this._bufferedAmountQueryInterval)\n    ? 100\n    : this._bufferedAmountQueryInterval;\n  }\n  set bufferedAmountQueryIntervalInMsecs(newValue) {\n    this._bufferedAmountQueryInterval = newValue;\n  }\n\n\n  /**\n   *\n   * @name solace.SessionProperties#transportProtocolInUse\n   * @type {String}\n   * @description This property is deprecated.\n   * Use {@link solace.SessionProperties#webTransportProtocolInUse} instead.\n   * @readonly\n   * @target browser\n   * @deprecated\n   */\n  get transportProtocolInUse() {\n    return this._tpProtocolInUse || null;\n  }\n  _setTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#webTransportProtocolInUse\n   * @type {String}\n   * @description A read-only property about the web transport protocol that is currently being\n   * used by the session for its current connection or connection attempt. To determine which\n   * web transport protocol was successfully used by the API, interrogate this property after the\n   * session event UP_NOTICE is dispatched.\n   * @readonly\n   * @target browser\n   */\n  get webTransportProtocolInUse() {\n    return this._tpProtocolInUse || null;\n  }\n  _setWebTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#transportContentType\n   * @type {String}\n   * @description Transport content-type override for HTTP transports\n   * @default 'text/plain'\n   * @internal\n   */\n  get transportContentType() {\n    return this._tpContentType || 'text/plain';\n  }\n  set transportContentType(newValue) {\n    this._tpContentType = newValue;\n  }\n\n  _lendsInspect() {\n    return {\n      'bufferedAmountQueryIntervalInMsecs': this.bufferedAmountQueryIntervalInMsecs,\n      'transportContentType':               this.transportContentType,\n      'transportDowngradeTimeoutInMsecs':   this.transportDowngradeTimeoutInMsecs,\n      'transportProtocol':                  this.transportProtocol,\n      'transportProtocolInUse':             this.transportProtocolInUse,\n      'webTransportProtocolList':           this.webTransportProtocolList,\n    };\n  }\n}\n\nclass SessionPropertiesNode extends APIProperties {\n  /**\n   * @internal\n   */\n  get transportProtocol() {\n    return this._tpProtocol;\n  }\n  set transportProtocol(value) {\n    this._tpProtocol = value;\n  }\n\n  /**\n   * @internal\n   */\n  get webTransportProtocolList() {\n    return this._transportProtocolList;\n  }\n  set webTransportProtocolList(value) {\n    this._transportProtocolList = value;\n  }\n\n  /**\n   * @internal\n   */\n  get transportDowngradeTimeoutInMsecs() {\n    return this._tpDowngradeTimeout || 86400000; // All day\n  }\n  set transportDowngradeTimeoutInMsecs(value) {\n    this._tpDowngradeTimeout = value;\n  }\n\n  /**\n   * @internal\n   * @deprecated\n   */\n  get transportProtocolInUse() {\n    return this._tpProtocolInUse;\n  }\n  _setTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   * @internal\n   */\n  get webTransportProtocolInUse() {\n    return this._tpProtocolInUse;\n  }\n  _setWebTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   * @internal\n   */\n  get transportContentType() {\n    return this._tpContentType;\n  }\n  set transportContentType(value) {\n    this._tpContentType = value;\n  }\n\n  // TLS connection options\n\n  /**\n   * @name solace.SessionProperties#sslExcludedProtocols\n   * @type {Array.<String>}\n   * @description An array of TLS protocols to be excluded when negotiating which protocol\n   * to use.\n   *  * Allowed values are: TLSv1, TLSv1.1, TLSv1.2\n   *  * Note: when a protocol version is excluded without excluding all of its\n   *    previous protocol versions, the effect is to also exclude all subsequent\n   *    protocol versions.\n   * @default null\n   * @target node\n   */\n  get sslExcludedProtocols() {\n    return Check.nothing(this._sslExcludedProtocols)\n      ? null\n      : this._sslExcludedProtocols;\n  }\n  set sslExcludedProtocols(newValue) {\n    this._sslExcludedProtocols = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslCipherSuites\n   * @type {String}\n   * @description A comma separated list of cipher suites in order of preference used for TLS\n   * connections.\n   *  * Allowed values:\n   *     * AES128-GCM-SHA256\n   *     * AES128-SHA\n   *     * AES128-SHA256\n   *     * AES256-GCM-SHA384\n   *     * AES256-SHA\n   *     * AES256-SHA256\n   *     * DES-CBC3-SHA\n   *     * ECDHE-RSA-AES128-GCM-SHA256\n   *     * ECDHE-RSA-AES128-SHA\n   *     * ECDHE-RSA-AES128-SHA256\n   *     * ECDHE-RSA-AES256-GCM-SHA384\n   *     * ECDHE-RSA-AES256-SHA\n   *     * ECDHE-RSA-AES256-SHA384\n   *     * ECDHE-RSA-DES-CBC3-SHA\n   *     * RC4-SHA\n   *     * RC4-MD5\n   * @default {@link solace.SessionProperties.DEFAULT_CIPHER_SUITES}\n   * @target node\n   */\n  get sslCipherSuites() {\n    return Check.nothing(this._sslCipherSuites)\n      ? DEFAULT_CIPHER_SUITES\n      : this._sslCipherSuites;\n  }\n  set sslCipherSuites(newValue) {\n    this._sslCipherSuites = newValue;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#sslValidateCertificate\n   * @type {Boolean}\n   * @description Whether the server certificate shall be verified against the list of\n   * certificates in the trust stores. If set to false, all certificate validation is disabled,\n   * including date, hostname and common name validation.\n   * @default true\n   * @target node\n   */\n  get sslValidateCertificate() {\n    // if the value is undefined, then use environment variable\n    if (this._sslValidateCert === undefined) return (process.env.NODE_TLS_REJECT_UNAUTHORIZED !== '0');\n    if (this._sslValidateCert === null) return true;\n    return this._sslValidateCert;\n  }\n  set sslValidateCertificate(newValue) {\n    this._sslValidateCert = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslTrustStores\n   * @type {Array.<String>}\n   * @description An array of file names of trusted certificates in PEM format.\n   * If not set, and {@link solace.SessionProperties#sslValidateCertificate} is set to true,\n   * the server certificate will be validated against well known \"root\" CAs.\n   *    * Mutually exclusive to sslPfx property when\n   *      {@link solace.SessionProperties#sslValidateCertificate} is set\n   * @default null\n   * @target node\n   */\n  get sslTrustStores() {\n    return Check.nothing(this._sslTrustStores)\n      ? null\n      : this._sslTrustStores;\n  }\n  set sslTrustStores(newValue) {\n    this._sslTrustStores = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslTrustedCommonNameList\n   * @type {Array.<String>}\n   * @description An array of acceptable common names for matching with the server certificate.\n   * If set to a non-empty array, the API will override the default hostname validation logic\n   * provided by Node.js with its own implemenation; if set to empty array, no hostname\n   * validation will be performed.\n   *    * Only relevant when {@link solace.SessionProperties#sslValidateCertificate} is set\n   *      to true\n   *    * Note that leading and trailing whitespaces are considered to be part of the common\n   *      names and are not ignored\n   * @default null\n   * @target node\n   */\n  get sslTrustedCommonNameList() {\n    return Check.nothing(this._sslTrustedCNList)\n      ? null\n      : this._sslTrustedCNList;\n  }\n  set sslTrustedCommonNameList(newValue) {\n    this._sslTrustedCNList = newValue;\n  }\n\n  // Client certificates related\n\n  /**\n   * @name solace.SessionProperties#sslPfx\n   * @type {String}\n   * @description The file name of a file containing private key, certificate and optional\n   * CA certificates of the client in PFX or PKCS12 format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPrivateKey, sslCertificate and sslTrustStores properties\n   * @default \"\"\n   * @target node\n   */\n  get sslPfx() {\n    return Check.nothing(this._sslPfx)\n      ? ''\n      : this._sslPfx;\n  }\n  set sslPfx(newValue) {\n    this._sslPfx = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPfxPassword\n   * @type {String}\n   * @description A string containing password for the client pfx file.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   * @default empty string\n   * @target node\n   */\n  get sslPfxPassword() {\n    return Check.nothing(this._sslPfxPasswd) ? '' : this._sslPfxPasswd;\n  }\n  set sslPfxPassword(newValue) {\n    this._sslPfxPasswd = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPrivateKey\n   * @type {String}\n   * @description The file name of a file containing private key of the client in PEM format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPfx property\n   * @default empty string\n   * @target node\n   */\n  get sslPrivateKey() {\n    return Check.nothing(this._sslPrivateKey) ? '' : this._sslPrivateKey;\n  }\n  set sslPrivateKey(newValue) {\n    this._sslPrivateKey = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPrivateKeyPassword\n   * @type {String}\n   * @description A string containg password for the client private key.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   * @default empty string\n   * @target node\n   */\n  get sslPrivateKeyPassword() {\n    return Check.nothing(this._sslPrivateKeyPasswd) ? '' : this._sslPrivateKeyPasswd;\n  }\n  set sslPrivateKeyPassword(newValue) {\n    this._sslPrivateKeyPasswd = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslCertificate\n   * @type {String}\n   * @description The file name of a file containing certificate key of the client in PEM\n   * format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPfx property\n   * @default empty string\n   * @target node\n   */\n  get sslCertificate() {\n    return Check.nothing(this._sslCertificate) ? '' : this._sslCertificate;\n  }\n  set sslCertificate(newValue) {\n    this._sslCertificate = newValue;\n  }\n\n  // TLS connection options\n\n  /**\n   * @name SessionProperties#sslProtocol\n   * @type {String}\n   * @description The SSL protocols to use.\n   *    * Allowed values are: SSLv3, TLSv1, TLSv1.1, TLSv1.2\n   * @target node\n   */\n  get sslProtocol() {\n    return this._sslProtocol;\n  }\n  set sslProtocol(newValue) {\n    this._sslProtocol = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#compressionLevel\n   * @type {Number}\n   * @description zlib compression level (1-9) or no compression (0)\n   *\n   * When this property is set to a valid, non-zero value (1-9):\n   *\n   * * tcp:// connections are established compressed.\n   * This usually requires connecting to a different tcp port on the router,\n   * 55003 by default.\n   *\n   * * tcps:// connections are established uncompressed,\n   * but then negotiate compression on login.\n   * Compression before encryption allows inference of similarities between messages\n   * from observing packet sizes on the network.\n   * This could lead to chosen Plaintext attacks.\n   * Can be combined with sslDowngradeConnectionTo for no encryption beyond authentication.\n   *\n   * * ws(s):// and http(s):// transports do not support compression and are considered invalid.\n   *\n   * @default 0\n   * @target node\n   */\n\n  get compressionLevel() {\n    return Check.nothing(this._compressionLevel) ? 0 : this._compressionLevel;\n  }\n  set compressionLevel(newValue) {\n    this._compressionLevel = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslConnectionDowngradeTo\n   * @type {solace.SslDowngrade}\n   * @description Disable encryption after authentication\n   *\n   * When set to {@link solace.SslDowngrade.PLAINTEXT},\n   * all message traffic beyond the initial login is unencrypted.\n   * A TLS connection is negotiated on the regular TLS port (55443 by default),\n   * TLS authentication schemes can be used, same as without this option.\n   * After a successful login however, a TLS shutdown is performed,\n   * and the same socket is then used for unencrypted message traffic.\n   *\n   * Please note this way plain text traffic passes on a port\n   * usually associated with encryption (55443 by default)\n   *\n   * This downgrade is only supported for tcps:// connections,\n   * all other URL schemes ignore this option.\n   *\n   * Can be combined with compressionLevel for\n   * non-encrypted, compressed message transfer after login.\n   *\n   * @default {@link solace.SslDowngrade.NONE}\n   * @target node\n   */\n  get sslConnectionDowngradeTo() {\n    return Check.nothing(this._sslConnectionDowngradeTo) ?\n      SslDowngrade.NONE : this._sslConnectionDowngradeTo;\n  }\n\n  set sslConnectionDowngradeTo(newValue) {\n    this._sslConnectionDowngradeTo = newValue;\n  }\n\n  _lendsInspect() {\n    return {\n      'sslExcludedProtocols':     this.sslExcludedProtocols,\n      'sslCipherSuites':          this.sslCipherSuites,\n      'sslValidateCertificate':   this.sslValidateCertificate,\n      'sslTrustStores':           this.sslTrustStores,\n      'sslTrustedCommonNameList': this.sslTrustedCommonNameList,\n      'sslPfx':                   this.sslPfx,\n      'sslPfxPassword':           this.sslPfxPassword ? '*****' : this.sslPfxPassword,\n      'sslPrivateKey':            this.sslPrivateKey,\n      'sslPrivateKeyPassword':    this.sslPrivateKeyPassword ? '*****' : this.sslPrivateKeyPassword,\n      'sslCertificate':           this.sslCertificate,\n      'sslProtocol':              this.sslProtocol,\n      'compressionLevel':         this.compressionLevel,\n      'sslConnectionDowngradeTo': this.sslConnectionDowngradeTo,\n    };\n  }\n}\n\nconst SessionPropertiesBase = BUILD_ENV.TARGET_NODE\n  ? SessionPropertiesNode\n  : SessionPropertiesBrowser;\n\n/**\n * @classdesc\n * Represents a session properties object. Passed in to\n * {@link solace.SolclientFactory.createSession} when creating a {@link solace.Session} instance.\n * @memberof solace\n * @extends APIProperties\n */\nclass SessionProperties extends SessionPropertiesBase {\n\n  /**\n   * @constructor\n   * @param {Object} options Properties to apply to the newly constructed object.\n   */\n  constructor(options) {\n    super(makeDefaults(), options);\n  }\n\n  /**\n   * The authentication scheme used when establishing the session.\n   * @name solace.SessionProperties#authenticationScheme\n   * @type {solace.AuthenticationScheme}\n   * @default {@link solace.AuthenticationScheme.BASIC}\n   */\n  get authenticationScheme() {\n    return Check.nothing(this._authScheme)\n        ? AuthenticationScheme.BASIC\n        : this._authScheme;\n  }\n  set authenticationScheme(newValue) {\n    this._authScheme = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#accessToken\n   * @type {String}\n   * @description The access token required for OAUTH2 authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get accessToken() {\n    return Check.empty(this._accessToken)\n        ? ''\n        : this._accessToken;\n  }\n\n  set accessToken(newValue) {\n    this._accessToken = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#idToken\n   * @type {String}\n   * @description The ID token required for OIDC authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get idToken() {\n    return Check.empty(this._idToken)\n        ? ''\n        : this._idToken;\n  }\n\n  set idToken(newValue) {\n    this._idToken = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#issuerIdentifier\n   * @type {String}\n   * @description The issuer identifier is optional for OAUTH2 authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get issuerIdentifier() {\n    return Check.empty(this._issuerIdentifier)\n        ? ''\n        : this._issuerIdentifier;\n  }\n\n  set issuerIdentifier(newValue) {\n    if (!Check.type(newValue, 'string')) {\n      LOG_WARN(`Failed to set issuer identifier because the pased value ${''\n                }was not of type String. The passed issuer identifier ${''\n                }must be of type String. Setting issuer identifier to ${''\n                }default value empty string.`);\n      this._issuerIdentifier = '';\n    } else if (Check.empty(newValue)) {\n      LOG_WARN(`Failed to set the issuer identifier because the passed string was empty ${''\n                }or null. The passed issuer identifier must not be empty or null. Setting ${''\n                }issuer identifier to default value empty string.`);\n    } else {\n      this._issuerIdentifier = newValue;\n    }\n  }\n\n  /**\n   * The URL or URLs of the messaging service to connect to.  The URL is typically of the form\n   * `<protocol>://<host[:port]>`, where:\n   *  * `protocol` is one of `ws`, `wss`, `http`, `https`, `tcp` or `tcps`.\n   *  (Note to developers who also use the browser variant of this SDK:\n   *  Browsers do not support the `tcp` and `tcps` protocols.)\n   *  * `host` is a hostname or IP address of the router to connect to.\n   *  * `port` is the port on which the messaging service is listening. The default is the\n   *    well-known port for the service associated with the given protocol, if any.\n   *\n   * Additionally, note:\n   *  * When an Array is provided, each element is expected to be a string of the above format.\n   *    The API will attempt to connect to these URLs in the specified order.\n   *  * Numerical IPv6 addresses must be enclosed in square brackets, e.g. tcp://[2001:db8::1]\n   * @name solace.SessionProperties#url\n   * @type {String|Array.<String>}\n   * @default \"\"\n   * @target node\n   */\n  /**\n   * The URL or URLs of the messaging service to connect to.  The URL is typically of the form\n   * `<protocol>://<host[:port]>`, where:\n   *  * `protocol` is one of `ws`, `wss`, `http`, `https'.\n   *  (Note to developers who also ise the NodeJS variant of this SDK:\n   *  NodeJS also supports the 'tcp' and 'tcps' protocols, but browsers do not.)\n   *  * `host` is a hostname or IP address of the router to connect to.\n   *  * `port` is the port on which the messaging service is listening. The default is the\n   *    well-known port for the service associated with the given protocol, if any.\n   *\n   * Additionally, note:\n   *  * When an Array is provided, each element is expected to be a string of the above format.\n   *    The API will attempt to connect to these URLs in the specified order.\n   *  * Cross-domain restrictions should be taken into consideration when deploying web\n   *    applications with messaging capabilities. See the API User Guide for more\n   *    information.\n   *  * Numerical IPv6 addresses must be enclosed in square brackets, e.g. ws://[2001:db8::1]\n   * @name solace.SessionProperties#url\n   * @type {String|Array.<String>}\n   * @default \"\"\n   * @target browser\n   */\n  get url() {\n    return Check.nothing(this._url) ? '' : this._url;\n  }\n\n  set url(newValue) {\n    this._url = newValue;\n  }\n\n  //  ======================== Credentials  ========================\n\n  /**\n   * @name solace.SessionProperties#password\n   * @type {String}\n   * @description The password required for authentication.\n   * @default \"\"\n   */\n  get password() {\n    return Check.nothing(this._password) ? '' : this._password;\n  }\n\n  set password(newValue) {\n    this._password = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#userName\n   * @type {String}\n   * @description  The client username required for authentication.\n   * @default \"\"\n   */\n  get userName() {\n    return Check.nothing(this._userName) ? '' : this._userName;\n  }\n\n  set userName(newValue) {\n    this._userName = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#clientName\n   * @type {String}\n   * @default '' (automatically generated)\n   * @description The client name that is used during login as a unique identifier for the session\n   * on the Solace Message Router.\n   *  * An empty string causes a unique client name to be generated\n   *     automatically.\n   *  * If specified, it must be a valid Topic name, and a maximum of 160 bytes in length.\n   *  * This property is also used to uniquely identify the sender in\n   *    a message's senderId field if {@link solace.SessionProperties.includeSenderId}\n   *    is set.\n   * @default \"\"\n   */\n  get clientName() {\n    return Check.nothing(this._clientName) ? '' : this._clientName;\n  }\n\n  set clientName(newValue) {\n    this._clientName = newValue;\n  }\n\n  /**\n   * A string that uniquely describes the application instance.\n   *  * If left blank, the API will generate a description string\n   *    using the current user-agent string.\n   * @default \"\"\n   * @name solace.SessionProperties#applicationDescription\n   * @type {String}\n   */\n  get applicationDescription() {\n    return Check.nothing(this._appDesc) ? '' : this._appDesc;\n  }\n  set applicationDescription(newValue) {\n    this._appDesc = newValue;\n  }\n\n  /**\n   * The Message VPN name that the client is requesting for this session.\n   * @default \"\"\n   * @name solace.SessionProperties#vpnName\n   * @type {String}\n   */\n  get vpnName() {\n    return Check.nothing(this._vpnName) ? '' : this._vpnName;\n  }\n  set vpnName(newValue) {\n    this._vpnName = newValue;\n  }\n\n  /**\n   * A read-only session property that indicates which Message\n   * VPN the session is connected to. When not connected, or when not in client mode,\n   * an empty string is returned.\n   * @default \"\"\n   * @name solace.SessionProperties#vpnNameInUse\n   * @type {String}\n   * @readonly\n   */\n  get vpnNameInUse() {\n    return Check.nothing(this._vpnNameInUse) ? '' : this._vpnNameInUse;\n  }\n  /**\n   * @private\n   * @param {String} value The vpn name currently being used.\n   */\n  _setVpnNameInUse(value) {\n    this._vpnNameInUse = value;\n  }\n\n  /**\n   * @name solace.SessionProperties#virtualRouterName\n   * @type {String}\n   * @description A read-only property that indicates the connected Solace Message Router's\n   * virtual router name.\n   * @default \"\"\n   * @readonly\n   */\n  get virtualRouterName() {\n    return Check.nothing(this._virtualRouterName) ? '' : this._virtualRouterName;\n  }\n  /**\n   * @private\n   * @param {String} value The current virtual router name.\n   */\n  _setVirtualRouterName(value) {\n    this._virtualRouterName = value;\n  }\n\n  //  ======================== Connection Strategies ========================\n  /**\n   * @name solace.SessionProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a connect operation to a given host.\n   *  If no value is provided, the default is 8000.\n   *   * The valid range is > 0.\n   * @default 8000\n   * @target node\n   */\n  /**\n   * @name solace.SessionProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a connect operation to a given host.\n   *  If no value is provided, the default is calculated as shown below.\n   *   * The valid range is > 0.\n   * @default max(8000, 1000 + webTransportProtocolList.length * transportDowngradeTimeoutInMsecs)\n   * @target browser\n   */\n  get connectTimeoutInMsecs() {\n    if (Check.nothing(this._connectTimeout)) {\n      return this.defaultConnectTimeoutInMsecs;\n    }\n    return this._connectTimeout;\n  }\n  set connectTimeoutInMsecs(newValue) {\n    this._connectTimeout = newValue;\n  }\n\n  /**\n   * @internal\n   */\n  get defaultConnectTimeoutInMsecs() {\n    const minTimeout = 8000;\n    const { webTransportProtocolList, transportDowngradeTimeoutInMsecs } = this;\n    const transportCount = webTransportProtocolList ? webTransportProtocolList.length : 1;\n    const margin = transportCount > 1 ? 1000 : 0;\n    const connectDowngradeDefault = transportCount * transportDowngradeTimeoutInMsecs + margin;\n    return Math.max(minTimeout, connectDowngradeDefault);\n  }\n\n  /**\n   * @name solace.SessionProperties#connectRetries\n   * @type {Number}\n   * @description The number of times to retry connecting during initial connection setup.\n   *\n   * When using a host list, each traversal of the list is considered a try; therefore, if\n   * `connectRetries === 2`, the host list will be traversed up to three times: once\n   * for the initial try, and twice more for the retries. Each retry begins with the first host\n   * listed. After each unsuccessful attempt to connect to a host, the API waits for the amount\n   * of time set for {@link solace.SessionProperties#reconnectRetryWaitInMsecs} before attempting\n   * another connection. The next connection attempt may be to the same host,\n   * see {@link solace.SessionProperties#connectRetriesPerHost}.\n   *\n   * If an established connection fails, the reconnection is attempted with\n   * {@link solace.SessionProperties#reconnectRetries} retries instead.\n   *\n   *  * The valid range is connectRetries >= -1.\n   *  * -1 means try to connect forever.\n   *  * 0 means no automatic connection retries; the API will try once and then give up.\n   *  * connectRetries >= 1 means reattempt connection n times.\n   * @default 20\n   */\n  get connectRetries() {\n    return Check.nothing(this._connectRetries) ? 20 : this._connectRetries;\n  }\n  set connectRetries(newValue) {\n    this._connectRetries = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#connectRetriesPerHost\n   * @type {Number}\n   * @description When using a host list, this property defines how many times to\n   * try to connect to a single host before moving to the next host in the list.\n   *\n   *  * The valid range is connectRetriesPerHost >= -1.\n   *  * -1 means attempt an infinite number of connection retries. The API will only\n   *    attempt to connect to the first host in the list.\n   *  * 0 means make a single connection attempt per host, with no retries.\n   * @default 0\n   */\n  get connectRetriesPerHost() {\n    return Check.nothing(this._connectRetriesPerHost) ? 0 : this._connectRetriesPerHost;\n  }\n  set connectRetriesPerHost(newValue) {\n    this._connectRetriesPerHost = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#reconnectRetryWaitInMsecs\n   * @type {Number}\n   * @description How much time to wait (in ms) between each attempt to connect to\n   * a host.\n   * If a connect attempt is not successful, the API waits for the amount of time\n   * specified, and then makes another attempt to connect.\n   * {@link solace.SessionProperties#connectRetriesPerHost} sets how many connection\n   * attempts will be made before moving on to the next host in the list.\n   * The valid range is >= 0 and <= 60000.\n   * @default 3000\n   */\n  get reconnectRetryWaitInMsecs() {\n    return Check.nothing(this._reconnectRetryWaitInMsecs) ? 3000 : this._reconnectRetryWaitInMsecs;\n  }\n  set reconnectRetryWaitInMsecs(newValue) {\n    this._reconnectRetryWaitInMsecs = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#reconnectRetries\n   * @type {Number}\n   * @description The number of times to retry connecting after a connected session goes down.\n   *\n   * When using a host list, each traversal of the list is considered a try; therefore, if\n   * `reconnectRetries === 2`, the host list will be traversed up to three times: once\n   * for the initial try, and twice more for the retries. Each retry begins with the first host\n   * listed. After each unsuccessful attempt to connect to a host, the API waits for the amount\n   * of time set for {@link solace.SessionProperties#reconnectRetryWaitInMsecs} before attempting\n   * another connection. The next reconnect attempt may be to the same host,\n   * see {@link solace.SessionProperties#connectRetriesPerHost}.\n   *\n   *  * The valid range is reconnectRetries >= -1.\n   *  * -1 means try to reconnect forever.\n   *  * 0 means no automatic reconnect retries; the API will try once and then give up.\n   *  * reconnectRetries >= 1 means reattempt reconnect n times.\n   * @default 20\n   */\n  get reconnectRetries() {\n    return Check.nothing(this._reconnectRetries) ? 20 : this._reconnectRetries;\n  }\n  set reconnectRetries(newValue) {\n    this._reconnectRetries = newValue;\n  }\n\n  //  ======================== message properties ========================\n  /**\n   * @name solace.SessionProperties#generateSendTimestamps\n   * @type {Boolean}\n   * @description When enabled, a send timestamp is automatically included\n   * (if not already present) in the Solace-defined fields for\n   * each message sent.\n   * @default  false\n   */\n  get generateSendTimestamps() {\n    return Check.nothing(this._genSendTimestamps) ? false : this._genSendTimestamps;\n  }\n  set generateSendTimestamps(newValue) {\n    this._genSendTimestamps = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#generateReceiveTimestamps\n   * @type {Boolean}\n   * @description When enabled, a receive timestamp is recorded for\n   * each message and passed to the session's message callback receive handler.\n   * @default  false\n   */\n  get generateReceiveTimestamps() {\n    return Check.nothing(this._genReceiveTimestamps) ? false : this._genReceiveTimestamps;\n  }\n  set generateReceiveTimestamps(newValue) {\n    this._genReceiveTimestamps = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#includeSenderId\n   * @type {Boolean}\n   * @description When enabled, a sender ID is automatically included\n   * (if not already present) in the Solace-defined fields for each message\n   * sent.\n   * @default  false\n   */\n  get includeSenderId() {\n    return Check.nothing(this._includeSenderId) ? false : this._includeSenderId;\n  }\n  set includeSenderId(newValue) {\n    this._includeSenderId = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#generateSequenceNumber\n   * @type {Boolean}\n   * @description When enabled, a sequence number is automatically\n   * included (if not already present) in the Solace-defined fields\n   * for each message sent.\n   * @default  false\n   */\n  get generateSequenceNumber() {\n    return Check.nothing(this._genSequenceNumber) ? false : this._genSequenceNumber;\n  }\n  set generateSequenceNumber(newValue) {\n    this._genSequenceNumber = newValue;\n  }\n\n  //  ======================== Keep Alive ========================\n  /**\n   * @name solace.SessionProperties#keepAliveIntervalInMsecs\n   * @type {Number}\n   * @description The amount of time (in milliseconds) to wait between sending\n   * out keep-alive messages to the Solace Message Router.\n   *  * The valid range is > 0.\n   * @default  3000\n   */\n  get keepAliveIntervalInMsecs() {\n    return Check.nothing(this._kaInterval) ? 3000 : this._kaInterval;\n  }\n  set keepAliveIntervalInMsecs(newValue) {\n    this._kaInterval = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#keepAliveIntervalsLimit\n   * @type {Number}\n   * @description The maximum number of consecutive Keep-Alive messages that\n   * can be sent without receiving a response before the session is declared down\n   * and the connection is closed by the API.\n   *  * The valid range is >= 3.\n   * @default 3\n   */\n  get keepAliveIntervalsLimit() {\n    return Check.nothing(this._kaIntervalsLimit) ? 3 : this._kaIntervalsLimit;\n  }\n  set keepAliveIntervalsLimit(newValue) {\n    this._kaIntervalsLimit = newValue;\n  }\n\n  // ======================== P2P Inbox ========================\n\n  /**\n   * @name solace.SessionProperties#p2pInboxInUse\n   * @type {String}\n   * @description A read-only string that indicates the default\n   * reply-to destination used for any request messages sent from this session.\n   * See {@link solace.Session#sendRequest}.\n   * This parameter is only valid when the session is connected.\n   * @default \"\"\n   * @readonly\n   */\n  get p2pInboxInUse() {\n    return Check.nothing(this._p2pInboxInUse) ? '' : this._p2pInboxInUse;\n  }\n  /**\n   * @private\n   * @param {String} value The current P2P subscription.\n   */\n  _setP2pInboxInUse(value) {\n    this._p2pInboxInUse = value;\n  }\n\n  /**\n   * @private\n   *\n   * @name solace.SessionProperties#p2pInboxBase\n   * @description A read-only information string that stores the P2P topic subscription\n   * obtained from the Solace Message Router.\n   * This parameter is only valid when the session is connected.\n   * @default  \"\"\n   * @readonly\n   */\n  get p2pInboxBase() {\n    return Check.nothing(this._p2pInboxBase) ? '' : this._p2pInboxBase;\n  }\n  /**\n   * @private\n   * @param {String} value The current P2P inbox root subscription. The subscription on the router\n   *   additionally contains '/>', so extra topic levels can be added to this root and messages to\n   *   those topics will be attracted with the subscription.\n   */\n  _setP2pInboxBase(value) {\n    this._p2pInboxBase = value;\n  }\n\n  /**\n   * @name solace.SessionProperties#userIdentification\n   * @type {String}\n   * @description A read-only string providing information\n   * about the application, such as the name of operating system\n   * that is running the application.\n   * @default  \"\"\n   * @readonly\n   */\n  get userIdentification() {\n    return Check.nothing(this._userIdentification) ? '' : this._userIdentification;\n  }\n  /**\n   * @private\n   * @param {String} value The current userId\n   */\n  _setUserIdentification(value) {\n    this._userIdentification = value;\n  }\n\n  // ================== Subscriptions ========================\n  /**\n   *\n   * @name solace.SessionProperties#subscriberLocalPriority\n   * @type {Number}\n   * @description Subscriber priorities are used by the Solace Message Router to distribute messages\n   * that have the {@link solace.Message#setDeliverToOne} flag set to true. These messages are sent\n   * to the subscriber with the highest priority. Subscribers have two priorities; this\n   * priority is for messages published locally.\n   *  * The valid range is 1..4\n   * @default 1\n   * @deprecated Use Shared Subscriptions instead\n   */\n  get subscriberLocalPriority() {\n    return Check.nothing(this._subLocalPriority) ? 1 : this._subLocalPriority;\n  }\n  set subscriberLocalPriority(newValue) {\n    this._subLocalPriority = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#subscriberNetworkPriority\n   * @type {Number}\n   * @description Subscriber priorities are used by the Solace Message Router to distribute messages\n   * that have the {@link solace.Message#setDeliverToOne} flag set to true. These messages are sent\n   * to the subscriber with the highest priority.\n   *\n   * Subscribers have two priorities; this priority is for messages published on Solace Message\n   * Routers other than the one that the client is connected to.\n   *  * The valid range is 1..4\n   * @default  1\n   * @deprecated Use Shared Subscriptions instead\n   */\n  get subscriberNetworkPriority() {\n    return Check.nothing(this._subNetworkPriority) ? 1 : this._subNetworkPriority;\n  }\n  set subscriberNetworkPriority(newValue) {\n    this._subNetworkPriority = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#ignoreDuplicateSubscriptionError\n   * @type {Boolean}\n   * @description Used to ignore duplicate subscription errors on subscribe.\n   * @default  true\n   */\n  get ignoreDuplicateSubscriptionError() {\n    return Check.nothing(this._ignoreDupSubError) ? true : this._ignoreDupSubError;\n  }\n  set ignoreDuplicateSubscriptionError(newValue) {\n    this._ignoreDupSubError = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#ignoreSubscriptionNotFoundError\n   * @type {Boolean}\n   * @description Used to ignore subscription not found errors on unsubscribe.\n   * @default  true\n   */\n  get ignoreSubscriptionNotFoundError() {\n    return Check.nothing(this._ignoreSubNotFoundError) ? true : this._ignoreSubNotFoundError;\n  }\n  set ignoreSubscriptionNotFoundError(newValue) {\n    this._ignoreSubNotFoundError = newValue;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#reapplySubscriptions\n   * @type {Boolean}\n   * @description Set to 'true' to have the API remember subscriptions and reapply them upon\n   * calling {@link solace.Session#connect} on a disconnected session.\n   * @default  false\n   */\n  get reapplySubscriptions() {\n    return Check.nothing(this._reapplySubcriptions) ? false : this._reapplySubcriptions;\n  }\n  set reapplySubscriptions(newValue) {\n    this._reapplySubcriptions = newValue;\n  }\n\n  // ================== AD configuration ========================\n  /**\n   * Sets the guaranteed messaging publisher properties for the session.\n   * If the supplied value is not a {@link solace.MessagePublisherProperties},\n   * one will be constructed using the supplied value as an argument.\n   *\n   * @name solace.SessionProperties#publisherProperties\n   * @type {solace.MessagePublisherProperties}\n   */\n  get publisherProperties() {\n    return this._publisherProperties;\n  }\n  set publisherProperties(val) {\n    const { MessagePublisherProperties } = PublisherLib;\n    this._publisherProperties = val instanceof MessagePublisherProperties\n      ? val\n      : new MessagePublisherProperties(val);\n  }\n\n  // ================== Transport configuration ========================\n\n  /**\n   *\n   * @name solace.SessionProperties#noLocal\n   * @type {Boolean}\n   * @description Set to 'true' to signal the Solace Message Router that messages published on the\n   * session should not be received on the same session even if the client has a subscription that\n   * matches the published topic. If this restriction is requested, and the Solace Message Router\n   * does not have No Local support, the session connect will fail.\n   * @default  false\n   */\n  get noLocal() {\n    return Check.nothing(this._noLocal) ? false : this._noLocal;\n  }\n  set noLocal(newValue) {\n    this._noLocal = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#readTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a reply to\n   * come back from the Solace Message Router. This timeout serves as the default\n   * request timeout for {@link solace.Session#subscribe},\n   * {@link solace.Session#unsubscribe}, {@link solace.Session#updateProperty}.\n   *  * The valid range is >= 0.\n   * @default 10000\n   */\n  get readTimeoutInMsecs() {\n    return Check.nothing(this._readTimeout) ? 10000 : this._readTimeout;\n  }\n  set readTimeoutInMsecs(newValue) {\n    this._readTimeout = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sendBufferMaxSize\n   * @type {Number}\n   * @description The maximum buffer size for the transport session. This size must be bigger\n   * than the largest message an application intends to send on the session.\n   *\n   * The session buffer size configured using the sendBufferMaxSize\n   * session property controls SolClient buffering of transmit messages. When\n   * sending small messages, the session buffer size should be set to multiple times\n   * the typical message size to improve the performance. Regardless of the buffer\n   * size, SolClient always accepts at least one message to transmit. So even if a\n   * single message exceeds sendBufferMaxSize, it is accepted and\n   * transmitted as long as the current buffered data is zero. However, no more\n   * messages are accepted until the amount of data buffered is reduced\n   * enough to allow room below sendBufferMaxSize.\n   *  * The valid range is > 0.\n   *\n   * @default 65536 (64KB)\n   */\n  get sendBufferMaxSize() {\n    return Check.nothing(this._sendBufferMaxSize) ? (64 * 1024) : this._sendBufferMaxSize;\n  }\n  set sendBufferMaxSize(newValue) {\n    this._sendBufferMaxSize = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#assumedMaxAdSize\n   * @type {Number}\n   * @description The assumed maximum AD message payload size before the session is established.\n   * This value is irrelevant after session connection establishment,\n   * because at that point the broker-reported AD size limit takes precedence.\n   *\n   * Before the session is connected, messages with payloads larger than this number\n   * are rejected upon send().\n   * The default value of 30000000 is appropriate for appliances, whereas for VMRs it should be set to 10000000.\n   *\n   *  * The valid range is > 0.\n   *\n   * @default 30000000 \n   */\n  get assumedMaxAdSize() {\n    return Check.nothing(this._assumedMaxAdSize) ? 30000000 : this._assumedMaxAdSize;\n  }\n\n  set assumedMaxAdSize(newValue) {\n    this._assumedMaxAdSize = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#maxWebPayload\n   * @type {Number}\n   * @description The maximum payload size (in bytes) when sending data using the Web transport\n   * protocol.  Large messages may fail to be sent to the Solace Message Router when the maximum web\n   * payload is set to a small value. To avoid this, use a large maximum web payload.\n   *  * The valid range is >= 100.\n   * @default 1048576 (1MB)\n   */\n  get maxWebPayload() {\n    return Check.nothing(this._maxWebPayload) ? (1024 * 1024) : this._maxWebPayload;\n  }\n  set maxWebPayload(newValue) {\n    this._maxWebPayload = newValue;\n  }\n\n  /**\n   * @private\n   */\n  get nonHTTPTransportPropsSet() {\n      // Calculate on demand based on presence of properties.\n      // Currently not tracking this so no property names listed.\n    return [].filter(k => Check.something(this[k]));\n  }\n\n  /**\n   * @returns {String} A brief description of this object\n   * @private\n   */\n  [util_inspect_custom]() {\n    return Object.assign(this._lendsInspect(), {\n      'authenticationScheme':             AuthenticationScheme.describe(this.authenticationScheme),\n      'accessToken':                      this.accessToken ? '*****' : 'Not Set',\n      'idToken':                          this.idToken ? '*****' : 'Not Set',\n      'issuerIdentifier':                 this.issuerIdentifier ? '*****' : 'Not Set',\n      'url':                              this.url,\n      'password':                         this.password ? '*****' : this.password,\n      'userName':                         this.userName,\n      'clientName':                       this.clientName,\n      'applicationDescription':           this.applicationDescription,\n      'vpnName':                          this.vpnName,\n      'vpnNameInUse':                     this.vpnNameInUse,\n      'virtualRouterName':                this.virtualRouterName,\n      'connectTimeoutInMsecs':            this.connectTimeoutInMsecs,\n      'connectRetries':                   this.connectRetries,\n      'connectRetriesPerHost':            this.connectRetriesPerHost,\n      'reconnectRetryWaitInMsecs':        this.reconnectRetryWaitInMsecs,\n      'reconnectRetries':                 this.reconnectRetries,\n      'generateSendTimestamps':           this.generateSendTimestamps,\n      'generateReceiveTimestamps':        this.generateReceiveTimestamps,\n      'includeSenderId':                  this.includeSenderId,\n      'generateSequenceNumber':           this.generateSequenceNumber,\n      'keepAliveIntervalInMsecs':         this.keepAliveIntervalInMsecs,\n      'keepAliveIntervalsLimit':          this.keepAliveIntervalsLimit,\n      'p2pInboxInUse':                    this.p2pInboxInUse,\n      'p2pInboxBase':                     this.p2pInboxBase,\n      'userIdentification':               this.userIdentification,\n      'subscriberLocalPriority':          this.subscriberLocalPriority,\n      'subscriberNetworkPriority':        this.subscriberNetworkPriority,\n      'ignoreDuplicateSubscriptionError': this.ignoreDuplicateSubscriptionError,\n      'reapplySubscriptions':             this.reapplySubscriptions,\n      'publisherProperties':              this.publisherProperties,\n      'noLocal':                          this.noLocal,\n      'readTimeoutInMsecs':               this.readTimeoutInMsecs,\n      'sendBufferMaxSize':                this.sendBufferMaxSize,\n      'maxWebPayload':                    this.maxWebPayload,\n    });\n  }\n\n  /**\n   * @name solace.SessionProperties#toString\n   * @method\n   * @description Returns a human-readable representation of this Session, subject to change.\n   * @returns {String} A brief description of this object\n   */\n  toString() {\n    return super.toString(); // only here for the docs\n  }\n\n}\n\n// Don't try to evaluate these constants in browser mode\nif (BUILD_ENV.TARGET_NODE) {\n  /**\n   * @description The default comma separated list of cipher suites in\n   * order of preference used for SSL connections.\n   * @constant\n   * @type {String}\n   */\n  SessionProperties.DEFAULT_CIPHER_SUITES = DEFAULT_CIPHER_SUITES;\n\n  /**\n   * A list of cipher suites supported by the API when using SSL connections\n   * @constant\n   * @type {string[]}\n   * @private\n   */\n  SessionProperties.SUPPORTED_CIPHER_SUITES = SUPPORTED_CIPHER_SUITES;\n\n  /**\n   * SSL protocols supported by the API when using SSL connections\n   * @type {string[]}\n   * @private\n   */\n  SessionProperties.SUPPORTED_SSL_PROTOCOLS = SUPPORTED_SSL_PROTOCOLS;\n\n  /* eslint-disable */ // don't mangle import\n  SessionProperties.SslProtocolExcludeConstantMap = {\n    ['sslv2']:   NodeSslConstants['SSL_OP_NO_SSLv2'] || 0,\n    ['sslv3']:   NodeSslConstants['SSL_OP_NO_SSLv3'] || 0,\n    ['tlsv1']:   NodeSslConstants['SSL_OP_NO_TLSv1'] || 0,\n    ['tlsv1.1']: NodeSslConstants['SSL_OP_NO_TLSv1_1'] || 0,\n    ['tlsv1.2']: NodeSslConstants['SSL_OP_NO_TLSv1_2'] || 0,\n  };\n  /* eslint-enable */ // don't mangle import\n}\n\n\nmodule.exports.SessionProperties = SessionProperties;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionRequestType = {\n  ADD_SUBSCRIPTION:        0,\n  REMOVE_SUBSCRIPTION:     1,\n  ADD_P2PINBOX:            2,\n  REMOVE_P2PINBOX:         3,\n  REMOVE_DTE_SUBSCRIPTION: 100,\n};\n\nmodule.exports.SessionRequestType = Enum.new(SessionRequestType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Internal session state\n * @enum {string}\n * @memberof solace\n * @private\n */\nconst SessionStateName = {\n  DISCONNECTED:                     'SessionDisconnected',\n  CONNECTING:                       'SessionConnecting',\n  WAITING_FOR_TRANSPORT:            'WaitingForTransport',\n  WAITING_FOR_TRANSPORT_UP:         'WaitingForTransportUp',\n  WAITING_FOR_LOGIN:                'WaitingForLogin',\n  TRANSPORT_UP:                     'SessionTransportUp',\n  FULLY_CONNECTED:                  'SessionFullyConnected',\n  SESSION_ERROR:                    'SessionError',\n  DISCONNECTING:                    'SessionDisconnecting',\n  REAPPLYING_SUBSCRIPTIONS:         'ReapplyingSubscriptions',\n  WAITING_FOR_PUBFLOW:              'WaitingForMessagePublisher',\n  DISPOSED:                         'SessionDisposed',\n  WAITING_FOR_SUBCONFIRM:           'WaitForSubConfirm',\n  WAITING_FOR_CAN_ACCEPT_DATA:      'WaitForCanAcceptData',\n  DISCONNECTING_FLOWS:              'DisconnectingFlows',\n  FLUSHING_TRANSPORT:               'FlushingTransport',\n  DESTROYING_TRANSPORT:             'DestroyingTransport',\n  RECONNECTING:                     'Reconnecting',\n  TRANSPORT_FAIL:                   'TransportFail',\n  WAITING_FOR_INTERCONNECT_TIMEOUT: 'WaitingForInterconnectTimeout',\n  WAITING_FOR_DNS:                  'WaitingForDNS',\n  WAITING_FOR_TRANSPORT_CHANGE:     'WaitingForTransportChange',\n};\n\nmodule.exports.SessionStateName = Enum.new(SessionStateName);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionState = {\n  /**\n   * The session is connecting.\n   */\n  CONNECTING:    1,\n  /**\n   * The session is connected.\n   */\n  CONNECTED:     2,\n  /**\n   * The session experienced an error.\n   */\n  SESSION_ERROR: 3,\n  /**\n   * The session is disconnecting.\n   */\n  DISCONNECTING: 4,\n  /**\n   * The session is disconnected.\n   */\n  DISCONNECTED:  5,\n\n};\n\nmodule.exports.SessionState = Enum.new(SessionState);\n","const DestinationLib = require('solclient-destination');\nconst MessageLib = require('solclient-message');\nconst SolclientFactoryLib = require('solclient-factory');\nconst { assert } = require('solclient-eskit');\nconst { CacheSession,\n        CACHE_REQUEST_PREFIX } = require('solclient-solcache-session');\nconst { CapabilityType } = require('./capability-types');\nconst { Check,\n        Parameter } = require('solclient-validate');\nconst { DefaultCapabilities } = require('./default-capabilities');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError,\n        RequestEventCode } = require('solclient-error');\nconst { EventEmitter } = require('solclient-events');\nconst { GlobalContext } = require('./global-context');\nconst { HostList } = require('./host-list');\nconst { LogFormatter } = require('solclient-log');\nconst { MessageRxCBInfo } = require('./message-rx-cb-info');\nconst { MutableSessionProperty } = require('./mutable-session-properties');\nconst { OutstandingDataRequest } = require('./outstanding-data-request');\nconst { P2PUtil } = require('./p2p-util');\nconst { QueueDescriptor,\n        QueueType } = require('solclient-queue');\nconst { SDTField,\n        SDTFieldType } = require('solclient-sdt');\nconst { SessionEvent } = require('./session-event');\nconst { SessionEventCBInfo } = require('./session-event-cb-info');\nconst { SessionEventCode } = require('./session-event-codes');\nconst { SessionEventName } = require('./session-event-names');\nconst { SessionFSM } = require('./session-fsm');\nconst { SessionFSMEvent } = require('./session-fsm-event');\nconst { SessionOperation } = require('./session-operations');\nconst { SessionProperties } = require('./session-properties');\nconst { SessionPropertiesValidator } = require('./session-properties-validator');\nconst { SessionRequestType } = require('./session-request-types');\nconst { SessionState } = require('./session-states');\nconst { SessionStateName } = require('./session-state-names');\nconst { Stats,\n        StatType } = require('solclient-stats');\nconst { StringUtils } = require('solclient-util');\nconst { TransportCapabilities,\n        TransportProtocol,\n        TransportReturnCode } = require('solclient-transport');\n\nfunction transportProtocolDefaultList() {\n  const { ProfileBinding } = SolclientFactoryLib;\n\n  if (BUILD_ENV.TARGET_NODE) {\n    return [TransportProtocol.WS_BINARY];\n  }\n\n  const result = [];\n  if (TransportCapabilities.web.webSocket()) {\n    result.push(TransportProtocol.WS_BINARY);\n  }\n  const profile = ProfileBinding.value;\n  if (profile.cometEnabled) {\n    if (TransportCapabilities.web.xhrBinary()) {\n      if (TransportCapabilities.web.streaming()) {\n        result.push(TransportProtocol.HTTP_BINARY_STREAMING);\n      }\n      result.push(TransportProtocol.HTTP_BINARY);\n    }\n    result.push(TransportProtocol.HTTP_BASE64);\n  }\n  return result;\n}\n\nfunction isValidADTransport(transportProtocol) {\n  return (transportProtocol && (\n          transportProtocol !== TransportProtocol.HTTP_BINARY_STREAMING &&\n          transportProtocol !== TransportProtocol.HTTP_BINARY &&\n          transportProtocol !== TransportProtocol.HTTP_BASE64));\n}\n\nfunction formatEventName(eventName) {\n  return `SessionEventCode.${SessionEventCode.describe(eventName)}`;\n}\n\n/**\n * @private\n */\nconst SOLCLIENT_REQUEST_PREFIX = '#REQ';\n\n/**\n * A callback that returns replies to requests sent via {@link solace.Session#sendRequest}.\n * The replyReceivedCallback <b>must</b> be provided to the API as the third argument of\n * {@link solace.Session#sendRequest}.\n * @callback\n * @function\n * @name solace.Session.replyReceivedCallback\n * @param {solace.Session} session The session object that received the reply.\n * @param {solace.Message} message The reply message received.\n * @param {Object} userObject The user object associated with the callback. 'undefined' when\n * not provided to <i>sendRequest</i>\n */\n\n/**\n * A callback that returns errors associated with requests sent via\n * {@link solace.Session#sendRequest}. The requestFailedCallback <b>must</b> be\n * provided to the API as the fourth argument of\n * {@link solace.Session#sendRequest}\n * @callback\n * @function\n * @name solace.Session.requestFailedCallback\n * @param {solace.Session} session The session object associated with the event.\n * @param {solace.RequestError} error The event associated with the failure.\n * @param {Object} userObject The user object associated with the callback. 'undefined' when\n * not provided to <i>sendRequest</i>\n */\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * Applications must use {@link solace.SolclientFactory.createSession} to create a session.\n *\n * Represents a client Session.\n *\n * Session provides these major functions:\n *  * Subscriber control, such as updating subscriptions;\n *  * Publishes both Direct and Guaranteed Messages to the router;\n *  * Receives direct messages from the router.\n *\n * The Session object is an\n * {@link https://nodejs.org/api/events.html#events_class_eventemitter|EventEmitter}, and will emit\n * events with event names from {@link solace.SessionEventCode} when Session events occur.\n * Each session event can be subscribed using {@link solace.Session#on} with the corresponding\n * {@link solace.SessionEventCode}. If any of the registered event listeners throw an exception,\n * the exception will be emitted on the 'error' event.\n *\n * @fires solace.SessionEventCode#ACKNOWLEDGED_MESSAGE\n * @fires solace.SessionEventCode#CAN_ACCEPT_DATA\n * @fires solace.SessionEventCode#CONNECT_FAILED_ERROR\n * @fires solace.SessionEventCode#DISCONNECTED\n * @fires solace.SessionEventCode#DOWN_ERROR\n * @fires solace.SessionEventCode#GUARANTEED_MESSAGE_PUBLISHER_DOWN\n * @fires solace.SessionEventCode#MESSAGE\n * @fires solace.SessionEventCode#PROPERTY_UPDATE_ERROR\n * @fires solace.SessionEventCode#PROPERTY_UPDATE_OK\n * @fires solace.SessionEventCode#RECONNECTED_NOTICE\n * @fires solace.SessionEventCode#RECONNECTING_NOTICE\n * @fires solace.SessionEventCode#REJECTED_MESSAGE_ERROR\n * @fires solace.SessionEventCode#REPUBLISHING_UNACKED_MESSAGES\n * @fires solace.SessionEventCode#SUBSCRIPTION_ERROR\n * @fires solace.SessionEventCode#SUBSCRIPTION_OK\n * @fires solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_ERROR\n * @fires solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_OK\n * @fires solace.SessionEventCode#UP_NOTICE\n * @fires solace.SessionEventCode#VIRTUALROUTER_NAME_CHANGED\n *\n * @hideconstructor\n * @memberof solace\n */\nclass Session extends EventEmitter {\n\n  /*\n   * Applications must use {@link solace.SolclientFactory.createSession} to create a session.\n   *\n   * @param {solace.SessionProperties} properties Properties to use for constructing\n   *        the session.\n   * @param {solace.MessageRxCBInfo} [messageCallback] Message callback info. The application can\n   *    also receive message events via\n   *    `session.on(solace.SessionEventCode.MESSAGE, (message) => { ... });`\n   * @param {solace.SessionEventCBInfo} [eventCallback] Event callback info. The application can\n   *    also receive session events via\n   *    `session.on(solace.SessionEventCode.<code>, (event) => { ... });`\n   *\n   * @throws {solace.OperationError} if the parameters have an invalid type or value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * @private\n   * @constructor\n   */\n  constructor(properties, messageCallback, eventCallback) {\n    super({\n      emits:  SessionEventCode.values,\n      direct: SessionEventCode.MESSAGE,\n      formatEventName,\n    });\n    const self = this;\n    this.logger = new LogFormatter();\n    this.logger.formatter = function formatter(...args) {\n      return [`[session=${self._sessionFSM ? self._sessionFSM.sessionIdHex : '(N/A)'}]`, ...args];\n    };\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session constructor called.');\n    if ((properties !== undefined) && (properties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('Incoming session properties:\\n', properties);\n    }\n\n    // Default error handler prints the exception:\n    this.on('error', (error) => {\n      const { LOG_ERROR } = self.logger;\n      LOG_ERROR(error.info.error);\n    });\n\n    const sessionProperties = new SessionProperties(properties);\n    {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('Eventual session properties:\\n', sessionProperties);\n    }\n    // Callbacks to client application.\n    // Get/set for these is private, so they can only be changed in-API (e.g. by CacheSession)\n    // The user-supplied one cannot be changed.\n    // The configuration of the exceptions generated by these needs to match EventEmitter, so that\n    // the handleGenericErrorEvent above can behave consistently\n    this._messageCallbackInfo = this.wrapMessageCallback(messageCallback);\n    this._eventCallbackInfo = this.wrapEventCallback(eventCallback);\n\n    // client name generation is applicable\n    if (Check.empty(sessionProperties.clientName)) {\n      // Auto-gen clientName\n      sessionProperties.clientName = GlobalContext.GenerateClientName();\n    }\n\n    // generate userIdentification\n    sessionProperties._setUserIdentification(GlobalContext.GenerateUserIdentification());\n\n    // client description generation is applicable\n    if (Check.empty(sessionProperties.applicationDescription)) {\n      // Auto-gen applicationDescription\n      sessionProperties.applicationDescription = GlobalContext.GenerateClientDescription();\n    }\n\n    // Set webTransportProtocolList after validation so we're not basing it on an\n    // invalid transport selection...so we're not checking transportProtocol/\n    // webTransportProtocolList except for parameter conflict.\n\n    // Now that we have touched up the properties as much as possible, validate\n    // This also validates the subordinate MessagePublisherProperties\n    SessionPropertiesValidator.validate(sessionProperties);\n\n    // We want a protocol list, but historically we also accept a single protocol.\n    // Create a web transport protocol list from the transport protocol\n    // option if that is all that was set. (If both were set, we failed validation)\n    if (Check.nothing(sessionProperties.webTransportProtocolList)) {\n      // Create a fallback list that starts with the selected protocol.\n      // If the selected protocol is not in the fallback list, it is not\n      // a valid protocol for the platform so return an empty list.\n      const selectedProtocol = sessionProperties.transportProtocol;\n      const defaultList = transportProtocolDefaultList();\n      const sliceIndex = selectedProtocol ? defaultList.indexOf(selectedProtocol) : 0;\n      if (sliceIndex < 0) {\n        // The user explicitly selected a protocol that wasn't valid\n        throw new OperationError(`Selected transport protocol ${\n                                 TransportProtocol.describe(selectedProtocol)\n                                 } is disabled or invalid for this platform`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      // Slice index is valid\n      sessionProperties.webTransportProtocolList = defaultList.slice(sliceIndex);\n\n      if (sessionProperties.webTransportProtocolList.length === 0) {\n        // Even before AD restrictions, no valid protocols.\n        // User error.\n        throw new OperationError(`No usable transport protocol or fallback from ${\n          TransportProtocol.describe(selectedProtocol)}`,\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n\n      // Check that the generated list is compatible with AD.\n      const validForAD = sessionProperties.webTransportProtocolList.filter(x =>\n        isValidADTransport(x));\n      if (validForAD.length === 0) {\n        this._adDisabledReason = 'Guaranteed messaging not compatible with any available ' +\n          `transport protocol: ${\n            sessionProperties.webTransportProtocolList.map(k =>\n              TransportProtocol.describe(k)).join(', ')}`;\n      }\n\n      // Don't fold this into the check below -- for that one, every\n      // protocol must be valid because the user explicitly requested all of them.\n      // In this case, we ensure that at least one of our generated list is valid.\n      if (sessionProperties.publisherProperties.enabled) {\n        if (this._adDisabledReason) {\n          throw new OperationError(\n            'Invalid transport protocol(s) for session with Guaranteed Messaging Publisher',\n            ErrorSubcode.PARAMETER_CONFLICT,\n            this._adDisabledReason\n          );\n        }\n        // AD was not disabled by having no protocols available\n        sessionProperties.webTransportProtocolList = validForAD;\n      }\n      // A valid protocol list is ready to use.\n    } else {\n      // User provided transport protocol list\n      // Check for parameter conflict between session and publisher\n      // Already checked these for parameter conflict; only one will be set\n      // Already checked that user list was not empty\n      const transportProtocols = sessionProperties.webTransportProtocolList;\n      const validForAD = transportProtocols.every(isValidADTransport);\n      if (!validForAD) {\n        const invalid = transportProtocols.filter(x => !isValidADTransport(x));\n        this._adDisabledReason = `Guaranteed messaging incompatible with selected transport protocols: ${\n          invalid.map(k => TransportProtocol.describe(k)).join(', ')}`;\n        if (sessionProperties.publisherProperties.enabled) {\n          throw new OperationError(\n            'Invalid transport protocol(s) for session with Guaranteed Messaging Publisher',\n            ErrorSubcode.PARAMETER_CONFLICT,\n            this._adDisabledReason\n          );\n        }\n      }\n    }\n\n\n    // Assign the final properties and start the state machine.\n    this._sessionProperties = sessionProperties;\n    this._sessionStats = new Stats();\n    this._hosts = new HostList(sessionProperties);\n    this._sessionFSM = new SessionFSM(\n      this._sessionProperties,\n      this,\n      this._sessionStats,\n      this._hosts\n    );\n    this._sessionFSM.start();\n    this._sessionFSM.createMessagePublisher();\n\n    /**\n     * The following fields are destroyed when disconnect is called\n     * and recreated when connect is called again.\n     * @private\n     */\n    this._outstandingDataReqs = {};\n    this._capabilities = DefaultCapabilities.createDefaultCapabilities(sessionProperties);\n    this._seqNum = 1;\n  }\n\n  /**\n   * Connects the session to the Solace Message Router as configured in\n   * the {@link solace.SessionProperties#url}.\n   *\n   * When the session is successfully connected to the Solace Message Router, the\n   * {@link solace.SessionEventCode#UP_NOTICE} event is emitted if a listener has been registered.\n   *\n   * If {@link solace.SessionProperties#reapplySubscriptions} is set to true, this operation\n   * re-registers previously registered subscriptions. The connected session event\n   * ({@link solace.SessionEventCode#event:UP_NOTICE}) is emitted only when all the subscriptions\n   * are successfully added to the router.\n   *\n   * If the API is unable to connect within {@link solace.SessionProperties#connectTimeoutInMsecs}\n   * or due to login failures, the session's state transitions back to 'disconnected' and an event\n   * is generated.\n   *\n   * **Note:** Before the session's state transitions to 'connected', a client\n   * application cannot use the session; any attempt to call functions will throw\n   * {@link solace.OperationError}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed, already connected or connecting.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the underlying transport cannot be established.\n   *   Subcode: {@link solace.ErrorSubcode.CONNECTION_ERROR}.\n   */\n  connect() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session connect called.');\n    const result = this.allowOperation(SessionOperation.CONNECT);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.CONNECT });\n    this._sessionFSM.processEvent(sEvent);\n  }\n\n  /**\n   * @returns {Boolean} True if the session can be used to acknolwedge a message\n   * @readonly\n   * @private\n   */\n  get canAck() {\n    /*\n     * If the user wants to ack a message, it was received on a session (else ack will throw),\n     * and so we know that the session was connected at some point.\n     *\n     * If the session is in any of the following states, we know it is either connecting or\n     * connected.\n     *\n     * Since we know the session was previously connected, this implies the session is either\n     * RECONNECTING or connected.\n     *\n     * We allow acks when the session is reconnecting or connected.\n     */\n    const statesCanAck = [\n      SessionStateName.CONNECTING,\n      SessionStateName.TRANSPORT_UP,\n      SessionStateName.DISCONNECTING,\n    ];\n    // Allow ack if there is some acceptable state name such that getActiveState returns the state.\n    return statesCanAck.some(stateName => !!this._sessionFSM.getActiveState(stateName));\n  }\n\n  /**\n   * Disconnects the session. The session attempts to disconnect cleanly, concluding all operations\n   * in progress. The disconnected session event {@link solace.SessionEventCode#event:DISCONNECTED}\n   * is emitted when these operations complete and the session has completely disconnected.\n   *\n   * @throws {solace.OperationError} if the session is disposed, or has never been connected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  disconnect() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session disconnect called.');\n    const result = this.allowOperation(SessionOperation.DISCONNECT);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.DISCONNECT });\n    this._sessionFSM.processEvent(sEvent);\n  }\n\n  /**\n   * Release all resources associated with the session.\n   * It is recommended to call disconnect() first for proper handshake with the message-router.\n   */\n  dispose() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session dispose called.');\n    if (this._disposed) return;\n\n    //setImmediate(() => {\n    setTimeout(() => {\n      this._sessionFSM.processEvent(\n        new SessionFSMEvent({ name: SessionEventName.DISPOSE })\n      ); // yield for disconnect if any\n      this._sessionFSM.terminateFsm();\n      this.disableEmitter();\n      this._disposed = true;\n    }, 0);\n  }\n\n  /**\n   * Subscribe to a topic, optionally requesting a confirmation from the router.\n   *\n   * If requestConfirmation is set to true:\n   * {@link solace.SessionEventCode.SUBSCRIPTION_OK} is generated when subscription is\n   * added successfully; otherwise, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated.\n   *\n   * If requestConfirmation is set to false, only session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated upon failure.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}.\n   * The returned string is in the format of \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to add.\n   * @param {Boolean} requestConfirmation true, to request a confirmation; false otherwise.\n   * @param {Object} correlationKey If specified, and if requestConfirmation is true, this value is\n   *                                echoed in the session event within {@link SessionEvent}.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  subscribe(topic, requestConfirmation, correlationKey, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session subscribe called for topic ', (topic && topic.toString && topic.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for subscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n\n    Parameter.isBooleanOrNothing('requestConfirmation', requestConfirmation);\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    this._sessionFSM.subscriptionUpdate(\n      topic,\n      !!requestConfirmation,\n      correlationKey,\n      requestTimeout,\n      SessionRequestType.ADD_SUBSCRIPTION,\n      (rxMsgObj, cancelledRequest) =>\n        this.handleSubscriptionUpdateResponse(rxMsgObj,\n                                              cancelledRequest,\n                                              requestConfirmation));\n  }\n\n  updateQueueSubscription(topic, queue, add, messageConsumer, callback, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(\n      'Queue subscribe called for topic ', (topic && topic.toString && topic.toString()),\n      ' for queue ', (queue && queue.toString && queue.toString()));\n\n    LOG_TRACE('queue: ', queue);\n\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for queue subscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n    Parameter.isInstanceOf('queue', queue, DestinationLib.Destination);\n    queue.validate();\n    if ((queue.getType() !== DestinationLib.DestinationType.QUEUE) &&\n    (queue.getType() !== DestinationLib.DestinationType.TEMPORARY_QUEUE)) {\n      throw new OperationError(`Queue is required for queue subscribe; ${\n                               DestinationLib.DestinationType.describe(queue.getType())}`,\n                               ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    this._sessionFSM.queueSubscriptionUpdate(\n      topic,\n      queue,\n      requestTimeout,\n      add,\n      (rxMsgObj, cancelledRequest) =>\n        this.handleQueueSubscriptionUpdateResponse(\n          rxMsgObj,\n          cancelledRequest,\n          callback));\n  }\n\n  /**\n   * Unsubscribe from a topic, and optionally request a confirmation from the router.\n   *\n   * If requestConfirmation is set to true, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_OK} is generated when subscription is removed\n   * successfully; otherwise, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated.\n   *\n   * If requestConfirmation is set to false, only session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated upon failure.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}. The returned\n   * string is in the format \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to remove.\n   * @param {Boolean} requestConfirmation true, to request a confirmation; false otherwise.\n   * @param {Object} correlationKey If <code>null</code> or undefined, a Correlation Key is not set\n   *                                in the confirmation session event.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  unsubscribe(topic, requestConfirmation, correlationKey, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session unsubscribe called for topic ', (topic && topic.toString && topic.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for unsubscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n\n    Parameter.isBooleanOrNothing('requestConfirmation', requestConfirmation);\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    this._sessionFSM.subscriptionUpdate(\n      topic,\n      !!requestConfirmation,\n      correlationKey,\n      requestTimeout,\n      SessionRequestType.REMOVE_SUBSCRIPTION,\n      (rxMsgObj, cancelledRequest) =>\n        this.handleSubscriptionUpdateResponse(rxMsgObj,\n                                              cancelledRequest,\n                                              requestConfirmation));\n  }\n\n  /**\n   * Request that a Durable Topic Endpoint stop receiving data on a topic. Unsubscribe\n   * requests are only allowed by the router when no clients are bound to the DTE.\n   * If the unubscribe request is successful, the DTE will stop attracting messages,\n   * and all messages spooled to the DTE will be deleted.\n   *\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_OK} is generated when the\n   * subscription is removed successfully; otherwise,\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR} is generated.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}.\n   *\n   * @param {solace.AbstractQueueDescriptor|solace.QueueDescriptor} queueDescriptor A description\n   *  of the queue to which the topic is subscribed.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   */\n  unsubscribeDurableTopicEndpoint(queueDescriptor) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session unsubscribeDurableTopicEndpoint called for queue descriptor ', (queueDescriptor && queueDescriptor.toString && queueDescriptor.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    // emulate subscription\n    const destination = this.createDestinationFromDescriptor(\n      QueueDescriptor.createFromSpec(queueDescriptor));\n    const requestConfirmation = true;\n    this._sessionFSM.subscriptionUpdate(\n      destination,\n      requestConfirmation,\n      undefined,\n      undefined,\n      SessionRequestType.REMOVE_DTE_SUBSCRIPTION,\n      (rxMsgObj, cancelledRequest) =>\n        this.handleDTEUnsubscribeResponse(rxMsgObj,\n                                          cancelledRequest));\n  }\n\n\n  /**\n   * Modify a session property after creation of the session.\n   *\n   * This method only works for a select few properties,\n   * and updates their value on the live broker session.\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property key to modify.\n   * @param {Object} newValue The new property value.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, it\n   *                                overwrites readTimeoutInMsecs\n   * @param {Object} correlationKey If specified, this value is echoed in the session event within\n   *                                {@link SessionEvent} property in {@link SessionProperties}\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   */\n  updateProperty(mutableSessionProperty, newValue, requestTimeout, correlationKey) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session updateProperty called: ', mutableSessionProperty, newValue);\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    const { Topic } = DestinationLib;\n\n    LOG_TRACE('Updating property ', mutableSessionProperty, newValue);\n\n    Parameter.isEnumMember('mutableSessionProperty', mutableSessionProperty, MutableSessionProperty);\n\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    let sessionEvent;\n    /*\n     Response CB to the CLIENTCTRL UPDATE response\n\n     This is pretty complicated: we define the whole process in here\n     using callbacks to preserve state such as the correlationKey of the user\n     request.\n     That is, this entire multi-step process executes under the context of that one call to\n     updateProperty with a single correlationKey value.\n     */\n    const responseCallback = (respMsg) => {\n      const response = respMsg.getResponse();\n      if (response.responseCode === 200) {\n        if (mutableSessionProperty === MutableSessionProperty.CLIENT_DESCRIPTION) {\n          // update property and notify client\n          this._sessionProperties.applicationDescription = newValue;\n          sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                            response.responseString,\n                                            response.responseCode,\n                                            0,\n                                            correlationKey,\n                                            null);\n          this.sendEvent(sessionEvent);\n        } else if (mutableSessionProperty === MutableSessionProperty.CLIENT_NAME) {\n          // replace P2P subscription: REM and ADD\n          const oldP2pTopicName = P2PUtil.getP2PTopicSubscription(\n            this._sessionProperties.p2pInboxBase);\n          const oldP2pTopic = Topic.createFromName(oldP2pTopicName);\n\n          const newP2pTopicName = P2PUtil.getP2PTopicSubscription(\n            respMsg.getP2PTopicValue());\n          const newP2pTopic = Topic.createFromName(newP2pTopicName);\n\n          const afterAddCallback = (smpResp) => {\n            const resp = smpResp.getResponse();\n            if (resp.responseCode === 200) {\n              // notify client\n              this._sessionProperties._setP2pInboxBase(respMsg.getP2PTopicValue() || '');\n              this._sessionProperties._setP2pInboxInUse(\n                P2PUtil.getP2PInboxTopic(this._sessionProperties.p2pInboxBase));\n              this._sessionProperties.clientName = newValue;\n              sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                                resp.responseString,\n                                                resp.responseCode,\n                                                0,\n                                                correlationKey,\n                                                null);\n              this.sendEvent(sessionEvent);\n            } else {\n              const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(resp.responseCode,\n                                                                              resp.responseString);\n              if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT &&\n                              this._sessionProperties.ignoreDuplicateSubscriptionError) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  0,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ATTRIBUTES_CONFLICT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_INVALID ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ACL_DENIED ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_TOO_MANY) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  errorSubcode,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  ErrorSubcode.SUBSCRIPTION_ERROR_OTHER,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              }\n            }\n          };\n\n          const afterRemoveCallback = (smpResp) => {\n            const resp = smpResp.getResponse();\n            if (resp.responseCode === 200) {\n              // second add new P2P\n              this._sessionFSM.subscriptionUpdate(newP2pTopic,\n                                                  true,       // request confirm\n                                                  correlationKey,\n                                                  this._sessionProperties.readTimeoutInMsecs,\n                                                  SessionRequestType.ADD_P2PINBOX,\n                                                  afterAddCallback);\n            } else {\n              const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(resp.responseCode,\n                                                                              resp.responseString);\n              if (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND &&\n                  this._sessionProperties.ignoreSubscriptionNotFoundError) {\n                // add new P2P anyway: the error is simply the old P2P\n                // was not found on remove.  It's notable though.\n                this._sessionFSM.subscriptionUpdate(newP2pTopic,\n                                                    true,       // request confirm\n                                                    correlationKey,\n                                                    this._sessionProperties.readTimeoutInMsecs,\n                                                    SessionRequestType.ADD_P2PINBOX,\n                                                    afterAddCallback);\n              } else if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ATTRIBUTES_CONFLICT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_INVALID ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ACL_DENIED) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  errorSubcode,\n                                                  null,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  ErrorSubcode.SUBSCRIPTION_ERROR_OTHER,\n                                                  null,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              }\n            }\n          };\n\n          // first remove old P2P\n          this._sessionFSM.subscriptionUpdate(oldP2pTopic,\n                                              true,       // request confirm\n                                              correlationKey,\n                                              this._sessionProperties.readTimeoutInMsecs,\n                                              SessionRequestType.REMOVE_P2PINBOX,\n                                              afterRemoveCallback);\n        }\n      } else {\n        // notify client error\n        const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(response.responseCode,\n                                                                        response.responseString);\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          response.responseString,\n                                          response.responseCode,\n                                          errorSubcode,\n                                          correlationKey,\n                                          null);\n        this.sendEvent(sessionEvent);\n      }\n    }; // end CB (response to UPDATE request)\n\n    const returnCode = this._sessionFSM.sendUpdateProperty(mutableSessionProperty,\n                                                           newValue,\n                                                           correlationKey,\n                                                           requestTimeout,\n                                                           responseCallback);\n    if (returnCode !== TransportReturnCode.OK) {\n          // do not change session state\n\n      if (returnCode === TransportReturnCode.NO_SPACE) {\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          'Property update failed - no space in transport',\n                                          null,\n                                          ErrorSubcode.INSUFFICIENT_SPACE,\n                                          null,\n                                          null);\n      } else {\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          'Property update failed',\n                                          null,\n                                          ErrorSubcode.INVALID_OPERATION,\n                                          null,\n                                          null);\n      }\n      this.sendEvent(sessionEvent);\n    }\n  }\n  /**\n   * Modify (some) authentication-related session properties.\n   * The modifications take effect the next time the session connects or reconnects to the broker.\n   * There is no change to the active connection.\n   * Calling this method does not in itself trigger any kind of reconnection, reauthentication or renegotiation.\n   *\n   * **Note:** the update of \"accessToken\" and \"idToken\" properties is currently supported.\n   * Authentication Properties\n   * - accessToken to update previously set access token required for OAUTH2 authentication.\n   * - idToken to update previously set ID token required for OIDC authentication\n   * Example: updateAuthenticationOnReconnect({accessToken : “my_new_token”});\n   *\n   *\n   * @param {Object} authenticationProperties to be set\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if unsupported properties attempted to be set.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}.\n   */\n  updateAuthenticationOnReconnect(authenticationProperties) {\n    const { LOG_TRACE } = this.logger;\n    const allowedProperties = ['accessToken', 'idToken'];\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    if (!authenticationProperties || typeof authenticationProperties !== 'object') {\n      throw new OperationError('updateAuthenticationOnReconnect parameter must be a non-empty object.', ErrorSubcode.PARAMETER_INVALID_TYPE, null);\n    }\n    var key;\n    for (key in authenticationProperties) {\n      if (!allowedProperties.includes(key)) {\n        throw new OperationError('Invalid property in updateAuthenticationOnReconnect parameter.', ErrorSubcode.PARAMETER_CONFLICT, null);\n      }\n    }\n    const newProps = this.getSessionProperties();\n    Object.assign(newProps, authenticationProperties);\n    SessionPropertiesValidator.validate(newProps);\n    this._sessionProperties = newProps;\n    Object.assign(this._sessionFSM._sessionProperties, authenticationProperties);\n    LOG_TRACE('updateAuthenticationOnReconnect applied new token(s).');\n  }\n\n  /**\n   * Publish (send) a message over the session. The message is sent to its set destination.\n   *\n   * This method is used for sending both direct and Guaranteed Messages.  If the message's\n   * {@link solace.MessageDeliveryModeType} is {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * message is a direct message; otherwise, it is a guaranteed message.\n   *\n   * @param {solace.Message} message The message to send. It must have a destination set.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   * \n   */\n  send(message) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session send() called.');\n    const result = this.allowOperation(SessionOperation.SEND, message);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('message', message, MessageLib.Message);\n    this.validateAndSendMessage(message);\n  }\n\n  /**\n   * Sends a request using user-specified callback functions.\n   * <br>\n   * <strong>Note:</strong>\n   * The API sets the correlationId and replyTo fields of the message being sent;\n   * this overwrites any existing correlationId and replyTo values on the message.\n   *\n   * @param {solace.Message} message The request message to send.\n   * @param {Number} [timeout] The timeout value (in milliseconds). The minimum value is 100 msecs.\n   * @param {solace.Session.replyReceivedCallback} [replyReceivedCBFunction] The callback to notify\n   *    when a reply is received.\n   * @param {solace.Session.requestFailedCallback} [requestFailedCBFunction] The callback to notify\n   *    when the request failed.\n   * @param {Object} [userObject] An optional correlation object to use in the response callback.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   */\n  sendRequest(message,\n              timeout = undefined,\n              replyReceivedCBFunction = undefined,\n              requestFailedCBFunction = undefined,\n              userObject = undefined\n              ) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session sendRequest called.');\n    const result = this.allowOperation(SessionOperation.SEND, message);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('message', message, MessageLib.Message);\n    Parameter.isNumberOrNothing('timeout', timeout);\n    Parameter.isRangeCompareOrNothing('timeout', timeout, '>=', 100);\n    Parameter.isFunctionOrNothing('replyReceivedCBFunction', replyReceivedCBFunction);\n    Parameter.isFunctionOrNothing('requestFailedCBFunction', requestFailedCBFunction);\n\n    // set correlationId and replyTo fields if not set by the application\n    const correlationId = message.getCorrelationId();\n    if (correlationId === null || correlationId === undefined) {\n      message.setCorrelationId(SOLCLIENT_REQUEST_PREFIX + GlobalContext.NextId());\n    }\n    const replyTo = message.getReplyTo();\n    if (replyTo === null || replyTo === undefined) {\n      const replyToTopic = DestinationLib.Topic.createFromName(\n        this._sessionProperties.p2pInboxInUse);\n      message.setReplyTo(replyToTopic);\n    }\n\n    this.validateAndSendMessage(message);\n\n      // enqueue request\n    this.enqueueOutstandingDataReq(message.getCorrelationId(),\n                                   requestFailedCBFunction,\n                                   timeout,\n                                   replyReceivedCBFunction,\n                                   userObject);\n  }\n\n  /**\n   * Sends a reply message to the destination specified in messageToReplyTo.\n   *\n   * If `messageToReplyTo` is non-null:\n   *  * {@link solace.Message#getReplyTo} is copied from `messageToReplyTo` to\n   *    {@link solace.Message#setDestination} on `replyMessage`, unless `replyTo` is null.\n   *  * {@link solace.Message#setCorrelationId} is copied from `messageToReplyTo` to\n   *    {@link solace.Message#setCorrelationId} on `replyMessage`, unless `correlationId` is null.\n   *\n   * If `messageToReplyTo` is null, the application is responsible for setting\n   * the `destination` and `correlationId` on the `replyMessage`.\n   *\n   * @param {solace.Message} messageToReplyTo The message to which a reply will be sent.\n   * @param {solace.Message} replyMessage The reply to send.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   */\n  sendReply(messageToReplyTo, replyMessage) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session sendReply called.');\n    const result = this.allowOperation(SessionOperation.SEND, replyMessage);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isInstanceOfOrNothing('messageToReplyTo', messageToReplyTo, MessageLib.Message);\n    Parameter.isInstanceOf('replyMessage', replyMessage, MessageLib.Message);\n\n    replyMessage.setAsReplyMessage(true);\n    if (messageToReplyTo) {\n      replyMessage.setCorrelationId(messageToReplyTo.getCorrelationId());\n      const replyTo = messageToReplyTo.getReplyTo();\n      if (replyTo === null || replyTo === undefined) {\n        throw new OperationError('ReplyTo destination may not be null.',\n                                 ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n      replyMessage.setDestination(messageToReplyTo.getReplyTo());\n    }\n    this.validateAndSendMessage(replyMessage);\n  }\n\n  /**\n   * Returns the value of a given {@link solace.StatType}.\n   *\n   * @param {solace.StatType} statType The statistic to query.\n   * @returns {Number} The value of the requested statistic.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the StatType is invalid.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   */\n  getStat(statType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getStat called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isEnumMember('statType', statType, StatType);\n    return this._sessionFSM.getStat(statType);\n  }\n\n  /**\n   * Reset session statistics to initial values.\n   *\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  resetStats() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session resetStats called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    this._sessionFSM.resetStats();\n  }\n\n  /**\n   * Returns a clone of the properties for this session.\n   *\n   * @returns {solace.SessionProperties} A clone of this session's properties.\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  getSessionProperties() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getSessionProperties called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    const properties = this._sessionProperties.clone();\n    const sessionState = this.getSessionState();\n    if ((sessionState !== SessionStateName.DISCONNECTED) && this._sessionFSM._transport) {\n      properties._setWebTransportProtocolInUse(this._sessionFSM._transport.getTransportProtocol());\n    }\n\n    return properties;\n  }\n\n  /**\n   * Check the value of a boolean router capability.\n   *\n   * This function is a shortcut for {@link solace.Session#getCapability}. It performs the same\n   * operation, but instead of returning a {@link solace.SDTField} wrapping a capability value, it\n   * just returns the boolean value.\n   *\n   *  Attempting to query a non-boolean capability will return `null`.\n   *\n   * @param {solace.CapabilityType} capabilityType The capability to check.\n   *\n   * @returns {Boolean} the value of the capability queried.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type or value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  isCapable(capabilityType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session isCapable called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isNumber('capabilityType', capabilityType);\n\n    const caps = this._capabilities;\n    if (!caps) {\n      return false;\n    }\n\n    // Guard for undefined OR non-boolean capability\n    return (typeof caps[capabilityType] === 'boolean') ? caps[capabilityType] : false;\n  }\n\n  /**\n   * Get the value of an router capability, or null if unknown. This function must\n   * be called after connecting the session.\n   *\n   * SDT Type conversions:\n   *\n   *  * {string} values are returned as {@link solace.SDTFieldType.STRING}.\n   *  * {boolean} values are returned as {@link solace.SDTFieldType.BOOL}.\n   *  * All numeric values are returned as {@link solace.SDTFieldType.INT64}.\n   *\n   * @param {solace.CapabilityType} capabilityType The router capability to query.\n   * @returns {solace.SDTField} The result of the capability query.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed\n   *    Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type or value.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  getCapability(capabilityType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getCapability called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isNumber('capabilityType', capabilityType);\n\n    const val = this._getCapability(capabilityType);\n    if (typeof val === 'boolean') {\n      return SDTField.create(SDTFieldType.BOOL, val);\n    }\n    if (typeof val === 'number') {\n      return SDTField.create(SDTFieldType.INT64, val);\n    }\n    if (typeof val === 'string') {\n      return SDTField.create(SDTFieldType.STRING, val);\n    }\n\n    return null;\n  }\n\n  _getCapability(capabilityType) {\n    const caps = this._capabilities;\n    if (!caps) return null;\n\n    const value = caps[capabilityType];\n    return (value === undefined) ? null : value;\n  }\n\n  /**\n   * Returns the session's state. This is a third-choice method to determine session\n   * state; the first is notifications on FSM transitions, and the second choice is\n   * the finer-grained states of the FSM that are used in this mapping.\n   *\n   * @returns {SessionState} The current state of the session.\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * @internal\n   */\n  getSessionState() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getSessionState called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sessionStateName = this.getFSMState();\n    switch (sessionStateName) {\n      case SessionStateName.FULLY_CONNECTED:\n        return SessionState.CONNECTED;\n      case SessionStateName.DISCONNECTING:\n        return SessionState.DISCONNECTING;\n      case SessionStateName.DISCONNECTED:\n        return SessionState.DISCONNECTED;\n      case SessionStateName.SESSION_ERROR:\n        return SessionState.SESSION_ERROR;\n      case SessionStateName.CONNECTING:\n      case SessionStateName.WAITING_FOR_INTERCONNECT_TIMEOUT:\n      case SessionStateName.WAITING_FOR_DNS:\n      case SessionStateName.WAITING_FOR_TRANSPORT_UP:\n      case SessionStateName.WAITING_FOR_SESSION_UP:\n      case SessionStateName.WAITING_FOR_LOGIN:\n      case SessionStateName.WAITING_FOR_P2PINBOX_REG:\n      case SessionStateName.WAITING_FOR_PUBFLOW:\n      case SessionStateName.REAPPLYING_SUBSCRIPTIONS:\n        return SessionState.CONNECTING;\n      default:\n        {\n          // State names unaccounted for --\n          // WAITING_FOR_SUBCONFIRM\n          // WAITING_FOR_CAN_ACCEPT_DATA\n          // DISCONNECTING_FLOWS\n          // FLUSHING_TRANSPORT\n          // DESTROYING_TRANSPORT\n          // RECONNECTING\n          // TRANSPORT_FAIL\n          //\n          // Alternatively, we could use StateMachine#isStateActive on key parent states,\n          // instead of having to enumerate all child states.ant\n          const { LOG_INFO } = this.logger;\n          LOG_INFO(`Unmapped session state ${SessionStateName.describe(sessionStateName)}`);\n          return null;\n        }\n    }\n  }\n\n  /**\n   * Gets the fine grained state name from the session FSM.\n   * @returns {solace.SessionStateName} The FSM state name\n   * @private\n   */\n  getFSMState() {\n    return this._sessionFSM.getCurrentStateName();\n  }\n\n  /**\n   * Creates a {@link solace.CacheSession} object that uses this Session to service its\n   * cache requests.\n   *\n   * It should be disposed when the application no longer requires a CacheSession, by calling\n   * {@link solace.CacheSession#dispose}.\n   *\n   * @param {solace.CacheSessionProperties} properties The properties for the cache session.\n   *\n   * @returns {solace.CacheSession} The newly created cache session.\n   *\n   * @throws {solace.OperationError} if a CacheSession is already associated with this Session.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  createCacheSession(properties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createCacheSession called.');\n    return new CacheSession(properties, this, {\n      // bind instead of arrow func for varargs\n      // due to bublé transpiler bug\n      incStat: this._sessionFSM.incStat.bind(this._sessionFSM),\n    });\n  }\n\n  /**\n   * Creates a {@link solace.MessageConsumer} to receive Guaranteed Messages in this Session.\n   *\n   * Consumer characteristics and behavior are defined by properties. The consumer properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.MessageConsumerProperties};\n   * other property names are ignored. If the Message Consumer creation\n   * specifies a non-durable endpoint,\n   * {@link solace.QueueProperties} can be used to change the default properties on the\n   * non-durable endpoint. Any values not supplied are set to default values.\n   *\n   * When the consumer is created, a consumer object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the consumer) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The following\n   * must be true in order to create a MessageConsumer:\n   *  * The transport protocol list does not contain any HTTP transport protocols. See\n   *    {@link solace.SessionProperties#transportProtocol} and\n   *    {@link solace.FactoryProfile#cometEnabled}\n   *  * The Solace Messaging Router must support Guaranteed Messaging\n   *\n   * @method solace.Session#createMessageConsumer\n   * @param {solace.MessageConsumerProperties|Object} consumerProperties The properties for the\n   *    consumer.\n   * @returns {solace.MessageConsumer} The newly created Message Consumer.\n   * @throws {solace.OperationError} when Guaranteed Message Consume is not\n   *    supported on this session.\n   * @target browser\n   */\n  /**\n   * Creates a {@link solace.MessageConsumer} to receive Guaranteed Messages in this Session.\n   *\n   * Consumer characteristics and behavior are defined by properties. The consumer properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.MessageConsumerProperties};\n   * other property names are ignored. If the Message Consumer creation\n   * specifies a non-durable endpoint,\n   * {@link solace.QueueProperties} can be used to change the default properties on the\n   * non-durable endpoint. Any values not supplied are set to default values.\n   *\n   * When the consumer is created, a consumer object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the consumer) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The Solace\n   * Messaging Router must support Guaranteed Messaging.\n   *\n   * @method solace.Session#createMessageConsumer\n   * @param {solace.MessageConsumerProperties|Object} consumerProperties The properties for the\n   *    consumer.\n   * @returns {solace.MessageConsumer} The newly created Message Consumer.\n   * @throws {solace.OperationError} if Guaranteed Message Consume is not supported on this session.\n   * @target node\n   */\n  createMessageConsumer(consumerProperties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createMessageConsumer called.');\n    if (this._adDisabledReason) {\n      throw new OperationError('Session does not provide MessageConsumer capability',\n                               ErrorSubcode.GM_UNAVAILABLE,\n                               this._adDisabledReason);\n    }\n    if ((consumerProperties !== undefined) && (consumerProperties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('createMessageConsumer - Consumer properties:\\n', consumerProperties);\n    }\n    return this._sessionFSM.createMessageConsumer(consumerProperties);\n  }\n\n  /**\n   * Creates a {@link solace.QueueBrowser} to browse Guaranteed Messages on a specified queue in\n   * this Session.\n   *\n   * Browser characteristics and behavior are defined by properties. The browser properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.QueueBrowserProperties};\n   * other property names are ignored. Any values not supplied are set to default values.\n   *\n   * Delivery restrictions imposed by the queue’s Access type (exclusive or non-exclusive),\n   * do not apply when browsing messages with a Browser.\n   *\n   * When the queue browser is created, a queue browser object is returned to the caller. This is\n   * the object from which events are emitted, and upon which operations (for example, starting and\n   * stopping the browser) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The following\n   * must be true in order to create a QueueBrowser:\n   *  * The transport protocol list does not contain any HTTP transport protocols. See\n   *    {@link solace.SessionProperties#transportProtocol} and\n   *    {@link solace.FactoryProfile#cometEnabled}\n   *  * The Solace Messaging Router must support Guaranteed Messaging\n   *\n   * @method solace.Session#createQueueBrowser\n   * @param {solace.QueueBrowserProperties|Object} browserProperties The properties for the\n   *    browser.\n   * @returns {solace.QueueBrowser} The newly created Queue Browser.\n   * @throws {solace.OperationError} when Guaranteed Messaging is not\n   *    supported on this session.\n   * @target browser\n   */\n  /**\n   * Creates a {@link solace.QueueBrowser} to receive Guaranteed Messages in this Session.\n   *\n   * Browser characteristics and behavior are defined by properties. The properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.QueueBrowserProperties};\n   * other property names are ignored.\n   *\n   * Delivery restrictions imposed by the queue’s Access type (exclusive or non-exclusive),\n   * do not apply when browsing messages with a Browser.\n   *\n   * When the browser is created, a browser object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the browser) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The Solace\n   * Messaging Router must support Guaranteed Messaging.\n   *\n   * @method solace.Session#createQueueBrowser\n   * @param {solace.QueueBrowserProperties|Object} browserProperties The properties for the\n   *    browser.\n   * @returns {solace.QueueBrowser} The newly created Queue Browser.\n   * @throws {solace.OperationError} if Guaranteed Messaging is not supported on this session.\n   * @target node\n   */\n  createQueueBrowser(browserProperties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createQueueBrowser called.');\n    if (this._adDisabledReason) {\n      throw new OperationError('Session does not provide QueueBrowser capability',\n                               ErrorSubcode.GM_UNAVAILABLE,\n                               this._adDisabledReason);\n    }\n    if ((browserProperties !== undefined) && (browserProperties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('createQueueBrowser - Browser properties:\\n', browserProperties);\n    }\n    return this._sessionFSM.createQueueBrowser(browserProperties);\n  }\n\n  /**\n   * Creates a publishing destination from a queue descriptor.\n   *\n   * A MessageConsumer is the only object that has any business\n   * doing this, but it should not be concerned with the internals\n   * which depend on the session.\n   *\n   * @param {AbstractQueueDescriptor|QueueDescriptor} queueDescriptor The consumer's descriptor\n   * @returns {Destination} A destination that publishes to the descriptor.\n   * @memberof Session\n   * @private\n   */\n  createDestinationFromDescriptor(queueDescriptor) {\n    const {\n      DestinationType,\n      Queue,\n      Topic,\n    } = DestinationLib;\n\n    let destinationType = DestinationType.TOPIC;\n    if (queueDescriptor.type === QueueType.QUEUE) {\n      destinationType = queueDescriptor.durable\n        ? DestinationType.QUEUE\n        : DestinationType.TEMPORARY_QUEUE;\n    }\n\n    const name = queueDescriptor.name || null;\n\n    if (queueDescriptor.durable) {\n      assert(name, 'Durable endpoint with generated name is not a valid configuration');\n      const factoryMethod = queueDescriptor.getType() === QueueType.QUEUE\n        ? Queue.createFromLocalName\n        : Topic.createFromName;\n      return factoryMethod(name);\n    }\n\n    return this.createTemporaryDestination(destinationType, name);\n  }\n\n  /**\n   * Creates a temporary destination.\n   * @param {DestinationType} destinationType Type of destination\n   * @param {String} [name] Name if any\n   * @returns {Destination} Temporary destination\n   * @private\n   */\n  createTemporaryDestination(destinationType, name) {\n    const { LOG_TRACE } = this.logger;\n    const { DestinationFromNetwork, DestinationUtil } = DestinationLib;\n    // TRANSPORT_UP is chosen because this is when the session tells subscribers\n    // that they may begin connecting\n    const vrn = this.getSessionProperties().virtualRouterName;\n    if (!this.isCapable(CapabilityType.TEMPORARY_ENDPOINT) ||\n        vrn === null || vrn === undefined || vrn.length === 0) {\n      throw new OperationError(\n        'Attempt to generate temporary destination or endpoint without suitable session',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    // Non-durable case; avoid re-prefixing\n    const localName = name && name.startsWith('#P2P')\n      ? name\n      : DestinationUtil.createTemporaryName(destinationType, vrn, name);\n    LOG_TRACE('Generated name:', localName);\n    return DestinationFromNetwork.createDestinationFromName(localName);\n  }\n\n  /**\n   * @param {solace.SessionEvent} sessionEvent The event to send\n   * @private\n   */\n  sendEvent(sessionEvent) {\n    if (!sessionEvent) return;\n    if (this._disposed) return;\n\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Sending event ${sessionEvent}`);\n    this._eventCallbackInfo.sessionEventCBFunction(this,\n                                                   sessionEvent,\n                                                   this._eventCallbackInfo.userObject);\n  }\n\n  /**\n   * Gets a transport session information string.\n   * This string is informative only, and applications should not attempt to parse it.\n   *\n   * @returns {String} A description of the current session's transport.\n   */\n  getTransportInfo() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getTransportInfo called.');\n    return this._sessionFSM.getTransportInfo();\n  }\n\n  /**\n   * @param {Object} interceptor The transport interceptor to set\n   * @private\n   */\n  injectTransportInterceptor(interceptor) {\n    this._sessionFSM.injectTransportInterceptor(interceptor);\n  }\n\n  /**\n   * @param {solace.SessionOperation} operationEnum the id of the operation\n   * @param {solace.Message} message The message to send\n   * @returns {?String} error message if not allowed; otherwise null\n   * @private\n   */\n  allowOperation(operationEnum, message) {\n    if (!this._sessionFSM) return false;\n    let allow = true;\n    const sessionStateName = this._sessionFSM.getCurrentStateName();\n\n    if (sessionStateName === SessionStateName.DISPOSED) {\n      allow = false;\n    } else if (Check.anything(operationEnum)) {\n      switch (operationEnum) {\n        case SessionOperation.CONNECT:\n          if (sessionStateName !== SessionStateName.NEW &&\n              sessionStateName !== SessionStateName.DISCONNECTED) {\n            allow = false;\n          }\n          break;\n        case SessionOperation.DISCONNECT:\n          if (sessionStateName === SessionStateName.NEW) {\n            allow = false;\n          }\n          break;\n        case SessionOperation.SEND:\n        case SessionOperation.CTRL:\n          allow =\n            ((sessionStateName === SessionStateName.FULLY_CONNECTED) ||\n            (message && (message.getDeliveryMode() !== MessageLib.MessageDeliveryModeType.DIRECT)));\n          break;\n\n        case SessionOperation.QUERY_OPERATION:\n          allow = true;\n          break;\n        default:\n          allow = false;\n      }\n    } else {\n      allow = false;\n    }\n\n    if (allow) {\n      return null;\n    }\n\n    return `Cannot perform operation ${operationEnum} while in state ${sessionStateName}`;\n  }\n\n  /**\n   * @param {smf.ClientCtrlMessage} routerCapabilities The message containing the router caps\n   * @private\n   */\n  updateCapabilities(routerCapabilities) {\n    this._capabilities = routerCapabilities;\n  }\n\n  /**\n   * @param {solace.Message} message The message to send\n   * @private\n   */\n  validateAndSendMessage(message) {\n    // Sanity checks on the message before attempting to send it\n    //  * do we have a destination?\n    const sendDest = message.getDestination();\n    if (Check.nothing(sendDest) || Check.empty(sendDest.getName())) {\n      throw new OperationError('Message must have a valid Destination', ErrorSubcode.TOPIC_MISSING);\n    }\n\n    const senderTimestamp = message.getSenderTimestamp();\n    const noSenderTimestamp = senderTimestamp === null || senderTimestamp === undefined;\n    if (this._sessionProperties.generateSendTimestamps &&\n        (noSenderTimestamp || message.hasAutoSenderTimestamp)) {\n      const now = new Date();\n      message.setSenderTimestamp(now.getTime());\n      message.hasAutoSenderTimestamp = true;\n    }\n    const sequenceNumber = message.getSequenceNumber();\n    const noSequenceNumber = sequenceNumber === null || sequenceNumber === undefined;\n    if (this._sessionProperties.generateSequenceNumber &&\n        (noSequenceNumber || message.hasAutoSequenceNumber)) {\n      message.setSequenceNumber(this._seqNum++);\n      message.hasAutoSequenceNumber = true;\n    }\n    const senderId = message.getSenderId();\n    const noSenderId = senderId === null || senderId === undefined;\n    if (this._sessionProperties.includeSenderId && noSenderId) {\n      message.setSenderId(this._sessionProperties.clientName);\n    }\n\n    // Allow the FSM and its delegates to prepare and send the message\n    // This may mutate the delegates, so we need to validate first\n    // this may throw if the message is guaranteed and the window is closed.\n    // If this returns true, the message can be sent to the transport\n    // (always true for direct messages whne there is a transport). If\n    // this returns false, the message has been prepared and queued for\n    // transport but may not be sent now.\n    this._sessionFSM.prepareAndSendMessage(message);\n  }\n\n  /**\n   * @param {String} correlationId The internal correlation ID for the message\n   * @param {function(...[*])} reqFailedCb The callback on request failure\n   * @param {Number} reqTimeout The request timeout in ms\n   * @param {function(*)} replyRecvdCb The callback on reply received\n   * @param {Object} userObject A user object to pass back to the callback (legacy)\n   * @private\n   */\n  enqueueOutstandingDataReq(correlationId, reqFailedCb, reqTimeout, replyRecvdCb, userObject) {\n    if (Check.none(correlationId)) {\n      return;\n    }\n    const { LOG_TRACE, LOG_ERROR } = this.logger;\n\n    // empty string is valid\n    LOG_TRACE(`Enqueue outstanding data request correlationId=${correlationId}`);\n    const timer = setTimeout(() => {\n      this._sessionFSM.incStat(StatType.TX_REQUEST_TIMEOUT);\n                  // remove request from queue\n      try {\n        const result = delete this._outstandingDataReqs[correlationId];\n        if (!result) {\n          LOG_ERROR(`Cannot delete data request ${correlationId}`);\n        }\n      } catch (e) {\n        LOG_ERROR(`Cannot delete data request ${correlationId}`, e);\n      }\n\n      if (Check.anything(reqFailedCb)) {\n        const requestEvent = SessionEvent.build(RequestEventCode.REQUEST_TIMEOUT,\n                                                'Request timeout',\n                                                correlationId);\n\n        reqFailedCb(this, requestEvent, userObject);\n      }\n    }, reqTimeout || this._sessionProperties.readTimeoutInMsecs);\n\n    const outstandingReq = new OutstandingDataRequest(correlationId,\n                                                      timer,\n                                                      replyRecvdCb,\n                                                      reqFailedCb,\n                                                      userObject);\n    this._outstandingDataReqs[correlationId] = outstandingReq;\n  }\n\n  /**\n   * @param {String} correlationId The internal ID of the request to cancel\n   * @returns {OutstandingDataRequest} The request that was cancelled, if any\n   * @private\n   */\n  cancelOutstandingDataReq(correlationId) {\n    const { LOG_TRACE, LOG_ERROR } = this.logger;\n\n    if (Check.none(correlationId) || !this._outstandingDataReqs) {\n      return null;\n    }\n\n    const req = this._outstandingDataReqs[correlationId];\n    if (req === undefined || req === null) {\n      return null;\n    }\n    LOG_TRACE(`Cancel outstanding data request correlationId=${correlationId}`);\n    if (req.timer) {\n      clearTimeout(req.timer);\n      req.timer = null;\n    }\n\n    try {\n      const result = delete this._outstandingDataReqs[correlationId];\n      if (!result) {\n        LOG_ERROR(`Cannot delete data request ${correlationId}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete data request ${correlationId}`, e);\n    }\n    return req;\n  }\n\n  /**\n   * @private\n   */\n  cleanupSession() {\n    const { LOG_TRACE } = this.logger;\n    if (this._outstandingDataReqs) {\n      LOG_TRACE('Cancel all outstanding data requests');\n      Object.keys(this._outstandingDataReqs).forEach((key) => {\n        const dataReq = this.cancelOutstandingDataReq(key);\n        if (dataReq && dataReq.reqFailedCBFunction) {\n          const requestEvent = SessionEvent.build(RequestEventCode.REQUEST_ABORTED,\n                                                  'Request aborted',\n                                                  key);\n          dataReq.reqFailedCBFunction(this, requestEvent, dataReq.userObject);\n        }\n      });\n    }\n  }\n\n  /**\n   * @param {Message} dataMessageIn The received direct TRmsg\n   * @private\n   */\n  handleDataMessage(dataMessageIn) {\n    const { LOG_TRACE, LOG_INFO } = this.logger;\n    const dataMessage = dataMessageIn;\n    if (this._sessionProperties.generateReceiveTimestamps) {\n      const now = new Date();\n      dataMessage._receiverTimestamp = now.getTime();\n    }\n\n    if (dataMessage.isReplyMessage()) {\n      const correlationId = dataMessage.getCorrelationId();\n      if (Check.anything(correlationId)) {\n        const dataReq = this.cancelOutstandingDataReq(correlationId);\n        if (dataReq !== null) {\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_RECVED);\n          LOG_TRACE('Calling application replyReceivedCallback');\n          dataReq.replyReceivedCBFunction(this, dataMessage, dataReq.userObject);\n          LOG_TRACE('application replyReceivedCallback returns');\n          return;\n        }\n\n        if (correlationId.startsWith(SOLCLIENT_REQUEST_PREFIX)) {\n            // if a reply message doesn't have outstanding request and correlationId\n            // starts with #REQ it is assumed to be a delayed reply and has to be discarded\n          LOG_INFO('DROP: Discard reply message due to missing outstanding request');\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_DISCARD);\n          return;\n        }\n\n        if (correlationId.startsWith(CACHE_REQUEST_PREFIX) &&\n              !(CacheSession && this._messageCallbackInfo.userObject instanceof CacheSession)) {\n          // If it's a cache message, only pass it along if the listener is a cache message\n          // listener. The listener may drop it and increment the DISCARD stat if no\n          // cache session recognizes the reply.\n          LOG_INFO('DROP: Discard cache reply due to no cache session active');\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_DISCARD);\n          return;\n        }\n      }\n    }\n\n    // notify client message callback\n    LOG_TRACE('Calling application messageCallback');\n    this._messageCallbackInfo.messageRxCBFunction(this,\n                                                  dataMessage,\n                                                  this._messageCallbackInfo.userObject);\n    LOG_TRACE('application messageCallback returns');\n  }\n\n  /**\n   * Callback function for subscribe/unsubscribe response\n   * @param {solace.SMPMessage} smpMsg The SMP response to the subscription request\n   * @param {CorrelatedRequest} request The originating request object\n   * @param {Boolean} requestConfirm Whether the user asked for confirmation on the request\n   * @private\n   */\n  handleSubscriptionUpdateResponse(smpMsg, request, requestConfirm) {\n    const response = smpMsg.getResponse();\n    const {\n      responseCode,\n      responseString,\n     } = response;\n    const { correlationKey } = request;\n    // If we don't request confirmation, the router doesn't send one for the OK case,\n    // so we don't need to guard for that.\n    // The router always replies on SUBSCRIPTION_ERROR, so we track whether confirmation\n    // was requested and suppress the reply in certain cases.\n    if (responseCode === 200) {\n      // notify client\n      const sessionEvent = SessionEvent.build(SessionEventCode.SUBSCRIPTION_OK,\n                                              responseString,\n                                              responseCode,\n                                              0,\n                                              correlationKey,\n                                              null);\n      this.sendEvent(sessionEvent);\n    } else {\n      const subscriptionStr = StringUtils.stripNullTerminate(smpMsg.encodedUtf8Subscription);\n      this._sessionFSM.handleSubscriptionUpdateError(responseCode,\n                                                     responseString,\n                                                     subscriptionStr,\n                                                     correlationKey,\n                                                     requestConfirm);\n    }\n  }\n\n\n  /**\n   * Callback function for queue subscribe/unsubscribe response\n   * @param {solace.SMPMessage} smpMsg The SMP response to the subscription request\n   * @param {CorrelatedRequest} request The originating request object\n   * @param {function} callback The callback on response\n   * @private\n   */\n  handleQueueSubscriptionUpdateResponse(smpMsg, request, callback) {\n    const { LOG_TRACE } = this.logger;\n\n    if (!smpMsg) { // reuest timed out.\n      LOG_TRACE('handleQueueSubscriptionUpdateResponse called on timeout.');\n      callback(false, ErrorSubcode.TIMEOUT, 0, 'Timeout');\n      return;\n    }\n\n    const response = smpMsg.getResponse();\n    const {\n      responseCode,\n      responseString,\n     } = response;\n    const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode, responseString);\n    LOG_TRACE('handleQueueSubscriptionUpdateResponse called.', smpMsg);\n    if (responseCode === 200 ||\n      (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT) ||\n      (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND)\n    ) {\n      callback(true, 0, responseCode, responseString);\n    } else {\n      callback(false, errorSubcode, responseCode, responseString);\n    }\n  }\n\n  /**\n   * Callback function for DTE unsubscribe response\n   *\n   * @param {solace.AdMessage} adCtrlMessage The Guaranteed Message Protocol\n   *                           control response to the DTE unsub message\n   * @param {CorrelatedRequest} request The originating request object\n   * @private\n   */\n  handleDTEUnsubscribeResponse(adCtrlMessage, request) {\n    const response = adCtrlMessage.getResponse();\n    const {\n      responseCode,\n      responseString,\n    } = response;\n    const { correlationKey } = request;\n    const eventCode = responseCode === 200\n      ? SessionEventCode.UNSUBSCRIBE_TE_TOPIC_OK\n      : SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR;\n    const subcode = responseCode === 200\n      ? 0\n      : ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                     responseString);\n    this.sendEvent(SessionEvent.build(eventCode,\n                                      responseString,\n                                      responseCode,\n                                      subcode,\n                                      correlationKey\n    ));\n  }\n\n  /**\n   * @param {Number} respCode The returned response code\n   * @param {String} respText The returned response text\n   * @param {String} subscriptionStr The requested topic name\n   * @param {*} correlationKey The user-supplied correlation key\n   * @param {Boolean} requestConfirm Whether confirmation was requested on subscription\n   * @private\n   */\n  handleSubscriptionUpdateError(respCode,\n                                respText,\n                                subscriptionStr,\n                                correlationKey,\n                                requestConfirm) {\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n    if ((errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT &&\n         this._sessionProperties.ignoreDuplicateSubscriptionError) ||\n        (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND &&\n          this._sessionProperties.ignoreSubscriptionNotFoundError)) {\n      if (requestConfirm) {\n        // notify client\n        const sessionEvent = SessionEvent.build(\n          SessionEventCode.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          0,\n          correlationKey,\n          null\n        );\n        this.sendEvent(sessionEvent);\n      }\n    } else {\n      // notify client\n      const sessionEvent = SessionEvent.build(\n        SessionEventCode.SUBSCRIPTION_ERROR,\n        respText,\n        respCode,\n        errorSubcode,\n        correlationKey,\n        `Topic: ${subscriptionStr}`\n      );\n      this.sendEvent(sessionEvent);\n    }\n  }\n\n  /**\n   * @returns {SessionEventCBInfo} The session's event callback\n   * @private\n   */\n  getEventCBInfo() {\n    return this._eventCallbackInfo;\n  }\n\n  /**\n   * @param {SessionEventCBInfo} eventCBInfo The new event callback to set\n   * @private\n   */\n  setEventCBInfo(eventCBInfo) {\n    this._eventCallbackInfo = eventCBInfo;\n  }\n\n  /**\n   * @returns {MessageRxCBInfo} The session's message callback\n   * @private\n   */\n  getMessageCBInfo() {\n    return this._messageCallbackInfo;\n  }\n\n  /**\n   * @param {MessageRxCBInfo} messageCBInfo The new message callback to set\n   * @private\n   */\n  setMessageCBInfo(messageCBInfo) {\n    this._messageCallbackInfo = messageCBInfo;\n  }\n\n  /**\n   * @returns {String} The next correlation tag for this session.\n   * @private\n   */\n  getCorrelationTag() {\n    return this._sessionFSM.getCorrelationTag();\n  }\n\n  /**\n   * Wraps a SessionEventCBInfo or a bare function with an event emitting function.\n   * @param {SessionEventCBInfo|function|undefined} eventCallback The callback to wrap\n   * @returns {SessionEventCBInfo} A SessionEventCBInfo object that handles all callbacks.\n   * @private\n   */\n  wrapEventCallback(eventCallback) {\n    const { LOG_WARN } = this.logger;\n    const eventCallbackInfo = (() => {\n      if (!eventCallback) return null;\n      if (eventCallback.sessionEventCBFunction) return eventCallback;\n      return new SessionEventCBInfo(eventCallback);\n    })();\n    return new SessionEventCBInfo((session, sessionEvent, obj, rfu) => {\n      const { sessionEventCode } = sessionEvent;\n      if (eventCallbackInfo) {\n        try {\n          eventCallbackInfo.sessionEventCBFunction(session, sessionEvent, obj, rfu);\n        } catch (ex) {\n          const error = Object.assign(new OperationError(\n            `Unhandled error in SessionEventRxCBInfo callback on sessionEventCode ${\n              SessionEventCode.describe(sessionEventCode)}`,\n              ErrorSubcode.CALLBACK_ERROR,\n              `On event: ${[sessionEventCode, sessionEvent, obj, rfu]} ${ex}`\n            ), {\n              stack: ex.stack,\n              info:  {\n                event: {\n                  name:          sessionEventCode,\n                  formattedName: `SessionEventCode.${SessionEventCode.describe(sessionEventCode)}`,\n                  args:          [sessionEvent, obj, rfu],\n                },\n                error: ex,\n              },\n            }\n          );\n          LOG_WARN(error.toString(), error.info);\n        }\n      }\n      this.emit(sessionEventCode, sessionEvent);\n    });\n  }\n\n  /**\n   * Wraps a CBInfo or a bare function with an event emitting function.\n   * @param {MessageCBInfo|function|undefined} messageCallback The callback to wrap\n   * @returns {MessageCBInfo} A MessageCBInfo object that handles all callbacks.\n   * @private\n   */\n  wrapMessageCallback(messageCallback) {\n    const { LOG_WARN } = this.logger;\n\n    const messageCallbackInfo = (() => {\n      if (!messageCallback) return null;\n      if (messageCallback.messageRxCBFunction) return messageCallback;\n      return new MessageRxCBInfo(messageCallback);\n    })();\n\n    const formattedName = `SessionEventCode.${SessionEventCode.describe(SessionEventCode.MESSAGE)}`;\n    const buildErrorEvent = (ex, message, object) => Object.assign(\n      new OperationError(`Unhandled error in MessageRxCBInfo callback/handler for ${formattedName}`,\n                         ErrorSubcode.CALLBACK_ERROR),\n      {\n        stack: ex.stack,\n        info:  {\n          event: {\n            name: SessionEventCode.MESSAGE,\n            formattedName,\n            args: [message, object],\n          },\n          error: ex,\n        },\n      });\n\n    return new MessageRxCBInfo((session, message, object) => {\n      if (messageCallbackInfo) {\n        try {\n          messageCallbackInfo.messageRxCBFunction(session, message, object);\n        } catch (ex) {\n          const error = buildErrorEvent(ex, message, object).toString();\n          LOG_WARN(error, error.info, ex);\n        }\n      }\n      try {\n        this.emitDirect(message);\n      } catch (ex) {\n        this.emit('error', buildErrorEvent(ex, message, object));\n      }\n    });\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get adLocallyDisabled() {\n    return !!this._adDisabledReason;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get canConnectConsumer() {\n    if (this.adLocallyDisabled) return false;\n    if (this._capabilities) {\n      return this.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME);\n    }\n    return undefined;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get canConnectPublisher() {\n    if (this.adLocallyDisabled) return false;\n    if (this._capabilities) {\n      return this.isCapable(CapabilityType.GUARANTEED_MESSAGE_PUBLISH);\n    }\n    return undefined;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get disposed() {\n    return this._disposed;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'sessionId': this._sessionFSM && this._sessionFSM.sessionIdHex || '(N/A)',\n      'transport': this.getTransportInfo(),\n      'state':     SessionState.describe(this.getSessionState()),\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.Session = Session;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Effectively a boolean governing TLS downgrade to plain text after authentication.\n * @see {@link solace.SessionProperties#sslConnectionDowngradeTo}\n *\n * @target node\n * @readonly\n * @enum {String}\n * @memberof solace\n * @namespace\n */\nconst SslDowngrade = {\n  /**\n   * @description No downgrade, TLS connection remains encrypted.\n   * @type {String}\n   */\n  NONE:      'NONE',\n  /**\n   * @description TLS connection downgrades to plain text after authentication.\n   * USE WITH CAUTION! Message traffic is not encrypted!\n   */\n  PLAINTEXT: 'PLAIN_TEXT',\n};\n\nmodule.exports.SslDowngrade = Enum.new(SslDowngrade);\n","const { SessionRequestType } = require('./session-request-types');\n\nmodule.exports = {\n  SubscriptionUpdateTimeoutMessages: {\n    [SessionRequestType.ADD_SUBSCRIPTION]:        'Add subscription request timeout',\n    [SessionRequestType.REMOVE_SUBSCRIPTION]:     'Remove subscription request timeout',\n    [SessionRequestType.ADD_P2PINBOX]:            'Add P2P inbox subscription timeout',\n    [SessionRequestType.REMOVE_P2PINBOX]:         'Remove P2P inbox subscription timeout',\n    [SessionRequestType.REMOVE_DTE_SUBSCRIPTION]: 'Remove endpoint topic subscription',\n    default:                                      'Request timeout',\n  },\n};\n","const CodecLib = require('./lib/codec');\nconst { AdProtocolMessage, BinaryMetaBlock, ClientCtrlMessage, KeepAliveMessage, SMPMessage } = require('./lib/message-objects');\nconst { SMFAdProtocolMessageType } = require('./lib/smf-adprotocol-message-types');\nconst { SMFAdProtocolParam } = require('./lib/smf-adprotocol-params');\nconst { SMFClientCtrlMessageType } = require('./lib/smf-client-ctrl-message-types');\nconst { SMFClientCtrlParam } = require('./lib/smf-client-ctrl-params');\nconst { SMFParameterType, SMFExtendedParameterType } = require('./lib/smf-parameter-types');\nconst { SMFProtocol } = require('./lib/smf-protocols');\nconst { SMFSMPMessageType } = require('./lib/smf-smp-message-types');\nconst { SMFSMPMessageTypeFlags } = require('./lib/smf-smp-message-type-flags');\nconst { SMFTransportSessionMessageType } = require('./lib/smf-transport-session-message-types');\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\nmodule.exports.Codec = CodecLib;\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\nmodule.exports.SMFAdProtocolMessageType = SMFAdProtocolMessageType;\nmodule.exports.SMFAdProtocolParam = SMFAdProtocolParam;\nmodule.exports.SMFClientCtrlMessageType = SMFClientCtrlMessageType;\nmodule.exports.SMFClientCtrlParam = SMFClientCtrlParam;\nmodule.exports.SMFParameterType = SMFParameterType;\nmodule.exports.SMFProtocol = SMFProtocol;\nmodule.exports.SMFSMPMessageTypeFlags = SMFSMPMessageTypeFlags;\nmodule.exports.SMFSMPMessageType = SMFSMPMessageType;\nmodule.exports.SMFTransportSessionMessageType = SMFTransportSessionMessageType;\nmodule.exports.SMPMessage = SMPMessage;\nmodule.exports.SMFExtendedParameterType = SMFExtendedParameterType;\n","const SMFLib = require('solclient-smf');\nconst { AdProtocolMessage, SMFParameter } = require('../message-objects');\nconst { Bits, Convert } = require('solclient-convert');\nconst { LOG_DEBUG, LOG_INFO, LOG_ERROR } = require('solclient-log');\nconst { ReplayStartType } = require('solclient-replaystart');\n// const { SMFAdProtocolParam } = require('solclient-smf');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n} = Convert;\n\nfunction parseAdpAt(dataBuf, offset) {\n  if ((offset + 3) > dataBuf.length) {\n    //not enough data\n    LOG_DEBUG('Not enough data to read an ADP message.');\n    return false;\n  }\n  let pos = offset;\n  let onebyte = dataBuf.readUInt8(pos);\n  pos++;\n\n  // var msgRFU = bits(onebyte, 6, 2);\n  const adpVersion = bits(onebyte, 0, 6);\n  let msgLength;\n  let msgType;\n  if (adpVersion < 3) {\n    const twobyte = dataBuf.readUInt16BE(pos);\n    pos += 2;\n    msgType = bits(twobyte, 12, 4);\n    // length in 32 bit words is in the lower 12 bits\n    msgLength = bits(twobyte, 0, 12);\n    // convert length to number of bytes\n    msgLength <<= 2;\n  } else if (adpVersion === 3) {\n    onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    msgType = bits(onebyte, 0, 8);\n    msgLength = dataBuf.readUInt32BE(pos);\n    pos += 4;\n  } else {\n    LOG_ERROR('Found unsupported ADP Version', adpVersion);\n    return false; //unsupported type\n  }\n  //\n  // Verify that the ADP header length does not exceed the entire\n  // contents of the SMF message.\n  if (offset + msgLength > dataBuf.length) {\n    LOG_ERROR(`Invalid Asssured Control Protocol length=${msgLength\n      } exceeds remaining message buffer = ${dataBuf.length - offset}`);\n    return false; // invalid message format\n  }\n  const adpMsg = new AdProtocolMessage(msgType, adpVersion);\n  while (pos < (offset + msgLength)) {\n    onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    const paramUH = bits(onebyte, 6, 2);\n    const paramType = bits(onebyte, 0, 6);\n\n    // Look for and skip padding bytes\n    if (paramType === 0) {\n      continue;\n    }\n    if (pos >= (offset + msgLength)) {\n      LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType} at position =${pos}`);\n      return false; // Assured Control parsing fail\n    }\n    let paramLen = dataBuf.readUInt8(pos);\n    let paramValueLen;\n    pos++;\n    // If paramLen == 0, then this is an extended length format\n    // and there is a 4 byte length following the '0'\n    if (paramLen === 0) {\n      // need at least 5 more bytes in the buffer\n      if (pos + 5 > (offset + msgLength)) {\n        LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType} at position =${pos}`);\n        return false; // Assured Control parsing fail\n      }\n      paramLen = dataBuf.readUInt32BE(pos);\n      pos += 4;\n      paramValueLen = paramLen - 5;\n    } else {\n      paramValueLen = paramLen - 2;\n    }\n    if (paramLen <= 0) {\n      return false; // Assured Control parsing fail\n    }\n    //\n    // make sure there is enough buffer for paramValueLen\n    if (pos + paramValueLen > offset + msgLength) {\n      LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType\n        } length =${paramValueLen} invalid at position =${pos}`);\n      return false; // Assured Control parsing fail\n    }\n    const smfParam = new SMFParameter(paramUH, paramType, null, dataBuf, pos, pos + paramValueLen);\n    adpMsg.addParameter(smfParam);\n    pos += paramValueLen;\n  }\n  return adpMsg;\n}\n\nfunction encAdp0Param(uh, paramtype) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(2)); // length\n  return data.join('');\n}\nfunction encAdp8Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(3)); // length\n  data.push(Convert.int8ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp16Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(4)); // length\n  data.push(Convert.int16ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp32Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(6)); // length\n  data.push(Convert.int32ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp64Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(10)); // length\n  data.push(Convert.int64ToStr(value));\n  return data.join('');\n}\n\n// map of replay start value types to parameter lengths\nconst RSValueLenMap = {};\nRSValueLenMap[ReplayStartType.BEGINNING] = 3; // 2 (TLV) + 1 (replay start type)\nRSValueLenMap[ReplayStartType.DATE] = 11; // 2 (TLV) + 1 (replay start type) + 8 (date value)\nRSValueLenMap[ReplayStartType.RGMID] = 19; //2 (TLV) + 1 (replay start type) + 16 (rgmid value)\n\n// special case for message replay value, a 1 byte type\n// followed by 0 bytes of begining, 8 bytes of date or 16 bytes of rgmid\n// Note replay Start type 0 is handled using encAdp8Param as there is no value\nfunction encAdpReplayParam(uh, paramtype, value) {\n  const data = [];\n  const valType = value.type;\n  const valObj = value.value;\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(RSValueLenMap[valType])); // length\n  data.push(Convert.int8ToStr(valType)); // replay start type, 1 == date, 2 == RGMID\n  switch (valType) {\n    case ReplayStartType.DATE:\n      // encode 64 bit date\n      data.push(Convert.int64ToStr(valObj)); // value is Long type\n      break;\n    case ReplayStartType.RGMID:\n      // encode 128 bit replication group message id\n      // expected value object of\n      // {\n      //   suid (Long),\n      //   messageId (Long),\n      // }\n      data.push(Convert.int64ToStr(valObj.suid)); // get Long suid\n      data.push(Convert.int64ToStr(valObj.messageId)); // get Long messageId\n      break;\n    case ReplayStartType.BEGINNING:\n      // in this case there is no value to encode\n      break;\n    default:\n      // should not happen until there are more replay start type but those\n      // should be handled in a case above\n      break;\n  }\n  return data.join('');\n}\n\nfunction encAdp64AckPairParam(uh, paramtype, min, max) {\n  const data = [];\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(18)); // length\n  data.push(Convert.int64ToStr(min));\n  data.push(Convert.int64ToStr(max));\n  return data.join('');\n}\n\nfunction encAdpUTF8NTParam(uh, paramtype, value) {\n  // value is already UTF8 encoded and null terminated.\n  const data = [];\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n\n  let byte2 = 0;\n  if (value.length <= 253) {\n    byte2 = value.length + 2; // full length of param\n    data.push(Convert.int8ToStr(byte2));\n  } else {\n    byte2 = 0; // extended-length\n    data.push(Convert.int8ToStr(byte2));\n    data.push(Convert.int32ToStr(value.length + 5));\n  }\n  data.push(value);\n  return data.join('');\n}\n\nfunction encAdp(adpMsg) {\n  const paramspace = [];\n  const paramarray = adpMsg.getParameterArray();\n\n  let p;\n  for (p = 0; p < paramarray.length; p++) {\n    const param = paramarray[p];\n    // It's not a flat array, we have gaps!\n    if (param === undefined) {\n      continue;\n    }\n\n    switch (param.getType()) {\n      /*\n       * 8 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.WINDOW:\n      case SMFLib.SMFAdProtocolParam.EP_DURABLE:\n      case SMFLib.SMFAdProtocolParam.ACCESSTYPE:\n      case SMFLib.SMFAdProtocolParam.FLOWTYPE:\n      case SMFLib.SMFAdProtocolParam.EP_RESPECTS_TTL:\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_CTRL_MESSAGE_TYPE:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_STATE:\n      case SMFLib.SMFAdProtocolParam.ACTIVE_FLOW_INDICATION:\n      case SMFLib.SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY:\n      case SMFLib.SMFAdProtocolParam.MAX_REDELIVERY:\n        paramspace.push(encAdp8Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 16 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.EP_BEHAVIOUR:\n        paramspace.push(encAdp16Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 32 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.FLOWID:\n      case SMFLib.SMFAdProtocolParam.TRANSPORT_WINDOW:\n      case SMFLib.SMFAdProtocolParam.EP_ALLOTHER_PERMISSION:\n      case SMFLib.SMFAdProtocolParam.EP_QUOTA:\n      case SMFLib.SMFAdProtocolParam.EP_MAX_MSGSIZE:\n      case SMFLib.SMFAdProtocolParam.GRANTED_PERMISSION:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_ID:\n      case SMFLib.SMFAdProtocolParam.PUBLISHER_ID:\n        paramspace.push(encAdp32Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 64 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDSENT:\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDACKED:\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDRECEIVED:\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_ID:\n      case SMFLib.SMFAdProtocolParam.ENDPOINT_ERROR_ID:\n        paramspace.push(encAdp64Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * Replay start location can be either a 0 bit, 64 bit or 128 bit parameter.\n       */\n      case SMFLib.SMFAdProtocolParam.REPLAY_START_LOCATION:\n        {\n          const replayParamVal = param.getValue();\n          if (undefined === replayParamVal.value) {\n            // replay start location with 0 bit values, type only\n            paramspace.push(encAdp8Param(param.getUh(),\n                                         param.getType(),\n                                         replayParamVal.type));  // start location type 0\n          } else {\n            // replay start location with > 0 bit values, type + value\n            paramspace.push(encAdpReplayParam(param.getUh(), param.getType(), replayParamVal));\n          }\n          break;\n        }\n      /*\n       * application ack\n       */\n      case SMFLib.SMFAdProtocolParam.APPLICATION_ACK:\n        {\n          // Unpack this to multiple parameters\n          const ranges = param.getValue();\n          const uh = param.getUh();\n          const type = param.getType();\n          for (let i = 0; i < ranges.length; ++i) {\n            const range = ranges[i];\n            paramspace.push(encAdp64AckPairParam(uh,\n                                                 type,\n                                                 range[0],\n                                                 range[1]));\n          }\n          break;\n        }\n      /*\n       * string and other variable length parameters\n       */\n      case SMFLib.SMFAdProtocolParam.QUEUENAME:\n      case SMFLib.SMFAdProtocolParam.DTENAME:\n      case SMFLib.SMFAdProtocolParam.TOPICNAME:\n      case SMFLib.SMFAdProtocolParam.FLOWNAME:\n      case SMFLib.SMFAdProtocolParam.SELECTOR:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_NAME:\n        paramspace.push(encAdpUTF8NTParam(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * Transaction Publisher Notify\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY:\n        break;\n      /*\n       * Transaction Publisher Ack\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK:\n        break;\n      /*\n       * Transaction Subscriber Ack\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK:\n        break;\n      /*\n       * No Local Parameter has no data\n       * Cut Through Parameter has no data\n       */\n      case SMFLib.SMFAdProtocolParam.NOLOCAL:\n      case SMFLib.SMFAdProtocolParam.CUT_THROUGH:\n        paramspace.push(encAdp0Param(param.getUh(), param.getType()));\n        break;\n      /*\n       * Application Publisher Acknowledge\n       */\n      case SMFLib.SMFAdProtocolParam.APPLICATION_PUB_ACK:\n        break;\n      default:\n        LOG_INFO('Unrecognized ADProtocol Parameter in Message');\n        break;\n    }\n  }\n\n  const paramdata = paramspace.join('');\n\n  const data = [];\n  if (adpMsg.version === 2) {\n    let threebytes = 0;\n    threebytes = setBits(threebytes, 0, 22, 2); // RFU\n    threebytes = setBits(threebytes, adpMsg.version, 16, 6); // RFU\n    threebytes = setBits(threebytes, adpMsg.msgType, 12, 4); // msgtype\n    // length in 32 bit words means the real length must always be a multiple of 4, so pad as\n    // necessary\n\n    // 4 - how many bytes passed a 4 byte boundary\n    let padBytes = 4 - ((3 + paramdata.length) & 0x3);\n    // calculate the total length, 3 bytes header + params, in 32 bit words\n    const length = (3 + paramdata.length + padBytes) >> 2;\n    threebytes = setBits(threebytes, length, 0, 12);\n    data.push(int24ToStr(threebytes)); // first 3B (RFU, version, msgtype, length)\n    data.push(paramdata);\n\n    if (padBytes === 4) padBytes = 0; // don't add 4 pad bytes\n    while (padBytes > 0) {\n      data.push(int8ToStr(0));\n      padBytes--;\n    }\n  } else if (adpMsg.version === 3) {\n    let twobytes = 0;\n    twobytes = setBits(twobytes, 0, 14, 2); // RFU\n    twobytes = setBits(twobytes, adpMsg.version, 8, 6); // version\n    twobytes = setBits(twobytes, adpMsg.msgType, 0, 8); // msgtype\n    data.push(int16ToStr(twobytes)); // first 2B (RFU, version, msgtype)\n    data.push(int32ToStr(6 + paramdata.length)); //length: 6B header + params\n    data.push(paramdata);\n  } else {\n    LOG_ERROR(`Invalid Version ${adpMsg.version} found while encoding`);\n  }\n\n  return data.join('');\n}\n\nmodule.exports.parseAdpAt = parseAdpAt;\nmodule.exports.encAdp = encAdp;\n","const { ContentSummaryType } = require('./content-summary-types');\nconst { Decode } = require('./decode');\nconst { Encode } = require('./encode');\nconst { ParamParse } = require('./param-parse');\nconst { ParseSMF } = require('./parse-smf');\nconst { Transport } = require('./transport');\n\nmodule.exports.ContentSummaryType = ContentSummaryType;\nmodule.exports.Encode = Encode;\nmodule.exports.Decode = Decode;\nmodule.exports.ParamParse = ParamParse;\nmodule.exports.ParseSMF = ParseSMF;\nmodule.exports.Transport = Transport;\n\n","const { Bits, Convert } = require('solclient-convert');\nconst { ClientCtrlMessage, SMFParameter } = require('../message-objects');\nconst { LOG_ERROR } = require('solclient-log');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr, /*strToInt8,*/\n  int16ToStr, /*strToInt16,*/\n  int32ToStr, /*strToUInt32,*/\n} = Convert;\n\nfunction parseCCAt(dataBuf, offset, payloadLen) {\n  const ccMsg = new ClientCtrlMessage();\n  if (payloadLen < 6 || offset + 6 > dataBuf.length) {\n      // not enough data! Return empty.\n      // This is required because we can get an empty CC payload as a router response\n    return ccMsg;\n  }\n\n  let pos = offset;\n  const twobytes = dataBuf.readUInt16BE(pos);\n  pos += 2;\n    // var uh = bits(twobytes, 15, 1);\n  const version = bits(twobytes, 8, 3);\n  const msgType = bits(twobytes, 0, 8);\n  const len = dataBuf.readUInt32BE(pos);\n  pos += 4;\n\n    // Sanity check: we support ClientCtrl v1\n  if (version !== 1) {\n    LOG_ERROR(`Unsupported ClientCtrl version ${version}`);\n    return false;\n  }\n\n  if (len <= 0 || (offset + len) > dataBuf.length) {\n    return false;\n  }\n\n  ccMsg.msgType = msgType;\n  ccMsg.version = version;\n  while (pos < (offset + len)) {\n    const onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    const paramUh = bits(onebyte, 7, 1);\n    const paramType = bits(onebyte, 0, 7);\n    const paramLen = dataBuf.readUInt32BE(pos);\n    if (paramLen <= 0) {\n      return false; // SMF parsing fail\n    }\n\n    pos += 4;\n    const paramValueLen = paramLen - 5;\n    const smfP = new SMFParameter(paramUh, paramType, null, dataBuf, pos, pos + paramValueLen);\n    ccMsg.addParameter(smfP);\n    pos += paramValueLen;\n  }\n  return ccMsg;\n}\n\nfunction encCC(ccMsg) {\n  const paramSpace = [];\n  const paramArray = ccMsg.getParameterArray();\n    /*\n    ClientCtrl Parameter formatting:\n        1 byte uh/type\n        4 bytes length\n        N bytes value\n     */\n  for (let p = 0, n = paramArray.length; p < n; ++p) {\n    const currentParam = paramArray[p];\n      // It's not a flat array, we have gaps!\n    if (currentParam === undefined) {\n      continue;\n    }\n    let currentParamOneByte = 0;\n    currentParamOneByte = setBits(currentParamOneByte, currentParam.getUh(), 7, 1);\n    currentParamOneByte = setBits(currentParamOneByte, currentParam.getType(), 0, 7);\n    paramSpace.push(int8ToStr(currentParamOneByte));\n    paramSpace.push(int32ToStr(currentParam.getValue().length + 5));\n    paramSpace.push(currentParam.getValue());\n  }\n\n  const paramData = paramSpace.join('');\n  let twobytes = 0;\n  twobytes = setBits(twobytes, 0, 15, 1); // uh\n  twobytes = setBits(twobytes, 0, 11, 4); // RFU\n  twobytes = setBits(twobytes, 1, 8, 3); // version\n  twobytes = setBits(twobytes, ccMsg.msgType, 0, 8); // msgtype\n\n  const data = [];\n  data.push(int16ToStr(twobytes)); // first 2B (uh, version, msgtype)\n  data.push(int32ToStr(6 + paramData.length)); // length: 6B header + params\n  data.push(paramData);\n  return data.join('');\n}\n\nmodule.exports.parseCCAt = parseCCAt;\nmodule.exports.encCC = encCC;\n","class ContentSummaryElement {\n  constructor(type = null, position = 0, length = 0) {\n    this.type = type;\n    this.position = position;\n    this.length = length;\n  }\n}\n\nmodule.exports.ContentSummaryElement = ContentSummaryElement;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Type maching SMF encoding value\n * @enum {number}\n * @memberof solace\n * @private\n */\nconst ContentSummaryType = {\n  XML_META:          0,\n  XML_PAYLOAD:       1,\n  BINARY_ATTACHMENT: 2,\n  CID_LIST:          3,\n  BINARY_METADATA:   4,\n};\n\nmodule.exports.ContentSummaryType = Enum.new(ContentSummaryType);\n","const DebugLib = require('solclient-debug');\nconst SolclientDestinationLib = require('solclient-destination');\nconst SolclientMessageLib = require('solclient-message');\nconst SolclientSDTLib = require('solclient-sdt');\nconst { BinaryMetaBlock, KeepAliveMessage } = require('../message-objects');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { Hex, Long } = require('solclient-convert');\nconst { Lazy } = require('solclient-eskit');\nconst { LogFormatter } = require('solclient-log');\nconst { parseAdpAt } = require('./adprotocol');\nconst { parseCCAt } = require('./client-ctrl');\nconst { ParseSMF } = require('./parse-smf');\nconst { PriorityUserCosMap } = require('./priority-user-cos-map');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMP } = require('./smp');\nconst { Transport } = require('./transport');\n\nconst { formatHexString } = Hex;\nconst { lazyValue } = Lazy;\nconst { parseSMFAt } = ParseSMF;\nconst { parseSMPAt } = SMP;\nconst { parseTsSmfMsgAt } = Transport;\n\nconst logger = new LogFormatter('[smf-decode]');\nconst { LOG_DEBUG,\n        LOG_ERROR } = logger;\n\nconst userCosForPriority = lazyValue(() => new PriorityUserCosMap().reverse);\n\nconst BIN_STRUCTYPES = {\n  0x0A: SolclientMessageLib.MessageType.MAP,\n  0x0B: SolclientMessageLib.MessageType.STREAM,\n  0x07: SolclientMessageLib.MessageType.TEXT,\n};\n\nfunction adaptBinaryMetaToMessage(binaryMeta, messageIn) {\n  const message = messageIn;\n  const messageSdt = SolclientSDTLib.Codec.parseSingleElement(binaryMeta.payload, 0);\n\n  if (!(messageSdt && messageSdt.getType() === SolclientSDTLib.SDTFieldType.STREAM)) {\n    return;\n  }\n\n  const sdtstream = messageSdt.getValue();\n  let sdtfield = sdtstream.getNext();\n  if (sdtfield && sdtfield.getType() === SolclientSDTLib.SDTFieldType.BYTEARRAY\n    && sdtfield._value && sdtfield._value.length > 0) {\n    // Preamble byte array is present\n    const preambleByte0 = sdtfield._value.readUInt8(0);\n    if ((preambleByte0 & 0x80) === 0) {\n      // structured message: override default \"BIN\" message type\n      message._messageType = (BIN_STRUCTYPES[preambleByte0 & 0x0F] ||\n                              SolclientMessageLib.MessageType.BINARY);\n    }\n    if (sdtfield._value.length > 1) {\n      const preambleByte1 = sdtfield._value.readUInt8(1);\n      message.setAsReplyMessage((preambleByte1 & 0x80) !== 0);\n    }\n  }\n\n  sdtfield = sdtstream.getNext();\n  if (sdtfield && sdtfield.getType() === SolclientSDTLib.SDTFieldType.MAP) {\n    const sdtMap = sdtfield.getValue();\n    const p = sdtMap.getField('p');\n    const h = sdtMap.getField('h');\n    if (p) {\n      message.setUserPropertyMap(p.getValue());\n    }\n    if (h) {\n      const headerMap = h.getValue();\n      const ci = headerMap.getField('ci');\n      const mi = headerMap.getField('mi');\n      const mt = headerMap.getField('mt');\n      const rt = headerMap.getField('rt');\n      const si = headerMap.getField('si');\n      const sn = headerMap.getField('sn');\n      const ts = headerMap.getField('ts');\n      const ex = headerMap.getField('ex');\n      if (ci) {\n        message.setCorrelationId(ci.getValue());\n      }\n      if (mi) {\n        message.setApplicationMessageId(mi.getValue());\n      }\n      if (mt) {\n        message.setApplicationMessageType(mt.getValue());\n      }\n      if (rt) {\n        message.setReplyTo(rt.getValue());\n      }\n      if (si) {\n        message.setSenderId(si.getValue());\n      }\n      if (sn) {\n        message.setSequenceNumber(sn.getValueNoThrow());\n      }\n      if (ts) {\n        message.setSenderTimestamp(ts.getValue());\n      }\n      if (ex) {\n        message.setGMExpiration(ex.getValue());\n      }\n    }\n  }\n}\n\nfunction adaptSmfToMessage(smfHeader, messageIn, stream, offset) {\n  const message = messageIn;\n  message._setDeliverToOne(!!smfHeader.smf_dto);\n  message._setDeliveryMode(smfHeader.pm_deliverymode ||\n                          SolclientMessageLib.MessageDeliveryModeType.DIRECT);\n  if (smfHeader.pm_tr_topicname_bytes !== null) {\n    message._setDestination(\n      SolclientDestinationLib.DestinationFromNetwork.createDestinationFromBytes(\n        smfHeader.pm_tr_topicname_bytes));\n  }\n  message._setDiscardIndication(!!smfHeader.smf_di);\n  message._setElidingEligible(!!smfHeader.smf_elidingEligible);\n  message._setDMQEligible(!!smfHeader.smf_deadMessageQueueEligible);\n  message._setUserCos(userCosForPriority.value.get(smfHeader.smf_priority));\n  message._setPriority(smfHeader.pm_msg_priority);\n  if (smfHeader.pm_userdata) message._setUserData(smfHeader.pm_userdata);\n\n  message.setRedelivered(!!smfHeader.pm_ad_redelflag || !!smfHeader.pm_ad_flowredelflag);\n\n  message.setFlowId(smfHeader.pm_ad_flowid);\n  message.setGuaranteedMessageId(smfHeader.pm_ad_msgid);\n  message.setGuaranteedPreviousMessageId(smfHeader.pm_ad_prevmsgid);\n  message.setPublisherId(smfHeader.pm_ad_publisherid);\n  message.setPublisherMessageId(smfHeader.pm_ad_publishermsgid);\n  message.setTopicSequenceNumber(smfHeader.pm_ad_topicSequenceNumber);\n  if (message.getDeliveryMode() === SolclientMessageLib.MessageDeliveryModeType.DIRECT) {\n    message.setDeliveryCount(-1);\n  } else if (smfHeader.pm_ad_redeliveryCount) {\n    message.setDeliveryCount(smfHeader.pm_ad_redeliveryCount + 1);\n  } else { // AD, but delivery count header not present\n    // Only the flow knows whether the qEndpointBehaviour DC flag was set,\n    // so it overrides the value before passing it to the user with -1 if it wasn't.\n    message.setDeliveryCount(1);\n  }\n\n  // set the suid for the message if present\n  if (smfHeader.pm_ad_spooler_unique_id) {\n    message._setSpoolerUniqueId(smfHeader.pm_ad_spooler_unique_id);\n  }\n  // set the message id of the replication group message id using\n  // ASSURED_DELIVERY_REPLICATION_MATE_ACK_MESSAGE_ID if present\n  // otherwise use ASSURED_DELIVERY_ACK_MESSAGE_ID if present\n  // otherwise let the Mesage.getReplicationGroupMessageId use\n  // the value set by message.setGuaranteedMessageId\n  if (smfHeader.pm_ad_replication_mate_ack_message_id) {\n    message._setSpoolerMessageId(smfHeader.pm_ad_replication_mate_ack_message_id);\n  } else if (smfHeader.pm_ad_local_spooler_message_id) {\n    message._setSpoolerMessageId(smfHeader.pm_ad_local_spooler_message_id);\n  }\n\n  if (Long.isLong(smfHeader.pm_ad_ttl)) {\n    message.setTimeToLive(smfHeader.pm_ad_ttl.toNumber());\n  } else {\n    message.setTimeToLive(smfHeader.pm_ad_ttl);\n  }\n\n  // Copy content into fields (from input bytes)\n  const payloadOffset = offset + smfHeader.headerLength;\n  const cs = smfHeader.pm_content_summary;\n\n  if (!(cs && cs.length)) {\n    // No content-summary, assume binary attachment\n    message._setBinaryAttachment(smfHeader.payloadLength > 0\n                                ? stream.slice(payloadOffset,\n                                               payloadOffset + smfHeader.payloadLength)\n                                : undefined);\n    return;\n  }\n\n  for (let i = 0, n = cs.length; i < n; ++i) {\n    const currentChunk = cs[i];\n    const chunkBegin = payloadOffset + currentChunk.position;\n    const chunkEnd = payloadOffset + currentChunk.position + currentChunk.length;\n    switch (currentChunk.type) {\n      case ContentSummaryType.BINARY_ATTACHMENT:\n        message._setBinaryAttachment(stream.slice(chunkBegin, chunkEnd));\n        break;\n      case ContentSummaryType.BINARY_METADATA:\n        {\n          const binaryMeta = BinaryMetaBlock.fromEncodedSmf(stream, chunkBegin);\n          message.binaryMetadataChunk = binaryMeta;\n          if (binaryMeta.type === 0) {\n            // we have SDT JMS metadata\n            adaptBinaryMetaToMessage(binaryMeta, message);\n          }\n          break;\n        }\n      case ContentSummaryType.XML_META:\n        message._setXmlMetadata(stream.toString('latin1', chunkBegin, chunkEnd));\n        break;\n      case ContentSummaryType.XML_PAYLOAD:\n        message._setXmlContentInternal(stream.toString('latin1', chunkBegin, chunkEnd));\n        break;\n      default:\n        LOG_ERROR(`Unhandled ContentSummaryType: ${ContentSummaryType.describe(currentChunk.type)}`);\n    }\n  }\n}\n\nfunction decodeCompoundMessage(dataBuf, pos) {\n  const header = parseSMFAt(dataBuf, pos);\n  if (!header) {\n    LOG_DEBUG('decodeCompoundMessage: SMF parsing failed');\n    return null;\n  }\n  // the parser determined there was a full SMF message\n  const payloadPosition = pos + header.headerLength;\n  const payloadLen = header.payloadLength;\n  let message;\n  switch (header.smf_protocol) {\n    case SMFProtocol.TSESSION:\n      message = parseTsSmfMsgAt(dataBuf, payloadPosition, header);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.TRMSG:\n      message = new SolclientMessageLib.Message();\n      message._smfHeader = header;\n      adaptSmfToMessage(header, message, dataBuf, pos);\n      return message;\n\n    case SMFProtocol.ADCTRL:\n      message = parseAdpAt(dataBuf, payloadPosition, payloadLen);\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.CLIENTCTRL:\n      message = parseCCAt(dataBuf, payloadPosition, payloadLen);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.SMP:\n      message = parseSMPAt(dataBuf, payloadPosition);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.KEEPALIVE:\n    case SMFProtocol.KEEPALIVEV2:\n      message = new KeepAliveMessage();\n      message.smfHeader = header;\n      return message;\n\n    default:\n      LOG_ERROR(`Unknown protocol: 0x${formatHexString(header.smf_protocol)}, ` +\n                `dump message content: \\n${\n                DebugLib.Debug.formatDumpBytes(dataBuf.slice(pos,\n                                                             pos + header.messageLength).toString('latin1'),\n                                               true, 0)}`);\n      break;\n  }\n  return null;\n}\n\nconst Decode = {\n  decodeCompoundMessage,\n};\n\nmodule.exports.Decode = Decode;\n","const MessageLib = require('solclient-message');\nconst { Base64, Bits, Convert } = require('solclient-convert');\nconst { BinaryMetaBlock, SMFHeader, SMPMessage } = require('../message-objects');\nconst { Check } = require('solclient-validate');\nconst { ClientCtrlMessage, KeepAliveMessage, AdProtocolMessage } = require('../message-objects');\nconst { Codec: SDTCodec } = require('solclient-sdt');\nconst { ContentSummaryElement } = require('./content-summary-element');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { DestinationType } = require('solclient-destination');\nconst { encAdp } = require('./adprotocol');\nconst { encCC } = require('./client-ctrl');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_TRACE, LOG_INFO } = require('solclient-log');\nconst { ParamParse } = require('./param-parse');\nconst { PriorityUserCosMap } = require('./priority-user-cos-map');\nconst { SDTField, SDTFieldType, SDTMapContainer, SDTStreamContainer } = require('solclient-sdt');\nconst { SMFParameterType, SMFExtendedParameterType } = require('../smf-parameter-types');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMP } = require('./smp');\n\nconst { encode: base64Encode } = Base64;\nconst { set: setBits } = Bits;\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n  int64ToStr,\n} = Convert;\nconst { lazyValue } = Lazy;\nconst {\n  encContentSummary,\n  encDeliveryMode,\n  encLightSMFParam,\n  encodeSMFParam,\n  encodeSMFExtendedParam,\n} = ParamParse;\nconst { encodeSingleElement } = SDTCodec;\nconst { encSmp } = SMP;\n\nconst priorityForUserCos = lazyValue(() => new PriorityUserCosMap().forward);\n\nfunction addContentElementToArrays(csumm, payloadArray, dataChunk, cstype) {\n  if (Check.anything(dataChunk) && dataChunk.length > 0) {\n    const cse = new ContentSummaryElement(cstype, NaN, dataChunk.length);\n    csumm.push(cse);\n    payloadArray.push(dataChunk);\n  }\n}\n\nfunction addToMapIfPresent(headerMap, key, type, value) {\n  if (Check.anything(value)) {\n    headerMap.addField(key, SDTField.create(type, value));\n  }\n}\n\n// Return the binary attachment as string, sets the binaryMetaData on the message.\n// Not nice, but fast.\nfunction adaptMessageToBinaryMeta(message) {\n  let result;\n  // solace header map\n  const headerMap = new SDTMapContainer();\n  addToMapIfPresent(headerMap, 'ci', SDTFieldType.STRING, message.getCorrelationId());\n  addToMapIfPresent(headerMap, 'mi', SDTFieldType.STRING, message.getApplicationMessageId());\n  addToMapIfPresent(headerMap, 'mt', SDTFieldType.STRING, message.getApplicationMessageType());\n  addToMapIfPresent(headerMap, 'rt', SDTFieldType.DESTINATION, message.getReplyTo());\n  addToMapIfPresent(headerMap, 'si', SDTFieldType.STRING, message.getSenderId());\n  addToMapIfPresent(headerMap, 'sn', SDTFieldType.INT64, message.getSequenceNumber());\n  addToMapIfPresent(headerMap, 'ts', SDTFieldType.INT64, message.getSenderTimestamp());\n  addToMapIfPresent(headerMap, 'ex', SDTFieldType.INT64, message.getGMExpiration());\n\n  // container map: solace headers + user prop map\n  const sdtMap = new SDTMapContainer();\n  if (message.getUserPropertyMap()) {\n    sdtMap.addField('p', SDTField.create(SDTFieldType.MAP, message.getUserPropertyMap()));\n  }\n  if (headerMap.getKeys().length > 0) {\n    sdtMap.addField('h', SDTField.create(SDTFieldType.MAP, headerMap));\n  }\n\n  let preambleByte0 = 0;\n  switch (message.getType()) {\n    case MessageLib.MessageType.BINARY:\n      preambleByte0 |= 0x80;\n      break;\n    case MessageLib.MessageType.MAP:\n      preambleByte0 |= 0x0A;\n      result = encodeSingleElement(message._structuredContainer);\n      break;\n    case MessageLib.MessageType.STREAM:\n      preambleByte0 |= 0x0B;\n      result = encodeSingleElement(message._structuredContainer);\n      break;\n    case MessageLib.MessageType.TEXT:\n      preambleByte0 |= 0x07;\n      result = encodeSingleElement(message._structuredContainer);\n      break;\n    default:\n      LOG_INFO(`Unhandled messageType: ${message.getType()}`);\n      break;\n  }\n  const preambleByte1 = message.isReplyMessage() ? 0x80 : 0;\n  const sdtPreamble = SDTField.create(SDTFieldType.BYTEARRAY,\n                                      String.fromCharCode(preambleByte0, preambleByte1));\n\n  // Putting it all together: a stream with the preamble and map\n  const sdtStreamContainer = new SDTStreamContainer();\n  sdtStreamContainer.addField(sdtPreamble);\n  sdtStreamContainer.addField(SDTField.create(SDTFieldType.MAP, sdtMap));\n\n  const binaryMeta = new BinaryMetaBlock();\n  binaryMeta.type = 0;\n  binaryMeta.payload = encodeSingleElement(SDTField.create(SDTFieldType.STREAM,\n                                                           sdtStreamContainer));\n  message.binaryMetadataChunk = binaryMeta;\n  return result;\n}\n\n\nfunction adaptMessageToSmf_nonPayload(message, smfHeaderIn) {\n  const smfHeader = smfHeaderIn;\n  const deliveryMode = message.getDeliveryMode();\n\n  smfHeader.smf_dto = message.isDeliverToOne();\n  smfHeader.pm_deliverymode = deliveryMode;\n  smfHeader.smf_adf = deliveryMode === MessageLib.MessageDeliveryModeType.DIRECT ? 0 : 1;\n  smfHeader.smf_di = message.isDiscardIndication();\n  smfHeader.smf_elidingEligible = message.isElidingEligible();\n  smfHeader.smf_deadMessageQueueEligible = message.isDMQEligible();\n  smfHeader.pm_ad_flowid = message.getFlowId();\n  smfHeader.pm_ad_publisherid = message.getPublisherId();\n  smfHeader.pm_ad_publishermsgId = message.getPublisherMessageId();\n  smfHeader.pm_ad_msgid = message.getGuaranteedMessageId();\n  smfHeader.pm_ad_prevmsgid = message.getGuaranteedPreviousMessageId();\n  smfHeader.pm_ad_ttl = message.getTimeToLive();\n  smfHeader.pm_ad_ackimm = message.isAcknowledgeImmediately();\n  smfHeader.pm_ad_redelflag = message.isRedelivered();\n\n  const dest = message.getDestination();\n  if (dest) {\n    smfHeader.pm_tr_topicname_bytes = dest.getBytes();\n    if (dest.type === DestinationType.QUEUE ||\n        dest.type === DestinationType.TEMPORARY_QUEUE) {\n      const { offset } = dest;\n      smfHeader.pm_queue_len = smfHeader.pm_tr_topicname_bytes.length - offset;\n      smfHeader.pm_queue_offset = offset;\n    }\n  }\n\n  smfHeader.smf_priority = priorityForUserCos.value.get(message.getUserCos());\n\n  if (message.getPriority() !== undefined\n    && typeof message.getPriority() === 'number'\n    && message.getPriority() <= 255\n    && message.getPriority() >= 0) {\n    smfHeader.pm_msg_priority = message.getPriority();\n  } else {\n    smfHeader.pm_msg_priority = null;\n  }\n\n  const userData = message.getUserData();\n  smfHeader.pm_userdata = (userData === null || userData === undefined)\n    ? null\n    : message.getUserData();\n}\n\nfunction adaptMessageToSmf_payloadMemoize(message) {\n  let encodedSdtPayload;\n\n  // Setup user properties, header properties, msgtype\n  if (message.getCorrelationId() ||\n      message.getApplicationMessageId() ||\n      message.getApplicationMessageType() ||\n      message.getReplyTo() ||\n      message.getSenderId() ||\n      message.getSequenceNumber() ||\n      message.getSenderTimestamp() ||\n      message.getUserPropertyMap() ||\n      message.isReplyMessage() ||\n      (message.getType() !== MessageLib.MessageType.BINARY)) {\n    // add SDT binary metadata\n    encodedSdtPayload = adaptMessageToBinaryMeta(message);\n  }\n\n  // Build array of ContentSummaryElements\n  const csumm = [];\n  const payload = [];\n  addContentElementToArrays(csumm, payload,\n                            message.getXmlMetadata(), ContentSummaryType.XML_META);\n  addContentElementToArrays(csumm, payload,\n                            message.getXmlContent(), ContentSummaryType.XML_PAYLOAD);\n  if (encodedSdtPayload) {\n    addContentElementToArrays(csumm, payload,\n                              encodedSdtPayload, ContentSummaryType.BINARY_ATTACHMENT);\n  } else {\n    addContentElementToArrays(csumm, payload,\n                              message._binaryAttachment ? message._binaryAttachment.toString('latin1') : '', ContentSummaryType.BINARY_ATTACHMENT);\n  }\n  const binaryMeta = message.binaryMetadataChunk;\n  if (binaryMeta !== null) {\n    const binaryMetaSMF = binaryMeta.asEncodedSmf();\n    const MAX_24BITS = 16777215;\n    if (binaryMetaSMF.length > MAX_24BITS) {\n      LOG_TRACE(`binary-meta data (${binaryMetaSMF.length}) over the ${MAX_24BITS} limit`);\n      throw new OperationError(`binary-meta data (${binaryMetaSMF.length}) over the ${MAX_24BITS} limit`, ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    } else {\n      addContentElementToArrays(csumm, payload, binaryMetaSMF, ContentSummaryType.BINARY_METADATA);\n    }\n  }\n  message._memoized_csumm = csumm;\n  message._memoized_payload = payload.join(''); \n  message._payload_is_memoized = true;\n  return message._memoized_payload ? message._memoized_payload.length : 0;\n}\n\nfunction adaptMessageToSmf_payloadFinalize(message, smfHeaderIn) {\n  const smfHeader = smfHeaderIn;\n  if (!message._payload_is_memoized) {\n    adaptMessageToSmf_payloadMemoize(message);\n  }\n  const csumm = message._memoized_csumm;\n  const payloadBytes = message._memoized_payload;\n  if (csumm.length === 0 ||\n      (csumm.length === 1 && csumm[0].type === ContentSummaryType.BINARY_ATTACHMENT)) {\n    // NULL or RAW payload (no content-summary)\n    //  Was this here to invert the condition?\n    // LOG_TRACE('NULL or RAW payload (no content-summary)');\n  } else {\n    smfHeader.pm_content_summary = csumm;\n  }\n\n  smfHeader.payload = payloadBytes;\n}\n\nfunction adaptMessageToSmf(message, smfHeaderIn) {\n  adaptMessageToSmf_payloadFinalize(message, smfHeaderIn);\n  adaptMessageToSmf_nonPayload(message, smfHeaderIn);\n}\n\n/**\n * Creates an array of all values that fit in the given number of bits.\n * e.g. bitRange(1) => [0, 1], bitRange(2) => [0, 1, 2, 3]\n * @param {Number} bits The number of bits in the range\n * @returns {Number} All values that fit in that number of bits\n * @private\n */\nconst bitRange = bits => Array.from(Array(Math.pow(2, bits))).map((el, i) => i);\nconst maskValues = (shift, bits) => bitRange(bits).map(val => setBits(0, val, shift, bits));\nconst DI_BIT = maskValues(31, 1);\nconst ELIDING_ELIGIBLE_BIT = maskValues(30, 1);\nconst DTO_BIT = maskValues(29, 1);\nconst ADF_BIT = maskValues(28, 1);\nconst DMQE_BIT = maskValues(27, 1);\nconst VERSION_BITS = maskValues(24, 3);\nconst UH_BITS = maskValues(22, 2);\nconst PROTOCOL_BITS = maskValues(16, 6);\nconst PRIORITY_BITS = maskValues(12, 4);\nconst TTL_BITS = maskValues(0, 8);\nconst QT_OFFSET_BYTES = maskValues(8, 8);\nconst QT_LEN_BYTES = maskValues(0, 8);\n\nfunction encodeSMF(header) {\n  // First 4 bytes: protocol, ttl, etc\n  let w1 = 0;\n\n  // PERF: single expression to make w1 const\n  w1 |= DI_BIT[header.smf_di && 1 || 0];\n  w1 |= ELIDING_ELIGIBLE_BIT[header.smf_elidingEligible && 1 || 0];\n  w1 |= DTO_BIT[header.smf_dto && 1 || 0];\n  w1 |= ADF_BIT[header.smf_adf && 1 || 0];\n  w1 |= DMQE_BIT[header.smf_deadMessageQueueEligible && 1 || 0];\n  w1 |= VERSION_BITS[header.smf_version || 0];\n  w1 |= UH_BITS[header.smf_uh || 0];\n  w1 |= PROTOCOL_BITS[header.smf_protocol || 0];\n  w1 |= PRIORITY_BITS[header.smf_priority || 0];\n  w1 |= TTL_BITS[header.smf_ttl || 0]; // PERF: or set w1 to ttl initially.\n\n  const params = [];\n  // Encode all standard SMF parameters\n  // Topic name and queue/topic offsets are supposed to come first\n  if (header.pm_tr_topicname_bytes) {\n    params.push(encodeSMFParam(2, SMFParameterType.TR_TOPICNAME,\n                               `${header.pm_tr_topicname_bytes}`));\n  }\n  if (header.pm_queue_len) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_QUEUE_NAME_OFFSET,\n                                 int16ToStr(QT_OFFSET_BYTES[header.pm_queue_offset] |\n                                            QT_LEN_BYTES[header.pm_queue_len])));\n  }\n  if (header.pm_topic_len) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_TOPIC_NAME_OFFSET,\n                                 int16ToStr(QT_OFFSET_BYTES[header.pm_topic_offset] |\n                                            QT_OFFSET_BYTES[header.pm_topic_len])));\n  }\n\n  if (header.pm_corrtag !== null && header.pm_corrtag !== undefined) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_CORRELATION,\n                                 int24ToStr(header.pm_corrtag)));\n  }\n  if (header.pm_ad_ackimm) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_ACK_IMMEDIATELY,\n                                 ''));\n  }\n\n  if (header.pm_msg_priority !== null) {\n    params.push(encodeSMFParam(0, SMFParameterType.MESSAGEPRIORITY,\n                               int8ToStr(header.pm_msg_priority)));\n  }\n  if (header.pm_userdata !== null && header.pm_userdata !== '') {\n    params.push(encodeSMFParam(0, SMFParameterType.USERDATA,\n                               header.pm_userdata));\n  }\n  if (header.pm_username) {\n    // do a sloppy base64 (no newlines)\n    params.push(encodeSMFParam(0, SMFParameterType.USERNAME,\n                               base64Encode(header.pm_username)));\n  }\n  if (header.pm_password) {\n    // do a sloppy base64 (no newlines)\n    params.push(encodeSMFParam(0, SMFParameterType.PASSWORD,\n                               base64Encode(header.pm_password)));\n  }\n  if (header.pm_respcode) {\n    // not useful API->router\n    params.push(encodeSMFParam(0, SMFParameterType.RESPONSE,\n                               int32ToStr(header.pm_respcode) + header.pm_respstr));\n  }\n\n  if (header.pm_deliverymode !== null) {\n    params.push(encodeSMFParam(0, SMFParameterType.DELIVERY_MODE,\n                               encDeliveryMode(header.pm_deliverymode)));\n  }\n\n  if (header.pm_ad_msgid !== undefined) {\n    params.push(encodeSMFParam(2, SMFParameterType.ASSURED_MESSAGE_ID,\n                               int64ToStr(header.pm_ad_msgid)));\n    params.push(encodeSMFParam(2, SMFParameterType.ASSURED_PREVMESSAGE_ID,\n                               int64ToStr(header.pm_ad_prevmsgid)));\n  }\n\n  if (header.pm_ad_flowid) {\n    params.push(encodeSMFParam(0, SMFParameterType.ASSURED_FLOWID,\n                               int32ToStr(header.pm_ad_flowid)));\n  }\n\n  // header.pm_ad_redelflag\n  // Ad redelivered\n  if (header.pm_ad_redelflag) {\n    params.push(encodeSMFParam(0, SMFParameterType.ASSURED_REDELIVERED_FLAG, undefined));\n  }\n  // header.pm_ad_flowredelflag\n\n  if (header.pm_ad_ttl !== undefined) {\n    params.push(encodeSMFParam(0, SMFParameterType.AD_TIMETOLIVE,\n                               int64ToStr(header.pm_ad_ttl)));\n  }\n\n  // sequence number?\n\n  if (header.pm_ad_publisherid) {\n    params.push(encodeSMFParam(0, SMFParameterType.PUBLISHER_ID,\n                               int32ToStr(header.pm_ad_publisherid)));\n  }\n\n  if (header.pm_ad_publisherMsgId) {\n    params.push(encodeSMFParam(0, SMFParameterType.PUBLISHER_MSGID,\n                               int64ToStr(header.pm_ad_publisherMsgId)));\n  }\n\n  // transactions: ackmessageid, transactionid, transactionflags\n\n  if (header.pm_content_summary) {\n    params.push(encodeSMFParam(2, SMFParameterType.MESSAGE_CONTENT_SUMMARY,\n                               encContentSummary(header.pm_content_summary)));\n  }\n  // done common SMF parameters!\n\n  // pre-collect and push extended parameters (once we have any)\n\n  let extendedStreamContents = '';\n  let extendedUH = 0;\n\n  if (header.pm_oauth2_access_token) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType.OAUTH2_ACCESS_TOKEN,\n                                                     header.pm_oauth2_access_token);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (header.pm_oidc_id_token) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType.OIDC_ID_TOKEN,\n                                                     header.pm_oidc_id_token);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (header.pm_oauth2_issuer_identifier) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType\n                                                     .OAUTH2_ISSUER_IDENTIFIER,\n                                                     header.pm_oauth2_issuer_identifier);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (extendedStreamContents.length > 0) {\n    params.push(encodeSMFParam(extendedUH,\n                               SMFParameterType.EXTENDED_TYPE_STREAM,\n                               extendedStreamContents));\n  }\n\n  // compute header size and full message size\n  const encodedParams = params.join('');\n  const hdrlen = 12 + encodedParams.length;\n  const msglen = hdrlen + header.payloadLength;\n\n  // ? Already encoded. Why bother?\n  header.setMessageSizes(hdrlen, header.payloadLength);\n\n  return (\n    int32ToStr(w1) +\n    int32ToStr(hdrlen) +\n    int32ToStr(msglen) +\n    encodedParams\n  );\n}\n\nfunction encodeCompoundMessage(msg) {\n  let payload = '';\n  if (msg instanceof MessageLib.Message) {\n    if (!msg.smfHeader) {\n      msg.smfHeader = new SMFHeader(SMFProtocol.TRMSG, 255);\n    }\n    adaptMessageToSmf(msg, msg._smfHeader);\n    payload = msg._smfHeader.payload;\n  } else if (msg instanceof ClientCtrlMessage) {\n    payload = encCC(msg);\n  } else if (msg instanceof SMPMessage) {\n    payload = encSmp(msg);\n  } else if (msg instanceof KeepAliveMessage) {\n    LOG_TRACE('Skipping retrieve payload as there is none in a KeepAliveMessage');\n  } else if (msg instanceof AdProtocolMessage) {\n    payload = encAdp(msg);\n  }\n  const header = msg.smfHeader;\n  header.setPayloadSize(payload.length);\n  const encodedHeader = encodeSMF(header);\n  return encodedHeader + payload;\n}\n\nconst Encode = {\n  encodeCompoundMessage,\n  encodeSMF,\n  adaptMessageToSmf_payloadMemoize,\n};\n\nmodule.exports.Encode = Encode;\n","const MessageLib = require('solclient-message');\nconst { BidiMap, Lazy } = require('solclient-eskit');\nconst { Bits, Convert } = require('solclient-convert');\nconst { ContentSummaryElement } = require('./content-summary-element');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SMFUH } = require('../message-objects');\n\nconst { lazyValue } = Lazy;\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n} = Convert;\n\nconst delModeEnumBidiMap = lazyValue(\n  () => {\n    // Single bidirectional map for lookups. Note that the forward\n    // keys are converted to strings.\n    const source = [\n      [0x00, MessageLib.MessageDeliveryModeType.NON_PERSISTENT],\n      [0x01, MessageLib.MessageDeliveryModeType.PERSISTENT],\n      [0x02, MessageLib.MessageDeliveryModeType.DIRECT],\n    ].map(el => [el[0], el[1]]);\n    return new BidiMap(...source);\n  });\nconst lutDelModeToEnum = lazyValue(() => delModeEnumBidiMap.value.forward);\nconst lutEnumToDelMode = lazyValue(() => delModeEnumBidiMap.value.reverse);\n\n/**\n * SMF TLV Param LUT\n * utTypeMap[uh][paramtype] is the binary prefix for a regular (not LW) TLV\n * parameter with uh and paramtype values as accessed in the array.\n *\n * @private\n */\nconst uhTypeMap = (() => {\n  const result = [];\n  const paramTypeBits = 5;\n  const paramTypeCount = Math.pow(2, paramTypeBits);\n  SMFUH.values.forEach((uh) => {\n    result[uh] = [];\n    for (let i = 0; i < paramTypeCount; ++i) {\n      let byte1 = 0;\n      byte1 = Bits.set(byte1, uh, 6, 2);\n      byte1 = Bits.set(byte1, i, 0, paramTypeBits);\n      result[uh][i] = int8ToStr(byte1);\n    }\n  });\n  return result;\n})();\n\n/**\n * SMF TLV length map LUT\n *\n * lenMap[x] === String.fromCharCode(x)\n *\n * @private\n */\nconst lenMap = (new Array(256).fill(null).map((_, idx) => int8ToStr(idx)));\n\n/**\n * SMF Lightweight Param LUT\n *\n * lightMap[uh][paramtype][len] is the prefix for an SMF LWP\n * with uh, paramtype and len values as accessed in the array.\n *\n * @private\n */\nconst lightMap = (() => {\n  const result = [];\n  const paramTypeBits = 3;\n  const paramTypeCount = Math.pow(2, paramTypeBits);\n  const lenBits = 2;\n  const lenCount = Math.pow(2, lenBits);\n  SMFUH.values.forEach((uh) => {\n    result[uh] = [];\n    for (let i = 0; i < paramTypeCount; ++i) {\n      result[uh][i] = [];\n      for (let j = 0; j < lenCount; ++j) {\n        let byte1 = 0;\n        byte1 = Bits.set(byte1, uh, 6, 2);\n        byte1 = Bits.set(byte1, 1, 5, 1);\n        byte1 = Bits.set(byte1, i, 2, 3);\n        byte1 = Bits.set(byte1, j, 0, 2);\n        result[uh][i][j] = int8ToStr(byte1);\n      }\n    }\n  });\n  return result;\n})();\n\nconst ContentSummaryDecodeMap = [\n  ContentSummaryType.XML_META,\n  ContentSummaryType.XML_PAYLOAD,\n  ContentSummaryType.BINARY_ATTACHMENT,\n  ContentSummaryType.CID_LIST,\n  ContentSummaryType.BINARY_METADATA,\n];\n\nconst ParamParse = {};\n\nParamParse.parseTopicQueueOffsets = function parseTopicQueueOffsets(dataBuf, offset) {\n  const result = [];\n  result[0] = dataBuf.readUInt8(offset);\n  result[1] = dataBuf.readUInt8(offset + 1);\n  return result;\n};\n\nParamParse.parseResponseParam = function parseResponseParam(dataBuf, offset, paramLen) {\n  const result = [];\n  result[0] = dataBuf.readInt32BE(offset);\n  if (paramLen > 4) {\n    result[1] = dataBuf.toString('latin1', offset + 4, offset + paramLen);\n  } else {\n    result[1] = '';\n  }\n  return result;\n};\n\nParamParse.parseDeliveryMode = function parseDeliveryMode(dataBuf, offset) {\n  const delmode = dataBuf.readUInt8(offset);\n  const lookup = lutDelModeToEnum.value.get(delmode);\n  return lookup !== undefined ? lookup : MessageLib.MessageDeliveryModeType.DIRECT;\n};\n\nParamParse.encDeliveryMode = function encDeliveryMode(delmode) {\n  const lut = lutEnumToDelMode.value;\n  const lookup = lut.get(delmode);\n  return int8ToStr(lookup !== undefined ? lookup : MessageLib.MessageDeliveryModeType.DIRECT);\n};\n\nParamParse.parseContentSummary = function parseContentSummary(dataBuf, offset, length) {\n  const elements = [];\n  let cumulativeSize = 0;\n  let pos = offset;\n\n  while (pos < offset + length) {\n    const byte1 = dataBuf.readUInt8(pos);\n    const elementType = Bits.get(byte1, 4, 4);\n    const elementDeclaredLength = Bits.get(byte1, 0, 4);\n    let elementSize = 0;\n    switch (elementDeclaredLength) {\n      case 2:\n        elementSize = dataBuf.readUInt8(pos + 1);\n        break;\n      case 3:\n        elementSize = dataBuf.readUInt16BE(pos + 1);\n        break;\n      case 4:\n        elementSize = dataBuf.readUIntBE(pos + 1, 3);\n        break;\n      case 5:\n        elementSize = dataBuf.readInt32BE(pos + 1);\n        break;\n      default:\n        // Allow 1 and continue;\n        break;\n    }\n\n    if (elementDeclaredLength === 0) {\n      LOG_ERROR('Invalid content summary parameter - pos not advancing');\n      return null;\n    }\n    pos += elementDeclaredLength;\n\n    const cst = ContentSummaryDecodeMap[elementType];\n    if (cst === undefined) {\n      LOG_ERROR(`Unhandled element type ${elementType}`);\n    }\n    const currentElement = new ContentSummaryElement(cst, cumulativeSize, elementSize);\n    elements.push(currentElement);\n    cumulativeSize += elementSize;\n  } // end while loop\n  return elements;\n};\n\nParamParse.encContentSummary = function encContentSummary(contentSummaryArr) {\n  const messageElementDescriptions = [];\n  for (let i = 0, n = contentSummaryArr.length; i < n; ++i) {\n    // a ContentSummaryElement\n    const currentContentSummary = contentSummaryArr[i];\n    let currentSizeStr = '';\n    let firstByte = Bits.set(0, currentContentSummary.type, 4, 4);\n    if (currentContentSummary.length <= 255) {\n      // element length: 2\n      firstByte = Bits.set(firstByte, 2, 0, 4);\n      currentSizeStr = int8ToStr(currentContentSummary.length);\n    } else if (currentContentSummary.length <= 65535) {\n      firstByte = Bits.set(firstByte, 3, 0, 4);\n      currentSizeStr = int16ToStr(currentContentSummary.length);\n    } else if (currentContentSummary.length <= 16777215) {\n      firstByte = Bits.set(firstByte, 4, 0, 4);\n      currentSizeStr = int24ToStr(currentContentSummary.length);\n    } else {\n      firstByte = Bits.set(firstByte, 5, 0, 4);\n      currentSizeStr = int32ToStr(currentContentSummary.length);\n    }\n    messageElementDescriptions.push(int8ToStr(firstByte));\n    messageElementDescriptions.push(currentSizeStr);\n  }\n  return messageElementDescriptions.join('');\n};\n\nParamParse.encodeSMFParam = function encodeSMFParam(uh, paramtype, value) {\n  if (value === undefined) {\n    return uhTypeMap[uh][paramtype] + lenMap[2];\n  }\n  const len = value.length;\n  if (len <= 253) {\n    return uhTypeMap[uh][paramtype] + lenMap[len + 2] + value;\n  }\n  return uhTypeMap[uh][paramtype] + lenMap[0] + int32ToStr(len + 6) + value;\n};\n\n\nParamParse.encodeSMFExtendedParam = function encodeSMFExtendedParam(uh, paramtype, value) {\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, (uh ? 1 : 0), 7, 1);\n  const length = ((value === undefined || value === null) ? 0 : value.length);\n  // Bits 1-3 of an extended param (not named in the spec, lengthMode here)\n  // can indicate value lengths 0-8 bytes, or 1-2 byte variable length.\n  const lengthModeMap = { 0: 0, 1: 1, 2: 2, 4: 3, 8: 4 };\n  let lengthMode = 0;\n  let lengthString = '';\n  // EsLint made me do it.\n  if (Object.prototype.hasOwnProperty.call(lengthModeMap, length)) {\n    lengthMode = lengthModeMap[length];\n  } else if (length < 253) {\n    lengthMode = 5;\n    lengthString = int8ToStr(length + 3);\n  } else if (length < 256 * 256 - 4) {\n    lengthMode = 6;\n    lengthString = int16ToStr(length + 4);\n  } else {\n    LOG_ERROR(`Extended parameter type ${paramtype} is too long (${length} bytes) `);\n    throw new OperationError(`Extended parameter (${paramtype}) over the 2^16 byte limit`,\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n\n  byte1 = Bits.set(byte1, lengthMode, 4, 3);\n  byte1 = Bits.set(byte1, (paramtype >> 8), 0, 4);\n  const byte2 = paramtype & 0xFF;\n  return int8ToStr(byte1) + int8ToStr(byte2) + lengthString + value;\n};\n\nParamParse.encLightSMFParam = function encLightSMFParam(uh, paramtype, value) {\n  return lightMap[uh][paramtype][value.length] + value;\n};\n\nmodule.exports.ParamParse = ParamParse;\n","const Long = require('long');\nconst {\n  LOG_DEBUG,\n  LOG_ERROR,\n  LOG_INFO,\n  LOG_TRACE,\n} = require('solclient-log');\nconst { Base64, Bits } = require('solclient-convert');\nconst { ParamParse } = require('./param-parse');\nconst { SMFHeader } = require('../message-objects');\nconst { SMFParameterType } = require('../smf-parameter-types');\n\nconst {\n  decode: base64Decode,\n} = Base64;\nconst {\n  get: bits,\n} = Bits;\n\nfunction isSMFHeaderAvailable(dataBuf, offset) {\n  const remaining = dataBuf.length - offset;\n  if (remaining < 12) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction isSMFHeaderValid(dataBuf, offset) {\n  if (!isSMFHeaderAvailable(dataBuf, offset)) {\n    return false;\n  }\n  const version = dataBuf.readUInt8(offset) & 0x7;\n  if (version !== 3) {\n    LOG_ERROR(`Invalid smf version in smf header, version=${version}`);\n    return false;\n  }\n  return true;\n}\n\nfunction isSMFAvailable(dataBuf, offset) {\n  if (!isSMFHeaderValid(dataBuf, offset)) {\n    return false;\n  }\n  const remaining = dataBuf.length - offset;\n  const totalLen = dataBuf.readUInt32BE(offset + 8);\n  return (totalLen <= remaining);\n}\n\n/**\n * Parse the Extended Parameters from an Extended Type Stream.\n * See section \"4.2.4 Extended Parameter Types\" in the SMF spec.\n * @param {SMFHeader} smfHeader The SMF header to add the extended parameters to.\n * @param {Buffer} dataBuf The binary data to parse\n * @param {Number} offset The offset in the data to begin parsing (ETS payload)\n * @param {Number} streamLen ETS length\n * @returns {Boolean} false if framing is lost, true otherwise.\n * @private\n */\nfunction parseSMFExtendedStream(smfHeader, dataBuf, offset, streamLen) {\n  /* eslint-disable no-unused-vars */\n  let pos = offset;\n  while (pos < offset + streamLen) {\n    if (pos + 2 > offset + streamLen) {\n      LOG_ERROR('Extended parameter stream had padding inside.');\n      break;\n    }\n\n    // The first 2 bytes of Extended Parameters is fixed (MSB order):\n    // 1 bit UH\n    // 3 bits length mode selector (0-, 1-, 2-, 4-, 8-byte, or variable)\n    // 12 bits Type\n    const byte1 = dataBuf.readUInt8(pos);\n    const byte2 = dataBuf.readUInt8(pos + 1);\n    const pUH = bits(byte1, 7, 1);\n    const lengthMode = bits(byte1, 4, 3);\n    const type = (bits(byte1, 0, 4) << 8) + byte2; //FIGURE OUT WHAT bits does\n    pos += 2;\n    const lengthModeMap = { 0: 0, 1: 1, 2: 2, 3: 4, 4: 8 };\n    let valueLen = 0;\n    // EsLint made me do it\n    if (Object.prototype.hasOwnProperty.call(lengthModeMap, lengthMode)) {\n      valueLen = lengthModeMap[lengthMode];\n    } else if (lengthMode === 5) {\n      // 1-byte variable length value\n      valueLen = dataBuf.readUInt8(pos) - 3;\n      pos++;\n    } else if (lengthMode === 6) {\n      // 2-byte variable length value\n      valueLen = dataBuf.readUInt16BE(pos) - 4;\n      pos += 2;\n    } else {\n      LOG_ERROR(`Invalid length mode ${lengthMode} in Extended Parameter type ${type}`);\n      // We must be reading garbage, disconnect:\n      return false;\n    }\n\n    switch (type) {\n      case SMFParameterType.AD_REDELIVERY_COUNT:\n        smfHeader.pm_ad_redeliveryCount = dataBuf.readUInt32BE(pos);\n        break;\n      case SMFParameterType.AD_SPOOLER_UNIQUE_ID:\n        smfHeader.pm_ad_spooler_unique_id = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                          dataBuf.readUInt32BE(pos),\n                                                          true);\n        break;\n      case SMFParameterType.AD_ACK_MESSAGE_ID:\n        smfHeader.pm_ad_local_spooler_message_id = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                                 dataBuf.readUInt32BE(pos),\n                                                                 true);\n        break;\n      case SMFParameterType.AD_REPL_MATE_ACK_MSGID:\n        smfHeader.pm_ad_replication_mate_ack_message_id =\n           Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                         dataBuf.readUInt32BE(pos),\n                         true);\n        break;\n      default:\n        if (pUH === 0) {\n          LOG_TRACE('Dropping unrecognised extended parameter ' +\n                    `type ${type} value length ${valueLen} UH ${pUH}`);\n        } else {\n          smfHeader.discardMessage = true;\n          LOG_TRACE('Dropping whole message due to unrecognised extended parameter ' +\n                    `type ${type} value length ${valueLen} UH ${pUH}`);\n        }\n        break;\n    }\n    pos += valueLen;\n  }\n  if (pos > offset + streamLen) {\n    LOG_ERROR(`Last extended parameter ran beyond extended stream length by ${pos - (offset + streamLen)}.`);\n  }\n  return true;\n  /* eslint-enable no-unused-vars */\n}\n\n/**\n * Parse SMF in the given data buffer at the supplied offset.\n * @param {Buffer} dataBuf The binary data to parse\n * @param {Number} offset The offset in the data to begin parsing\n * @param {Boolean} readHeaderOnly If true, stop parsing at end of header\n * @returns {SMFHeader|null} The SMF header, if possible\n * @private\n */\nfunction parseSMFAt(dataBuf, offset, readHeaderOnly = false) {\n  if (!isSMFHeaderValid(dataBuf, offset)) {\n    LOG_DEBUG('Valid SMF header not available');\n    return null;\n  }\n  let pos = offset;\n\n  // Reading fixed header block (12 bytes)\n  const word1 = dataBuf.readUInt32BE(pos);\n  const headerLen = dataBuf.readUInt32BE(pos + 4);\n  const word3 = dataBuf.readUInt32BE(pos + 8);\n\n  const smfHeader = new SMFHeader();\n  smfHeader.smf_di = bits(word1, 31, 1);\n  smfHeader.smf_elidingEligible = bits(word1, 30, 1);\n  smfHeader.smf_dto = bits(word1, 29, 1);\n  smfHeader.smf_adf = bits(word1, 28, 1);\n  smfHeader.smf_deadMessageQueueEligible = bits(word1, 27, 1);\n  smfHeader.smf_version = bits(word1, 24, 3);\n  smfHeader.smf_uh = bits(word1, 22, 2);\n  smfHeader.smf_protocol = bits(word1, 16, 6);\n  smfHeader.smf_priority = bits(word1, 12, 4);\n  smfHeader.smf_ttl = bits(word1, 0, 8);\n\n  const payloadLen = word3 - headerLen;\n  if (payloadLen < 0) {\n    LOG_ERROR('SMF parse error: lost framing');\n    return null; // SMF parse error: lost framing\n  }\n  smfHeader.setMessageSizes(headerLen, payloadLen);\n  if (readHeaderOnly) {\n    return smfHeader;\n  }\n  pos += 12;\n\n  // Reading variable-length params\n  const end = offset + headerLen;\n  while (pos < end) {\n    const paramByte1 = dataBuf.readUInt8(pos);\n    ++pos;\n\n    const prmUh = bits(paramByte1, 6, 2);\n    const paramIsLightweight = (bits(paramByte1, 5, 1) !== 0);\n    if (paramIsLightweight) {\n      // LIGHTWEIGHT param\n      const lwpType = bits(paramByte1, 2, 3);\n      const lwpLen = bits(paramByte1, 0, 2) + 1;\n      const lwpValueLen = lwpLen - 1;\n      if (lwpLen <= 0) {\n        LOG_ERROR('Invalid lightweight parameter length');\n        return null; // Invalid parameter\n      }\n\n      switch (lwpType) {\n        case SMFParameterType.LIGHT_CORRELATION:\n          smfHeader.pm_corrtag = dataBuf.readUIntBE(pos, 3);\n          break;\n        case SMFParameterType.LIGHT_TOPIC_NAME_OFFSET:\n          {\n            const parsedQueueOffsets = ParamParse.parseTopicQueueOffsets(dataBuf, pos);\n            smfHeader.pm_queue_offset = parsedQueueOffsets[0];\n            smfHeader.pm_queue_len = parsedQueueOffsets[1];\n            break;\n          }\n        case SMFParameterType.LIGHT_QUEUE_NAME_OFFSET:\n          {\n            const parsedTopicOffsets = ParamParse.parseTopicQueueOffsets(dataBuf, pos);\n            smfHeader.pm_topic_offset = parsedTopicOffsets[0];\n            smfHeader.pm_topic_len = parsedTopicOffsets[1];\n            break;\n          }\n        case SMFParameterType.LIGHT_ACK_IMMEDIATELY:\n          smfHeader.pm_ad_ackimm = !!dataBuf.readUInt8(pos);\n          break;\n        default:\n          if (prmUh === 0) {\n            // Ignore, and silently discard the parameter.\n            LOG_TRACE(`Unhandled LIGHTWEIGHT parameter type: ${lwpType} UH is ${prmUh} discarding parameter.`);\n          } else {\n            // Ignore, and silently discard the entire message.\n            LOG_TRACE(`Unhandled LIGHTWEIGHT parameter type: ${lwpType} UH is ${prmUh} discarding message.`);\n            smfHeader.discardMessage = true;\n          }\n          break;\n      }\n      pos += lwpValueLen;\n    } else {\n      // REGULAR encoded param (including breakout for Extended Type Stream)\n      const pStart = pos;\n      const pType = bits(paramByte1, 0, 5);\n      if (pType === 0) {\n        break; // PADDING (break while: header finished)\n      }\n\n      let pLen = dataBuf.readUInt8(pos);\n      pos++;\n      let pValueLen;\n      if (pLen === 0) {\n        // extended-length parameter (32-bit)\n        // Works for Extended Parameters too.\n        pLen = dataBuf.readUInt32BE(pos);\n        pos += 4;\n        pValueLen = pLen - 6;\n      } else {\n        pValueLen = pLen - 2;\n      }\n\n      if (pLen <= 0) {\n        LOG_ERROR(`Invalid regular parameter length ${pLen}/${pValueLen\n                  } with suspect type ${SMFParameterType.describe(pType)} at parameter at position ${pStart}`);\n        return null; // Invalid parameter\n      }\n\n      switch (pType) {\n        case SMFParameterType.PUBLISHER_ID:\n          smfHeader.pm_ad_publisher_id = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                       dataBuf.readUInt32BE(pos),\n                                                       true);\n          break;\n        case SMFParameterType.PUBLISHER_MSGID:\n          smfHeader.pm_ad_publishermsgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                         dataBuf.readUInt32BE(pos),\n                                                         true);\n          break;\n        case SMFParameterType.MESSAGEPRIORITY:\n          smfHeader.pm_msg_priority = dataBuf.readUInt8(pos);\n          break;\n        case SMFParameterType.USERDATA:\n          smfHeader.pm_userdata = dataBuf.toString('latin1', pos, pos + pValueLen);\n          break;\n        case SMFParameterType.USERNAME:\n          // only useful on API -> router\n          smfHeader.pm_username = base64Decode(dataBuf.toString('latin1', pos, pos + pValueLen));\n          break;\n        case SMFParameterType.PASSWORD:\n          // only useful on API -> router\n          smfHeader.pm_password = base64Decode(dataBuf.toString('latin1', pos, pos + pValueLen));\n          break;\n        case SMFParameterType.RESPONSE:\n          {\n            const parsedResponse = ParamParse.parseResponseParam(dataBuf, pos, pValueLen); //CHECK\n            smfHeader.pm_respcode = parsedResponse[0];\n            smfHeader.pm_respstr = parsedResponse[1];\n            break;\n          }\n        case SMFParameterType.SUB_ID_LIST:\n        case SMFParameterType.GENERIC_ATTACHMENT:\n        case SMFParameterType.BINARY_ATTACHMENT:\n          LOG_INFO('Skipping deprecated parameter type');\n          // deprecated\n          break;\n        case SMFParameterType.DELIVERY_MODE:\n          // DeliveryMode is DIRECT unless the AD flag is set. The\n          // deliveryMode parameter (and all other guaranteed messaging\n          // parameters may be present in demoted messages reflecting how\n          // the message was published.\n          // IF ever solClientJS must support the horror that is cut-through\n          // persistence, then we must defer setting deliveryMode back to\n          // DIRECT until the session decides whether it is a true direct\n          // message or a cut-through direct message.  But until that is\n          // forced upon us, the cleanest place to set deliveryMode is always\n          // here in the parser.\n          if (smfHeader.smf_adf) {\n            smfHeader.pm_deliverymode = ParamParse.parseDeliveryMode(dataBuf, pos);\n          }\n          break;\n        case SMFParameterType.ASSURED_MESSAGE_ID:\n          smfHeader.pm_ad_msgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                dataBuf.readUInt32BE(pos),\n                                                true);\n          break;\n        case SMFParameterType.ASSURED_PREVMESSAGE_ID:\n          smfHeader.pm_ad_prevmsgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                    dataBuf.readUInt32BE(pos),\n                                                    true);\n          break;\n        case SMFParameterType.ASSURED_REDELIVERED_FLAG:\n          smfHeader.pm_ad_redelflag = true;\n          break;\n        case SMFParameterType.AD_TIMETOLIVE:\n          smfHeader.pm_ad_ttl = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                              dataBuf.readUInt32BE(pos),\n                                              true);\n          break;\n        case SMFParameterType.AD_TOPICSEQUENCE_NUMBER:\n          smfHeader.pm_ad_topicSequenceNumber = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                              dataBuf.readUInt32BE(pos),\n                                                              true);\n          break;\n        case SMFParameterType.MESSAGE_CONTENT_SUMMARY:\n          {\n            const contentSummary = ParamParse.parseContentSummary(dataBuf, pos, pValueLen);\n            if (!contentSummary) {\n              LOG_ERROR(`Invalid message content summary at ${pos}, len ${pValueLen}`);\n              return false; // invalid message content summary parameter\n            }\n            smfHeader.pm_content_summary = contentSummary;\n            break;\n          }\n        case SMFParameterType.ASSURED_FLOWID:\n          smfHeader.pm_ad_flowid = dataBuf.readUInt32BE(pos);\n          break;\n        case SMFParameterType.TR_TOPICNAME:\n          // copy bytes. Don't strip null terminator\n          smfHeader.pm_tr_topicname_bytes = dataBuf.toString('latin1', pos, pos + pValueLen);\n          break;\n        case SMFParameterType.AD_FLOWREDELIVERED_FLAG:\n          smfHeader.pm_ad_flowredelflag = true;\n          break;\n        case SMFParameterType.EXTENDED_TYPE_STREAM: {\n          const extSuccess = parseSMFExtendedStream(smfHeader, dataBuf, pos, pValueLen);\n          if (!extSuccess) { return null; }\n          break;\n        }\n        default:\n          if (prmUh === 0) {\n            // Ignore, and silently discard the parameter.\n            LOG_TRACE(`Unhandled SMF parameter type: ${pType} UH is ${prmUh} discarding parameter.`);\n          } else {\n            // Ignore, and silently discard the entire message.\n            LOG_TRACE(`Unhandled SMF parameter type: ${pType} UH is ${prmUh} discarding message.`);\n            smfHeader.discardMessage = true;\n          }\n          break;\n      } // end param type switch block\n\n      pos += pValueLen;\n    } // end (regular param)\n  } // end while\n\n  return smfHeader;\n}\n\nconst ParseSMF = {\n  isSMFHeaderAvailable,\n  isSMFHeaderValid,\n  isSMFAvailable,\n  parseSMFAt,\n};\n\nmodule.exports.ParseSMF = ParseSMF;\n","const MessageLib = require('solclient-message');\nconst { BidiMap } = require('solclient-eskit');\n\nclass PriorityUserCosMap extends BidiMap {\n  constructor() {\n    super([MessageLib.MessageUserCosType.COS1, 0],\n          [MessageLib.MessageUserCosType.COS2, 1],\n          [MessageLib.MessageUserCosType.COS3, 2]);\n  }\n}\n\nmodule.exports.PriorityUserCosMap = PriorityUserCosMap;\n","const { Bits, Convert } = require('solclient-convert');\nconst { LOG_DEBUG, LOG_TRACE } = require('solclient-log');\nconst { SMFSMPMessageType } = require('../smf-smp-message-types');\nconst { SMPMessage } = require('../message-objects');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr,\n  int32ToStr,\n} = Convert;\n\nconst SMP = {};\nSMP.parseSMPAt = function parseSMPAt(dataBuf, offset) {\n  if ((offset + 6) > dataBuf.length) {\n    // not enough data\n    LOG_DEBUG('Not enough data to read an SMP message.');\n    return false;\n  }\n  let pos = offset;\n  const onebyte = dataBuf.readUInt8(pos);\n  pos++;\n\n  // var msgUh = bits(onebyte, 7, 1);\n  const msgType = bits(onebyte, 0, 7);\n  const smpMsg = new SMPMessage();\n\n  if (!(msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n        msgType === SMFSMPMessageType.REMSUBSCRIPTION ||\n        msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n        msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION\n  )) {\n    LOG_DEBUG(`Found unsupported SMP messageType ${msgType}`);\n    return false; // unsupported type\n  }\n\n  LOG_TRACE('SMP.parseSMPAt called, ', dataBuf.toString('latin1'));\n\n  const msgLength = dataBuf.readUInt32BE(pos);\n  pos += 4;\n  if ((offset + msgLength) > dataBuf.length) {\n    // not enough data\n    LOG_DEBUG(`Invalid declared length of ${msgLength}, unable to read SMP message.`);\n    return false;\n  }\n  const msgFlags = dataBuf.readUInt8(pos);\n  pos++;\n\n  smpMsg.msgType = msgType;\n  smpMsg.smpFlags = msgFlags;\n  if (msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n    msgType === SMFSMPMessageType.REMSUBSCRIPTION) {\n    // 6 is the base len (msgLength - 6)\n    smpMsg.encodedUtf8Subscription = dataBuf.toString('latin1', pos, pos + msgLength - 6);\n  } else {\n    const queueLength = dataBuf.readUInt8(pos);\n    pos++;\n    smpMsg.encodedUtf8QueueName = dataBuf.toString('latin1', pos, pos + queueLength);\n    pos += queueLength;\n    const subsLength = dataBuf.readUInt8(pos);\n    pos++;\n    smpMsg.encodedUtf8Subscription = dataBuf.toString('latin1', pos, pos + subsLength);\n    pos += subsLength;\n  }\n  return smpMsg;\n};\n\nSMP.encSmp = function encSmp(smpMsg) {\n  if (!(smpMsg.msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.REMSUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION\n  )) {\n    LOG_DEBUG(`Unsupported SMP message for encoding: ${smpMsg}`);\n    return false;\n  }\n\n  LOG_TRACE('encSmp called.', smpMsg);\n  const data = [];\n  let onebyte = 0;\n  onebyte = setBits(onebyte, 1, 7, 1);\n  onebyte = setBits(onebyte, smpMsg.msgType, 0, 7);\n  data.push(int8ToStr(onebyte));\n  let msgLength = 6 + smpMsg.encodedUtf8Subscription.length;\n  if (smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n    smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION) {\n    msgLength += 2 + smpMsg.encodedUtf8QueueName.length; //both strings have a 1-byte length.\n  }\n  data.push(int32ToStr(msgLength)); // length\n  data.push(int8ToStr(smpMsg.smpFlags));\n  if (smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n    smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION) {\n    //TODO: validate the lengths are < 251 including null termination!\n    // Somewhere else though.\n    data.push(int8ToStr(smpMsg.encodedUtf8QueueName.length));\n    data.push(smpMsg.encodedUtf8QueueName);\n    data.push(int8ToStr(smpMsg.encodedUtf8Subscription.length));\n    data.push(smpMsg.encodedUtf8Subscription);\n  } else {\n    data.push(smpMsg.encodedUtf8Subscription);\n  }\n  return data.join('');\n};\n\nmodule.exports.SMP = SMP;\n","const { Bits, Convert } = require('solclient-convert');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SMFTransportSessionMessageType } = require('../smf-transport-session-message-types');\nconst { TransportSMFMessage } = require('../message-objects');\n\nconst {\n  get: bits,\n} = Bits;\nconst {\n  int16ToStr,\n  int32ToStr,\n} = Convert;\nconst { lazyValue } = Lazy;\n\n// ========== TSSMF ==========\nfunction remains(dataBuf, offset) {\n  return dataBuf.length - offset;\n}\n\nfunction parseTsSmfHdrAt(dataBuf, offset, smfheader) {\n  let pos = offset;\n  if (remains(dataBuf, pos) < 10) {\n    LOG_ERROR('TsSmf parse failed: not enough data, expected at least 10B');\n    return false;\n  }\n\n  const transportSMFMessage = new TransportSMFMessage();\n  transportSMFMessage.smfHeader = smfheader;\n  const twobyte = dataBuf.readUInt16BE(pos);\n  pos += 2;\n  transportSMFMessage.uh = bits(twobyte, 15, 1);\n  transportSMFMessage.messageType = bits(twobyte, 8, 7);\n  const tsHdrLen = bits(twobyte, 0, 8);\n  transportSMFMessage.tsHeaderLength = tsHdrLen;\n  transportSMFMessage.sessionId = dataBuf.toString('latin1', pos, pos + 8);\n  pos += 8;\n\n  if (transportSMFMessage.messageType ===\n      SMFTransportSessionMessageType.CREATE_RESP) {\n    // parse extra chunk: routerTag\n    const rtrTagLen = dataBuf.readUInt8(pos);\n    pos++;\n    if (remains(dataBuf, pos) < rtrTagLen) {\n      LOG_ERROR(`TsSmf parse failed: not enough data for RouterTag, expected ${rtrTagLen}B`);\n      return false;\n    }\n    transportSMFMessage.routerTag = dataBuf.toString('latin1', pos, pos + rtrTagLen);\n    pos += rtrTagLen;\n  }\n\n  // FFWD any remaining TsSmf padding?\n  pos = offset + tsHdrLen;\n\n  // Length of encapsulated message payload:\n  // the SMF msg payload length - bytes consumed in TsSmf\n\n  if (smfheader.payloadLength === 0xffffffff) {\n    // special \"streaming\" unknown-length header\n    transportSMFMessage.payloadLength = smfheader.payloadLength;\n  } else {\n    transportSMFMessage.payloadLength = smfheader.payloadLength - tsHdrLen;\n  }\n  return transportSMFMessage; // Header with no payload field\n}\n\n// Generates an SMF header up to, but not including the the total length\n// This is fixed for all client generated transport session messages\nconst tsHeaderPreLength = lazyValue(() => (\n  int32ToStr(0x03140001) +  // SMF version, TransportSession, TTL\n  int32ToStr(12)            // Header length\n));\n\nconst tsDestroyHeaderPreSid = lazyValue(() => (\n  tsHeaderPreLength.value + // Header up to the message length field\n  int32ToStr(22) +          // Total length\n  int16ToStr(0x820a)        // msgType(destroy), length\n));\n\nconst tsCreateHeader = lazyValue(() => (\n  tsHeaderPreLength.value + // Header up to the message length field\n  int32ToStr(22) +          // Total length\n  int16ToStr(0x800a) +      // msgType(create), length\n  int32ToStr(0) +           // Session ID (first half)\n  int32ToStr(0)             // Session ID (second half)\n));\n\nconst tsDataTokenPreSid = lazyValue(() => (\n  int32ToStr(0x03940001) +\n  int32ToStr(12) +\n  int32ToStr(22) +\n  int16ToStr(0x850a)\n));\n\nconst tsDataStreamTokenPreSid = lazyValue(() => (\n  int32ToStr(0x03940001) +\n  int32ToStr(12) +\n  int32ToStr(24) +\n  int16ToStr(0x860c)\n));\n\n// Generate a full Transport Session Create header\nfunction genTsCreateHeader() {\n  return tsCreateHeader.value;\n}\n\n// Generate a full Transport Session Destroy header\nfunction genTsDestroyHeader(sid) {\n  return (\n    tsDestroyHeaderPreSid.value +\n    sid                       // Session ID\n  );\n}\n\n// Generate a data token message\nfunction genTsDataTokenMsg(sid) {\n  return (\n    tsDataTokenPreSid.value +\n    sid\n  );\n}\n\n// Generate a STREAMING data token message\nfunction genTsDataStreamTokenMsg(sid, paddingBytes) {\n  return (\n    tsDataStreamTokenPreSid.value +\n    sid +\n    ((paddingBytes && paddingBytes > 0) ? int16ToStr(paddingBytes) : int16ToStr(0x0000))\n  );\n}\n\nfunction genTsDataMsgHeaderParts(sid) {\n  return [\n    (int32ToStr(0x03940001) + int32ToStr(12)),\n    (int16ToStr(0x840a) + sid),\n  ];\n}\n\nfunction parseTsSmfMsgAt(dataBuf, offset, smfheader) {\n  const transportSMFMessage = parseTsSmfHdrAt(dataBuf, offset, smfheader);\n  if (!transportSMFMessage) {\n    return null;\n  }\n\n    // need to FF to pos\n  const pos = offset + transportSMFMessage.tsHeaderLength;\n\n    // Length of encapsulated message payload:\n    // the SMF msg payload length - bytes consumed in TsSmf\n  if (remains(dataBuf, pos) < transportSMFMessage.payloadLength) {\n    LOG_ERROR(`Couldn't read full encapsulated TsSmf payload, expected ${transportSMFMessage.payloadLength}B`);\n    return null;\n  }\n\n  transportSMFMessage.payload =\n                            dataBuf.slice(pos, pos + transportSMFMessage.payloadLength);\n  return transportSMFMessage;\n}\n\nconst Transport = {\n  genTsCreateHeader,\n  genTsDestroyHeader,\n  genTsDataTokenMsg,\n  genTsDataStreamTokenMsg,\n  genTsDataMsgHeaderParts,\n  parseTsSmfHdrAt,\n  parseTsSmfMsgAt,\n};\n\nmodule.exports.Transport = Transport;\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { BaseMessage } = require('./base-message');\nconst { Convert, Long } = require('solclient-convert');\nconst { DestinationType } = require('solclient-destination');\nconst { LOG_TRACE } = require('solclient-log');\nconst { OperationError } = require('solclient-error');\nconst { QueueAccessType,\n        QueueDiscardBehavior } = require('solclient-queue');\nconst { QueuePermissions, QueueType } = require('solclient-queue');\nconst { ReplayStartType } = require('solclient-replaystart');\nconst { SMFAdProtocolMessageType } = require('../smf-adprotocol-message-types');\nconst { SMFAdProtocolParam } = require('../smf-adprotocol-params');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMFUH } = require('./smf-uh');\nconst { StringUtils } = require('solclient-util');\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\nconst {\n  strToInt8,\n  strToInt16,\n  strToUInt32,\n  strToUInt64,\n} = Convert;\n\nconst bUInt8 = BufferImpl.prototype.readUInt8;\nconst bUInt16BE = BufferImpl.prototype.readUInt16BE;\nconst bUInt32BE = BufferImpl.prototype.readUInt32BE;\nconst bUInt64BE = function bUInt64BE(pos) { // invoked with \"this\" as the buffer.\n  return Long.fromBits(this.readUInt32BE(pos + 4), this.readUInt32BE(pos), true);\n};\n\nconst {\n  nullTerminate,\n  stripNullTerminate,\n} = StringUtils;\n\n// QUEUENAME/TOPICNAME\nconst EndpointTypeToParam = {\n  [DestinationType.TOPIC]: SMFAdProtocolParam.DTENAME,\n  [DestinationType.QUEUE]: SMFAdProtocolParam.QUEUENAME,\n};\n\n//Same as above, but for CREATE.\nconst QueueDescriptorTypeToParam = {\n  [QueueType.TOPIC_ENDPOINT]: SMFAdProtocolParam.DTENAME,\n  [QueueType.QUEUE]:          SMFAdProtocolParam.QUEUENAME,\n};\n\nconst QUEUE_PERMISSIONS_TO_BITS = {\n  [QueuePermissions.NONE]:         0x0000,\n  [QueuePermissions.READ_ONLY]:    0x0001,\n  [QueuePermissions.CONSUME]:      0x0003,\n  [QueuePermissions.MODIFY_TOPIC]: 0x0007,\n  [QueuePermissions.DELETE]:       0x000f,\n};\n\nconst ACCESS_TYPE_INT_TO_ENUM = {\n  0x01: QueueAccessType.EXCLUSIVE,\n  0x02: QueueAccessType.NONEXCLUSIVE,\n};\n\nconst ACCESS_TYPE_ENUM_TO_BITS = {\n  [QueueAccessType.EXCLUSIVE]:    0x01,\n  [QueueAccessType.NONEXCLUSIVE]: 0x02,\n};\n\nconst DISCARD_ENUM_TO_VALUE = {\n  [QueueDiscardBehavior.NOTIFY_SENDER_OFF]: 0x01,\n  [QueueDiscardBehavior.NOTIFY_SENDER_ON]:  0x02,\n};\n\nfunction addQueueProperties(message, queueProperties, skipAccessType = false) {\n  if (!queueProperties) {\n    return;\n  }\n  const {\n    accessType,\n    discardBehavior,\n    maxMessageRedelivery,\n    maxMessageSize,\n    permissions,\n    quotaMB,\n    respectsTTL,\n  } = queueProperties;\n\n\n  // [AssuredCtrl AllOthersPermissions Parameter]\n  if (permissions && (QUEUE_PERMISSIONS_TO_BITS[permissions] !== undefined)) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_ALLOTHER_PERMISSION,\n      QUEUE_PERMISSIONS_TO_BITS[permissions]\n    ));\n  }\n\n  //AccessType\n  if (!skipAccessType &&\n    accessType !== undefined &&\n    ACCESS_TYPE_ENUM_TO_BITS[accessType] !== undefined\n  ) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.ACCESSTYPE,\n      ACCESS_TYPE_ENUM_TO_BITS[accessType]\n    ));\n  }\n\n  // [AssuredCtrl EndpointQuotaMB Parameter]\n  if (quotaMB !== null && quotaMB !== undefined) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_QUOTA,\n      quotaMB\n    ));\n  }\n\n  // [AssuredCtrl EndpointMaxMessageSize Parameter]\n  if (maxMessageSize !== undefined && maxMessageSize !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_MAX_MSGSIZE,\n      maxMessageSize\n    ));\n  }\n\n  let flags = 0x0000;\n  if (discardBehavior !== null && discardBehavior !== undefined) {\n    const discardBehaviorValue = DISCARD_ENUM_TO_VALUE[discardBehavior];\n    flags |= (discardBehaviorValue << 12);\n    // Omit cutThrough, << 14\n  }\n  if (flags /* is nonzero */) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_BEHAVIOUR,\n      flags\n    ));\n  }\n\n  if (maxMessageRedelivery !== undefined && maxMessageRedelivery !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.MAX_REDELIVERY,\n      maxMessageRedelivery\n    ));\n  }\n\n  if (respectsTTL !== undefined && respectsTTL !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_RESPECTS_TTL,\n      (respectsTTL ? 0x1 : 0x0)\n    ));\n  }\n}\n\n/**\n * @internal\n */\nclass AdProtocolMessage extends BaseMessage {\n  /**\n   * @constructor\n   * @param {SMFAdProtocolMessageType} [messageType=SMFAdProtocolMessageType.OPENPUBFLOW]\n   *  The type of message\n   * @param {Number} [version=3] The AD protocol version for the message\n   * @extends {BaseMessage}\n   * @memberof solace\n   * @internal\n   */\n  constructor(messageType = 0, version = 3) {\n    super(new SMFHeader(SMFProtocol.ADCTRL, 1));\n\n    // Field: msgtype\n    this.msgType = messageType;\n\n    // Field: version\n    this.version = version;\n  }\n\n  _readParameter(paramtype, decoder = null, bufMethod = null) {\n    const param = this.getParameter(paramtype);\n    if (param === undefined) return undefined;\n    if (bufMethod && param.getBuffer()) {\n      return bufMethod.call(param.getBuffer(), param.getBegin());\n    }\n    const value = param.getValue();\n    return decoder ? decoder(value) : value;\n  }\n\n  /**\n   * @returns {?QueueAccessType} The access type, if present\n   */\n  getAccessType() {\n    const param = this._readParameter(SMFAdProtocolParam.ACCESSTYPE, strToInt8, bUInt8);\n    return ACCESS_TYPE_INT_TO_ENUM[param];\n  }\n\n  /**\n   * @returns {?Boolean} The active flow indication, if present\n   */\n  getActiveFlow() {\n    return this._readParameter(SMFAdProtocolParam.ACTIVE_FLOW_INDICATION, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?QueueDiscardBehavior} The discard behavior for the endpoint, if present\n   */\n  getQueueDiscardBehavior() {\n    const param = this._readParameter(SMFAdProtocolParam.EP_BEHAVIOUR, strToInt16, bUInt16BE);\n    if (param === undefined) {\n      return undefined;\n    }\n    // Get NotifySender flag\n    const masked = (param & 0x3000) >> 12;\n    if (masked === DISCARD_ENUM_TO_VALUE[QueueDiscardBehavior.NOTIFY_SENDER_OFF]) {\n      return QueueDiscardBehavior.NOTIFY_SENDER_OFF;\n    } else if (masked === DISCARD_ENUM_TO_VALUE[QueueDiscardBehavior.NOTIFY_SENDER_ON]) {\n      return QueueDiscardBehavior.NOTIFY_SENDER_ON;\n    }\n    return undefined;\n  }\n  /**\n   * @returns {?Boolean} The Delivery Count setting of the endpoint, if present\n   */\n  getEndpointDeliveryCountSent() {\n    const param = this._readParameter(SMFAdProtocolParam.EP_BEHAVIOUR, strToInt16, bUInt16BE);\n    // Get NotifySender flag\n    const masked = (param & 0x0c00) >> 10;\n    switch (masked) {\n      case 0 :\n        return undefined;\n      case 1 :\n        return false;\n      case 2:\n        return true;\n      default:\n        //TODO: log: invalid flag value.\n        return undefined;\n    }\n  }\n\n  /**\n   * @returns {?Number} The endpoint ID, if present\n   */\n  getEndpointId() {\n    return this._readParameter(SMFAdProtocolParam.ENDPOINT_ID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Boolean} Whether endpoint respects TTL\n   */\n  getRespectsTTL() {\n    const value = this._readParameter(SMFAdProtocolParam.EP_RESPECTS_TTL, strToInt8, bUInt8);\n    if (value === undefined) {\n      LOG_TRACE('respectsTTL missing from response.');\n      return undefined;\n    }\n    LOG_TRACE(`respectsTTL present in response: ${value}`);\n    return !!value;\n  }\n\n  /**\n   * @returns {?String} The router-assigned flow name, if present\n   */\n  getFlowName() {\n    return this._readParameter(SMFAdProtocolParam.FLOWNAME, stripNullTerminate);\n  }\n\n  /**\n   * @returns {?Number} The router-assigned flow ID, if present\n   */\n  getFlowId() {\n    return this._readParameter(SMFAdProtocolParam.FLOWID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} The quota on the endpoint, if present\n   */\n  getQuota() {\n    return this._readParameter(SMFAdProtocolParam.EP_QUOTA, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} The maximum message size of the endpoint, if present\n   */\n  getMaxMsgSize() {\n    return this._readParameter(SMFAdProtocolParam.EP_MAX_MSGSIZE, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?String} The UTF-8 encoded, null terminated endpoint name\n   */\n  getTopicEndpointBytes() {\n    return this._readParameter(SMFAdProtocolParam.DTENAME);\n  }\n\n  /**\n   * @returns {?QueuePermissions} The granted permissions for the flow, if present\n   */\n  getGrantedPermissions() {\n    const permissions =\n      this._readParameter(SMFAdProtocolParam.GRANTED_PERMISSIONS, strToUInt32, bUInt32BE);\n    let result;\n    Object.keys(QUEUE_PERMISSIONS_TO_BITS).forEach((key) => {\n      if (QUEUE_PERMISSIONS_TO_BITS[key] === permissions) {\n        result = key;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * @returns {?QueuePermissions} The permissions for other users for the endpoint, if present\n   */\n  getAllOthersPermissions() {\n    const permissions =\n      this._readParameter(SMFAdProtocolParam.EP_ALLOTHER_PERMISSION, strToUInt32, bUInt32BE);\n    let result;\n    Object.keys(QUEUE_PERMISSIONS_TO_BITS).forEach((key) => {\n      if (QUEUE_PERMISSIONS_TO_BITS[key] === permissions) {\n        result = key;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * @returns {?Long} The last message ID acked, if present\n   */\n  getLastMsgIdAcked() {\n    return this._readParameter(SMFAdProtocolParam.LASTMSGIDACKED,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Long} The last message ID received, if present\n   */\n  getLastMsgIdReceived() {\n    return this._readParameter(SMFAdProtocolParam.LASTMSGIDRECEIVED,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Number} The publisher ID, if present\n   */\n  getPublisherId() {\n    return this._readParameter(SMFAdProtocolParam.PUBLISHER_ID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} Whether we want flow change notifications, if present\n   */\n  getWantFlowChangeNotify() {\n    return !!this._readParameter(SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The Window parameter, if present\n   */\n  getWindow() {\n    return this._readParameter(SMFAdProtocolParam.WINDOW, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The max redelivery parameter, if present\n   */\n  getMaxRedelivery() {\n    return this._readParameter(SMFAdProtocolParam.MAX_REDELIVERY, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The max unacked messages parameter, if present\n   */\n  getMaxUnackedMessages() {\n    return this._readParameter(SMFAdProtocolParam.MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW,\n                               strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Long} The endpointErrorId, if present\n   */\n  getEndpointErrorId() {\n    return this._readParameter(SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Long} The spoolerUniqueId, if present\n   */\n  getSpoolerUniqueId() {\n    return this._readParameter(SMFAdProtocolParam.SPOOLER_UNIQUE_ID,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * Creates a CLOSEPUBFLOW message\n   * @param {Number} flowId The publisher flow to close\n   * @param {Number} correlationTag The correlation tag for the request\n   * @returns {AdProtocolMessage} The newly created message\n   * @internal\n   * @static\n   */\n  static getCloseMessagePublisher(flowId,\n                                  correlationTag) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CLOSEPUBFLOW);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.FLOWID,\n                                          flowId));\n    return message;\n  }\n\n\n  /**\n   * Creates a CREATE message\n   * @param {solace.QueueDescriptor} queueDescriptor The endpoint descriptor for the create request\n   * @param {?solace.QueueProperties} queueProperties The properties for the create request\n   * @param {Number} correlationTag The correlation tag for the request\n   * @returns {AdProtocolMessage} The newly created message\n   * @internal\n   * @static\n   */\n  static getCreate(\n    queueDescriptor,\n    queueProperties,\n    correlationTag\n  ) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CREATE);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    /*\n      {AssuredCtrl QueueName|TopicEndpointName Parameter}\n      {AssuredCtrl Durability Parameter}\n      [AssuredCtrl AllOthersPermission Parameter]\n      [AssuredCtrl AccessType Parameter]\n    [AssuredCtrl EndpointQuotaMB Parameter]\n    [AssuredCtrl EndpointMaxMessageSize Parameter]\n    [AssuredCtrl qEndpointBehaviourFlags Parameter]\n    [AssuredCtrl MaxRedelivery Parameter]\n    */\n\n    // QueueName/TopicEndpointName : different param type for TE vs queue\n    const endpointTypeParam = QueueDescriptorTypeToParam[queueDescriptor.type];\n    if (endpointTypeParam === undefined) throw new OperationError('Unknown destination type');\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      endpointTypeParam,\n      nullTerminate(queueDescriptor.name)\n    ));\n\n\n    // [AssuredCtrl Durability Parameter]\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_DURABLE,\n      queueDescriptor.durable // better be...\n    ));\n\n\n    addQueueProperties(message, queueProperties);\n\n    return message;\n  }\n\n  /**\n   * Returns an AdProtocolMessage that describes a publisher open-flow request.\n   * @static\n   * @param {?Long} lastMsgIdAcked Last message ID acked, if re-opening\n   * @param {?Long} lastMsgIdSent Last message ID sent, if re-opening\n   * @param {Number} windowSize Desired window size\n   * @param {String} flowName Last flow name in use, if re-opening\n   * @param {Number} correlationTag Correlation tag for the request\n   * @returns {solace.AdProtocolMessage} The OPENPUBFLOW message\n   * @internal\n   */\n  static getOpenMessagePublisher(\n            lastMsgIdAcked,\n            lastMsgIdSent,\n            windowSize,\n            flowName,\n            correlationTag) {\n    const adMsg = new AdProtocolMessage(SMFAdProtocolMessageType.OPENPUBFLOW);\n\n    const smfHeader = adMsg.smfHeader;\n    smfHeader.pm_corrtag = correlationTag;\n\n    if (lastMsgIdAcked !== undefined) {\n      adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.LASTMSGIDACKED,\n                                          lastMsgIdAcked));\n    }\n    if (lastMsgIdSent !== undefined) {\n      adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.LASTMSGIDSENT,\n                                          lastMsgIdSent));\n    }\n\n    adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                        SMFAdProtocolParam.WINDOW,\n                                        windowSize));\n\n    adMsg.addParameter(new SMFParameter(SMFUH.IGNORE,\n                                        SMFAdProtocolParam.FLOWNAME,\n                                        flowName || ''));\n\n    LOG_TRACE(`Create open publisher: lastMsgIdAcked=${lastMsgIdAcked} lastMsgIdSent=${lastMsgIdSent} window=${windowSize} flowName=${flowName || '(null)'}`);\n\n    return adMsg;\n  }\n\n  /**\n   * Returns an AdProtocolMessage that describes a subscriber (MessageConsumer) bind request.\n   * @static\n   * @param {solace.QueueDescriptor} queueDescriptor The endpoint descriptor for the bind request\n   * @param {?solace.QueueProperties} queueProperties The properties for the bind request\n   * @param {solace.Destination} endpoint The endpoint for the bind request\n   * @param {?solace.Topic} topicSubscription The topic endpoint\n   * @param {String} correlationTag The correlation tag for the request\n   * @param {Number} windowSize The desired window size\n   * @param {Boolean} [noLocal=false] If true, local publisher messages are not delivered\n   * @param {Boolean} [wantFlowChangeUpdate] default is true if destination is a {solace.Queue}\n   * @param {Long} [lastMsgIdAcked=Long.UZERO] Last message ID acked, if re-binding\n   * @param {Long} [lastMsgIdReceived=Long.UZERO] Last message ID received, if re-binding\n   * @param {Boolean} [browser=false] If true, flow is a queue browser\n   * @param {ReplayStartLocation} [replayStartLocation=undefined] If set messages\n   *         are first retrieved from the replay log before live messages are received.\n   * @param {Long} [endpointErrorId=undefined] Endpoint Error ID identifying the flow\n   *         when rebinding.\n   * @returns {solace.AdProtocolMessage} The BIND message\n   * @internal\n   */\n  static getOpenMessageConsumer(queueDescriptor,\n                                queueProperties,\n                                endpoint,\n                                topicSubscription,\n                                correlationTag,\n                                windowSize,\n                                noLocal,\n                                wantFlowChangeUpdate,\n                                lastMsgIdAcked = Long.UZERO,\n                                lastMsgIdReceived = Long.UZERO,\n                                browser = false,\n                                replayStartLocation = undefined,\n                                endpointErrorId = undefined) {\n    /*\n    QUEUE FLOW                                      TE FLOW\n\n    {SMF Header, protocol=AssuredCtrl ttl=1}        {SMF Header, protocol=AssuredCtrl ttl=1}\n    [Correlation Tag Parameter]                     [Correlation Tag Parameter]\n    {AssuredCtrl Message Header, msgType=Bind}      {AssuredCtrl Message Header, msgType=Bind}\n\n    {AssuredCtrl QueueName Parameter}               {AssuredCtrl TopicEndpointName Parameter}\n    ***                                             {AssuredCtrl TopicName Parameter}\n    [AssuredCtrl Last Message Id Acked Parameter]   ***\n    [AssuredCtrl Last Message Id Recv'd Parameter]  ***\n    {AssuredCtrl Transport Window Size Parameter}   {AssuredCtrl Transport Window Size Parameter}\n    [AssuredCtrl Durability Parameter]              [AssuredCtrl Durability Parameter]\n    [AssuredCtrl Message Selector Parameter]        [AssuredCtrl Message Selector Parameter]\n    [AssuredCtrl FlowType Parameter]                [AssuredCtrl FlowType Parameter]\n    [AssuredCtrl Selector Parameter]                [AssuredCtrl Selector Parameter]\n    [AssuredCtrl AllOthersPermissions Parameter]    [AssuredCtrl AllOthersPermissions Parameter]\n    [AssuredCtrl EndpointQuotaMB Parameter]         [AssuredCtrl EndpointQuotaMB Parameter]\n    [AssuredCtrl EndpointMaxMessageSize Parameter]  [AssuredCtrl EndpointMaxMessageSize Parameter]\n    [AssuredCtrl TransactedSessionId Parameter]     [AssuredCtrl TransactedSessionId Parameter]\n    [AssuredCtrl NoLocal Parameter]                 [AssuredCtrl NoLocal Parameter]\n    [AssuredCtrl wantFlowChangeUpdate Parameter]    ***\n    [AssuredCtrl qEndpointBehaviourFlags Parameter] [AssuredCtrl qEndpointBehaviourFlags Parameter]\n    [AssuredCtrl MaxRedelivery Parameter]           [AssuredCtrl MaxRedelivery Parameter]\n    [AssuredCtrl browser Parameter]                 ***\n    */\n    const durable = queueDescriptor.durable;\n    const endpointBytes = endpoint.bytes;\n    const endpointType = endpoint.type;\n\n    // {SMF Header, protocol=AssuredCtrl ttl=1}        {SMF Header, protocol=AssuredCtrl ttl=1}\n    // [Correlation Tag Parameter]                     [Correlation Tag Parameter]\n    // {AssuredCtrl Message Header, msgType=Bind}      {AssuredCtrl Message Header, msgType=Bind}\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.BIND);\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    // {AssuredCtrl QueueName Parameter}               {AssuredCtrl TopicEndpointName Parameter}\n    const endpointTypeParam = EndpointTypeToParam[endpointType];\n    if (endpointTypeParam === undefined) throw new OperationError('Unknown destination type');\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      endpointTypeParam,\n      endpointBytes\n    ));\n\n    // ***                                             {AssuredCtrl TopicName Parameter}\n    if (topicSubscription) {\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.TOPICNAME,\n        topicSubscription.bytes\n      ));\n    }\n\n    if (endpointType === DestinationType.QUEUE) {\n      //     [AssuredCtrl Last Message Id Acked Parameter]   ***\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.LASTMSGIDACKED,\n        lastMsgIdAcked\n      ));\n      //     [AssuredCtrl Last Message Id Recv'd Parameter]  ***\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.LASTMSGIDRECEIVED,\n        lastMsgIdReceived\n      ));\n    }\n\n    // {AssuredCtrl Transport Window Size Parameter}\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.WINDOW,\n      windowSize\n    ));\n\n    // [AssuredCtrl Durability Parameter]\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_DURABLE,\n      durable\n    ));\n\n    // Omit Message Selector\n    // Omit FlowType, CONSUMER assumed (not BROWSER currently)\n    // Omit TransactedSessionId\n\n    addQueueProperties(message, queueProperties, true);\n\n    if (noLocal /* is true */) {\n      // [AssuredCtrl NoLocal Parameter]\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.NOLOCAL,\n        0x1\n      ));\n    }\n\n    if (wantFlowChangeUpdate /* is true */) {\n      // [AssuredCtrl wantFlowChangeUpdate Parameter]    ***\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY,\n        0x1\n      ));\n    }\n\n    if (browser /* is true */) {\n      // [AssuredCtrl browser Parameter]    ***\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.FLOWTYPE,\n        0x2\n      ));\n    }\n    if (replayStartLocation !== undefined) {\n      // [AssuredCtrl replay start location Parameter]\n      let rsValue = replayStartLocation._replayStartValue;\n      if (replayStartLocation._type === ReplayStartType.DATE) {\n        const replayStartTimeMs = Long.fromNumber(replayStartLocation._replayStartValue, true);\n        const replayStartTimeNs = replayStartTimeMs.multiply(1000000);\n        rsValue = replayStartTimeNs;\n      }\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.REPLAY_START_LOCATION,\n        {\n          type:  replayStartLocation._type,\n          value: rsValue,\n        }\n      ));\n    }\n\n    if (endpointErrorId !== undefined) {\n      // [AssuredCtrl EndpointErrorId Parameter]    ***\n      LOG_TRACE(`Adding endpointErrorId to message: ${endpointErrorId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n        endpointErrorId\n      ));\n    }\n\n    return message;\n  }\n\n  /**\n   * Creates an UNBIND request\n   * @param {Number} flowId The flow ID to unbind\n   * @param {Number} correlationTag The correlation tag for the request\n   * @param {?Long} lastMessageIdAcked The last message ID marked as locally acked\n   * @returns {AdProtocolMessage} The new UNBIND request\n   * @static\n   * @internal\n   */\n  static getCloseMessageConsumer(flowId,\n                                 correlationTag) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNBIND);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.FLOWID,\n                                          flowId));\n    // linger: assume no\n\n    return message;\n  }\n\n  static getDTEUnsubscribeMessage(correlationTag,\n                                  topic) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNSUBSCRIBE);\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.DTENAME,\n      topic.getBytes()\n    ));\n\n    return message;\n  }\n\n  /**\n   * @param {Number} flowId The flow on which to acknowledge messages.\n   * @param {?Long} [lastMessageIdAcked=undefined] The transport acknowledges receipt of all\n   *  messages up to and including this ID.\n   * @param {?Long} [windowSize=undefined] The size to which the flow window should be set.\n   * @param {?Array.<Array.<Long>>} [applicationAckRanges=undefined] Low-high ID pairs of\n   *  message IDs to acknowledge at the application level. To application ack a single message,\n   *  pass `[ [singleMessageId, singleMessageId] ]`.\n   * @returns {solace.AdProtocolMessage} A message containing the given parameters.\n   * @internal\n   * @static\n   */\n  static getAck(flowId,\n                lastMessageIdAcked = undefined,\n                windowSize = undefined,\n                applicationAckRanges = undefined) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CLIENTACK);\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.FLOWID,\n      flowId\n    ));\n\n    if (lastMessageIdAcked) {\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.LASTMSGIDACKED,\n        lastMessageIdAcked\n      ));\n    }\n\n    if (windowSize !== undefined && windowSize !== null) {\n      // There are two windowSize options; we'll use the legacy one for smaller\n      // window sizes\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        (windowSize <= 0xFF) ? SMFAdProtocolParam.WINDOW : SMFAdProtocolParam.TRANSPORT_WINDOW,\n        windowSize\n      ));\n    }\n\n    if (applicationAckRanges && applicationAckRanges.length) {\n      if (applicationAckRanges.length > AdProtocolMessage.MAX_CLIENT_ACK_RANGES) {\n        throw new OperationError('Application ack range count exceeds limit of 64');\n      }\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.APPLICATION_ACK,\n        applicationAckRanges // DANGER: this needs to be encoded immediately, or else deep-cloned\n      ));\n    }\n\n    return message;\n  }\n\n  /**\n   * @param {Number} flowId The flow on which to acknowledge messages.\n   * @param {?Long} [endpointErrorId=undefined] endpoint error id\n   * @param {?Long} [lastMessageIdAcked=undefined] The transport acknowledges receipt of all\n   *  messages up to and including this ID.\n   * @returns {solace.AdProtocolMessage} A message containing the given parameters.\n   * @internal\n   * @static\n   */\n  static getUnbindAck(flowId, endpointErrorId = undefined, lastMessageIdAcked = undefined) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNBIND);\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.FLOWID,\n      flowId\n    ));\n\n    if (endpointErrorId) {\n      LOG_TRACE(`Adding endpointErrorId to unbind ack: ${endpointErrorId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n        endpointErrorId\n      ));\n    }\n    LOG_TRACE(`Not adding lastMessageIdAcked to unbind ack: ${lastMessageIdAcked}`);\n    //if (lastMessageIdAcked) {\n    //  LOG_TRACE(`Adding lastMessageIdAcked to unbind ack: ${lastMessageIdAcked}`);\n    //  message.addParameter(new SMFParameter(\n    //    SMFUH.REJECT,\n    //    SMFAdProtocolParam.LASTMSGIDACKED,\n    //    lastMessageIdAcked\n    //  ));\n    //}\n    return message;\n  }\n}\n\n\nAdProtocolMessage.MAX_CLIENT_ACK_RANGES = 64;\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\n","const { AdProtocolMessage } = require('./adprotocol-message');\nconst { BinaryMetaBlock } = require('./binary-meta-block');\nconst { ClientCtrlMessage } = require('./client-ctrl-message');\nconst { KeepAliveMessage } = require('./keep-alive-message');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFUH } = require('./smf-uh');\nconst { SMPMessage } = require('./smp-message');\nconst { TransportSMFMessage } = require('./transport-smf-message');\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\nmodule.exports.SMFHeader = SMFHeader;\nmodule.exports.SMFParameter = SMFParameter;\nmodule.exports.SMFUH = SMFUH;\nmodule.exports.SMPMessage = SMPMessage;\nmodule.exports.TransportSMFMessage = TransportSMFMessage;\n","/**\n * @constructor BaseMessage\n * @private\n */\nclass BaseMessage {\n  constructor(header = null, params = []) {\n    this._smfHeader = header;\n    this._parameters = params;\n  }\n\n  addParameter(param) {\n    this._parameters[param.getType()] = param;\n  }\n\n  getParameter(paramType) {\n    return this._parameters[paramType];\n  }\n\n  getParameterArray() {\n    return this._parameters;\n  }\n\n  get smfHeader() {\n    return this._smfHeader;\n  }\n  set smfHeader(val) {\n    this._smfHeader = val;\n  }\n\n  getResponse() {\n    const smf = this.smfHeader;\n    if (!(smf && smf.pm_respcode && smf.pm_respstr)) {\n      return null;\n    }\n    return {\n      responseCode:   smf.pm_respcode,\n      responseString: smf.pm_respstr,\n    };\n  }\n}\n\nmodule.exports.BaseMessage = BaseMessage;\n","const { Bits, Convert } = require('solclient-convert');\n\nconst {\n  get: bits,\n} = Bits;\nconst {\n  int8ToStr,\n  int24ToStr,\n} = Convert;\n\n/**\n * @classdesc\n *\n * BinaryMetaBlock represents a binary metadata block in a TrMsg\n *\n * @private\n */\nclass BinaryMetaBlock {\n  constructor(type, payload) {\n    this.type = type;\n    this.payload = payload;\n  }\n\n  asEncodedSmf() {\n    const smf = [];\n    smf.push(int8ToStr(1));\n    smf.push(int8ToStr(this.type));\n    smf.push(int24ToStr(this.payload.length));\n    smf.push(this.payload.toString('latin1'));\n    return smf.join('');\n  }\n\n  static fromEncodedSmf(bufSmf, offset = 0) {\n    if ((bufSmf.length - offset) < 6) {\n      return null; // not enough data\n    }\n    const chunkCount = bufSmf.readUInt8(offset);\n    const fourbyte = bufSmf.readInt32BE(offset + 1);\n    const type = bits(fourbyte, 24, 8);\n    const payloadLen = bits(fourbyte, 0, 24);\n    const payloadOffset = chunkCount * 4 + 1;\n    const payload = bufSmf.slice(offset + payloadOffset, offset + payloadOffset + payloadLen);\n    return new BinaryMetaBlock(type, payload);\n  }\n\n}\n\n\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\n","const { AuthenticationScheme, CapabilityType, ClientCapabilityType, MutableSessionProperty, SessionProperties } = require('solclient-session');\nconst { BaseMessage } = require('./base-message');\nconst { Bits, Convert } = require('solclient-convert');\nconst { DestinationType, DestinationUtil } = require('solclient-destination');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Process, StringUtils, Version } = require('solclient-util');\nconst { SMFClientCtrlMessageType } = require('../smf-client-ctrl-message-types');\nconst { SMFClientCtrlParam, SMFClientCtrlAuthType } = require('../smf-client-ctrl-params');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFProtocol } = require('../smf-protocols');\n\nconst { LOG_TRACE } = require('solclient-log');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\nconst {\n  int8ToStr, strToInt8,\n  int16ToStr, int32ToStr,\n  strToInt16, strToInt32,\n} = Convert;\nconst {\n  nullTerminate,\n  stripNullTerminate,\n} = StringUtils;\nconst {\n  validateAndEncode,\n} = DestinationUtil;\n\nconst BOOLEAN_CAPS_BITS = [\n  CapabilityType.JNDI,\n  CapabilityType.COMPRESSION,\n  CapabilityType.GUARANTEED_MESSAGE_CONSUME,\n  CapabilityType.TEMPORARY_ENDPOINT,\n  CapabilityType.GUARANTEED_MESSAGE_PUBLISH,\n  CapabilityType.GUARANTEED_MESSAGE_BROWSE,\n  CapabilityType.ENDPOINT_MGMT,\n  CapabilityType.SELECTOR,\n  CapabilityType.ENDPOINT_MESSAGE_TTL,\n  CapabilityType.QUEUE_SUBSCRIPTIONS,\n  null, // skip obsolete FLOW_RECOVER\n  CapabilityType.SUBSCRIPTION_MANAGER,\n  CapabilityType.MESSAGE_ELIDING,\n  CapabilityType.TRANSACTED_SESSION,\n  CapabilityType.NO_LOCAL,\n  CapabilityType.ACTIVE_CONSUMER_INDICATION,\n  CapabilityType.PER_TOPIC_SEQUENCE_NUMBERING,\n  CapabilityType.ENDPOINT_DISCARD_BEHAVIOR,\n  CapabilityType.CUT_THROUGH,\n  null, // skip OPENMAMA\n  CapabilityType.MESSAGE_REPLAY,\n  CapabilityType.COMPRESSED_SSL,\n  null, // skipping LONG_SELECTORS\n  CapabilityType.SHARED_SUBSCRIPTIONS,\n  CapabilityType.BR_REPLAY_ERRORID,\n];\n\nconst CLIENT_CAPS_VALUES = new Map([\n  [ClientCapabilityType.UNBIND_ACK, 0x80],\n  [ClientCapabilityType.BR_ERRORID, 0x40],\n]);\n\n/**\n * @classdesc ClientCtrlMessage\n * Represents a ClientCtrl request or reply message\n * @private\n */\nclass ClientCtrlMessage extends BaseMessage {\n  constructor(messageType = 0) {\n    super(new SMFHeader(SMFProtocol.CLIENTCTRL, 1));\n\n    // Field: msgtype\n    this.msgType = messageType;\n\n    // Field: version\n    this.version = 1;\n  }\n\n  getP2PTopicValue() {\n    const p2pParam = this.getParameter(SMFClientCtrlParam.P2PTOPIC);\n    if (!p2pParam) {\n      return null;\n    }\n    return stripNullTerminate(p2pParam.getValue());\n  }\n\n  getVpnNameInUseValue() {\n    const vpnParam = this.getParameter(SMFClientCtrlParam.MSGVPNNAME);\n    if (!vpnParam) {\n      return null;\n    }\n    return stripNullTerminate(vpnParam.getValue());\n  }\n\n  getVridInUseValue() {\n    const vridParam = this.getParameter(SMFClientCtrlParam.VRIDNAME);\n    if (!vridParam) {\n      return null;\n    }\n    return stripNullTerminate(vridParam.getValue());\n  }\n\n  getUserIdValue() {\n    const userIdParam = this.getParameter(SMFClientCtrlParam.USERID);\n    if (!userIdParam) {\n      return null;\n    }\n    return stripNullTerminate(userIdParam.getValue());\n  }\n\n  getRouterCapabilities() {\n    let caps = [];\n\n    // Parse the composite capabilities parameter\n    let capParam = this.getParameter(SMFClientCtrlParam.ROUTER_CAPABILITIES);\n    if (capParam) {\n      caps = ClientCtrlMessage.prmParseCapabilitiesValue(capParam.getValue(), caps);\n    }\n\n    // Parse out the router status strings\n    capParam = this.getParameter(SMFClientCtrlParam.SOFTWAREVERSION);\n    if (capParam) {\n      caps[CapabilityType.PEER_SOFTWARE_VERSION] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.SOFTWAREDATE);\n    if (capParam) {\n      caps[CapabilityType.PEER_SOFTWARE_DATE] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.PLATFORM);\n    if (capParam) {\n      caps[CapabilityType.PEER_PLATFORM] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.PHYSICALROUTERNAME);\n    if (capParam) {\n      caps[CapabilityType.PEER_ROUTER_NAME] = stripNullTerminate(capParam.getValue());\n    }\n    return caps;\n  }\n\n\n  static prmGetDtoPriorityValue(dto) {\n    if (dto.local === undefined || dto.network === undefined) {\n      return false;\n    }\n    let twobyte = 0;\n    twobyte = setBits(twobyte, dto.local, 8, 8);\n    twobyte = setBits(twobyte, dto.network, 0, 8);\n    return int16ToStr(twobyte);\n  }\n\n  static prmParseDtoPriorityValue(strDtoPriority) {\n    const dto = {};\n    const twobyte = strToInt16(strDtoPriority.substr(0, 2));\n    dto.local = bits(twobyte, 8, 8);\n    dto.network = bits(twobyte, 0, 8);\n    return dto;\n  }\n\n  /*\n  strCapabilities: parameter value\n  caps: an already existing hash array of CapabilityType\n   */\n  static prmParseCapabilitiesValue(strCapabilities, capsIn) {\n    const caps = capsIn;\n    if (!(strCapabilities && caps)) {\n      return false;\n    }\n    const CT = CapabilityType;\n    let pos = 0;\n\n    // parse boolean capabilities\n    const boolCapCount = strToInt8(strCapabilities[pos]);\n    ++pos;\n\n    // The boolean caps are listed in order as in the documentation,\n    // that is from MSB to LSB for each caps byte.\n    let capsByte;\n    for (let bitIndex = 0; bitIndex < boolCapCount; ++bitIndex) {\n      const msbIndex = bitIndex & 0x7;\n      if (msbIndex === 0) { // Consume a byte\n        capsByte = strToInt8(strCapabilities[pos]);\n        ++pos;\n      }\n      const capsKey = BOOLEAN_CAPS_BITS[bitIndex];\n      if (!capsKey) continue; // We don't know about this cap\n      // so set caps bits from MSB (bit 7) to LSB (bit 0)\n      caps[capsKey] = !!bits(capsByte, 7 - msbIndex, 1);\n    }\n    // parse non-boolean capabilities\n    const sanityLoop = 500;\n    for (let i = 0; pos < strCapabilities.length && i < sanityLoop; ++i) {\n      const onebyte = strToInt8(strCapabilities[pos]); // type\n      pos++;\n      const capLen = strToInt32(strCapabilities.substr(pos, 4)) - 5;\n      pos += 4;\n      const strValue = strCapabilities.substr(pos, capLen);\n      pos += capLen;\n      switch (onebyte) {\n        case 0x00:\n          caps[CT.PEER_PORT_SPEED] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        case 0x01:\n          caps[CT.PEER_PORT_TYPE] = (strValue.length === 1) ? strToInt8(strValue) : 0;\n          break;\n        case 0x02:\n          caps[CT.MAX_GUARANTEED_MSG_SIZE] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        case 0x03:\n          caps[CT.MAX_DIRECT_MSG_SIZE] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        default:\n          // NOOP (unknown cap)\n          break;\n      }\n    }\n    return caps;\n  }\n\n\n  static getLogin(sprop, compressedTLS, plaintextTLS, correlationTag) {\n    function clientCapsToStr(clientCapList) {\n      const highestCap = Math.max.apply(null, clientCapList) + 1;\n      let capBits = 0;\n      clientCapList.forEach((cap) => { capBits += CLIENT_CAPS_VALUES.get(cap); });\n      return int8ToStr(highestCap) + int8ToStr(capBits);\n    }\n    if (!(sprop instanceof SessionProperties)) {\n      return false;\n    }\n    const cc = new ClientCtrlMessage(SMFClientCtrlMessageType.LOGIN);\n    const smfHeader = cc._smfHeader;\n    const isClientCert = sprop.authenticationScheme === AuthenticationScheme.CLIENT_CERTIFICATE;\n    smfHeader.pm_corrtag = correlationTag;\n    if (sprop.password && !isClientCert) {\n      smfHeader.pm_password = sprop.password;\n    }\n    if (sprop.userName) {\n      smfHeader.pm_username = sprop.userName;\n    }\n    if (sprop.subscriberLocalPriority && sprop.subscriberNetworkPriority) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.DELIVERTOONEPRIORITY,\n                                       ClientCtrlMessage.prmGetDtoPriorityValue({\n                                         local:   sprop.subscriberLocalPriority,\n                                         network: sprop.subscriberNetworkPriority })));\n    }\n    if (sprop.vpnName && sprop.vpnName.length > 0) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.MSGVPNNAME,\n                                       nullTerminate(sprop.vpnName)));\n    }\n\n    if (sprop.applicationDescription && sprop.applicationDescription.length > 0) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTDESC,\n                                       nullTerminate(sprop.applicationDescription)));\n    }\n\n    if (sprop.userIdentification && sprop.userIdentification.length > 0) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.USERID,\n                                       nullTerminate(sprop.userIdentification)));\n    }\n\n    if (sprop.authenticationScheme === AuthenticationScheme.OAUTH2) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.AUTHENTICATION_SCHEME,\n                                       SMFClientCtrlAuthType.OAUTH2));\n\n      if (sprop.idToken) {\n        smfHeader.pm_oidc_id_token = nullTerminate(sprop.idToken);\n      }\n\n      if (sprop.accessToken) {\n        smfHeader.pm_oauth2_access_token = nullTerminate(sprop.accessToken);\n      }\n\n      if (sprop.issuerIdentifier) {\n        smfHeader.pm_oauth2_issuer_identifier = nullTerminate(sprop.issuerIdentifier);\n      }\n    }\n\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.CLIENTNAME,\n                                     nullTerminate(sprop.clientName)));\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.PLATFORM,\n                                     nullTerminate(`${Process.platform} - JS API (${Version.mode})`)));\n\n    if (sprop.noLocal) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.NO_LOCAL,\n                                       '\\x01'));\n    }\n\n    if (isClientCert) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.AUTHENTICATION_SCHEME,\n                                       SMFClientCtrlAuthType.CLIENT_CERTIFICATE));\n    }\n\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.SOFTWAREDATE,\n                                     nullTerminate(Version.formattedDate)));\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.SOFTWAREVERSION,\n                                     nullTerminate(Version.version)));\n\n    if (compressedTLS && plaintextTLS) {\n      LOG_TRACE('Adding SslDowngrade=1 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x01'));\n    } else if (compressedTLS) {\n      LOG_TRACE('Adding SslDowngrade=2 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x02'));\n    } else if (plaintextTLS) {\n      LOG_TRACE('Adding SslDowngrade=0 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x00'));\n    }\n    const clientCaps = clientCapsToStr([ClientCapabilityType.UNBIND_ACK,\n      ClientCapabilityType.BR_ERRORID]);\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.CLIENT_CAPABILITIES,\n                                     clientCaps));\n                                     //'\\x02\\xc0'));\n                                     //'\\x01\\x80'));\n    const keepaliveVal = int32ToStr((sprop.keepAliveIntervalInMsecs) / 1000);\n    cc.addParameter(new SMFParameter(0,\n                                    SMFClientCtrlParam.KEEP_ALIVE_INTERVAL,\n                                    keepaliveVal));\n\n    return cc;\n  }\n\n  /**\n   * Get a CC update message.\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property to update\n   * @param {String} newValue The new value for the property\n   * @param {String} correlationTag The correlation tag for the request\n   * @returns {ClientCtrlMessage} The new UPDATE message\n   *\n   * @private\n   */\n  static getUpdate(mutableSessionProperty, newValue, correlationTag) {\n    const cc = new ClientCtrlMessage(SMFClientCtrlMessageType.UPDATE);\n    const smfHeader = cc.smfHeader;\n    smfHeader.pm_corrtag = correlationTag;\n    if (mutableSessionProperty === MutableSessionProperty.CLIENT_DESCRIPTION) {\n      const appdesc = (newValue || '').toString().substr(0, 250);\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTDESC,\n                                       nullTerminate(appdesc)));\n    } else if (mutableSessionProperty === MutableSessionProperty.CLIENT_NAME) {\n      const error =\n        ClientCtrlMessage.validateClientName(\n          newValue,\n          errorMessage =>\n            new OperationError(`Invalid clientName: ${errorMessage}`,\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n      if (error) {\n        throw error;\n      }\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTNAME,\n                                       nullTerminate(newValue)));\n    }\n    return cc;\n  }\n\n  static validateClientName(strName, exceptionCreator) {\n    const encodeResult = validateAndEncode(DestinationType.TOPIC, strName, exceptionCreator);\n    if (encodeResult.error) {\n      return encodeResult.error;\n    }\n    // Add 1: bytes includes terminator, 160 excludes terminator\n    if (encodeResult.bytes.length > 161) {\n      return exceptionCreator('Client Name too long (max length: 160).');\n    }\n    return null;\n  }\n}\n\n\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\n","const { BaseMessage } = require('./base-message');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFProtocol } = require('../smf-protocols');\n\nclass KeepAliveMessage extends BaseMessage {\n  constructor() {\n    super(new SMFHeader(SMFProtocol.KEEPALIVEV2, 2));\n    this._smfHeader.smf_uh = 2;\n  }\n}\n\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\n","/**\n * @classdesc\n * Control messages wrap an SMFHeader instance\n * @private\n */\nclass SMFHeader {\n  constructor(protocol = 0, ttl = 0) {\n    // header properties\n    // header block\n    // SMF parameters\n    // payload\n    this._parameters = [];\n\n    // Common SMF header field values\n    this.smf_version = 3;\n    this.smf_uh = 0;\n    this.smf_protocol = protocol;\n    this.smf_priority = 0;\n    this.smf_ttl = ttl;\n    this.smf_msgLen = 0;\n    this.smf_di = 0;\n    this.smf_tqd = 0;\n    this.smf_elidingEligible = 0;\n    this.smf_dto = 0;\n    this.smf_adf = 0;                  // AD\n    this.smf_deadMessageQueueEligible = 0; //DMQ Eligible\n\n    // Common SMF protocol parameters\n    this.pm_userdata = null;\n    this.pm_respcode = 0;\n    this.pm_respstr = null;\n    this.pm_username = null;\n    this.pm_password = null;\n    this.pm_tr_topicname_bytes = null;\n    this.pm_deliverymode = null;\n\n    this.pm_ad_msgid = undefined;      // AD\n    this.pm_ad_prevmsgid = undefined;  // AD\n    this.pm_ad_redelflag = 0;          // AD\n    this.pm_ad_flowredelflag = 0;      // AD\n    this.pm_ad_ttl = undefined;        // AD\n    this.pm_ad_ackimm = undefined;     // AD\n    this.pm_ad_flowid = 0;             // AD\n    this.pm_ad_publisherid = 0;\n    this.pm_ad_publishermsgid = 0;\n\n    this.pm_content_summary = null;\n    this.pm_corrtag = null;\n    this.pm_topic_offset = 0;\n    this.pm_topic_len = 0;\n    this.pm_queue_offset = 0;\n    this.pm_queue_len = 0;\n    this.pm_msg_priority = null;        // {number}\n\n    // extended optional parameters\n    // these fields are header but may not be present\n    // see ../codec/parse-smf.js for details\n    // this.pm_ad_redeliveryCount;\n    // this.pm_ad_spooler_unique_id;\n    // this.pm_ad_local_spooler_message_id;\n    // this.pm_ad_replication_mate_ack_message_id;\n    this.pm_oauth2_access_token = null;\n    this.pm_oidc_id_token = null;\n    this.pm_oauth2_issuer_identifier = null;\n\n    // housekeeping\n    this.unknownProtoFlag = false;\n    this.messageLength = 0;\n    this.payloadLength = 0;\n    this.headerLength = 0;\n    this.payload = null;\n\n    // This message is invalid, but the framing (messageLength) is fine.\n    // set by the parser when UH==2 on an unknown parameter.\n    // The SMF fsm can then discard and increment the stats.\n    this.discardMessage = false;\n  }\n\n  setMessageSizes(headerLength, payloadLength) {\n    this.headerLength = headerLength;\n    this.payloadLength = payloadLength;\n    this.messageLength = headerLength + payloadLength;\n  }\n\n  setPayloadSize(payloadLength) {\n    this.payloadLength = payloadLength;\n  }\n}\n\nmodule.exports.SMFHeader = SMFHeader;\n","/**\n * @classdesc\n * A representation of an SMF parameter\n *\n * @private\n */\nclass SMFParameter {\n/**\n * @constructor\n * @param {Number} uh The UH value [0..2]\n * @param {SMFParameterType} type The type of SMF parameter\n * @param {*} value The value for this parameter\n * @param {Buffer} buffer instead of value, a buffer, with indexes (begin and end)\n * @param {Number} begin start index in buffer\n * @param {Number} end end index in buffer.\n */\n  constructor(uh, type, value, buffer, begin, end) {\n    this._type = type;\n    this._value = value;\n    this._uh = uh;\n    this._buffer = buffer;\n    this._begin = begin;\n    this._end = end;\n  }\n  getType() {\n    return this._type;\n  }\n  getValue() {\n    if (this._buffer && !this._value) {\n      return this._buffer.toString('latin1', this._begin, this._end);\n    }\n    return this._value;\n  }\n  getUh() {\n    return this._uh;\n  }\n  getBuffer() {\n    return this._buffer;\n  }\n  getBegin() {\n    return this._begin;\n  }\n  getEnd() {\n    return this._end;\n  }\n\n  toString() {\n    return `${this._uh}:0x${this._type.toString(16)} = ${this.getValue()}`;\n  }\n}\n\nmodule.exports.SMFParameter = SMFParameter;\n","const { Enum } = require('solclient-eskit');\n\nconst SMFUH = {\n  IGNORE: 0x0,\n  REJECT: 0x2,\n};\n\nmodule.exports.SMFUH = Enum.new(SMFUH);\n","const { assert } = require('solclient-eskit');\nconst { BaseMessage } = require('./base-message');\nconst { Destination, DestinationUtil } = require('solclient-destination');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMFSMPMessageType } = require('../smf-smp-message-types');\nconst { SMFSMPMessageTypeFlags } = require('../smf-smp-message-type-flags');\n\n/**\n * Represents an SMP request or reply message\n * @memberof solace\n * @private\n */\nclass SMPMessage extends BaseMessage {\n\n  /**\n   * Creates an instance of SMPMessage.\n   *\n   * @memberOf SMPMessage\n   */\n  constructor() {\n    super(new SMFHeader(SMFProtocol.SMP, 1));\n\n    // Field: msgtype\n    this.msgType = 0;\n\n    // Field: subscription string\n    this.encodedUtf8Subscription = null;\n    this.encodedUtf8QueueName = null;\n\n    this.smpFlags = (0 | SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC); // default flags\n\n    this._encodedQueueName = null; // unused in solclientjs\n    this._encodedClientName = null; // unused in solclientjs\n  }\n\n  isFlag(flagMask) {\n    return (this.smpFlags & flagMask);\n  }\n\n  setFlag(flagMask, value) {\n    if (value) {\n      this.smpFlags |= flagMask;\n    } else {\n      this.smpFlags &= (~flagMask);\n    }\n  }\n\n  static getSubscriptionMessage(correlationTag, topic, add, requestConfirm) {\n    assert(topic instanceof Destination, 'Topics are not UCS-2 strings. Pass a Topic object.');\n    const smp = new SMPMessage();\n    smp.msgType = add\n      ? SMFSMPMessageType.ADDSUBSCRIPTION\n      : SMFSMPMessageType.REMSUBSCRIPTION;\n    smp.encodedUtf8Subscription = topic.getBytes();\n    assert(smp.encodedUtf8Subscription, 'Topic had no encoding');\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC, true);\n    if (requestConfirm) {\n      smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_RESPREQUIRED, true);\n    }\n\n    // Always put a correlation tag\n    smp._smfHeader.pm_corrtag = correlationTag;\n    return smp;\n  }\n\n  static getQueueSubscriptionMessage(correlationTag, topic, queue, add) {\n    assert(topic instanceof Destination, 'Topics are not UCS-2 strings. Pass a Topic object.');\n    const smp = new SMPMessage();\n    smp.msgType = add\n      ? SMFSMPMessageType.ADDQUEUESUBSCRIPTION\n      : SMFSMPMessageType.REMQUEUESUBSCRIPTION;\n    smp.encodedUtf8QueueName = DestinationUtil.encodeBytes(queue.getName());\n    smp.encodedUtf8Subscription = topic.getBytes();\n    assert(smp.encodedUtf8Subscription, 'Topic had no encoding');\n    assert(smp.encodedUtf8QueueName, 'Queue had no encoding');\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC, true);\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_RESPREQUIRED, true);\n    // TODO: true for remove, false for add? Typo in the spec?\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_PERSIST, true);\n\n    // Always put a correlation tag\n    smp._smfHeader.pm_corrtag = correlationTag;\n    return smp;\n  }\n\n\n}\n\n\nmodule.exports.SMPMessage = SMPMessage;\n","const { BaseMessage } = require('./base-message');\n\n/**\n * @classdesc\n * Transport SMF Message\n * @memberof solace\n * @private\n */\nclass TransportSMFMessage extends BaseMessage {\n  /**\n   * @constructor\n   */\n  constructor() {\n    super(null, null);\n    this.uh = 0;\n    this.messageType = null;\n    this.sessionId = null;\n    this.routerTag = null;\n    this.payload = null;\n    this.payloadLength = 0;\n    this.tsHeaderLength = 0;\n  }\n}\n\nmodule.exports.TransportSMFMessage = TransportSMFMessage;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFAdProtocolMessageType = {\n  OPENPUBFLOW:      0x00,\n  // INTERROUTERACK:          0x01,\n  // INTERROUTERHANDSHAKEACK: 0x02,\n  CLIENTACK:        0x03,\n  BIND:             0x04,\n  UNBIND:           0x05,\n  UNSUBSCRIBE:      0x06,\n  CLOSEPUBFLOW:     0x07,\n  CREATE:           0x08,\n  DELETE:           0x09,\n  // FLOWRECOVER:  0x0a,\n  TRANSACTIONCTRL:  0x0b,\n  FLOWCHANGEUPDATE: 0x0c,\n  // EXTERNALACK:      0x0d,\n  XACTRL:           0x0e,\n  CLIENTNACK:       0x0f,\n  // TXNCTRL:          0x10,\n};\n\nmodule.exports.SMFAdProtocolMessageType = Enum.new(SMFAdProtocolMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFAdProtocolParam = {\n  LASTMSGIDSENT:                           0x01,\n  LASTMSGIDACKED:                          0x02,\n  WINDOW:                                  0x03,\n  TRANSPORT_PRIORITY:                      0x04,\n  APPLICATION_ACK:                         0x05,\n  FLOWID:                                  0x06,\n  QUEUENAME:                               0x07,\n  DTENAME:                                 0x08,\n  TOPICNAME:                               0x09,\n  FLOWNAME:                                0x0a,\n  EP_DURABLE:                              0x0b,\n  ACCESSTYPE:                              0x0c,\n  SELECTOR:                                0x0d,\n  TRANSPORT_WINDOW:                        0x0e,\n  LINGER_OPTION:                           0x0f,\n  LASTMSGIDRECEIVED:                       0x10,\n  EP_ALLOTHER_PERMISSION:                  0x11,\n  FLOWTYPE:                                0x12,\n  EP_QUOTA:                                0x13,\n  EP_MAX_MSGSIZE:                          0x14,\n  GRANTED_PERMISSIONS:                     0x15,\n  EP_RESPECTS_TTL:                         0x16,\n  TRANSACTION_CTRL_MESSAGE_TYPE:           0x17,\n  TRANSACTED_SESSION_ID:                   0x18,\n  TRANSACTED_SESSION_NAME:                 0x19,\n  TRANSACTION_ID:                          0x1a,\n  TRANSACTED_SESSION_STATE:                0x1b,\n  TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY:  0x1c,\n  TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK:     0x1d,\n  TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK:     0x1e,\n  NOLOCAL:                                 0x1f,\n  ACTIVE_FLOW_INDICATION:                  0x20,\n  WANT_FLOW_CHANGE_NOTIFY:                 0x21,\n  EP_BEHAVIOUR:                            0x22,\n  PUBLISHER_ID:                            0x23,\n  APPLICATION_PUB_ACK:                     0x24,\n  NUM_MESSAGES_SPOOLED:                    0x25,\n  CUT_THROUGH:                             0x26,\n  PUBLISHER_FLAGS:                         0x27,\n  APP_MSG_ID_TYPE:                         0x28,\n  QUEUE_ENDPOINT_HASH:                     0x29,\n  MAX_REDELIVERY:                          0x2a,\n  PAYLOAD:                                 0x2b,\n  ENDPOINT_ID:                             0x2c,\n  ACK_SEQUENCE_NUMBER:                     0x2d,\n  ACK_RECONCILE_REQUEST:                   0x2e,\n  START_OF_ACK_RECONCILE:                  0x2f,\n  TIMESTAMP:                               0x30,\n  MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW: 0x31,\n  REPLAY_START_LOCATION:                   0x33,\n  ENDPOINT_ERROR_ID:                       0x34,\n  SPOOLER_UNIQUE_ID:                       0x36,\n};\n\nmodule.exports.SMFAdProtocolParam = Enum.new(SMFAdProtocolParam);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFClientCtrlMessageType = {\n  LOGIN:  0x00,\n  UPDATE: 0x01,\n};\n\nmodule.exports.SMFClientCtrlMessageType = Enum.new(SMFClientCtrlMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFClientCtrlParam = {\n  SOFTWAREVERSION:              0x00,\n  SOFTWAREDATE:                 0x01,\n  PLATFORM:                     0x02,\n  USERID:                       0x03,\n  CLIENTDESC:                   0x04,\n  CLIENTNAME:                   0x05,\n  MSGVPNNAME:                   0x06,\n  DELIVERTOONEPRIORITY:         0x07,\n  P2PTOPIC:                     0x08,\n  ROUTER_CAPABILITIES:          0x09,\n  VRIDNAME:                     0x0a,\n  PHYSICALROUTERNAME:           0x0c,\n  BRIDGE_MSG_VPN_NAME:          0x0d,\n  BRIDGE_ROUTER_NAME:           0x0e,\n  NO_LOCAL:                     0x0f,\n  BRIDGE_VERSION:               0x10,\n  AUTHENTICATION_SCHEME:        0x11,\n  CONNECTION_TYPE:              0x12,\n  ROUTER_CAPABILITIES_EXTENDED: 0x13,\n  REQUIRES_RELEASE_7:           0x14, // not supported.\n  SSL_DOWNGRADE:                0x15,\n  CLIENT_CAPABILITIES:          0x17,\n  KEEP_ALIVE_INTERVAL:          0x18,\n};\n\n// Internal use only\nconst SMFClientCtrlAuthType = {\n  CLIENT_CERTIFICATE: '\\x01',\n  OAUTH2:             '\\x0a',\n};\n\nmodule.exports.SMFClientCtrlAuthType = Enum.new(SMFClientCtrlAuthType);\nmodule.exports.SMFClientCtrlParam = Enum.new(SMFClientCtrlParam);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFParameterType = {\n  // SMF parameter types 5 bit types\n  PADDING:                  0x00,\n  PUBLISHER_ID:             0x01,\n  PUBLISHER_MSGID:          0x02,\n  MESSAGEPRIORITY:          0x03,\n  USERDATA:                 0x04,\n  USERNAME:                 0x06,\n  PASSWORD:                 0x07,\n  RESPONSE:                 0x08,\n  SUB_ID_LIST:              0x0A,\n  GENERIC_ATTACHMENT:       0x0B,\n  BINARY_ATTACHMENT:        0x0C,\n  DELIVERY_MODE:            0x10,\n  ASSURED_MESSAGE_ID:       0x11,\n  ASSURED_PREVMESSAGE_ID:   0x12,\n  ASSURED_REDELIVERED_FLAG: 0x13,\n  MESSAGE_CONTENT_SUMMARY:  0x16,\n  ASSURED_FLOWID:           0x17,\n  TR_TOPICNAME:             0x18,\n  AD_FLOWREDELIVERED_FLAG:  0x19,\n  AD_TIMETOLIVE:            0x1C,\n  AD_TOPICSEQUENCE_NUMBER:  0x1e,\n  EXTENDED_TYPE_STREAM:     0x1f,\n  /* extended parameters 12 bit types */\n  AD_ACK_MESSAGE_ID:        0x29,\n  AD_SPOOLER_UNIQUE_ID:     0x2c,\n  AD_REPL_MATE_ACK_MSGID:   0x2d,\n  AD_REDELIVERY_COUNT:      0x2e,\n\n  /* light wieght parameters */\n  LIGHT_CORRELATION:       0x00,\n  LIGHT_TOPIC_NAME_OFFSET: 0x01,\n  LIGHT_QUEUE_NAME_OFFSET: 0x02,\n  LIGHT_ACK_IMMEDIATELY:   0x03,\n};\n\nconst SMFExtendedParameterType = {\n  // SMFv3 Extended parameters inside the Extended Type Stream\n//Not supported yet\n//  GSS_API_TOKEN:        0x28,\n//  AD_ACK_MESSAGE_ID:    0x29,\n//  AD_TRANSACTION_ID:    0x2a,\n//  AD_TRANSACTION_FLAGS: 0x2b,\n  OAUTH2_ISSUER_IDENTIFIER: 0x2f,\n  OIDC_ID_TOKEN:            0x30,\n  OAUTH2_ACCESS_TOKEN:      0x31,\n};\n\nmodule.exports.SMFParameterType = Enum.new(SMFParameterType);\nmodule.exports.SMFExtendedParameterType = Enum.new(SMFExtendedParameterType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * SMFProtocol\n * @private\n * @enum {number}\n */\nconst SMFProtocol = {\n  CSPF:               0x01,\n  CSMP:               0x02,\n  PUBMSG:             0x03,\n  XMLLINK:            0x04,\n  WSE:                0x05,\n  SEMP:               0x06,\n  SUBCTRL:            0x07,\n  PUBCTRL:            0x08,\n  ADCTRL:             0x09,\n  KEEPALIVE:          0x0a,\n  KEEPALIVEV2:        0x0b,\n  CLIENTCTRL:         0x0c,\n  TRMSG:              0x0d,\n  JNDI:               0x0e,\n  SMP:                0x0f,\n  SMRP:               0x10,\n  SMF_IN_SMF:         0x11,\n  SMF_IN_RV:          0x12,\n  ADCTRL_PASSTHROUGH: 0x13,\n  TSESSION:           0x14,\n\n};\n\nmodule.exports.SMFProtocol = Enum.new(SMFProtocol);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFSMPMessageTypeFlags = {\n  FLAG_FILTER:                1,\n  FLAG_PERSIST:               2,\n  SMF_SMP_FLAG_TOPIC:         4,\n  SMF_SMP_FLAG_RESPREQUIRED:  8,\n  SMF_SMP_FLAG_DELIVERALWAYS: 16,\n};\n\nmodule.exports.SMFSMPMessageTypeFlags = Enum.new(SMFSMPMessageTypeFlags);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFSMPMessageType = {\n  ADDSUBSCRIPTION:              0x00,\n  REMSUBSCRIPTION:              0x01,\n  ADDQUEUESUBSCRIPTION:         0x02,\n  REMQUEUESUBSCRIPTION:         0x03,\n  ADDSUBSCRIPTIONFORCLIENTNAME: 0x04,\n  REMSUBSCRIPTIONFORCLIENTNAME: 0x05,\n};\n\nmodule.exports.SMFSMPMessageType = Enum.new(SMFSMPMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFTransportSessionMessageType = {\n  CREATE:            0,\n  CREATE_RESP:       1,\n  DESTROY:           2,\n  DESTROY_RESP:      3,\n  DATA:              4,\n  DATA_TOKEN:        5,\n  DATA_STREAM_TOKEN: 6,\n};\n\nmodule.exports.SMFTransportSessionMessageType = Enum.new(SMFTransportSessionMessageType);\n","const { CacheCBInfo } = require('./lib/cache-cb-info');\nconst { CacheContext } = require('./lib/cache-context');\nconst { CacheLiveDataAction } = require('./lib/cache-live-data-actions');\nconst { CacheRequest } = require('./lib/cache-request');\nconst { CacheRequestResult } = require('./lib/cache-request-result');\nconst { CacheReturnCode } = require('./lib/cache-return-codes');\nconst { CacheReturnSubcode } = require('./lib/cache-return-subcodes');\nconst { CacheSession } = require('./lib/cache-session');\nconst { CacheSessionProperties } = require('./lib/cache-session-properties');\n\nmodule.exports.CacheCBInfo = CacheCBInfo;\nmodule.exports.CACHE_REQUEST_PREFIX = CacheContext.CACHE_REQUEST_PREFIX;\nmodule.exports.CacheLiveDataAction = CacheLiveDataAction;\nmodule.exports.CacheRequestResult = CacheRequestResult;\nmodule.exports.CacheReturnCode = CacheReturnCode;\nmodule.exports.CacheReturnSubcode = CacheReturnSubcode;\nmodule.exports.CacheRequest = CacheRequest;\nmodule.exports.CacheSession = CacheSession;\nmodule.exports.CacheSessionProperties = CacheSessionProperties;\n\n","/**\n * This callback is called by a cache session when a cache request\n * completes.\n *\n * @callback solace.CacheCBInfo.cacheRequestCallback\n * @function\n * @param {Number} requestID The ID of the request on which the event is notified.\n * @param {solace.CacheRequestResult} result The result of the cache request.\n * @param {Object} userObject The user object provided.\n */\n\n\n/**\n * @classdesc\n * Encapsulates a {@link solace.CacheSession}'s request listener callback function and\n * optional application-specified context object.\n *\n * Instances of this class are required as a parameter to\n * {@link solace.CacheSession#sendCacheRequest} when creating a CacheSession request.\n *\n * @memberof solace\n */\nclass CacheCBInfo {\n\n  /**\n   * Creates an instance of CacheCBInfo using the provided callback and user context object.\n   * @param {solace.CacheCBInfo.cacheRequestCallback} cacheCBFunction The callback to be invoked.\n   * @param {Object} userObject A context object to be returned with the callback.\n   */\n  constructor(cacheCBFunction, userObject) {\n    /**\n     * The function that will be called by the cache session when a request\n     * completes.\n     * @type {solace.CacheCBInfo.cacheRequestCallback}\n     */\n    this.cacheCBFunction = cacheCBFunction;\n\n    /**\n     * The user context object that will be supplied to the callback function\n     * when the cache request completes.\n     * @type {object}\n     */\n    this.userObject = userObject;\n  }\n\n  /**\n   * @returns {solace.CacheCBInfo.cacheRequestCallback} The callback function\n   * @private\n   */\n  getCallback() {\n    return this.cacheCBFunction;\n  }\n\n  /**\n   * @returns {*} The user context object, if any\n   * @private\n   */\n  getUserObject() {\n    return this.userObject;\n  }\n\n}\n\nmodule.exports.CacheCBInfo = CacheCBInfo;\n","/**\n * @private\n * @static\n */\nconst CacheContext = {\n  /**\n   * A prefix appearing on the request IDs of all requests associated with a Solcache session.\n   * @type {String}\n   * @private\n   */\n  CACHE_REQUEST_PREFIX: '#CRQ',\n\n  /**\n   * A global counter generating unique correlation IDs for cache requests.\n   * @private\n   */\n  cacheRequestCorrelationId: 0,\n};\n\nmodule.exports.CacheContext = CacheContext;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst CacheGetResultCode = {\n  INVALID: 0,\n  OK:      1,\n};\n\nmodule.exports.CacheGetResultCode = Enum.new(CacheGetResultCode);\n","const { CacheGetResultCode } = require('./cache-get-result-codes');\n\nconst DEFAULTS = {\n  messageID:         null,\n  version:           0,\n  responseCode:      CacheGetResultCode.INVALID,\n  responseString:    '',\n  matchTopic:        '',\n  sessionID:         null,\n  isSuspect:         null,\n  hasMore:           null,\n  hasTimestamps:     null,\n  replyTo:           null,\n  messageStream:     null,\n  clusterNameStream: null,\n};\n\n/**\n * @classdesc CacheGetResult encapsulates the result of a cache get request\n * @private\n */\nclass CacheGetResult {\n  /*\n   * @constructor\n   */\n  constructor(options = DEFAULTS) {\n    Object.assign(this, options);\n  }\n\n  readFromStream(stream) {\n    this.messageID = stream.getNext().getValue();\n    this.version = stream.getNext().getValue();\n    this.responseCode = stream.getNext().getValue();\n    this.responseString = stream.getNext().getValue();\n    // SD claims instanceName is present here but empirically, it's not\n\n    this.matchTopic = stream.getNext().getValue();\n    this.sessionID = stream.getNext().getValue();\n    this.isSuspect = stream.getNext().getValue();\n    this.hasMore = stream.getNext().getValue();\n\n    this.hasTimestamps = stream.getNext().getValue();\n\n    if (stream.hasNext()) { // first stream\n      this.messageStream = stream.getNext().getValue();\n    }\n    if (stream.hasNext()) { // if two streams, first was cluster name stream\n      this.clusterNameStream = this.messageStream;\n      this.messageStream = stream.getNext().getValue();\n    }\n  }\n}\n\nmodule.exports.CacheGetResult = CacheGetResult;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * solace.CacheLiveDataAction\n * Enumeration of CacheLiveDataAction values, specifying how the CacheSession should handle\n * live data associated with a cache request in progress.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheLiveDataAction = {\n  /**\n   * @type {Number}\n   * @description End the cache request when live data arrives that matches the topic.\n   * Note that wildcard cache requests must always be {@link CacheLiveDataAction.FLOW_THRU}.\n   */\n  FULFILL:   1,\n  /**\n   * @type {Number}\n   * @description Queue arriving live data that matches the topic, until the cache request\n   * completes. Note that wildcard cache requests must always be {@link\n   * solace.CacheLiveDataAction.FLOW_THRU}.\n   */\n  QUEUE:     2,\n  /**\n   * @type {Number}\n   * @description Continue the outstanding cache request while allowing live data to flow through to\n   * the application.\n   * Note that wildcard cache requests must always be {@link CacheLiveDataAction.FLOW_THRU}.\n   */\n  FLOW_THRU: 3,\n};\n\nmodule.exports.CacheLiveDataAction = Enum.new(CacheLiveDataAction);\n","/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. A CacheRequestResult object is\n * provided on the callback (see {@link solace.CacheCBInfo.cacheRequestCallback} when a cache\n * request completes.</b>\n *\n * An object that indicates the termination of a cache request, and provides details how it\n * concluded.\n * @memberof solace\n * @hideconstructor\n */\nclass CacheRequestResult {\n  /*\n   * @param {solace.CacheReturnCode} rc The result of the request.\n   *   * When returnCode === CacheReturnCode.OK, the applicable subcodes are:\n   *     * {@link CacheReturnSubcode.REQUEST_COMPLETE}\n   *     * {@link CacheReturnSubcode.LIVE_DATA_FULFILL}\n   *   * When returnCode === CacheReturnCode.FAIL, applicable subcodes are:\n   *     * {@link CacheReturnSubcode.ERROR_RESPONSE}\n   *     * {@link CacheReturnSubcode.INVALID_SESSION}\n   *     * {@link CacheReturnSubcode.REQUEST_ALREADY_IN_PROGRESS}\n   *   * When returnCode === CacheReturnCode.INCOMPLETE, applicable subcodes are:\n   *     * {@link CacheReturnSubcode.NO_DATA}\n   *     * {@link CacheReturnSubcode.REQUEST_TIMEOUT}\n   *     * {@link CacheReturnSubcode.SUSPECT_DATA}\n   *\n   * @param {solace.CacheReturnSubcode} subcode The subcode result of the request. Provides\n   *    details on the condition that caused the result.\n   * @param {solace.Destination} topic The topic destination on which the request was made.\n   * @param {String} error The error, if any, that caused the current result.\n   */\n  constructor(rc, subcode, topic, error) {\n    this._returnCode = rc;\n    this._subcode = subcode;\n    this._topic = topic;\n    this._error = error;\n  }\n\n  /**\n   * Gets the return code from the cache request result.\n   *\n   * @returns {solace.CacheReturnCode} The return code associated with the result of\n   * the request.\n   */\n  getReturnCode() {\n    return this._returnCode;\n  }\n\n  /**\n   * Gets the return subcode from the cache request result.\n   *\n   * @returns {solace.CacheReturnSubcode} A subcode that gives more detail than\n   * {@link CacheRequestResult#getReturnCode} about the result of the request.\n   */\n  getReturnSubcode() {\n    return this._subcode;\n  }\n\n  /**\n   * Gets the topic object associated with the cache request.\n   *\n   * @returns {solace.Destination} The topic destination supplied for the cache request.\n   */\n  getTopic() {\n    return this._topic;\n  }\n\n\n  /**\n   * Gets the error, if any, associated with the returned result.\n   *\n   * @returns {String} The error associated with the returned result.\n   */\n  getError() {\n    return this._error;\n  }\n}\n\nmodule.exports.CacheRequestResult = CacheRequestResult;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst CacheRequestType = {\n  INVALID:                       0,\n  BULK_MSG:                      1,\n  REGISTER_REQUEST:              2,\n  REGISTER_RESPONSE:             3,\n  HEARTBEAT_REQUEST:             4,\n  HEARTBEAT_RESPONSE:            5,\n  EVENT_NOTIFY:                  6,\n  EVENT_ACK:                     7,\n  ACTION_REQUEST:                8,\n  ACTION_RESPONSE:               9,\n  GET_REQUEST:                   10,\n  GET_RESPONSE:                  11,\n  GET_NEXT_REQUEST:              12,\n  GET_NEXT_RESPONSE:             13,\n  SET_REQUEST:                   14,\n  SET_RESPONSE:                  15,\n  GET_MSG_REQUEST:               16,\n  GET_MSG_RESPONSE:              17,\n  GET_NEXT_MSG_REQUEST:          18,\n  GET_NEXT_MSG_RESPONSE:         19,\n  UNREGISTER_IND:                20,\n  BULK_SET_REQUEST:              21,\n  BULK_SET_RESPONSE:             22,\n  PURGE_MSG_SEQUENCE_REQUEST:    23,\n  PURGE_MSG_SEQUENCE_RESPONSE:   24,\n  GET_MSG_SEQUENCE_REQUEST:      25,\n  GET_NEXT_MSG_SEQUENCE_REQUEST: 26,\n  GET_TOPIC_INFO_REQUEST:        27,\n  GET_TOPIC_INFO_RESPONSE:       28,\n  READY_MARKER:                  29,\n  GET_TOPIC_INFO_REQUEST_RANGE:  30,\n  SYNC_READY_MARKER:             31,\n  VACUUM_REQUEST:                32,\n  VACUUM_RESPONSE:               33,\n};\n\nmodule.exports.CacheRequestType = Enum.new(CacheRequestType);\n","const { CacheContext } = require('./cache-context');\nconst { LOG_DEBUG } = require('solclient-log');\n\nconst { CACHE_REQUEST_PREFIX } = CacheContext;\n\n/**\n * @private\n */\nclass CacheRequest {\n  /**\n   * @constructor\n   * @param {CacheSession} cacheSession The owning session\n   * @param {CacheRequestType} cacheMessageType The type of request\n   * @param {Number} requestID The ID for the request\n   * @param {CacheCBInfo} cbInfo Callback target\n   * @param {CacheLiveDataAction} liveDataAction Action on live data received\n   * @param {Topic} topic Associated topic\n   * @param {String} cacheName Associated remote cache name\n   * @private\n   */\n  constructor(cacheSession, cacheMessageType, requestID, cbInfo, liveDataAction, topic, cacheName) {\n    this.cacheSession = cacheSession;\n    this.cacheMessageType = cacheMessageType;\n    this.requestID = requestID;\n    this.cbInfo = cbInfo;\n    this.liveDataAction = liveDataAction;\n    this.topic = topic;\n    this.cacheName = cacheName;\n\n    this.subscriptionWaiting = null;\n    this.replyReceived = false;\n    this.dataReceived = false;\n    this.isSuspect = false;\n\n    this.correlationID = `${CACHE_REQUEST_PREFIX}${CacheContext.cacheRequestCorrelationId++}`;\n\n    this.childRequests = [];\n    this.parentRequest = null;\n\n    this.queuedLiveData = [];\n    this.liveDataFulfilled = false;\n\n    this.timeoutHandle = null;\n  }\n\n  /**\n   * @returns {CacheRequest} The root cache request in the current request tree\n   * @private\n   */\n  getRootRequest() {\n    if (!this.parentRequest) {\n      return this;\n    }\n    return this.parentRequest.getRootRequest();\n  }\n\n  /**\n   * @param {CacheRequest} childIn A request to make a descendant of this node in the request tree\n   * @private\n   */\n  addChild(childIn) {\n    if (!(childIn instanceof CacheRequest)) {\n      throw new Error(`Invalid child ${childIn}`);\n    }\n    if (childIn === this) {\n      throw new Error('Constructing circular child reference');\n    }\n    const child = childIn;\n    child.parentRequest = this;\n    this.childRequests.push(child);\n  }\n\n  /**\n   * @param {CacheRequest} childIn A request to remove as a descendant of this node\n   * @private\n   */\n  removeChild(childIn) {\n    if (childIn === this) {\n      throw new Error('Attempting to deconstruct invalid circular child reference');\n    }\n    const child = childIn;\n    const childIndex = this.childRequests.indexOf(child);\n    if (childIndex === -1) {\n      LOG_DEBUG(`Child ${child} not found in ${this}`);\n    }\n    this.childRequests.splice(childIndex, 1);\n    child.parentRequest = null;\n  }\n\n  /**\n   * @private\n   */\n  collapse() {\n    const parentRequest = this.parentRequest;\n    parentRequest.isSuspect = parentRequest.isSuspect || this.isSuspect;\n    parentRequest.dataReceived = parentRequest.dataReceived || this.dataReceived;\n    parentRequest.removeChild(this);\n  }\n\n  /**\n   * @private\n   */\n  cancel() {\n    if (this.parentRequest) {\n      this.collapse();\n    }\n\n    while (this.childRequests.length) {\n      const child = this.childRequests.shift();\n      if (child.childRequests) {\n        child.cancel();\n      }\n      this.removeChild(child);\n    }\n\n    this.clearRequestTimeout();\n  }\n\n  /**\n   * @returns {Number} The ID of this request\n   * @private\n   */\n  getRequestID() {\n    return this.requestID;\n  }\n\n\n  /**\n   * @returns {CacheCBInfo} The callback object for this request\n   * @private\n   */\n  getCBInfo() {\n    return this.cbInfo;\n  }\n\n  /**\n   * @returns {Topic} The topic for this request\n   * @private\n   */\n  getTopic() {\n    return this.topic;\n  }\n\n\n  /**\n   * @returns {CacheLiveDataAction} The live data action for this request\n   * @private\n   */\n  getLiveDataAction() {\n    return this.liveDataAction;\n  }\n\n  /**\n   * @param {function({solace.CacheRequest})} cacheSessionTimeoutCB Callback to notify on timeout\n   * @param {Number} timeoutMsec Timeout in milliseconds\n   * @private\n   */\n  startRequestTimeout(cacheSessionTimeoutCB, timeoutMsec) {\n    this.timeoutHandle = setTimeout(() => {\n      cacheSessionTimeoutCB(this);\n    }, timeoutMsec);\n  }\n\n  /**\n   * @private\n   */\n  clearRequestTimeout() {\n    if (this.timeoutHandle === null || this.timeoutHandle === undefined) {\n      return;\n    }\n\n    LOG_DEBUG(`Clearing timeout for ${this}`);\n    clearTimeout(this.timeoutHandle);\n    this.timeoutHandle = null;\n  }\n\n  /**\n   * Returns a string representing the request.\n   * @returns {String} A brief description of this object\n   */\n  toString() {\n    return `CacheRequest[correlationID=${this.correlationID\n        },requestID=${this.requestID\n        },cacheName=${this.cacheName\n        },topic=${this.topic.getName()}]`;\n  }\n\n}\n\n/**\n * @private\n */\nCacheRequest.VERSION = 1;\n\n/**\n * @private\n */\nCacheRequest.DEFAULT_REPLY_SIZE_LIMIT = 1000000;\n\n/**\n * @private\n */\nCacheRequest.REPLY_SIZE_LIMIT = CacheRequest.DEFAULT_REPLY_SIZE_LIMIT;\n\nmodule.exports.CacheRequest = CacheRequest;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of CacheReturnCode types.  The method {@link solace.CacheRequestResult#getReturnCode}\n * returns on of these basic results of a cache request.  More details are available in the\n * associated {@link solace.CacheReturnSubcode}, retrieved by\n * {@link solace.CacheRequestResult#getReturnSubcode}.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheReturnCode = {\n  /**\n   * @type {Number}\n   * @description The cache request succeeded.  See the subcode for more information.\n   */\n  OK:         1,\n  /**\n   * @type {Number}\n   * @description The cache request was not processed.  See the subcode for more information.\n   */\n  FAIL:       2,\n  /**\n   * @type {Number}\n   * @description The cache request was processed but could not be completed.  See the subcode for\n   * more information.\n   */\n  INCOMPLETE: 3,\n};\n\nmodule.exports.CacheReturnCode = Enum.new(CacheReturnCode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of CacheReturnSubcode types.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheReturnSubcode = {\n  /**\n   * @type {Number}\n   * @description\n   * The cache request completed successfully.\n   */\n  REQUEST_COMPLETE:            0,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request completed when live data arrived on the topic requested.\n   */\n  LIVE_DATA_FULFILL:           1,\n  /**\n   * @type {Number}\n   * @description\n   * The cache instance or session returned an error response to the cache request.\n   */\n  ERROR_RESPONSE:              2,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request failed because the {@link Session} used to construct it has been\n   * disposed.\n   */\n  INVALID_SESSION:             3,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request failed because the request timeout expired.\n   */\n  REQUEST_TIMEOUT:             4,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request was made on the same topic as an existing request, and\n   * {@link CacheLiveDataAction.FLOW_THRU} was not set.\n   */\n  REQUEST_ALREADY_IN_PROGRESS: 5,\n  /**\n   * @type {Number}\n   * @description\n   * The cache reply returned no data.\n   */\n  NO_DATA:                     6,\n  /**\n   * @type {Number}\n   * @description\n   * The cache reply returned suspect data.\n   */\n  SUSPECT_DATA:                7,\n  /**\n   * @type {Number}\n   * @description\n   * The request was terminated because the cache session was disposed.\n   */\n  CACHE_SESSION_DISPOSED:      8,\n  /**\n   * @type {Number}\n   * @description\n   * The request was terminated because the subscription request for the specified topic failed.\n   */\n  SUBSCRIPTION_ERROR:          9,\n};\n\nmodule.exports.CacheReturnSubcode = Enum.new(CacheReturnSubcode);\n","/**\n * @classdesc\n *\n * Encapsulates the properties of a cache session.\n *\n * @memberof solace\n *\n */\nclass CacheSessionProperties {\n\n   /**\n    * @constructor\n    *\n    * @param {String} cacheName A property that specifies the cache name to which CacheSession\n    *   operations should be sent.\n    * @param {Number} [maxAgeSec=0] The maximum allowable message age in seconds to deliver in\n    *   response to a cache request. 0 means no restriction on age.\n    * @param {Number} [maxMessages=1] The maximum number of messages per Topic to deliver in\n    *   response to cache requests. 0 means no restriction on the number of messages.\n    * @param {Number} [timeoutMsec=10000] The timeout period (in milliseconds) to wait for a\n    *   response from the cache. This is a protocol timer used internally by the API on each\n    *   message exchange with SolCache. A single call to\n    *   {@link solace.CacheSession#sendCacheRequest} may lead to many request-reply exchanges\n    *   with SolCache and so is not bounded by this timer as long as each internal request is\n    *   satisfied in time.\n    *   * The valid range for this property is >= 3000.\n    */\n  constructor(cacheName, maxAgeSec, maxMessages, timeoutMsec) {\n    /**\n     * @type {String}\n     *\n     * @description A property that specifies the cache name to which CacheSession operations should\n     * be sent.\n     */\n    this.cacheName = cacheName;\n\n    /**\n     * @type {Number}\n     *\n     * @description The maximum allowable message age in seconds to deliver in response to cache\n     * requests.  0 means no restriction on age.\n     *\n     * @default 0\n     */\n    this.maxAgeSec = maxAgeSec || 0;\n\n    /**\n     * @type {Number}\n     *\n     * @description The maximum number of messages per Topic to deliver in response to cache\n     * requests.  0 means no restriction on the number of messages.\n     *\n     * @default 1\n     */\n    this.maxMessages = (maxMessages === null || maxMessages === undefined) ? 1 : maxMessages;\n\n    /**\n     * @type {Number}\n     *\n     * @description The timeout for a cache request, in milliseconds.  The valid range for this\n     * property is >= 3000.\n     *\n     * @default 10000\n     */\n    this.timeoutMsec = timeoutMsec || 10000;\n\n    /**\n     * @private\n     * @type {Boolean}\n     * @description Whether to include other clusters in the request.\n     * @default true\n     */\n    this.includeOtherClusters = true;\n\n    /**\n     * @private\n     */\n    this.cachePrefix = '#P2P/CACHEINST/';\n  }\n\n  /**\n   * Gets the cache name to which {@link solace.CacheSession} requests should be sent, for\n   * sessions constructed using these properties.\n   *\n   * @returns {String} The cache name.\n   */\n  getCacheName() {\n    return this.cacheName;\n  }\n\n  /**\n   * Sets the cache name to which requests should be sent. Cannot be null or blank.\n   * @param {String} value The cache name to which requests should be sent.\n   */\n  setCacheName(value) {\n    this.cacheName = value;\n  }\n\n  /**\n   * Gets the maximum allowable message age for messages to be delivered in response to a request\n   * made on a {@link solace.CacheSession} that was constructed using these properties.  0 means no\n   * restriction on age.\n   *\n   * @returns {Number} The maximum allowable message age to be returned by an associated\n   * {@link solace.CacheSession}, or 0 for no restriction.\n   */\n  getMaxMessageAgeSec() {\n    return this.maxAgeSec;\n  }\n\n  /**\n   * Sets the maximum allowable message age. 0 means no restriction on age.\n   *\n   * @param {Number} value The maximum allowable message age, or 0 for no restriction.\n   */\n  setMaxMessageAgeSec(value) {\n    this.maxAgeSec = value;\n  }\n\n  /**\n   * Gets the maximum count of messages to be delivered, per {@link solace.Destination}, in\n   * response to a request issued on a {@link solace.CacheSession} constructed using these\n   * properties.  0 means no restriction on the number of messages.\n   *\n   * @returns {Number} The maximum number of messages per Topic to deliver, or 0 for no restriction.\n   */\n  getMaxMessages() {\n    return this.maxMessages;\n  }\n\n  /**\n   * Sets the maximum count of messages to be delivered per {@link solace.Destination} in response\n   * to a cache request. 0 means no restriction.\n   *\n   * @param {Number} value The maximum count of messages to deliver, or 0 for no restriction.\n   */\n  setMaxMessages(value) {\n    this.maxMessages = value;\n  }\n\n  /**\n   * Gets the timeout for requests issued on a {@link solace.CacheSession} constructed\n   * using these properties.\n   *  * The valid range is >= 3000.\n   *\n   * @returns {Number} The timeout, in milliseconds, for cache session requests.\n   */\n  getTimeoutMsec() {\n    return this.timeoutMsec;\n  }\n\n  /**\n   * Sets the timeout for requests.\n   *  * The valid range is >= 3000.\n   * @param {Number} value The timeout for requests.\n   */\n  setTimeoutMsec(value) {\n    this.timeoutMsec = value;\n  }\n\n}\n\nmodule.exports.CacheSessionProperties = CacheSessionProperties;\n","/**\n * A tuple associating subscriptions, correlation IDs and cache sessions.\n * @param {String} correlationID The correlation ID for this tuple\n * @param {Topic} topic The topic for this tuple\n * @param {CacheSession} cacheSession The cache session for this tuple\n * @private\n */\nclass CacheSessionSubscribeInfo {\n  constructor(correlationID, topic, cacheSession) {\n    Object.assign(this, {\n      correlationID,\n      topic,\n      cacheSession,\n    });\n  }\n}\n\nmodule.exports.CacheSessionSubscribeInfo = CacheSessionSubscribeInfo;\n","const MessageLib = require('solclient-message');\nconst SessionLib = require('solclient-session');\nconst SMFLib = require('solclient-smf');\nconst StatType = require('solclient-stats');\nconst {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n} = require('solclient-log');\nconst {\n  SDTField,\n  SDTFieldType,\n  SDTStreamContainer,\n} = require('solclient-sdt');\nconst { CacheCBInfo } = require('./cache-cb-info');\nconst { CacheContext } = require('./cache-context');\nconst { CacheGetResult } = require('./cache-get-result');\nconst { CacheLiveDataAction } = require('./cache-live-data-actions');\nconst { CacheRequest } = require('./cache-request');\nconst { CacheRequestResult } = require('./cache-request-result');\nconst { CacheRequestType } = require('./cache-request-types');\nconst { CacheReturnCode } = require('./cache-return-codes');\nconst { CacheReturnSubcode } = require('./cache-return-subcodes');\nconst { CacheSessionProperties } = require('./cache-session-properties');\nconst { CacheSessionSubscribeInfo } = require('./cache-session-subscribe-info');\nconst { Destination,\n        Topic } = require('solclient-destination');\n\nconst { CACHE_REQUEST_PREFIX } = CacheContext;\n\nconst noOp = () => undefined;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.Session#createCacheSession}</b>\n * <p>\n * A session for performing cache requests.\n *\n * Applications must use {@link solace.Session#createCacheSession} to construct this class.\n *\n * The supplied {@link solace.CacheSessionProperties} will be copied. Subsequent modifications\n * to the passed properties will not modify the session. The properties may be reused.\n *\n * @hideconstructor\n * @memberof solace\n */\nclass CacheSession {\n  /*\n   * @constructor\n   * @private\n   *\n   * @param {solace.CacheSessionProperties} props The properties for the cache session.\n   * @param {solace.Session} session The Session on which the CacheSession will issue\n   *  cache requests.\n   * @param {Object} privateInterface Private methods exposed to this CacheSession.\n   *\n   * @throws {solace.OperationError}\n   *  * if the parameters have an invalid type or value;\n   *    subcode {@link ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  constructor(props, session, privateInterface) {\n    CacheSession._validateProps(props);\n    const properties = new CacheSessionProperties(props.cacheName,\n                                                  props.maxAgeSec,\n                                                  props.maxMessages,\n                                                  props.timeoutMsec);\n    Object.assign(this,\n                  {\n                    _outstandingRequests:          {},\n                    _outstandingIDs:               {},\n                    _disposed:                     false,\n                    _nextMessageCallbackInfo:      null,\n                    _nextSessionEventCallbackInfo: null,\n                    _properties:                   properties,\n                    _session:                      session,\n                    _sessionIF:                    privateInterface,\n                  });\n    this._connectToSession(session);\n  }\n\n  /**\n   * @param {solace.Session} session The session to connect\n   * @private\n   */\n  _connectToSession(session) {\n    this._nextSessionEventCallbackInfo = session.getEventCBInfo();\n    this._nextMessageCallbackInfo = session.getMessageCBInfo();\n    session.setMessageCBInfo(new SessionLib.MessageRxCBInfo((_, message) => {\n      this._handleMessage(message);\n    }, this));\n    session.setEventCBInfo(this._createCompoundEventCB(this._nextSessionEventCallbackInfo));\n  }\n\n  /**\n   * Takes the session's existing event callback and sets it as the next delegate in a\n   * chain of responsibility. The next delegate could be the client application, or another\n   * cache session.\n   * @param {SessionEventCBInfo} nextDelegate The next event receiver in the chain\n   * @returns {SessionEventCBInfo} An event receiver that delegates to the supplied receiver\n   * @private\n   */\n  _createCompoundEventCB(nextDelegate) {\n    return new SessionLib.SessionEventCBInfo((session, sessionEvent, userObject, rfuObject) => {\n      this._handleSessionEvent(nextDelegate, session, sessionEvent, userObject, rfuObject);\n    }, null);\n  }\n\n  /**\n   * Modified chain of responsibility. Handles the event, then passes the event to the next\n   * delegate.\n   * @param {SessionEventCBInfo} nextDelegate The next delegate to notify\n   * @param {solace.Session} session The associated session\n   * @param {SessionEvent} sessionEvent The session event to dispatch\n   * @private\n   */\n  _handleSessionEvent(nextDelegate, session, sessionEvent /*, userObject, rfuObject */) {\n    const passEvent = this._processSessionEvent(session, sessionEvent);\n    if (!passEvent) {\n      return;\n    }\n    const cbUserObject = nextDelegate.userObject;\n    if (!cbUserObject) {\n      nextDelegate.sessionEventCBFunction(session, sessionEvent);\n    } else {\n      nextDelegate.sessionEventCBFunction(session, sessionEvent, cbUserObject);\n    }\n  }\n\n  /**\n   * @param {Message} message The message to forward\n   * @private\n   */\n  _sendToNextDelegate(message) {\n    const cbUserObject = this._nextMessageCallbackInfo.userObject;\n    if (!cbUserObject) {\n      this._nextMessageCallbackInfo.messageRxCBFunction(this._session, message);\n    } else {\n      this._nextMessageCallbackInfo.messageRxCBFunction(this._session, message, cbUserObject);\n    }\n  }\n\n  /**\n   * @param {solace.Session} session The associated session\n   * @param {SessionEvent} event The event to process\n   * @returns {Boolean} true if event should pass to next delegate\n   * @private\n   */\n  _processSessionEvent(session, event) {\n    switch (event.sessionEventCode) {\n      case SessionLib.SessionEventCode.SUBSCRIPTION_ERROR:\n      case SessionLib.SessionEventCode.SUBSCRIPTION_OK:\n        return this._checkSubscriptionStatus(event);\n      case SessionLib.SessionEventCode.DOWN_ERROR:\n        this.dispose();\n        return true;\n      default:\n        LOG_TRACE(`Unhandled session event: ${event.sessionEventCode}`);\n        return true;\n    }\n  }\n\n  /**\n   * @param {SessionEvent} event The event to check\n   * @returns {Boolean} `true` if event should pass to next delegate\n   * @private\n   */\n  _checkSubscriptionStatus(event) {\n    // Incremental checks for whether this is our subscription.\n    if ((event.correlationKey === null || event.correlationKey === undefined) ||\n        (!(event.correlationKey instanceof CacheSessionSubscribeInfo)) ||\n        (event.correlationKey.cacheSession !== this)) {\n      return true;\n    }\n    const request = this._getOutstandingRequest(event.correlationKey.correlationID);\n    if (!request) {\n      LOG_WARN(`No request found for subscription success on ${event.correlationKey.topic}`);\n      return true;\n    }\n    if (event.sessionEventCode === SessionLib.SessionEventCode.SUBSCRIPTION_OK) {\n      this._handleSubscriptionSuccess(request, event.correlationKey.topic);\n      return false;\n    }\n    this._handleSubscriptionError(request, event);\n    return false;\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The cache on which to register success\n   * @param {Topic} topic The topic on which to issue the request.\n   * @private\n   */\n  _handleSubscriptionSuccess(requestIn /*, topic */) {\n    // Null out this field and check completion status.\n    const request = requestIn;\n    request.subscriptionWaiting = null;\n    this._startCacheRequest(request);\n  }\n\n  /**\n   * @param {CacheRequest} request The cache request on which to register failure\n   * @private\n   */\n  _handleSubscriptionError(request/*, event */) {\n    this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.SUBSCRIPTION_ERROR);\n  }\n\n  /**\n   * @param {CacheRequest} request The cache request on which to check completion\n   * @private\n   */\n  _checkRequestCompletion(request) {\n    if (request.childRequests.length) {\n      // Not finished with spawned child requests.\n      LOG_DEBUG(`Awaiting termination of ${request.childRequests.length} children`);\n      return;\n    }\n    if (request.subscriptionWaiting) {\n      // Waiting for confirmation of subscription to a topic.\n      LOG_DEBUG('Awaiting subscription');\n      return;\n    }\n    if (request.timeoutHandle !== null && (!request.replyReceived)) {\n      LOG_DEBUG('Awaiting timeout');\n      return;\n    }\n    if (request.parentRequest) {\n      // We're no longer waiting for a child to complete.\n      const parent = request.parentRequest;\n      request.cancel();\n      this._unregisterRequest(request);\n      this._checkRequestCompletion(parent);\n      return;\n    }\n\n    // This is a parent request and it is done.\n    let code;\n    let subcode;\n    if (request.isSuspect) {\n      code = CacheReturnCode.INCOMPLETE;\n      subcode = CacheReturnSubcode.SUSPECT_DATA;\n    } else if (request.dataReceived) {\n      code = CacheReturnCode.OK;\n      if (request.liveDataFulfilled) {\n        subcode = CacheReturnSubcode.LIVE_DATA_FULFILL;\n      } else {\n        subcode = CacheReturnSubcode.REQUEST_COMPLETE;\n      }\n    } else if (request.replyReceived) {\n      code = CacheReturnCode.INCOMPLETE;\n      subcode = CacheReturnSubcode.NO_DATA;\n    } else {\n      throw new Error('Sanity: should never happen');\n    }\n    this._terminateRequest(request, code, subcode);\n  }\n\n  /**\n   * @param {CacheRequest} parentRequest The parent node for the new request\n   * @param {CacheGetResult} cacheGetResult The result of this request\n   * @private\n   */\n  _sendSeeOther(parentRequest, cacheGetResult) {\n    const clusterName = cacheGetResult.clusterNameStream.getNext().getValue();\n    // var root = parentRequest.getRootRequest();\n    LOG_DEBUG(`See Other for ${clusterName}. Sending child request`);\n    const childRequest = new CacheRequest(this,\n                                          CacheRequestType.GET_MSG_REQUEST,\n                                          parentRequest.requestID,\n                                          new CacheCBInfo(noOp, null),\n                                          parentRequest.liveDataAction,\n                                          parentRequest.topic,\n                                          clusterName);\n    // Add this request to its parent\n    parentRequest.addChild(childRequest);\n    // Start the request\n    this._registerRequest(childRequest);\n    childRequest.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                     this._properties.timeoutMsec);\n    this._startCacheRequest(childRequest, // request to send\n                            null, // no session ID\n                            null, // no specific instance target\n                            true); // don't return other clusters\n  }\n\n  /**\n   * @param {CacheRequest} parentRequest The parent node for the new request\n   * @param {CacheGetResult} cacheGetResult The result of this request\n   * @private\n   */\n  _sendGetNext(parentRequest, cacheGetResult) {\n    LOG_DEBUG('Cache result has more, sending GET_NEXT_MSG_REQUEST as child');\n    // This is how to trigger \"Invalid Session\":\n    //require(\"child_process\").execSync('sleep 11');\n    const nextRequest = new CacheRequest(this,\n                                         CacheRequestType.GET_NEXT_MSG_REQUEST,\n                                         parentRequest.requestID,\n                                         new CacheCBInfo(noOp, null),\n                                         parentRequest.liveDataAction,\n                                         parentRequest.topic,\n                                         parentRequest.cacheName);\n    // Set up parent-child relationship\n    parentRequest.addChild(nextRequest);\n    // Start the request\n    this._registerRequest(nextRequest);\n    nextRequest.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                    this._properties.timeoutMsec);\n    this._startCacheRequest(nextRequest, // request to send\n                            cacheGetResult.sessionID, // supplied session ID\n                            cacheGetResult.replyTo); // supplied cache instance target\n  }\n\n  /**\n   * @param {Message} message The message to inspect and handle\n   * @private\n   */\n  _handleMessage(message) {\n    // Determine if the message is associated with one of this session's requests\n    const correlationID = message.getCorrelationId();\n    const request = correlationID === null || correlationID === undefined\n      ? null\n      : this._outstandingRequests[correlationID];\n\n    // This could be live data on a relevant topic.  Check that.\n    if (!request) {\n      if (this._relevantLiveData(message)) {\n        this._sendToNextDelegate(message);\n      }\n      return;\n    }\n\n    // It's ours!\n    LOG_DEBUG(`Processing reply to ${request}`);\n    // bug 36404: We have a response. Cancel the timeout for this request.\n    request.clearRequestTimeout();\n    const streamField = message.getSdtContainer();\n    const stream = streamField && streamField.getValue();\n    if (!stream) {\n      LOG_INFO(\n        `Invalid message format for cache response: no SDT container (${\n        streamField}) or stream (${stream})`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE);\n    }\n    // The session will never see this reply, so we need to update the stats\n    // from here.\n    this._incStat(StatType.RX_REPLY_MSG_RECVED);\n    request.replyReceived = true;\n\n    // If the request was fulfilled by live data, discard the reply and stop processing\n    // the response.\n    if (request.getRootRequest().liveDataFulfilled) {\n      this._incStat(StatType.CACHE_REQUEST_FULFILL_DISCARD_RESPONSE);\n      this._checkRequestCompletion(request);\n      return;\n    }\n\n    if (!stream) {\n      LOG_INFO('Invalid cache response did not fulfill request. Skipping response processing');\n      return;\n    }\n\n    try {\n      // Fill the result object with values from the result stream.\n      const result = new CacheGetResult();\n      result.readFromStream(stream);\n      result.replyTo = message.getReplyTo();\n      if (result.responseString) {\n        LOG_DEBUG(`Cluster response: ${result.responseString}`);\n      }\n        if (result.responseCode === 7 || result.responseString == \"Invalid Session\") {\n          LOG_INFO(`Cluster response indicates invalid session: ${result.responseString} code: ${result.responseCode}`);\n          this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.INVALID_SESSION);\n        }\n      // Apply the isSuspect flag. Don't clear it if the result is already suspect.\n      request.isSuspect = request.isSuspect || result.isSuspect;\n      // Get any inner messages.\n      const messages = CacheSession._decodeMessageStream(request, result);\n      // Update statistics.\n      this._incStat(StatType.RX_CACHE_MSG, messages.length);\n      // If we have more results to come, send a get next request.\n      if (result.hasMore) {\n        this._sendGetNext(request, result);\n      }\n      // If we have more clusters to visit, send requests to those clusters.\n      if (result.clusterNameStream) {\n        LOG_DEBUG('Receiving cluster stream');\n        while (result.clusterNameStream.hasNext()) {\n          this._sendSeeOther(request, result);\n        }\n      }\n      // Forward any retrieved messages.\n      if (messages) {\n        messages.forEach((m) => {\n          this._sendToNextDelegate(m);\n        });\n      }\n      this._checkRequestCompletion(request);\n    } catch (exception) {\n      LOG_INFO(`Invalid message format for cache response: ${exception.stack}`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE);\n    }\n  }\n\n  /**\n   * @param {Message} message The message to inspect and handle\n   * @returns {Boolean} `true` if the next delegate should handle this message\n   * @private\n   */\n  _relevantLiveData(message) {\n    // If the next message processor does not belong to a cache\n    // session, and this is a CRQ message, suppress it.\n    if (message.getCorrelationId() &&\n        message.getCorrelationId().startsWith(CACHE_REQUEST_PREFIX) &&\n        !(this._nextMessageCallbackInfo.userObject instanceof CacheSession)) {\n      LOG_WARN('DROP: Dropping CRQ reply due to no remaining Cache Session processors on message ' +\n               'callback chain');\n      this._incStat(StatType.RX_REPLY_MSG_DISCARD);\n      return false;\n    }\n    // Otherwise, assume the message should flow through.\n    // If all _performLiveDataAction calls return true, we return true;\n    return Object.keys(this._outstandingRequests).every(checkCID =>\n      this._performLiveDataAction(this._outstandingRequests[checkCID], message));\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The cache request for which to perform the action\n   * @param {Message} message The message to process on the request\n   * @returns {Boolean} true if message should flow through after action.\n   * @private\n   */\n  _performLiveDataAction(requestIn, message) {\n    const request = requestIn;\n    request.dataReceived = true;\n    switch (request.liveDataAction) {\n      case CacheLiveDataAction.QUEUE:\n        request.queuedLiveData.push(message);\n        return false;\n\n      case CacheLiveDataAction.FULFILL:\n        if (!request.liveDataFulfilled) {\n          this._fulfillRequest(request);\n        }\n        return true;\n\n      default:\n        return true;\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request to fulfill\n   * @private\n   */\n  _fulfillRequest(requestIn) {\n    const request = requestIn;\n    request.liveDataFulfilled = true;\n    this._trackCompletionStats(CacheReturnCode.OK, CacheReturnSubcode.LIVE_DATA_FULFILL);\n    // We have more work to do here -- we need to return the live data first.\n    // Schedule the notification for later.\n    setTimeout(() => {\n      CacheSession._notifyCallback(request,\n                                   CacheReturnCode.OK,\n                                   CacheReturnSubcode.LIVE_DATA_FULFILL,\n                                   request.getTopic(),\n                                   null);\n    }, 0);\n  }\n\n  /**\n   * Disposes the session.  No cache requests will be sent by this CacheSession after it is\n   * _disposed.\n   *\n   * Any subsequent operations on the session will throw {OperationError}.\n   *\n   * Any pending operations will immediately terminate, returning\n   *   * {@link solace.CacheRequestResult}\n   *     * #returnCode === {@link solace.CacheReturnCode.INCOMPLETE}\n   *     * #subcode === {@link solace.CacheReturnSubcode.CACHE_SESSION_DISPOSED}\n   * @throws {solace.OperationError} if the CacheSession is already _disposed.\n   */\n  dispose() {\n    const toTerminate = Object.keys(this._outstandingRequests)\n      .map(correlationID => this._outstandingRequests[correlationID])\n      .filter(request => request instanceof CacheRequest);\n    toTerminate.forEach((request) => {\n      this._terminateRequest(request,\n                             CacheReturnCode.INCOMPLETE,\n                             CacheReturnSubcode.CACHE_SESSION_DISPOSED);\n    });\n    this._outstandingRequests = [];\n    // Restore original listeners\n    this._session.setEventCBInfo(this._nextSessionEventCallbackInfo);\n    this._session.setMessageCBInfo(this._nextMessageCallbackInfo);\n    // Set _disposed\n    this._disposed = true;\n  }\n\n  /**\n   * Gets the cache session properties.\n   *\n   * @returns {solace.CacheSessionProperties} The properties for the session.\n   * @throws {solace.OperationError} if the CacheSession is disposed.\n   */\n  getProperties() {\n    return this._properties;\n  }\n\n  /**\n   * Issues an asynchronous cache request. The result of the request will be returned via the\n   * listener. Messages returned as a result of issuing the request will be returned to the\n   * application via the {@link solace.MessageRxCBInfo} associated with this\n   * {@link solace.CacheSession}'s {@link solace.Session}\n   *\n   * @param {Number} requestID The application-assigned ID number for the request.\n   * @param {solace.Destination} topic The topic destination for which the cache request will be\n   *    made.\n   * @param {Boolean} subscribe If true, the session will subscribe to the given {Topic}, if it is\n   * not already subscribed, before performing the cache request.\n   * @param {solace.CacheLiveDataAction} liveDataAction The action to perform when the\n   *    {@link solace.CacheSession} receives live data on the given topic.\n   * @param {solace.CacheCBInfo} cbInfo Callback info for the cache request.\n   *\n   * @throws {solace.OperationError} In the following cases:\n   * * If the CacheSession is disposed.\n   *    Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * If one or more parameters were invalid.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}\n   * * If the supplied topic and live data action cannot be combined.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n   * * If the supplied topic or live data action cannot be used given the current outstanding\n   *    requests.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n   */\n  sendCacheRequest(requestID, topic, subscribe, liveDataAction, cbInfo) {\n    if (arguments.length !== 5) {\n      throw new OperationError(`sendCacheRequest() invoked with an illegal argument count of ${\n        arguments.length}`);\n    }\n    if (typeof subscribe !== 'boolean') {\n      throw new OperationError(\n        `Invalid subscribe flag argument, should be a boolean but was ${typeof subscribe}`);\n    }\n    if (typeof requestID !== 'number' || Number.isNaN(requestID)) {\n      throw new OperationError('Invalid requestID', ErrorSubcode.PARAMETER_INVALID_TYPE, null);\n    }\n    if (this._outstandingIDs[requestID]) {\n      throw new OperationError('Request already in progress with this requestID');\n    }\n    if (!(topic instanceof Destination)) {\n      throw new OperationError('Invalid topic', ErrorSubcode.PARAMETER_INVALID_TYPE, (typeof topic));\n    }\n    topic.validate();\n    if (!(liveDataAction === CacheLiveDataAction.FLOW_THRU || liveDataAction ===\n        CacheLiveDataAction.FULFILL || liveDataAction === CacheLiveDataAction.QUEUE)) {\n      throw new OperationError('Invalid live data action', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (topic.isWildcarded() && liveDataAction !== CacheLiveDataAction.FLOW_THRU) {\n      throw new OperationError('Wildcarded topic not supported for this live data action',\n        ErrorSubcode.PARAMETER_CONFLICT);\n    }\n    if (!(cbInfo instanceof CacheCBInfo)) {\n      throw new OperationError('Callback info was not an instance of CacheCBInfo');\n    }\n    if (this._disposed) {\n      CacheSession._notifyCallbackError(cbInfo, requestID, CacheReturnCode.FAIL,\n                                        CacheReturnSubcode.CACHE_SESSION_DISPOSED, topic,\n                                        'Cache request failed: the cache session is disposed.');\n      return;\n    }\n    if (this._session._disposed) {\n      CacheSession._notifyCallbackError(cbInfo, requestID, CacheReturnCode.FAIL,\n                                        CacheReturnSubcode.INVALID_SESSION, topic,\n                                        'Cache request failed: the session is disposed.');\n      return;\n    }\n\n    const request = new CacheRequest(this,\n      CacheRequestType.GET_MSG_REQUEST,\n      requestID,\n      cbInfo,\n      liveDataAction,\n      topic,\n      this._properties.cacheName);\n\n    const matchingRequestKeys = Object.keys(this._outstandingRequests).filter(key =>\n      this._outstandingRequests[key].topic.getName() === topic.getName());\n\n    if (matchingRequestKeys.length) {\n      // Topic name matches mean a conflict unless both requests are FLOW_THRU\n      const conflictKeys = (\n        liveDataAction !== CacheLiveDataAction.FLOW_THRU\n          ? matchingRequestKeys\n          : matchingRequestKeys.filter(k =>\n            this._outstandingRequests[k].liveDataAction !== CacheLiveDataAction.FLOW_THRU));\n      if (conflictKeys.length) {\n        const conflictRequest = this._outstandingRequests[conflictKeys[0]];\n        LOG_WARN(`Existing request ${conflictRequest} conflicts. Rejecting request ${request}`);\n         // Register this request so that it is not dismissed as an orphan.\n        this._registerRequest(request);\n        this._terminateRequest(request,\n                               CacheReturnCode.FAIL,\n                               CacheReturnSubcode.REQUEST_ALREADY_IN_PROGRESS);\n        return;\n      }\n    }\n\n    this._registerRequest(request);\n    request.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                this._properties.timeoutMsec);\n    if (subscribe) {\n      const waitingForSubscribeInfo = new CacheSessionSubscribeInfo(request.correlationID, topic,\n        this);\n      request._subscriptionWaiting = waitingForSubscribeInfo;\n      this._session.subscribe(topic, true, waitingForSubscribeInfo);\n      return;\n    }\n    this._startCacheRequest(request);\n  }\n\n  /**\n   * @param {solace.Session} session The session associated with the request\n   * @param {SessionEvent} sessionEvent The session event\n   * @param {CacheRequest} userObject The user-specified context object\n   * @private\n   */\n  _handleCacheRequestFailed(session, sessionEvent, userObject /*, rfuObject */) {\n    this._terminateRequest(userObject.getRequestID(),\n                           CacheReturnCode.FAIL,\n                           CacheReturnSubcode.ERROR_RESPONSE);\n  }\n\n  /**\n   * @param {CacheRequest} request The new request to register\n   * @private\n   */\n  _registerRequest(request) {\n    this._outstandingRequests[request.correlationID] = request;\n    if (!request.parentRequest) {\n      this._outstandingIDs[request.requestID] = request;\n    }\n  }\n\n  /**\n   * @param {Number} correlationID The ID of an existing request\n   * @returns {CacheRequest} The existing request with the given ID\n   * @private\n   */\n  _getOutstandingRequest(correlationID) {\n    return this._outstandingRequests[correlationID];\n  }\n\n  /**\n   *\n   * @param {CacheRequest} request The request to start\n   * @param {?Number} sessionID Only when returned from a cache instance as part of a\n   * previous message\n   * @param {?Topic} destination Only when required by a cache reply\n   * @param {?Boolean} suppressClusters True when other clusters should be excluded from\n   * the response, as in a request resulting from a \"see other\"\n   * @private\n   */\n  _startCacheRequest(request, sessionID, destination, suppressClusters) {\n    const message = new MessageLib.Message();\n\n    // Prepare message\n    message.setCorrelationId(request.correlationID);\n    if (destination) {\n      message.setDestination(destination);\n    } else {\n      message.setDestination(\n        Topic.createFromName(this._properties.cachePrefix + request.cacheName));\n    }\n    message.setReplyTo(Topic.createFromName(this._session.getSessionProperties().p2pInboxInUse));\n    message.setDeliverToOne(request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST);\n\n    // Prepare stream container\n    const stream = new SDTStreamContainer();\n    stream.addField(SDTFieldType.UINT32, request.cacheMessageType);\n    stream.addField(SDTFieldType.UINT32, CacheRequest.VERSION);\n    stream.addField(SDTFieldType.STRING, request.topic.getName());\n    stream.addField(SDTFieldType.UINT32, CacheRequest.REPLY_SIZE_LIMIT);\n\n    if (typeof sessionID === 'number') {\n      LOG_DEBUG(`Including session ID: ${sessionID}`);\n      stream.addField(SDTFieldType.UINT32, sessionID);\n    }\n\n    stream.addField(SDTFieldType.UINT32, this._properties.maxMessages);\n    stream.addField(SDTFieldType.UINT32, this._properties.maxAgeSec);\n    if (request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST) {\n      stream.addField(SDTFieldType.BOOL,\n                      this._properties.includeOtherClusters && (!suppressClusters));\n    }\n\n    stream.addField(SDTFieldType.BOOL, false); // includeTimestamps, 6.17.1\n    if (request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST) {\n      stream.addField(SDTFieldType.UINT32, Math.round(this._properties.timeoutMsec / 1000));\n    }\n\n    // Load stream container\n    message.setSdtContainer(SDTField.create(SDTFieldType.STREAM, stream));\n    try {\n      LOG_DEBUG(`Sending ${request}`);\n      this._session.send(message);\n\n      if (!request.parentRequest) { // Don't count child requests in CACHE_REQUEST_SENT total\n        this._incStat(StatType.CACHE_REQUEST_SENT);\n      }\n    } catch (e) {\n      LOG_INFO(`Failed to send request: ${e.message}`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE, e);\n    }\n  }\n\n  /**\n   * Increments a stat.\n   * @param  {String} statType The stat to increment\n   * @param  {Number} value    The amount by which to increment the state\n   * @private\n   */\n  _incStat(statType, value) {\n    if (!this._session) {\n      LOG_DEBUG(\"Can't log stat: session is disposed\");\n      return;\n    }\n    if (!this._sessionIF) {\n      LOG_INFO(\"Can't log stat: session statistics not available\");\n      return;\n    }\n    this._sessionIF.incStat(statType, value);\n  }\n\n  /**\n   * Unregisters the given request.\n   * @param  {CacheRequest} request The request to unreguster\n   * @private\n   */\n  _unregisterRequest(request) {\n    delete this._outstandingRequests[request.correlationID];\n    delete this._outstandingIDs[request.requestID];\n  }\n\n  /**\n   * @param {CacheReturnCode} returnCode The return code for this completion\n   * @param {CacheReturnSubcode} subcode The subcode for this completion\n   * @private\n   */\n  _trackCompletionStats(returnCode, subcode) {\n    switch (returnCode) {\n      case CacheReturnCode.OK:\n        this._incStat(StatType.CACHE_REQUEST_OK_RESPONSE);\n        if (subcode === CacheReturnSubcode.LIVE_DATA_FULFILL) {\n          this._incStat(StatType.CACHE_REQUEST_LIVE_DATA_FULFILL);\n        }\n        break;\n      case CacheReturnCode.INCOMPLETE:\n        this._incStat(StatType.CACHE_REQUEST_INCOMPLETE_RESPONSE);\n        break;\n      case CacheReturnCode.FAIL:\n        this._incStat(StatType.CACHE_REQUEST_FAIL_RESPONSE);\n        break;\n      default:\n        throw new Error('Sanity: no return code supplied');\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request to terminate\n   * @param {CacheReturnCode} returnCode The return code for this operation\n   * @param {CacheReturnSubcode} subcode The subcode for this operation\n   * @param {Error} error Any error associated with this operation\n   * @private\n   */\n  _terminateRequest(requestIn, returnCode, subcode, error) {\n    const request = requestIn.getRootRequest();\n    if (!this._outstandingRequests[request.correlationID]) {\n      // Request is unknown or was previously terminated\n      return;\n    }\n    const cbInfo = request.cbInfo;\n    if (!cbInfo) {\n      LOG_WARN(`No callback info provided for ${request}. Cannot notify`);\n      return; // Cannot continue\n    }\n    const callback = cbInfo.getCallback();\n    if (!callback) {\n      LOG_WARN(`No callback provided for ${request}. Cannot notify`);\n      return; // Cannot continue\n    }\n    const topic = request.getTopic();\n    if (!topic) {\n      LOG_WARN(`No topic provided for ${request}`);\n    }\n    request.queuedLiveData.forEach(data => this._sendToNextDelegate(data));\n\n    // Unregister before callback so that the client application can treat the request ID\n    // as \"freed\" and reuse it\n    request.cancel();\n    this._unregisterRequest(request);\n\n    if (!request.liveDataFulfilled) {\n      // All of this has already been done on fulfill.\n      this._trackCompletionStats(returnCode, subcode);\n      CacheSession._notifyCallback(request, returnCode, subcode, topic, error);\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request with a result to decode\n   * @param {CacheGetResult} result The result to decode\n   * @returns {Array.<Message>} The messages contained in the result\n   * @private\n   */\n  static _decodeMessageStream(requestIn, result) {\n    if (!result.messageStream) {\n      return [];\n    }\n\n    LOG_DEBUG('Receiving messages');\n    const messages = [];\n    const request = requestIn;\n    while (result.messageStream.hasNext()) {\n      request.dataReceived = true;\n      const data = result.messageStream.getNext().getValue();\n      const innerMessage = SMFLib.Codec.Decode.decodeCompoundMessage(data, 0);\n      if (!innerMessage) {\n        continue;\n      }\n      const cacheStatus = result.isSuspect\n        ? MessageLib.MessageCacheStatus.SUSPECT\n        : MessageLib.MessageCacheStatus.CACHED;\n      innerMessage._setCacheStatus(cacheStatus);\n      innerMessage._setCacheRequestID(request.requestID);\n      messages.push(innerMessage);\n    }\n    LOG_DEBUG(`${messages.length} cached messages received`);\n    return messages;\n  }\n\n  /**\n   * Closure call context; `this` will be redefined\n   * @param {CacheRequest} cacheRequest The request that timed out\n   * @private\n   */\n  static _handleCacheRequestTimeout(cacheRequest) {\n    const context = cacheRequest.cacheSession;\n    if (!context._getOutstandingRequest(cacheRequest.correlationID)) {\n      LOG_INFO(`Timeout for ${cacheRequest} was not unregistered. Ignoring`);\n      // already completed\n      return;\n    }\n\n    // bug 36404: Cache request timeout is to be interpreted as timeout per session request-reply,\n    // not timeout per cache request-reply.\n    // Implementation: Timeouts on parent requests are cancelled when a child request is spawned.\n    // Timeouts on child requests cause the root request to fail.\n    LOG_INFO(`Request ${cacheRequest} timed out`);\n    context._terminateRequest(cacheRequest.getRootRequest(), CacheReturnCode.INCOMPLETE,\n                              CacheReturnSubcode.REQUEST_TIMEOUT);\n  }\n\n\n  /**\n   * @param {CacheRequest} request The request that is notifying\n   * @param {CacheReturnCode} returnCode The return code for the notification\n   * @param {CacheReturnSubcode} subcode The subcode for the notification\n   * @param {Destination} topic The topic associated with the notification\n   * @param {Error} error Any error associated with the notification\n   * @private\n   */\n  static _notifyCallback(request, returnCode, subcode, topic, error) {\n    const cbInfo = request.cbInfo;\n    const callback = cbInfo.getCallback();\n    callback(request.requestID,\n             new CacheRequestResult(returnCode, subcode, topic, error),\n             cbInfo.getUserObject());\n  }\n\n  /**\n   * @param {solace.CacheCBInfo} cbInfo Callback info for the cache request.\n   * @param {Number} requestID The application-assigned ID number for the request\n   * @param {CacheReturnCode} returnCode The return code for the notification\n   * @param {CacheReturnSubcode} subcode The subcode for the notification\n   * @param {Destination} topic The topic associated with the notification\n   * @param {Error} error Any error associated with the notification\n   * @private\n   */\n  static _notifyCallbackError(cbInfo, requestID, returnCode, subcode, topic, error) {\n    const callback = cbInfo.getCallback();\n    callback(requestID,\n             new CacheRequestResult(returnCode, subcode, topic, error),\n             cbInfo.getUserObject());\n  }\n\n  /**\n   * Validates the cache session properties.\n   * @param {solace.CacheSessionProperties} props The properties to validate\n   * @private\n   */\n  static _validateProps(props) {\n    if ((typeof (props.cacheName) !== 'string')) {\n      throw new OperationError('Invalid parameter type for cacheName', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    // Create from name will throw if the cacheName is invalid.  This performs more checking than\n    // the legacy API did, but I think it is all justified as we shouldn't be able to use anything\n    // that would be rejected here as a cacheName.\n    if (Topic.createFromName(props.cacheName).isWildcarded()) {\n      throw new OperationError(\n        `Invalid cacheName '${props.cacheName}'. The cacheName cannot be wildcarded`,\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.maxAgeSec) !== 'number')) {\n      throw new OperationError('Invalid parameter type for maxAgeSec', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.maxAgeSec < 0) {\n      throw new OperationError('Invalid value for maxAgeSec; must be >= 0', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.maxMessages) !== 'number')) {\n      throw new OperationError('Invalid parameter type for maxMessages', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.maxMessages < 0) {\n      throw new OperationError('Invalid value for maxMessages; must be >= 0', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.timeoutMsec) !== 'number')) {\n      throw new OperationError('Invalid parameter type for timeoutMsec', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.timeoutMsec < 3000) {\n      throw new OperationError('Invalid value for timeoutMsec; must be >= 3000', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  }\n\n}\n\nmodule.exports.CacheSession = CacheSession;\n","const { Stats } = require('./lib/stats.js');\nconst { StatsByMode } = require('./lib/stat-bymode');\nconst { StatType } = require('./lib/stat-types');\n\nmodule.exports = {\n  Stats,\n  StatType,\n  StatsByMode,\n};\n","const { StatType } = require('./stat-types');\n\nmodule.exports = {\n  StatsByMode: {\n    STAT_TX_BYMODE_MSGS: [\n      StatType.TX_DIRECT_MSGS,\n      StatType.TX_PERSISTENT_MSGS,\n      StatType.TX_NONPERSISTENT_MSGS,\n    ],\n    STAT_TX_BYMODE_BYTES: [\n      StatType.TX_DIRECT_BYTES,\n      StatType.TX_PERSISTENT_BYTES,\n      StatType.TX_NONPERSISTENT_BYTES,\n    ],\n    STAT_TX_BYMODE_REDELIVERED: [\n      StatType.TX_DIRECT_MSGS,     // unused placeholder, direct messsages are not redelivered\n      StatType.TX_PERSISTENT_REDELIVERED,\n      StatType.TX_NONPERSISTENT_REDELIVERED,\n    ],\n    STAT_TX_BYMODE_BYTES_REDELIVERED: [\n      StatType.TX_DIRECT_BYTES,     // unused placeholder, direct messsages are not redelivered\n      StatType.TX_PERSISTENT_BYTES_REDELIVERED,\n      StatType.TX_NONPERSISTENT_BYTES_REDELIVERED,\n    ],\n    STAT_RX_BYMODE_MSGS: [\n      StatType.RX_DIRECT_MSGS,\n      StatType.RX_PERSISTENT_MSGS,\n      StatType.RX_NONPERSISTENT_MSGS,\n    ],\n    STAT_RX_BYMODE_BYTES: [\n      StatType.RX_DIRECT_BYTES,\n      StatType.RX_PERSISTENT_BYTES,\n      StatType.RX_NONPERSISTENT_BYTES,\n    ],\n  },\n};\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Statistics for sent/received messages and control operations.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst StatType = {\n\n  // ------- SMF and Direct Messaging\n\n  /**\n   * Count of bytes sent as part of data messages.\n   */\n  TX_TOTAL_DATA_BYTES:            0,\n  /**\n   * Count of data messages sent.\n   */\n  TX_TOTAL_DATA_MSGS:             1,\n  /**\n   * Count of bytes sent as part of direct data messages.\n   */\n  TX_DIRECT_BYTES:                2,\n  /**\n   * Count of direct data messages sent.\n   */\n  TX_DIRECT_MSGS:                 3,\n  /**\n   * Count of bytes sent as part of control messages.\n   */\n  TX_CONTROL_BYTES:               4,\n  /**\n   * Count of control messages sent.\n   */\n  TX_CONTROL_MSGS:                5,\n  /**\n   * Count of request messages sent.\n   */\n  TX_REQUEST_SENT:                6,\n  /**\n   * Count of request timeouts that occurred.\n   */\n  TX_REQUEST_TIMEOUT:             7,\n  /**\n   * Count of bytes received as part of data messages.\n   */\n  RX_TOTAL_DATA_BYTES:            8,\n  /**\n   * Count of data messages received.\n   */\n  RX_TOTAL_DATA_MSGS:             9,\n  /**\n   * Count of bytes received as part of direct data messages.\n   */\n  RX_DIRECT_BYTES:                10,\n  /**\n   * Count of direct data messages received.\n   */\n  RX_DIRECT_MSGS:                 11,\n  /**\n   * Count of bytes received as part of control messages.\n   */\n  RX_CONTROL_BYTES:               12,\n  /**\n   * Count of control messages received.\n   */\n  RX_CONTROL_MSGS:                13,\n  /**\n   * Count discard message indications received on incoming messages.\n   */\n  RX_DISCARD_MSG_INDICATION:      14,\n  /**\n   * Count of reply messaged received.\n   */\n  RX_REPLY_MSG_RECVED:            15,\n  /**\n   * Count of received reply messages that were discarded.\n   */\n  RX_REPLY_MSG_DISCARD:           16,\n  /**\n   * @description\n   * Count of messages discarded due to the presence of an unknown element or\n   * unknown protocol in the SMF header.\n   */\n  RX_DISCARD_SMF_UNKNOWN_ELEMENT: 17,\n\n  // ------- SolCache Session\n\n  /**\n   * @description\n   * Count of cache requests sent. One conceptual request (i.e. one API call)\n   * may involve many requests and replies.\n   */\n  CACHE_REQUEST_SENT:                     18,\n  /**\n   * @description\n   * Count of OK responses to cache requests.\n   */\n  CACHE_REQUEST_OK_RESPONSE:              19,\n  /**\n   * @description\n   * Count of cache requests that returned a failure response.\n   */\n  CACHE_REQUEST_FAIL_RESPONSE:            20,\n  /**\n   * @description\n   * Count of cache replies discarded because a request has been fulfilled.\n   */\n  CACHE_REQUEST_FULFILL_DISCARD_RESPONSE: 21,\n  /**\n   * @description\n   * Count of cached messages delivered to the application.\n   */\n  RX_CACHE_MSG:                           22,\n  /**\n   * @description\n   * Count of cache requests that were incomplete.\n   */\n  CACHE_REQUEST_INCOMPLETE_RESPONSE:      23,\n  /**\n   * @description\n   * The cache session operation completed when live data arrived on the requested topic.\n   */\n  CACHE_REQUEST_LIVE_DATA_FULFILL:        24,\n\n  // ------ Guaranteed Messaging\n\n  /**\n   * Count of bytes sent as part of persistent data messages.\n   */\n  TX_PERSISTENT_BYTES:                25,\n  /**\n   * Count of persistent data messages sent.\n   */\n  TX_PERSISTENT_MSGS:                 26,\n  /**\n   * Count of non-persistent data bytes sent.\n   */\n  TX_NONPERSISTENT_BYTES:             27,\n  /**\n   * Count of non-persistent data messages sent.\n   */\n  TX_NONPERSISTENT_MSGS:              28,\n  /**\n   * The number of bytes redelivered in Persistent messages.\n   */\n  TX_PERSISTENT_BYTES_REDELIVERED:    29,\n  /**\n   * The number of Persistent messages redelivered.\n   */\n  TX_PERSISTENT_REDELIVERED:          30,\n  /**\n   * The number of bytes redelivered in Non-Persistent messages.\n   */\n  TX_NONPERSISTENT_BYTES_REDELIVERED: 31,\n  /**\n   * The number of Non-Persistent messages redelivered.\n   */\n  TX_NONPERSISTENT_REDELIVERED:       32,\n  /**\n   * The number of acknowledgments received.\n   */\n  TX_ACKS_RXED:                       33,\n  /**\n   * The number of times the transmit window closed.\n   */\n  TX_WINDOW_CLOSE:                    34,\n  /**\n   * The number of times the acknowledgment timer expired.\n   */\n  TX_ACK_TIMEOUT:                     35,\n  /**\n   * Count of bytes received as part of persistent data messages.\n   */\n  RX_PERSISTENT_BYTES:                36,\n  /**\n   * Count of persistent data messages received.\n   */\n  RX_PERSISTENT_MSGS:                 37,\n  /**\n   * Count of bytes received as part of non-persistent data messages.\n   */\n  RX_NONPERSISTENT_BYTES:             38,\n  /**\n   * Count of non-persistent data messages received.\n   */\n  RX_NONPERSISTENT_MSGS:              39,\n  /**\n   * Count of acknowledgements sent to the Solace Message Router\n   * for guaranteed messages received by the API.\n   */\n  RX_ACKED:                           40,\n  /**\n   * Count of guaranteed messages discarded for being duplicates.\n   */\n  RX_DISCARD_DUPLICATE:               41,\n  /**\n   * Count of guaranteed messages discarded due to no match message consumer for the message.\n   */\n  RX_DISCARD_NO_MATCHING_CONSUMER:    42,\n  /**\n   * Count of guaranteed messages discarded for being received out of order.\n   */\n  RX_DISCARD_OUT_OF_ORDER:            43,\n};\n\nmodule.exports.StatType = Enum.new(StatType);\n","const { EventEmitter } = require('solclient-events');\nconst { StatType } = require('./stat-types');\n\n/**\n * @private\n */\nclass Stats extends EventEmitter {\n  constructor(parent) {\n    super();\n\n    this._parent = parent;\n    this._statsMap = [];\n    StatType.values.forEach((value) => {\n      this._statsMap[value] = 0;\n    });\n  }\n\n  resetStats() {\n    this.emit('reset');\n    // The stat types are sequential, so .fill(0) would work, but the API design\n    // doesn't really guarantee this so overwriting every existing index is safer.\n    this._statsMap = this._statsMap.map(() => 0);\n  }\n\n  incStat(statType, value = 1) {\n    // should we validate statType?\n    this._statsMap[statType] += value;\n    if (this._parent) {\n      this._parent.incStat(statType, value);\n    }\n  }\n\n  getStat(statType) {\n    return this._statsMap[statType];\n  }\n\n}\n\nmodule.exports.Stats = Stats;\n","const { SMFClient } = require('./lib/smf-client');\nconst { TransportCapabilities } = require('./lib/transport-capabilities');\nconst { TransportError } = require('./lib/transport-error');\nconst { TransportFactory } = require('./lib/transport-factory');\nconst { TransportProtocol } = require('./lib/transport-protocols');\nconst { TransportReturnCode } = require('./lib/transport-return-codes');\nconst { TransportSessionEventCode } = require('./lib/transport-session-event-codes');\nconst { TransportSessionStates } = require('./lib/transport-session-states');\n\n\nmodule.exports.SMFClient = SMFClient;\nmodule.exports.TransportCapabilities = TransportCapabilities;\nmodule.exports.TransportError = TransportError;\nmodule.exports.TransportFactory = TransportFactory;\nmodule.exports.TransportProtocol = TransportProtocol;\nmodule.exports.TransportReturnCode = TransportReturnCode;\nmodule.exports.TransportSessionEventCode = TransportSessionEventCode;\nmodule.exports.TransportSessionStates = TransportSessionStates;\n","class BaseSMFClient {\n  constructor(rxSmfCB, rxMessageErrorCB, session) {\n    this.reset();\n    this._rxSmfCB = rxSmfCB; // callback for parsed msg\n    this._rxMessageErrorCB = rxMessageErrorCB; // invalid UH, etc.\n    this._session = session;\n  }\n\n  reset() {\n    this._correlationCounter = 0;\n  }\n\n  nextCorrelationTag() {\n    // Login uses the max value as a sentinel, so wrap around early\n    if (++this._correlationCounter >= BaseSMFClient.SMF_MAX_CORRELATION) {\n      this._correlationCounter = 1;\n    }\n    return this._correlationCounter;\n  }\n}\n\nBaseSMFClient.SMF_MAX_CORRELATION = 0xFFFFFF;\n\n\nmodule.exports.BaseSMFClient = BaseSMFClient;\n","// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n\nfunction concatFrom(list, from, length) {\n  const buffer = BufferImpl.allocUnsafe(length);\n  let pos = 0;\n  let i;\n  const buf0 = list[0];\n  pos += buf0.copy(buffer, 0, from, buf0.length);\n  for (i = 1; i < list.length && pos < length; i++) {\n    const buf = list[i];\n    pos += buf.copy(buffer, pos, 0, buf.length);\n  }\n  return buffer;\n}\n\n\nfunction readUInt32BEFrag(bufList, listOffsetParam, byteIndexParam) {\n  let listOffset = listOffsetParam;\n  let byteIndex = byteIndexParam;\n  const bytes = []; // the 4 bytes\n  let i = 0;\n  for (i = 0; i < 4; i++) {\n    while (bufList[listOffset].length <= byteIndex) {\n      byteIndex -= bufList[listOffset].length;\n      listOffset++;\n      if (listOffset >= bufList.length) { return null; } // should not happen.\n    }\n    bytes[i] = bufList[listOffset].readUInt8(byteIndex);\n    byteIndex++;\n  }\n  // shift the bytes into a 32 bit number, BE.\n  return (bytes[0] << 24) + (bytes[1] << 16) + (bytes[2] << 8) + bytes[3];\n}\n\n/**\n * Simplified FIFO of buffers.\n * Holds transport buffers without copying, allows 12 byte peeks for header and length detection.\n * For pops either a slice is returned if possible,\n * or a copy if the message spans transport buffers.\n * Pushes are refused when over capacity.\n * @internal\n */\nclass BufferQueue {\n  constructor(maxSize) {\n    let _queue = [];\n    const _maxSize = maxSize;\n    let _size = 0;\n    let _offset = 0;\n\n    /**\n     * Creates a slice (view) of the buffer with the given size. Conceptually.\n     * Since slicing is expensive, it just retruns the raw transport buffer with the offset.\n     * Buffer - offset pair if possible, copy (with zero offset) if beyond first buffer boundary.\n     *\n     *\n     * @param {Number} size Bytes to view\n     * @returns {?Array} Buffer - offset pair if there was enough data to peek, or `null`\n     */\n    this.peekView = function peekView(size) {\n      const result = [];\n      if (_queue.length < 1 || size > _size) { return null; }\n      if (_queue[0].length >= size + _offset) {\n        result[0] = _queue[0];\n        result[1] = _offset;\n      } else {  //over buffer boundary, must copy.\n        result[0] = concatFrom(_queue, _offset, size);\n        result[1] = 0;\n      }\n      return result;\n    };\n\n    this.readUInt8 = function readUInt8(index) {\n      if (index >= _size) { return null; }\n      const oIndex = index + _offset;\n      if (oIndex < _queue[0].length) {\n        return _queue[0].readUInt8(oIndex);\n      } // else\n      let pos = _queue[0].length;\n      let i = 1;\n      while (pos + _queue[i].length <= oIndex) {\n        pos += _queue[i].length;\n        i++;\n      }\n      return _queue[i].readUInt8(oIndex - pos);\n    };\n\n    this.readUInt32BE = function readUInt32BE(index) {\n      if (index + 3 >= _size) { return null; }\n      const oIndex = index + _offset;\n      if (oIndex + 3 < _queue[0].length) {\n        return _queue[0].readUInt32BE(oIndex);\n      } // else\n      if (oIndex < _queue[0].length) {\n        return readUInt32BEFrag(_queue, 0, oIndex);\n      }\n\n      let pos = _queue[0].length;\n      let i = 1;\n      while (pos + _queue[i].length <= oIndex) {\n        pos += _queue[i].length;\n        i++;\n      }\n      if (oIndex - pos + 3 < _queue[i].length) {\n        return _queue[i].readUInt32BE(oIndex - pos);\n      } // else\n      return readUInt32BEFrag(_queue, i, oIndex - pos);\n    };\n\n    /**\n     * Adds a buffer to the queue.\n     * Fails if maxsize is exeeded.\n     *\n     * @param {Buffer} dataIn Source data\n     * @returns {Boolean} `true` if the data fits.\n     */\n    this.put = function put(dataIn) {\n      const buffer = BufferQueue.adaptData(dataIn);\n      const size = buffer.length;\n      if (size === 0) { return true; }\n\n      if (_size + size >= _maxSize) return false;\n\n      _queue.push(buffer);\n      _size += size;\n\n      return true;\n    };\n\n    this.advance = function advance(size) {\n      if (size < 1) {\n        return;\n      }\n      if (size >= _size) {\n        this.reset();\n        return;\n      }\n      let done = 0;\n      while (done < size) {\n        if (_queue[0].length - _offset <= size - done) { // drop first buffer entirely\n          const chunk = _queue[0].length - _offset;\n          _queue.shift();\n          done += chunk;\n          _size -= chunk; // invariants are good.\n          _offset = 0;\n        } else { // cut into first buffer, virtually, with _offset\n          _offset += (size - done);\n          _size -= (size - done);\n          break;\n        }\n      }\n    };\n\n    this.reset = function reset() {\n      _queue = [];\n      _size = 0;\n      _offset = 0;\n    };\n\n    this.remaining = function remaining() {\n      return _size;\n    };\n\n    this.isEmpty = function isEmpty() {\n      return _size === 0;\n    };\n  }\n\n  /**\n   * Adapt incoming data to the format expected by this.put().\n   * @param {*} data The data to adapt.\n   * @returns {Buffer} The adapted data.\n   */\n  static adaptData(data) {\n    if (data instanceof BufferImpl) return data;\n    return BufferImpl.from(data);\n  }\n}\n\nmodule.exports.BufferQueue = BufferQueue;\nmodule.exports.concatFrom = concatFrom;\n","const DebugLib = require('solclient-debug');\nconst SMFLib = require('solclient-smf');\nconst { BaseSMFClient } = require('./base-smf-client');\nconst { BufferQueue } = require('./buffer-queue');\nconst { Convert, Hex } = require('solclient-convert');\nconst { LogFormatter } = require('solclient-log');\n\nconst BufferImpl = require('buffer').Buffer;\n\nconst { stringToUint8Array } = Convert;\nconst { formatHexString } = Hex;\n\nconst SMF_LOST_FRAMING_THRESHOLD = 80000000;\n\nconst { LOG_ERROR } = new LogFormatter('[buffer-smf-client]');\n\nfunction logPeekBuffer(buffer) {\n  const bufPair = buffer.peekView(Math.min(buffer.remaining(), 64));\n  LOG_ERROR(`First 64 bytes (or fewer) of incoming buffer: \\n${\n    DebugLib.Debug.formatDumpBytes(bufPair[0].toString('latin1', bufPair[1]), true, 0)}`);\n}\n\n/**\n * Interact with underlying transport to send and receive SMF messages\n * @private\n */\nclass BufferSMFClient extends BaseSMFClient {\n\n  /**\n   * @constructor\n   * @param {Function} rxSmfCB The callback to notify on SMF binary data received\n   * @param {Function} rxMessageErrorCB The callback to notify on message errors\n   * @param {Session} session The session owning this client\n   */\n  constructor(rxSmfCB, rxMessageErrorCB, session) {\n    super(rxSmfCB, rxMessageErrorCB, session);\n    this._incomingBuffer = new BufferQueue(SMF_LOST_FRAMING_THRESHOLD);\n  }\n\n  reset() {\n    super.reset();\n    // Called from super constructor, so guard this\n    if (this._incomingBuffer) this._incomingBuffer.reset();\n  }\n\n  /**\n   * @param {String} data Incoming data as binary string\n   */\n  rxDataString(data) {\n    this._rxDataCB(BufferImpl.from(stringToUint8Array(data)));\n  }\n\n  /**\n   * @param {ArrayBuffer} data Incoming data\n   */\n  rxDataArrayBuffer(data) {\n    this._rxDataCB(BufferImpl.from(data));\n  }\n\n  /**\n   * @param {Buffer} data Incoming data\n   */\n  rxDataBuffer(data) {\n    this._rxDataCB(data);\n  }\n\n  /**\n   * Invoked by transport session. Handles multiple SMF messages in input, as well as defragmenting\n   * partial SMF messages. The state we keep is in this._incomingBuffer.\n   * @param {Buffer} data The binary data to decode\n   */\n  _rxDataCB(data) {\n    if (this._session) {\n      // each incoming data chunk resets KA counter\n      this._session.resetKeepAliveCounter();\n    }\n    const buffer = this._incomingBuffer;\n    const putSuccess = buffer.put(data);\n    let remaining = buffer.remaining();\n\n    if (!putSuccess) {\n      // 80 megabytes - lost SMF framing: may never complete\n      logPeekBuffer(buffer);\n      this._rxMessageErrorCB(`Buffer overflow (length: ${remaining})`);\n      this._incomingBuffer.reset();\n    }\n\n    while (remaining > 12) {\n      const version = buffer.readUInt8(0) & 0x7;\n      if (version !== 3) {\n        LOG_ERROR(`Invalid smf version in smf header, version=${version}`);\n        // Throw away the buffer and bail out\n        LOG_ERROR(\"BufferSMFClient._rxDataCB(): couldn't decode message due to invalid smf header\");\n        logPeekBuffer(buffer);\n        this._incomingBuffer.reset();\n        this._rxMessageErrorCB('Error parsing incoming SMF - invalid SMF header detected');\n        return;\n      }\n\n      const messageLen = buffer.readUInt32BE(8);\n      if (messageLen > buffer.remaining()) {\n        break; // no full message\n      }\n      const msgBuffer = buffer.peekView(messageLen);\n\n      //const binaryString = messageBuffer.toString('binary');\n      const incomingMsg = SMFLib.Codec.Decode.decodeCompoundMessage(msgBuffer[0], msgBuffer[1]);\n      if (incomingMsg && incomingMsg.smfHeader) {\n        buffer.advance(incomingMsg.smfHeader.messageLength);\n        this._rxSmfCB(incomingMsg); // hand over to core API callback\n      } else {\n        // couldn't decode! Lost SMF framing.\n        // throw away the buffer and bail out\n        const sessionId = this._session ? this._session._sessionId : null;\n        const sessionIdHex = sessionId ? formatHexString(sessionId) : 'N/A';\n        LOG_ERROR(`BufferSMFClient._rxDataCB(): couldn't decode message (sessionId=${sessionIdHex})`);\n        logPeekBuffer(buffer);\n        this._incomingBuffer.reset();\n        this._rxMessageErrorCB('Error parsing incoming SMF');\n        return;\n      }\n      remaining = buffer.remaining();\n    }\n\n    if (remaining) {\n      // We have a partial header, or a valid header and a partial message.\n      // partial message remaining: keep it in incoming buffer\n    } else {\n      // clear incoming buffer\n      this._incomingBuffer.reset();\n    }\n  }\n}\n\nmodule.exports.BufferSMFClient = BufferSMFClient;\n","const fs = require('fs');\nconst SolclientSessionLib = require('solclient-session');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_TRACE, LOG_DEBUG, LOG_WARN } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\n\n/**\n * Node TLS socket option generation factored out from WS transport, shared with Tcp transport.\n * Internal mixin class, not intended to be publicly visible.\n * @private\n */\n\nclass NodeTLSOptsMixin {\n  /**\n   * Overwrite Node.js default hostname check callback by verifying cnNameList against subject CN\n   * in the server certificate. If cnNameList is a empty string, it means all CNs are acceptable.\n   * @param {String} host The hostname for checking\n   * @param {String} cert The server certificate for checking\n   * @name solace.WebTransportSession#checkCertificateCNs\n   * @returns {?Error} Any error generated by the certificate check\n   * @private\n   */\n  checkCertificateCNs(host, cert) {\n    if (this._props.sslTrustedCommonNameList && this._props.sslTrustedCommonNameList.length > 0) {\n      // no Closure Compiler externs for certificates\n      LOG_DEBUG('server cert:', cert);\n      const subject = cert['subject']; // eslint-disable-line dot-notation\n      let valid = false;\n      if (subject) {\n        const cn = subject['CN']; // eslint-disable-line dot-notation\n        valid = this._props.sslTrustedCommonNameList.some(name =>\n          name.toLowerCase() === cn.toLowerCase()\n        );\n      }\n      if (!valid) {\n        const error = new Error('Server certificate not trusted - no common name match');\n        error.reason = 'Server certificate not trusted - no common name match';\n        error.host = host;\n        error.cert = cert;\n        return error;\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Create the TLS options object used in wss:// and tcps:// connection establishment.\n   * The same options are needed by the ws and tls socket constructors.\n   * @returns {Object} WebSocket/TLSSocket options object\n   * @private\n   */\n  createTLSOptions() {\n    /* eslint-disable dot-notation */\n    const props = this._props;\n    const options = {};\n    const useClientCert = (\n      props.authenticationScheme === SolclientSessionLib.AuthenticationScheme.CLIENT_CERTIFICATE\n    );\n\n    // available tls options:\n    //  pfx, key, passphrase, cert, ca, ciphers, rejectUnauthorized,\n    //  secureProtocol, secureOptions, checkServerIdentity\n\n    // default to allow all version of SSL during negotiation but exclude SSLv2 and SSLv3\n    options['secureProtocol'] = 'SSLv23_method';\n    const constMap = SolclientSessionLib.SessionProperties.SslProtocolExcludeConstantMap;\n    options['secureOptions'] = constMap['sslv2'] | constMap['sslv3'];\n    (props.sslExcludedProtocols || []).forEach((protocol) => {\n      options['secureOptions'] |= constMap[protocol.toLowerCase()];\n    });\n\n    if (props.sslCipherSuites) {\n      const ciphers = props.sslCipherSuites.split(',');\n      const trimmed = ciphers.map(cipher => cipher.trim());\n      options['ciphers'] = trimmed.join(':');\n    } else {\n      options['ciphers'] = props.sslCipherSuites;\n    }\n\n    options['rejectUnauthorized'] = props.sslValidateCertificate;\n\n    // only set checkServerIdentity callback if rejectUnauthorized\n    if (options['rejectUnauthorized'] && Array.isArray(props.sslTrustedCommonNameList)) {\n      options['checkServerIdentity'] = this.checkCertificateCNs.bind(this);\n    }\n\n    // only set trust stores and and checkServerIdentity callback\n    // if rejectUnauthorized is true or authClientCert\n    if ((options['rejectUnauthorized'] || useClientCert) &&\n      props.sslTrustStores && props.sslTrustStores.length) {\n      const tsContents = [];\n      props.sslTrustStores.forEach((tsFile) => {\n        try {\n          tsContents.push(fs.readFileSync(tsFile));\n        } catch (e) {\n          LOG_WARN(`Failed to load trust store ${tsFile}`, e.message);\n          LOG_TRACE('Error details:', e.stack || e);\n          throw new OperationError(`Failed to load trust store ${tsFile}`,\n            ErrorSubcode.FAILED_LOADING_TRUSTSTORE,\n            e);\n        }\n      });\n      options['ca'] = tsContents;\n    }\n\n\n    if (useClientCert) {\n      if (props.sslPfx) {\n        try {\n          options['pfx'] = fs.readFileSync(props.sslPfx);\n          options['passphrase'] = props.sslPfxPassword;\n        } catch (e) {\n          LOG_WARN(`Failed to load pfx file ${props.sslPfx}`, e.message);\n          LOG_TRACE('Error details:', e.stack || e);\n          throw new OperationError(`Failed to load pfx ${props.sslPfx}`,\n            ErrorSubcode.FAILED_LOADING_CERTIFICATE_AND_KEY, e);\n        }\n      }\n      if (props.sslPrivateKey) {\n        try {\n          options['key'] = fs.readFileSync(props.sslPrivateKey);\n          options['passphrase'] = props.sslPrivateKeyPassword;\n        } catch (e) {\n          LOG_WARN(`Failed to load private key ${props.sslPrivateKey}`, e.message);\n          LOG_TRACE('Error details:', e.stack || e);\n          throw new OperationError(`Failed to load private key ${props.sslPrivateKey}`,\n            ErrorSubcode.FAILED_LOADING_CERTIFICATE_AND_KEY, e);\n        }\n      }\n      if (props.sslCertificate) {\n        try {\n          options['cert'] = fs.readFileSync(props.sslCertificate);\n        } catch (e) {\n          LOG_WARN(`Failed to load certificate file ${props.sslCertificate}`, e.message);\n          LOG_TRACE('Error details:', e.stack || e);\n          throw new OperationError(`Failed to load certificate ${props.sslCertificate}`,\n            ErrorSubcode.FAILED_LOADING_CERTIFICATE_AND_KEY, e);\n        }\n      }\n    }\n    //SNI\n    const hostname = parseURL(this._url).hostname;\n    options['servername'] = hostname;\n    return options;\n    /* eslint-enable dot-notation */\n  }\n\n}\n\nmodule.exports.NodeTLSOptsMixin = NodeTLSOptsMixin;\n","/* eslint-disable global-require */\nconst { BaseSMFClient } = require('./base-smf-client');\n\n// Got rid of anonymous function that checked browser and set smf-client\n// Now ignoring string-smf-client and setting it straight to buffer-smf-client\n// const SMFClient = require('./buffer-smf-client').BufferSMFClient;\n\nconst SMFClient = (() => {\n  if (typeof navigator !== 'undefined') {\n      /* eslint-env browser */\n    if (navigator.appVersion.indexOf('MSIE 9.') !== -1 ||\n        navigator.appVersion.indexOf('Trident/') !== -1) {\n        // Avoid the buffer-based version for IE9, 10, and 11, but not Edge.\n      return require('./buffer-smf-client').BufferSMFClient;\n    }\n  }\n  /* eslint-env shared-browser-node */\n  return require('./buffer-smf-client').BufferSMFClient;\n})();\n\nSMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG = BaseSMFClient.SMF_MAX_CORRELATION;\n\nmodule.exports.SMFClient = SMFClient;\n","const { CompressedTransport } = require('./transport-compression');\nconst { TcpRawTransport } = require('./transport-tcp-plaintext');\nconst { TcpTlsTransport } = require('./transport-tcp-tls');\nconst { TlsOnlyTransport } = require('./transport-tls');\n\nmodule.exports.TcpRawTransport = TcpRawTransport;\nmodule.exports.CompressedTransport = CompressedTransport;\nmodule.exports.TlsOnlyTransport = TlsOnlyTransport;\nmodule.exports.TcpTlsTransport = TcpTlsTransport;\n","const { Duplex } = require('stream');\nconst { LOG_WARN, LOG_TRACE } = require('solclient-log');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\n\n/**\n * This is a Duplex Stream encapsulating a Transport.\n * It transparently passes reads, writes, and events until \"shunted\".\n * After that, nothing gets through.\n *\n * The intermediate \"dontEnd\" state allows a TLS shutdown to run its course\n * without closing the underlying transport in the end.\n *\n * Intended lifecycle:\n *\n * 1, create underlying transport\n * 2, create ShuntableTransport with underlying transport\n * 3, pass shuntableTransport to tls.connect\n * 4, connect underlying transport\n *\n * <traffic may flow until TLS shutdown desired>\n *\n * 1, shuntableTransport.dontend();\n * 2, tlsSocket.end();\n * 3, on 'closed' event: take and start using shuntableSocket.socket.\n *\n * For an explanation of _read and _write see\n * https://nodejs.org/api/stream.html#stream_implementing_a_duplex_stream\n *\n * @private\n */\n\nclass ShuntableTransport extends Duplex {\n  constructor(options) {\n    super(options);\n    this._shunted = false;\n    this._dontEnd = false;\n    this._underlyingTransport = options.underlyingTransport;\n    // Buffers data-callback pairs until connected or underlying transport decongests.\n    // Should never have more than 1 item as long as the stream contract is upheld.\n    this._interimBuffer = [];\n    this._transportDrained = true;\n    this._connected = false;\n  }\n\n  shunt() {\n    this._shunted = true;\n  }\n\n  dontEnd() {\n    this._dontEnd = true;\n  }\n\n  _write(chunk, encoding, callback) {\n    if (!this._shunted) {\n      if (!this._transportDrained || !this._connected) {\n        this._interimBuffer.push([chunk, callback]);\n        return;\n      }\n      const rc = this._underlyingTransport.send(chunk);\n      switch (rc) {\n        case TransportReturnCode.OK:\n          this._transportDrained = true;\n          callback();\n          break;\n        case TransportReturnCode.NO_SPACE:\n          this._transportDrained = false;\n          this._interimBuffer.push([chunk, callback]);\n          break;\n        case TransportReturnCode.INVALID_STATE_FOR_OPERATION:\n          this.emit('error',\n                    'Underlying transport in invalid state for send.');\n          break;\n        default:\n          LOG_WARN(`Unknown return code from undelying transport ${rc}`);\n      }\n    }\n  }\n\n  //_read(size) {\n  _read() {\n    if (!this._shunted) {\n      this._underlyingTransport.unpause();\n    }\n  }\n\n  rxDataBuffer(data) {\n    if (!this._shunted) {\n      const noPause = this.push(data);\n      if (!noPause) {\n        this._underlyingTransport.pause();\n      }\n    }\n  }\n\n  // underlying transport event dispatch\n  eventCB(transportEvent) {\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportSessionEventCode.UP_NOTICE:\n        this.onConnect();\n        break;\n      case TransportSessionEventCode.SEND_ERROR:\n        this.onError(transportEvent);\n        break;\n      case TransportSessionEventCode.DESTROYED_NOTICE:\n        this.onClose(transportEvent);\n        break;\n      case TransportSessionEventCode.CAN_ACCEPT_DATA:\n        this.onDrain();\n        break;\n      default:\n        LOG_WARN(`TLS layer got unkown event code ${transportEvent.getTransportEventCode}`);\n    }\n  }\n  onError(transportEvent) {\n    if (!this._shunted) {\n      this.emit('error', transportEvent.getInfoStr());\n    }\n  }\n\n  onClose(transportEvent) {\n    this._connected = false;\n    if (!this._shunted) {\n      LOG_TRACE(`ShuntableTransport emits close for transport event ${transportEvent}`);\n      this.emit('close');\n    }\n  }\n\n  onDrain() {\n    if (!this._shunted) {\n      this._transportDrained = true;\n      if (this._interimBuffer && this._interimBuffer.length > 0) {\n        const resendBuffer = this._interimBuffer;\n        this._interimBuffer = [];\n        resendBuffer.forEach(([data, callback]) => this._write(data, null, callback));\n      }\n      if (!this._transportDrained) {\n        return;\n      }\n      this.emit('drain');\n    }\n  }\n\n  onConnect() {\n    this._connected = true;\n    if (!this._shunted) {\n      this.onDrain(); // flush interimbuffer.\n      this.emit('connect');\n    }\n  }\n\n  end(chunk, encoding, callback) {\n    if (!this._shunted && !this._dontEnd) {\n      if (typeof chunk === 'function') { // sometimes TLS calls end() wrong...\n        this._underlyingTransport.destroy('End from TLS');\n        chunk();\n      } else {\n        const cb = () => { this._underlyingTransport.destroy('End from TLS'); callback(); };\n        this._write(chunk, encoding, cb);\n      }\n    } else if (!this._shunted) {\n      if (typeof chunk !== 'function') { // sometimes TLS calls end() wrong...\n        this._write(chunk, encoding, callback);\n      } else {\n        chunk();\n      }\n    }\n  }\n\n  destroy(error) {\n    if (!this._shunted && !this._dontEnd) {\n      this._underlyingTransport.destroy(error);\n    }\n  }\n\n  setNoDelay(arg) {\n    if (!this.shunted) {\n      LOG_TRACE(`Ignoring setNoDelay(${arg})`);\n    }\n  }\n}\n\nmodule.exports.ShuntableTransport = ShuntableTransport;\n","const zlib = require('zlib');\nconst { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { LOG_TRACE, LOG_DEBUG, LOG_INFO, LOG_WARN } = require('solclient-log');\nconst { TransportBase } = require('../transport-base');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst {\n  formatHexString,\n} = Hex;\n\n/**\n * Modular transport layer performing zlib compression.\n * Requires an underlying transport, can be plaintext or TLS, connected or not.\n * Uses the nodejs zlib module which in turn uses the libuv threadpool in nodejs.\n * The end user may need to increase threadpool size.\n * https://nodejs.org/api/zlib.html#zlib_threadpool_usage\n *\n * @private\n */\nclass CompressedTransport extends TransportBase {\n\n  constructor(eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super('tcp://x', eventCB, client, props);\n\n    /**\n     * @private\n     * @type {TransportClientStats}\n     */\n    this._clientstats = null;\n    this._underlyingTransport = null;\n\n    /**\n     * Maximum amount of send data than can be queued.\n     * NodeJS socket.write accepts all writes, growing a\n     * user space buffer indefinitely.\n     * The TCP transport (same as WS transport)\n     * manages the size of that buffer to stay below this limit.\n     * @private\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /*\n     * When true, the upper layer was told NO_SPACE and must be notified\n     * of the next \"drained\" event.\n     * @private\n     * @type {Boolean}\n     */\n    this._waitForSocketDrain = false;\n    this._waitForCompressorDrain = false;\n\n    /*\n     * One-shot flush callback.\n     * Set on flush(), ran and cleared on socket drain event.\n     * @private\n     */\n    this._flushCallback = null;\n\n    /**\n     * Flag to keep track of socket drained state:\n     * Set to false when socket.write returns false,\n     * (indicating user-space buffering)\n     * Set to true on socket drain events.\n     * (indicating the user space buffer has flushed to the OS.)\n     * @type {Boolean}\n     * @private\n     */\n    this._socketDrained = true;\n    this._compressorDrained = true;\n    this._interimBuffer = [];\n\n    /**\n     * @type {TransportSessionState}\n     * @private\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * Save the Event in the onError listener\n     * Use it in onClose to populate the event.\n     * (Tcp socket calls onError with the error then onClose.\n     * WS socket calls only onClose and passes the error directly.)\n     * @private\n     * @type {?Error}\n     */\n    this._socketError = null;\n\n    /**\n     * @type {?string}\n     * @private\n     */\n    this._sessionId = new Date().getTime();\n\n    // Some whitebox tests expect a transport->transportSession nesting.\n    this._transportSession = this;\n\n    this._props.transportProtocol = null;\n\n    this._compressor = null;\n    this._decompressor = null;\n\n    this._compressionLevel = props.compressionLevel;\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    return this._clientstats;\n  }\n\n  setClientStats(value) {\n    this._clientstats = value;\n  }\n\n  setUnderlyingTransport(newUnderlyingTransoprt) {\n    this._underlyingTransport = newUnderlyingTransoprt;\n  }\n\n  // Underlying transport callback.\n  rxDataBuffer(data) {\n    // We do not collect Rx stats.\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('TcpTransportCompressedSession stray rxDataBuffer, ignoring.');\n      return;\n    }\n    this._decompressor.write(data);\n    this._decompressor.flush();\n  }\n\n  /**\n   * Decompressor callback.\n   * @private\n   * @param {Buffer} data the data\n   */\n  onData(data) {\n    // We do not collect Rx stats.\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('TcpTransportSession stray onData, ignoring.');\n      return;\n    }\n    if (this._client) {\n      this._client.rxDataBuffer(data);\n    }\n  }\n\n  /**\n   * Underlying transport callback for SEND_ERROR\n   * @private\n   * @param {TransportSessionEvent} transportEvent the error\n   */\n  onError(transportEvent) {\n    // Need new state for \"waiting for decompressor flush after error\"?\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tcp transport is being destroyed, ignore error');\n      return;\n    }\n    this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n    const onErrorStage2 = () => {\n      if (this._eventCB) {\n        LOG_TRACE('Decompressor flush returned, passing error to eventCB.');\n        this._eventCB(transportEvent);\n      } else {\n        LOG_TRACE('Decompressor flush returned, but eventCB already cleared.');\n      }\n    };\n\n    LOG_TRACE('Flushing decompressor on socket error.');\n    this._decompressor.flush(zlib.Z_SYNC_FLUSH, onErrorStage2);\n  }\n\n  /**\n   * Treat any zlib error the same as a socket error,\n   * plus close the socket.\n   * @private\n   * @param {Error} error the error\n   */\n  onZlibError(error) {\n    this._socketError = error;\n    this._underlyingTransport.destroy(`Connection closed by zlib error. Message:${error}`,\n                                      ErrorSubcode.COMMUNICATION_ERROR);\n  }\n  /**\n   * underlying transport callback for DESTROYED_NOTICE.\n   * @private\n   * @param {TransportSessionEvent} transportEvent from lower layer\n   */\n  onClose(transportEvent) {\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      this._destroy(transportEvent);\n    } else {\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      LOG_TRACE('Flushing decompressor on socket close.');\n      const stage2destroy = () => this._destroy(transportEvent);\n      this._decompressor.flush(zlib.Z_SYNC_FLUSH, stage2destroy);\n    }\n  }\n\n  /**\n   * underlying transport callback for UP_NOTICE.\n   * @private\n   * @param {TransportSessionEvent} transportEvent from lower layer\n   */\n  onOpen(transportEvent) {\n    if (this._state !== TransportSessionState.WAITING_FOR_CREATE) {\n      LOG_INFO(`compressor stray onOpen when in state ${this._state}, ignoring.`);\n      return;\n    }\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(transportEvent);\n  }\n\n  /**\n   * Establish underlying transport.\n   * @override\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() {\n    LOG_TRACE('Initializing compressed transport');\n    let rc = TransportReturnCode.OK;\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_INFO(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    this._state = TransportSessionState.WAITING_FOR_CREATE;\n    if (this._underlyingTransport._state === TransportSessionState.DOWN) {\n      rc = this._underlyingTransport.connect();\n    } else {\n      this._state = TransportSessionState.SESSION_UP;\n    }\n    try {\n      // initialize compressor, decompressor.\n      const options = {\n        highWaterMark: this._sendBufferMaxSize,\n        level:         this._compressionLevel,\n        flush:         zlib.Z_SYNC_FLUSH,\n      };\n      this._compressor =\n        zlib.createDeflateRaw(options);\n      this._decompressor = zlib.createInflateRaw({ flush: zlib.Z_SYNC_FLUSH });\n\n      this._decompressor.on('data', this.onData.bind(this));\n      this._decompressor.on('error', this.onZlibError.bind(this));\n      this._compressor.on('error', this.onZlibError.bind(this));\n      this._compressor.on('data', this.sendCompressed.bind(this));\n      this._compressor.on('drain', this.onCompressorDrain.bind(this));\n    } catch (error) {\n      LOG_DEBUG(`Error connecting: ${error}`);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      throw new TransportError(`Could not create Tcp zlib layer: ${error.message}`,\n        error.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    return rc;\n  }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code.\n   * We'll clean up zlib objects on the DESTROYED_NOTICE.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(msg, subcode) {\n    this._state = TransportSessionState.WAITING_FOR_DESTROY;\n    return this._underlyingTransport.destroy(msg, subcode);\n  }\n\n  // second stage of the underlying transport callback for DESTROYED_NOTICE.\n  // We should only ever get here once the underlying transport is destroyed.\n  // Seee onClose.\n  _destroy(transportEvent) {\n    if (this._state !== TransportSessionState.DOWN) {\n      this._state = TransportSessionState.DOWN;\n      const onerrorStub = function onerrorStub() { };\n      this._waitForSocketDrain = false;\n      this._flushCallback = null;\n      this._socketDrained = true;\n      this._client = null; // Don't accept data.\n      this._compressor.removeAllListeners();\n      this._compressor.on('error', onerrorStub); // Prevent unhandled errors\n      this._decompressor.removeAllListeners();\n      this._decompressor.on('error', onerrorStub); // Prevent unhandled errors\n      this._compressor.unpipe();\n      //https://github.com/nodejs/node/issues/15625\n      this._compressor._hadError = true;\n      this._compressor.close();\n      this._compressor = null;\n      this._decompressor.close();\n      this._decompressor = null;\n    }\n\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    if (this._eventCB) {\n      this._eventCB(transportEvent);\n      // Release references to other components\n      this._eventCB = null;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  // underlying transport event dispatch\n  eventCB(transportEvent) {\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportSessionEventCode.UP_NOTICE:\n        this.onOpen(transportEvent);\n        break;\n      case TransportSessionEventCode.SEND_ERROR:\n        this.onError(transportEvent);\n        break;\n      case TransportSessionEventCode.DESTROYED_NOTICE:\n        this.onClose(transportEvent);\n        break;\n      case TransportSessionEventCode.CAN_ACCEPT_DATA:\n        this.onDrain(transportEvent);\n        break;\n      default:\n        LOG_WARN('Compressing transport layer got unkown event code ' +\n          `${transportEvent.getTransportEventCode}`);\n    }\n  }\n\n\n  /**\n   * @override\n   * @description Intended for clean shutdowns.\n   * Callback is invoked when all nodejs-buffered data\n   * has been flushed to the OS socket.\n   */\n  flush(callback) {\n    const flushStage2 = () => this._underlyingTransport.flush(callback);\n    this._compressor.flush(flushStage2);\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Send encoded SMF message\n   * Returns transport return code.\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      // On a lower layer socket error this transport is in WAITING_FOR_DESTROY state\n      // until the decompressor flushes.\n      // We could respond with NO_SPACE, but we'd have to send a CAN_SEND on reconnect.\n      LOG_INFO(`Compressing transport can't send in state ${this._state}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    // Congestion control.\n    // We try to avoid pumping too much data into the compressor until the socket drains.\n    // We pause()/resume() the compressor while the socket is congested, but still.\n    if (forceAllowEnqueue\n      || (this._socketDrained && this._compressorDrained)) {\n      if (this._interimBuffer.length > 0) {\n        LOG_WARN(`Allowing send when interimBuffer is ${this._interimBuffer.length}`);\n      }\n      this._compressorDrained = this._compressor.write(message, 'ascii');\n      this._compressor.flush();\n      this._clientstats.bytesWritten += message.length;\n      ++this._clientstats.msgWritten;\n      return TransportReturnCode.OK;\n    }\n    // We'll unblock the user on the next onDrain.\n    if (!this._socketDrained) {\n      this._waitForSocketDrain = true;\n    }\n    if (!this._compressorDrained) {\n      this._waitForCompressorDrain = true;\n    }\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  sendCompressed(data) {\n    if (!this._socketDrained) {\n      this._interimBuffer.push(data);\n      this._compressor.pause();\n      return;\n    }\n    const rc = this._underlyingTransport.send(data);\n    switch (rc) {\n      case TransportReturnCode.OK:\n        this._socketDrained = true;\n        break;\n      case TransportReturnCode.NO_SPACE:\n        this._socketDrained = false;\n        this._interimBuffer.push(data);\n        this._compressor.pause();\n        break;\n      case TransportReturnCode.INVALID_STATE_FOR_OPERATION:\n        this.onError(new TransportSessionEvent(\n            TransportSessionEventCode.SEND_ERROR,\n            'Underlying transport in invalid state for send.',\n            null,\n            ErrorSubcode.CONNECTION_ERROR, null));\n        break;\n      default:\n        LOG_WARN(`Unknown return code from undelying transport ${rc}`);\n    }\n  }\n\n  /**\n   * Underlying transport callback for CAN_SEND.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   */\n  onDrain() {\n    this._socketDrained = true;\n    if (this._interimBuffer && this._interimBuffer.length > 0) {\n      const resendBuffer = this._interimBuffer;\n      this._interimBuffer = [];\n      resendBuffer.forEach(data => this.sendCompressed(data));\n    }\n    if (!this._socketDrained) {\n      return;\n    }\n    this._compressor.resume();\n    if (this._flushCallback) {\n      LOG_DEBUG('Transport emitting FLUSH after drain.');\n      const prevCallback = this._flushCallback;\n      this._flushCallback = null;\n      prevCallback();\n    }\n\n    if (this._waitForSocketDrain) {\n      this._waitForSocketDrain = false;\n      if (!this._waitForCompressorDrain) {\n        this._eventCB(\n          new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                    '', null, 0, this._sessionId));\n      }\n    }\n  }\n\n  onCompressorDrain() {\n    this._compressorDrained = true;\n    if (this._waitForCompressorDrain) {\n      this._waitForCompressorDrain = false;\n      if (!this._waitForSocketDrain) {\n        this._eventCB(\n          new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                    '', null, 0, this._sessionId));\n      }\n    }\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    const str = `TcpTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n  pause() {\n    this._underlyingTransport.pause();\n    this._decompressor.pause();\n  }\n\n  unpause() {\n    this._underlyingTransport.unpause();\n    this._decompressor.resume();\n  }\n\n}\n\nmodule.exports.CompressedTransport = CompressedTransport;\n","const net = require('net');\nconst { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { LOG_TRACE, LOG_DEBUG, LOG_WARN, LOG_ERROR } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\nconst { TransportBase } = require('../transport-base');\nconst { TransportClientStats } = require('../transport-client-stats');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst {\n  formatHexString,\n} = Hex;\n\n/**\n * Tcp (tcps://) transport without TLS (tcps://) support.\n * Only works in node.js.\n * @private\n */\nclass TcpRawTransport extends TransportBase {\n\n  constructor(url, eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super(url, eventCB, client, props);\n\n    /**\n     * @private\n     * @type {TransportClientStats}\n     */\n    this._clientstats = new TransportClientStats();\n\n    /**\n     * Maximum amount of send data than can be queued.\n     * NodeJS socket.write accepts all writes, growing a\n     * user space buffer indefinitely.\n     * The TCP transport (same as WS transport)\n     * manages the size of that buffer to stay below this limit.\n     * @private\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /*\n     * When true, the upper layer was told NO_SPACE and must be notified\n     * of the next \"drained\" event.\n     * @private\n     * @type {Boolean}\n     */\n    this._canSendNeeded = false;\n\n    /*\n     * One-shot flush callback.\n     * Set on flush(), ran and cleared on socket drain event.\n     * @private\n     */\n    this._flushCallback = null;\n\n    /**\n     * Flag to keep track of socket drained state:\n     * Set to false when socket.write returns false,\n     * (indicating user-space buffering)\n     * Set to true on socket drain events.\n     * (indicating the user space buffer has flushed to the OS.)\n     * @type {Boolean}\n     * @private\n     */\n    this._drained = true;\n\n    /**\n     * @type {TransportSessionState}\n     * @private\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * @type {?Socket}\n     * @private\n     */\n    // Always the raw socket, which is stable from connect() until disconnect().\n    this._rawSocket = null;\n\n    /**\n     * Save the Event in the onError listener\n     * Use it in onClose to populate the event.\n     * (Tcp socket calls onError with the error then onClose.\n     * WS socket calls only onClose and passes the error directly.)\n     * @private\n     * @type {?Error}\n     */\n    this._socketError = null;\n\n    /**\n     * @type {?string}\n     * @private\n     */\n    this._sessionId = new Date().getTime();\n\n    // Some whitebox tests expect a transport->transportSession nesting.\n    this._transportSession = this;\n    this._props.transportProtocol = null;\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    return this._clientstats;\n  }\n  setClientStats(value) {\n    this._clientstats = value;\n  }\n\n  rehome(eventCB, client) {\n    this._eventCB = eventCB;\n    this._client = client;\n  }\n\n  /**\n   * Extracts host and port from the router URL.\n   * @private\n   * @param {String} urlString the url\n   * @returns {{String, Number}} host and port\n   */\n  parseHostPort(urlString) {\n    let port = null;\n    const urlParsed = parseURL(urlString);\n    if (urlParsed.protocol !== 'tcp:' && urlParsed.protocol !== 'tcps:') {\n      // Should not happen.\n      LOG_ERROR(`Tcp Transport: URL with unexpected scheme: ${urlParsed.protocol}`);\n    }\n    const host = urlParsed.hostname;\n    port = urlParsed.port;\n    if (port === null) {\n      if (this._ssl) {\n        port = 55443;\n      } else {\n        port = this._props._compressionLevel > 0 ? 55003 : 55555;\n      }\n    }\n    // The rest of the URL (path, etc) is ignored.\n    LOG_TRACE(`Parsing url ${urlString} -> host: ${host} , port: ${port}`);\n    return { host, port };\n  }\n\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Buffer} data the data\n   */\n  onData(originalSocket, data) {\n    // We do not collect Rx stats.\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n      originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onData for previous socket, ignoring.');\n      return;\n    }\n    if (this._client) {\n      this._client.rxDataBuffer(data);\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Error} error the error\n   */\n  onError(originalSocket, error) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onError for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tcp transport is being destroyed, ignore error');\n      return;\n    }\n\n    LOG_DEBUG(`Tcp transport connection error ${error}`);\n    // net.socket invokes the error handler before the close handler.\n    // Websocket does not, and that's what the upper layer expects.\n    // Suppressing the \"double tap\" error events when connected,\n    // saving the error for the onClose handler in _socketerror.\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      if (this._state === TransportSessionState.WAITING_FOR_CREATE) {\n        //There won't be an onClose invocation, so destroying right away.\n        LOG_DEBUG(`Tcp transport connection error during establishment. ${error}`);\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._destroy(originalSocket, `Connection failed. Message:${error.message}`, ErrorSubcode.CONNECTION_ERROR);\n      } else {\n        this._eventCB(\n          new TransportSessionEvent(\n            TransportSessionEventCode.SEND_ERROR,\n            `Connection error${error}`,\n            null,\n            ErrorSubcode.CONNECTION_ERROR, null));\n      }\n    } else { // we rely on the close listener to notify the upper layer.\n      this._socketError = error;\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   * @param {Boolean} hadError wheter there was an error\n   */\n  onClose(originalSocket, hadError) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onClose for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tcp transport is being destroyed, ignore close');\n      return;\n    }\n    const msg = hadError ? 'with error' : 'cleanly';\n    const errorMsg = this._socketError && this._socketError.message;\n    this._socketError = null; // clear on read.\n    LOG_DEBUG(`Tcp transport connection is closed ${msg}. Message: ${errorMsg}`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n\n    this._destroy(this._rawSocket, `Connection closed ${msg}. Message:${errorMsg}`,\n                  ErrorSubcode.COMMUNICATION_ERROR);\n  }\n\n  /**\n   * Callback for Socket.connect.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   */\n  onOpen(originalSocket) {\n    LOG_TRACE('Plaintext transport received socket open event.');\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('Plaintext transport stray onOpen for previous socket, ignoring.');\n      return;\n    }\n    if (this._state !== TransportSessionState.WAITING_FOR_CREATE) {\n      LOG_DEBUG(`TcpTransportSession stray onOpen when in state ${this._state}, ignoring.`);\n      return;\n    }\n\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(\n          new TransportSessionEvent(\n              TransportSessionEventCode.UP_NOTICE,\n              'Connected',\n              0,\n              null,\n              this._sessionId));\n  }\n\n  /**\n   * Establish underlying transport.\n   * @override\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() {\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_ERROR(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (this._rawSocket) {\n      LOG_ERROR('TCP transport can not connect once _rawsocket exists.');\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (!this._url) {\n      LOG_WARN('Cannot connect to null URL');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    LOG_DEBUG('Establishing Tcp transport session');\n    try {\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n      const { host, port } = this.parseHostPort(this._url);\n      LOG_DEBUG('Constructing socket');\n      // Luckily raw and tls sockets have the same API.\n      this._rawSocket = new net.Socket();\n      this._rawSocket.on('connect', this.onOpen.bind(this, this._rawSocket));\n      // Only connect after the connect listener is registered:\n      this._rawSocket.connect(port, host);\n      LOG_TRACE('Assigning properties to socket');\n      // WARNING!\n      // This is the kind of thing that breaks on minification.\n      // Re-run unit tests in production mode when changed:\n      // grunt --gruntfile=Gruntfile_Production.js\n      // When broken, consult the closure compiler exceptions file:\n      // (sdk-root)/builder/template/-common/env/externs.js\n      this._rawSocket.on('data', this.onData.bind(this, this._rawSocket));\n      this._rawSocket.on('error', this.onError.bind(this, this._rawSocket));\n      this._rawSocket.on('close', this.onClose.bind(this, this._rawSocket));\n      this._rawSocket.on('drain', this.onDrain.bind(this, this._rawSocket));\n      this._rawSocket.setNoDelay(true);\n\n      LOG_TRACE('Prepared socket');\n    } catch (error) {\n      LOG_DEBUG(`Error connecting: ${error}`);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      throw new TransportError(`Could not create Tcp socket: ${error.message}`,\n        error.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    LOG_DEBUG('Tcp transport is connecting');\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(msg, subcode) {\n    // No need to flush the decompressor,\n    // the upper layer is not interested in any more data.\n    return this._destroy(this._rawSocket, msg, subcode);\n  }\n\n  _destroy(originalSocket, msg, subcode) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray _destroy for previous socket, ignoring.');\n      return TransportReturnCode.OK;\n    }\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_DEBUG(`Destroy Tcp transport: ${msg}`);\n      // Set state for connection teardown.\n      this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n      const onerrorStub = function onerrorStub() { };\n      if (this._rawSocket) {\n        this._rawSocket.removeAllListeners();\n        this._rawSocket.on('error', onerrorStub); // Prevent unhandled errors\n        // Prefering destroy() over end() as it seems to\n        // cancel pending callbacks like onOpen more reliably.\n        //this._rawSocket.destroy();\n        this._rawSocket.destroy();\n        this._rawSocket = null;\n      }\n\n      this._canSendNeeded = false;\n      this._flushCallback = null;\n      this._drained = true;\n      this._state = TransportSessionState.DOWN;\n      this._client = null; // Don't accept data.\n    }\n\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    LOG_TRACE(`Destroying TCP transport. msg: ${msg} subcode: ${subcode}`);\n    if (this._eventCB) {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                              msg || 'Session is destroyed',\n                                              null,\n                                              subcode || 0,\n                                              this._sessionId));\n      // Release references to other components\n      this._eventCB = null;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Intended for clean shutdowns.\n   * Callback is invoked when all nodejs-buffered data\n   * has been flushed to the OS socket.\n   */\n  flush(callback) {\n    if (this._drained) {\n      LOG_DEBUG('Transport emitting FLUSH immediately.');\n      callback();\n    } else if (callback) {\n      this._flushCallback = callback;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Send encoded SMF message\n   * Returns transport return code.\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      LOG_ERROR('plaintext: INVALID_STATE_FOR_OPERATION');\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    // Limiting socket buffer size to _sendBufferMaxSize unless\n    // the force flag was set\n    // or the socket is drained, in which case any size message goes.\n    if (forceAllowEnqueue\n      || this._drained\n      || message.length < (this._sendBufferMaxSize - this._rawSocket.bufferSize)) {\n      // _drained keeps track of \"overflowing\" writes.\n      // nodejs never refuses a write but warns when it starts buffering.\n      this._drained = this._rawSocket.write(message, 'ascii');\n      if (this._clientstats) {\n        this._clientstats.bytesWritten += message.length;\n        ++this._clientstats.msgWritten;\n      }\n      return TransportReturnCode.OK;\n    }\n    // We'll unblock the user on the next onDrain.\n    this._canSendNeeded = true;\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destry()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   */\n  onDrain(originalSocket) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onDrain for previous socket, ignoring.');\n      return;\n    }\n    this._drained = true;\n\n    if (this._flushCallback) {\n      LOG_DEBUG('Transport emitting FLUSH after drain.');\n      const prevCallback = this._flushCallback;\n      this._flushCallback = null;\n      prevCallback();\n    }\n\n    if (this._canSendNeeded) {\n      LOG_TRACE('Transport emitting CAN_ACCEPT_DATA');\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '', null, 0, this._sessionId));\n    }\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    const str = `TcpTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n  pause() {\n    if (this._rawSocket) {\n      this._rawSocket.pause();\n    }\n  }\n\n  unpause() {\n    if (this._rawSocket) {\n      this._rawSocket.resume();\n    }\n  }\n\n}\n\nmodule.exports.TcpRawTransport = TcpRawTransport;\n","const net = require('net');\nconst tls = require('tls');\nconst { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { LOG_TRACE, LOG_DEBUG, LOG_WARN, LOG_ERROR } = require('solclient-log');\nconst { mixin } = require('solclient-eskit');\nconst { NodeTLSOptsMixin } = require('../node-tls-opts-mixin');\nconst { parseURL } = require('solclient-util');\nconst { TransportBase } = require('../transport-base');\nconst { TransportClientStats } = require('../transport-client-stats');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst {\n  formatHexString,\n} = Hex;\n\n/**\n *\n * Tcp (smf) transport with TLS (tcps://) support.\n * Only works in node.js.\n * Modelled after the WebSocket transport mostly,\n * except there is no downgrade mechanism.\n * There is no separate \"Transport\" class\n * to manage the downgrade FSM:\n * The TransportSession is the Transport.\n\n * @private\n */\nclass TcpTlsTransport extends TransportBase {\n\n  constructor(url, eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super(url, eventCB, client, props);\n\n    /**\n     * @private\n     * @type {TransportClientStats}\n     */\n    this._clientstats = new TransportClientStats();\n\n    /**\n     * Maximum amount of send data than can be queued.\n     * NodeJS socket.write accepts all writes, growing a\n     * user space buffer indefinitely.\n     * The TCP transport (same as WS transport)\n     * manages the size of that buffer to stay below this limit.\n     * @private\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /*\n     * When true, the upper layer was told NO_SPACE and must be notified\n     * of the next \"drained\" event.\n     * @private\n     * @type {Boolean}\n     */\n    this._canSendNeeded = false;\n\n    /*\n     * One-shot flush callback.\n     * Set on flush(), ran and cleared on socket drain event.\n     * @private\n     */\n    this._flushCallback = null;\n\n    /**\n     * Flag to keep track of socket drained state:\n     * Set to false when socket.write returns false,\n     * (indicating user-space buffering)\n     * Set to true on socket drain events.\n     * (indicating the user space buffer has flushed to the OS.)\n     * @type {Boolean}\n     * @private\n     */\n    this._drained = true;\n\n    /**\n     * @type {TransportSessionState}\n     * @private\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * @type {?Socket}\n     * @private\n     */\n    //this._socket = null;\n    // Always the raw socket, which is stable from connect() until disconnect().\n    this._tlsSocket = null;\n    // Always the socket to write to.\n    // could be _rawsocket, _tlsSocket, or _compressor.\n    this._writable = null;\n\n    /**\n     * Save the Event in the onError listener\n     * Use it in onClose to populate the event.\n     * (Tcp socket calls onError with the error then onClose.\n     * WS socket calls only onClose and passes the error directly.)\n     * @private\n     * @type {?Error}\n     */\n    this._socketError = null;\n\n    /**\n     * @type {?string}\n     * @private\n     */\n    this._sessionId = new Date().getTime();\n\n    // Some whitebox tests expect a transport->transportSession nesting.\n    this._transportSession = this;\n\n    this._props.transportProtocol = null;\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    return this._clientstats;\n  }\n\n  setClientStats(newValue) {\n    this._clientstats = newValue;\n  }\n\n  rehome(eventCB, client) {\n    this._eventCB = eventCB;\n    this._client = client;\n  }\n  /**\n   * Extracts host and port from the router URL.\n   * @private\n   * @param {String} urlString the url\n   * @returns {{String, Number}} host and port\n   */\n  parseHostPort(urlString) {\n    let port = null;\n    const urlParsed = parseURL(urlString);\n    if (urlParsed.protocol !== 'tcp:' && urlParsed.protocol !== 'tcps:') {\n      // Should not happen.\n      LOG_ERROR(`Tcp Transport: URL with unexpected scheme: ${urlParsed.protocol}`);\n    }\n    const host = urlParsed.hostname;\n    port = urlParsed.port;\n    if (port === null) {\n      if (this._ssl) {\n        port = 55443;\n      } else {\n        port = this._compressionLevel > 0 ? 55003 : 55555;\n      }\n    }\n    // The rest of the URL (path, etc) is ignored.\n    LOG_TRACE(`Parsing url ${urlString} -> host: ${host} , port: ${port}`);\n    return { host, port };\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Buffer} data the data\n   */\n  onData(originalSocket, data) {\n    // We do not collect Rx stats.\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n      originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onData for previous socket, ignoring.');\n      return;\n    }\n    if (this._client) {\n      this._client.rxDataBuffer(data);\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Error} error the error\n   */\n  onError(originalSocket, error) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onError for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tcp transport is being destroyed, ignore error');\n      return;\n    }\n    LOG_DEBUG(`Tcp transport connection error ${error}`);\n    // net.socket invokes the error handler before the close handler.\n    // Websocket does not, and that's what the upper layer expects.\n    // Suppressing the \"double tap\" error events when connected,\n    // saving the error for the onClose handler in _socketerror.\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      if (this._state === TransportSessionState.WAITING_FOR_CREATE) {\n        //There won't be an onClose invocation, so destroying right away.\n        LOG_DEBUG(`Tcp transport connection error during establishment. ${error}`);\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._destroy(originalSocket, `Connection failed. Message:${error.message}`, ErrorSubcode.CONNECTION_ERROR);\n      } else {\n        this._eventCB(\n          new TransportSessionEvent(\n            TransportSessionEventCode.SEND_ERROR,\n            `Connection error${error}`,\n            null,\n            ErrorSubcode.CONNECTION_ERROR, null));\n      }\n    } else { // we rely on the close listener to notify the upper layer.\n      this._socketError = error;\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   * @param {Boolean} hadError wheter there was an error\n   */\n  onClose(originalSocket, hadError) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onClose for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tcp transport is being destroyed, ignore close');\n      return;\n    }\n    const msg = hadError ? 'with error' : 'cleanly';\n    const errorMsg = this._socketError && this._socketError.message;\n    this._socketError = null; // clear on read.\n    LOG_DEBUG(`Tcp transport connection is closed ${msg}. Message: ${errorMsg}`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    this._destroy(this._rawSocket, `Connection closed ${msg}. Message:${errorMsg}`,\n                  ErrorSubcode.COMMUNICATION_ERROR);\n  }\n\n  /**\n   * Callback for Socket.connect.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   */\n  onOpen(originalSocket) {\n    LOG_TRACE('TcpTransportSession received socket open event.');\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onOpen for previous socket, ignoring.');\n      return;\n    }\n    if (this._state !== TransportSessionState.WAITING_FOR_CREATE) {\n      LOG_DEBUG(`TcpTransportSession stray onOpen when in state ${this._state}, ignoring.`);\n      return;\n    }\n\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(\n          new TransportSessionEvent(\n              TransportSessionEventCode.UP_NOTICE,\n              'Connected',\n              0,\n              null,\n              this._sessionId));\n  }\n\n  /**\n   * Establish underlying transport.\n   * @override\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() {\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_ERROR(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (this._rawSocket) {\n      LOG_ERROR('TCP transport can not connect once _rawsocket exists.');\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (!this._url) {\n      LOG_WARN('Cannot connect to null URL');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    LOG_DEBUG('Establishing Tcp transport session');\n    try {\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n      const { host, port } = this.parseHostPort(this._url);\n      LOG_DEBUG('Constructing socket');\n      // Luckily raw and tls sockets have the same API.\n      this._rawSocket = new net.Socket();\n      this._rawSocket.connect(port, host);\n      const tlsOptions = this.createTLSOptions();\n      tlsOptions.socket = this._rawSocket;\n      this._tlsSocket = tls.connect(tlsOptions);\n      this._tlsSocket.on('secureConnect', this.onOpen.bind(this, this._rawSocket));\n      this._writable = this._tlsSocket;\n      LOG_TRACE('Assigning properties to socket');\n      // WARNING!\n      // This is the kind of thing that breaks on minification.\n      // Re-run unit tests in production mode when changed:\n      // grunt --gruntfile=Gruntfile_Production.js\n      // When broken, consult the closure compiler exceptions file:\n      // (sdk-root)/builder/template/-common/env/externs.js\n      this._writable.on('data', this.onData.bind(this, this._rawSocket));\n      this._writable.on('error', this.onError.bind(this, this._rawSocket));\n      this._writable.on('close', this.onClose.bind(this, this._rawSocket));\n      this._writable.on('drain', this.onDrain.bind(this, this._rawSocket));\n      this._writable.setNoDelay(true);\n\n      LOG_TRACE('Prepared socket');\n    } catch (error) {\n      LOG_DEBUG(`Error connecting: ${error}`);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      throw new TransportError(`Could not create Tcp socket: ${error.message}`,\n        error.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    LOG_DEBUG('Tcp transport is connecting');\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(msg, subcode) {\n    // No need to flush the decompressor,\n    // the upper layer is not interested in any more data.\n    return this._destroy(this._rawSocket, msg, subcode);\n  }\n\n  _destroy(originalSocket, msg, subcode) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray _destroy for previous socket, ignoring.');\n      return TransportReturnCode.OK;\n    }\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_DEBUG(`Destroy Tcp transport: ${msg}`);\n      // Set state for connection teardown.\n      this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n      const onerrorStub = function onerrorStub() { };\n      if (this._writable) {\n        this._writable.removeAllListeners();\n        this._writable.on('error', onerrorStub); // Prevent unhandled errors\n        // Prefering destroy() over end() as it seems to\n        // cancel pending callbacks like onOpen more reliably.\n        //this._writable.destroy();\n        this._writable.destroy();\n        this._rawSocket = null;\n        this._writable = null;\n      }\n\n      this._canSendNeeded = false;\n      this._flushCallback = null;\n      this._drained = true;\n      this._state = TransportSessionState.DOWN;\n      this._client = null; // Don't accept data.\n    }\n\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    LOG_TRACE(`Destroying TCP transport. msg: ${msg} subcode: ${subcode}`);\n    if (this._eventCB) {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                              msg || 'Session is destroyed',\n                                              null,\n                                              subcode || 0,\n                                              this._sessionId));\n      // Release references to other components\n      this._eventCB = null;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Intended for clean shutdowns.\n   * Callback is invoked when all nodejs-buffered data\n   * has been flushed to the OS socket.\n   */\n  flush(callback) {\n    if (this._drained) {\n      LOG_DEBUG('Transport emitting FLUSH immediately.');\n      callback();\n    } else if (callback) {\n      this._flushCallback = callback;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Send encoded SMF message\n   * Returns transport return code.\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    // Limiting socket buffer size to _sendBufferMaxSize unless\n    // the force flag was set\n    // or the socket is drained, in which case any size message goes.\n    if (forceAllowEnqueue\n      || this._drained\n      || message.length < this._sendBufferMaxSize - this._writable.bufferSize) {\n      // _drained keeps track of \"overflowing\" writes.\n      // nodejs never refuses a write but warns when it starts buffering.\n      this._drained = this._writable.write(message, 'ascii');\n      if (this._clientstats) {\n        this._clientstats.bytesWritten += message.length;\n        ++this._clientstats.msgWritten;\n      }\n      return TransportReturnCode.OK;\n    }\n    // We'll unblock the user on the next onDrain.\n    this._canSendNeeded = true;\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destry()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   */\n  onDrain(originalSocket) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onDrain for previous socket, ignoring.');\n      return;\n    }\n    this._drained = true;\n\n    if (this._flushCallback) {\n      LOG_DEBUG('Transport emitting FLUSH after drain.');\n      const prevCallback = this._flushCallback;\n      this._flushCallback = null;\n      prevCallback();\n    }\n\n    if (this._canSendNeeded) {\n      LOG_TRACE('Transport emitting CAN_ACCEPT_DATA');\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '', null, 0, this._sessionId));\n    }\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    const str = `TcpTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n}\n\nmixin(TcpTlsTransport, NodeTLSOptsMixin);\n\nmodule.exports.TcpTlsTransport = TcpTlsTransport;\n","const tls = require('tls');\nconst { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { LOG_TRACE, LOG_DEBUG, LOG_ERROR } = require('solclient-log');\nconst { mixin } = require('solclient-eskit');\nconst { NodeTLSOptsMixin } = require('../node-tls-opts-mixin');\nconst { ShuntableTransport } = require('./shuntable-transport');\nconst { TransportBase } = require('../transport-base');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst {\n  formatHexString,\n} = Hex;\n\n/**\n *\n * Modular transport with TLS (tcps://) support.\n * Only works in node.js.\n * Must be initialized with an underlying transport\n * (currently only the plaintext tcp transport is supported).\n * Wraps the underlying transport in a ShuntableTransport stream\n * which can be passed to tls.connect()\n * Supports  TLS shutdown leaving the socket open.\n * @private\n */\nclass TlsOnlyTransport extends TransportBase {\n\n  constructor(url, eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super(url, eventCB, client, props);\n\n    /**\n     * @private\n     * @type {TransportClientStats}\n     */\n    this._clientstats = null;\n    this._underlyingTransport = null;\n\n    /**\n     * Maximum amount of send data than can be queued.\n     * NodeJS socket.write accepts all writes, growing a\n     * user space buffer indefinitely.\n     * The TCP transport (same as WS transport)\n     * manages the size of that buffer to stay below this limit.\n     * @private\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /*\n     * When true, the upper layer was told NO_SPACE and must be notified\n     * of the next \"drained\" event.\n     * @private\n     * @type {Boolean}\n     */\n    this._canSendNeeded = false;\n\n    /*\n     * One-shot flush callback.\n     * Set on flush(), ran and cleared on socket drain event.\n     * @private\n     */\n    this._flushCallback = null;\n\n    /**\n     * Flag to keep track of socket drained state:\n     * Set to false when socket.write returns false,\n     * (indicating user-space buffering)\n     * Set to true on socket drain events.\n     * (indicating the user space buffer has flushed to the OS.)\n     * @type {Boolean}\n     * @private\n     */\n    this._drained = true;\n\n    /**\n     * @type {TransportSessionState}\n     * @private\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * @type {?Socket}\n     * @private\n     */\n    this._tlsSocket = null;\n\n    /**\n     * Save the Event in the onError listener\n     * Use it in onClose to populate the event.\n     * (Tcp socket calls onError with the error then onClose.\n     * WS socket calls only onClose and passes the error directly.)\n     * @private\n     * @type {?Error}\n     */\n    this._socketError = null;\n\n    /**\n     * @type {?string}\n     * @private\n     */\n    this._sessionId = new Date().getTime();\n\n    // Some whitebox tests expect a transport->transportSession nesting.\n    this._transportSession = this;\n\n    this._props.transportProtocol = null;\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    return this._clientstats;\n  }\n\n  setClientStats(value) {\n    this._clientstats = value;\n  }\n\n  setUnderlyingTransport(newUnderlyingTransoprt) {\n    this._underlyingTransport = newUnderlyingTransoprt;\n  }\n\n  getUnderlyingTransport() {\n    return this._underlyingTransport;\n  }\n\n  rehome(eventCB, client) {\n    this._eventCB = eventCB;\n    this._client = client;\n  }\n\n  // eventCB and rxDataBuffer forwarded to _shuntableTransport\n  // Chicken-egg problem in the factory...\n  eventCB(transportEvent) {\n    this._shuntableTransport.eventCB(transportEvent);\n  }\n\n  rxDataBuffer(data) {\n    this._shuntableTransport.rxDataBuffer(data);\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Buffer} data the data\n   */\n  onData(originalSocket, data) {\n    // We do not collect Rx stats.\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n      originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('TcpTransportSession stray onData for previous socket, ignoring.');\n      return;\n    }\n    if (this._client) {\n      this._client.rxDataBuffer(data);\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Error} error the error\n   */\n  onError(originalSocket, error) {\n    if (originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('Tls transport stray onError for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tls transport is being destroyed, ignore error');\n      return;\n    }\n    LOG_DEBUG(`Tls transport connection error ${error}`);\n    // net.socket invokes the error handler before the close handler.\n    // Websocket does not, and that's what the upper layer expects.\n    // Suppressing the \"double tap\" error events when connected,\n    // saving the error for the onClose handler in _socketerror.\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      this._eventCB(\n        new TransportSessionEvent(\n          TransportSessionEventCode.SEND_ERROR,\n          `Connection error${error}`,\n          null,\n          ErrorSubcode.CONNECTION_ERROR, null));\n    } else { // we rely on the close listener to notify the upper layer.\n      this._socketError = error;\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   * @param {Boolean} hadError wheter there was an error\n   */\n  onClose(originalSocket, hadError) {\n    if (originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('TcpTransportSession stray onClose for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tls transport is being destroyed, ignore close');\n      return;\n    }\n    const msg = hadError ? 'with error' : 'cleanly';\n    const errorMsg = this._socketError && this._socketError.message;\n    this._socketError = null; // clear on read.\n    LOG_DEBUG(`Tls transport connection is closed ${msg}. Message: ${errorMsg}`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    this._destroy(this._tlsSocket, `Connection closed ${msg}. Message:${errorMsg}`,\n                  ErrorSubcode.COMMUNICATION_ERROR);\n  }\n\n  /**\n   * Callback for Socket.connect.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   */\n  onOpen(originalSocket) {\n    LOG_TRACE('TlsTransportSession received socket open event.');\n    if (originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('TlsTransportSession stray onOpen for previous socket, ignoring.');\n      return;\n    }\n    if (this._state !== TransportSessionState.WAITING_FOR_CREATE) {\n      LOG_DEBUG(`TcpTransportSession stray onOpen when in state ${this._state}, ignoring.`);\n      return;\n    }\n\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(\n          new TransportSessionEvent(\n              TransportSessionEventCode.UP_NOTICE,\n              'Connected',\n              0,\n              null,\n              this._sessionId));\n  }\n\n  /**\n   * Establish underlying transport.\n   * @override\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() {\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_ERROR(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (this._tlsSocket) {\n      LOG_ERROR('TCP transport can not connect once _tlsSocket exists.');\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    LOG_DEBUG('Establishing TLS transport session');\n    this._state = TransportSessionState.WAITING_FOR_CREATE;\n    try {\n      const duplexOptions = { underlyingTransport: this._underlyingTransport };\n      this._shuntableTransport = new ShuntableTransport(duplexOptions);\n      this._underlyingTransport.connect();\n      const tlsOptions = this.createTLSOptions();\n      tlsOptions.socket = this._shuntableTransport;\n      // host and port can be set here for certificate validation in the future.\n      this._tlsSocket = tls.connect(tlsOptions);\n      this._tlsSocket.on('secureConnect', this.onOpen.bind(this, this._tlsSocket));\n      LOG_TRACE('Assigning properties to socket');\n      // WARNING!\n      // This is the kind of thing that breaks on minification.\n      // Re-run unit tests in production mode when changed:\n      // grunt --gruntfile=Gruntfile_Production.js\n      // When broken, consult the closure compiler exceptions file:\n      // (sdk-root)/builder/template/-common/env/externs.js\n      this._tlsSocket.on('data', this.onData.bind(this, this._tlsSocket));\n      this._tlsSocket.on('error', this.onError.bind(this, this._tlsSocket));\n      this._tlsSocket.on('close', this.onClose.bind(this, this._tlsSocket));\n      this._tlsSocket.on('drain', this.onDrain.bind(this, this._tlsSocket));\n      this._tlsSocket.setNoDelay(true);\n\n      LOG_TRACE('Prepared socket');\n    } catch (error) {\n      LOG_DEBUG(`Error connecting: ${error}`);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      throw new TransportError(`Could not create TLS socket: ${error.message}`,\n        error.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    LOG_DEBUG('TLS transport is connecting');\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(msg, subcode) {\n    //return this._underlyingTransport.destroy(msg, subcode);\n    return this._destroy(this._tlsSocket, msg, subcode);\n  }\n\n  _destroy(originalSocket, msg, subcode) {\n    if (originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('TcpTransportSession stray _destroy for previous socket, ignoring.');\n      return TransportReturnCode.OK;\n    }\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_DEBUG(`Destroy Tls transport: ${msg}`);\n      // Set state for connection teardown.\n      this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n      const onerrorStub = function onerrorStub() { };\n      if (this._tlsSocket) {\n        this._tlsSocket.removeAllListeners();\n        this._tlsSocket.on('error', onerrorStub); // Prevent unhandled errors\n        // Prefering destroy() over end() as it seems to\n        // cancel pending callbacks like onOpen more reliably.\n        //this._tlsSocket.destroy();\n        this._tlsSocket.destroy();\n        this._tlsSocket = null;\n      }\n\n      if (this._underlyingTransport) {\n        this._underlyingTransport.destroy(msg, subcode);\n        this._underlyingTransport = null;\n      }\n\n      this._canSendNeeded = false;\n      this._flushCallback = null;\n      this._drained = true;\n      this._state = TransportSessionState.DOWN;\n      this._client = null; // Don't accept data.\n    }\n\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    LOG_TRACE(`Destroying TCP transport. msg: ${msg} subcode: ${subcode}`);\n    if (this._eventCB) {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                              msg || 'Session is destroyed',\n                                              null,\n                                              subcode || 0,\n                                              this._sessionId));\n      // Release references to other components\n      this._eventCB = null;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Intended for clean shutdowns.\n   * Callback is invoked when all nodejs-buffered data\n   * has been flushed to the OS socket.\n   */\n  flush(callback) {\n    if (this._drained) {\n      LOG_DEBUG('Transport emitting FLUSH immediately.');\n      callback();\n    } else if (callback) {\n      this._flushCallback = callback;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Send encoded SMF message\n   * Returns transport return code.\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    // Limiting socket buffer size to _sendBufferMaxSize unless\n    // the force flag was set\n    // or the socket is drained, in which case any size message goes.\n    if (forceAllowEnqueue\n      || this._drained\n      || message.length < this._sendBufferMaxSize - this._tlsSocket.bufferSize) {\n      // _drained keeps track of \"overflowing\" writes.\n      // nodejs never refuses a write but warns when it starts buffering.\n      this._drained = this._tlsSocket.write(message, 'ascii');\n      if (this._clientstats) {\n        this._clientstats.bytesWritten += message.length;\n        ++this._clientstats.msgWritten;\n      }\n      return TransportReturnCode.OK;\n    }\n    // We'll unblock the user on the next onDrain.\n    this._canSendNeeded = true;\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destry()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   */\n  onDrain(originalSocket) {\n    if (originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('TcpTransportSession stray onDrain for previous socket, ignoring.');\n      return;\n    }\n    this._drained = true;\n\n    if (this._flushCallback) {\n      LOG_DEBUG('Transport emitting FLUSH after drain.');\n      const prevCallback = this._flushCallback;\n      this._flushCallback = null;\n      prevCallback();\n    }\n\n    if (this._canSendNeeded) {\n      LOG_TRACE('Transport emitting CAN_ACCEPT_DATA');\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '', null, 0, this._sessionId));\n    }\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    const str = `TcpTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n  tlsShutdown(callback) {\n    this._tlsSocket.removeAllListeners('close');\n    this._tlsSocket.on('close', this.tlsShutdownStage2.bind(this, callback));\n    this._shuntableTransport.dontEnd();\n    this._tlsSocket.end();\n  }\n\n  tlsShutdownStage2(callback) {\n    this._shuntableTransport.shunt();\n    this._tlsSocket.removeAllListeners();\n    this._tlsSocket = null;\n    this._shuntableTransport = null;\n    this._underlyingTransport.rehome(this._eventCB, this._client);\n    this._underlyingTransport.setClientStats(this.getClientStats());\n    this.setClientStats(null);\n    this._eventCB = null;\n    this._client = null;\n    callback(this._underlyingTransport);\n  }\n}\n\nmixin(TlsOnlyTransport, NodeTLSOptsMixin);\n\nmodule.exports.TlsOnlyTransport = TlsOnlyTransport;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { TransportReturnCode } = require('./transport-return-codes');\n\n// Stubs don't use this\n/* eslint-disable class-methods-use-this */\n// Stubs declare all params\n/* eslint-disable no-unused-vars */\n\n/**\n *\n * Base class for various transports\n * @private\n */\nclass TransportBase {\n  /**\n   * @constructor\n   * @param {URL} url The URL to connect to\n   * @param {function} eventCB The callback to notify on events\n   * @param {SMFClient} client The SMF client to notify on data\n   * @param {Object} transportProps Additional properties to assign to the transport\n   * @param {?Object} [interceptor] The transport interceptor to install\n   */\n  constructor(url, eventCB, client, transportProps, interceptor = null) {\n    this._url = url;\n    this._ssl = TransportBase.useSsl(url);\n    this._client = client;\n    this._eventCB = eventCB;\n    this._props = transportProps;\n    this.setInterceptor(interceptor);\n  }\n\n  /**\n   * Establish underlying transport.\n   * Returns transport return code, to be overridden in subclass\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() { return TransportReturnCode.OK; }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code, to be overridden in subclass\n   * @param {Boolean} immediate Destroy gracefully if false.\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(immediate, msg, subcode) { return TransportReturnCode.OK; }\n\n  flush(callback) {\n    callback();\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Send encoded SMF message\n   * Returns transport return code, to be overridden in subclass\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) { return TransportReturnCode.OK; }\n\n  /**\n   * @returns {TransportProtocol} Return transport protocol in use\n   */\n  getTransportProtocol() {\n    return this._props.transportProtocol;\n  }\n\n  /**\n   * @returns {?String} Return transport session information such as sessionId\n   */\n  getInfoStr() { return null; }\n\n  /**\n   * @returns {TransportClientStats} transport statistics\n   */\n  getClientStats() { return null; }\n\n  /**\n   * Check whether or not the transport can be downgraded to the next protocol.\n   * It is possible to downgrade the transport, the existing transport is destroyed and\n   * the new transport connection initiated.\n   * @param {String} msg The message associated with this operation\n   * @param {ErrorSubcode} subcode The subcode associated with this operation\n   * @returns {Boolean} Return true if downgrade is allowed and has been initiated; false otherwise\n   */\n  beginDowngrade(msg, subcode) { return false; }\n\n  /**\n   * Sets the interceptor for this transport. This object has the chance\n   * to intervene before bytes are sent or received.\n   * @param {Object} [interceptor] If set, the interceptor is inserted into the\n   *\n   * @private\n   */\n  setInterceptor(interceptor) {\n    if (this._interceptor) {\n      // Reset original callbacks\n      if (this._interceptor.removed) this._interceptor.removed(this);\n    }\n    this._interceptor = interceptor;\n    if (interceptor) {\n      if (interceptor.installed) interceptor.installed(this);\n    }\n  }\n\n  toString() {\n    return `${this.getTransportProtocol()}${this._ssl ? ' (SSL)' : ''}`;\n  }\n\n  /**\n   * @param {String} url The URL to check\n   * @returns {Boolean} `true` if the URL requires SSL; `false` otherwise\n   * @static\n   */\n  static useSsl(url) {\n    const urlParts = (url || '').split('://');\n    if (urlParts.length === 0 || TransportBase.validSchemes.indexOf(urlParts[0]) < 0) {\n      throw new OperationError(`Invalid url \"${url}\": Only [${\n                               TransportBase.validSchemes.join(', ')}] URL schemes are supported`,\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n\n    const useSSL = (urlParts[0] === 'https' || urlParts[0] === 'wss' || urlParts[0] === 'tcps');\n    return useSSL;\n  }\n\n}\n\n/**\n * @type {Array.<String>}\n */\nTransportBase.validSchemes = ['http', 'https', 'ws', 'wss', 'tcp', 'tcps'];\n\nmodule.exports.TransportBase = TransportBase;\n\n","const { WebTransportCapabilities } = require('./web');\n\nconst TransportCapabilities = {\n  web: WebTransportCapabilities,\n};\n\nmodule.exports.TransportCapabilities = TransportCapabilities;\n","/**\n * @private\n * @constructor\n */\nclass TransportClientStats {\n  constructor() {\n    this.bytesWritten = 0;\n    this.msgWritten = 0;\n  }\n}\n\nmodule.exports.TransportClientStats = TransportClientStats;\n","const { SolaceError } = require('solclient-error');\n\n/**\n * @classdesc\n * An error thrown when an error occurs on the transport session.\n * <p>\n * Applications are not expected to instantiate this type.\n *\n * @memberof solace\n * @private\n */\nclass TransportError extends SolaceError {\n  /**\n   * Creates an instance of TransportError.\n   * @constructor\n   * @param {String} message The message associated with this error\n   * @param {ErrorSubcode} subcode The subcode for this error\n   * @private\n   */\n  constructor(message, subcode) {\n    super('TransportError', message);\n    this.subcode = subcode;\n  }\n\n  toString() {\n    return `${super.toString()}, subcode=${this.subcode}`;\n  }\n}\n\nmodule.exports.TransportError = TransportError;\n","const { LOG_TRACE } = require('solclient-log');\nconst { TcpRawTransport, CompressedTransport, TlsOnlyTransport, TcpTlsTransport } = BUILD_ENV.TARGET_NODE ? require('./tcp') : {};\nconst { WebTransport } = require('./web');\n\nconst TransportFactory = {\n  createTransport(host, eventCB, client, props, getId) {\n    const url = host;\n    Object.assign(props, {\n      connectTimeoutInMsecs: 100000,\n    });\n    // TCP transport is dictated by the URL (tcp:// or tcps://)\n    // It is unaffected by the transportProtocol config parameter.\n    if (TcpRawTransport && url.trim().startsWith('tcp')) {\n      if (!url.trim().startsWith('tcps')) {\n        if (props.compressionLevel === 0) {\n          LOG_TRACE('createTransport raw tcp');\n          return new TcpRawTransport(url, eventCB, client, props);\n        } // else { //compressed plaintext right off the bat.\n        LOG_TRACE('createTransport compressed plaintex.');\n        const compressingLayer = new CompressedTransport(eventCB, client, props);\n        const plaintextTransport =\n          new TcpRawTransport(url,\n                              compressingLayer.eventCB.bind(compressingLayer),\n                              compressingLayer, props);\n        compressingLayer.setClientStats(plaintextTransport.getClientStats());\n        plaintextTransport.setClientStats(null);\n        compressingLayer.setUnderlyingTransport(plaintextTransport);\n        return compressingLayer;\n      } //else { //tcps\n      if (props.sslConnectionDowngradeTo !== 'PLAIN_TEXT') { //no downgrade\n        LOG_TRACE('createTransport monolithic tls');\n        return new TcpTlsTransport(url, eventCB, client, props);\n      } //else { // Composite TLS transport anticipating downgrade.\n      LOG_TRACE('createTransport composite tls (anticipating downgrade)');\n      // passing URL for SNI.\n      const tlsLayer = new TlsOnlyTransport(url, eventCB, client, props);\n      const plaintextTransport =\n        new TcpRawTransport(url,\n                            tlsLayer.eventCB.bind(tlsLayer),\n                            tlsLayer, props);\n      tlsLayer.setClientStats(plaintextTransport.getClientStats());\n      plaintextTransport.setClientStats(null);\n      tlsLayer.setUnderlyingTransport(plaintextTransport);\n      return tlsLayer;\n    }\n    LOG_TRACE('createTransport WebTransport');\n    return new WebTransport(url, eventCB, client, props, getId);\n  },\n\n  startCompression(uncompressedTransport) {\n    const eventCB = uncompressedTransport._eventCB;\n    const client = uncompressedTransport._client;\n    const props = uncompressedTransport._props;\n\n    const compressingLayer = new CompressedTransport(eventCB, client, props);\n    uncompressedTransport.rehome(compressingLayer.eventCB.bind(compressingLayer),\n                                 compressingLayer);\n    compressingLayer.setClientStats(uncompressedTransport.getClientStats());\n    uncompressedTransport.setClientStats(null);\n    compressingLayer.setUnderlyingTransport(uncompressedTransport);\n    compressingLayer.connect();\n    return compressingLayer;\n  },\n\n  severTls(encryptedTransport, compress, callback) {\n    if (!compress) {\n      encryptedTransport.tlsShutdown(callback);\n    } else {\n      const precallback = plaintextTransport => callback(this.startCompression(plaintextTransport));\n      //encryptedTransport.tlsShutdown(precallback.bind(this));\n      encryptedTransport.tlsShutdown(precallback);\n    }\n  },\n};\n\nmodule.exports.TransportFactory = TransportFactory;\n","const WebTransportsLib = require('./web');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_TRACE } = require('solclient-log');\nconst { TransportBase } = require('./transport-base');\nconst { TransportProtocol } = require('./transport-protocols');\n\nconst { lazyValue } = Lazy;\n\n// Define transportProtocol to transport mapping\nconst lutTransportProtocols = lazyValue(() => {\n  const protocols = {\n    [TransportProtocol.HTTP_BASE64]:           WebTransportsLib.StateBase64,\n    [TransportProtocol.HTTP_BINARY]:           WebTransportsLib.StateBinary,\n    [TransportProtocol.HTTP_BINARY_STREAMING]: WebTransportsLib.StateStreamingAndBinary,\n    [TransportProtocol.WS_BINARY]:             WebTransportsLib.StateWebSocketBinary,\n  };\n  return protocols;\n});\n\n/**\n * @classdesc\n * Handles web transport selection and downgrade without creating the actual transport\n * session object\n * @memberof solace\n * @private\n */\nclass TransportProtocolHandler {\n  constructor(url, webTransportProtocolList) {\n    const useSSL = TransportBase.useSsl(url);\n    let transport = null;\n    let downgradeTransport = null;\n    webTransportProtocolList.slice().reverse().forEach((el) => {\n      const TransportConstructor = lutTransportProtocols.value[el];\n      transport = new TransportConstructor(useSSL, this.switchState.bind(this), downgradeTransport);\n      downgradeTransport = transport;\n    });\n    this._transport = transport;\n    this._transport.onEnter();\n  }\n\n  getTransportProtocol() {\n    return this._transport.getTransportProtocol();\n  }\n\n  completeDowngrade(err) {\n    return this._transport.completeDowngrade(err);\n  }\n\n  canCompleteDowngrade() {\n    return (this._transport.getNextState() !== null);\n  }\n\n  toString() {\n    return this._transport.toString();\n  }\n\n  switchState(newState, reason) {\n    LOG_TRACE(`Switching ${this._transport} => ${newState} (${reason})`);\n    this._transport = newState;\n    newState.onEnter();\n  }\n}\n\nmodule.exports.TransportProtocolHandler = TransportProtocolHandler;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Connection scheme types referenced by {@link solace.SessionProperties#transportProtocol},\n * {@link solace.SessionProperties#webTransportProtocolList} (browser only), and\n * {@link solace.SessionProperties#transportProtocolInUse}.\n *\n * @target browser\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst TransportProtocol = {\n\n  /**\n   * A COMET model that uses base64 payload encoding. HTTP responses have a defined Content-Length.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BASE64: 'HTTP_BASE64',\n\n  /**\n   * A COMET model that uses binary payload encoding. HTTP responses have a defined Content-Length.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BINARY: 'HTTP_BINARY',\n\n  /**\n   * A COMET model that uses binary payload encoding. HTTP responses use Chunked Transfer-Encoding\n   * to stream data from the Solace Message Router to the client without needing to terminate the\n   * HTTP response.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BINARY_STREAMING: 'HTTP_BINARY_STREAMING',\n\n  /**\n   * A WebSocket communication channel uses binary payload encoding and provides full-duplex\n   * communication between the client and the Solace Message Router over a single TCP connection.\n   *\n   * This is the preferred protocol to use if all networking infrastructure betweed the application\n   * and the Solace Message router support WebSockets. If this is not the case, it may be necessary\n   * to use one of the HTTP protocols that use the COMET model of messaging.\n   *\n   * This transport protocol supports Guaranteed Messaging.\n   */\n  WS_BINARY: 'WS_BINARY',\n\n};\n\nmodule.exports.TransportProtocol = Enum.new(TransportProtocol);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst TransportReturnCode = {\n  OK:                          0,\n  FAIL:                        1,\n  NO_SPACE:                    2,\n  DATA_DECODE_ERROR:           3,\n  INVALID_STATE_FOR_OPERATION: 4,\n  CONNECTION_ERROR:            5,\n};\n\nmodule.exports.TransportReturnCode = Enum.new(TransportReturnCode);\n\n/* eslint-disable */\n// Manually demangle these names; bug 70031\nmodule.exports.TransportReturnCode._setCanonical({\n  'OK':                          TransportReturnCode.OK,\n  'FAIL':                        TransportReturnCode.FAIL,\n  'NO_SPACE':                    TransportReturnCode.NO_SPACE,\n  'DATA_DECODE_ERROR':           TransportReturnCode.DATA_DECODE_ERROR,\n  'INVALID_STATE_FOR_OPERATION': TransportReturnCode.INVALID_STATE_FOR_OPERATION,\n  'CONNECTION_ERROR':           TransportReturnCode.CONNECTION_ERROR\n});\n/* eslint-enable */\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Defines the possible TransportSessionEvent codes.\n * @private\n * @enum {number}\n */\nconst TransportSessionEventCode = {\n  // Raised when TransportSession is up and ready to send/receive data\n  UP_NOTICE:           1,\n  // Raised if the session is destroyed\n  DESTROYED_NOTICE:    2,\n  // Raised when the send queue had reached its maximum, but now has space again\n  CAN_ACCEPT_DATA:     4,\n  // Raised when there is a decode error on received data.  The app should destroy the session\n  DATA_DECODE_ERROR:   5,\n  // Raised when there is a decode error on received data.  The app should destroy the session\n  PARSE_FAILURE:       6,\n  // Raised when the connection times out. The app should attempt downgrade if available.\n  CONNECT_TIMEOUT:     7,\n  // There was an error sending a message on an etablished transport\n  SEND_ERROR:          8,\n  // The requested downgrade was rejected.\n  DOWNGRADE_FAILED:    10,\n  // The requested downgrade completed.\n  DOWNGRADE_SUCCEEDED: 11,\n};\n\nmodule.exports.TransportSessionEventCode = Enum.new(TransportSessionEventCode);\n","const { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { TransportSessionEventCode } = require('./transport-session-event-codes');\n\nconst { formatHexString } = Hex;\n\n/**\n * @classdesc\n * Defines a Transport Session Event\n *\n * @private\n */\nclass TransportSessionEvent {\n\n  /**\n   * @constructor\n   * @param {Object} tsEventCode The {@link TransportSessionEventCode} associated with this event\n   * @param {String} infoStr An informational string\n   * @param {?Number} responseCode The response code from the router, if any\n   * @param {ErrorSubcode} subcode The {@link ErrorSubcode} associated with this event\n   * @param {Number} sessionId The session ID associated with this event\n   *\n   */\n  constructor(tsEventCode, infoStr, responseCode, subcode, sessionId) {\n    this._transportEventCode = tsEventCode;\n    this._infoStr = infoStr;\n    this._responseCode = responseCode;\n    this._errorSubcode = subcode;\n    this._sid = sessionId;\n  }\n\n  // TransportSessionEvent functions\n\n  getTransportEventCode() {\n    return this._transportEventCode;\n  }\n\n  get transportEventCode() {\n    return this._transportEventCode;\n  }\n\n  getInfoStr() {\n    return this.infoStr;\n  }\n\n  get infoStr() {\n    return this._infoStr;\n  }\n\n  getResponseCode() {\n    return this.responseCode;\n  }\n\n  get responseCode() {\n    return this._responseCode;\n  }\n\n  getSubcode() {\n    return this.errorSubcode;\n  }\n\n  get errorSubcode() {\n    return this._errorSubcode;\n  }\n\n  getSessionId() {\n    return this.sessionId;\n  }\n\n  get sessionId() {\n    return this._sid;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'transportEventCode': TransportSessionEventCode.describe(this.transportEventCode),\n      'infoStr':            this.infoStr,\n      'responseCode':       this.responseCode,\n      'errorSubcode':       ErrorSubcode.describe(this.errorSubcode),\n      'sid':                this.sid && formatHexString(this.sid) || 'N/A',\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n}\n\nmodule.exports.TransportSessionEvent = TransportSessionEvent;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Transport session states, used by WebSocketTransportSession and HTTPTransportSession\n * @enum {number}\n * @private\n */\nconst TransportSessionState = {\n  DOWN:                0,\n  WAITING_FOR_CREATE:  1,\n  SESSION_UP:          2,\n  WAITING_FOR_DESTROY: 4,\n  CONNECTION_FAILED:   5,\n};\n\nmodule.exports.TransportSessionState = Enum.new(TransportSessionState);\n","const {\n  LOG_INFO,\n  LOG_WARN,\n} = require('solclient-log');\nconst { Process } = require('solclient-util');\n\n/**\n * @classdesc\n * Base class for transports\n * @memberof solace\n * @private\n */\nclass TSHState {\n  /**\n   * @constructor\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {TransportProtocol} tpProtocol The protocol to use for this state\n   * @param {Function} exitCallback The callback to notify on exit\n   * @param {?TSHState} nextState The TSH state to use on downgrade\n   */\n  constructor(useSsl, tpProtocol, exitCallback, nextState) {\n    this._ssl = !!useSsl;\n    this._transportProtocol = tpProtocol;\n    this._exitCallback = exitCallback;\n    this._nextState = nextState;\n    this._unsupportedRuntimeMessage =\n      `${this._transportProtocol} not supported by this runtime: ${Process.userAgent}`;\n  }\n\n  getNextState() {\n    return this._nextState;\n  }\n\n  setNextState(nextState) {\n    this._nextState = nextState;\n  }\n\n  getTransportProtocol() {\n    return this._transportProtocol;\n  }\n\n  getUseSsl() {\n    return this._ssl;\n  }\n\n  // Override me\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return true;\n  }\n\n  onEnter() {\n    if (!this.validateLegal()) {\n      if (this._nextState && this._exitCallback) {\n        this._exitCallback(this._nextState, this._unsupportedRuntimeMessage);\n      } else {\n        LOG_WARN(`${this._unsupportedRuntimeMessage}, no next state.`);\n      }\n    }\n  }\n\n  completeDowngrade(err) {\n    if (this._nextState && this._exitCallback) {\n      LOG_INFO(`Connect failed (${err}), try next state.`);\n      this._exitCallback(this._nextState, 'Connect failed');\n      return true;\n    }\n    LOG_WARN(`Connect failed (${err}), no next state.`);\n    return false;\n  }\n\n  toString() {\n    return this._transportProtocol + (this._ssl ? ' (SSL)' : '');\n  }\n\n}\n\nmodule.exports.TSHState = TSHState;\n","const HTTPLib = require('./http');\nconst { StateBase64 } = require('./state-base64');\nconst { StateBinary } = require('./state-binary');\nconst { StateStreamingAndBinary } = require('./state-streaming-and-binary');\nconst { StateWebSocketBinary } = require('./state-websocket-binary');\nconst { WebTransport } = require('./web-transport');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\nconst { HTTPConnection, HTTPTransportSession } = HTTPLib;\n\nmodule.exports.HTTPConnection = HTTPConnection;\nmodule.exports.HTTPTransportSession = HTTPTransportSession;\nmodule.exports.StateBase64 = StateBase64;\nmodule.exports.StateBinary = StateBinary;\nmodule.exports.StateStreamingAndBinary = StateStreamingAndBinary;\nmodule.exports.StateWebSocketBinary = StateWebSocketBinary;\nmodule.exports.WebTransport = WebTransport;\nmodule.exports.WebTransportCapabilities = WebTransportCapabilities;\n","const { HTTPConnection } = require('./http-connection');\nconst { HTTPTransportSession } = require('./http-transport-session');\n\nif (BUILD_ENV.TARGET_BROWSER) {\n  module.exports.HTTPConnection = HTTPConnection;\n  module.exports.HTTPTransportSession = HTTPTransportSession;\n}\n","const DebugLib = require('solclient-debug');\nconst {\n  Convert,\n  Base64,\n} = require('solclient-convert');\nconst {\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n  LOG_ERROR,\n} = require('solclient-log');\nconst {\n  sendXhrBinary,\n  sendXhrText,\n} = require('./send-xhr');\nconst { StringBuffer, TimingBucket } = require('solclient-util');\nconst { TransportReturnCode } = require('../../transport-return-codes');\nconst { XHRFactory } = require('./xhr-factory');\n\nconst { arrayBufferToString } = Convert;\n\nconst SOL_CONNECTION_DEBUG = false;\n\n/**\n * A URI starting with a \"/\" is a \"path-absolute\" URI, and those aren't\n * allowed to have a query component (starting with \"?\").\n *\n * If an origin isn't defined in the url, tack on the one from the page.\n *\n * @param {URL} url The URL to connect to\n * @returns {URL} Adjusted URL if incoming URL was relative\n * @private\n */\nfunction prependOrigin(url) {\n  if (!url.match(/^(http|ws)(s?):/i) && window.location && window.location.origin) {\n    return window.location.origin + ((url.charAt(0) !== '/') ? '/' : '') + url;\n  }\n  return url;\n}\n\nfunction getTs() {\n  return new Date().getTime();\n}\n\nclass Stats {\n  constructor() {\n    this.WaitedToken = new TimingBucket('WaitedToken', 100);\n    this.HadToken = new TimingBucket('HadToken', 100);\n    this.ReturnedToken = new TimingBucket('ReturnedToken', 100);\n  }\n  toString() {\n    let s = '';\n    [this.WaitedToken, this.HadToken, this.ReturnedToken].forEach((b) => {\n      if (b && b.bucketCount() > 0) {\n        s += `${b.name} >> ${b}\\n`;\n      }\n    });\n    return s;\n  }\n}\n\n/**\n * @classdesc\n * This class contains all state for a single HTTP connection (XHR).\n *\n * @private\n */\nclass HTTPConnection {\n  constructor(url, base64Enc, streamProgressEvents, rxDataCb,\n              connectionErrorCb, contentType, connectionClose) {\n    this.Options = {\n      url: prependOrigin(url),\n      contentType,\n      base64Enc,\n      streamProgressEvents,\n      connectionClose,\n    };\n\n    this._streamProgressBytes = 0;\n    this._xhr = null;\n    this._rxDataCb = rxDataCb;\n    this._connErrorCb = connectionErrorCb;\n    this._reqActive = false;\n    this._REQCOUNTER = 0;\n    this._REQBASE = Math.floor(Math.random() * 1000);\n\n    this._xhr = XHRFactory.create();\n    // older browser ie9\n    this._handleAbortedReq = !HTTPConnection.browserSupportsXhrBinary();\n\n    this.stats = new Stats();\n  }\n\n  recStat(s) {\n    if (!SOL_CONNECTION_DEBUG) {\n      return;\n    }\n    const stats = this.stats;\n    if (s === 'GotToken') {\n      stats.LastGotToken = getTs();\n      if (stats.LastSendMsg) {\n        const waitedTok = stats.LastGotToken - stats.LastSendMsg;\n        stats.WaitedToken.log(waitedTok);\n        if (waitedTok > 100) {\n          LOG_WARN(`Abnormally long waitToken, last request: ${this._REQBASE}_${this._REQCOUNTER}`);\n        }\n      }\n    }\n    if (s === 'SendMsg') {\n      stats.LastSendMsg = getTs();\n      const hadToken = stats.LastSendMsg - stats.LastGotToken;\n      stats.HadToken.log(hadToken);\n    }\n    if (s === 'GotData') {\n      stats.LastGotData = getTs();\n    }\n    if (s === 'ReturnToken') {\n      stats.LastReturnToken = getTs();\n      if (stats.LastGotData) {\n        const returnedToken = stats.LastReturnToken - stats.LastGotData;\n        stats.ReturnedToken.log(returnedToken);\n      }\n    }\n  }\n\n  /*\n   * Send data over the connection - this requires a send token\n   */\n  send(data, attempt = 0, maxRetry = 1) {\n    if (attempt > 0) {\n      this._xhr.abort();\n      this._xhr = XHRFactory.create();\n    }\n    this._xhr.open('POST', this.Options.url, true);\n\n    this._streamProgressBytes = 0;\n    // We pass the write data to the CB so we can retry when it mysteriously fails.\n    this._xhr.onreadystatechange = () => this.xhrStateChange(data, attempt, maxRetry);\n\n    this._reqActive = true;\n\n    if (SOL_CONNECTION_DEBUG) {\n      this._REQCOUNTER++;\n      this._xhr.setRequestHeader('sol-request-track', `${this._REQBASE}_${this._REQCOUNTER}`);\n    }\n    if (this.Options.base64Enc) {\n      sendXhrText(this._xhr, data, this.Options.contentType, this.Options.connectionClose);\n    } else {\n      sendXhrBinary(this._xhr, data, this.Options.contentType, this.Options.connectionClose);\n    }\n    this.recStat('SendMsg');\n  }\n\n\n  // XmlHTTPRequest Callback\n  xhrStateChange(sentdata, attempt, maxRetry) {\n    const readyState = this._xhr.readyState;\n    const RS_LOADING = this._xhr.LOADING;\n    const RS_DONE = this._xhr.DONE;\n\n    if (!((this.Options.streamProgressEvents && readyState === RS_LOADING)\n          || readyState === RS_DONE)) {\n      // we proceed with notifications if we're LOADING and we requested streaming events,\n      // or we're DONE.\n      return;\n    }\n\n    if (!this._reqActive) {\n          // request aborted, DO NOT propagate event\n      return;\n    }\n\n    let status = null;\n    if (this._handleAbortedReq) {\n      // To avoid the following IE9 error when request is aborted by server or client and\n      // application tries to access any property in the XHR other than readyState whose value is\n      // 4 (XMLHTTPRequest.DONE):\n      // - The data necessary to complete this operation is not yet available\n      // See https://groups.google.com/forum/#!topic/websync/ysBEvtvMyb0 for details\n      // _requestActive is used to handle client initiated abort, but it does not handle\n      // the case when the request is aborted on the server side or proxy server\n      try {\n        status = this._xhr.status;\n      } catch (e) {\n        LOG_INFO(`Error trying to access status in XHR due to request aborted: ${e.message}`);\n        return;\n      }\n    } else {\n      status = this._xhr.status;\n    }\n\n    if (status === 200 || status === 304) {\n      // Success status code\n      let data = null;\n      if (this._xhr.responseType && this._xhr.responseType === 'arraybuffer') {\n        data = arrayBufferToString(this._xhr.response);\n      } else {\n        data = this._xhr.responseText;\n      }\n      data = data.substring(this._streamProgressBytes, data.length);\n      this._streamProgressBytes += data.length;\n\n      if (data.length === 0 && readyState === RS_LOADING) {\n        // we are streaming LOADING events but have no data\n        return;\n      }\n\n      if (this.Options.base64Enc) {\n        try {\n          data = Base64.decode(data);\n        } catch (e) {\n          // Failed the decode - call the error callback\n          LOG_ERROR(`Data decode error on: ${data}`);\n          LOG_ERROR(`Data decode error is: ${e.message}`);\n          this._rxDataCb(TransportReturnCode.DATA_DECODE_ERROR, data);\n          return;\n        }\n      } else {\n        // take lower-8 bits\n        const decodedData = [];\n        const dataLength = data.length;\n        for (let i = 0; i < dataLength; i++) {\n          decodedData.push(String.fromCharCode(data.charCodeAt(i) & 0xFF));\n        }\n        data = decodedData.join('');\n      }\n      if (readyState === RS_DONE) {\n        // MUST do this BEFORE the callback invocation, because the callback can trigger a new send.\n        this._reqActive = false;\n      }\n      this._rxDataCb(TransportReturnCode.OK, data);\n      if (readyState === RS_DONE && data.length > 0) {\n        this._rxDataCb(TransportReturnCode.OK, ''); // indicate end of stream\n      }\n\n      return;\n    }\n\n    // Failure status code.\n    const statusText = this._xhr.statusText;\n    let responseText = '';\n    if (this._xhr.responseType && this._xhr.responseType === 'arraybuffer') {\n      responseText = arrayBufferToString(this._xhr.response);\n    } else {\n      responseText = this._xhr.responseText || '';\n    }\n\n    const responseTextLen = responseText.length;\n    const requestUrl = this.Options.url;\n    const sentdataLen = sentdata ? sentdata.length : 0;\n    const { formatDumpBytes } = DebugLib.Debug;\n    const responseTextDump = formatDumpBytes(\n      responseText.substr(0, Math.min(responseTextLen, 64)), true, 0);\n    const sentTextDump = formatDumpBytes(\n      (sentdata || '').substr(0, Math.min(sentdataLen, 256)), true, 0);\n    if (BUILD_ENV.MODE_DEBUG) {\n      const stmt = new StringBuffer(\n        `Http request failed.  url=${requestUrl}, status=${status}, statusText=${statusText}, `,\n        `responseText length=${responseTextLen}, `,\n        'responseText (first 64 bytes or fewer)=\\n',\n        `${responseTextDump}, `,\n        `XHR errorCode=${this._xhr._error ? this._xhr._error.code : ''}, `,\n        `attempt=${attempt}, reqActive=${this._reqActive}, readyState=${readyState}, `,\n        `sent data length=${sentdataLen}, `,\n        'sent data (first 256 bytes or fewer)=\\n',\n        `${sentTextDump}`).toString();\n      LOG_DEBUG(stmt);\n    }\n\n    const nextMaxRetry = maxRetry;\n    if (this._reqActive\n          && status !== 400\n          && responseText.length === 0\n          && (attempt === 0 || attempt < nextMaxRetry)) {\n      LOG_INFO(`XHR failed while request active, will retry send, retry=${attempt + 1}`);\n        // RETRY (could be a transient browser connection problem)\n      this.send(sentdata, attempt + 1, nextMaxRetry);\n    } else {\n      this._reqActive = false;\n      this._connErrorCb(\n          status,\n          new StringBuffer(\n            `HTTP request failed(status=${status} statusText=${statusText}, `,\n            `responseText length=${responseTextLen}, responseText[0..64]=\\n`,\n            responseTextDump,\n            `XHR errorCode=${this._xhr._error ? this._xhr._error.code : ''})`).toString());\n    }\n  }\n\n  isUsingBase64() {\n    return this.Options.base64Enc;\n  }\n\n  // This function will abort the current xhr request if it is active\n  abort() {\n      // mark request as inactive, so we won't process statechange events\n    this._reqActive = false;\n    if (this._xhr && this._xhr.abort) {\n      this._xhr.abort();\n    }\n  }\n\n  /**\n   * Check if we can try binary XHR on this browser.\n   * @returns {Boolean} `true` if XHR binary should work; `false` otherwise\n   * @static\n   */\n  static browserSupportsXhrBinary() {\n    return sendXhrBinary !== sendXhrText;\n  }\n\n  /**\n   * Check if browser supports streaming responses (progressive reading of XHR).\n   * @returns {Boolean} `true` if feature was detected, `false` otherwise\n   * @static\n   */\n  static browserSupportsStreamingResponse() {\n    const xhr = XHRFactory.create();\n    // A conforming XHR2 implementation must include progress events.\n    // Can we assume that the event property will be null instead of undefined?\n    // A conforming XHR2 implementation must also include withCredentials.\n    const check = xhr && xhr.onprogress === null; // xhr.withCredentials === false;\n    LOG_INFO(`http browserStreamingCheck - if XMLHTTPRequest supported and XMLHTTPRequest support onprogress: ${check}`);\n    return check;\n  }\n}\n\nmodule.exports.HTTPConnection = HTTPConnection;\n","const DebugLib = require('solclient-debug');\nconst SMFLib = require('solclient-smf');\nconst { Check } = require('solclient-validate');\nconst { Convert, Hex } = require('solclient-convert');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { HTTPConnection } = require('./http-connection');\nconst { LogFormatter } = require('solclient-log');\nconst { SMFClient } = require('../../smf-client');\nconst { TransportError } = require('../../transport-error');\nconst { TransportProtocol } = require('../../transport-protocols');\nconst { TransportReturnCode } = require('../../transport-return-codes');\nconst { TransportSessionEvent } = require('../../transport-session-event');\nconst { TransportSessionEventCode } = require('../../transport-session-event-codes');\nconst { TransportSessionState } = require('../../transport-session-states');\nconst { WebTransportSessionBase } = require('../web-transport-session-base');\n\nconst { int32ToStr, strToByteArray, strToHexArray } = Convert;\nconst { formatHexString } = Hex;\n\nconst {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_ERROR,\n  LOG_INFO,\n} = new LogFormatter('[http-transport-session]');\n\n/**\n * @private\n * @namespace Values for tracking current state of incoming streaming data\n */\nconst PacketReadState = {\n  READING_HEADER: 0,\n  STREAMING:      1,\n};\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n/**\n * @private\n */\nconst MSIE_TRANSPORT_PADDING = 257;\n\nfunction adaptURL(url) {\n  const v = url.match(/(ws|http)(s?:\\/\\/.+)/);\n  return `http${v[2]}`;\n}\n\n/** ===========================================================================\n * HTTPTransportSession :\n *\n * This contains all data and code required to maintain HTTP transport sessions\n * with Solace routers\n * ============================================================================\n * @extends WebTransportSessionBase\n * @private\n */\nclass HTTPTransportSession extends WebTransportSessionBase {\n  constructor(baseUrl, eventCB, client, props) {\n    // Our internal data format (for now) is binary string, so we wrap the callback\n    // in a function that does the required conversion to ArrayBuffer.\n    super(baseUrl,\n          eventCB,\n          client,\n          props);\n\n    // const self = this;\n    // logger.formatter = function formatter(...args) {\n    //   return [self.sessionIdHex, ...args];\n    // };\n\n    // Set to true if we have the data token that we need for sending data to the router\n    this._haveToken = true;\n\n    // Maximum payload chunk size in web transport\n    this._confMaxWebPayload = props.maxWebPayload;\n    this._maxPayloadBytes = 0;\n\n    // Timer that will keep track of the destroy time\n    this._destroyTimer = null;\n    this._destroyTimeout = props.connectTimeoutInMsecs;\n\n    // The URL used for create messages\n    this._createUrl = adaptURL(baseUrl);\n\n    // The URL used for all other messages - it will have the router tag appended\n    // after the session has been created\n    this._routerUrl = this._createUrl;\n\n    // SMF client (instantiated after session is created)\n    this._rxChannelClient = null;\n    // Send data connection (instantiated after session is created)\n    this._httpSendConn = null;\n\n    // Receive data connection (instantiated after session is created)\n    this._httpReceiveConn = null;\n\n    // Data Token SMF header - this is preformatted for performance\n    // It will be set after session is created\n    this._smfDataTokenTSHeader = null;\n\n    // Router Tag - a string that will be added to HTTP request URLs\n    this._routerTag = '';\n\n    // Session ID - 8-byte identifier that will associate this client\n    // with client resources on the router\n    this._sid = null;\n\n    if (props.transportProtocol === null || props.transportProtocol === undefined) {\n      throw new OperationError('transportProtocol is not set', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n\n    this._transportProtocol = props.transportProtocol;\n    this._useBinaryTransport = false;\n    this._useStreamingTransport = false;\n    this._streamingTransportPadding = 0;\n\n    this._useBinaryTransport = (props.transportProtocol !== TransportProtocol.HTTP_BASE64);\n    this._useStreamingTransport = (props.transportProtocol ===\n                                   TransportProtocol.HTTP_BINARY_STREAMING);\n\n    // extra state for STREAMING transport\n    this._incomingBuffer = '';\n    this._packetReadState = PacketReadState.READING_HEADER;\n\n    const agent = navigator.userAgent || '';\n    if (agent.match(/trident/i) || agent.match(/msie/i)) {\n      this._streamingTransportPadding = MSIE_TRANSPORT_PADDING;\n    }\n\n    if (props.transportContentType === null || props.transportContentType === undefined) {\n      throw new OperationError('transportContentType is not set', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._contentType = props.transportContentType;\n  }\n\n  /**\n   * @override\n   */\n  connectTimerExpiry() {\n    LOG_INFO('HTTP transport connect timeout');\n    this.destroyCleanup('HTTP transport connect timeout', ErrorSubcode.TIMEOUT);\n  }\n\n  get sessionIdHex() {\n    return (this._sid) ? formatHexString(this._sid) : '';\n  }\n\n  updateMaxWebPayload() {\n    // 22 Bytes of TransportSMF wrapping overhead\n    const trLessEncapSMF = this._confMaxWebPayload - 22;\n    // Base64 has a 4:3 expansion\n    this._maxPayloadBytes = this._useBinaryTransport\n      ? trLessEncapSMF\n      : Math.floor(trLessEncapSMF * 0.75);\n  }\n\n  /**\n   * Connect transport session to router\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  connect() {\n    // Check that we we are in an acceptable state for connection\n    if (this._state !== TransportSessionState.DOWN) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    return this.connectInternal();\n  }\n\n  connectInternal() {\n    // Create the XHR to talk to the router\n    this._connError = null;\n    try {\n      this._createConn = new HTTPConnection(this._createUrl,\n                                            !(this._useBinaryTransport),\n                                            false,\n                                            (rc, data) => this.handleCreateResponse(rc, data),\n                                            (rc, data) => this.handleCreateConnFailure(rc, data),\n                                            this._contentType);\n    } catch (e) {\n      LOG_INFO(`Failed to create connection to router: ${e.message}`);\n      this._connError = e;\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n    if (Check.nothing(this._createConn)) {\n      LOG_INFO('Failed to create connection to router');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    // Get an SMF transport session create message\n    const createMsg = SMFLib.Codec.Transport.genTsCreateHeader();\n\n    if (this._state === TransportSessionState.WAITING_FOR_CREATE) {\n      // already connecting (this is likely a retry with Base64 encoding)\n      LOG_DEBUG('Connect attempt while in WAITING_FOR_CREATE (retry)');\n    } else {\n      this.createConnectTimeout();\n      // Set the current state\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n    }\n\n    // Send the create message to the router.  When the response is received, the\n    // handleCreateResponse method will be called\n    try {\n      this._createConn.send(createMsg);\n    } catch (connError) {\n      LOG_INFO(`Error connecting: ${connError.message}`);\n      LOG_TRACE('Error details:', connError.stack || connError);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.cancelConnectTimeout();\n      if (connError instanceof TransportError) {\n        this._connError = connError;\n      } else {\n        this._connError = new TransportError(\n          `Could not create HTTP transport session: ${connError.message}`,\n          connError.subcode || ErrorSubcode.CONNECTION_ERROR);\n      }\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Destroy transport session to router\n   * @param {String} msg The message associated with the operation\n   * @param {ErrorSubcode} subcode The subcode associated with the operation\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  destroy(msg, subcode) {\n    LOG_TRACE(`Destroy transport session when in state ${this._state}`);\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n        this._state === TransportSessionState.DOWN) {\n      // Nothing to do\n      return TransportReturnCode.OK;\n    }\n\n    if (this._state === TransportSessionState.CONNECTION_FAILED ||\n        this._state === TransportSessionState.WAITING_FOR_CREATE) {\n      // The connections are in an unreliable state - we will just\n      // kill our local object and let the router clean itself up with its inactivity timer\n      LOG_INFO('The connection is in unreliable state, close transport');\n      this.destroyCleanup(msg, subcode, true);\n      return TransportReturnCode.OK;\n    }\n\n    LOG_INFO('Destroy transport session immediately');\n    // Set the current state\n    this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n    // Abort any current requests for this session\n    if (this._httpSendConn !== null) {\n      LOG_INFO('Destroy transport session: abort sendConn');\n      this._httpSendConn.abort();\n    }\n    if (this._httpReceiveConn !== null) {\n      LOG_INFO('Destroy transport session: abort receiveConn');\n      this._httpReceiveConn.abort();\n    }\n\n    // Start a timer\n    this._destroyTimer = setTimeout(() => {\n      this.destroyTimerExpiry();\n    }, this._destroyTimeout);\n\n    // Send the destroy message over new HTTPConnection to the router so that the async abort\n    // can properly finish in the old _httpSendConn.\n    // When the response is received, the handleDestroyResponse method will be called.\n    this._httpSendConn = new HTTPConnection(\n        this._routerUrl,\n        !(this._useBinaryTransport), false,\n        (rc, data) => this.handleRxDataToken(rc, data), // RxData callback\n        (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n        this._contentType,\n        true);\n\n    // Get an SMF transport session destroy message\n    const destroyMsg = SMFLib.Codec.Transport.genTsDestroyHeader(this._sid);\n\n    LOG_TRACE(`destroy message: ${strToHexArray(destroyMsg)}`);\n    this._httpSendConn.send(destroyMsg);\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Send data over the connection - this requires a send token\n   * @param {String} dataIn The data to send\n   * @param {Boolean} [forceAllowEnqueue=false] If `true`, do not fail due to out of space\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  send(dataIn, forceAllowEnqueue = false) {\n    let data = dataIn;\n    // LOG_TRACE(`HTTPTransportSession:send ${data.length}, tx_queued:${this._queuedDataSize}`);\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    // Check to see if we already have queued data\n    if ((this._queuedData.length > 0) || (!this._haveToken)) {\n      return this.enqueueData(data, forceAllowEnqueue);\n    }\n\n    // Check if we need to chop up the payload\n    let remainder = null;\n    if (data.length > this._maxPayloadBytes) {\n      remainder = data.substr(this._maxPayloadBytes);\n      data = data.substr(0, this._maxPayloadBytes);\n\n      // If no space for remainder, return FAIL without sending anything.\n      if (!this.allowEnqueue(remainder.length)) {\n        return this.enqueueFailNoSpace();\n      }\n\n    // LOG_DEBUG(\"$$ send dataChunk:\" + data.length + \", remainderChunk:\" + remainder.length);\n    }\n\n    // We have the token, so send the data\n    this._haveToken = false;\n\n    const transportPacketLen = (this._smfDataTSHeaderParts[0].length + 4 +\n                                this._smfDataTSHeaderParts[1].length + data.length);\n\n    this._httpSendConn.send(this._smfDataTSHeaderParts[0] +\n                            int32ToStr(transportPacketLen) +\n                            this._smfDataTSHeaderParts[1] +\n                            data);\n    this._clientstats.bytesWritten += data.length;\n\n    if (remainder) {\n      // The message was partially sent. The message written count will be incremented\n      // when its last bytes go out.\n      return this.enqueueData(remainder, null);\n    }\n\n    // The whole message was sent.\n    this._clientstats.msgWritten++;\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Push data onto the pending send queue as long as it doesn't violate\n   * the max stored message size\n   * @param {String} data The data to enqueue\n   * @param {Boolean} [forceAllowEnqueue=false] If `true`, don't fail due to no space.\n   * @returns {TransportReturnCode} The result of the operation.\n   */\n  enqueueData(data, forceAllowEnqueue = false) {\n    const dataLen = data.length;\n\n    // LOG_DEBUG(\"enqueueing data: \" + data.length + \", queue depth: \" + this._queuedDataSize);\n    if (forceAllowEnqueue || this.allowEnqueue(dataLen)) {\n      this._queuedDataSize += dataLen;\n      this._queuedData.push(data);\n    } else {\n      return this.enqueueFailNoSpace();\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Set the data in the preformatted headers.  The headers are set up this way\n   * for performance reasons\n   * @param {String} sid The session ID to incorporate into the headers\n   */\n  initPreformattedHeaders(sid) {\n    // _smfDataTSHeaderParts is a two entry array - one part before the total length\n    // and the other after.  The total length is not known until actual data is sent\n    this._smfDataTSHeaderParts = SMFLib.Codec.Transport.genTsDataMsgHeaderParts(sid);\n\n    // _smfDataTokenTSHeader is a single header that all data-token messages require\n    if (this._useStreamingTransport) {\n      this._smfDataTokenTSHeader = SMFLib.Codec.Transport.genTsDataStreamTokenMsg(\n        sid,\n        this._streamingTransportPadding);\n    } else {\n      this._smfDataTokenTSHeader = SMFLib.Codec.Transport.genTsDataTokenMsg(sid);\n    }\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    if (this._queuedDataSize) {\n      this._flushCallback = callback;\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * Check if there is any data waiting to be sent to the router.\n   * If there is, send it.\n   */\n  sendQueuedData() {\n    if (this._queuedDataSize === 0) {\n      return;\n    }\n    this._haveToken = false;\n    const data = this.getQueuedDataToSend();\n    const transportPacketLen = this._smfDataTSHeaderParts[0].length + 4 +\n                               this._smfDataTSHeaderParts[1].length + data.length;\n\n    this._httpSendConn.send(this._smfDataTSHeaderParts[0] +\n                            int32ToStr(transportPacketLen) +\n                            this._smfDataTSHeaderParts[1] +\n                            data);\n    this._clientstats.bytesWritten += data.length;\n\n\n    if (this._canSendNeeded) {\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '',\n                                  null,\n                                  0,\n                                  this._sid));\n    }\n\n    if (this._flushCallback) {\n      const cb = this._flushCallback;\n      this._flushCallback = null;\n      cb();\n    }\n  }\n\n  // Internal Callbacks\n\n  // Called when a create response message has been received\n  handleCreateResponse(tsRc, response) {\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n        this._state === TransportSessionState.DOWN) {\n      LOG_DEBUG('Received create response on a destroyed transport session, ignore');\n      return;\n    }\n\n    // Was: stop the connect timer. We don't do that in this transport now.\n    // We wait for the login response.\n\n    // We know whether we're using Base64 or not, so update our max payload size.\n    this.updateMaxWebPayload();\n\n    if (tsRc !== TransportReturnCode.OK) {\n      LOG_INFO(`Received create response with return code ${TransportReturnCode.describe(tsRc)}`);\n      if (tsRc === TransportReturnCode.DATA_DECODE_ERROR) {\n        this.destroyCleanup('Received data decode error on create session response', ErrorSubcode.DATA_DECODE_ERROR);\n      } else {\n        this.destroyCleanup('Failed to handle create session response', ErrorSubcode.CONNECTION_ERROR);\n      }\n      return;\n    }\n\n    if (response.length === 0) {\n      return; // null read indicating end of stream\n    }\n\n    // Parse the Transport Session SMF\n    const parsedResponse = SMFLib.Codec.Decode.decodeCompoundMessage(BufferImpl.from(response, 'latin1'), 0);\n    if (!parsedResponse) {\n      LOG_ERROR('Could not parse create response as SMF. Destroying transport');\n      this.destroyCleanup('Failed to parse create response message', ErrorSubcode.CONNECTION_ERROR);\n      return;\n    }\n\n    const smfresponse = parsedResponse.getResponse();\n    if (smfresponse.responseCode !== 200) {\n      this.destroyCleanup(`Transport create request failed (${smfresponse.responseCode}, ${smfresponse.responseString})`,\n                          ErrorSubcode.CONNECTION_ERROR);\n      return;\n    }\n\n    this.cancelConnectTimeout();\n    this._createConn.abort();\n    this._createConn = null;\n    this._state = TransportSessionState.SESSION_UP;\n    this._sid = parsedResponse.sessionId;\n    this._routerTag = parsedResponse.routerTag;\n\n    // Trim any parameters off the create url before using it for the routerUrl\n    this._routerUrl = this._createUrl.replace(/\\?.*/, '');\n    if (this._routerTag !== '') {\n      this._routerUrl = this._routerUrl + this._routerTag;\n    }\n\n    this.initPreformattedHeaders(this._sid);\n    const useBase64 = !this._useBinaryTransport;\n    const useStreaming = this._useStreamingTransport;\n\n    // Create the two connections to the router\n    // By now, getXhrObj() should not throw any exception inside HTTPConnection constructor\n    this._httpSendConn = new HTTPConnection(this._routerUrl, useBase64, false,\n        (rc, data) => this.handleRxDataToken(rc, data), // RxData callback\n        (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n        this._contentType);\n    if (this._useStreamingTransport) {\n      // When the transport is HTTP_BINARY_STREAMING the SMF encapsulation\n      // is complete, the SMF header indicates a message length of 0xFFFFFFFF\n      // and after decoding just the header alone the data is passed through\n      // to the session layer, so we must use a simplified SMF parser and a\n      // stateful data callback in that case.\n      this._httpReceiveConn = new HTTPConnection(this._routerUrl, useBase64, useStreaming,\n            (rc, data) => this.handleRxStreaming(rc, data), // RxData Callback\n            (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n            this._contentType,\n            true);\n    } else {\n      // Create a SMF client for the Receive Data channel, when http is used.\n      // SMF messages are encapsualated in a solace http-transport which is itself\n      // encapsulated in SMF.  So create an SMF client that will callback with\n      // an smfMessage construct to the HTTPTransportSession.\n      this._rxChannelClient = new SMFClient(\n            rxData => this.handleSmfMessage(rxData),\n            rxError => this.handleSmfParseError(rxError),\n            null);    // we don't have a 'session' for this client. It's just a parser.\n      this._httpReceiveConn = new HTTPConnection(this._routerUrl, useBase64, useStreaming,\n            (rc, data) => this.handleRxData(rc, data), // RxData Callback\n            (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n            this._contentType);\n    }\n\n    // Give the router the data token so that it will be able to send data\n    this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n\n    // Send the event to the application letting it know that the session is up\n    this._eventCB(\n      new TransportSessionEvent(TransportSessionEventCode.UP_NOTICE,\n                                smfresponse.responseString,\n                                smfresponse.responseCode,\n                                0,\n                                parsedResponse.sessionId));\n  }\n\n  // Called when receiving a destroy response\n  handleDestroyResponse(response) {\n    LOG_DEBUG('Handle destroy response');\n    // Stop the timer\n    this.cancelDestroyTimeout();\n    const innerResponse = response.getResponse();\n    const responseString = innerResponse ? innerResponse.responseString : '';\n    this.destroyCleanup(\n      `${responseString} handled Destroy Response addressed to session ${\n      formatHexString(response.sessionId)}, on session ${formatHexString(this._sid)}`,\n      0);\n  }\n\n  handleSmfMessage(tsmsg) {\n    const smfHeader = tsmsg.smfHeader;\n    if (smfHeader.smf_protocol !== SMFLib.SMFProtocol.TSESSION) {\n      this.handleSmfParseError(`Unexpected Message Prototcol (${smfHeader.smf_protocol}) on ReceiveData connection`);\n      return;\n    }\n\n      // we have found a transport SMF, can we now read the Transport SMF chunk\n    const data = tsmsg.payload;\n    const TotalPayloadToRead = tsmsg.payloadLength;\n\n    switch (tsmsg.messageType) {\n      case SMFLib.SMFTransportSessionMessageType.DESTROY_RESP:\n        this.handleDestroyResponse(tsmsg);\n        return;\n\n      case SMFLib.SMFTransportSessionMessageType.DATA:\n        if (tsmsg.sessionId !== this._sid) {\n          // The router may have given us an error code; if so, include in the error message.\n          const smfErrResponse = tsmsg.getResponse();\n          const responseErrStr = smfErrResponse\n              ? (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`)\n              : '';\n          const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n          LOG_DEBUG(`HandleRxData Bad Session ID received in message. Expected: ${strToByteArray(this._sid)\n                        }, Received: ${strToByteArray(tsmsg.sessionId)}${responseErrStr}`);\n\n          this._state = TransportSessionState.CONNECTION_FAILED;\n          this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                        `Session ID mismatch in data message, expected: ${formatHexString(this._sid)}, got: ${\n                        formatHexString(tsmsg.sessionId)}, ${responseErrStr}`,\n                        responseCode,\n                        ErrorSubcode.PROTOCOL_ERROR, this._sid));\n          return;\n        }\n\n        // pass-through encapsulated data to parent\n        if (TotalPayloadToRead > 0) {\n          this._client.rxDataBuffer(data);\n        }\n        break;\n      default:\n        // Unexpected message type\n        this.handleSmfParseError(`Unexpected message type (${\n                    tsmsg.messageType}) on ReceiveData connection`);\n    }\n  }\n\n  handleSmfParseError() {\n    this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DATA_DECODE_ERROR,\n        'Received data decode error', null,\n        ErrorSubcode.DATA_DECODE_ERROR, this._sid));\n  }\n\n  // Called when data is received on the connection\n  handleRxData(tsRc, data) {\n    if (this._httpReceiveConn === null || this._rxChannelClient === null) {\n      if (this._state === TransportSessionState.DOWN) {\n        LOG_INFO('Transport session is down, ignore data from receive connection');\n      } else {\n        LOG_ERROR(`Transport session is not in working state, state: ${this._state}`);\n      }\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('Transport session is being destroyed, ignore data from receive connection, ' +\n               `dump first 64 bytes (or fewer) of data:\\n${\n                 DebugLib.Debug.formatDumpBytes(data.substring(0, 64), true, 0)}`);\n      return;\n    }\n\n    this._httpReceiveConn.recStat('GotData');\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      LOG_DEBUG('Send write token to router');\n      this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n    } else {\n      this._rxChannelClient.rxDataString(data);\n    } // end have data to process\n  }\n\n  // Called when data is received on a HTTP_BINARY_STREAMING connection\n  handleRxStreaming(tsRc, data) {\n    if (this._httpReceiveConn === null) {\n      if (this._state === TransportSessionState.DOWN) {\n        LOG_DEBUG('Transport session is down, ignore data from receive connection');\n      } else {\n        LOG_ERROR(`Transport session is not in working state, state: ${this._state}`);\n      }\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('Transport session is being destroyed, ignore data from streaming receive ' +\n               `connection, dump first 64 bytes (or fewer) of data:\\n${\n               DebugLib.Debug.formatDumpBytes(data.substring(0, 64), true, 0)}`);\n      return;\n    }\n\n    this._httpReceiveConn.recStat('GotData');\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      LOG_TRACE('Send write token to router');\n      this._packetReadState = PacketReadState.READING_HEADER;\n      this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n      return;\n    }\n\n    // pass-through encapsulated data to parent\n    if (this._packetReadState === PacketReadState.STREAMING) {\n      this._client.rxDataString(data);\n      return;\n    }\n\n    this._incomingBuffer += data;\n    const smfheader = SMFLib.Codec.ParseSMF.parseSMFAt(BufferImpl.from(this._incomingBuffer, 'latin1'),\n                                                       0, true);\n    if (smfheader) {\n        // we have a valid smf header, see if there is a transport header and session-id\n      const tsmsg = SMFLib.Codec.Transport.parseTsSmfHdrAt(BufferImpl.from(this._incomingBuffer, 'latin1'),\n                                                           smfheader.headerLength,\n                                                           smfheader);\n      if (!tsmsg) {\n        // Not tsMsg but there is an smf header, just return until more data arrives\n        return;\n      }\n\n      // We have the transport message header too, if it is a DATA message enter\n      // STREAMING state\n      switch (tsmsg.messageType) {\n        case SMFLib.SMFTransportSessionMessageType.DESTROY_RESP:\n          this.handleDestroyResponse(tsmsg);\n          return;\n\n        case SMFLib.SMFTransportSessionMessageType.DATA:\n          if (tsmsg.sessionId !== this._sid) {\n            // The router may have given us an error code, if so, include in the error message.\n            const smfErrResponse = tsmsg.getResponse();\n            const responseErrStr = smfErrResponse\n                ? (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`)\n                : '';\n            const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n            LOG_DEBUG(`HandleRxData Bad Session ID received in message.  Expected: ${strToByteArray(this._sid)\n                        }, Received: ${strToByteArray(tsmsg.sessionId)}${responseErrStr}`);\n            LOG_DEBUG(`First 64 bytes (or fewer) of message: ${strToByteArray(data.substr(0, 64))}`);\n\n            this._state = TransportSessionState.CONNECTION_FAILED;\n            this._eventCB(\n              new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                                        `Session ID mismatch in data message, expected: ${formatHexString(this._sid)}, got: ${\n                                        formatHexString(tsmsg.sessionId)}, ${responseErrStr}`,\n                                        responseCode,\n                                        ErrorSubcode.PROTOCOL_ERROR, this._sid));\n            return;\n          }\n          // all is good. We can now STREAM the rest of the data until a empty message is received.\n          this._packetReadState = PacketReadState.STREAMING;\n          // pass-through any remaining data\n          if (this._incomingBuffer.length > (smfheader.headerLength + tsmsg.tsHeaderLength)) {\n            this._client.rxDataString(\n              this._incomingBuffer.substr(smfheader.headerLength + tsmsg.tsHeaderLength));\n          }\n          this._incomingBuffer = '';\n          return;\n\n        default:\n          // Unexpected message type\n          throw new TransportError(`Unexpected message type (${tsmsg.messageType}) on ReceiveData connection`, 0);\n      }\n    } else if (SMFLib.Codec.ParseSMF.isSMFHeaderAvailable(BufferImpl.from(this._incomingBuffer, 'latin1'), 0) &&\n               !SMFLib.Codec.ParseSMF.isSMFHeaderValid(BufferImpl.from(this._incomingBuffer, 'latin1'), 0)) {\n      // Probably lost framing\n      LOG_ERROR(`Couldn't decode message due to invalid smf header, dump first 64 bytes (or fewer) of buffer content:\\n${\n                 DebugLib.Debug.formatDumpBytes(this._incomingBuffer.substring(0, 64), true, 0)}`);\n\n      const errorInfo = 'Error parsing incoming message - invalid SMF header detected';\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                                  errorInfo, null,\n                                  ErrorSubcode.PROTOCOL_ERROR,\n                                  null));\n    }\n  }\n\n  // Called when data is received on the httpDataSend\n  handleRxDataToken(tsRc, data) {\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      return; // handle End of Stream\n    }\n\n    const parsedResponse = SMFLib.Codec.Decode.decodeCompoundMessage(BufferImpl.from(data, 'latin1'), 0);\n    if (!parsedResponse) {\n      if (this._state !== TransportSessionState.WAITING_FOR_DESTROY) {\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                'Failed to parse received data message', null,\n                ErrorSubcode.PROTOCOL_ERROR, this._sid));\n      } else {\n        this.destroyCleanup('Failed to parse received data message', ErrorSubcode.PROTOCOL_ERROR);\n      }\n      return;\n    }\n\n    if (parsedResponse.messageType === SMFLib.SMFTransportSessionMessageType.DESTROY_RESP) {\n      this.handleDestroyResponse(parsedResponse);\n      return;\n    }\n\n    if (parsedResponse.sessionId !== this._sid) {\n        // The router may have given us an error code, if so, include in the error message.\n      const smfErrResponse = parsedResponse.getResponse();\n      const responseErrStr = smfErrResponse ?\n            (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`) :\n            '';\n      const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n      LOG_DEBUG(`HandleRxDataToken Bad SID received in message.  Expected: ${strToByteArray(this._sid)\n            }, Received: ${strToByteArray(parsedResponse.sessionId)}${responseErrStr}`);\n      LOG_DEBUG(`First 64 bytes (or fewer) of message: ${strToByteArray(data.substr(0, 64))}`);\n\n      if (this._state !== TransportSessionState.WAITING_FOR_DESTROY) {\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                `Session ID mismatch in response message, expected: ${formatHexString(this._sid)}, got: ${formatHexString(parsedResponse.sessionId)}, ${responseErrStr}`,\n                responseCode, ErrorSubcode.PROTOCOL_ERROR, this._sid));\n      } else {\n        this.destroyCleanup('Session ID mismatch in response message', ErrorSubcode.PROTOCOL_ERROR);\n      }\n      return;\n    }\n\n    if (parsedResponse.messageType ===\n        SMFLib.SMFTransportSessionMessageType.DATA_TOKEN ||\n        parsedResponse.messageType ===\n        SMFLib.SMFTransportSessionMessageType.DATA_STREAM_TOKEN) {\n      this._haveToken = true;\n      this._httpSendConn.recStat('GotToken');\n      // this._eventCB(\n      //    new TransportSessionEvent(TransportSessionEventCode.NOTIFY_GOT_TOKEN, \"\", null, null));\n      this.sendQueuedData();\n    } else {\n        // Unexpected message type\n      throw (new TransportError(`Unexpected message type (${\n            parsedResponse.messageType}) on SendData connection`, 0));\n    }\n  }\n\n  handleRxError(tsRc) {\n    LOG_INFO(`handleRxError, transport return code ${TransportReturnCode.name(tsRc)}`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    if (tsRc === TransportReturnCode.DATA_DECODE_ERROR) {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DATA_DECODE_ERROR,\n            'Received data decode error', null,\n            ErrorSubcode.DATA_DECODE_ERROR, this._sid));\n    } else {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.SEND_ERROR,\n            'Connection error',\n            ErrorSubcode.CONNECTION_ERROR, this._sid));\n    }\n  }\n\n  // Called when there is an error on a connection or the connection is aborted\n  handleSendFailure(status, msg) {\n    // failed to send message, if it is a destroy message, just complete the destroy process\\\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_INFO(`Connection destroy failure (${msg}) while in state ${this._state}`);\n      this.destroyCleanup(`Connection destroy failure: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n    } else {\n      // Failed to send message, return error to upper layer which may  tear the session down\n      LOG_INFO(`Connection failure (${msg}) while in state ${this._state}`);\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.SEND_ERROR,\n            `Connection error: ${msg}`, status,\n            ErrorSubcode.CONNECTION_ERROR, this._sid));\n    }\n  }\n\n  // Called when there is an error on a connection for a session create request\n  handleCreateConnFailure(status, msg) {\n    if (this._state === TransportSessionState.DOWN) {\n      return;\n    }\n\n    LOG_INFO(`Connection create failure (${msg}) while in state ${this._state}`);\n    this.destroyCleanup(`Connection create failure: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n  }\n\n  // Called when the destroy timer expires\n  destroyTimerExpiry() {\n    this.destroyCleanup('Destroy request timeout', ErrorSubcode.CONNECTION_ERROR);\n  }\n\n  cancelDestroyTimeout() {\n    if (this._destroyTimer) {\n      clearTimeout(this._destroyTimer);\n      this._destroyTimer = null;\n    }\n  }\n\n  /**\n   * Called after receiving ts destroy response from router\n   * @param {String} infoStr The informational string to pass along\n   * @param {ErrorSubcode} subcode The subcode associated with the event\n   * @param {Boolean} asyncSendEvent If true, always send the event asynchronously.\n   */\n  destroyCleanup(infoStr, subcode, asyncSendEvent) {\n    LOG_DEBUG(`Destroy cleanup: ${infoStr}`);\n\n    // Abort any current requests for this session\n    if (this._createConn) {\n      LOG_DEBUG('Destroy cleanup: Abort createConn');\n      this._createConn.abort();\n    }\n    if (this._httpSendConn) {\n      LOG_DEBUG('Destroy cleanup: Abort sendConn');\n      this._httpSendConn.abort();\n    }\n    if (this._httpReceiveConn) {\n      LOG_DEBUG('Destroy cleanup: Abort receiveConn');\n      this._httpReceiveConn.abort();\n    }\n\n    // Clear most internal state\n    this._createUrl = null;\n    this._routerUrl = null;\n    this._createConn = null;\n    this._httpSendConn = null;\n    this._httpReceiveConn = null;\n    this._smfDataTokenTSHeader = null;\n    this._rxChannelClient = null;\n    this._routerTag = '';\n    this._queuedData = [];\n    this._queuedDataSize = 0;\n    this._canSendNeeded = false;\n\n    // Clear timers.\n    this.cancelDestroyTimeout();\n    this.cancelConnectTimeout();\n\n    // Set final state\n    this._state = TransportSessionState.DOWN;\n\n    // Send the event to the application letting it know that the session is down\n    const finalize = () => {\n      // Check whether the callback was cleared before the timeout completes.\n      if (this._eventCB) {\n        this._eventCB(\n            new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                      infoStr || 'Session is destroyed',\n                                      null,\n                                      subcode || 0,\n                                      this._sid));\n      }\n\n      // release reference to smf client object\n      this._client = null;\n      // release reference to session object\n      this._eventCB = null;\n    };\n\n    if (asyncSendEvent) {\n      setTimeout(finalize, 0); // opportunity to use setImmediate instead\n    } else {\n      finalize();\n    }\n  }\n\n  getInfoStr() {\n    const str = `HTTPTransportSession; sid=${\n        formatHexString(this._sid)\n        }; routerTag=${this._routerTag}`;\n    return str;\n  }\n\n}\n\nmodule.exports.HTTPTransportSession = HTTPTransportSession;\n","const { Base64, Convert } = require('solclient-convert');\nconst { XHRFactory } = require('./xhr-factory');\n\nconst { encode: base64Encode } = Base64;\nconst { stringToUint8Array } = Convert;\n\nfunction sendXhrBinaryMSIE10(xhr, data, contentType) {\n  xhr.responseType = 'arraybuffer';\n  xhr.overrideMimeType(`${contentType}; charset=x-user-defined`);\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(stringToUint8Array(data));\n}\n\nfunction sendXhrBinaryXHR2(xhr, data, contentType) {\n  xhr.overrideMimeType(`${contentType}; charset=x-user-defined`);\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(stringToUint8Array(data).buffer);\n}\n\nfunction sendXhrText(xhr, data, contentType, connClose) {\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(data === null || data === undefined ? data : base64Encode(data), connClose);\n}\n\nconst sendXhrBinary = (() => {\n  // Uint8Array is probably shimmed by core-js. We don't use window.Blob, but\n  // it is a Working Draft, not  part of ES6, and not shimmed by core-js.\n  // Therefore it makes a workable canary for IE10 detection.\n  if (typeof window !== 'undefined' && window.Uint8Array && window.Blob /* !ie9 */) {\n    const xhr = XHRFactory.create(true);\n    if (xhr.responseType /* ie10 */) {\n      return sendXhrBinaryMSIE10;\n    }\n    return sendXhrBinaryXHR2;\n  }\n  return sendXhrText;\n})();\n\nmodule.exports.sendXhrBinary = sendXhrBinary;\nmodule.exports.sendXhrText = sendXhrText;\n","const { ErrorSubcode } = require('solclient-error');\nconst { TransportError } = require('../../transport-error');\n\n/* eslint-env browser */\nconst XHRFactory = {\n  /**\n   * Creates an XHR object.\n   *\n   * @param {Boolean} [allowFail=false] If `true`, return null on failure; otherwise throw.\n   * @throws {TransportError}\n   * @returns {XMLHttpRequest} The new XHR object\n   */\n  create(allowFail = false) {\n    const xhr = typeof XMLHttpRequest !== 'undefined' ? new XMLHttpRequest() : null;\n    if (!allowFail && !xhr) {\n      throw new TransportError('Failed to create an XMLHTTPRequest',\n                                 ErrorSubcode.CREATE_XHR_FAILED);\n    }\n    return xhr;\n  },\n};\n\nmodule.exports.XHRFactory = XHRFactory;\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\n\n/**\n * @classdesc\n * HTTP Base64 transport\n * @memberof solace\n * @private\n */\nclass StateBase64 extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BASE64, exitCb, nextState);\n  }\n}\n\nmodule.exports.StateBase64 = StateBase64;\n\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * HTTP Binary transport\n * @memberof solace\n * @private\n */\nclass StateBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BINARY, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.xhrBinary();\n  }\n}\n\nmodule.exports.StateBinary = StateBinary;\n\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * HTTP Binary Streaming transport\n * @memberof solace\n * @private\n */\nclass StateStreamingAndBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BINARY_STREAMING, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.streaming() && WebTransportCapabilities.xhrBinary();\n  }\n}\n\nmodule.exports.StateStreamingAndBinary = StateStreamingAndBinary;\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * WebSocket transport\n * @memberof solace\n * @private\n */\nclass StateWebSocketBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.WS_BINARY, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.webSocket();\n  }\n}\n\nmodule.exports.StateWebSocketBinary = StateWebSocketBinary;\n","const HTTPLib = require('./http');\nconst { WebSocketTransportSession } = require('./websocket-transport-session');\n\nconst { HTTPConnection } = HTTPLib;\n\nconst WebTransportCapabilities = {\n  webSocket() { return WebSocketTransportSession.browserSupportsBinaryWebSockets(); },\n  xhrBinary() { return HTTPConnection.browserSupportsXhrBinary(); },\n  streaming() { return HTTPConnection.browserSupportsStreamingResponse(); },\n};\n\nmodule.exports.WebTransportCapabilities = WebTransportCapabilities;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of Web Transport events.\n * @enum {string}\n * @namespace\n * @memberof solace\n * @private\n */\nconst WebTransportEvent = {\n  /**\n   * The Session Layer has issued a connect request\n   */\n  CONNECT:          'Connect',\n  /**\n   * The Session Layer has issued a destroy request\n   */\n  DESTROY:          'Destroy',\n  /**\n   * A downgrade request has been received from an FSM.\n   */\n  DOWNGRADE:        'Downgrade',\n  /**\n   * The underlying transport has been destroyed. Seen in\n   * response to calling destroy() and in some cases when\n   * the transport is destroyed by the peer.\n   */\n  DESTROYED_NOTICE: 'DestroyedNotice',\n  /**\n   * The underlying transport timed out in its connection attempt.\n   * The managing component should abort this connection attempt\n   * and begin a downgrade if available.\n   */\n  CONNECT_TIMEOUT:  'ConnectTimeout',\n  /**\n   * The underlying transport is active and ready for traffic.\n   */\n  UP_NOTICE:        'UpNotice',\n  /**\n   * The transport encountered an error sending data.\n   */\n  SEND_ERROR:       'SendError',\n};\n\nmodule.exports.WebTransportEvent = Enum.new(WebTransportEvent);\n","\nconst { ErrorSubcode } = require('solclient-error');\nconst { FsmEvent, State, StateMachine } = require('solclient-fsm');\nconst { LogFormatter } = require('solclient-log');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { WebTransportEvent } = require('./web-transport-events');\nconst { WebTransportState } = require('./web-transport-states');\n\nconst {\n  LOG_TRACE,\n  LOG_INFO,\n} = new LogFormatter();\n\nclass WebTransportFSM extends StateMachine {\n  constructor(transportIn, getId) {\n    super({ name: 'WebTransportFSM' });\n    const transport = transportIn;\n    const fsm = this;\n    const logger = new LogFormatter();\n    logger.formatter = function logFormatter(...args) {\n      return [`[web-transport-fsm=${getId()}]`, ...args];\n    };\n    this.log = logger.wrap(this.log, this);\n    this.transport = transport;\n\n    this.initial(function onInitial() {\n      return this.transitionTo(\n        this.WebTransportDown,\n        (context) => {\n          LOG_TRACE(`Starting ${context.getStateMachine().getName()}`);\n        });\n    });\n\n    this.unhandledEventReaction(function onUnhandledEvent(wEvent) {\n      LOG_TRACE(`Ignoring event ${wEvent.getName()} in state ${this.getCurrentState().getName()}`);\n      return this;\n    });\n\n    this.WebTransportDown = new State({\n      name:          WebTransportState.DOWN,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.CONNECT, function onConnect(/* wEevent */) {\n        return this.transitionTo(fsm.WebTransportConnecting);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n\n    this.WebTransportConnecting = new State({\n      name:          WebTransportState.CONNECTING,\n      parentContext: this,\n    })\n      .entry(() => {\n        try {\n          const rc = transport.connectInternal();\n          if (rc !== TransportReturnCode.OK) {\n            const connError = transport.getConnError();\n            const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n            wEvent._destroyMsg = connError ? connError.message : 'Error occurred while establishing transport';\n            wEvent._subcode = connError ? connError.subcode : null;\n            wEvent._eventReason = connError;\n            return this.processEvent(wEvent);\n          }\n        } catch (e) {\n          LOG_INFO(`transport.connectInternal threw: ${e.message}`);\n          const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n          wEvent._destroyMsg = e.message;\n          wEvent._subcode = e.subcode ? e.subcode : ErrorSubcode.CONNECTION_ERROR;\n          wEvent._eventReason = e;\n          return this.processEvent(wEvent);\n        }\n        return undefined;\n      })\n      // Transport destroy is async, so in downgrade cases we need an event to start the downgrade\n      // (and associated transport destroy) and one to complete it (DESTROYED_NOTICE).\n      // These two events trigger downgrade: SEND_ERROR on connection (protocol issue) and\n      // CONNECT_TIMEOUT (possible black hole proxy).\n      .reaction(WebTransportEvent.SEND_ERROR, (wEvent) => {\n        transport.notifyEvent(wEvent._transportEvent); // Give the session a chance to intervene\n        return fsm.attemptDowngrade(wEvent._transportEvent);\n      })\n      .reaction(WebTransportEvent.CONNECT_TIMEOUT, e => fsm.attemptDowngrade(e._transportEvent))\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, (wEvent) => {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      })\n      .reaction(WebTransportEvent.UP_NOTICE, function onUpNotice(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportUp);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportDowngrading = new State({\n      name:          WebTransportState.DOWNGRADING,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        LOG_INFO('Web transport: request downgrade');\n        if (!transport.completeDowngrade()) {\n          LOG_INFO('Web transport: connection error, no downgrade');\n          transport.notifyEvent(wEvent._transportEvent);\n          fsm.notifyDowngradeFailed();\n          return this.transitionTo(fsm.WebTransportDown);\n        }\n        return this.transitionTo(fsm.WebTransportConnecting);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportUp = new State({\n      name:          WebTransportState.UP,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DOWNGRADE, wEvent =>\n        fsm.attemptDowngrade(new TransportSessionEvent(wEvent._downgradeMsg, wEvent._subcode)))\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      })\n      .reaction(WebTransportEvent.SEND_ERROR, function onUpNotice(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportDestroying = new State({\n      name:          WebTransportState.DESTROYING,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      });\n  }\n\n\n    /**\n     * Attempt a downgrade. This is the procedure.\n     * 1. Call this. If it returns true, wait for DESTROYED_NOTICE, then\n     * 2. Call transport.completeDowngrade().\n     * @param {TransportSessionEvent} tsEvent The event triggering the downgrade\n     * @returns {Boolean} `true` if downgrade is starting (by destroying the transport)\n     */\n  attemptDowngrade(tsEvent) {\n    const { infoStr, errorSubcode } = tsEvent;\n    if (!this.transport.beginDowngrade(infoStr, errorSubcode)) {\n      LOG_TRACE('Downgrade unavailable');\n      this.transport.destroyInternal(infoStr, errorSubcode);\n      this.transport.notifyEvent(tsEvent);\n      return this.transitionTo(this.WebTransportDestroying);\n    }\n    LOG_TRACE('Downgrade available');\n    return this.transitionTo(this.WebTransportDowngrading);\n  }\n\n  notifyDowngradeFailed() {\n    LOG_TRACE('Notifying of downgrade failure');\n    this.transport.notifyEvent(new TransportSessionEvent(TransportSessionEventCode.DOWNGRADE_FAILED,\n                                  'Downgrade failed'));\n  }\n}\n\nmodule.exports.WebTransportFSM = WebTransportFSM;\n","const {\n  LOG_DEBUG,\n  LOG_TRACE,\n} = require('solclient-log');\nconst { TransportBase } = require('../transport-base');\nconst { TransportClientStats } = require('../transport-client-stats');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst MAX_BUFFERED_AMOUNT_QUERY_INTERVAL_MS = 4000;\n\n/**\n * Base class for web related transports\n * @extends TransportBase\n * @private\n */\nclass WebTransportSessionBase extends TransportBase {\n  /**\n   * @constructor\n   * @param {URL} url The URL to connect to\n   * @param {function} eventCB The function to call on events\n   * @param {SMFClient} client The function to call on data received.\n   * @param {Object} props Additional object properties for this transport session\n   */\n  constructor(url, eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super(url, eventCB, client, props);\n\n    /**\n     * @type {Number}\n     */\n    this._connectTimeout = props.transportDowngradeTimeoutInMsecs;\n\n    /**\n     * @type {?number}\n     */\n    this._connectTimer = null;\n\n    /**\n     * @type {TransportClientStats}\n     */\n    this._clientstats = new TransportClientStats();\n\n    /**\n     * Maximum amount of send data than can be queued\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /**\n     * Maximum payload chunk size in web transport\n     * @type {Number}\n     */\n    this._maxPayloadBytes = props.maxWebPayload;\n\n    /**\n     * Queue to hold data to be sent to the Solace Message Router when we get back a\n     * data token\n     * @type {array}\n     */\n    this._queuedData = [];\n\n    /**\n     * Number of bytes of queued data\n     * @type {Number}\n     */\n    this._queuedDataSize = 0;\n\n    /**\n     * Remember if we have to send an event when there is room in the queue\n     * @type {Boolean}\n     */\n    this._canSendNeeded = false;\n\n    /**\n     * @type {TransportSessionState}\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * Any connection error that needs to be propagated up\n     * @type {?Error}\n     */\n    this._connError = null;\n  }\n\n  // override\n  getClientStats() {\n    return this._clientstats;\n  }\n\n  createConnectTimeout() {\n    if (this._connectTimeout > 0) {\n      this._connectTimer = setTimeout(() => {\n        this.connectTimerExpiry();\n      }, this._connectTimeout);\n    }\n  }\n\n  cancelConnectTimeout() {\n    if (this._connectTimer) {\n      clearTimeout(this._connectTimer);\n      this._connectTimer = null;\n    }\n  }\n\n  /* override me */\n  connectTimerExpiry() { // eslint-disable-line class-methods-use-this\n    return undefined;\n  }\n\n  allowEnqueue(datalen) {\n      // Bug 32006: if there's no queued data, we always accept at least one message, even if it\n      // exceeds the sendBufferMaxSize.\n      // If we reject enqueueing something too large because we already have queued data,\n      // that guarantees when the data is flushed we will emit the alertOnDequeue event.\n    return (this._queuedDataSize === 0 ||\n            ((datalen + this._queuedDataSize) <= this._sendBufferMaxSize));\n  }\n\n  enqueueFailNoSpace() {\n    this._canSendNeeded = true;\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  /* override me */\n  flush(callback) { // eslint-disable-line class-methods-use-this\n    callback();\n  }\n\n  getQueuedDataToSend() {\n    // Track messages dequeued.\n    let data = '';\n\n    // Start by trying to fill a complete payload.\n    let bytesAllowed = this._maxPayloadBytes;\n    LOG_TRACE(`getQueuedDataToSend: bytesAllowed=${bytesAllowed}, bufferedAmount=${this.getBufferedAmount ? this.getBufferedAmount() : 'undefined'}`);\n    if (this.getBufferedAmount) {\n      bytesAllowed = this._maxPayloadBytes - this.getBufferedAmount();\n      if (bytesAllowed <= 0) {\n        LOG_DEBUG(`$$ bytesAllowed=${bytesAllowed}, maxPayloadBytes=${this._maxPayloadBytes\n                  }, bufferedAmount=${this.getBufferedAmount()}`);\n        if (BUILD_ENV.TARGET_BROWSER &&\n            (this._bufferedAmountQueryIntervalInMsecs *\n              this._bufferedAmountQueryIntervalDelayMultiplier <=\n              MAX_BUFFERED_AMOUNT_QUERY_INTERVAL_MS)) {\n          this._bufferedAmountQueryIntervalDelayMultiplier *= 2;\n        }\n        return data;\n      }\n      if (BUILD_ENV.TARGET_BROWSER) {\n        this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n      }\n    }\n\n    if (this._queuedDataSize > bytesAllowed) {\n      let payloadSize = bytesAllowed;\n      // Slow path: dequeue and append until we fill the payload.\n      while (payloadSize && this._queuedDataSize) {\n        // Is this element larger than the payload?\n        const elem = this._queuedData[0];\n        const elemLength = elem.length;\n        if (elemLength > payloadSize) {\n          // This element is larger than the payload.\n          data += elem.substr(0, payloadSize);\n          this._queuedData[0] = elem.substr(payloadSize);\n\n          // The rest of the payload space was consumed.\n          this._queuedDataSize -= payloadSize;\n          payloadSize = 0;\n        } else {\n          data += this._queuedData.shift();\n          payloadSize -= elemLength;\n          this._queuedDataSize -= elemLength;\n          this._clientstats.msgWritten++;\n        }\n      }\n    } else {\n      // Shortcut: use the whole buffer, increase the message sent count by the length of the size\n      // queue, and reset the buffer.\n      data = this._queuedData.join('');\n      this._clientstats.msgWritten += this._queuedData.length;\n\n      this._queuedData = [];\n      this._queuedDataSize = 0;\n    }\n\n    LOG_DEBUG(`Sending ${data.length} bytes from queued data`);\n    return data;\n  }\n}\n\nmodule.exports.WebTransportSessionBase = WebTransportSessionBase;\n","const { Enum } = require('solclient-eskit');\n\n// WebTransport states, used by WebTransport\nconst WebTransportState = {\n  DOWN:        'WebTransportDown',\n  CONNECTING:  'WebTransportConnecting',\n  DOWNGRADING: 'WebTransportDowngrading',\n  DESTROYING:  'WebTransportDestroying',\n  UP:          'WebTransportUp',\n};\n\nmodule.exports.WebTransportState = Enum.new(WebTransportState);\n","const {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst {\n  HTTPTransportSession,\n} = require('./http');\nconst {\n  LOG_TRACE,\n  LOG_INFO,\n  LOG_ERROR,\n} = require('solclient-log');\nconst { FsmEvent } = require('solclient-fsm');\nconst { TransportBase } = require('../transport-base');\nconst { TransportProtocol } = require('../transport-protocols');\nconst { TransportProtocolHandler } = require('../transport-protocol-handler');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { WebSocketTransportSession } = require('./websocket-transport-session');\nconst { WebTransportEvent } = require('./web-transport-events');\nconst { WebTransportFSM } = require('./web-transport-fsm');\n\n/**\n * @classdesc\n * This class manages all the web based transport protocols.\n * <ul>\n *     <li>{@link TransportProtocol.HTTP_BASE64}\n *     <li>{@link TransportProtocol.HTTP_BINARY}\n *     <li>{@link TransportProtocol.HTTP_BINARY_STREAMING}\n *     <li>{@link TransportProtocol.WS_BINARY}\n * </ul>\n * @extends TransportBase\n * @private\n */\nclass WebTransport extends TransportBase {\n\n  /**\n   * @constructor\n   * @param {URL} url The url to connect to\n   * @param {Function} eventCB The callback for transport events\n   * @param {BaseSMFClient} client An SMF client instance\n   * @param {Object} props Additional transport properties\n   * @param {Function} getId A function that returns this transport's unique ID\n   */\n  constructor(url, eventCB, client, props, getId) {\n    super(url, eventCB, client, props);\n    LOG_TRACE(`webTransportProtocolList ${props.webTransportProtocolList}`);\n    this._transportHandler = new TransportProtocolHandler(url, props.webTransportProtocolList);\n    this._webTransportFsm = new WebTransportFSM(this, getId);\n    this._webTransportFsm.start();\n  }\n\n  notifyEvent(event) {\n    this._eventCB(event);\n  }\n\n  handleDestroyed() {\n    this._transportSession = null;\n  }\n\n  handleTransportEvent(transportEvent) {\n    LOG_INFO(`Web transport receive transport event: ${transportEvent}`);\n    let wEvent;\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportSessionEventCode.UP_NOTICE:\n        wEvent = new FsmEvent({ name: WebTransportEvent.UP_NOTICE });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.DESTROYED_NOTICE:\n        this.handleDestroyed();\n        wEvent = new FsmEvent({ name: WebTransportEvent.DESTROYED_NOTICE });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.SEND_ERROR:\n        wEvent = new FsmEvent({ name: WebTransportEvent.SEND_ERROR });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.CONNECT_TIMEOUT:\n        wEvent = new FsmEvent({ name: WebTransportEvent.CONNECT_TIMEOUT });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.DOWNGRADE_FAILED:\n        this._lastDowngradeSucceeded = false;\n        break;\n\n      case TransportSessionEventCode.DOWNGRADE_SUCCEEDED:\n        this._lastDowngradeSucceeded = true;\n        break;\n\n      default:\n        // All other transport events have no effect on the web transport and are passed through\n        this._eventCB(transportEvent);\n    }\n  }\n\n  /**\n   * @override\n   */\n  connect() {\n    const wEvent = new FsmEvent({ name: WebTransportEvent.CONNECT });\n    this._webTransportFsm.processEvent(wEvent);\n    return TransportReturnCode.OK;\n  }\n\n  connectInternal() {\n    this._transportSession = null;\n    const tpProtocol = this._transportHandler.getTransportProtocol();\n    this._props.transportProtocol = tpProtocol;\n    switch (tpProtocol) {\n      case TransportProtocol.HTTP_BASE64:\n      case TransportProtocol.HTTP_BINARY:\n      case TransportProtocol.HTTP_BINARY_STREAMING:\n        this._transportSession = new HTTPTransportSession(\n          this._url,\n          evt => this.handleTransportEvent(evt),\n          this._client,\n          this._props\n        );\n        break;\n\n      case TransportProtocol.WS_BINARY:\n        this._transportSession = new WebSocketTransportSession(\n          this._url,\n          evt => this.handleTransportEvent(evt),\n          this._client,\n          this._props\n        );\n        break;\n\n      default:\n        LOG_ERROR(`Web transport unrecognized TransportProtocol: ${tpProtocol}`);\n        throw new OperationError(`No transport session provider for scheme: ${tpProtocol}`,\n                                 ErrorSubcode.CONNECTION_ERROR,\n                                 tpProtocol);\n    }\n\n    LOG_INFO(`Connect Transport ${tpProtocol}`);\n    return this._transportSession.connect();\n  }\n\n  /**\n   * @override\n   */\n  destroy(msg, subcode) {\n    const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n    wEvent._destroyMsg = msg;\n    wEvent._subcode = subcode;\n    this._webTransportFsm.processEvent(wEvent);\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @param {String} msg The message associated with the downgrade\n   * @param {ErrorSubcode} subcode The subcode associated with the downgrade\n   * @returns {Boolean} `true` if there are downgrade options available. `false` otherwise.\n   * @private\n   */\n  beginDowngrade(msg, subcode) {\n    if (this._transportHandler.canCompleteDowngrade()) {\n      LOG_TRACE('Web transport downgrade');\n      // Destroy the underlying transport session\n      // This will asynchronously cause DESTROYED_NOTICE to be emitted.\n      // The receiver can then call completeDowngrade, which will complete the downgrade.\n      this.destroyInternal(msg, subcode);\n      return true;\n    }\n    LOG_TRACE('Web transport downgrade rejected');\n    return false;\n  }\n\n  completeDowngrade() {\n    if (!this._transportHandler.canCompleteDowngrade()) {\n      return false;\n    }\n    return this._transportHandler.completeDowngrade();\n  }\n\n  destroyInternal(msg, subcode) {\n    if (this._transportSession) {\n      this._transportSession.destroy(msg, subcode);\n    }\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    return this._transportSession.flush(callback);\n  }\n\n  getConnError() {\n    if (this._transportSession) {\n      return this._transportSession._connError;\n    }\n    return null;\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    if (this._transportSession) {\n      return this._transportSession.getInfoStr();\n    }\n    return 'Not connected.';\n  }\n\n  /**\n   * @override\n   */\n  getTransportProtocol() {\n    return this._transportHandler.getTransportProtocol();\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    if (this._transportSession) {\n      return this._transportSession.getClientStats();\n    }\n    return null;\n  }\n\n  /**\n   * @override\n   */\n  requestDowngrade(msg, subcode) {\n    LOG_TRACE('Creating downgrade request event');\n    this._lastDowngradeSucceeded = undefined; // will be reset by handler for TS DOWNGRADE_ events\n    const wEvent = new FsmEvent({ name: WebTransportEvent.DOWNGRADE });\n    wEvent._downgradeMsg = msg;\n    wEvent._subcode = subcode;\n    this._webTransportFsm.processEvent(wEvent);\n    return this._lastDowngradeSucceeded;\n  }\n\n  /**\n   * @override\n   */\n  send(message, forceAllowEnqueue) {\n    return this._transportSession.send(message, forceAllowEnqueue);\n  }\n}\n\nmodule.exports.WebTransport = WebTransport;\n","module.exports.WebSocketCloseCodes = {\n  0: {\n    name:        'Unknown code',\n    description: 'No status code was returned by the operation',\n  },\n  1000: {\n    name:        'Normal Closure',\n    description: 'The connection closed normally',\n  },\n  1001: {\n    name:        'Going Away',\n    description: 'The endpoint is going away due to a server failure or client navigation',\n  },\n  1002: {\n    name:        'Protocol Error',\n    description: 'A WebSocket protocol error occurred',\n  },\n  1003: {\n    name:        'Unsupported Data',\n    description: 'The endpoint cannot handle the specified data type',\n  },\n  1004: {\n    name:        'Reserved',\n    description: '',\n  },\n  1005: {\n    name:        'No Status Recvd',\n    description: 'Expected a status code but none was provided',\n  },\n  1006: {\n    name:        'Abnormal Closure',\n    description: 'No close frame was received before remote hangup',\n  },\n  1007: {\n    name:        'Invalid Frame Payload Data',\n    description: 'A message contained data inconsistent with its encoding',\n  },\n  1008: {\n    name:        'Policy Violation',\n    description: 'A message violated endpoint policy',\n  },\n  1009: {\n    name:        'Message Too Big',\n    description: 'A data frame was too large',\n  },\n  1010: {\n    name:        'Missing Extension',\n    description: 'The endpoint did not negotiate an expected extension',\n  },\n  1011: {\n    name:        'Internal Error',\n    description: 'The server encountered an unexpected condition that prevented it from fulfilling the request',\n  },\n  1012: {\n    name:        'Service Restart',\n    description: 'The server is restarting',\n  },\n  1013: {\n    name:        'Try Again Later',\n    description: 'The server is terminating the connection due to a temporary condition',\n  },\n  1014: {\n    name:        'Bad Gateway',\n    description: 'A gateway or proxy received an invalid response from the upstream server',\n  },\n  1015: {\n    name:        'TLS Handshake',\n    description: 'The connection was closed due to a failure to perform a TLS handshake',\n  },\n};\n","const {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n  LOG_ERROR } = require('solclient-log');\n\nconst { ArrayUtils } = require('solclient-util');\nconst { Convert,\n        Hex } = require('solclient-convert');\nconst { ErrorSubcode } = require('solclient-error');\nconst { mixin } = require('solclient-eskit');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\nconst { WebSocketCloseCodes } = require('./websocket-close-codes');\nconst { WebTransportSessionBase } = require('./web-transport-session-base');\n\nconst http = require('http');\nconst https = require('https');\n\nconst {\n  stringToArrayBuffer,\n} = Convert;\nconst {\n  formatHexString,\n} = Hex;\nconst {\n  includes,\n} = ArrayUtils;\n\n/* eslint-env browser */\n// closure mangles window.WebSocket\nconst globalContext = (typeof window === 'undefined' ? global : window);\nlet MyWebSocket = globalContext.WebSocket;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-disable no-global-assign */\n  /* eslint-disable global-require */\n  MyWebSocket = /** @type {WebSocket} */ (require('ws'));\n  /* eslint-enable no-global-assign */\n  /* eslint-enable global-require */\n}\n/* eslint-env shared-browser-node */\n\nfunction adaptURL(url) {\n  const v = url.match(/(ws|http)(s?:\\/\\/.+)/);\n  return `ws${v[2]}`;\n}\n\n\n/**\n * @classdesc\n * @private\n * @memberof solace\n */\nclass WebSocketTransportSession extends WebTransportSessionBase {\n\n  /**\n   * @constructor\n   * @param {String} url The url to connect to\n   * @param {function} eventCB The callback for transport events\n   * @param {SMFClient} client The SMF client for data events\n   * @param {Object} props Properties for the transport session\n   */\n  constructor(url, eventCB, client, props) {\n    super(url, eventCB, client, props);\n    /**\n     * @type {String}\n     */\n    this._url = adaptURL(url);\n\n    /**\n     * @type {?WebSocket}\n     */\n    this._socket = null;\n\n    /**\n     * @type {?string}\n     */\n    this._sessionId = new Date().getTime();\n\n    if (BUILD_ENV.TARGET_BROWSER) {\n      /**\n       * @type {Number}\n       */\n      this._bufferedAmountQueryIntervalInMsecs = props.bufferedAmountQueryIntervalInMsecs;\n      /**\n       * @type {?number}\n       */\n      this._bufferedAmountQueryTimer = null;\n      /**\n       * @type {Number}\n       */\n      this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n    }\n  }\n\n\n  /**\n   * @private\n   */\n  onOpen() {\n    this.cancelConnectTimeout();\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(\n          new TransportSessionEvent(\n              TransportSessionEventCode.UP_NOTICE,\n              'Connected',\n              0,\n              null,\n              this._sessionId));\n  }\n\n  /**\n   * @param {Socket} originalSocket bound at the time of callback registration,\n   * safety against stray calls after socket is destroyed.\n   * @param {Event} event The websocket event causing the close\n   * @private\n   */\n  onClose(originalSocket, event) {\n    if (originalSocket !== this._socket) {\n      LOG_DEBUG('Websocket Transport Session stray onClose for previous socket, ignoring.');\n      return;\n    }\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('WebSocket transport is being destroyed, ignore error');\n      return;\n    }\n    const msgBuf = [];\n    const code = WebSocketCloseCodes[event.code] || WebSocketCloseCodes[0];\n    msgBuf.push(`${event.code} ${code.name} (${code.description})`);\n    if (event.wasClean !== undefined) {\n      msgBuf.push(`clean closure: ${event.wasClean}`);\n    }\n    if (event.reason) {\n      msgBuf.push(`reason: ${event.reason}`);\n    }\n    const msg = msgBuf.join(', ');\n    LOG_DEBUG(`WebSocket transport connection is closed ${msg}`);\n    LOG_TRACE(`Event { type: ${event.type} wasClean: ${event.wasClean} code: ${event.code} reason: ${event.reason} }`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    this.destroy(`Connection closed: ${msg}`, ErrorSubcode.COMMUNICATION_ERROR);\n  }\n\n  onDrain() {\n    LOG_TRACE('Drained socket');\n    this.maybeEmitCanSend();\n    this.maybeEmitFlush();\n  }\n\n  onBufferedAmountPoll() {\n    if (this.getBufferedAmount() === 0) {\n      this.onDrain();\n    } else if (this.scheduleQuery) {\n      this.scheduleQuery();\n    }\n  }\n\n  /**\n   * @param {Socket} originalSocket bound at callback registration.\n   * @param {TransportSessionEvent} event The event causing the error\n   * @private\n   */\n  onError(originalSocket, event) {\n    LOG_INFO(`Websocket Transport Session onError for socket ${originalSocket} while socket is ${this._socket}`);\n    if (originalSocket !== this._socket) {\n      LOG_INFO('Websocket Transport Session stray onError for previous socket, ignoring.');\n      return;\n    }\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_INFO('WebSocket transport is being destroyed, ignore error');\n      return;\n    }\n    const msg = (event.message) ? (`: ${event.message}`) : '';\n    LOG_INFO(`WebSocket transport connection error ${msg} while in state ${this._state}`);\n    // There won't be an onClose call to clean up unless we are connected already.\n    if (this._state === TransportSessionState.WAITING_FOR_CONNECT) {\n      this.cancelConnectTimeout();\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.destroy(`Connection failed: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n    } else { // Sending error event only, onClose will clean up in due time.\n      this._eventCB(\n            new TransportSessionEvent(\n                TransportSessionEventCode.SEND_ERROR,\n                `Connection error${msg}`,\n                null,\n                ErrorSubcode.CONNECTION_ERROR, null));\n    }\n  }\n\n  /**\n   * @param {TransportSessionEvent} event The data event\n   * @private\n   */\n  onMessage(event) {\n    if (this._client) {\n      this._client.rxDataArrayBuffer(event.data);\n    }\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  connectTimerExpiry() {\n    LOG_INFO('WebSocket transport connect timeout');\n    this.state = TransportSessionState.CONNECTION_FAILED;\n    this._eventCB(new TransportSessionEvent(\n      TransportSessionEventCode.CONNECT_TIMEOUT,\n      'Connection timed out',\n      null,\n      ErrorSubcode.TIMEOUT\n    ));\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  connect() {\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_ERROR(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (!this._url) {\n      LOG_WARN('Cannot connect to null URL');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n    if (this._socket) {\n      this.onError('Socket already connected');\n    }\n\n    LOG_INFO('Establishing WebSocket transport session');\n    try {\n      this.createConnectTimeout();\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n      if (BUILD_ENV.TARGET_NODE && !this._socketOptions) {\n        LOG_DEBUG('Creating Node websocket options');\n        this._socketOptions = this.createWebSocketOptions(this.onDrain.bind(this));\n      }\n      LOG_INFO('Constructing socket');\n      if (BUILD_ENV.TARGET_BROWSER) {\n        /**\n         * @type {WebSocket}\n         */\n        this._socket = new MyWebSocket(this._url, 'smf.solacesystems.com');\n      } else {\n        this._socket = new MyWebSocket(this._url, 'smf.solacesystems.com', this._socketOptions);\n        this._socket.ondrain = this.onDrain.bind(this);\n      }\n      // Closure is generally faster than bind\n      LOG_TRACE('Assigning properties to socket');\n      // Closure using Browser profile to avoid mangling this\n      this._socket.binaryType = 'arraybuffer';\n      this._socket.onopen = this.onOpen.bind(this);\n      this._socket.onmessage = this.onMessage.bind(this);\n      this._socket.onclose = this.onClose.bind(this, this._socket);\n      this._socket.onerror = this.onError.bind(this, this._socket);\n      LOG_TRACE('Prepared socket');\n    } catch (error) {\n      LOG_INFO(`Error connecting: ${error.message}`);\n      LOG_TRACE('Error details', error.stack || error);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.cancelConnectTimeout();\n      if (error instanceof TransportError) {\n        this._connError = error;\n      } else {\n        throw new TransportError(`Could not create WebSocket: ${error.message}`,\n                                 error.subcode || ErrorSubcode.CONNECTION_ERROR);\n      }\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    LOG_INFO('WebSocket is connecting');\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @param {String} data The binary string data to send.\n   * @param {Boolean} [force=false] If true, send even if buffer is full.\n   */\n  send(data, force = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    const dataLen = data.length;\n    const bufferAllow = (this._sendBufferMaxSize - this.getBufferedAmount()) >= 0;\n    // LOG_DEBUG('Websocket send:', dataLen, force, bufferAllow);\n    if (!(force || bufferAllow)) {\n      this._canSendNeeded = true;\n      if (this.scheduleQuery) this.scheduleQuery();\n      return TransportReturnCode.NO_SPACE;\n    }\n\n    // LOG_TRACE(`websocket.send: len=${data.length}`);\n    // Slice messages per maxPayloadBytes\n    const maxPayloadBytes = this._maxPayloadBytes;\n    const ab = stringToArrayBuffer(data);\n    if (dataLen > maxPayloadBytes) {\n      for (let i = 0; i < dataLen; i += maxPayloadBytes) {\n        this._socket.send(ab.slice(i, i + maxPayloadBytes));\n      }\n    } else {\n      this._socket.send(ab);\n    }\n    // LOG_TRACE(`websocket.send: after send getBufferedAmount=${this.getBufferedAmount()}`);\n    this._clientstats.bytesWritten += dataLen;\n    ++this._clientstats.msgWritten;\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @returns {Number} The number of already buffered bytes in this transport.\n   * @private\n   */\n  getBufferedAmount() {\n    // Access as string property because this is a defineProperty on node websocket,\n    // meaning it is not mangled by Closure Compiler\n    return this._socket ? this._socket['bufferedAmount'] : 0; // eslint-disable-line dot-notation\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    this._flushCallback = callback;\n    this.maybeEmitFlush();\n  }\n\n  maybeEmitCanSend() {\n    if (this._canSendNeeded && this.getBufferedAmount() < this._sendBufferMaxSize) {\n      LOG_TRACE('Transport emitting CAN_ACCEPT_DATA');\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '', null, 0, this._sessionId));\n    }\n  }\n\n  maybeEmitFlush() {\n    if (!this._flushCallback) return;\n    if (BUILD_ENV.TARGET_BROWSER && this.getBufferedAmount() > 0) {\n      // Ensure we have a query scheduled, but don't interrupt a query in progress\n      if (!this._bufferedAmountQueryTimer) {\n        this.scheduleQuery();\n      }\n      return;\n    }\n\n    // Node is automatically flushed by socket.end(), which is called in non-error cases\n    LOG_DEBUG('Transport emitting FLUSH');\n    const cb = this._flushCallback;\n    this._flushCallback = null;\n    cb();\n  }\n\n  /**\n   * @override\n   */\n  destroy(message, subcode) {\n    // We can destroy (and get a notice) even if the socket is freshly created.\n    // But this will only work once.\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_INFO(`Destroy WebSocket transport: ${message}`);\n\n      // Set state for connection teardown.\n      this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n      if (this._socket) {\n        this._socket.close();\n        this._socket.onopen = null;\n        this._socket.onmessage = null;\n        this._socket.onclose = null;\n        this._socket.onerror = function onerrorStub() { }; // Prevent unhandled errors\n        this._socket = null;\n      }\n\n      if (this._connectTimer) {\n        clearTimeout(this._connectTimer);\n        this._connectTimer = undefined;\n      }\n\n      if (BUILD_ENV.TARGET_BROWSER) {\n        this.cancelQuery();\n        this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n      }\n\n      this._canSendNeeded = false;\n\n      this._state = TransportSessionState.DOWN;\n\n      this._client = null; // Don't accept data.\n    }\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    if (this._eventCB) {\n      // Fire this *almost* instantly, but follow the HTTP\n      // transport pattern by guaranteeing an async callback.\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                              message || 'Session is destroyed',\n                                              null,\n                                              subcode || 0,\n                                              this._sessionId));\n      // Release references to other components\n      this._eventCB = null;\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @returns {String} A description of this object.\n   */\n  getInfoStr() {\n    const str = `WebSocketTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n  static browserSupportsBinaryWebSockets() {\n    LOG_DEBUG('websocket browserSupportBinaryCheck - ' +\n              'if WebSocket, ArrayBuffer and Uint8Array are supported');\n\n    const exists = ['function', 'object'];\n    if (!includes(exists, typeof MyWebSocket) ||\n        !includes(exists, typeof ArrayBuffer) ||\n        !includes(exists, typeof Uint8Array)) {\n      LOG_INFO('websocket browserSupportBinaryCheck: false - some required classes not supported');\n      return false;\n    }\n\n    LOG_DEBUG('websocket browserSupportBinaryCheck - if WebSocket supports binaryType');\n    if ('binaryType' in MyWebSocket.prototype) {\n      LOG_INFO('websocket browserSupportBinaryCheck: true - WebSocket supports binaryType');\n      return true;\n    }\n\n    LOG_INFO('websocket browserSupportBinaryCheck: false - WebSocket does not support binaryType');\n    return false;\n  }\n\n}\n\nif (BUILD_ENV.TARGET_BROWSER) {\n  mixin(WebSocketTransportSession, class WebSocketTransportSessionBrowser {\n    /**\n     * @private\n     */\n    scheduleQuery() {\n      const bufferedAmount = this.getBufferedAmount();\n      if (bufferedAmount > 0 && this._bufferedAmountQueryIntervalInMsecs > 0) {\n        this.cancelQuery();\n        if (this._bufferedAmountQueryIntervalDelayMultiplier > 1) {\n          LOG_DEBUG(`$$ schedule bufferedAmount query timer in ${\n                    this._bufferedAmountQueryIntervalInMsecs *\n                    this._bufferedAmountQueryIntervalDelayMultiplier} ms`);\n        }\n        const timeout = this._bufferedAmountQueryIntervalInMsecs *\n                        this._bufferedAmountQueryIntervalDelayMultiplier;\n        this._bufferedAmountQueryTimer = setTimeout(() => {\n          this.cancelQuery();\n          try {\n            this.onBufferedAmountPoll();\n          } catch (e) {\n            LOG_ERROR(`Error occurred in onBufferedAmountPoll: ${e.message}`);\n            LOG_TRACE('Error details:', e.stack || e);\n          }\n        }, timeout);\n      }\n    }\n\n    cancelQuery() {\n      if (this._bufferedAmountQueryTimer) {\n        clearTimeout(this._bufferedAmountQueryTimer);\n        this._bufferedAmountQueryTimer = null;\n      }\n    }\n  });\n} else {\n  // Node TLS socket options formulation shared with TCP transport\n  // eslint-disable-next-line global-require\n  const { NodeTLSOptsMixin } = require('../node-tls-opts-mixin');\n  mixin(WebTransportSessionBase, NodeTLSOptsMixin);\n  // Node-specific methods of this class go here\n  mixin(WebTransportSessionBase, class WebTransportSessionBaseNode {\n\n    /**\n     * @name solace.WebTransportSession#createWebSocketOptions\n     * @param {Function} onDrainCallback handler function for socket onDrain event\n     * @returns {Object} A WebSocket options object for the current configuration\n     * @private\n     */\n    createWebSocketOptions(onDrainCallback) {\n      let options = {};\n      if (this._ssl) {\n        options = this.createTLSOptions();\n        // use custom agent for client certificate support, ssl resume session support\n        // eslint-disable-next-line dot-notation\n        options['agent'] = new https.Agent({\n          keepAlive: false,\n        });\n      } else { // else no TLS:\n        // eslint-disable-next-line dot-notation\n        options['agent'] = new http.Agent();\n      }\n      // eslint-disable-next-line dot-notation\n      const wsAgent = options['agent'];\n      const origCreateConnection = wsAgent.createConnection;\n      wsAgent.createConnection = function newCreateConnection(opts, callback) {\n        const socket = origCreateConnection.call(this, opts, callback);\n        socket.on('drain', onDrainCallback);\n        return socket;\n      };\n      LOG_DEBUG('WebSocket options', options);\n      return options;\n    }\n  });\n}\n\nmodule.exports.WebSocketTransportSession = WebSocketTransportSession;\n","const { APIProperties } = require('./lib/api-properties');\nconst { APIPropertiesValidators } = require('./lib/api-properties-validators');\nconst { ArrayUtils } = require('./lib/array-utils');\nconst { parseURL } = require('./lib/url');\nconst { Process } = require('./lib/process');\nconst { StringBuffer } = require('./lib/string-buffer');\nconst { StringUtils } = require('./lib/string-utils');\nconst { TimingBucket } = require('./lib/timing-bucket');\nconst { UUID } = require('./lib/uuid');\nconst { Version } = require('./lib/version');\n\nmodule.exports = {\n  parseURL,\n\n  APIProperties,\n  APIPropertiesValidators,\n  ArrayUtils,\n  Process,\n  StringBuffer,\n  StringUtils,\n  TimingBucket,\n  UUID,\n  Version,\n};\n","const { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst APIPropertiesValidators = {\n  validateInstance(typeDesc, instance, name, ...args) {\n    args.forEach((check) => {\n      const validator = check.shift();\n      const validatorArgs = [typeDesc, instance, name, ...check];\n      validator(...validatorArgs);\n    });\n  },\n\n  valInstance(typeDesc, instance, name, typeInstance, typeInstanceDesc) {\n    if (!Check.instanceOf(instance[name], typeInstance)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                               }' must be instance of ${typeInstanceDesc}`);\n    }\n  },\n\n  valNotEmpty(typeDesc, instance, name) {\n    if (Check.none(instance[name]) || instance[name] === '') {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' cannot be empty.`,\n                             ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valLength(typeDesc, instance, name, max) {\n    if (Check.string(instance[name]) && instance[name].length > max) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' exceeded max length ${max}`,\n                             ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valRange(typeDesc, instance, name, min, max) {\n    if (Check.number(instance[name]) && (instance[name] < min || instance[name] > max)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' out of range [${min}; ${max}].`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valString(typeDesc, instance, name) {\n    if (!Check.string(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type string; was ${typeof instance[name]}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valNumber(typeDesc, instance, name) {\n    if (!Check.number(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type number; was ${typeof instance[name]}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valBoolean(typeDesc, instance, name) {\n    const val = instance[name];\n    if (!Check.boolean(val)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type boolean; was ${typeof val}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valIsMember(typeDesc, instance, key, enumInstance, enumName, allowNull = false) {\n    const val = instance[key];\n    if (allowNull && (val === null || val === undefined)) return;\n    if (enumInstance.values.indexOf(val) >= 0) return;\n    throw new OperationError(`${typeDesc} validation: Property '${key\n                             }'=${val} must be a member of ${enumName}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n  },\n\n  valStringOrArray(typeDesc, instance, name) {\n    const val = instance[name];\n    if (typeof val !== 'string' && !Array.isArray(val)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' must be a string or array`,\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valArrayIsMember(typeDesc, instance, name, enumInstance, enumName,\n                   allowUndefined, allowEmpty, allowDuplicate) {\n    const val = instance[name];\n    if ((val === undefined || val === null)) {\n      if (allowUndefined) {\n        return;\n      }\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' must be type Array`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    if (!Array.isArray(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' must be type Array`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (!allowEmpty && instance[name].length === 0) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' cannot be empty`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    instance[name].forEach((ele, index) => {\n      if (!enumInstance.values.includes(ele)) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' must be an array of ${enumName}`,\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (!allowDuplicate) {\n        if (instance[name].indexOf(ele, index + 1) >= 0) {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                          }' cannot have duplicate element value`,\n                          ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n    });\n  },\n\n  valArrayOfString(typeDesc, instance, name) {\n    const val = instance[name];\n    if (Check.something(val)) {\n      if (!Array.isArray(val)) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                               }' must be type Array`,\n                               ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      val.forEach((ele) => {\n        if (typeof ele !== 'string') {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                                 }' must be an array of string`,\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n      });\n    }\n  },\n\n  valTopicString(typedesc, instance, name) {\n    // Pardon this late import. I need to break a circular dependency.\n    // eslint-disable-next-line global-require\n    const { DestinationUtil, DestinationType } = require('solclient-destination');\n    module.exports.APIPropertiesValidators.valString(typedesc, instance, name);\n    const val = instance[name];\n    const result = DestinationUtil.validateAndEncode(DestinationType.TOPIC, val);\n    if (result.error) {\n      throw new OperationError(`${typedesc} validation: Property '${name}' must be ` +\n                               `a valid topic string: ${result.error}`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valTopicStringOrEmpty(typedesc, instance, name) {\n    const val = instance[name];\n    if (val && val.length) {\n      module.exports.APIPropertiesValidators.valTopicString(typedesc, instance, name);\n    }\n  },\n};\n\nmodule.exports.APIPropertiesValidators = APIPropertiesValidators;\n","const cloneObj = require('clone');\n\nconst CLONE_CIRCULAR = false; // If true, handles circular references safely.\nconst CLONE_DEPTH = 1; // Don't deep-clone nested values.\n\n/**\n * @memberof solace\n * @private\n */\nclass APIProperties {\n\n  /**\n   * Base class for all API properties structures. Provides the clone() method to\n   * make all properties cloneable.\n   * Creates an instance of APIProperties. Assigns properties from one or more\n   * objects in increasing priority order.\n   *\n   * @example\n   * super({ foo: 'defaultFoo', bar: 42 }, { foo: 'quux' }); // .foo == quux, .bar = 42\n   *\n   * @param {...any} options The properties sources to assign.\n   *\n   * @since 10.0.0\n   * @constructor\n   */\n  constructor(...options) {\n    Object.assign(this, ...options);\n  }\n\n  /**\n   * Can be overridden.  For instance sessionProperties\n   * overrides this to suppress printing the password.\n   * @returns {String} The string representation of this object\n   * @private\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  clone() {\n    return cloneObj(this, CLONE_CIRCULAR, CLONE_DEPTH);\n  }\n}\n\nmodule.exports.APIProperties = APIProperties;\n","function flatten(array) {\n  return array.reduce((acc, el) => acc.concat(Array.isArray(el) ? flatten(el) : el), []);\n}\n\nfunction includes(array, el) {\n  return array.some(v => v === el);\n}\n\nmodule.exports.ArrayUtils = {\n  flatten,\n  includes,\n};\n","\nconst WINDOWS_VERSION_MAP = {\n  '6.4':  '10.0',\n  '6.3':  '8.1',\n  '6.2':  '8',\n  '6.1':  '7',\n  '6.0':  'Vista',\n  '5.2':  'Server 2003',\n  '5.1':  'XP',\n  '5.01': '2000 SP1',\n  '5.0':  '2000',\n  '4.0':  '4.0',\n};\n\nconst NODE_OS_TYPES = {\n  Darwin:     'OSX',\n  Windows_NT: 'Windows',\n};\n\nconst context = typeof window !== 'undefined' ? window : global;\n\nconst DEFAULT = {\n};\n\nconst NODE_PROCESS = {\n  product:  'solclientjs',\n  platform: 'node',\n  agent:    'node',\n  process:  context.process,\n};\n\n// Worst case fallbacks\nconst BROWSER_PROCESS = {\n  product:  'solclientjs',\n  platform: 'unknown',\n  agent:    'Gecko',\n};\n\nfunction getBrowserAgentInfo() {\n  /* eslint-env browser */\n  const navObj = typeof navigator !== 'undefined' ? navigator : null;\n  if (!navObj) return null;\n  const agentStr = navigator.userAgent;\n\n  // Execute these regex checks against the user agent string in this order.\n  // The earlier browsers have a lot of impersonation substrings in their user\n  // agent list so we positively test for them before considering the browsers\n  // that are frequently impersonated.\n  const browsers = [\n    ['edge', /Edge\\/([0-9._]+)/],\n    ['chrome', /(?!Chrom.*OPR)Chrom(?:e|ium)\\/([0-9.]+)(:?\\s|$)/],\n    ['firefox', /Firefox\\/([0-9.]+)(?:\\s|$)/],\n    ['opera', /Opera\\/([0-9.]+)(?:\\s|$)/],\n    ['opera', /OPR\\/([0-9.]+)(:?\\s|$)$/],\n    ['ie', /Trident\\/7\\.0.*rv:([0-9.]+).*\\).*Gecko$/],\n    ['ie', /MSIE\\s([0-9.]+);.*Trident\\/[4-8].0/], // Edit: IE11 in IE9 emu mode uses Trident 8\n    ['ie', /MSIE\\s(7\\.0)/],\n    ['bb10', /BB10;\\sTouch.*Version\\/([0-9.]+)/],\n    ['android', /Android\\s([0-9.]+)/],\n    ['ios', /Version\\/([0-9._]+).*Mobile.*Safari.*/],\n    ['safari', /Version\\/([0-9._]+).*Safari/],\n  ];\n\n  const agentInfo = {\n    browser:  { name: 'unknown', version: '0.0.0' },\n    platform: { os: 'unknown', arch: 'unknown', version: 'unknown' },\n  };\n\n  const agentHas = (...strs) => strs.some(str => agentStr.indexOf(str) >= 0);\n  const firstValue = (...vals) => vals.filter(Boolean).shift();\n\n  Object.assign(\n    agentInfo, // start with fallbacks above\n    // 1. Run the callback below for each browser name/regex-rule pair.\n    // 2. Decompose the pair into variables called `key` and `rule`.\n    browsers.map(([key, rule]) => {\n      // 3. Skip if the rule doesn't match the user agent string.\n      if (!rule.test(agentStr)) return false;\n      // 4. Get the matches for the rule.\n      const match = rule.exec(agentStr);\n      // 5. Extract the version from match group 1.\n      const versionStrs = match && match[1].split(/[._]/).slice(0, 3);\n      // 6. Convert the version strings to numbers.\n      const version = versionStrs.map(str => parseInt(str, 10));\n      // 7. Ensure our version tuple is length 3 by appending 0 elements.\n      while (version.length < 3) version.push(0);\n      // 8. Return an agentInfo object in the same form as above, consuming the version array.\n      return { browser: { name: key, version: version.join('.') } };\n    }).filter(Boolean).shift()); // 9. Filter out anything that returned `false` (#3)...\n    // 10. ...and return the first element.\n\n  // Now try to extract platform info\n  const os = firstValue(\n    agentHas('Windows Phone') && 'WindowsPhone',\n    agentHas('Windows') && 'Windows',\n    agentHas('Linux') && 'Linux',\n    agentHas('like Mac OS X') && 'iOS',\n    agentHas('OS X') && 'OSX',\n    agentHas('Android', 'Adr') && 'Android',\n    agentHas('BB10', 'RIM Tablet OS', 'BlackBerry') && 'BlackBerry'\n  );\n  const versionTests = {\n    'Windows': () => firstValue(\n      agentHas('Win16') && '3.1.1',\n      agentHas('Windows CE') && 'CE',\n      agentHas('Windows 95') && '4.00.950',\n      agentHas('Windows 98; Win 9x 4.90') && '4.90',\n      agentHas('Windows 98') && '4.10',\n      (() => {\n        // Look in the first set of parentheses for a version string key.\n        // This will fail when Windows 16 comes out\n        const parenParts = agentStr.match(/\\(.+?\\)/);\n        const versionPart = parenParts[0];\n        if (!versionPart) return false;\n        const versionMatch = str => versionPart.indexOf(str) >= 0;\n        return firstValue(...Object.keys(WINDOWS_VERSION_MAP).map(k =>\n            versionMatch(k) && WINDOWS_VERSION_MAP[k]));\n      })()\n    ),\n    'OSX':        () => agentStr.match(/OS X ((\\d+[._])+\\d+)\\b/)[1],\n    'Linux':      () => '',\n    'iOS':        () => agentStr.match(/OS ((\\d+[._])+\\d+) like Mac OS X/)[1],\n    'Android':    () => agentStr.match(/(?:Android|Adr) ((\\d+[._])+\\d_)/)[1],\n    'BlackBerry': () => agentStr.match(/(?:Version\\/|RIM Tablet OS )((\\d+\\.)+\\d+)/)[1],\n  };\n  const versionTest = versionTests[os];\n  agentInfo.platform.os = os || 'Unknown';\n  agentInfo.platform.version = (versionTest && versionTest() || '0.0.0').replace(/_/g, '.');\n  return agentInfo;\n}\n/* eslint-env shared-browser-node */\n\ntry {\n  if (BUILD_ENV.TARGET_BROWSER && context.navigator) {\n    // These are historical defaults\n    const safeEncode = str => str.replace(/[^a-zA-Z0-9_/.]/g, '-');\n    Object.assign(BROWSER_PROCESS, {\n      platform:    context.navigator.platform,\n      agent:       context.navigator.product,\n      description: safeEncode(context.navigator.userAgent),\n      navigator:   context.navigator,\n    });\n    const browserAgentInfo = getBrowserAgentInfo();\n    if (browserAgentInfo) {\n      BROWSER_PROCESS.agent = safeEncode(`${browserAgentInfo.browser.name\n                                           }-${browserAgentInfo.browser.version}`);\n      BROWSER_PROCESS.platform = `${BROWSER_PROCESS.agent}-${safeEncode(\n        `${browserAgentInfo.platform.os}-${browserAgentInfo.platform.version}`)}`;\n    }\n  }\n  if (BUILD_ENV.TARGET_NODE && context.process) {\n  //if (false) {\n    const os = require('os'); // eslint-disable-line global-require\n    const ostype = os.type();\n    const osname = NODE_OS_TYPES[ostype] || ostype || 'unknown';\n    const nodeVersionStr = `node-${process.version.substr(1)}`;\n    Object.assign(NODE_PROCESS, {\n      platform:    `${nodeVersionStr}-${osname}-${os.release()}-${os.arch()}`,\n      agent:       nodeVersionStr,\n      description: nodeVersionStr,\n    });\n  }\n} catch (ex) {\n  // Fall back to defaults\n}\n\nconst Process = Object.assign({}, DEFAULT,\n                              BUILD_ENV.TARGET_BROWSER ? BROWSER_PROCESS : {},\n                              BUILD_ENV.TARGET_NODE ? NODE_PROCESS : {});\n\nmodule.exports.Process = Process;\n","/**\n * This class is used to efficiently concatenate strings.\n * @private\n */\nclass StringBuffer {\n  /**\n   * @constructor\n   * @param {...*} args Initial buffer contents\n   * @private\n   */\n  constructor(...args) {\n    this.clear();\n    this.append(...args);\n  }\n\n  /**\n   * Appends the given strings to the buffer\n   *\n   * @param {...*} args Objects to add to the buffer. These are immediately\n   *                    coerced to strings.\n   * @returns {StringBuffer} this\n   */\n  append(...args) {\n    [...args].forEach((arg) => {\n      this.buffer[this.index++] = String(arg);\n    });\n    return this;\n  }\n\n  /**\n   * Resets the buffer.\n   */\n  clear() {\n    this.buffer = [];\n    this.index = 0;\n  }\n\n  /**\n   * Returns the buffer as a string. Additional concatenations and renderings\n   * can be performed.\n   * @returns {String} The buffer's contents concatenated to a string.\n   */\n  toString() {\n    return this.buffer.join('');\n  }\n}\n\nmodule.exports.StringBuffer = StringBuffer;\n","const { StringBuffer } = require('./string-buffer');\n\nconst PAD_LEFT = 0;\nconst PAD_RIGHT = 1;\n\nconst LUT_PRINTABLE = (() => {\n  const tmp = [];\n  for (let c = 0; c < 256; ++c) {\n    tmp[c] = (c < 33 || c > 126) ? '.' : String.fromCharCode(c);\n  }\n  return tmp;\n})();\n\nfunction padLeftRight(str, minLen, padSide, padChar = ' ') {\n  if (typeof str !== 'string') {\n    return str;\n  }\n  if (str.length >= minLen) {\n    return str;\n  }\n\n  const buf = new StringBuffer();\n  for (let i = 0; i < (minLen - str.length); i++) {\n    buf.append(padChar.charAt(0));\n  }\n  switch (padSide) {\n    case PAD_LEFT:\n      return `${buf}${str}`;\n    case PAD_RIGHT:\n      return `${str}${buf}`;\n    default:\n      return str;\n  }\n}\n\nfunction leastSpaces(length, line) {\n  if (!line.length) return length;\n  const spaces = line.match(/^\\s*/)[0].length;\n  return spaces < length ? spaces : length;\n}\n\nfunction capitalizeWord(str) {\n  return `${str.charAt(0).toUpperCase()}${str.substr(1)}`;\n}\n\nfunction isEmptyFun(str) {\n  return (\n    str === undefined ||\n    str === null ||\n    str.length === 0\n  );\n}\n\n/**\n * @private\n * @type {StringUtils}\n */\nconst StringUtils = {};\n\nStringUtils.capitalize = function capitalize(str) {\n  if (!(str && str.length)) {\n    return str;\n  }\n\n  return str.split(' ').map(capitalizeWord).join(' ');\n};\n\nStringUtils.isEmpty = isEmptyFun;\n\nStringUtils.notEmpty = function notEmpty(str) {\n  return !(isEmptyFun(str));\n};\n\nStringUtils.toSafeChars = function toSafeChars(str) {\n  return str.replace(/[^a-zA-Z0-9_/.]/g, '');\n};\n\nStringUtils.padLeft = function padLeft(str, minLen, padChar) {\n  return padLeftRight(str, minLen, PAD_LEFT, padChar);\n};\n\nStringUtils.padRight = function padRight(str, minLen, padChar) {\n  return padLeftRight(str, minLen, PAD_RIGHT, padChar);\n};\n\nStringUtils.nullTerminate = function nullTerminate(str) {\n  if (str === null || str === undefined) {\n    throw new Error('non str in nullTerminate');\n  }\n  const lastChar = str.charCodeAt(str.length - 1);\n  if (lastChar === 0) {\n    return str;\n  }\n  return str + String.fromCharCode(0x00);\n};\n\nStringUtils.stripNullTerminate = function stripNullTerminate(str) {\n  if (str === null || str === undefined) {\n    throw new Error('null str in stripNullTerminate');\n  }\n  const lastChar = str.charCodeAt(str.length - 1);\n  if (lastChar === 0) {\n    return str.substr(0, str.length - 1);\n  }\n  return str;\n};\n\nStringUtils.hexdump = function hexdump(s) {\n  const output = new StringBuffer();\n  const printable = new StringBuffer();\n  const spacer = pos => (pos === 8 || pos === 16 ? '  ' : ' ');\n  let linelen = 0;\n  for (let i = 0, sLength = s.length; i < sLength; i++) {\n    const ccode = s.charCodeAt(i);\n    output.append(padLeftRight(ccode.toString(16), 2, PAD_LEFT));\n    printable.append(LUT_PRINTABLE[ccode] || '.');\n    output.append(spacer(++linelen));\n\n    if (i === s.length - 1) {\n      // input finished: complete the line\n      while (linelen < 16) {\n        output.append(`  ${spacer(++linelen)}`);\n      }\n    }\n\n    if (linelen === 16) {\n      output.append(printable.join(''));\n      output.append('\\n');\n      linelen = 0;\n      printable.clear();\n    }\n  }\n  return output.toString();\n};\n\n/**\n * Use heredoc`....` to create multi-line heredoc strings. Leading blank lines are removed, as are\n * leading spaces, up to the number of spaces on the least-indented line.\n * @param {String} literals The document template\n * @param {...String} substitutions The substitutions to make in the document\n * @returns {String} The interpolated representation of the document\n */\nStringUtils.heredoc = function heredoc(literals, ...substitutions) {\n  const subst = [...substitutions, ''];\n  const lines = literals.map(k => k + subst.shift())\n    .join('')\n    .split(/\\r?\\n/);\n  const spaces = lines.length === 1 ? 0 : lines.reduce(leastSpaces, Infinity);\n  while (lines[0] === '') {\n    lines.shift();\n  }\n  return lines.map(line => line.substring(spaces)).join('\\n');\n};\n\n\nmodule.exports.StringUtils = StringUtils;\n","class TimingBucket {\n  constructor(name, interval) {\n    this.name = name;\n    this.interval = interval;\n    this.buckets = [];\n  }\n\n  get bucketCount() {\n    let c = 0;\n    for (let i = 0, n = this.buckets.length; i < n; ++i) {\n      c += this.buckets[i] || 0;\n    }\n    return c;\n  }\n\n  log(v) {\n    if (v === undefined || isNaN(v)) {\n      return;\n    }\n    const normalized = Math.floor(v / this.interval) * this.interval;\n    this.buckets[normalized] = this.buckets[normalized] || 0;\n    this.buckets[normalized]++;\n  }\n\n  toString() {\n    const cont = [];\n    this.buckets.forEach((i) => {\n      cont.push(`${i}: ${this.buckets[i]}`);\n    });\n    return `{${cont.join(', ')}}`;\n  }\n}\n\nmodule.exports.TimingBucket = TimingBucket;\n","/* eslint-disable global-require */\nlet parseURL;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-env node */\n  parseURL = require('url').parse;\n} else {\n  /* eslint-env browser */\n  const scope = typeof window !== 'undefined' ? window : this;\n  require('./browser-url-polyfill')(scope);\n  parseURL = function makeURL(...args) {\n    return new URL(...args);\n  };\n}\n\nmodule.exports.parseURL = parseURL;\n","function generateUUID() { // Public Domain/MIT\n  let d = new Date().getTime();\n  // if (typeof performance !== 'undefined' && typeof performance.now === 'function') {\n  //   d += performance.now(); //use high-precision timer if available\n  // }\n\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (d + Math.random() * 16) % 16 | 0;\n    d = Math.floor(d / 16);\n    return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n  });\n}\n\nmodule.exports.UUID = {\n  generateUUID,\n};\n","// Coverity scanned is configured to run against the generated monolithic\n// solclient.js file (debug) version. On the loadbuild server BUILD_ENV.VERSION is\n// substituted and never null (it is null in developer workspace) so\n// coverity will complain that the \" || '0.0.0-source' \" is DEADCODE\n// coverity[dead_error_line]\nconst VERSION = BUILD_ENV.VERSION || '0.0.0-source';\n// Parse the date if provided. Was seeing NaN formatted dates in source mode, so add fallback\nconst DATE = BUILD_ENV.DATE\n  ? new Date(Date.parse(BUILD_ENV.DATE))\n  : new Date();\nconst MODE = BUILD_ENV.MODE_NAME;\n\n// These property names are all for export, so make sure they're not mangled\nconst TARGET = {\n  'name':    BUILD_ENV.TARGET_NAME,\n  'node':    BUILD_ENV.TARGET_NODE,\n  'browser': BUILD_ENV.TARGET_BROWSER,\n};\n\nconst FORMATTED_DATE = (() => {\n  const pad = n => (n < 10 ? `0${n}` : n);\n  const d = DATE;\n  const YYYY = d.getFullYear();\n  const MM = pad(d.getMonth() + 1);\n  const DD = pad(d.getDate());\n  const hh = pad(d.getHours());\n  const mm = pad(d.getMinutes());\n  return `${YYYY}/${MM}/${DD} ${hh}:${mm}`;\n})();\nconst SUMMARY = ['SolclientJS', BUILD_ENV.VERSION, MODE, FORMATTED_DATE].join(', ');\n\n/**\n * Returns the API version. Use version, date and mode properties for build details.\n * Use the summary property or the .toString() method to return a summary.\n * @static\n * @type {Object}\n * @namespace\n * @memberof solace\n */\nconst Version = {\n  /**\n   * The API version, as an informational string. The format of this string is subject to change.\n   * @type {String}\n   */\n  'version':       VERSION,\n  /**\n   * The API build date.\n   * @type {Date}\n   */\n  'date':          DATE,\n  /**\n   * The API build date, as a formatted string.\n   * The format of this date is:\n   * `YYYY-MM-DD hh:mm`\n   * where\n   *  * `YYYY` is the 4-digit year,\n   *  * `MM` is the 2-digit month   (01-12),\n   *  * `DD` is the 2-digit day     (01-31),\n   *  * `hh` is the 2-digit hour    (00-23),\n   *  * `mm` is the 2-digit minute  (00-59)\n   *\n   * @type {String}\n   */\n  'formattedDate': FORMATTED_DATE,\n  /**\n   * Information about the build target. This object is informational; its type, structure and\n   * content are subject to change.\n   * @type {Object}\n   */\n  'target':        TARGET,\n  /**\n   * The build mode. This may be one of 'debug' or 'release'. Other build modes may be added\n   * in the future.\n   * @type {String}\n   */\n  'mode':          MODE,\n  /**\n   * If `true`, this is an unoptimized debug build.\n   * @type {Boolean}\n   */\n  'debug':         BUILD_ENV.MODE_DEBUG,\n  /**\n   * If `true`, this is an optimized release build. Note that there may be multiple release\n   * builds in a distribution, with varying degrees of optimization.\n   * @type {Boolean}\n   */\n  'release':       BUILD_ENV.MODE_RELEASE,\n  /**\n   * An informational string summarizing the API name, version and build date.\n   * @type {String}\n   */\n  'summary':       SUMMARY,\n\n  toString() {\n    return SUMMARY;\n  },\n};\nmodule.exports.Version = Version;\n","const { Check } = require('./lib/check');\nconst { Parameter } = require('./lib/parameter');\n\nmodule.exports.Check = Check;\nmodule.exports.Parameter = Parameter;\n","const EPSILON = 1e6;\n\n/**\n * @param {Array} arr The array to flatten\n * @returns {Array} A maximally flattened array. The original array is not modified.\n * @private\n */\nfunction flatten(arr) {\n  return arr.reduce((a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []);\n}\n\n/**\n * @private\n */\nconst BaseChecks = (() => {\n  const result = {\n    /**\n     * Checks whether a value is undefined or null.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is undefined or null.\n     *\n     * @private\n     */\n    nothing(value) {\n      return (value === undefined || value === null);\n    },\n\n    /**\n     * Checks whether a value is anything, i.e. not undefined or null.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True unless the value is undefined or null.\n     *\n     * @private\n     */\n    anything(value) {\n      return !BaseChecks.nothing(value);\n    },\n\n    /**\n     * Checks whether a value is undefined. Uses the conservative\n     * typeof check for compatibility with particularly ill-behaved\n     * libraries that redefine <code>undefined</code>.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is undefined.\n     *\n     * @private\n     */\n    undefined(value) {\n      return typeof value === 'undefined';\n    },\n\n    /**\n     * Checks whether a value is defined. This is true for any value with\n     * a type that is not 'undefined'.\n     *\n     * @param {any} value The value to check\n     * @returns {Boolean} True if the value is defined.\n     *\n     * @private\n     */\n    defined(value) {\n      return !BaseChecks.undefined(value);\n    },\n\n    /**\n     * Checks whether a value is an array.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is an array.\n     *\n     * @private\n     */\n    array(value) {\n      return BaseChecks.anything(value) && Array.isArray(value);\n    },\n\n    /**\n     * Checks whether a value is an object. If a value is an array, it is not an object.\n     * If a value is null, it is not an object.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is an object (and not an array).\n     *\n     * @private\n     */\n    object(value) {\n      return (!BaseChecks.array(value) &&\n              value !== null &&\n              (typeof value === 'object' || value instanceof Object));\n    },\n\n    /**\n     * Checks whether a value is an instance of the given type.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} type The type to check.\n     *\n     * @returns {Boolean} True if type is in value's prototype chain.\n     *\n     * @private\n     */\n    instanceOf(val, type) {\n      return BaseChecks.object(val) && val instanceof type;\n    },\n\n    /**\n     * Checks whether a value's typeof is equal to the given type string.\n     *\n     * @param {*} val The value to check.\n     * @param {String} type The type string for comparison.\n     *\n     * @returns {Boolean} True if typeof(val) == type\n     *\n     * @private\n     */\n    type(val, type) {\n      return typeof val === type; /* dynamic */ // eslint-disable-line valid-typeof\n    },\n\n    /**\n     * Checks whether a value is an instance of any of the given types.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} types The types to check.\n     *\n     * @returns {Boolean} True if any element of types is in val's prototype chain.\n     *\n     * @private\n     */\n    instanceOfAny(val, ...types) {\n      return (BaseChecks.array(types) &&\n              flatten(types).some(type => BaseChecks.instanceOf(val, type)));\n    },\n\n    /**\n     * Checks whether the given value is empty.\n     *\n     * Emptiness is determined using the following checks:\n     *\n     * <ol>\n     *  <li>If an object is nothing, it is empty.</li>\n     *  <li>If it is an object, and it has no keys of its own, it is empty.</li>\n     *  <li>If it has a length property, it is empty if length === 0.</li>\n     *  <li>If none of the above apply, the object is not empty.</li>\n     * </ol>\n     *\n     * @param   {*} val The value to check.\n     *\n     * @returns {Boolean} True if the value is empty.\n     *\n     * @private\n     */\n    empty(val) {\n      if (BaseChecks.nothing(val)) return true;\n      if (BaseChecks.object(val)) {\n        if (Object.keys(val).length === 0) {\n          return true;\n        }\n      }\n      if (val.length === 0) {\n        return true;\n      }\n      return false;\n    },\n\n    /**\n     * A user-defined check.\n     *\n     * @param   {*} val The value to check\n     * @param   {Function} fn The function(val) to use.\n     *\n     * @returns {Boolean} The result of the function, coerced to a boolean.\n     *\n     * @private\n     */\n    truthy(val, fn) {\n      return !!fn(val);\n    },\n\n    rangeGe(val, rangeMinInclusive) {\n      return val >= rangeMinInclusive;\n    },\n\n    rangeGt(val, rangeMin) {\n      return val > rangeMin;\n    },\n\n    rangeLe(val, rangeMaxInclusive) {\n      return val <= rangeMaxInclusive;\n    },\n\n    rangeLt(val, rangeMax) {\n      return val < rangeMax;\n    },\n\n    rangeCompare(val, operator, operand, ...args) {\n      switch (operator) {\n        case '=':\n        case '==':\n        case '===':\n          return val === operand;\n        case '~=':\n        case '=~':\n          {\n            const epsilon = args[0] || EPSILON;\n            return Math.abs(val - operand) < epsilon;\n          }\n        case '<':\n          return val < operand;\n        case '<=':\n          return val <= operand;\n        case '>':\n          return val > operand;\n        case '>=':\n          return val >= operand;\n        default:\n          throw new Error(`Illegal operator for rangeCompare: ${operator}`);\n      }\n    },\n\n    NaN(val) {\n      return Number.isNaN(val);\n    },\n\n    /**\n     * Checks whether val is included in the object. If obj is an array, val is included if\n     * val is an element of the array. Otherwise, if obj is an object, val is included if\n     * val is one of the keys of obj.\n     *\n     * @param   {*} val The value to test\n     * @param   {*} obj The object to test\n     *\n     * @returns {Boolean} True if the value is included in the object\n     */\n    included(val, obj) {\n      if (BaseChecks.nothing(obj)) {\n        return false;\n      }\n      if (obj.includes) {\n        return obj.includes(val);\n      }\n      if (Array.isArray(obj)) {\n        // Not exactly Array.prototype.includes, which uses SameValueZero (+0 == -0)\n        return obj.indexOf(val) >= 0;\n      }\n      if (BaseChecks.object(obj)) {\n        const keys = Object.keys(obj);\n        return BaseChecks.included(val, keys);\n      }\n      return false;\n    },\n\n    /**\n     * Checks whether val is equal to expected.\n     *\n     * @param {any} val The value to check.\n     * @param {any} expected The expected value.\n     * @returns {Boolean} True if the value was equal to the expected value.\n     */\n    equal(val, expected) {\n      return val === expected;\n    },\n\n    /**\n     * Checks whether the given value appears as an attribute value in the given attributes object,\n     * e.g. whether an enumeration contains the given value. If the attributes object is an array,\n     * the array membership check {@link #included} is used instead.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} obj The object with attributes to check.\n     *\n     * @returns {Boolean} True if attrs has any attribute equal to val.\n     */\n    member(val, obj) {\n      return (BaseChecks.anything(obj) &&\n              (BaseChecks.array(obj)\n                ? BaseChecks.included(val, obj)\n                : Object.keys(obj).some(k => obj[k] === val))\n      );\n    },\n\n    boolean(v) {\n      return BaseChecks.type(v, 'boolean');\n    },\n\n    number(v) {\n      return BaseChecks.type(v, 'number');\n    },\n\n    string(v) {\n      return BaseChecks.type(v, 'string');\n    },\n\n    function(v) {\n      return BaseChecks.type(v, 'function');\n    },\n  };\n\n  /**\n   * Checks whether an object is none. This is the same check as <code>nothing</code>\n   * @see {@link nothing}\n   */\n  result.none = result.nothing;\n\n  /**\n   * Checks whether an object is something. This is the same check as <code>anything</code>\n   */\n  result.something = result.anything;\n\n  // Add check-loosening suffixes, (t | null), (t | undefined) and (t | null | undefined).\n  // Do the t check last, just in case it is not (null | undefined) safe.\n  Object.keys(result).forEach((key) => {\n    /**\n     * .orNull checks. These are equivalent to the similarly named check, but also pass if the value\n     * supplied was equal to null.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orNull = function orNull(val, ...args) {\n      return val === null || result[key](val, ...args);\n    };\n\n    /**\n     * .orUndefined checks. These are equivalent to the similarly named check, but also pass if the\n     * value supplied was equal to null.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orUndefined = function orUndefined(val, ...args) {\n      return val === undefined || result[key](val, ...args);\n    };\n\n    /**\n     * .orNothing checks. These are equivalent to the similarly named check, but also pass if the\n     * value supplied was null or undefined.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orNothing = function orNothing(val, ...args) {\n      return result.nothing(val) || result[key](val, ...args);\n    };\n  });\n\n  return result;\n})();\n\nmodule.exports.BaseChecks = BaseChecks;\n","const { BaseChecks } = require('./base-checks');\n\n/**\n *\n * Generates a then closure.\n *\n * @param {Boolean} doOp Whether the returned then function should call its argument.\n * @returns {Object} An object { then(fn, elseFn=undefined) }. If doOp was true, then(fn) will\n *                      call fn. If not, elseFn will be called if supplied.\n * @private\n */\nfunction thenGen(doOp) {\n  return {\n    then: doOp ? f => f() : (_, elseFn) => elseFn(),\n  };\n}\n\n/**\n *\n * none, anything, boolean, ... @returns {Boolean}\n * when(condition) @returns then(fn, elseFn) => if condition fn() else elseFn && elseFn()\n * unless(condition, else) @returns then(fn, elseFn) => if !condition fn() else elseFn && elseFn\n * whenNone, whenAnything, whenBoolean, ... @returns {function} then(fn, elseFn)\n * unlessNone, unlessAnything, unlessBoolean ... @returns {function} unless(fn, elseFn)\n * @private\n */\nconst Check = (() => {\n  const result = Object.assign({}, BaseChecks);\n  result.when = condition => thenGen(condition);\n  result.unless = condition => thenGen(!condition);\n  return result;\n})();\n\nmodule.exports.Check = Check;\n","const { Check } = require('./check');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst NO_OBJ = {}; // anonymous object\n\nfunction objectValues(object) {\n  return Object.keys(object).map(k => object[k]);\n}\n\nfunction subcodeSummary(subcode, expected = null, got = NO_OBJ) {\n  const expectedStr = expected ? `; expected: ${expected}` : '';\n  const gotStr = got !== NO_OBJ ? `; got: ${got}` : '';\n  switch (subcode) {\n    case ErrorSubcode.PARAMETER_INVALID_TYPE:\n      return `Parameter type was invalid${expectedStr}${gotStr}`;\n    default:\n      return ErrorSubcode.nameOf(subcode).toLowerCase().replace(/_/, ' ') + expectedStr;\n  }\n}\n\nfunction validateError(name, subcode, message) {\n  throw new OperationError(`Parameter ${name} failed validation`, subcode, message);\n}\n\nfunction validate(name, subcode, message, check, value, ...validatorArgs) {\n  if (!check(value, ...validatorArgs)) {\n    return validateError(name, subcode, message);\n  }\n  return value;\n}\n\nconst typename = x => x && x.constructor && x.constructor.name || typeof x;\n\n/**\n * The Check object is a powerful validation API but it is partially built at runtime by composing\n * functions, and it requires significant boilerplate for parameter validation.\n *\n * The Parameter API expresses concrete validations using the Check API, returning values on success\n * and throwing the appropriate SDK exception on failure. It would be tempting to try to\n * automatically build a Parameter method for every Check method, but this would make Parameter\n * difficult to understand and use.\n *\n * @private\n */\nconst Parameter = {};\n\nParameter.isArray = function isArray(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'array', value)) {\n  return validate(name, subcode, message, Check.isArray, value);\n};\n\nParameter.isBoolean =\nfunction isBoolean(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'boolean', value)) {\n  return validate(name, subcode, message, Check.boolean, value);\n};\n\nParameter.isBooleanOrNothing =\nfunction isBooleanOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'boolean or nothing', value)) {\n  return validate(name, subcode, message, Check.boolean.orNothing, value);\n};\n\nParameter.isEnumMember =\nfunction isEnumMember(name, value, memberOfEnum, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of [${memberOfEnum.names.join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member, value, memberOfEnum);\n};\n\nParameter.isEnumMemberOrNothing =\nfunction isEnumMemberOrNothing(name, value, memberOfEnum, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of [${memberOfEnum.names.join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member.orNothing, value, memberOfEnum);\n};\n\nParameter.isFunction =\nfunction isFunction(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'function', value)) {\n  return validate(name, subcode, message, Check.function, value);\n};\n\nParameter.isFunctionOrNothing =\nfunction isFunctionOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'function or nothing', value)) {\n  return validate(name, subcode, message, Check.function.orNothing, value);\n};\n\nParameter.isInstanceOf =\nfunction isInstanceOf(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE,\n                      message = subcodeSummary(subcode, instanceOf.name, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf, value, instanceOf);\n};\n\nParameter.isInstanceOfOrNothing =\nfunction isInstanceOfOrNothing(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or nothing`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orNothing, value, instanceOf);\n};\n\nParameter.isInstanceOfOrNull =\nfunction isInstanceOfOrNull(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or null`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orNull, value, instanceOf);\n};\n\nParameter.isInstanceOfOrUndefined =\nfunction isInstanceOfOrUndefined(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or undefined`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orUndefined, value, instanceOf);\n};\n\nParameter.isMember =\nfunction isMember(name, value, memberOf, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of ${memberOf.name}.[${objectValues(memberOf).join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member, value, memberOf);\n};\n\nParameter.isNumber =\nfunction isNumber(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number', value)) {\n  return validate(name, subcode, message, Check.number, value);\n};\n\nParameter.isNumberOrNothing =\nfunction isNumberOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number or nothing', value)) {\n  return validate(name, subcode, message, Check.number.orNothing, value);\n};\n\nParameter.isNumberOrNull =\nfunction isNumberOrNull(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number or null', value)) {\n  return validate(name, subcode, message, Check.number.orNull, value);\n};\n\nParameter.isRangeCompare =\nfunction isRangeCompare(name, value, operator, operand, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `${operator} ${operand}`, value)) {\n  return validate(name, subcode, message, Check.rangeCompare, value, operator, operand);\n};\n\nParameter.isRangeCompareOrNothing = function isRangeCompareOrNothing(name, value, operator, operand, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `${operator} ${operand} or nothing`, value)) {\n  return validate(name, subcode, message, Check.rangeCompare.orNothing, value, operator, operand);\n};\n\nParameter.isStringOrNull =\nfunction isStringOrNull(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string or null', value)) {\n  return validate(name, subcode, message, Check.string.orNull, value);\n};\n\n\nParameter.isString =\nfunction isString(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string', value)) {\n  return validate(name, subcode, message, Check.string, value);\n};\n\nParameter.isStringOrNothing =\nfunction isStringOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string or nothing', value)) {\n  return validate(name, subcode, message, Check.string.orNothing, value);\n};\n\nParameter.isValue =\nfunction isValue(name, value, expected, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `must be ${value}`)) {\n  return validate(name, subcode, message, Check.equal, value, expected);\n};\n\n\nmodule.exports.Parameter = Parameter;\n","var clone = (function() {\n'use strict';\n\nfunction _instanceof(obj, type) {\n  return type != null && obj instanceof type;\n}\n\nvar nativeMap;\ntry {\n  nativeMap = Map;\n} catch(_) {\n  // maybe a reference error because no `Map`. Give it a dummy value that no\n  // value will ever be an instanceof.\n  nativeMap = function() {};\n}\n\nvar nativeSet;\ntry {\n  nativeSet = Set;\n} catch(_) {\n  nativeSet = function() {};\n}\n\nvar nativePromise;\ntry {\n  nativePromise = Promise;\n} catch(_) {\n  nativePromise = function() {};\n}\n\n/**\n * Clones (copies) an Object using deep copying.\n *\n * This function supports circular references by default, but if you are certain\n * there are no circular references in your object, you can save some CPU time\n * by calling clone(obj, false).\n *\n * Caution: if `circular` is false and `parent` contains circular references,\n * your program may enter an infinite loop and crash.\n *\n * @param `parent` - the object to be cloned\n * @param `circular` - set to true if the object to be cloned may contain\n *    circular references. (optional - true by default)\n * @param `depth` - set to a number if the object is only to be cloned to\n *    a particular depth. (optional - defaults to Infinity)\n * @param `prototype` - sets the prototype to be used when cloning an object.\n *    (optional - defaults to parent prototype).\n * @param `includeNonEnumerable` - set to true if the non-enumerable properties\n *    should be cloned as well. Non-enumerable properties on the prototype\n *    chain will be ignored. (optional - false by default)\n*/\nfunction clone(parent, circular, depth, prototype, includeNonEnumerable) {\n  if (typeof circular === 'object') {\n    depth = circular.depth;\n    prototype = circular.prototype;\n    includeNonEnumerable = circular.includeNonEnumerable;\n    circular = circular.circular;\n  }\n  // maintain two arrays for circular references, where corresponding parents\n  // and children have the same index\n  var allParents = [];\n  var allChildren = [];\n\n  var useBuffer = typeof Buffer != 'undefined';\n\n  if (typeof circular == 'undefined')\n    circular = true;\n\n  if (typeof depth == 'undefined')\n    depth = Infinity;\n\n  // recurse this function so we don't reset allParents and allChildren\n  function _clone(parent, depth) {\n    // cloning null always returns null\n    if (parent === null)\n      return null;\n\n    if (depth === 0)\n      return parent;\n\n    var child;\n    var proto;\n    if (typeof parent != 'object') {\n      return parent;\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      child = new nativeMap();\n    } else if (_instanceof(parent, nativeSet)) {\n      child = new nativeSet();\n    } else if (_instanceof(parent, nativePromise)) {\n      child = new nativePromise(function (resolve, reject) {\n        parent.then(function(value) {\n          resolve(_clone(value, depth - 1));\n        }, function(err) {\n          reject(_clone(err, depth - 1));\n        });\n      });\n    } else if (clone.__isArray(parent)) {\n      child = [];\n    } else if (clone.__isRegExp(parent)) {\n      child = new RegExp(parent.source, __getRegExpFlags(parent));\n      if (parent.lastIndex) child.lastIndex = parent.lastIndex;\n    } else if (clone.__isDate(parent)) {\n      child = new Date(parent.getTime());\n    } else if (useBuffer && Buffer.isBuffer(parent)) {\n      if (Buffer.allocUnsafe) {\n        // Node.js >= 4.5.0\n        child = Buffer.allocUnsafe(parent.length);\n      } else {\n        // Older Node.js versions\n        child = new Buffer(parent.length);\n      }\n      parent.copy(child);\n      return child;\n    } else if (_instanceof(parent, Error)) {\n      child = Object.create(parent);\n    } else {\n      if (typeof prototype == 'undefined') {\n        proto = Object.getPrototypeOf(parent);\n        child = Object.create(proto);\n      }\n      else {\n        child = Object.create(prototype);\n        proto = prototype;\n      }\n    }\n\n    if (circular) {\n      var index = allParents.indexOf(parent);\n\n      if (index != -1) {\n        return allChildren[index];\n      }\n      allParents.push(parent);\n      allChildren.push(child);\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      parent.forEach(function(value, key) {\n        var keyChild = _clone(key, depth - 1);\n        var valueChild = _clone(value, depth - 1);\n        child.set(keyChild, valueChild);\n      });\n    }\n    if (_instanceof(parent, nativeSet)) {\n      parent.forEach(function(value) {\n        var entryChild = _clone(value, depth - 1);\n        child.add(entryChild);\n      });\n    }\n\n    for (var i in parent) {\n      var attrs;\n      if (proto) {\n        attrs = Object.getOwnPropertyDescriptor(proto, i);\n      }\n\n      if (attrs && attrs.set == null) {\n        continue;\n      }\n      child[i] = _clone(parent[i], depth - 1);\n    }\n\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(parent);\n      for (var i = 0; i < symbols.length; i++) {\n        // Don't need to worry about cloning a symbol because it is a primitive,\n        // like a number or string.\n        var symbol = symbols[i];\n        var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);\n        if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {\n          continue;\n        }\n        child[symbol] = _clone(parent[symbol], depth - 1);\n        if (!descriptor.enumerable) {\n          Object.defineProperty(child, symbol, {\n            enumerable: false\n          });\n        }\n      }\n    }\n\n    if (includeNonEnumerable) {\n      var allPropertyNames = Object.getOwnPropertyNames(parent);\n      for (var i = 0; i < allPropertyNames.length; i++) {\n        var propertyName = allPropertyNames[i];\n        var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);\n        if (descriptor && descriptor.enumerable) {\n          continue;\n        }\n        child[propertyName] = _clone(parent[propertyName], depth - 1);\n        Object.defineProperty(child, propertyName, {\n          enumerable: false\n        });\n      }\n    }\n\n    return child;\n  }\n\n  return _clone(parent, depth);\n}\n\n/**\n * Simple flat clone using prototype, accepts only objects, usefull for property\n * override on FLAT configuration object (no nested props).\n *\n * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n * works.\n */\nclone.clonePrototype = function clonePrototype(parent) {\n  if (parent === null)\n    return null;\n\n  var c = function () {};\n  c.prototype = parent;\n  return new c();\n};\n\n// private utility functions\n\nfunction __objToStr(o) {\n  return Object.prototype.toString.call(o);\n}\nclone.__objToStr = __objToStr;\n\nfunction __isDate(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object Date]';\n}\nclone.__isDate = __isDate;\n\nfunction __isArray(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object Array]';\n}\nclone.__isArray = __isArray;\n\nfunction __isRegExp(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object RegExp]';\n}\nclone.__isRegExp = __isRegExp;\n\nfunction __getRegExpFlags(re) {\n  var flags = '';\n  if (re.global) flags += 'g';\n  if (re.ignoreCase) flags += 'i';\n  if (re.multiline) flags += 'm';\n  return flags;\n}\nclone.__getRegExpFlags = __getRegExpFlags;\n\nreturn clone;\n})();\n\nif (typeof module === 'object' && module.exports) {\n  module.exports = clone;\n}\n","'use strict';\n\nconst WebSocket = require('./lib/websocket');\n\nWebSocket.createWebSocketStream = require('./lib/stream');\nWebSocket.Server = require('./lib/websocket-server');\nWebSocket.Receiver = require('./lib/receiver');\nWebSocket.Sender = require('./lib/sender');\n\nWebSocket.WebSocket = WebSocket;\nWebSocket.WebSocketServer = WebSocket.Server;\n\nmodule.exports = WebSocket;\n","'use strict';\n\nconst { EMPTY_BUFFER } = require('./constants');\n\n/**\n * Merges an array of buffers into a new buffer.\n *\n * @param {Buffer[]} list The array of buffers to concat\n * @param {Number} totalLength The total length of buffers in the list\n * @return {Buffer} The resulting buffer\n * @public\n */\nfunction concat(list, totalLength) {\n  if (list.length === 0) return EMPTY_BUFFER;\n  if (list.length === 1) return list[0];\n\n  const target = Buffer.allocUnsafe(totalLength);\n  let offset = 0;\n\n  for (let i = 0; i < list.length; i++) {\n    const buf = list[i];\n    target.set(buf, offset);\n    offset += buf.length;\n  }\n\n  if (offset < totalLength) return target.slice(0, offset);\n\n  return target;\n}\n\n/**\n * Masks a buffer using the given mask.\n *\n * @param {Buffer} source The buffer to mask\n * @param {Buffer} mask The mask to use\n * @param {Buffer} output The buffer where to store the result\n * @param {Number} offset The offset at which to start writing\n * @param {Number} length The number of bytes to mask.\n * @public\n */\nfunction _mask(source, mask, output, offset, length) {\n  for (let i = 0; i < length; i++) {\n    output[offset + i] = source[i] ^ mask[i & 3];\n  }\n}\n\n/**\n * Unmasks a buffer using the given mask.\n *\n * @param {Buffer} buffer The buffer to unmask\n * @param {Buffer} mask The mask to use\n * @public\n */\nfunction _unmask(buffer, mask) {\n  for (let i = 0; i < buffer.length; i++) {\n    buffer[i] ^= mask[i & 3];\n  }\n}\n\n/**\n * Converts a buffer to an `ArrayBuffer`.\n *\n * @param {Buffer} buf The buffer to convert\n * @return {ArrayBuffer} Converted buffer\n * @public\n */\nfunction toArrayBuffer(buf) {\n  if (buf.byteLength === buf.buffer.byteLength) {\n    return buf.buffer;\n  }\n\n  return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n}\n\n/**\n * Converts `data` to a `Buffer`.\n *\n * @param {*} data The data to convert\n * @return {Buffer} The buffer\n * @throws {TypeError}\n * @public\n */\nfunction toBuffer(data) {\n  toBuffer.readOnly = true;\n\n  if (Buffer.isBuffer(data)) return data;\n\n  let buf;\n\n  if (data instanceof ArrayBuffer) {\n    buf = Buffer.from(data);\n  } else if (ArrayBuffer.isView(data)) {\n    buf = Buffer.from(data.buffer, data.byteOffset, data.byteLength);\n  } else {\n    buf = Buffer.from(data);\n    toBuffer.readOnly = false;\n  }\n\n  return buf;\n}\n\ntry {\n  const bufferUtil = require('bufferutil');\n\n  module.exports = {\n    concat,\n    mask(source, mask, output, offset, length) {\n      if (length < 48) _mask(source, mask, output, offset, length);\n      else bufferUtil.mask(source, mask, output, offset, length);\n    },\n    toArrayBuffer,\n    toBuffer,\n    unmask(buffer, mask) {\n      if (buffer.length < 32) _unmask(buffer, mask);\n      else bufferUtil.unmask(buffer, mask);\n    }\n  };\n} catch (e) /* istanbul ignore next */ {\n  module.exports = {\n    concat,\n    mask: _mask,\n    toArrayBuffer,\n    toBuffer,\n    unmask: _unmask\n  };\n}\n","'use strict';\n\nmodule.exports = {\n  BINARY_TYPES: ['nodebuffer', 'arraybuffer', 'fragments'],\n  EMPTY_BUFFER: Buffer.alloc(0),\n  GUID: '258EAFA5-E914-47DA-95CA-C5AB0DC85B11',\n  kForOnEventAttribute: Symbol('kIsForOnEventAttribute'),\n  kListener: Symbol('kListener'),\n  kStatusCode: Symbol('status-code'),\n  kWebSocket: Symbol('websocket'),\n  NOOP: () => {}\n};\n","'use strict';\n\nconst { kForOnEventAttribute, kListener } = require('./constants');\n\nconst kCode = Symbol('kCode');\nconst kData = Symbol('kData');\nconst kError = Symbol('kError');\nconst kMessage = Symbol('kMessage');\nconst kReason = Symbol('kReason');\nconst kTarget = Symbol('kTarget');\nconst kType = Symbol('kType');\nconst kWasClean = Symbol('kWasClean');\n\n/**\n * Class representing an event.\n */\nclass Event {\n  /**\n   * Create a new `Event`.\n   *\n   * @param {String} type The name of the event\n   * @throws {TypeError} If the `type` argument is not specified\n   */\n  constructor(type) {\n    this[kTarget] = null;\n    this[kType] = type;\n  }\n\n  /**\n   * @type {*}\n   */\n  get target() {\n    return this[kTarget];\n  }\n\n  /**\n   * @type {String}\n   */\n  get type() {\n    return this[kType];\n  }\n}\n\nObject.defineProperty(Event.prototype, 'target', { enumerable: true });\nObject.defineProperty(Event.prototype, 'type', { enumerable: true });\n\n/**\n * Class representing a close event.\n *\n * @extends Event\n */\nclass CloseEvent extends Event {\n  /**\n   * Create a new `CloseEvent`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} [options] A dictionary object that allows for setting\n   *     attributes via object members of the same name\n   * @param {Number} [options.code=0] The status code explaining why the\n   *     connection was closed\n   * @param {String} [options.reason=''] A human-readable string explaining why\n   *     the connection was closed\n   * @param {Boolean} [options.wasClean=false] Indicates whether or not the\n   *     connection was cleanly closed\n   */\n  constructor(type, options = {}) {\n    super(type);\n\n    this[kCode] = options.code === undefined ? 0 : options.code;\n    this[kReason] = options.reason === undefined ? '' : options.reason;\n    this[kWasClean] = options.wasClean === undefined ? false : options.wasClean;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get code() {\n    return this[kCode];\n  }\n\n  /**\n   * @type {String}\n   */\n  get reason() {\n    return this[kReason];\n  }\n\n  /**\n   * @type {Boolean}\n   */\n  get wasClean() {\n    return this[kWasClean];\n  }\n}\n\nObject.defineProperty(CloseEvent.prototype, 'code', { enumerable: true });\nObject.defineProperty(CloseEvent.prototype, 'reason', { enumerable: true });\nObject.defineProperty(CloseEvent.prototype, 'wasClean', { enumerable: true });\n\n/**\n * Class representing an error event.\n *\n * @extends Event\n */\nclass ErrorEvent extends Event {\n  /**\n   * Create a new `ErrorEvent`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} [options] A dictionary object that allows for setting\n   *     attributes via object members of the same name\n   * @param {*} [options.error=null] The error that generated this event\n   * @param {String} [options.message=''] The error message\n   */\n  constructor(type, options = {}) {\n    super(type);\n\n    this[kError] = options.error === undefined ? null : options.error;\n    this[kMessage] = options.message === undefined ? '' : options.message;\n  }\n\n  /**\n   * @type {*}\n   */\n  get error() {\n    return this[kError];\n  }\n\n  /**\n   * @type {String}\n   */\n  get message() {\n    return this[kMessage];\n  }\n}\n\nObject.defineProperty(ErrorEvent.prototype, 'error', { enumerable: true });\nObject.defineProperty(ErrorEvent.prototype, 'message', { enumerable: true });\n\n/**\n * Class representing a message event.\n *\n * @extends Event\n */\nclass MessageEvent extends Event {\n  /**\n   * Create a new `MessageEvent`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} [options] A dictionary object that allows for setting\n   *     attributes via object members of the same name\n   * @param {*} [options.data=null] The message content\n   */\n  constructor(type, options = {}) {\n    super(type);\n\n    this[kData] = options.data === undefined ? null : options.data;\n  }\n\n  /**\n   * @type {*}\n   */\n  get data() {\n    return this[kData];\n  }\n}\n\nObject.defineProperty(MessageEvent.prototype, 'data', { enumerable: true });\n\n/**\n * This provides methods for emulating the `EventTarget` interface. It's not\n * meant to be used directly.\n *\n * @mixin\n */\nconst EventTarget = {\n  /**\n   * Register an event listener.\n   *\n   * @param {String} type A string representing the event type to listen for\n   * @param {Function} listener The listener to add\n   * @param {Object} [options] An options object specifies characteristics about\n   *     the event listener\n   * @param {Boolean} [options.once=false] A `Boolean` indicating that the\n   *     listener should be invoked at most once after being added. If `true`,\n   *     the listener would be automatically removed when invoked.\n   * @public\n   */\n  addEventListener(type, listener, options = {}) {\n    let wrapper;\n\n    if (type === 'message') {\n      wrapper = function onMessage(data, isBinary) {\n        const event = new MessageEvent('message', {\n          data: isBinary ? data : data.toString()\n        });\n\n        event[kTarget] = this;\n        listener.call(this, event);\n      };\n    } else if (type === 'close') {\n      wrapper = function onClose(code, message) {\n        const event = new CloseEvent('close', {\n          code,\n          reason: message.toString(),\n          wasClean: this._closeFrameReceived && this._closeFrameSent\n        });\n\n        event[kTarget] = this;\n        listener.call(this, event);\n      };\n    } else if (type === 'error') {\n      wrapper = function onError(error) {\n        const event = new ErrorEvent('error', {\n          error,\n          message: error.message\n        });\n\n        event[kTarget] = this;\n        listener.call(this, event);\n      };\n    } else if (type === 'open') {\n      wrapper = function onOpen() {\n        const event = new Event('open');\n\n        event[kTarget] = this;\n        listener.call(this, event);\n      };\n    } else {\n      return;\n    }\n\n    wrapper[kForOnEventAttribute] = !!options[kForOnEventAttribute];\n    wrapper[kListener] = listener;\n\n    if (options.once) {\n      this.once(type, wrapper);\n    } else {\n      this.on(type, wrapper);\n    }\n  },\n\n  /**\n   * Remove an event listener.\n   *\n   * @param {String} type A string representing the event type to remove\n   * @param {Function} handler The listener to remove\n   * @public\n   */\n  removeEventListener(type, handler) {\n    for (const listener of this.listeners(type)) {\n      if (listener[kListener] === handler && !listener[kForOnEventAttribute]) {\n        this.removeListener(type, listener);\n        break;\n      }\n    }\n  }\n};\n\nmodule.exports = {\n  CloseEvent,\n  ErrorEvent,\n  Event,\n  EventTarget,\n  MessageEvent\n};\n","'use strict';\n\nconst { tokenChars } = require('./validation');\n\n/**\n * Adds an offer to the map of extension offers or a parameter to the map of\n * parameters.\n *\n * @param {Object} dest The map of extension offers or parameters\n * @param {String} name The extension or parameter name\n * @param {(Object|Boolean|String)} elem The extension parameters or the\n *     parameter value\n * @private\n */\nfunction push(dest, name, elem) {\n  if (dest[name] === undefined) dest[name] = [elem];\n  else dest[name].push(elem);\n}\n\n/**\n * Parses the `Sec-WebSocket-Extensions` header into an object.\n *\n * @param {String} header The field value of the header\n * @return {Object} The parsed object\n * @public\n */\nfunction parse(header) {\n  const offers = Object.create(null);\n  let params = Object.create(null);\n  let mustUnescape = false;\n  let isEscaping = false;\n  let inQuotes = false;\n  let extensionName;\n  let paramName;\n  let start = -1;\n  let code = -1;\n  let end = -1;\n  let i = 0;\n\n  for (; i < header.length; i++) {\n    code = header.charCodeAt(i);\n\n    if (extensionName === undefined) {\n      if (end === -1 && tokenChars[code] === 1) {\n        if (start === -1) start = i;\n      } else if (\n        i !== 0 &&\n        (code === 0x20 /* ' ' */ || code === 0x09) /* '\\t' */\n      ) {\n        if (end === -1 && start !== -1) end = i;\n      } else if (code === 0x3b /* ';' */ || code === 0x2c /* ',' */) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n        const name = header.slice(start, end);\n        if (code === 0x2c) {\n          push(offers, name, params);\n          params = Object.create(null);\n        } else {\n          extensionName = name;\n        }\n\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    } else if (paramName === undefined) {\n      if (end === -1 && tokenChars[code] === 1) {\n        if (start === -1) start = i;\n      } else if (code === 0x20 || code === 0x09) {\n        if (end === -1 && start !== -1) end = i;\n      } else if (code === 0x3b || code === 0x2c) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n        push(params, header.slice(start, end), true);\n        if (code === 0x2c) {\n          push(offers, extensionName, params);\n          params = Object.create(null);\n          extensionName = undefined;\n        }\n\n        start = end = -1;\n      } else if (code === 0x3d /* '=' */ && start !== -1 && end === -1) {\n        paramName = header.slice(start, i);\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    } else {\n      //\n      // The value of a quoted-string after unescaping must conform to the\n      // token ABNF, so only token characters are valid.\n      // Ref: https://tools.ietf.org/html/rfc6455#section-9.1\n      //\n      if (isEscaping) {\n        if (tokenChars[code] !== 1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n        if (start === -1) start = i;\n        else if (!mustUnescape) mustUnescape = true;\n        isEscaping = false;\n      } else if (inQuotes) {\n        if (tokenChars[code] === 1) {\n          if (start === -1) start = i;\n        } else if (code === 0x22 /* '\"' */ && start !== -1) {\n          inQuotes = false;\n          end = i;\n        } else if (code === 0x5c /* '\\' */) {\n          isEscaping = true;\n        } else {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n      } else if (code === 0x22 && header.charCodeAt(i - 1) === 0x3d) {\n        inQuotes = true;\n      } else if (end === -1 && tokenChars[code] === 1) {\n        if (start === -1) start = i;\n      } else if (start !== -1 && (code === 0x20 || code === 0x09)) {\n        if (end === -1) end = i;\n      } else if (code === 0x3b || code === 0x2c) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n        let value = header.slice(start, end);\n        if (mustUnescape) {\n          value = value.replace(/\\\\/g, '');\n          mustUnescape = false;\n        }\n        push(params, paramName, value);\n        if (code === 0x2c) {\n          push(offers, extensionName, params);\n          params = Object.create(null);\n          extensionName = undefined;\n        }\n\n        paramName = undefined;\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    }\n  }\n\n  if (start === -1 || inQuotes || code === 0x20 || code === 0x09) {\n    throw new SyntaxError('Unexpected end of input');\n  }\n\n  if (end === -1) end = i;\n  const token = header.slice(start, end);\n  if (extensionName === undefined) {\n    push(offers, token, params);\n  } else {\n    if (paramName === undefined) {\n      push(params, token, true);\n    } else if (mustUnescape) {\n      push(params, paramName, token.replace(/\\\\/g, ''));\n    } else {\n      push(params, paramName, token);\n    }\n    push(offers, extensionName, params);\n  }\n\n  return offers;\n}\n\n/**\n * Builds the `Sec-WebSocket-Extensions` header field value.\n *\n * @param {Object} extensions The map of extensions and parameters to format\n * @return {String} A string representing the given object\n * @public\n */\nfunction format(extensions) {\n  return Object.keys(extensions)\n    .map((extension) => {\n      let configurations = extensions[extension];\n      if (!Array.isArray(configurations)) configurations = [configurations];\n      return configurations\n        .map((params) => {\n          return [extension]\n            .concat(\n              Object.keys(params).map((k) => {\n                let values = params[k];\n                if (!Array.isArray(values)) values = [values];\n                return values\n                  .map((v) => (v === true ? k : `${k}=${v}`))\n                  .join('; ');\n              })\n            )\n            .join('; ');\n        })\n        .join(', ');\n    })\n    .join(', ');\n}\n\nmodule.exports = { format, parse };\n","'use strict';\n\nconst kDone = Symbol('kDone');\nconst kRun = Symbol('kRun');\n\n/**\n * A very simple job queue with adjustable concurrency. Adapted from\n * https://github.com/STRML/async-limiter\n */\nclass Limiter {\n  /**\n   * Creates a new `Limiter`.\n   *\n   * @param {Number} [concurrency=Infinity] The maximum number of jobs allowed\n   *     to run concurrently\n   */\n  constructor(concurrency) {\n    this[kDone] = () => {\n      this.pending--;\n      this[kRun]();\n    };\n    this.concurrency = concurrency || Infinity;\n    this.jobs = [];\n    this.pending = 0;\n  }\n\n  /**\n   * Adds a job to the queue.\n   *\n   * @param {Function} job The job to run\n   * @public\n   */\n  add(job) {\n    this.jobs.push(job);\n    this[kRun]();\n  }\n\n  /**\n   * Removes a job from the queue and runs it if possible.\n   *\n   * @private\n   */\n  [kRun]() {\n    if (this.pending === this.concurrency) return;\n\n    if (this.jobs.length) {\n      const job = this.jobs.shift();\n\n      this.pending++;\n      job(this[kDone]);\n    }\n  }\n}\n\nmodule.exports = Limiter;\n","'use strict';\n\nconst zlib = require('zlib');\n\nconst bufferUtil = require('./buffer-util');\nconst Limiter = require('./limiter');\nconst { kStatusCode } = require('./constants');\n\nconst TRAILER = Buffer.from([0x00, 0x00, 0xff, 0xff]);\nconst kPerMessageDeflate = Symbol('permessage-deflate');\nconst kTotalLength = Symbol('total-length');\nconst kCallback = Symbol('callback');\nconst kBuffers = Symbol('buffers');\nconst kError = Symbol('error');\n\n//\n// We limit zlib concurrency, which prevents severe memory fragmentation\n// as documented in https://github.com/nodejs/node/issues/8871#issuecomment-250915913\n// and https://github.com/websockets/ws/issues/1202\n//\n// Intentionally global; it's the global thread pool that's an issue.\n//\nlet zlibLimiter;\n\n/**\n * permessage-deflate implementation.\n */\nclass PerMessageDeflate {\n  /**\n   * Creates a PerMessageDeflate instance.\n   *\n   * @param {Object} [options] Configuration options\n   * @param {(Boolean|Number)} [options.clientMaxWindowBits] Advertise support\n   *     for, or request, a custom client window size\n   * @param {Boolean} [options.clientNoContextTakeover=false] Advertise/\n   *     acknowledge disabling of client context takeover\n   * @param {Number} [options.concurrencyLimit=10] The number of concurrent\n   *     calls to zlib\n   * @param {(Boolean|Number)} [options.serverMaxWindowBits] Request/confirm the\n   *     use of a custom server window size\n   * @param {Boolean} [options.serverNoContextTakeover=false] Request/accept\n   *     disabling of server context takeover\n   * @param {Number} [options.threshold=1024] Size (in bytes) below which\n   *     messages should not be compressed if context takeover is disabled\n   * @param {Object} [options.zlibDeflateOptions] Options to pass to zlib on\n   *     deflate\n   * @param {Object} [options.zlibInflateOptions] Options to pass to zlib on\n   *     inflate\n   * @param {Boolean} [isServer=false] Create the instance in either server or\n   *     client mode\n   * @param {Number} [maxPayload=0] The maximum allowed message length\n   */\n  constructor(options, isServer, maxPayload) {\n    this._maxPayload = maxPayload | 0;\n    this._options = options || {};\n    this._threshold =\n      this._options.threshold !== undefined ? this._options.threshold : 1024;\n    this._isServer = !!isServer;\n    this._deflate = null;\n    this._inflate = null;\n\n    this.params = null;\n\n    if (!zlibLimiter) {\n      const concurrency =\n        this._options.concurrencyLimit !== undefined\n          ? this._options.concurrencyLimit\n          : 10;\n      zlibLimiter = new Limiter(concurrency);\n    }\n  }\n\n  /**\n   * @type {String}\n   */\n  static get extensionName() {\n    return 'permessage-deflate';\n  }\n\n  /**\n   * Create an extension negotiation offer.\n   *\n   * @return {Object} Extension parameters\n   * @public\n   */\n  offer() {\n    const params = {};\n\n    if (this._options.serverNoContextTakeover) {\n      params.server_no_context_takeover = true;\n    }\n    if (this._options.clientNoContextTakeover) {\n      params.client_no_context_takeover = true;\n    }\n    if (this._options.serverMaxWindowBits) {\n      params.server_max_window_bits = this._options.serverMaxWindowBits;\n    }\n    if (this._options.clientMaxWindowBits) {\n      params.client_max_window_bits = this._options.clientMaxWindowBits;\n    } else if (this._options.clientMaxWindowBits == null) {\n      params.client_max_window_bits = true;\n    }\n\n    return params;\n  }\n\n  /**\n   * Accept an extension negotiation offer/response.\n   *\n   * @param {Array} configurations The extension negotiation offers/reponse\n   * @return {Object} Accepted configuration\n   * @public\n   */\n  accept(configurations) {\n    configurations = this.normalizeParams(configurations);\n\n    this.params = this._isServer\n      ? this.acceptAsServer(configurations)\n      : this.acceptAsClient(configurations);\n\n    return this.params;\n  }\n\n  /**\n   * Releases all resources used by the extension.\n   *\n   * @public\n   */\n  cleanup() {\n    if (this._inflate) {\n      this._inflate.close();\n      this._inflate = null;\n    }\n\n    if (this._deflate) {\n      const callback = this._deflate[kCallback];\n\n      this._deflate.close();\n      this._deflate = null;\n\n      if (callback) {\n        callback(\n          new Error(\n            'The deflate stream was closed while data was being processed'\n          )\n        );\n      }\n    }\n  }\n\n  /**\n   *  Accept an extension negotiation offer.\n   *\n   * @param {Array} offers The extension negotiation offers\n   * @return {Object} Accepted configuration\n   * @private\n   */\n  acceptAsServer(offers) {\n    const opts = this._options;\n    const accepted = offers.find((params) => {\n      if (\n        (opts.serverNoContextTakeover === false &&\n          params.server_no_context_takeover) ||\n        (params.server_max_window_bits &&\n          (opts.serverMaxWindowBits === false ||\n            (typeof opts.serverMaxWindowBits === 'number' &&\n              opts.serverMaxWindowBits > params.server_max_window_bits))) ||\n        (typeof opts.clientMaxWindowBits === 'number' &&\n          !params.client_max_window_bits)\n      ) {\n        return false;\n      }\n\n      return true;\n    });\n\n    if (!accepted) {\n      throw new Error('None of the extension offers can be accepted');\n    }\n\n    if (opts.serverNoContextTakeover) {\n      accepted.server_no_context_takeover = true;\n    }\n    if (opts.clientNoContextTakeover) {\n      accepted.client_no_context_takeover = true;\n    }\n    if (typeof opts.serverMaxWindowBits === 'number') {\n      accepted.server_max_window_bits = opts.serverMaxWindowBits;\n    }\n    if (typeof opts.clientMaxWindowBits === 'number') {\n      accepted.client_max_window_bits = opts.clientMaxWindowBits;\n    } else if (\n      accepted.client_max_window_bits === true ||\n      opts.clientMaxWindowBits === false\n    ) {\n      delete accepted.client_max_window_bits;\n    }\n\n    return accepted;\n  }\n\n  /**\n   * Accept the extension negotiation response.\n   *\n   * @param {Array} response The extension negotiation response\n   * @return {Object} Accepted configuration\n   * @private\n   */\n  acceptAsClient(response) {\n    const params = response[0];\n\n    if (\n      this._options.clientNoContextTakeover === false &&\n      params.client_no_context_takeover\n    ) {\n      throw new Error('Unexpected parameter \"client_no_context_takeover\"');\n    }\n\n    if (!params.client_max_window_bits) {\n      if (typeof this._options.clientMaxWindowBits === 'number') {\n        params.client_max_window_bits = this._options.clientMaxWindowBits;\n      }\n    } else if (\n      this._options.clientMaxWindowBits === false ||\n      (typeof this._options.clientMaxWindowBits === 'number' &&\n        params.client_max_window_bits > this._options.clientMaxWindowBits)\n    ) {\n      throw new Error(\n        'Unexpected or invalid parameter \"client_max_window_bits\"'\n      );\n    }\n\n    return params;\n  }\n\n  /**\n   * Normalize parameters.\n   *\n   * @param {Array} configurations The extension negotiation offers/reponse\n   * @return {Array} The offers/response with normalized parameters\n   * @private\n   */\n  normalizeParams(configurations) {\n    configurations.forEach((params) => {\n      Object.keys(params).forEach((key) => {\n        let value = params[key];\n\n        if (value.length > 1) {\n          throw new Error(`Parameter \"${key}\" must have only a single value`);\n        }\n\n        value = value[0];\n\n        if (key === 'client_max_window_bits') {\n          if (value !== true) {\n            const num = +value;\n            if (!Number.isInteger(num) || num < 8 || num > 15) {\n              throw new TypeError(\n                `Invalid value for parameter \"${key}\": ${value}`\n              );\n            }\n            value = num;\n          } else if (!this._isServer) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n        } else if (key === 'server_max_window_bits') {\n          const num = +value;\n          if (!Number.isInteger(num) || num < 8 || num > 15) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n          value = num;\n        } else if (\n          key === 'client_no_context_takeover' ||\n          key === 'server_no_context_takeover'\n        ) {\n          if (value !== true) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n        } else {\n          throw new Error(`Unknown parameter \"${key}\"`);\n        }\n\n        params[key] = value;\n      });\n    });\n\n    return configurations;\n  }\n\n  /**\n   * Decompress data. Concurrency limited.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @public\n   */\n  decompress(data, fin, callback) {\n    zlibLimiter.add((done) => {\n      this._decompress(data, fin, (err, result) => {\n        done();\n        callback(err, result);\n      });\n    });\n  }\n\n  /**\n   * Compress data. Concurrency limited.\n   *\n   * @param {(Buffer|String)} data Data to compress\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @public\n   */\n  compress(data, fin, callback) {\n    zlibLimiter.add((done) => {\n      this._compress(data, fin, (err, result) => {\n        done();\n        callback(err, result);\n      });\n    });\n  }\n\n  /**\n   * Decompress data.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @private\n   */\n  _decompress(data, fin, callback) {\n    const endpoint = this._isServer ? 'client' : 'server';\n\n    if (!this._inflate) {\n      const key = `${endpoint}_max_window_bits`;\n      const windowBits =\n        typeof this.params[key] !== 'number'\n          ? zlib.Z_DEFAULT_WINDOWBITS\n          : this.params[key];\n\n      this._inflate = zlib.createInflateRaw({\n        ...this._options.zlibInflateOptions,\n        windowBits\n      });\n      this._inflate[kPerMessageDeflate] = this;\n      this._inflate[kTotalLength] = 0;\n      this._inflate[kBuffers] = [];\n      this._inflate.on('error', inflateOnError);\n      this._inflate.on('data', inflateOnData);\n    }\n\n    this._inflate[kCallback] = callback;\n\n    this._inflate.write(data);\n    if (fin) this._inflate.write(TRAILER);\n\n    this._inflate.flush(() => {\n      const err = this._inflate[kError];\n\n      if (err) {\n        this._inflate.close();\n        this._inflate = null;\n        callback(err);\n        return;\n      }\n\n      const data = bufferUtil.concat(\n        this._inflate[kBuffers],\n        this._inflate[kTotalLength]\n      );\n\n      if (this._inflate._readableState.endEmitted) {\n        this._inflate.close();\n        this._inflate = null;\n      } else {\n        this._inflate[kTotalLength] = 0;\n        this._inflate[kBuffers] = [];\n\n        if (fin && this.params[`${endpoint}_no_context_takeover`]) {\n          this._inflate.reset();\n        }\n      }\n\n      callback(null, data);\n    });\n  }\n\n  /**\n   * Compress data.\n   *\n   * @param {(Buffer|String)} data Data to compress\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @private\n   */\n  _compress(data, fin, callback) {\n    const endpoint = this._isServer ? 'server' : 'client';\n\n    if (!this._deflate) {\n      const key = `${endpoint}_max_window_bits`;\n      const windowBits =\n        typeof this.params[key] !== 'number'\n          ? zlib.Z_DEFAULT_WINDOWBITS\n          : this.params[key];\n\n      this._deflate = zlib.createDeflateRaw({\n        ...this._options.zlibDeflateOptions,\n        windowBits\n      });\n\n      this._deflate[kTotalLength] = 0;\n      this._deflate[kBuffers] = [];\n\n      this._deflate.on('data', deflateOnData);\n    }\n\n    this._deflate[kCallback] = callback;\n\n    this._deflate.write(data);\n    this._deflate.flush(zlib.Z_SYNC_FLUSH, () => {\n      if (!this._deflate) {\n        //\n        // The deflate stream was closed while data was being processed.\n        //\n        return;\n      }\n\n      let data = bufferUtil.concat(\n        this._deflate[kBuffers],\n        this._deflate[kTotalLength]\n      );\n\n      if (fin) data = data.slice(0, data.length - 4);\n\n      //\n      // Ensure that the callback will not be called again in\n      // `PerMessageDeflate#cleanup()`.\n      //\n      this._deflate[kCallback] = null;\n\n      this._deflate[kTotalLength] = 0;\n      this._deflate[kBuffers] = [];\n\n      if (fin && this.params[`${endpoint}_no_context_takeover`]) {\n        this._deflate.reset();\n      }\n\n      callback(null, data);\n    });\n  }\n}\n\nmodule.exports = PerMessageDeflate;\n\n/**\n * The listener of the `zlib.DeflateRaw` stream `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction deflateOnData(chunk) {\n  this[kBuffers].push(chunk);\n  this[kTotalLength] += chunk.length;\n}\n\n/**\n * The listener of the `zlib.InflateRaw` stream `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction inflateOnData(chunk) {\n  this[kTotalLength] += chunk.length;\n\n  if (\n    this[kPerMessageDeflate]._maxPayload < 1 ||\n    this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload\n  ) {\n    this[kBuffers].push(chunk);\n    return;\n  }\n\n  this[kError] = new RangeError('Max payload size exceeded');\n  this[kError].code = 'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH';\n  this[kError][kStatusCode] = 1009;\n  this.removeListener('data', inflateOnData);\n  this.reset();\n}\n\n/**\n * The listener of the `zlib.InflateRaw` stream `'error'` event.\n *\n * @param {Error} err The emitted error\n * @private\n */\nfunction inflateOnError(err) {\n  //\n  // There is no need to call `Zlib#close()` as the handle is automatically\n  // closed when an error is emitted.\n  //\n  this[kPerMessageDeflate]._inflate = null;\n  err[kStatusCode] = 1007;\n  this[kCallback](err);\n}\n","'use strict';\n\nconst { Writable } = require('stream');\n\nconst PerMessageDeflate = require('./permessage-deflate');\nconst {\n  BINARY_TYPES,\n  EMPTY_BUFFER,\n  kStatusCode,\n  kWebSocket\n} = require('./constants');\nconst { concat, toArrayBuffer, unmask } = require('./buffer-util');\nconst { isValidStatusCode, isValidUTF8 } = require('./validation');\n\nconst GET_INFO = 0;\nconst GET_PAYLOAD_LENGTH_16 = 1;\nconst GET_PAYLOAD_LENGTH_64 = 2;\nconst GET_MASK = 3;\nconst GET_DATA = 4;\nconst INFLATING = 5;\n\n/**\n * HyBi Receiver implementation.\n *\n * @extends Writable\n */\nclass Receiver extends Writable {\n  /**\n   * Creates a Receiver instance.\n   *\n   * @param {Object} [options] Options object\n   * @param {String} [options.binaryType=nodebuffer] The type for binary data\n   * @param {Object} [options.extensions] An object containing the negotiated\n   *     extensions\n   * @param {Boolean} [options.isServer=false] Specifies whether to operate in\n   *     client or server mode\n   * @param {Number} [options.maxPayload=0] The maximum allowed message length\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n   *     not to skip UTF-8 validation for text and close messages\n   */\n  constructor(options = {}) {\n    super();\n\n    this._binaryType = options.binaryType || BINARY_TYPES[0];\n    this._extensions = options.extensions || {};\n    this._isServer = !!options.isServer;\n    this._maxPayload = options.maxPayload | 0;\n    this._skipUTF8Validation = !!options.skipUTF8Validation;\n    this[kWebSocket] = undefined;\n\n    this._bufferedBytes = 0;\n    this._buffers = [];\n\n    this._compressed = false;\n    this._payloadLength = 0;\n    this._mask = undefined;\n    this._fragmented = 0;\n    this._masked = false;\n    this._fin = false;\n    this._opcode = 0;\n\n    this._totalPayloadLength = 0;\n    this._messageLength = 0;\n    this._fragments = [];\n\n    this._state = GET_INFO;\n    this._loop = false;\n  }\n\n  /**\n   * Implements `Writable.prototype._write()`.\n   *\n   * @param {Buffer} chunk The chunk of data to write\n   * @param {String} encoding The character encoding of `chunk`\n   * @param {Function} cb Callback\n   * @private\n   */\n  _write(chunk, encoding, cb) {\n    if (this._opcode === 0x08 && this._state == GET_INFO) return cb();\n\n    this._bufferedBytes += chunk.length;\n    this._buffers.push(chunk);\n    this.startLoop(cb);\n  }\n\n  /**\n   * Consumes `n` bytes from the buffered data.\n   *\n   * @param {Number} n The number of bytes to consume\n   * @return {Buffer} The consumed bytes\n   * @private\n   */\n  consume(n) {\n    this._bufferedBytes -= n;\n\n    if (n === this._buffers[0].length) return this._buffers.shift();\n\n    if (n < this._buffers[0].length) {\n      const buf = this._buffers[0];\n      this._buffers[0] = buf.slice(n);\n      return buf.slice(0, n);\n    }\n\n    const dst = Buffer.allocUnsafe(n);\n\n    do {\n      const buf = this._buffers[0];\n      const offset = dst.length - n;\n\n      if (n >= buf.length) {\n        dst.set(this._buffers.shift(), offset);\n      } else {\n        dst.set(new Uint8Array(buf.buffer, buf.byteOffset, n), offset);\n        this._buffers[0] = buf.slice(n);\n      }\n\n      n -= buf.length;\n    } while (n > 0);\n\n    return dst;\n  }\n\n  /**\n   * Starts the parsing loop.\n   *\n   * @param {Function} cb Callback\n   * @private\n   */\n  startLoop(cb) {\n    let err;\n    this._loop = true;\n\n    do {\n      switch (this._state) {\n        case GET_INFO:\n          err = this.getInfo();\n          break;\n        case GET_PAYLOAD_LENGTH_16:\n          err = this.getPayloadLength16();\n          break;\n        case GET_PAYLOAD_LENGTH_64:\n          err = this.getPayloadLength64();\n          break;\n        case GET_MASK:\n          this.getMask();\n          break;\n        case GET_DATA:\n          err = this.getData(cb);\n          break;\n        default:\n          // `INFLATING`\n          this._loop = false;\n          return;\n      }\n    } while (this._loop);\n\n    cb(err);\n  }\n\n  /**\n   * Reads the first two bytes of a frame.\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */\n  getInfo() {\n    if (this._bufferedBytes < 2) {\n      this._loop = false;\n      return;\n    }\n\n    const buf = this.consume(2);\n\n    if ((buf[0] & 0x30) !== 0x00) {\n      this._loop = false;\n      return error(\n        RangeError,\n        'RSV2 and RSV3 must be clear',\n        true,\n        1002,\n        'WS_ERR_UNEXPECTED_RSV_2_3'\n      );\n    }\n\n    const compressed = (buf[0] & 0x40) === 0x40;\n\n    if (compressed && !this._extensions[PerMessageDeflate.extensionName]) {\n      this._loop = false;\n      return error(\n        RangeError,\n        'RSV1 must be clear',\n        true,\n        1002,\n        'WS_ERR_UNEXPECTED_RSV_1'\n      );\n    }\n\n    this._fin = (buf[0] & 0x80) === 0x80;\n    this._opcode = buf[0] & 0x0f;\n    this._payloadLength = buf[1] & 0x7f;\n\n    if (this._opcode === 0x00) {\n      if (compressed) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'RSV1 must be clear',\n          true,\n          1002,\n          'WS_ERR_UNEXPECTED_RSV_1'\n        );\n      }\n\n      if (!this._fragmented) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'invalid opcode 0',\n          true,\n          1002,\n          'WS_ERR_INVALID_OPCODE'\n        );\n      }\n\n      this._opcode = this._fragmented;\n    } else if (this._opcode === 0x01 || this._opcode === 0x02) {\n      if (this._fragmented) {\n        this._loop = false;\n        return error(\n          RangeError,\n          `invalid opcode ${this._opcode}`,\n          true,\n          1002,\n          'WS_ERR_INVALID_OPCODE'\n        );\n      }\n\n      this._compressed = compressed;\n    } else if (this._opcode > 0x07 && this._opcode < 0x0b) {\n      if (!this._fin) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'FIN must be set',\n          true,\n          1002,\n          'WS_ERR_EXPECTED_FIN'\n        );\n      }\n\n      if (compressed) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'RSV1 must be clear',\n          true,\n          1002,\n          'WS_ERR_UNEXPECTED_RSV_1'\n        );\n      }\n\n      if (this._payloadLength > 0x7d) {\n        this._loop = false;\n        return error(\n          RangeError,\n          `invalid payload length ${this._payloadLength}`,\n          true,\n          1002,\n          'WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH'\n        );\n      }\n    } else {\n      this._loop = false;\n      return error(\n        RangeError,\n        `invalid opcode ${this._opcode}`,\n        true,\n        1002,\n        'WS_ERR_INVALID_OPCODE'\n      );\n    }\n\n    if (!this._fin && !this._fragmented) this._fragmented = this._opcode;\n    this._masked = (buf[1] & 0x80) === 0x80;\n\n    if (this._isServer) {\n      if (!this._masked) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'MASK must be set',\n          true,\n          1002,\n          'WS_ERR_EXPECTED_MASK'\n        );\n      }\n    } else if (this._masked) {\n      this._loop = false;\n      return error(\n        RangeError,\n        'MASK must be clear',\n        true,\n        1002,\n        'WS_ERR_UNEXPECTED_MASK'\n      );\n    }\n\n    if (this._payloadLength === 126) this._state = GET_PAYLOAD_LENGTH_16;\n    else if (this._payloadLength === 127) this._state = GET_PAYLOAD_LENGTH_64;\n    else return this.haveLength();\n  }\n\n  /**\n   * Gets extended payload length (7+16).\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */\n  getPayloadLength16() {\n    if (this._bufferedBytes < 2) {\n      this._loop = false;\n      return;\n    }\n\n    this._payloadLength = this.consume(2).readUInt16BE(0);\n    return this.haveLength();\n  }\n\n  /**\n   * Gets extended payload length (7+64).\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */\n  getPayloadLength64() {\n    if (this._bufferedBytes < 8) {\n      this._loop = false;\n      return;\n    }\n\n    const buf = this.consume(8);\n    const num = buf.readUInt32BE(0);\n\n    //\n    // The maximum safe integer in JavaScript is 2^53 - 1. An error is returned\n    // if payload length is greater than this number.\n    //\n    if (num > Math.pow(2, 53 - 32) - 1) {\n      this._loop = false;\n      return error(\n        RangeError,\n        'Unsupported WebSocket frame: payload length > 2^53 - 1',\n        false,\n        1009,\n        'WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH'\n      );\n    }\n\n    this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4);\n    return this.haveLength();\n  }\n\n  /**\n   * Payload length has been read.\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */\n  haveLength() {\n    if (this._payloadLength && this._opcode < 0x08) {\n      this._totalPayloadLength += this._payloadLength;\n      if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'Max payload size exceeded',\n          false,\n          1009,\n          'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'\n        );\n      }\n    }\n\n    if (this._masked) this._state = GET_MASK;\n    else this._state = GET_DATA;\n  }\n\n  /**\n   * Reads mask bytes.\n   *\n   * @private\n   */\n  getMask() {\n    if (this._bufferedBytes < 4) {\n      this._loop = false;\n      return;\n    }\n\n    this._mask = this.consume(4);\n    this._state = GET_DATA;\n  }\n\n  /**\n   * Reads data bytes.\n   *\n   * @param {Function} cb Callback\n   * @return {(Error|RangeError|undefined)} A possible error\n   * @private\n   */\n  getData(cb) {\n    let data = EMPTY_BUFFER;\n\n    if (this._payloadLength) {\n      if (this._bufferedBytes < this._payloadLength) {\n        this._loop = false;\n        return;\n      }\n\n      data = this.consume(this._payloadLength);\n\n      if (\n        this._masked &&\n        (this._mask[0] | this._mask[1] | this._mask[2] | this._mask[3]) !== 0\n      ) {\n        unmask(data, this._mask);\n      }\n    }\n\n    if (this._opcode > 0x07) return this.controlMessage(data);\n\n    if (this._compressed) {\n      this._state = INFLATING;\n      this.decompress(data, cb);\n      return;\n    }\n\n    if (data.length) {\n      //\n      // This message is not compressed so its length is the sum of the payload\n      // length of all fragments.\n      //\n      this._messageLength = this._totalPayloadLength;\n      this._fragments.push(data);\n    }\n\n    return this.dataMessage();\n  }\n\n  /**\n   * Decompresses data.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Function} cb Callback\n   * @private\n   */\n  decompress(data, cb) {\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n\n    perMessageDeflate.decompress(data, this._fin, (err, buf) => {\n      if (err) return cb(err);\n\n      if (buf.length) {\n        this._messageLength += buf.length;\n        if (this._messageLength > this._maxPayload && this._maxPayload > 0) {\n          return cb(\n            error(\n              RangeError,\n              'Max payload size exceeded',\n              false,\n              1009,\n              'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'\n            )\n          );\n        }\n\n        this._fragments.push(buf);\n      }\n\n      const er = this.dataMessage();\n      if (er) return cb(er);\n\n      this.startLoop(cb);\n    });\n  }\n\n  /**\n   * Handles a data message.\n   *\n   * @return {(Error|undefined)} A possible error\n   * @private\n   */\n  dataMessage() {\n    if (this._fin) {\n      const messageLength = this._messageLength;\n      const fragments = this._fragments;\n\n      this._totalPayloadLength = 0;\n      this._messageLength = 0;\n      this._fragmented = 0;\n      this._fragments = [];\n\n      if (this._opcode === 2) {\n        let data;\n\n        if (this._binaryType === 'nodebuffer') {\n          data = concat(fragments, messageLength);\n        } else if (this._binaryType === 'arraybuffer') {\n          data = toArrayBuffer(concat(fragments, messageLength));\n        } else {\n          data = fragments;\n        }\n\n        this.emit('message', data, true);\n      } else {\n        const buf = concat(fragments, messageLength);\n\n        if (!this._skipUTF8Validation && !isValidUTF8(buf)) {\n          this._loop = false;\n          return error(\n            Error,\n            'invalid UTF-8 sequence',\n            true,\n            1007,\n            'WS_ERR_INVALID_UTF8'\n          );\n        }\n\n        this.emit('message', buf, false);\n      }\n    }\n\n    this._state = GET_INFO;\n  }\n\n  /**\n   * Handles a control message.\n   *\n   * @param {Buffer} data Data to handle\n   * @return {(Error|RangeError|undefined)} A possible error\n   * @private\n   */\n  controlMessage(data) {\n    if (this._opcode === 0x08) {\n      this._loop = false;\n\n      if (data.length === 0) {\n        this.emit('conclude', 1005, EMPTY_BUFFER);\n        this.end();\n      } else if (data.length === 1) {\n        return error(\n          RangeError,\n          'invalid payload length 1',\n          true,\n          1002,\n          'WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH'\n        );\n      } else {\n        const code = data.readUInt16BE(0);\n\n        if (!isValidStatusCode(code)) {\n          return error(\n            RangeError,\n            `invalid status code ${code}`,\n            true,\n            1002,\n            'WS_ERR_INVALID_CLOSE_CODE'\n          );\n        }\n\n        const buf = data.slice(2);\n\n        if (!this._skipUTF8Validation && !isValidUTF8(buf)) {\n          return error(\n            Error,\n            'invalid UTF-8 sequence',\n            true,\n            1007,\n            'WS_ERR_INVALID_UTF8'\n          );\n        }\n\n        this.emit('conclude', code, buf);\n        this.end();\n      }\n    } else if (this._opcode === 0x09) {\n      this.emit('ping', data);\n    } else {\n      this.emit('pong', data);\n    }\n\n    this._state = GET_INFO;\n  }\n}\n\nmodule.exports = Receiver;\n\n/**\n * Builds an error object.\n *\n * @param {function(new:Error|RangeError)} ErrorCtor The error constructor\n * @param {String} message The error message\n * @param {Boolean} prefix Specifies whether or not to add a default prefix to\n *     `message`\n * @param {Number} statusCode The status code\n * @param {String} errorCode The exposed error code\n * @return {(Error|RangeError)} The error\n * @private\n */\nfunction error(ErrorCtor, message, prefix, statusCode, errorCode) {\n  const err = new ErrorCtor(\n    prefix ? `Invalid WebSocket frame: ${message}` : message\n  );\n\n  Error.captureStackTrace(err, error);\n  err.code = errorCode;\n  err[kStatusCode] = statusCode;\n  return err;\n}\n","/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^net|tls$\" }] */\n\n'use strict';\n\nconst net = require('net');\nconst tls = require('tls');\nconst { randomFillSync } = require('crypto');\n\nconst PerMessageDeflate = require('./permessage-deflate');\nconst { EMPTY_BUFFER } = require('./constants');\nconst { isValidStatusCode } = require('./validation');\nconst { mask: applyMask, toBuffer } = require('./buffer-util');\n\nconst kByteLength = Symbol('kByteLength');\nconst maskBuffer = Buffer.alloc(4);\n\n/**\n * HyBi Sender implementation.\n */\nclass Sender {\n  /**\n   * Creates a Sender instance.\n   *\n   * @param {(net.Socket|tls.Socket)} socket The connection socket\n   * @param {Object} [extensions] An object containing the negotiated extensions\n   * @param {Function} [generateMask] The function used to generate the masking\n   *     key\n   */\n  constructor(socket, extensions, generateMask) {\n    this._extensions = extensions || {};\n\n    if (generateMask) {\n      this._generateMask = generateMask;\n      this._maskBuffer = Buffer.alloc(4);\n    }\n\n    this._socket = socket;\n\n    this._firstFragment = true;\n    this._compress = false;\n\n    this._bufferedBytes = 0;\n    this._deflating = false;\n    this._queue = [];\n  }\n\n  /**\n   * Frames a piece of data according to the HyBi WebSocket protocol.\n   *\n   * @param {(Buffer|String)} data The data to frame\n   * @param {Object} options Options object\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n   *     FIN bit\n   * @param {Function} [options.generateMask] The function used to generate the\n   *     masking key\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking\n   *     key\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n   *     modified\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n   *     RSV1 bit\n   * @return {(Buffer|String)[]} The framed data\n   * @public\n   */\n  static frame(data, options) {\n    let mask;\n    let merge = false;\n    let offset = 2;\n    let skipMasking = false;\n\n    if (options.mask) {\n      mask = options.maskBuffer || maskBuffer;\n\n      if (options.generateMask) {\n        options.generateMask(mask);\n      } else {\n        randomFillSync(mask, 0, 4);\n      }\n\n      skipMasking = (mask[0] | mask[1] | mask[2] | mask[3]) === 0;\n      offset = 6;\n    }\n\n    let dataLength;\n\n    if (typeof data === 'string') {\n      if (\n        (!options.mask || skipMasking) &&\n        options[kByteLength] !== undefined\n      ) {\n        dataLength = options[kByteLength];\n      } else {\n        data = Buffer.from(data);\n        dataLength = data.length;\n      }\n    } else {\n      dataLength = data.length;\n      merge = options.mask && options.readOnly && !skipMasking;\n    }\n\n    let payloadLength = dataLength;\n\n    if (dataLength >= 65536) {\n      offset += 8;\n      payloadLength = 127;\n    } else if (dataLength > 125) {\n      offset += 2;\n      payloadLength = 126;\n    }\n\n    const target = Buffer.allocUnsafe(merge ? dataLength + offset : offset);\n\n    target[0] = options.fin ? options.opcode | 0x80 : options.opcode;\n    if (options.rsv1) target[0] |= 0x40;\n\n    target[1] = payloadLength;\n\n    if (payloadLength === 126) {\n      target.writeUInt16BE(dataLength, 2);\n    } else if (payloadLength === 127) {\n      target[2] = target[3] = 0;\n      target.writeUIntBE(dataLength, 4, 6);\n    }\n\n    if (!options.mask) return [target, data];\n\n    target[1] |= 0x80;\n    target[offset - 4] = mask[0];\n    target[offset - 3] = mask[1];\n    target[offset - 2] = mask[2];\n    target[offset - 1] = mask[3];\n\n    if (skipMasking) return [target, data];\n\n    if (merge) {\n      applyMask(data, mask, target, offset, dataLength);\n      return [target];\n    }\n\n    applyMask(data, mask, data, 0, dataLength);\n    return [target, data];\n  }\n\n  /**\n   * Sends a close message to the other peer.\n   *\n   * @param {Number} [code] The status code component of the body\n   * @param {(String|Buffer)} [data] The message component of the body\n   * @param {Boolean} [mask=false] Specifies whether or not to mask the message\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  close(code, data, mask, cb) {\n    let buf;\n\n    if (code === undefined) {\n      buf = EMPTY_BUFFER;\n    } else if (typeof code !== 'number' || !isValidStatusCode(code)) {\n      throw new TypeError('First argument must be a valid error code number');\n    } else if (data === undefined || !data.length) {\n      buf = Buffer.allocUnsafe(2);\n      buf.writeUInt16BE(code, 0);\n    } else {\n      const length = Buffer.byteLength(data);\n\n      if (length > 123) {\n        throw new RangeError('The message must not be greater than 123 bytes');\n      }\n\n      buf = Buffer.allocUnsafe(2 + length);\n      buf.writeUInt16BE(code, 0);\n\n      if (typeof data === 'string') {\n        buf.write(data, 2);\n      } else {\n        buf.set(data, 2);\n      }\n    }\n\n    const options = {\n      [kByteLength]: buf.length,\n      fin: true,\n      generateMask: this._generateMask,\n      mask,\n      maskBuffer: this._maskBuffer,\n      opcode: 0x08,\n      readOnly: false,\n      rsv1: false\n    };\n\n    if (this._deflating) {\n      this.enqueue([this.dispatch, buf, false, options, cb]);\n    } else {\n      this.sendFrame(Sender.frame(buf, options), cb);\n    }\n  }\n\n  /**\n   * Sends a ping message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  ping(data, mask, cb) {\n    let byteLength;\n    let readOnly;\n\n    if (typeof data === 'string') {\n      byteLength = Buffer.byteLength(data);\n      readOnly = false;\n    } else {\n      data = toBuffer(data);\n      byteLength = data.length;\n      readOnly = toBuffer.readOnly;\n    }\n\n    if (byteLength > 125) {\n      throw new RangeError('The data size must not be greater than 125 bytes');\n    }\n\n    const options = {\n      [kByteLength]: byteLength,\n      fin: true,\n      generateMask: this._generateMask,\n      mask,\n      maskBuffer: this._maskBuffer,\n      opcode: 0x09,\n      readOnly,\n      rsv1: false\n    };\n\n    if (this._deflating) {\n      this.enqueue([this.dispatch, data, false, options, cb]);\n    } else {\n      this.sendFrame(Sender.frame(data, options), cb);\n    }\n  }\n\n  /**\n   * Sends a pong message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  pong(data, mask, cb) {\n    let byteLength;\n    let readOnly;\n\n    if (typeof data === 'string') {\n      byteLength = Buffer.byteLength(data);\n      readOnly = false;\n    } else {\n      data = toBuffer(data);\n      byteLength = data.length;\n      readOnly = toBuffer.readOnly;\n    }\n\n    if (byteLength > 125) {\n      throw new RangeError('The data size must not be greater than 125 bytes');\n    }\n\n    const options = {\n      [kByteLength]: byteLength,\n      fin: true,\n      generateMask: this._generateMask,\n      mask,\n      maskBuffer: this._maskBuffer,\n      opcode: 0x0a,\n      readOnly,\n      rsv1: false\n    };\n\n    if (this._deflating) {\n      this.enqueue([this.dispatch, data, false, options, cb]);\n    } else {\n      this.sendFrame(Sender.frame(data, options), cb);\n    }\n  }\n\n  /**\n   * Sends a data message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Object} options Options object\n   * @param {Boolean} [options.binary=false] Specifies whether `data` is binary\n   *     or text\n   * @param {Boolean} [options.compress=false] Specifies whether or not to\n   *     compress `data`\n   * @param {Boolean} [options.fin=false] Specifies whether the fragment is the\n   *     last one\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  send(data, options, cb) {\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n    let opcode = options.binary ? 2 : 1;\n    let rsv1 = options.compress;\n\n    let byteLength;\n    let readOnly;\n\n    if (typeof data === 'string') {\n      byteLength = Buffer.byteLength(data);\n      readOnly = false;\n    } else {\n      data = toBuffer(data);\n      byteLength = data.length;\n      readOnly = toBuffer.readOnly;\n    }\n\n    if (this._firstFragment) {\n      this._firstFragment = false;\n      if (\n        rsv1 &&\n        perMessageDeflate &&\n        perMessageDeflate.params[\n          perMessageDeflate._isServer\n            ? 'server_no_context_takeover'\n            : 'client_no_context_takeover'\n        ]\n      ) {\n        rsv1 = byteLength >= perMessageDeflate._threshold;\n      }\n      this._compress = rsv1;\n    } else {\n      rsv1 = false;\n      opcode = 0;\n    }\n\n    if (options.fin) this._firstFragment = true;\n\n    if (perMessageDeflate) {\n      const opts = {\n        [kByteLength]: byteLength,\n        fin: options.fin,\n        generateMask: this._generateMask,\n        mask: options.mask,\n        maskBuffer: this._maskBuffer,\n        opcode,\n        readOnly,\n        rsv1\n      };\n\n      if (this._deflating) {\n        this.enqueue([this.dispatch, data, this._compress, opts, cb]);\n      } else {\n        this.dispatch(data, this._compress, opts, cb);\n      }\n    } else {\n      this.sendFrame(\n        Sender.frame(data, {\n          [kByteLength]: byteLength,\n          fin: options.fin,\n          generateMask: this._generateMask,\n          mask: options.mask,\n          maskBuffer: this._maskBuffer,\n          opcode,\n          readOnly,\n          rsv1: false\n        }),\n        cb\n      );\n    }\n  }\n\n  /**\n   * Dispatches a message.\n   *\n   * @param {(Buffer|String)} data The message to send\n   * @param {Boolean} [compress=false] Specifies whether or not to compress\n   *     `data`\n   * @param {Object} options Options object\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n   *     FIN bit\n   * @param {Function} [options.generateMask] The function used to generate the\n   *     masking key\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking\n   *     key\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n   *     modified\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n   *     RSV1 bit\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  dispatch(data, compress, options, cb) {\n    if (!compress) {\n      this.sendFrame(Sender.frame(data, options), cb);\n      return;\n    }\n\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n\n    this._bufferedBytes += options[kByteLength];\n    this._deflating = true;\n    perMessageDeflate.compress(data, options.fin, (_, buf) => {\n      if (this._socket.destroyed) {\n        const err = new Error(\n          'The socket was closed while data was being compressed'\n        );\n\n        if (typeof cb === 'function') cb(err);\n\n        for (let i = 0; i < this._queue.length; i++) {\n          const params = this._queue[i];\n          const callback = params[params.length - 1];\n\n          if (typeof callback === 'function') callback(err);\n        }\n\n        return;\n      }\n\n      this._bufferedBytes -= options[kByteLength];\n      this._deflating = false;\n      options.readOnly = false;\n      this.sendFrame(Sender.frame(buf, options), cb);\n      this.dequeue();\n    });\n  }\n\n  /**\n   * Executes queued send operations.\n   *\n   * @private\n   */\n  dequeue() {\n    while (!this._deflating && this._queue.length) {\n      const params = this._queue.shift();\n\n      this._bufferedBytes -= params[3][kByteLength];\n      Reflect.apply(params[0], this, params.slice(1));\n    }\n  }\n\n  /**\n   * Enqueues a send operation.\n   *\n   * @param {Array} params Send operation parameters.\n   * @private\n   */\n  enqueue(params) {\n    this._bufferedBytes += params[3][kByteLength];\n    this._queue.push(params);\n  }\n\n  /**\n   * Sends a frame.\n   *\n   * @param {Buffer[]} list The frame to send\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  sendFrame(list, cb) {\n    if (list.length === 2) {\n      this._socket.cork();\n      this._socket.write(list[0]);\n      this._socket.write(list[1], cb);\n      this._socket.uncork();\n    } else {\n      this._socket.write(list[0], cb);\n    }\n  }\n}\n\nmodule.exports = Sender;\n","'use strict';\n\nconst { Duplex } = require('stream');\n\n/**\n * Emits the `'close'` event on a stream.\n *\n * @param {Duplex} stream The stream.\n * @private\n */\nfunction emitClose(stream) {\n  stream.emit('close');\n}\n\n/**\n * The listener of the `'end'` event.\n *\n * @private\n */\nfunction duplexOnEnd() {\n  if (!this.destroyed && this._writableState.finished) {\n    this.destroy();\n  }\n}\n\n/**\n * The listener of the `'error'` event.\n *\n * @param {Error} err The error\n * @private\n */\nfunction duplexOnError(err) {\n  this.removeListener('error', duplexOnError);\n  this.destroy();\n  if (this.listenerCount('error') === 0) {\n    // Do not suppress the throwing behavior.\n    this.emit('error', err);\n  }\n}\n\n/**\n * Wraps a `WebSocket` in a duplex stream.\n *\n * @param {WebSocket} ws The `WebSocket` to wrap\n * @param {Object} [options] The options for the `Duplex` constructor\n * @return {Duplex} The duplex stream\n * @public\n */\nfunction createWebSocketStream(ws, options) {\n  let terminateOnDestroy = true;\n\n  const duplex = new Duplex({\n    ...options,\n    autoDestroy: false,\n    emitClose: false,\n    objectMode: false,\n    writableObjectMode: false\n  });\n\n  ws.on('message', function message(msg, isBinary) {\n    const data =\n      !isBinary && duplex._readableState.objectMode ? msg.toString() : msg;\n\n    if (!duplex.push(data)) ws.pause();\n  });\n\n  ws.once('error', function error(err) {\n    if (duplex.destroyed) return;\n\n    // Prevent `ws.terminate()` from being called by `duplex._destroy()`.\n    //\n    // - If the `'error'` event is emitted before the `'open'` event, then\n    //   `ws.terminate()` is a noop as no socket is assigned.\n    // - Otherwise, the error is re-emitted by the listener of the `'error'`\n    //   event of the `Receiver` object. The listener already closes the\n    //   connection by calling `ws.close()`. This allows a close frame to be\n    //   sent to the other peer. If `ws.terminate()` is called right after this,\n    //   then the close frame might not be sent.\n    terminateOnDestroy = false;\n    duplex.destroy(err);\n  });\n\n  ws.once('close', function close() {\n    if (duplex.destroyed) return;\n\n    duplex.push(null);\n  });\n\n  duplex._destroy = function (err, callback) {\n    if (ws.readyState === ws.CLOSED) {\n      callback(err);\n      process.nextTick(emitClose, duplex);\n      return;\n    }\n\n    let called = false;\n\n    ws.once('error', function error(err) {\n      called = true;\n      callback(err);\n    });\n\n    ws.once('close', function close() {\n      if (!called) callback(err);\n      process.nextTick(emitClose, duplex);\n    });\n\n    if (terminateOnDestroy) ws.terminate();\n  };\n\n  duplex._final = function (callback) {\n    if (ws.readyState === ws.CONNECTING) {\n      ws.once('open', function open() {\n        duplex._final(callback);\n      });\n      return;\n    }\n\n    // If the value of the `_socket` property is `null` it means that `ws` is a\n    // client websocket and the handshake failed. In fact, when this happens, a\n    // socket is never assigned to the websocket. Wait for the `'error'` event\n    // that will be emitted by the websocket.\n    if (ws._socket === null) return;\n\n    if (ws._socket._writableState.finished) {\n      callback();\n      if (duplex._readableState.endEmitted) duplex.destroy();\n    } else {\n      ws._socket.once('finish', function finish() {\n        // `duplex` is not destroyed here because the `'end'` event will be\n        // emitted on `duplex` after this `'finish'` event. The EOF signaling\n        // `null` chunk is, in fact, pushed when the websocket emits `'close'`.\n        callback();\n      });\n      ws.close();\n    }\n  };\n\n  duplex._read = function () {\n    if (ws.isPaused) ws.resume();\n  };\n\n  duplex._write = function (chunk, encoding, callback) {\n    if (ws.readyState === ws.CONNECTING) {\n      ws.once('open', function open() {\n        duplex._write(chunk, encoding, callback);\n      });\n      return;\n    }\n\n    ws.send(chunk, callback);\n  };\n\n  duplex.on('end', duplexOnEnd);\n  duplex.on('error', duplexOnError);\n  return duplex;\n}\n\nmodule.exports = createWebSocketStream;\n","'use strict';\n\nconst { tokenChars } = require('./validation');\n\n/**\n * Parses the `Sec-WebSocket-Protocol` header into a set of subprotocol names.\n *\n * @param {String} header The field value of the header\n * @return {Set} The subprotocol names\n * @public\n */\nfunction parse(header) {\n  const protocols = new Set();\n  let start = -1;\n  let end = -1;\n  let i = 0;\n\n  for (i; i < header.length; i++) {\n    const code = header.charCodeAt(i);\n\n    if (end === -1 && tokenChars[code] === 1) {\n      if (start === -1) start = i;\n    } else if (\n      i !== 0 &&\n      (code === 0x20 /* ' ' */ || code === 0x09) /* '\\t' */\n    ) {\n      if (end === -1 && start !== -1) end = i;\n    } else if (code === 0x2c /* ',' */) {\n      if (start === -1) {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n\n      if (end === -1) end = i;\n\n      const protocol = header.slice(start, end);\n\n      if (protocols.has(protocol)) {\n        throw new SyntaxError(`The \"${protocol}\" subprotocol is duplicated`);\n      }\n\n      protocols.add(protocol);\n      start = end = -1;\n    } else {\n      throw new SyntaxError(`Unexpected character at index ${i}`);\n    }\n  }\n\n  if (start === -1 || end !== -1) {\n    throw new SyntaxError('Unexpected end of input');\n  }\n\n  const protocol = header.slice(start, i);\n\n  if (protocols.has(protocol)) {\n    throw new SyntaxError(`The \"${protocol}\" subprotocol is duplicated`);\n  }\n\n  protocols.add(protocol);\n  return protocols;\n}\n\nmodule.exports = { parse };\n","'use strict';\n\n//\n// Allowed token characters:\n//\n// '!', '#', '$', '%', '&', ''', '*', '+', '-',\n// '.', 0-9, A-Z, '^', '_', '`', a-z, '|', '~'\n//\n// tokenChars[32] === 0 // ' '\n// tokenChars[33] === 1 // '!'\n// tokenChars[34] === 0 // '\"'\n// ...\n//\n// prettier-ignore\nconst tokenChars = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0 - 15\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16 - 31\n  0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, // 32 - 47\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 48 - 63\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 64 - 79\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, // 80 - 95\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 96 - 111\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0 // 112 - 127\n];\n\n/**\n * Checks if a status code is allowed in a close frame.\n *\n * @param {Number} code The status code\n * @return {Boolean} `true` if the status code is valid, else `false`\n * @public\n */\nfunction isValidStatusCode(code) {\n  return (\n    (code >= 1000 &&\n      code <= 1014 &&\n      code !== 1004 &&\n      code !== 1005 &&\n      code !== 1006) ||\n    (code >= 3000 && code <= 4999)\n  );\n}\n\n/**\n * Checks if a given buffer contains only correct UTF-8.\n * Ported from https://www.cl.cam.ac.uk/%7Emgk25/ucs/utf8_check.c by\n * Markus Kuhn.\n *\n * @param {Buffer} buf The buffer to check\n * @return {Boolean} `true` if `buf` contains only correct UTF-8, else `false`\n * @public\n */\nfunction _isValidUTF8(buf) {\n  const len = buf.length;\n  let i = 0;\n\n  while (i < len) {\n    if ((buf[i] & 0x80) === 0) {\n      // 0xxxxxxx\n      i++;\n    } else if ((buf[i] & 0xe0) === 0xc0) {\n      // 110xxxxx 10xxxxxx\n      if (\n        i + 1 === len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i] & 0xfe) === 0xc0 // Overlong\n      ) {\n        return false;\n      }\n\n      i += 2;\n    } else if ((buf[i] & 0xf0) === 0xe0) {\n      // 1110xxxx 10xxxxxx 10xxxxxx\n      if (\n        i + 2 >= len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i + 2] & 0xc0) !== 0x80 ||\n        (buf[i] === 0xe0 && (buf[i + 1] & 0xe0) === 0x80) || // Overlong\n        (buf[i] === 0xed && (buf[i + 1] & 0xe0) === 0xa0) // Surrogate (U+D800 - U+DFFF)\n      ) {\n        return false;\n      }\n\n      i += 3;\n    } else if ((buf[i] & 0xf8) === 0xf0) {\n      // 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n      if (\n        i + 3 >= len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i + 2] & 0xc0) !== 0x80 ||\n        (buf[i + 3] & 0xc0) !== 0x80 ||\n        (buf[i] === 0xf0 && (buf[i + 1] & 0xf0) === 0x80) || // Overlong\n        (buf[i] === 0xf4 && buf[i + 1] > 0x8f) ||\n        buf[i] > 0xf4 // > U+10FFFF\n      ) {\n        return false;\n      }\n\n      i += 4;\n    } else {\n      return false;\n    }\n  }\n\n  return true;\n}\n\ntry {\n  const isValidUTF8 = require('utf-8-validate');\n\n  module.exports = {\n    isValidStatusCode,\n    isValidUTF8(buf) {\n      return buf.length < 150 ? _isValidUTF8(buf) : isValidUTF8(buf);\n    },\n    tokenChars\n  };\n} catch (e) /* istanbul ignore next */ {\n  module.exports = {\n    isValidStatusCode,\n    isValidUTF8: _isValidUTF8,\n    tokenChars\n  };\n}\n","/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^net|tls|https$\" }] */\n\n'use strict';\n\nconst EventEmitter = require('events');\nconst http = require('http');\nconst https = require('https');\nconst net = require('net');\nconst tls = require('tls');\nconst { createHash } = require('crypto');\n\nconst extension = require('./extension');\nconst PerMessageDeflate = require('./permessage-deflate');\nconst subprotocol = require('./subprotocol');\nconst WebSocket = require('./websocket');\nconst { GUID, kWebSocket } = require('./constants');\n\nconst keyRegex = /^[+/0-9A-Za-z]{22}==$/;\n\nconst RUNNING = 0;\nconst CLOSING = 1;\nconst CLOSED = 2;\n\n/**\n * Class representing a WebSocket server.\n *\n * @extends EventEmitter\n */\nclass WebSocketServer extends EventEmitter {\n  /**\n   * Create a `WebSocketServer` instance.\n   *\n   * @param {Object} options Configuration options\n   * @param {Number} [options.backlog=511] The maximum length of the queue of\n   *     pending connections\n   * @param {Boolean} [options.clientTracking=true] Specifies whether or not to\n   *     track clients\n   * @param {Function} [options.handleProtocols] A hook to handle protocols\n   * @param {String} [options.host] The hostname where to bind the server\n   * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n   *     size\n   * @param {Boolean} [options.noServer=false] Enable no server mode\n   * @param {String} [options.path] Accept only connections matching this path\n   * @param {(Boolean|Object)} [options.perMessageDeflate=false] Enable/disable\n   *     permessage-deflate\n   * @param {Number} [options.port] The port where to bind the server\n   * @param {(http.Server|https.Server)} [options.server] A pre-created HTTP/S\n   *     server to use\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n   *     not to skip UTF-8 validation for text and close messages\n   * @param {Function} [options.verifyClient] A hook to reject connections\n   * @param {Function} [options.WebSocket=WebSocket] Specifies the `WebSocket`\n   *     class to use. It must be the `WebSocket` class or class that extends it\n   * @param {Function} [callback] A listener for the `listening` event\n   */\n  constructor(options, callback) {\n    super();\n\n    options = {\n      maxPayload: 100 * 1024 * 1024,\n      skipUTF8Validation: false,\n      perMessageDeflate: false,\n      handleProtocols: null,\n      clientTracking: true,\n      verifyClient: null,\n      noServer: false,\n      backlog: null, // use default (511 as implemented in net.js)\n      server: null,\n      host: null,\n      path: null,\n      port: null,\n      WebSocket,\n      ...options\n    };\n\n    if (\n      (options.port == null && !options.server && !options.noServer) ||\n      (options.port != null && (options.server || options.noServer)) ||\n      (options.server && options.noServer)\n    ) {\n      throw new TypeError(\n        'One and only one of the \"port\", \"server\", or \"noServer\" options ' +\n          'must be specified'\n      );\n    }\n\n    if (options.port != null) {\n      this._server = http.createServer((req, res) => {\n        const body = http.STATUS_CODES[426];\n\n        res.writeHead(426, {\n          'Content-Length': body.length,\n          'Content-Type': 'text/plain'\n        });\n        res.end(body);\n      });\n      this._server.listen(\n        options.port,\n        options.host,\n        options.backlog,\n        callback\n      );\n    } else if (options.server) {\n      this._server = options.server;\n    }\n\n    if (this._server) {\n      const emitConnection = this.emit.bind(this, 'connection');\n\n      this._removeListeners = addListeners(this._server, {\n        listening: this.emit.bind(this, 'listening'),\n        error: this.emit.bind(this, 'error'),\n        upgrade: (req, socket, head) => {\n          this.handleUpgrade(req, socket, head, emitConnection);\n        }\n      });\n    }\n\n    if (options.perMessageDeflate === true) options.perMessageDeflate = {};\n    if (options.clientTracking) {\n      this.clients = new Set();\n      this._shouldEmitClose = false;\n    }\n\n    this.options = options;\n    this._state = RUNNING;\n  }\n\n  /**\n   * Returns the bound address, the address family name, and port of the server\n   * as reported by the operating system if listening on an IP socket.\n   * If the server is listening on a pipe or UNIX domain socket, the name is\n   * returned as a string.\n   *\n   * @return {(Object|String|null)} The address of the server\n   * @public\n   */\n  address() {\n    if (this.options.noServer) {\n      throw new Error('The server is operating in \"noServer\" mode');\n    }\n\n    if (!this._server) return null;\n    return this._server.address();\n  }\n\n  /**\n   * Stop the server from accepting new connections and emit the `'close'` event\n   * when all existing connections are closed.\n   *\n   * @param {Function} [cb] A one-time listener for the `'close'` event\n   * @public\n   */\n  close(cb) {\n    if (this._state === CLOSED) {\n      if (cb) {\n        this.once('close', () => {\n          cb(new Error('The server is not running'));\n        });\n      }\n\n      process.nextTick(emitClose, this);\n      return;\n    }\n\n    if (cb) this.once('close', cb);\n\n    if (this._state === CLOSING) return;\n    this._state = CLOSING;\n\n    if (this.options.noServer || this.options.server) {\n      if (this._server) {\n        this._removeListeners();\n        this._removeListeners = this._server = null;\n      }\n\n      if (this.clients) {\n        if (!this.clients.size) {\n          process.nextTick(emitClose, this);\n        } else {\n          this._shouldEmitClose = true;\n        }\n      } else {\n        process.nextTick(emitClose, this);\n      }\n    } else {\n      const server = this._server;\n\n      this._removeListeners();\n      this._removeListeners = this._server = null;\n\n      //\n      // The HTTP/S server was created internally. Close it, and rely on its\n      // `'close'` event.\n      //\n      server.close(() => {\n        emitClose(this);\n      });\n    }\n  }\n\n  /**\n   * See if a given request should be handled by this server instance.\n   *\n   * @param {http.IncomingMessage} req Request object to inspect\n   * @return {Boolean} `true` if the request is valid, else `false`\n   * @public\n   */\n  shouldHandle(req) {\n    if (this.options.path) {\n      const index = req.url.indexOf('?');\n      const pathname = index !== -1 ? req.url.slice(0, index) : req.url;\n\n      if (pathname !== this.options.path) return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Handle a HTTP Upgrade request.\n   *\n   * @param {http.IncomingMessage} req The request object\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @public\n   */\n  handleUpgrade(req, socket, head, cb) {\n    socket.on('error', socketOnError);\n\n    const key =\n      req.headers['sec-websocket-key'] !== undefined\n        ? req.headers['sec-websocket-key']\n        : false;\n    const version = +req.headers['sec-websocket-version'];\n\n    if (\n      req.method !== 'GET' ||\n      req.headers.upgrade.toLowerCase() !== 'websocket' ||\n      !key ||\n      !keyRegex.test(key) ||\n      (version !== 8 && version !== 13) ||\n      !this.shouldHandle(req)\n    ) {\n      return abortHandshake(socket, 400);\n    }\n\n    const secWebSocketProtocol = req.headers['sec-websocket-protocol'];\n    let protocols = new Set();\n\n    if (secWebSocketProtocol !== undefined) {\n      try {\n        protocols = subprotocol.parse(secWebSocketProtocol);\n      } catch (err) {\n        return abortHandshake(socket, 400);\n      }\n    }\n\n    const secWebSocketExtensions = req.headers['sec-websocket-extensions'];\n    const extensions = {};\n\n    if (\n      this.options.perMessageDeflate &&\n      secWebSocketExtensions !== undefined\n    ) {\n      const perMessageDeflate = new PerMessageDeflate(\n        this.options.perMessageDeflate,\n        true,\n        this.options.maxPayload\n      );\n\n      try {\n        const offers = extension.parse(secWebSocketExtensions);\n\n        if (offers[PerMessageDeflate.extensionName]) {\n          perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);\n          extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n        }\n      } catch (err) {\n        return abortHandshake(socket, 400);\n      }\n    }\n\n    //\n    // Optionally call external client verification handler.\n    //\n    if (this.options.verifyClient) {\n      const info = {\n        origin:\n          req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],\n        secure: !!(req.socket.authorized || req.socket.encrypted),\n        req\n      };\n\n      if (this.options.verifyClient.length === 2) {\n        this.options.verifyClient(info, (verified, code, message, headers) => {\n          if (!verified) {\n            return abortHandshake(socket, code || 401, message, headers);\n          }\n\n          this.completeUpgrade(\n            extensions,\n            key,\n            protocols,\n            req,\n            socket,\n            head,\n            cb\n          );\n        });\n        return;\n      }\n\n      if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);\n    }\n\n    this.completeUpgrade(extensions, key, protocols, req, socket, head, cb);\n  }\n\n  /**\n   * Upgrade the connection to WebSocket.\n   *\n   * @param {Object} extensions The accepted extensions\n   * @param {String} key The value of the `Sec-WebSocket-Key` header\n   * @param {Set} protocols The subprotocols\n   * @param {http.IncomingMessage} req The request object\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @throws {Error} If called more than once with the same socket\n   * @private\n   */\n  completeUpgrade(extensions, key, protocols, req, socket, head, cb) {\n    //\n    // Destroy the socket if the client has already sent a FIN packet.\n    //\n    if (!socket.readable || !socket.writable) return socket.destroy();\n\n    if (socket[kWebSocket]) {\n      throw new Error(\n        'server.handleUpgrade() was called more than once with the same ' +\n          'socket, possibly due to a misconfiguration'\n      );\n    }\n\n    if (this._state > RUNNING) return abortHandshake(socket, 503);\n\n    const digest = createHash('sha1')\n      .update(key + GUID)\n      .digest('base64');\n\n    const headers = [\n      'HTTP/1.1 101 Switching Protocols',\n      'Upgrade: websocket',\n      'Connection: Upgrade',\n      `Sec-WebSocket-Accept: ${digest}`\n    ];\n\n    const ws = new this.options.WebSocket(null);\n\n    if (protocols.size) {\n      //\n      // Optionally call external protocol selection handler.\n      //\n      const protocol = this.options.handleProtocols\n        ? this.options.handleProtocols(protocols, req)\n        : protocols.values().next().value;\n\n      if (protocol) {\n        headers.push(`Sec-WebSocket-Protocol: ${protocol}`);\n        ws._protocol = protocol;\n      }\n    }\n\n    if (extensions[PerMessageDeflate.extensionName]) {\n      const params = extensions[PerMessageDeflate.extensionName].params;\n      const value = extension.format({\n        [PerMessageDeflate.extensionName]: [params]\n      });\n      headers.push(`Sec-WebSocket-Extensions: ${value}`);\n      ws._extensions = extensions;\n    }\n\n    //\n    // Allow external modification/inspection of handshake headers.\n    //\n    this.emit('headers', headers, req);\n\n    socket.write(headers.concat('\\r\\n').join('\\r\\n'));\n    socket.removeListener('error', socketOnError);\n\n    ws.setSocket(socket, head, {\n      maxPayload: this.options.maxPayload,\n      skipUTF8Validation: this.options.skipUTF8Validation\n    });\n\n    if (this.clients) {\n      this.clients.add(ws);\n      ws.on('close', () => {\n        this.clients.delete(ws);\n\n        if (this._shouldEmitClose && !this.clients.size) {\n          process.nextTick(emitClose, this);\n        }\n      });\n    }\n\n    cb(ws, req);\n  }\n}\n\nmodule.exports = WebSocketServer;\n\n/**\n * Add event listeners on an `EventEmitter` using a map of <event, listener>\n * pairs.\n *\n * @param {EventEmitter} server The event emitter\n * @param {Object.<String, Function>} map The listeners to add\n * @return {Function} A function that will remove the added listeners when\n *     called\n * @private\n */\nfunction addListeners(server, map) {\n  for (const event of Object.keys(map)) server.on(event, map[event]);\n\n  return function removeListeners() {\n    for (const event of Object.keys(map)) {\n      server.removeListener(event, map[event]);\n    }\n  };\n}\n\n/**\n * Emit a `'close'` event on an `EventEmitter`.\n *\n * @param {EventEmitter} server The event emitter\n * @private\n */\nfunction emitClose(server) {\n  server._state = CLOSED;\n  server.emit('close');\n}\n\n/**\n * Handle premature socket errors.\n *\n * @private\n */\nfunction socketOnError() {\n  this.destroy();\n}\n\n/**\n * Close the connection when preconditions are not fulfilled.\n *\n * @param {(net.Socket|tls.Socket)} socket The socket of the upgrade request\n * @param {Number} code The HTTP response status code\n * @param {String} [message] The HTTP response body\n * @param {Object} [headers] Additional HTTP response headers\n * @private\n */\nfunction abortHandshake(socket, code, message, headers) {\n  if (socket.writable) {\n    message = message || http.STATUS_CODES[code];\n    headers = {\n      Connection: 'close',\n      'Content-Type': 'text/html',\n      'Content-Length': Buffer.byteLength(message),\n      ...headers\n    };\n\n    socket.write(\n      `HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\\r\\n` +\n        Object.keys(headers)\n          .map((h) => `${h}: ${headers[h]}`)\n          .join('\\r\\n') +\n        '\\r\\n\\r\\n' +\n        message\n    );\n  }\n\n  socket.removeListener('error', socketOnError);\n  socket.destroy();\n}\n","/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^Readable$\" }] */\n\n'use strict';\n\nconst EventEmitter = require('events');\nconst https = require('https');\nconst http = require('http');\nconst net = require('net');\nconst tls = require('tls');\nconst { randomBytes, createHash } = require('crypto');\nconst { Readable } = require('stream');\nconst { URL } = require('url');\n\nconst PerMessageDeflate = require('./permessage-deflate');\nconst Receiver = require('./receiver');\nconst Sender = require('./sender');\nconst {\n  BINARY_TYPES,\n  EMPTY_BUFFER,\n  GUID,\n  kForOnEventAttribute,\n  kListener,\n  kStatusCode,\n  kWebSocket,\n  NOOP\n} = require('./constants');\nconst {\n  EventTarget: { addEventListener, removeEventListener }\n} = require('./event-target');\nconst { format, parse } = require('./extension');\nconst { toBuffer } = require('./buffer-util');\n\nconst readyStates = ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];\nconst subprotocolRegex = /^[!#$%&'*+\\-.0-9A-Z^_`|a-z~]+$/;\nconst protocolVersions = [8, 13];\nconst closeTimeout = 30 * 1000;\n\n/**\n * Class representing a WebSocket.\n *\n * @extends EventEmitter\n */\nclass WebSocket extends EventEmitter {\n  /**\n   * Create a new `WebSocket`.\n   *\n   * @param {(String|URL)} address The URL to which to connect\n   * @param {(String|String[])} [protocols] The subprotocols\n   * @param {Object} [options] Connection options\n   */\n  constructor(address, protocols, options) {\n    super();\n\n    this._binaryType = BINARY_TYPES[0];\n    this._closeCode = 1006;\n    this._closeFrameReceived = false;\n    this._closeFrameSent = false;\n    this._closeMessage = EMPTY_BUFFER;\n    this._closeTimer = null;\n    this._extensions = {};\n    this._paused = false;\n    this._protocol = '';\n    this._readyState = WebSocket.CONNECTING;\n    this._receiver = null;\n    this._sender = null;\n    this._socket = null;\n\n    if (address !== null) {\n      this._bufferedAmount = 0;\n      this._isServer = false;\n      this._redirects = 0;\n\n      if (protocols === undefined) {\n        protocols = [];\n      } else if (!Array.isArray(protocols)) {\n        if (typeof protocols === 'object' && protocols !== null) {\n          options = protocols;\n          protocols = [];\n        } else {\n          protocols = [protocols];\n        }\n      }\n\n      initAsClient(this, address, protocols, options);\n    } else {\n      this._isServer = true;\n    }\n  }\n\n  /**\n   * This deviates from the WHATWG interface since ws doesn't support the\n   * required default \"blob\" type (instead we define a custom \"nodebuffer\"\n   * type).\n   *\n   * @type {String}\n   */\n  get binaryType() {\n    return this._binaryType;\n  }\n\n  set binaryType(type) {\n    if (!BINARY_TYPES.includes(type)) return;\n\n    this._binaryType = type;\n\n    //\n    // Allow to change `binaryType` on the fly.\n    //\n    if (this._receiver) this._receiver._binaryType = type;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get bufferedAmount() {\n    if (!this._socket) return this._bufferedAmount;\n\n    return this._socket._writableState.length + this._sender._bufferedBytes;\n  }\n\n  /**\n   * @type {String}\n   */\n  get extensions() {\n    return Object.keys(this._extensions).join();\n  }\n\n  /**\n   * @type {Boolean}\n   */\n  get isPaused() {\n    return this._paused;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onclose() {\n    return null;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onerror() {\n    return null;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onopen() {\n    return null;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onmessage() {\n    return null;\n  }\n\n  /**\n   * @type {String}\n   */\n  get protocol() {\n    return this._protocol;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get readyState() {\n    return this._readyState;\n  }\n\n  /**\n   * @type {String}\n   */\n  get url() {\n    return this._url;\n  }\n\n  /**\n   * Set up the socket and the internal resources.\n   *\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Object} options Options object\n   * @param {Function} [options.generateMask] The function used to generate the\n   *     masking key\n   * @param {Number} [options.maxPayload=0] The maximum allowed message size\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n   *     not to skip UTF-8 validation for text and close messages\n   * @private\n   */\n  setSocket(socket, head, options) {\n    const receiver = new Receiver({\n      binaryType: this.binaryType,\n      extensions: this._extensions,\n      isServer: this._isServer,\n      maxPayload: options.maxPayload,\n      skipUTF8Validation: options.skipUTF8Validation\n    });\n\n    this._sender = new Sender(socket, this._extensions, options.generateMask);\n    this._receiver = receiver;\n    this._socket = socket;\n\n    receiver[kWebSocket] = this;\n    socket[kWebSocket] = this;\n\n    receiver.on('conclude', receiverOnConclude);\n    receiver.on('drain', receiverOnDrain);\n    receiver.on('error', receiverOnError);\n    receiver.on('message', receiverOnMessage);\n    receiver.on('ping', receiverOnPing);\n    receiver.on('pong', receiverOnPong);\n\n    socket.setTimeout(0);\n    socket.setNoDelay();\n\n    if (head.length > 0) socket.unshift(head);\n\n    socket.on('close', socketOnClose);\n    socket.on('data', socketOnData);\n    socket.on('end', socketOnEnd);\n    socket.on('error', socketOnError);\n\n    this._readyState = WebSocket.OPEN;\n    this.emit('open');\n  }\n\n  /**\n   * Emit the `'close'` event.\n   *\n   * @private\n   */\n  emitClose() {\n    if (!this._socket) {\n      this._readyState = WebSocket.CLOSED;\n      this.emit('close', this._closeCode, this._closeMessage);\n      return;\n    }\n\n    if (this._extensions[PerMessageDeflate.extensionName]) {\n      this._extensions[PerMessageDeflate.extensionName].cleanup();\n    }\n\n    this._receiver.removeAllListeners();\n    this._readyState = WebSocket.CLOSED;\n    this.emit('close', this._closeCode, this._closeMessage);\n  }\n\n  /**\n   * Start a closing handshake.\n   *\n   *          +----------+   +-----------+   +----------+\n   *     - - -|ws.close()|-->|close frame|-->|ws.close()|- - -\n   *    |     +----------+   +-----------+   +----------+     |\n   *          +----------+   +-----------+         |\n   * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING\n   *          +----------+   +-----------+   |\n   *    |           |                        |   +---+        |\n   *                +------------------------+-->|fin| - - - -\n   *    |         +---+                      |   +---+\n   *     - - - - -|fin|<---------------------+\n   *              +---+\n   *\n   * @param {Number} [code] Status code explaining why the connection is closing\n   * @param {(String|Buffer)} [data] The reason why the connection is\n   *     closing\n   * @public\n   */\n  close(code, data) {\n    if (this.readyState === WebSocket.CLOSED) return;\n    if (this.readyState === WebSocket.CONNECTING) {\n      const msg = 'WebSocket was closed before the connection was established';\n      return abortHandshake(this, this._req, msg);\n    }\n\n    if (this.readyState === WebSocket.CLOSING) {\n      if (\n        this._closeFrameSent &&\n        (this._closeFrameReceived || this._receiver._writableState.errorEmitted)\n      ) {\n        this._socket.end();\n      }\n\n      return;\n    }\n\n    this._readyState = WebSocket.CLOSING;\n    this._sender.close(code, data, !this._isServer, (err) => {\n      //\n      // This error is handled by the `'error'` listener on the socket. We only\n      // want to know if the close frame has been sent here.\n      //\n      if (err) return;\n\n      this._closeFrameSent = true;\n\n      if (\n        this._closeFrameReceived ||\n        this._receiver._writableState.errorEmitted\n      ) {\n        this._socket.end();\n      }\n    });\n\n    //\n    // Specify a timeout for the closing handshake to complete.\n    //\n    this._closeTimer = setTimeout(\n      this._socket.destroy.bind(this._socket),\n      closeTimeout\n    );\n  }\n\n  /**\n   * Pause the socket.\n   *\n   * @public\n   */\n  pause() {\n    if (\n      this.readyState === WebSocket.CONNECTING ||\n      this.readyState === WebSocket.CLOSED\n    ) {\n      return;\n    }\n\n    this._paused = true;\n    this._socket.pause();\n  }\n\n  /**\n   * Send a ping.\n   *\n   * @param {*} [data] The data to send\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when the ping is sent\n   * @public\n   */\n  ping(data, mask, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof data === 'function') {\n      cb = data;\n      data = mask = undefined;\n    } else if (typeof mask === 'function') {\n      cb = mask;\n      mask = undefined;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    if (mask === undefined) mask = !this._isServer;\n    this._sender.ping(data || EMPTY_BUFFER, mask, cb);\n  }\n\n  /**\n   * Send a pong.\n   *\n   * @param {*} [data] The data to send\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when the pong is sent\n   * @public\n   */\n  pong(data, mask, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof data === 'function') {\n      cb = data;\n      data = mask = undefined;\n    } else if (typeof mask === 'function') {\n      cb = mask;\n      mask = undefined;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    if (mask === undefined) mask = !this._isServer;\n    this._sender.pong(data || EMPTY_BUFFER, mask, cb);\n  }\n\n  /**\n   * Resume the socket.\n   *\n   * @public\n   */\n  resume() {\n    if (\n      this.readyState === WebSocket.CONNECTING ||\n      this.readyState === WebSocket.CLOSED\n    ) {\n      return;\n    }\n\n    this._paused = false;\n    if (!this._receiver._writableState.needDrain) this._socket.resume();\n  }\n\n  /**\n   * Send a data message.\n   *\n   * @param {*} data The message to send\n   * @param {Object} [options] Options object\n   * @param {Boolean} [options.binary] Specifies whether `data` is binary or\n   *     text\n   * @param {Boolean} [options.compress] Specifies whether or not to compress\n   *     `data`\n   * @param {Boolean} [options.fin=true] Specifies whether the fragment is the\n   *     last one\n   * @param {Boolean} [options.mask] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when data is written out\n   * @public\n   */\n  send(data, options, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof options === 'function') {\n      cb = options;\n      options = {};\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    const opts = {\n      binary: typeof data !== 'string',\n      mask: !this._isServer,\n      compress: true,\n      fin: true,\n      ...options\n    };\n\n    if (!this._extensions[PerMessageDeflate.extensionName]) {\n      opts.compress = false;\n    }\n\n    this._sender.send(data || EMPTY_BUFFER, opts, cb);\n  }\n\n  /**\n   * Forcibly close the connection.\n   *\n   * @public\n   */\n  terminate() {\n    if (this.readyState === WebSocket.CLOSED) return;\n    if (this.readyState === WebSocket.CONNECTING) {\n      const msg = 'WebSocket was closed before the connection was established';\n      return abortHandshake(this, this._req, msg);\n    }\n\n    if (this._socket) {\n      this._readyState = WebSocket.CLOSING;\n      this._socket.destroy();\n    }\n  }\n}\n\n/**\n * @constant {Number} CONNECTING\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CONNECTING', {\n  enumerable: true,\n  value: readyStates.indexOf('CONNECTING')\n});\n\n/**\n * @constant {Number} CONNECTING\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CONNECTING', {\n  enumerable: true,\n  value: readyStates.indexOf('CONNECTING')\n});\n\n/**\n * @constant {Number} OPEN\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'OPEN', {\n  enumerable: true,\n  value: readyStates.indexOf('OPEN')\n});\n\n/**\n * @constant {Number} OPEN\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'OPEN', {\n  enumerable: true,\n  value: readyStates.indexOf('OPEN')\n});\n\n/**\n * @constant {Number} CLOSING\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CLOSING', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSING')\n});\n\n/**\n * @constant {Number} CLOSING\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CLOSING', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSING')\n});\n\n/**\n * @constant {Number} CLOSED\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CLOSED', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSED')\n});\n\n/**\n * @constant {Number} CLOSED\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CLOSED', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSED')\n});\n\n[\n  'binaryType',\n  'bufferedAmount',\n  'extensions',\n  'isPaused',\n  'protocol',\n  'readyState',\n  'url'\n].forEach((property) => {\n  Object.defineProperty(WebSocket.prototype, property, { enumerable: true });\n});\n\n//\n// Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.\n// See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface\n//\n['open', 'error', 'close', 'message'].forEach((method) => {\n  Object.defineProperty(WebSocket.prototype, `on${method}`, {\n    enumerable: true,\n    get() {\n      for (const listener of this.listeners(method)) {\n        if (listener[kForOnEventAttribute]) return listener[kListener];\n      }\n\n      return null;\n    },\n    set(handler) {\n      for (const listener of this.listeners(method)) {\n        if (listener[kForOnEventAttribute]) {\n          this.removeListener(method, listener);\n          break;\n        }\n      }\n\n      if (typeof handler !== 'function') return;\n\n      this.addEventListener(method, handler, {\n        [kForOnEventAttribute]: true\n      });\n    }\n  });\n});\n\nWebSocket.prototype.addEventListener = addEventListener;\nWebSocket.prototype.removeEventListener = removeEventListener;\n\nmodule.exports = WebSocket;\n\n/**\n * Initialize a WebSocket client.\n *\n * @param {WebSocket} websocket The client to initialize\n * @param {(String|URL)} address The URL to which to connect\n * @param {Array} protocols The subprotocols\n * @param {Object} [options] Connection options\n * @param {Boolean} [options.followRedirects=false] Whether or not to follow\n *     redirects\n * @param {Function} [options.generateMask] The function used to generate the\n *     masking key\n * @param {Number} [options.handshakeTimeout] Timeout in milliseconds for the\n *     handshake request\n * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n *     size\n * @param {Number} [options.maxRedirects=10] The maximum number of redirects\n *     allowed\n * @param {String} [options.origin] Value of the `Origin` or\n *     `Sec-WebSocket-Origin` header\n * @param {(Boolean|Object)} [options.perMessageDeflate=true] Enable/disable\n *     permessage-deflate\n * @param {Number} [options.protocolVersion=13] Value of the\n *     `Sec-WebSocket-Version` header\n * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n *     not to skip UTF-8 validation for text and close messages\n * @private\n */\nfunction initAsClient(websocket, address, protocols, options) {\n  const opts = {\n    protocolVersion: protocolVersions[1],\n    maxPayload: 100 * 1024 * 1024,\n    skipUTF8Validation: false,\n    perMessageDeflate: true,\n    followRedirects: false,\n    maxRedirects: 10,\n    ...options,\n    createConnection: undefined,\n    socketPath: undefined,\n    hostname: undefined,\n    protocol: undefined,\n    timeout: undefined,\n    method: undefined,\n    host: undefined,\n    path: undefined,\n    port: undefined\n  };\n\n  if (!protocolVersions.includes(opts.protocolVersion)) {\n    throw new RangeError(\n      `Unsupported protocol version: ${opts.protocolVersion} ` +\n        `(supported versions: ${protocolVersions.join(', ')})`\n    );\n  }\n\n  let parsedUrl;\n\n  if (address instanceof URL) {\n    parsedUrl = address;\n    websocket._url = address.href;\n  } else {\n    try {\n      parsedUrl = new URL(address);\n    } catch (e) {\n      throw new SyntaxError(`Invalid URL: ${address}`);\n    }\n\n    websocket._url = address;\n  }\n\n  const isSecure = parsedUrl.protocol === 'wss:';\n  const isUnixSocket = parsedUrl.protocol === 'ws+unix:';\n  let invalidURLMessage;\n\n  if (parsedUrl.protocol !== 'ws:' && !isSecure && !isUnixSocket) {\n    invalidURLMessage =\n      'The URL\\'s protocol must be one of \"ws:\", \"wss:\", or \"ws+unix:\"';\n  } else if (isUnixSocket && !parsedUrl.pathname) {\n    invalidURLMessage = \"The URL's pathname is empty\";\n  } else if (parsedUrl.hash) {\n    invalidURLMessage = 'The URL contains a fragment identifier';\n  }\n\n  if (invalidURLMessage) {\n    const err = new SyntaxError(invalidURLMessage);\n\n    if (websocket._redirects === 0) {\n      throw err;\n    } else {\n      emitErrorAndClose(websocket, err);\n      return;\n    }\n  }\n\n  const defaultPort = isSecure ? 443 : 80;\n  const key = randomBytes(16).toString('base64');\n  const get = isSecure ? https.get : http.get;\n  const protocolSet = new Set();\n  let perMessageDeflate;\n\n  opts.createConnection = isSecure ? tlsConnect : netConnect;\n  opts.defaultPort = opts.defaultPort || defaultPort;\n  opts.port = parsedUrl.port || defaultPort;\n  opts.host = parsedUrl.hostname.startsWith('[')\n    ? parsedUrl.hostname.slice(1, -1)\n    : parsedUrl.hostname;\n  opts.headers = {\n    'Sec-WebSocket-Version': opts.protocolVersion,\n    'Sec-WebSocket-Key': key,\n    Connection: 'Upgrade',\n    Upgrade: 'websocket',\n    ...opts.headers\n  };\n  opts.path = parsedUrl.pathname + parsedUrl.search;\n  opts.timeout = opts.handshakeTimeout;\n\n  if (opts.perMessageDeflate) {\n    perMessageDeflate = new PerMessageDeflate(\n      opts.perMessageDeflate !== true ? opts.perMessageDeflate : {},\n      false,\n      opts.maxPayload\n    );\n    opts.headers['Sec-WebSocket-Extensions'] = format({\n      [PerMessageDeflate.extensionName]: perMessageDeflate.offer()\n    });\n  }\n  if (protocols.length) {\n    for (const protocol of protocols) {\n      if (\n        typeof protocol !== 'string' ||\n        !subprotocolRegex.test(protocol) ||\n        protocolSet.has(protocol)\n      ) {\n        throw new SyntaxError(\n          'An invalid or duplicated subprotocol was specified'\n        );\n      }\n\n      protocolSet.add(protocol);\n    }\n\n    opts.headers['Sec-WebSocket-Protocol'] = protocols.join(',');\n  }\n  if (opts.origin) {\n    if (opts.protocolVersion < 13) {\n      opts.headers['Sec-WebSocket-Origin'] = opts.origin;\n    } else {\n      opts.headers.Origin = opts.origin;\n    }\n  }\n  if (parsedUrl.username || parsedUrl.password) {\n    opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;\n  }\n\n  if (isUnixSocket) {\n    const parts = opts.path.split(':');\n\n    opts.socketPath = parts[0];\n    opts.path = parts[1];\n  }\n\n  if (opts.followRedirects) {\n    if (websocket._redirects === 0) {\n      websocket._originalHost = parsedUrl.host;\n\n      const headers = options && options.headers;\n\n      //\n      // Shallow copy the user provided options so that headers can be changed\n      // without mutating the original object.\n      //\n      options = { ...options, headers: {} };\n\n      if (headers) {\n        for (const [key, value] of Object.entries(headers)) {\n          options.headers[key.toLowerCase()] = value;\n        }\n      }\n    } else if (parsedUrl.host !== websocket._originalHost) {\n      //\n      // Match curl 7.77.0 behavior and drop the following headers. These\n      // headers are also dropped when following a redirect to a subdomain.\n      //\n      delete opts.headers.authorization;\n      delete opts.headers.cookie;\n      delete opts.headers.host;\n      opts.auth = undefined;\n    }\n\n    //\n    // Match curl 7.77.0 behavior and make the first `Authorization` header win.\n    // If the `Authorization` header is set, then there is nothing to do as it\n    // will take precedence.\n    //\n    if (opts.auth && !options.headers.authorization) {\n      options.headers.authorization =\n        'Basic ' + Buffer.from(opts.auth).toString('base64');\n    }\n  }\n\n  let req = (websocket._req = get(opts));\n\n  if (opts.timeout) {\n    req.on('timeout', () => {\n      abortHandshake(websocket, req, 'Opening handshake has timed out');\n    });\n  }\n\n  req.on('error', (err) => {\n    if (req === null || req.aborted) return;\n\n    req = websocket._req = null;\n    emitErrorAndClose(websocket, err);\n  });\n\n  req.on('response', (res) => {\n    const location = res.headers.location;\n    const statusCode = res.statusCode;\n\n    if (\n      location &&\n      opts.followRedirects &&\n      statusCode >= 300 &&\n      statusCode < 400\n    ) {\n      if (++websocket._redirects > opts.maxRedirects) {\n        abortHandshake(websocket, req, 'Maximum redirects exceeded');\n        return;\n      }\n\n      req.abort();\n\n      let addr;\n\n      try {\n        addr = new URL(location, address);\n      } catch (e) {\n        const err = new SyntaxError(`Invalid URL: ${location}`);\n        emitErrorAndClose(websocket, err);\n        return;\n      }\n\n      initAsClient(websocket, addr, protocols, options);\n    } else if (!websocket.emit('unexpected-response', req, res)) {\n      abortHandshake(\n        websocket,\n        req,\n        `Unexpected server response: ${res.statusCode}`\n      );\n    }\n  });\n\n  req.on('upgrade', (res, socket, head) => {\n    websocket.emit('upgrade', res);\n\n    //\n    // The user may have closed the connection from a listener of the `upgrade`\n    // event.\n    //\n    if (websocket.readyState !== WebSocket.CONNECTING) return;\n\n    req = websocket._req = null;\n\n    const digest = createHash('sha1')\n      .update(key + GUID)\n      .digest('base64');\n\n    if (res.headers['sec-websocket-accept'] !== digest) {\n      abortHandshake(websocket, socket, 'Invalid Sec-WebSocket-Accept header');\n      return;\n    }\n\n    const serverProt = res.headers['sec-websocket-protocol'];\n    let protError;\n\n    if (serverProt !== undefined) {\n      if (!protocolSet.size) {\n        protError = 'Server sent a subprotocol but none was requested';\n      } else if (!protocolSet.has(serverProt)) {\n        protError = 'Server sent an invalid subprotocol';\n      }\n    } else if (protocolSet.size) {\n      protError = 'Server sent no subprotocol';\n    }\n\n    if (protError) {\n      abortHandshake(websocket, socket, protError);\n      return;\n    }\n\n    if (serverProt) websocket._protocol = serverProt;\n\n    const secWebSocketExtensions = res.headers['sec-websocket-extensions'];\n\n    if (secWebSocketExtensions !== undefined) {\n      if (!perMessageDeflate) {\n        const message =\n          'Server sent a Sec-WebSocket-Extensions header but no extension ' +\n          'was requested';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      let extensions;\n\n      try {\n        extensions = parse(secWebSocketExtensions);\n      } catch (err) {\n        const message = 'Invalid Sec-WebSocket-Extensions header';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      const extensionNames = Object.keys(extensions);\n\n      if (\n        extensionNames.length !== 1 ||\n        extensionNames[0] !== PerMessageDeflate.extensionName\n      ) {\n        const message = 'Server indicated an extension that was not requested';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      try {\n        perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);\n      } catch (err) {\n        const message = 'Invalid Sec-WebSocket-Extensions header';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      websocket._extensions[PerMessageDeflate.extensionName] =\n        perMessageDeflate;\n    }\n\n    websocket.setSocket(socket, head, {\n      generateMask: opts.generateMask,\n      maxPayload: opts.maxPayload,\n      skipUTF8Validation: opts.skipUTF8Validation\n    });\n  });\n}\n\n/**\n * Emit the `'error'` and `'close'` event.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {Error} The error to emit\n * @private\n */\nfunction emitErrorAndClose(websocket, err) {\n  websocket._readyState = WebSocket.CLOSING;\n  websocket.emit('error', err);\n  websocket.emitClose();\n}\n\n/**\n * Create a `net.Socket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {net.Socket} The newly created socket used to start the connection\n * @private\n */\nfunction netConnect(options) {\n  options.path = options.socketPath;\n  return net.connect(options);\n}\n\n/**\n * Create a `tls.TLSSocket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {tls.TLSSocket} The newly created socket used to start the connection\n * @private\n */\nfunction tlsConnect(options) {\n  options.path = undefined;\n\n  if (!options.servername && options.servername !== '') {\n    options.servername = net.isIP(options.host) ? '' : options.host;\n  }\n\n  return tls.connect(options);\n}\n\n/**\n * Abort the handshake and emit an error.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {(http.ClientRequest|net.Socket|tls.Socket)} stream The request to\n *     abort or the socket to destroy\n * @param {String} message The error message\n * @private\n */\nfunction abortHandshake(websocket, stream, message) {\n  websocket._readyState = WebSocket.CLOSING;\n\n  const err = new Error(message);\n  Error.captureStackTrace(err, abortHandshake);\n\n  if (stream.setHeader) {\n    stream.abort();\n\n    if (stream.socket && !stream.socket.destroyed) {\n      //\n      // On Node.js >= 14.3.0 `request.abort()` does not destroy the socket if\n      // called after the request completed. See\n      // https://github.com/websockets/ws/issues/1869.\n      //\n      stream.socket.destroy();\n    }\n\n    stream.once('abort', websocket.emitClose.bind(websocket));\n    websocket.emit('error', err);\n  } else {\n    stream.destroy(err);\n    stream.once('error', websocket.emit.bind(websocket, 'error'));\n    stream.once('close', websocket.emitClose.bind(websocket));\n  }\n}\n\n/**\n * Handle cases where the `ping()`, `pong()`, or `send()` methods are called\n * when the `readyState` attribute is `CLOSING` or `CLOSED`.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {*} [data] The data to send\n * @param {Function} [cb] Callback\n * @private\n */\nfunction sendAfterClose(websocket, data, cb) {\n  if (data) {\n    const length = toBuffer(data).length;\n\n    //\n    // The `_bufferedAmount` property is used only when the peer is a client and\n    // the opening handshake fails. Under these circumstances, in fact, the\n    // `setSocket()` method is not called, so the `_socket` and `_sender`\n    // properties are set to `null`.\n    //\n    if (websocket._socket) websocket._sender._bufferedBytes += length;\n    else websocket._bufferedAmount += length;\n  }\n\n  if (cb) {\n    const err = new Error(\n      `WebSocket is not open: readyState ${websocket.readyState} ` +\n        `(${readyStates[websocket.readyState]})`\n    );\n    cb(err);\n  }\n}\n\n/**\n * The listener of the `Receiver` `'conclude'` event.\n *\n * @param {Number} code The status code\n * @param {Buffer} reason The reason for closing\n * @private\n */\nfunction receiverOnConclude(code, reason) {\n  const websocket = this[kWebSocket];\n\n  websocket._closeFrameReceived = true;\n  websocket._closeMessage = reason;\n  websocket._closeCode = code;\n\n  if (websocket._socket[kWebSocket] === undefined) return;\n\n  websocket._socket.removeListener('data', socketOnData);\n  process.nextTick(resume, websocket._socket);\n\n  if (code === 1005) websocket.close();\n  else websocket.close(code, reason);\n}\n\n/**\n * The listener of the `Receiver` `'drain'` event.\n *\n * @private\n */\nfunction receiverOnDrain() {\n  const websocket = this[kWebSocket];\n\n  if (!websocket.isPaused) websocket._socket.resume();\n}\n\n/**\n * The listener of the `Receiver` `'error'` event.\n *\n * @param {(RangeError|Error)} err The emitted error\n * @private\n */\nfunction receiverOnError(err) {\n  const websocket = this[kWebSocket];\n\n  if (websocket._socket[kWebSocket] !== undefined) {\n    websocket._socket.removeListener('data', socketOnData);\n\n    //\n    // On Node.js < 14.0.0 the `'error'` event is emitted synchronously. See\n    // https://github.com/websockets/ws/issues/1940.\n    //\n    process.nextTick(resume, websocket._socket);\n\n    websocket.close(err[kStatusCode]);\n  }\n\n  websocket.emit('error', err);\n}\n\n/**\n * The listener of the `Receiver` `'finish'` event.\n *\n * @private\n */\nfunction receiverOnFinish() {\n  this[kWebSocket].emitClose();\n}\n\n/**\n * The listener of the `Receiver` `'message'` event.\n *\n * @param {Buffer|ArrayBuffer|Buffer[])} data The message\n * @param {Boolean} isBinary Specifies whether the message is binary or not\n * @private\n */\nfunction receiverOnMessage(data, isBinary) {\n  this[kWebSocket].emit('message', data, isBinary);\n}\n\n/**\n * The listener of the `Receiver` `'ping'` event.\n *\n * @param {Buffer} data The data included in the ping frame\n * @private\n */\nfunction receiverOnPing(data) {\n  const websocket = this[kWebSocket];\n\n  websocket.pong(data, !websocket._isServer, NOOP);\n  websocket.emit('ping', data);\n}\n\n/**\n * The listener of the `Receiver` `'pong'` event.\n *\n * @param {Buffer} data The data included in the pong frame\n * @private\n */\nfunction receiverOnPong(data) {\n  this[kWebSocket].emit('pong', data);\n}\n\n/**\n * Resume a readable stream\n *\n * @param {Readable} stream The readable stream\n * @private\n */\nfunction resume(stream) {\n  stream.resume();\n}\n\n/**\n * The listener of the `net.Socket` `'close'` event.\n *\n * @private\n */\nfunction socketOnClose() {\n  const websocket = this[kWebSocket];\n\n  this.removeListener('close', socketOnClose);\n  this.removeListener('data', socketOnData);\n  this.removeListener('end', socketOnEnd);\n\n  websocket._readyState = WebSocket.CLOSING;\n\n  let chunk;\n\n  //\n  // The close frame might not have been received or the `'end'` event emitted,\n  // for example, if the socket was destroyed due to an error. Ensure that the\n  // `receiver` stream is closed after writing any remaining buffered data to\n  // it. If the readable side of the socket is in flowing mode then there is no\n  // buffered data as everything has been already written and `readable.read()`\n  // will return `null`. If instead, the socket is paused, any possible buffered\n  // data will be read as a single chunk.\n  //\n  if (\n    !this._readableState.endEmitted &&\n    !websocket._closeFrameReceived &&\n    !websocket._receiver._writableState.errorEmitted &&\n    (chunk = websocket._socket.read()) !== null\n  ) {\n    websocket._receiver.write(chunk);\n  }\n\n  websocket._receiver.end();\n\n  this[kWebSocket] = undefined;\n\n  clearTimeout(websocket._closeTimer);\n\n  if (\n    websocket._receiver._writableState.finished ||\n    websocket._receiver._writableState.errorEmitted\n  ) {\n    websocket.emitClose();\n  } else {\n    websocket._receiver.on('error', receiverOnFinish);\n    websocket._receiver.on('finish', receiverOnFinish);\n  }\n}\n\n/**\n * The listener of the `net.Socket` `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction socketOnData(chunk) {\n  if (!this[kWebSocket]._receiver.write(chunk)) {\n    this.pause();\n  }\n}\n\n/**\n * The listener of the `net.Socket` `'end'` event.\n *\n * @private\n */\nfunction socketOnEnd() {\n  const websocket = this[kWebSocket];\n\n  websocket._readyState = WebSocket.CLOSING;\n  websocket._receiver.end();\n  this.end();\n}\n\n/**\n * The listener of the `net.Socket` `'error'` event.\n *\n * @private\n */\nfunction socketOnError() {\n  const websocket = this[kWebSocket];\n\n  this.removeListener('error', socketOnError);\n  this.on('error', NOOP);\n\n  if (websocket) {\n    websocket._readyState = WebSocket.CLOSING;\n    this.destroy();\n  }\n}\n","module.exports = require(\"bufferutil\");","module.exports = require(\"utf-8-validate\");","module.exports = require(\"buffer\");","module.exports = require(\"constants\");","module.exports = require(\"crypto\");","module.exports = require(\"dns\");","module.exports = require(\"events\");","module.exports = require(\"fs\");","module.exports = require(\"http\");","module.exports = require(\"https\");","module.exports = require(\"net\");","module.exports = require(\"os\");","module.exports = require(\"stream\");","module.exports = require(\"tls\");","module.exports = require(\"url\");","module.exports = require(\"zlib\");","// GENERATED FILE. DO NOT EDIT.\nvar Long = (function(exports) {\n  \"use strict\";\n  \n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  \n  /**\n   * @license\n   * Copyright 2009 The Closure Library Authors\n   * Copyright 2020 Daniel Wirtz / The long.js Authors.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   * SPDX-License-Identifier: Apache-2.0\n   */\n  // WebAssembly optimizations to do native i64 multiplication and divide\n  var wasm = null;\n  \n  try {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;\n  } catch (e) {// no wasm support :(\n  }\n  /**\n   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n   *  See the from* functions below for more convenient ways of constructing Longs.\n   * @exports Long\n   * @class A Long class for representing a 64 bit two's-complement integer value.\n   * @param {number} low The low (signed) 32 bits of the long\n   * @param {number} high The high (signed) 32 bits of the long\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @constructor\n   */\n  \n  \n  function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n  \n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n  \n    this.unsigned = !!unsigned;\n  } // The internal representation of a long is the two given signed, 32-bit values.\n  // We use 32-bit pieces because these are the size of integers on which\n  // Javascript performs bit-operations.  For operations like addition and\n  // multiplication, we split each number into 16 bit pieces, which can easily be\n  // multiplied within Javascript's floating-point representation without overflow\n  // or change in sign.\n  //\n  // In the algorithms below, we frequently reduce the negative case to the\n  // positive case by negating the input(s) and then post-processing the result.\n  // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n  // a positive number, it overflows back into a negative).  Not handling this\n  // case would often result in infinite recursion.\n  //\n  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n  // methods on which they depend.\n  \n  /**\n   * An indicator used to reliably determine if an object is a Long or not.\n   * @type {boolean}\n   * @const\n   * @private\n   */\n  \n  \n  Long.prototype.__isLong__;\n  Object.defineProperty(Long.prototype, \"__isLong__\", {\n    value: true\n  });\n  /**\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   * @inner\n   */\n  \n  function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n  }\n  /**\n   * @function\n   * @param {*} value number\n   * @returns {number}\n   * @inner\n   */\n  \n  \n  function ctz32(value) {\n    var c = Math.clz32(value & -value);\n    return value ? 31 - c : c;\n  }\n  /**\n   * Tests if the specified object is a Long.\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   */\n  \n  \n  Long.isLong = isLong;\n  /**\n   * A cache of the Long representations of small integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var INT_CACHE = {};\n  /**\n   * A cache of the Long representations of small unsigned integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var UINT_CACHE = {};\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n  \n    if (unsigned) {\n      value >>>= 0;\n  \n      if (cache = 0 <= value && value < 256) {\n        cachedObj = UINT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, 0, true);\n      if (cache) UINT_CACHE[value] = obj;\n      return obj;\n    } else {\n      value |= 0;\n  \n      if (cache = -128 <= value && value < 128) {\n        cachedObj = INT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, value < 0 ? -1 : 0, false);\n      if (cache) INT_CACHE[value] = obj;\n      return obj;\n    }\n  }\n  /**\n   * Returns a Long representing the given 32 bit integer value.\n   * @function\n   * @param {number} value The 32 bit integer in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromInt = fromInt;\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromNumber(value, unsigned) {\n    if (isNaN(value)) return unsigned ? UZERO : ZERO;\n  \n    if (unsigned) {\n      if (value < 0) return UZERO;\n      if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n    } else {\n      if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n      if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n    }\n  \n    if (value < 0) return fromNumber(-value, unsigned).neg();\n    return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n  }\n  /**\n   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n   * @function\n   * @param {number} value The number in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromNumber = fromNumber;\n  /**\n   * @param {number} lowBits\n   * @param {number} highBits\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n  }\n  /**\n   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n   *  assumed to use 32 bits.\n   * @function\n   * @param {number} lowBits The low 32 bits\n   * @param {number} highBits The high 32 bits\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBits = fromBits;\n  /**\n   * @function\n   * @param {number} base\n   * @param {number} exponent\n   * @returns {number}\n   * @inner\n   */\n  \n  var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n  \n  /**\n   * @param {string} str\n   * @param {(boolean|number)=} unsigned\n   * @param {number=} radix\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromString(str, unsigned, radix) {\n    if (str.length === 0) throw Error('empty string');\n  \n    if (typeof unsigned === 'number') {\n      // For goog.math.long compatibility\n      radix = unsigned;\n      unsigned = false;\n    } else {\n      unsigned = !!unsigned;\n    }\n  \n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return unsigned ? UZERO : ZERO;\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    var p;\n    if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');else if (p === 0) {\n      return fromString(str.substring(1), unsigned, radix).neg();\n    } // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n  \n    for (var i = 0; i < str.length; i += 8) {\n      var size = Math.min(8, str.length - i),\n          value = parseInt(str.substring(i, i + size), radix);\n  \n      if (size < 8) {\n        var power = fromNumber(pow_dbl(radix, size));\n        result = result.mul(power).add(fromNumber(value));\n      } else {\n        result = result.mul(radixToPower);\n        result = result.add(fromNumber(value));\n      }\n    }\n  \n    result.unsigned = unsigned;\n    return result;\n  }\n  /**\n   * Returns a Long representation of the given string, written using the specified radix.\n   * @function\n   * @param {string} str The textual representation of the Long\n   * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n   * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromString = fromString;\n  /**\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromValue(val, unsigned) {\n    if (typeof val === 'number') return fromNumber(val, unsigned);\n    if (typeof val === 'string') return fromString(val, unsigned); // Throws for non-objects, converts non-instanceof Long:\n  \n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n  }\n  /**\n   * Converts the specified value to a Long using the appropriate from* function for its type.\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long}\n   */\n  \n  \n  Long.fromValue = fromValue; // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n  // no runtime penalty for these.\n  \n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_16_DBL = 1 << 16;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24_DBL = 1 << 24;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n  /**\n   * @type {!Long}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ZERO = fromInt(0);\n  /**\n   * Signed zero.\n   * @type {!Long}\n   */\n  \n  Long.ZERO = ZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UZERO = fromInt(0, true);\n  /**\n   * Unsigned zero.\n   * @type {!Long}\n   */\n  \n  Long.UZERO = UZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ONE = fromInt(1);\n  /**\n   * Signed one.\n   * @type {!Long}\n   */\n  \n  Long.ONE = ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UONE = fromInt(1, true);\n  /**\n   * Unsigned one.\n   * @type {!Long}\n   */\n  \n  Long.UONE = UONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var NEG_ONE = fromInt(-1);\n  /**\n   * Signed negative one.\n   * @type {!Long}\n   */\n  \n  Long.NEG_ONE = NEG_ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n  /**\n   * Maximum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_VALUE = MAX_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n  /**\n   * Maximum unsigned value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n  /**\n   * Minimum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MIN_VALUE = MIN_VALUE;\n  /**\n   * @alias Long.prototype\n   * @inner\n   */\n  \n  var LongPrototype = Long.prototype;\n  /**\n   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  LongPrototype.toInt = function toInt() {\n    return this.unsigned ? this.low >>> 0 : this.low;\n  };\n  /**\n   * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.toNumber = function toNumber() {\n    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n  };\n  /**\n   * Converts the Long to a string written in the specified radix.\n   * @this {!Long}\n   * @param {number=} radix Radix (2-36), defaults to 10\n   * @returns {string}\n   * @override\n   * @throws {RangeError} If `radix` is out of range\n   */\n  \n  \n  LongPrototype.toString = function toString(radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    if (this.isZero()) return '0';\n  \n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      if (this.eq(MIN_VALUE)) {\n        // We need to change the Long value before it can be negated, so we remove\n        // the bottom-most digit in this base and then recurse to do the rest.\n        var radixLong = fromNumber(radix),\n            div = this.div(radixLong),\n            rem1 = div.mul(radixLong).sub(this);\n        return div.toString(radix) + rem1.toInt().toString(radix);\n      } else return '-' + this.neg().toString(radix);\n    } // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n  \n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n        rem = this;\n    var result = '';\n  \n    while (true) {\n      var remDiv = rem.div(radixToPower),\n          intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n          digits = intval.toString(radix);\n      rem = remDiv;\n      if (rem.isZero()) return digits + result;else {\n        while (digits.length < 6) digits = '0' + digits;\n  \n        result = '' + digits + result;\n      }\n    }\n  };\n  /**\n   * Gets the high 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed high bits\n   */\n  \n  \n  LongPrototype.getHighBits = function getHighBits() {\n    return this.high;\n  };\n  /**\n   * Gets the high 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned high bits\n   */\n  \n  \n  LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n    return this.high >>> 0;\n  };\n  /**\n   * Gets the low 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed low bits\n   */\n  \n  \n  LongPrototype.getLowBits = function getLowBits() {\n    return this.low;\n  };\n  /**\n   * Gets the low 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned low bits\n   */\n  \n  \n  LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n    return this.low >>> 0;\n  };\n  /**\n   * Gets the number of bits needed to represent the absolute value of this Long.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n    if (this.isNegative()) // Unsigned Longs are never negative\n      return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n    var val = this.high != 0 ? this.high : this.low;\n  \n    for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;\n  \n    return this.high != 0 ? bit + 33 : bit + 1;\n  };\n  /**\n   * Tests if this Long's value equals zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isZero = function isZero() {\n    return this.high === 0 && this.low === 0;\n  };\n  /**\n   * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eqz = LongPrototype.isZero;\n  /**\n   * Tests if this Long's value is negative.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  LongPrototype.isNegative = function isNegative() {\n    return !this.unsigned && this.high < 0;\n  };\n  /**\n   * Tests if this Long's value is positive or zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isPositive = function isPositive() {\n    return this.unsigned || this.high >= 0;\n  };\n  /**\n   * Tests if this Long's value is odd.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isOdd = function isOdd() {\n    return (this.low & 1) === 1;\n  };\n  /**\n   * Tests if this Long's value is even.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isEven = function isEven() {\n    return (this.low & 1) === 0;\n  };\n  /**\n   * Tests if this Long's value equals the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.equals = function equals(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n    return this.high === other.high && this.low === other.low;\n  };\n  /**\n   * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eq = LongPrototype.equals;\n  /**\n   * Tests if this Long's value differs from the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.notEquals = function notEquals(other) {\n    return !this.eq(\n    /* validates */\n    other);\n  };\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.neq = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ne = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value is less than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThan = function lessThan(other) {\n    return this.comp(\n    /* validates */\n    other) < 0;\n  };\n  /**\n   * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lt = LongPrototype.lessThan;\n  /**\n   * Tests if this Long's value is less than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) <= 0;\n  };\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lte = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.le = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThan = function greaterThan(other) {\n    return this.comp(\n    /* validates */\n    other) > 0;\n  };\n  /**\n   * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gt = LongPrototype.greaterThan;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) >= 0;\n  };\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n  /**\n   * Compares this Long's value with the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  LongPrototype.compare = function compare(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.eq(other)) return 0;\n    var thisNeg = this.isNegative(),\n        otherNeg = other.isNegative();\n    if (thisNeg && !otherNeg) return -1;\n    if (!thisNeg && otherNeg) return 1; // At this point the sign bits are the same\n  \n    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1; // Both are positive if at least one is unsigned\n  \n    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n  };\n  /**\n   * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  \n  LongPrototype.comp = LongPrototype.compare;\n  /**\n   * Negates this Long's value.\n   * @this {!Long}\n   * @returns {!Long} Negated Long\n   */\n  \n  LongPrototype.negate = function negate() {\n    if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\n    return this.not().add(ONE);\n  };\n  /**\n   * Negates this Long's value. This is an alias of {@link Long#negate}.\n   * @function\n   * @returns {!Long} Negated Long\n   */\n  \n  \n  LongPrototype.neg = LongPrototype.negate;\n  /**\n   * Returns the sum of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} addend Addend\n   * @returns {!Long} Sum\n   */\n  \n  LongPrototype.add = function add(addend) {\n    if (!isLong(addend)) addend = fromValue(addend); // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the difference of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.subtract = function subtract(subtrahend) {\n    if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n    return this.add(subtrahend.neg());\n  };\n  /**\n   * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n   * @function\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.sub = LongPrototype.subtract;\n  /**\n   * Returns the product of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  LongPrototype.multiply = function multiply(multiplier) {\n    if (this.isZero()) return this;\n    if (!isLong(multiplier)) multiplier = fromValue(multiplier); // use wasm support if present\n  \n    if (wasm) {\n      var low = wasm[\"mul\"](this.low, this.high, multiplier.low, multiplier.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;\n    if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\n    if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\n  \n    if (this.isNegative()) {\n      if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();\n    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg(); // If both longs are small, use float multiplication\n  \n  \n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned); // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n   * @function\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  \n  LongPrototype.mul = LongPrototype.multiply;\n  /**\n   * Returns this Long divided by the specified. The result is signed if this Long is signed or\n   *  unsigned if this Long is unsigned.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  LongPrototype.divide = function divide(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor);\n    if (divisor.isZero()) throw Error('division by zero'); // use wasm support if present\n  \n    if (wasm) {\n      // guard against signed division overflow: the largest\n      // negative number / -1 would be 1 larger than the largest\n      // positive number, due to two's complement.\n      if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {\n        // be consistent with non-wasm code path\n        return this;\n      }\n  \n      var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (this.isZero()) return this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n  \n    if (!this.unsigned) {\n      // This section is only relevant for signed longs and is derived from the\n      // closure library as a whole.\n      if (this.eq(MIN_VALUE)) {\n        if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n        else if (divisor.eq(MIN_VALUE)) return ONE;else {\n          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n          var halfThis = this.shr(1);\n          approx = halfThis.div(divisor).shl(1);\n  \n          if (approx.eq(ZERO)) {\n            return divisor.isNegative() ? ONE : NEG_ONE;\n          } else {\n            rem = this.sub(divisor.mul(approx));\n            res = approx.add(rem.div(divisor));\n            return res;\n          }\n        }\n      } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\n  \n      if (this.isNegative()) {\n        if (divisor.isNegative()) return this.neg().div(divisor.neg());\n        return this.neg().div(divisor).neg();\n      } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n  \n      res = ZERO;\n    } else {\n      // The algorithm below has not been made for unsigned longs. It's therefore\n      // required to take special care of the MSB prior to running it.\n      if (!divisor.unsigned) divisor = divisor.toUnsigned();\n      if (divisor.gt(this)) return UZERO;\n      if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n        return UONE;\n      res = UZERO;\n    } // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n  \n  \n    rem = this;\n  \n    while (rem.gte(divisor)) {\n      // Approximate the result of division. This may be a little greater or\n      // smaller than the actual value.\n      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or\n      // the smallest non-fractional digit, whichever is larger.\n  \n      var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n          delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\n          // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      approxRes = fromNumber(approx),\n          approxRem = approxRes.mul(divisor);\n  \n      while (approxRem.isNegative() || approxRem.gt(rem)) {\n        approx -= delta;\n        approxRes = fromNumber(approx, this.unsigned);\n        approxRem = approxRes.mul(divisor);\n      } // We know the answer can't be zero... and actually, zero would cause\n      // infinite recursion since we would make no progress.\n  \n  \n      if (approxRes.isZero()) approxRes = ONE;\n      res = res.add(approxRes);\n      rem = rem.sub(approxRem);\n    }\n  \n    return res;\n  };\n  /**\n   * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  \n  LongPrototype.div = LongPrototype.divide;\n  /**\n   * Returns this Long modulo the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.modulo = function modulo(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor); // use wasm support if present\n  \n    if (wasm) {\n      var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    return this.sub(this.div(divisor).mul(divisor));\n  };\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  \n  LongPrototype.mod = LongPrototype.modulo;\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.rem = LongPrototype.modulo;\n  /**\n   * Returns the bitwise NOT of this Long.\n   * @this {!Long}\n   * @returns {!Long}\n   */\n  \n  LongPrototype.not = function not() {\n    return fromBits(~this.low, ~this.high, this.unsigned);\n  };\n  /**\n   * Returns count leading zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.countLeadingZeros = function countLeadingZeros() {\n    return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n  };\n  /**\n   * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.clz = LongPrototype.countLeadingZeros;\n  /**\n   * Returns count trailing zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  LongPrototype.countTrailingZeros = function countTrailingZeros() {\n    return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n  };\n  /**\n   * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.ctz = LongPrototype.countTrailingZeros;\n  /**\n   * Returns the bitwise AND of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  LongPrototype.and = function and(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise OR of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.or = function or(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise XOR of this Long and the given one.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.xor = function xor(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shiftLeft = function shiftLeft(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shl = LongPrototype.shiftLeft;\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRight = function shiftRight(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shr = LongPrototype.shiftRight;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);\n    if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n    return fromBits(this.high >>> numBits - 32, 0, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits rotated to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotl = LongPrototype.rotateLeft;\n  /**\n   * Returns this Long with bits rotated to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotr = LongPrototype.rotateRight;\n  /**\n   * Converts this Long to signed.\n   * @this {!Long}\n   * @returns {!Long} Signed long\n   */\n  \n  LongPrototype.toSigned = function toSigned() {\n    if (!this.unsigned) return this;\n    return fromBits(this.low, this.high, false);\n  };\n  /**\n   * Converts this Long to unsigned.\n   * @this {!Long}\n   * @returns {!Long} Unsigned long\n   */\n  \n  \n  LongPrototype.toUnsigned = function toUnsigned() {\n    if (this.unsigned) return this;\n    return fromBits(this.low, this.high, true);\n  };\n  /**\n   * Converts this Long to its byte representation.\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @this {!Long}\n   * @returns {!Array.<number>} Byte representation\n   */\n  \n  \n  LongPrototype.toBytes = function toBytes(le) {\n    return le ? this.toBytesLE() : this.toBytesBE();\n  };\n  /**\n   * Converts this Long to its little endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Little endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesLE = function toBytesLE() {\n    var hi = this.high,\n        lo = this.low;\n    return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];\n  };\n  /**\n   * Converts this Long to its big endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Big endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesBE = function toBytesBE() {\n    var hi = this.high,\n        lo = this.low;\n    return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];\n  };\n  /**\n   * Creates a Long from its byte representation.\n   * @param {!Array.<number>} bytes Byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytes = function fromBytes(bytes, unsigned, le) {\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n  };\n  /**\n   * Creates a Long from its little endian byte representation.\n   * @param {!Array.<number>} bytes Little endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);\n  };\n  /**\n   * Creates a Long from its big endian byte representation.\n   * @param {!Array.<number>} bytes Big endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);\n  };\n  \n  var _default = Long;\n  exports.default = _default;\n  return \"default\" in exports ? exports.default : exports;\n})({});\nif (typeof define === 'function' && define.amd) define([], function() { return Long; });\nelse if (typeof module === 'object' && typeof exports==='object') module.exports = Long;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./index.js\");\n"],"names":["module","exports","Base64","Bits","Convert","Hex","Long","KEY_STR","ENC_LUT","DecodeError","Error","LegacyEncoder","base64_encode","input","let","output","i","chr1","charCodeAt","chr2","chr3","enc1","enc2","enc3","enc4","isNaN","charAt","length","base64_decode","String","fromCharCode","isNode","window","hasBuffer","Buffer","hasBlob","Blob","BufferEncoder","str","from","toString","WindowEncoder","b","a","encode","decode","get","val","shift","numBits","set","dataIn","curMask","shiftedVal","data","ErrorSubcode","OperationError","BufferImpl","TWO_ZEROES_STR","THREE_ZEROES_STR","FOUR_ZEROES_STR","BYTEARRAY_CONVERT_CHUNK","UNSIGNED_LSHIFT_24","ARRAY_BUFFER_CONVERT_CHUNK","stringToUint8Array","dataLength","arrayBuf","ArrayBuffer","uint8Array","Uint8Array","arrayBufferToString","ab","len","byteLength","u8","apply","k","r","subarray","stringToArrayBuffer","buffer","int8ToStr","int8","int16ToStr","int16","int24ToStr","int24","int32ToStr","int32","int64ToStr","int64","high","low","byteArrayToStr","byteArray","slice","strToByteArray","result","strToHexArray","toHex","c","Array","prototype","map","call","split","strToInt8","strToInt16","strToInt24","strToInt32","strToUInt32","strToUInt64","fromBits","substr","ucs2ToUtf8","ucs2","unescape","encodeURIComponent","utf8ToUcs2","utf8","decodeURIComponent","escape","anythingToBuffer","value","isBuffer","byteOffset","PARAMETER_OUT_OF_RANGE","numToHex","n","s","formatHexString","obj","isArray","join","_","Debug","Destination","ESKit","Factory","FSM","Log","Message","Publisher","SDT","Session","SMF","SolcacheSession","TestEnv","Transport","Util","Validate","FactoryLib","SolclientFactory","SolclientFactoryProfiles","SolclientFactoryProperties","DestinationType","Topic","NotImplementedError","RequestError","RequestEventCode","makeIterator","ConsoleLogImpl","LogImpl","LogLevel","MessageCacheStatus","MessageDeliveryModeType","MessageDumpFlag","MessageType","MessageUserCosType","ReplicationGroupMessageId","MessageConsumer","MessageConsumerAcknowledgeMode","MessageConsumerEventName","MessageConsumerProperties","QueueBrowser","QueueBrowserEventName","QueueBrowserProperties","ReplayStartLocation","ReplayStartLocationBeginning","MessagePublisherAcknowledgeMode","MessagePublisherProperties","AbstractQueueDescriptor","QueueAccessType","QueueDescriptor","QueueDiscardBehavior","QueuePermissions","QueueProperties","QueueType","SDTField","SDTFieldType","SDTMapContainer","SDTStreamContainer","SDTUnsupportedValueError","SDTValueErrorSubcode","AuthenticationScheme","CapabilityType","MessageRxCBInfo","MutableSessionProperty","SessionEvent","SessionEventCBInfo","SessionEventCode","SessionProperties","SessionState","SslDowngrade","CacheCBInfo","CacheLiveDataAction","CacheRequestResult","CacheReturnCode","CacheReturnSubcode","CacheSession","CacheSessionProperties","StatType","TransportError","TransportProtocol","Version","_internal","solace","Object","assign","PRINTABLE_LUT","tmp","SPACER","UNPRINTABLE","formatDumpBytes","showDecode","leftPadding","StringBuffer","StringUtils","isEmpty","padLeft","padRight","ascii","line","lineBytes","asciiOffset","dataLen","ccode","append","clear","parseSMFStream","Decode","decodeCompoundMessage","Codec","LOG_WARN","LOG_ERROR","pos","incomingMsg","smf","smfHeader","smf_protocol","messageLength","DestinationFromNetwork","DestinationUtil","Parameter","Queue","createTopicDestination","createFactory","isString","topicName","createFromName","createTopic","createDurableQueueDestination","queueName","createFromLocalName","QUEUE_PREFIX","QUEUE_PREFIX_LEN","TEMPORARY_QUEUE_PREFIX","createDestinationFromName","networkTopicName","networkTopicBytes","undefined","spec","name","bytes","encodeBytes","startsWith","offset","type","QUEUE","TEMPORARY_QUEUE","createDestinationFromBytes","decodeBytes","Enum","TOPIC","new","_setCanonical","SolclientFactoryLib","SubscriptionInfo","UUID","ProfileBinding","toSafeChars","stripNullTerminate","DESTINATION_PREFIX_FROM_TYPE","createTemporaryName","vrid","id","generateUUID","describe","createPrefix","createOperationError","errorStr","INVALID_TOPIC_SYNTAX","legacyValidate","exceptionCreator","bind","error","nameLength","bytesLength","isWildcarded","topicUtf8Encode","prefix","networkName","validateAndEncode","constError","subscriptionInfo","keys","some","prefixType","errorConst","subInfo","subInfoConst","parseFromName","constructor","this","_name","_type","_bytes","_offset","isValidated","_isValidated","_isWildcarded","_subscriptionInfo","getName","getType","getBytes","getOffset","validate","_error","getSubscriptionInfo","util_inspect","equals","other","valueOf","DestinationUtilLib","assert","super","encoding","subscriptionParseNoExport","NOEXPORT_PREFIX","NOEXPORT_PREFIX_LEN","index","isNoExport","subscriptionParseShare","SHARE_PREFIX","SHARE_PREFIX_LEN","LEVEL_DELIMETER","LEVEL_DELIMETER_LEN","groupIndex","shareGroup","isShare","indexOf","substring","dispatchTopicIndex","subscriptionStringParse","layers","parseLayers","constOffset","constResult","SUBSCRIPTION_LAYER_PARSER_FROM_TYPE","_layers","parse","_isShare","_isNoExport","_dispatchTopicIndex","_shareGroup","parser","apiEnv","envObject","global","BUILD_ENV","TEST","target","ErrorResponseSubcodeMapper","SolaceError","makeMap","SC","ROOT_MAPPING","CLIENT_NAME_INVALID","MESSAGE_TOO_LARGE","INACTIVITY_TIMEOUT","SUBSCRIPTION_TOO_MANY","NOLOCAL_DISCARD","OUT_OF_RESOURCES","SUBSCRIPTION_ALREADY_PRESENT","SUBSCRIPTION_ATTRIBUTES_CONFLICT","SUBSCRIPTION_NOT_FOUND","SUBSCRIPTION_INVALID","UNKNOWN_TRANSPORT_SESSION_ID","XML_PARSE_ERROR","LOGIN_FAILURE","BASIC_AUTHENTICATION_IS_SHUTDOWN","CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN","CLIENT_NAME_ALREADY_IN_USE","CLIENT_USERNAME_IS_SHUTDOWN","DYNAMIC_CLIENTS_NOT_ALLOWED","INVALID_VIRTUAL_ADDRESS","CLIENT_ACL_DENIED","MESSAGE_VPN_NOT_ALLOWED","PUBLISH_ACL_DENIED","REPLICATION_IS_STANDBY","SELECTOR_DOES_NOT_MATCH","SUBSCRIPTION_ACL_DENIED","SUBSCRIPTION_DOES_NOT_MATCH","SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED","SHARED_SUBSCRIPTIONS_NOT_ALLOWED","LOW_PRIORITY_MSG_CONGESTION","MESSAGE_VPN_UNAVAILABLE","GM_UNAVAILABLE","SPOOL_OVER_QUOTA","CLIENT_DELETE_IN_PROGRESS","TOO_MANY_CLIENTS","MAX_MESSAGE_USAGE_EXCEEDED","GM_NOT_READY","AD_MAPPING","ALREADY_BOUND","ENDPOINT_ALREADY_EXISTS","ENDPOINT_PROPERTY_MISMATCH","INVALID_DTE_NAME","INVALID_SELECTOR","INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT","QUEUE_NOT_FOUND","QUOTA_OUT_OF_RANGE","UNKNOWN_FLOW_NAME","UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND","PERMISSION_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED","REPLAY_TEMPORARY_NOT_SUPPORTED","UNKNOWN_START_LOCATION_TYPE","MISMATCHED_ENDPOINT_ERROR_ID","REPLAY_START_MESSAGE_NOT_AVAILABLE","TOPIC_ENDPOINT_SHUTDOWN","MAX_CLIENTS_FOR_TE","MAX_CLIENTS_FOR_QUEUE","NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT","NO_SUBSCRIPTION_MATCH","QUEUE_SHUTDOWN","UNKNOWN_TOPIC_ENDPOINT_NAME","UNKNOWN_QUEUE_NAME","REPLAY_DISABLED","REPLAY_CANCELLED","REPLAY_MESSAGE_UNAVAILABLE","REPLAY_STARTED","REPLAY_MESSAGE_REJECTED","REPLAY_LOG_MODIFIED","OUT_OF_REPLAY_RESOURCES","TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT","REPLAY_FAILED","REPLAY_START_TIME_NOT_AVAILABLE","getSubcodeMappingInner","root","respErrorCode","respStr","codeMap","searchKey","toLowerCase","foundKey","find","mapKey","getSubcodeMapping","UNKNOWN_ERROR","getErrorSubcode","getADErrorSubcode","NO_ERROR","SESSION_NOT_CONNECTED","INVALID_SESSION_OPERATION","INVALID_OPERATION","TIMEOUT","PARAMETER_CONFLICT","PARAMETER_INVALID_TYPE","INTERNAL_ERROR","INSUFFICIENT_SPACE","PROTOCOL_ERROR","COMMUNICATION_ERROR","KEEP_ALIVE_FAILURE","TOPIC_MISSING","SUBSCRIPTION_ERROR_OTHER","NO_LOCAL_NOT_SUPPORTED","DATA_ERROR_OTHER","CREATE_XHR_FAILED","CONNECTION_ERROR","DATA_DECODE_ERROR","AD_MESSAGING_NOT_SUPPORTED","CREATE_WEBSOCKET_FAILED","UNEXPECTED_UNBIND","MESSAGE_DELIVERY_MODE_MISMATCH","MESSAGE_ALREADY_ACKNOWLEDGED","CALLBACK_ERROR","FAILED_LOADING_TRUSTSTORE","FAILED_LOADING_CERTIFICATE_AND_KEY","UNRESOLVED_HOSTS","REPLAY_NOT_SUPPORTED","COMPRESSED_TLS_NOT_SUPPORTED","SHARED_SUBSCRIPTIONS_NOT_SUPPORTED","MESSAGE_ID_NOT_COMPARABLE","message","subcode","reason","SUBCODE_FROM_EC","REQUEST_ABORTED","REQUEST_TIMEOUT","eventCode","correlationKey","_eventCode","_correlationKey","_requestEventCode","superObj","requestEventCode","infoStr","captureStackTrace","stack","ArrayOperations","BidiMap","Iterator","Lazy","Mixin","Resolver","SetOperations","mixin","resolve","defaultComparator","astr","bstr","insertOrdered","array","element","comparator","inplaceInsertOrdered","min","max","splice","pairs","forward","Map","reverse","forEach","setValues","p","key","enumName","instance","matches","filter","enumValues","Set","values","defineProperties","_canonical","enumerable","writable","configurable","final","descriptor","getOwnPropertyDescriptor","defineProperty","enumValue","noneValue","unknownValue","nameOf","strings","arr","start","end","_arr","_index","_end","deref","incr","DEFAULT_PROPERTY_OPTIONS","setPropertyValue","options","lazyProperty","evalFn","lazyProperties","lazyValue","keyValuePairs","add","targetProto","addProto","getOwnPropertyNames","traversePath","commonSource","keySource","pathArr","reduce","source","compoundKey","trim","rawPath","path","concat","isSuperset","subset","every","elem","has","inplaceUnion","setA","setB","union","inplaceIntersection","delete","intersection","inplaceDifference","difference","EventEmitter","Timer","NodeEventEmitter","ArrayUtils","flatten","includes","NODE_DEFAULT_EVENTS","BLACKLIST_DIRECT","buildFilter","emits","emitSet","el","emitArray","DISABLED_ACTIONS","ignore","fail","direct","unsafe","formatEventName","bareEmit","emit","_installDirectFilter","_installErrorHandlers","_installEmitVerifier","_listenerVerificationFilter","_emits","_defaultEmitDirect","args","emitDirect","_directEventName","on","eventName","listener","_verifyListenerEvent","ret","_setEmitDirect","addListener","once","prependListener","prependOnceListener","removeAllListeners","removeListener","listenerCount","directListenerCount","setOnFirstDirectListener","_onFirstDirectListener","firstDirect","onListener","event","throwInternal","err","emitBase","_internalError","ex","formatErrorEvent","info","formattedName","innerEx","disableEmitter","cancel","interval","onInterval","timerRef","setInterval","clearInterval","timeout","onExpire","setTimeout","clearTimeout","FactoryProfile","binding","guaranteedMessagingEnabled","cometEnabled","byteArrayAsString","Version7Profile","legacyInstance","Version10Profile","v10Instance","Version105Profile","forwardInstance","_legacy","_v10","_forward","_default","version7","version10","version10_5","APIProperties","Check","getDefaultLogLevel","INFO","logLevel","logger","_profile","profile","number","_logLevel","_logger","factoryState","initializeCount","initializers","addInitializer","func","push","init","factoryProps","props","isInstanceOf","initializer","reset","_getInitializeCount","Flow","FlowOperation","PrivateFlowEventName","CONNECT","DISCONNECT","START","STOP","DISPOSE","GET_STATS","RESET_STATS","GET_PROPERTIES","GET_DESTINATION","LogFormatter","Stats","ALWAYS_OPS","flowProperties","sessionInterfaceFactory","emitterOptions","emitterOptionsFull","sessionInterface","self","sessionIdHex","flowIdDec","log","wrap","_disposing","_disposed","_userDisconnected","_properties","_sessionInterface","_stats","_privateEventEmitter","_emit","_on","_once","_removeListener","clearStats","_operationCheck","resetStats","connect","userDisconnected","dispose","terminate","getDisposedEvent","_fsm","_midDispatch","terminateWithRunningFSM","terminateFsm","disconnect","_disconnectSession","getProperties","clone","getStat","statType","handleUncorrelatedControlMessage","incStat","processFSMEvent","processEvent","disposed","flowId","_session","_userDisconnecte","operation","v","_isDisconnected","BIND_WAITING","FsmEvent","State","StateMachine","StateLib","FsmObject","EntryPoint","entryPointName","innerState","impl","outerState","state","parentContext","getParent","initial","transitionTo","getDestState","ExitPoint","exitPointName","extraStringInfo","getExtraStringInfo","StateContext","logPadding","getStateMachine","ancestorList","initialReaction","action","ReactionResult","caller","destState","getFinalState","getAncestorList","onInitial","external","processReactionResult","e","curContext","destStateIter","lowestCommonAncestor","onExit","onEntry","destInitial","reactionResult","destAncestorList","setLogPadding","padding","isRunning","eventQueue","finalState","handleUncaughtException","ev","exc","process","processingEvents","evt","_onEventCompletion","getCurrentState","currentState","handleEvent","curState","setPostEventAction","postEventAction","getActiveState","activeStates","isStateActive","unhandledEventReaction","handleUnhandledEvent","uncaughtExceptionReaction","extensions","reactions","entryPoints","exitPoints","extension","repeat","reaction","entryPoint","exitPoint","getEntryPointDestState","getExitPointDestState","entry","appEntryFunc","exit","appExitFunc","externalTransitionTo","transitionToEntryPoint","transitionToExitPoint","eventUnhandled","internalTransition","GlobalBinding","isEnumMember","isFunction","getImpl","getLogLevel","setImpl","setLogLevel","forwarder","buildLogForwarder","trace","TRACE","debug","DEBUG","warn","WARN","ERROR","fatal","addGlobalFuncs","toUpperCase","formatter","_formatter","genericFunction","targetSelf","newLevel","Binding","STUB","generateLogHeader","levelStr","date","Date","levelStrPadding","YY","getFullYear","MM","getMonth","DD","getDate","hh","getHours","mm","getMinutes","ss","getSeconds","ms","getMilliseconds","consoleIn","_trace","_debug","_info","_warn","_fatal","console","Function","level","LogBinding","FATAL","ConsumerFlows","ConsumerFSMEvent","ConsumerFSMEventNames","MessageConsumerEvent","ApplicationAckState","UNACKED","ACKED_NOT_SENT","ACKED_SENT","ApplicationAck","exists","ApplicationAckRingBuffer","size","_size","_insertIndex","_buffer","fill","ack","insert","beforeEvictCallback","insertIndex","inserting","evictingIndex","evicting","front","firstIndex","rawIndex","lastIndex","readIndex","callback","updateAckState","updateIndex","existing","_allFlows","_reconnectingFlows","_flowsById","flow","flowUp","flowDisposed","flowById","flowReconnecting","flowReconnected","flowDown","UP","RECONNECTED","DISPOSED","RECONNECTING","DOWN","DOWN_ERROR","getFlowById","disposeAll","SESSION_UP","SESSION_UP_NO_AD","SESSION_DOWN","SESSION_DISCONNECT","FLOW_FAILED","FLOW_UP","FLOW_ACTIVE_IND","FLOW_CLOSE","FLOW_OPEN","FLOW_UNBOUND","ACK","ACK_TIMEOUT","BIND_TIMEOUT","CREATE_TIMEOUT","UNBIND_TIMEOUT","CAN_SEND","TRANSPORT_ERROR","VIRTUALROUTER_NAME_CHANGED","RECONNECT_INTERVAL_TIMEOUT","BIND_RESPONSE","CREATE_FAILED","CREATE_SUCCESS","details","SMFLib","ConsumerStateNames","MessageDispatcher","RgmidFactory","TransportAcks","TransportAckResult","RING_BUFFER_SIZE","ZERO_APP_ACK","UZERO","ConsumerFSM","consumer","properties","fsm","LOG_INFO","autoAck","acknowledgeMode","AUTO","_consumer","_acknowledgeTimeoutInMsecs","acknowledgeTimeoutInMsecs","_acknowledgeThreshold","acknowledgeThreshold","_localPreferredWindowSize","windowSize","_localMaxWindowSize","_messageDispatch","emitter","_resetRemoteConnectionState","_resetLocalConnectionState","_replayStartLocation","replayStartLocation","_errorCausingReconnect","emitEventActionType","startDispatchActionType","stopDispatchActionType","postEventActions","preprocessPostEventActions","startIndex","actionLocations","cancelAction","firstActionName","cancellingActionName","firstLocation","ACTIVE","INACTIVE","processPostEventActions","preprocessedActions","requestStartDispatchFSM","addPostEventAction","newEvent","addEventToEmit","activeIndicationEnabled","requestStartDispatch","requestStopDispatch","requestStopDispatchFSM","_addEventToEmit","_requestStartDispatch","_requestStopDispatch","emitBindFailed","CONNECT_FAILED_ERROR","emitRebindFailed","verifyEndpointSubscription","destination","isCapable","SHARED_SUBSCRIPTIONS","checkCapabilitiesChoicePoint","MESSAGE_REPLAY","topicEndpointSubscription","Unbound","createIfMissing","queueDescriptor","durable","CreateSent","BindSent","handleAccidentalBind","msg","correlationTag","getCorrelationTag","AdProtocolMessage","getCloseMessageConsumer","sendControl","enqueueRequest","connectTimeoutInMsecs","transitionToUnbound","_dispose","context","UNBOUND","emitDisabledEvent","GM_DISABLED","AwaitSessionUp","GUARANTEED_MESSAGE_CONSUME","AwaitFlowOpen","_connectAttempts","connectAttempts","UNBOUND_AWAIT_SESSION_UP","emitBindWaiting","UNBOUND_AWAIT_FLOWOPEN","BindSentExtensions","sendBindRequest","transportAcks","_transportAcks","_endpointEnsure","endpoint","_endpoint","subscription","_subscription","getOpenMessageConsumer","queueProperties","noLocal","lastAcked","lastReceived","browser","endpointErrorId","handleBindTimeout","handleBindResponse","cancelBindRequestTimer","bindRequestTimer","handleExpectedBind","accessTypeOrDefault","x","EXCLUSIVE","attrs","lastMsgIdAcked","getLastMsgIdAcked","getFlowId","accessType","getAccessType","topicEndpointBytes","getTopicEndpointBytes","grantedPermissions","getGrantedPermissions","allOthersPermissions","getAllOthersPermissions","respectsTTL","getRespectsTTL","activeFlow","getActiveFlow","wantFlowChangeNotify","getWantFlowChangeNotify","discardBehavior","getQueueDiscardBehavior","deliveryCountSent","getEndpointDeliveryCountSent","endpointId","getEndpointId","maxUnackedMessages","getMaxUnackedMessages","getEndpointErrorId","spoolerUniqueId","getSpoolerUniqueId","quota","getQuota","maxMsgSize","getMaxMsgSize","maxRedelivery","getMaxRedelivery","queueDiscardBehavior","permissions","BR_REPLAY_ERRORID","consumerProperties","quotaMB","maxMessageSize","maxMessageRedelivery","NONE","_active","_remoteWindowSize","eq","msgType","SMFAdProtocolMessageType","BIND","PROTOTOCOL_ERROR","header","responseCode","pm_respcode","RX_DISCARD_SMF_UNKNOWN_ELEMENT","description","pm_respstr","errorSubcode","respEvent","BIND_SENT","newTimeout","UnbindSent","FlowUp","Reconnecting","reconnectAttempts","RBindSent","RAwaitSessionUp","RECONNECTING_AWAIT_SESSION_UP","RECONNECTING_BIND_SENT","RAwaitTimer","RECONNECTING_AWAIT_TIMER","handleReconnectIntervalTimeout","cancelReconnectIntervalTimer","reconnectIntervalTimer","reconnectIntervalInMsecs","flowUpFSM","XferInactive","Xfer","transitionToUnboundFromUp","FLOW_UP_XFER","_sendAcks","FLOW_UP_XFER_INACTIVE","UNBIND_SENT","sendUnbindRequest","_endpointClear","handleUnbindTimeout","response","handleUnbindResponse","getCurrentStateName","UNBIND","CREATE_SENT","sendCreateRequest","getCreate","handleCreateTimeout","handleCreateResponse","CREATE","acceptMessage","messageID","getGuaranteedMessageId","idstr","_fsmDispatch","RX_DISCARD_NO_MATCHING_CONSUMER","setDeliveryCount","messageSuid","_getSpoolerUniqueId","INVALID_SUID","_setSpoolerUniqueId","consumerSuidStr","msgSuidStr","ackResult","tryReceive","getGuaranteedPreviousMessageId","transportAckRequired","acksPending","maxPendingAcks","OK","DUPLICATE","RX_DISCARD_DUPLICATE","_applicationAcks","_oldUnacked","_sendAck","_setTransportAckTimer","OUT_OF_ORDER","RX_DISCARD_OUT_OF_ORDER","applicationAckRequired","applicationAck","messageId","RX_ACKED","getDestination","_destination","isDisconnected","UNBOUND_AWAITING_FLOWOPEN","requestStartDispatchUser","_userDispatch","applyStartDispatch","unbindAck","getUnbindAck","_flowId","requestStopDispatchUser","stop","_clearTransportAckTimer","_transportAckTimer","_unacked","createDestinationFromDescriptor","createTemporaryDestination","applicationAcks","transportAck","getAck","_addAckToRanges","acksPendingState","currentRange","ackRanges","MAX_CLIENT_ACK_RANGES","bareRanges","range","forceTransportAck","g","setAcked","ackRange","Math","Number","POSITIVE_INFINITY","maxWindowSize","UNBOUND_AWAIT_ANY","CLIENT","MESSAGE","SUBSCRIPTION_OK","SUBSCRIPTION_ERROR","messageConsumerEventName","_messageConsumerEventName","_infoStr","_responseCode","_errorSubcode","_reason","QueueDescriptorValidator","QueuePropertiesValidator","APIPropertiesValidators","validateInstance","valBoolean","valInstance","valIsMember","valNumber","valRange","valTopicStringOrEmpty","valTopicEndpointSubscription","typeDesc","TOPIC_ENDPOINT","isDurable","MessageConsumerPropertiesValidator","rawProperties","hasOwnProperty","something","MAX_VALUE","QueueLib","DEFAULTS","transportAcknowledgeTimeoutInMsecs","transportAcknowledgeThresholdPercentage","_browser","_queueDescriptor","_queueProperties","_bindTimeoutInMsecs","_topicEndpointSubscription","_acknowledgeMode","_transportAcknowledgeTimeoutInMsecs","_transportAcknowledgeThresholdPercentage","_activeIndicationEnabled","newValue","_noLocal","_windowSize","_reconnectAttempts","_reconnectIntervalInMsecs","_createIfMissing","localCounter","getConsumerLocalName","applyProperties","superFormatter","_makeFSM","_onFlowActive","_onFlowDisconnected","_onFlowUp","getCapability","handleDataMessage","setMessageConsumer","FLOWCHANGEUPDATE","active","onVRNChanged","_accessType","_queueDiscardBehavior","_respectsTTL","_permissions","isActive","_disposeFSM","addSubscription","topic","requestTimeout","success","subCode","respCode","respText","updateQueueSubscription","removeSubscription","queue","dispatch","_dispatchOne","_dispatchOneAutoAck","_dispatchOneBare","_onFirstMessageListener","_availableListener","_flush","caught","isAcknowledged","acknowledge","messageConsumer","_messageConsumer","_setupEventListers","_onConsumerUp","_onConsumerConnectFailed","_onConsumerDown","_onConsumerDownError","_onConsumerMessage","_onConsumerDisposed","_onConsumerGMDisabled","removeMessageFromQueue","_guaranteedMsgId","_acked","base","fromNumber","fromValue","_acksPending","ZERO","prevMessageID","_lastReceived","lt","gte","_lastAcked","MessagePublisher","MessagePublisherEventName","MessagePublisherPropertiesValidator","PublisherFSMEvent","PublisherFSMEventNames","_lastSent","_next","longToString","MessageIds","setLastSent","lastSent","next","PER_MESSAGE","WINDOWED","ACKNOWLEDGED_MESSAGE","FLOW_NAME_CHANGED","GUARANTEED_MESSAGING_DOWN","REJECTED_MESSAGE","DISCONNECT_FAILED_ERROR","TRANSPORT_FULL","TransportCapabilities","defaultEnablePublisher","globallyEnabled","webSocketAvailable","web","webSocket","getDefaults","enabled","connectRetryCount","_enabled","defined","_connectRetryCount","_connectTimeoutInMsecs","PublisherFSM","_bindWaiting","_onBindWaiting","_onBindFailed","_onDown","_onUp","publisher","_flowName","_publisherId","handleAck","handleNack","ctrlMessage","nack","CLIENTACK","CLIENTNACK","CLOSEPUBFLOW","prepareAdMessageAndSend","dataMsg","isBindWaiting","publisherId","RESEND_COMPLETE","smfmessage","getEventText","_eventText","SolclientSession","PublisherStateNames","TransportReturnCode","ConnectReason","INIT","RESUME","FAILOVER","_publisher","_stateEvents","_guaranteedEnabled","_sendWindow","_resetConnectedInfo","_notifiedWindowClosed","_transportFlowControlled","PublisherUnbound","emitDownAndBindWaiting","PublisherOpenFlowSent","OPENFLOWSENT","emitOpenFlowFailedError","handleOpenFlowResponse","adpMsg","smfRespHeader","OPENPUBFLOW","returnCode","mappedSubcode","lastMsgIDAcked","getWindow","flowName","getFlowName","getPublisherId","_messageIds","_unackedList","_connectReason","messages","count","oldId","_renumber","setFlowId","setPublisherId","payloadSizeLimit","MAX_GUARANTEED_MSG_SIZE","getValue","_memoized_payload","_handleAck","_firstUnackedToSend","handleOpenFlowTimeout","handleUnknownFlowName","sendOpenFlow","openPubFlowMsg","getOpenMessagePublisher","rxMsgObj","PublisherCloseFlowSent","PublisherUp","pEvent","CLOSEFLOWSENT","handleCloseFlowResponse","handleCloseFlowTimeout","sendCloseFlow","closePubFlowMsg","getCloseMessagePublisher","_handleAckEvent","emitFlowUp","PublisherRetransmitting","PublisherDataXfer","_scheduleStateEvents","DATA_XFER","_maybeEmitCanSend","PublisherFlowControlled","FLOW_CONTROLLED","RETRANSMITTING","retransmit","_resendFromUnacked","TX_WINDOW_CLOSED","unackedList","_payload_is_memoized","_memoized_csumm","dupMsg","payloadSize","Encode","adaptMessageToSmf_payloadMemoize","_cloneNumbers","msgId","sendToTransport","NO_SPACE","setRedelivered","_startAckTimer","pop","TX_ACKS_RXED","openFlow","messageIds","reportAcked","reportNacked","numAcked","lastAckedMessage","_resetAckTimer","_clearAckTimer","list","resendIndex","m","sendData","failover","_ackTimer","_emitStateEvents","pair","_handleAckTimeout","TX_ACK_TIMEOUT","current","setGuaranteedPreviousMessageId","setGuaranteedMessageId","fromMsg","toMsg","_setPostEventAction","desc","_postEventAction","FAILED","MessageDumpStandardProvider","MessageDumpUtil","createMessage","createReplicationGroupMessageId","fromString","LIVE","CACHED","SUSPECT","DIRECT","PERSISTENT","NON_PERSISTENT","MSGDUMP_BRIEF","MSGDUMP_FULL","DebugLib","MessageDumpUtilLib","fpDestination","dest","fpSenderId","getSenderId","fpAppmsgType","getApplicationMessageType","fpAppMsgId","getApplicationMessageId","fpSequenceNumber","sequenceNum","getSequenceNumber","fpTopicSequenceNumber","topicSeqNo","getTopicSequenceNumber","isLong","fpCorrelationId","getCorrelationId","fpHttpContentType","fpHttpContentEncoding","fpSendTimestamp","timestamp","getSenderTimestamp","mdu","formatDate","fpRcvTimestamp","getReceiverTimestamp","fpClassOfService","cos","getUserCos","fpDeliveryMode","mode","getDeliveryMode","fpGuaranteedMsgId","fpReplicationGroupMessageId","rgmid","getReplicationGroupMessageId","fpTimeToLive","timeToLive","getTimeToLive","d","getTime","fpExpiration","getGMExpiration","fpMessageDMQEligible","isDMQEligible","fpMessageRedelivered","isRedelivered","fpMessageDeliveryCount","getDeliveryCount","fpDiscardIndication","isDiscardIndication","fpAckImmediately","isAcknowledgeImmediately","fpElidingEligible","isElidingEligible","fpReplyMessage","isReplyMessage","fpReplyTo","replyTo","getReplyTo","fpDeliverToOne","isDeliverToOne","fpCacheMessage","getCacheStatus","fpCacheRequestId","cacheRequestId","getCacheRequestId","fpUserPropertyMap","flags","propMap","getUserPropertyMap","getKeys","detailValue","printMap","fpCorrelationTag","strValue","getCorrelationKey","fpUserData","notEmpty","getUserData","fpSdtStream","sdtFieldValue","getSdtContainer","STREAM","countItems","printStream","fpSdtMap","MAP","fpBinaryAttachment","_binaryAttachment","att","fpXmlContent","xml","getXmlContent","fpXmlMetadata","xmlMetadata","getXmlMetadata","MessageDumpStandardProviderLib","MessageDumpState","providers","getOutOfRangeValue","rawData","sdtField","getSubcode","VALUE_OUTSIDE_SUPPORTED_RANGE","getSourceData","sdtMap","indent","nothing","lines","strIndent","sort","getField","BYTEARRAY","sdtStream","rewind","hasNext","getNext","DESTINATION","timeStamp","dump","separator","colPadding","sb","theSeparator","needSeparator","theColPadding","dumpProviders","provider","isPresent","BINARY","TEXT","COS1","COS2","COS3","SDTCodec","isBoolean","isInstanceOfOrNothing","isNumberOrNothing","isStringOrNothing","MESSAGE_CLONE_OPTIONS","circular","includeNonEnumerable","initMessage","_deliveryMode","_userCos","_cacheStatus","_spoolerUniqueId","_priority","_deliveryCount","clearMessage","fields","f","_messageType","setApplicationMessageId","_applicationMessageId","setApplicationMessageType","_applicationMessageType","getBinaryAttachment","setBinaryAttachment","_setBinaryAttachment","_cacheRequestId","_setCacheRequestID","cacheRequestID","_correlationId","setCorrelationId","setCorrelationKey","_deliverToOne","setDeliverToOne","_setDeliverToOne","setDeliveryMode","_setDeliveryMode","setDestination","_setDestination","_discardIndication","setDiscardIndication","_setDiscardIndication","_elidingEligible","setElidingEligible","_setElidingEligible","getPublisherMessageId","_publisherMsgId","setPublisherMessageId","_timeToLive","setTimeToLive","MAX_MESSAGE_TTL_MS","_expiration","setGMExpiration","_dmqEligible","setDMQEligible","_setDMQEligible","_guaranteedPrevMsgId","getMessageConsumer","_setSpoolerMessageId","_spoolerMessageId","smid","suid","msgid","_topicSequenceNumber","setTopicSequenceNumber","deliveryCount","canAck","_ackImmediately","setAcknowledgeImmediately","_setAcknowledgeImmediately","_setCacheStatus","cacheStatus","_replyMessage","_redelivered","setAsReplyMessage","_receiverTimestamp","_replyTo","setReplyTo","_senderId","setSenderId","_senderTimestamp","setSenderTimestamp","_sequenceNumberError","_sequenceNumber","setSequenceNumber","_autoSequenceNumber","getPriority","setUserCos","_setUserCos","setPriority","_setPriority","_userData","setUserData","_setUserData","_xmlContent","getXmlContentDecoded","setXmlContent","setValue","_setXmlContentInternal","setXmlMetadata","_setXmlMetadata","_xmlMetadata","_binaryMetaChunk","meta","_smfHeader","_autoSenderTimestamp","_userPropertyMap","setUserPropertyMap","setSdtContainer","container","structuredContainer","_structuredContainer","sdtType","STRING","binaryAttachment","binaryAttachmentLength","parseSingleElement","validFlags","ReplayStartType","RMID_VERSION_1_PREFIX","RMID_LEN","validRmidHexRegex","isValue","effectiveMessageId","_replayStartValue","RGMID","_suid","_messageId","compare","otherReplicationGroupMessageId","oId","gt","idBuffer","toBytesBE","hexString","sep","rgmidStr","rmidBufs","rmidHex","test","rmidBuffer","buflen","readUInt32BE","TYPE_DESCRIPTION","DESINATION_TYPE_TO_DESCRIPTOR_TYPE","maybeAdaptFromDestination","targetType","queueSpec","_durable","NONEXCLUSIVE","valTopicString","NOTIFY_SENDER_ON","NOTIFY_SENDER_OFF","READ_ONLY","CONSUME","MODIFY_TOPIC","DELETE","_quotaMB","_maxMessageSize","_discardBehavior","_maxMessageRedelivery","ReplayStartLocationDate","createReplayStartLocationBeginning","createReplayStartLocationDate","dateTime","BEGINNING","DATE","SDTDestType","EncodeSingleElement","IEEE754LIB","ParseSingleElement","StringToBuffer","encodeSingleElement","stringToBuffer","SDTDataTypes","EncodeHeader","encodeHeader","tag","valueLen","byte0","strSdtLen","Stream","EncodeInteger","int48ToStr","vIn","byteI","floor","EncodeSingleElementLib","UtilLib","EncodeMap","encodeMap","sdtmap","buf","sdtfield","strKeyField","strKeyName","nullTerminate","encodeSingleElementToBuf","DestinationLib","EncodeStream","encodeStream","C_2_48","pow","strencode","fieldVal","BOOL","Boolean","UINT8","UnsignedInteger","INT8","Integer","UINT16","INT16","UINT32","INT32","UINT64","INT64","WCHAR","Char","ByteArray","FLOATTYPE","Float","toIEEE754Single","DOUBLETYPE","toIEEE754Double","NULLTYPE","Null","UNKNOWN","hdr","sdtstream","toIEEE754","ebits","fbits","bias","Infinity","abs","ln","LN2","bits","parseInt","fromIEEE754","j","NaN","strToByteArr","byteArrToStr","fromIEEE754Double","fromIEEE754Single","ParseDestination","parseDestination","dataBuf","destType","readUInt8","destBytes","create","ParseInteger","autoDecodeVarLengthNumber","ParseFieldHeader","parseFieldHeader","onebyte","elemType","lenBytes","elemLen","elemValLen","ParseFloat","parseFloatField","readFloatBE","readDoubleBE","createField","readUIntBE","parseIntegerField","isSigned","readInt8","readInt16BE","readUInt16BE","readInt32BE","longValue","getNumBitsAbs","toNumber","field","setError","ParseSingleElementLib","ParseMap","parseMapAt","datalen","mapObj","keyFieldHeader","keyString","valueFieldHeader","valueField","addField","ParseStream","parseStreamAt","fieldHeader","SMFMessage","SMF_MESSAGE","streamObj","validateSdtField","_value","getValueNoThrow","_map","deleteField","typeOrField","SDTFieldLib","_stream","_writable","_readPt","sourceData","inspect","SDTMapContainerLib","SDTStreamContainerLib","ValidateLib","baseTypes","failInvalidParameter","valueType","instanceOf","ClientCapabilityType","SessionEventName","createSession","sessionProperties","messageCallbackInfo","eventCallbackInfo","BASIC","CLIENT_CERTIFICATE","AUTHENTICATION_SCHEME_BASIC","AUTHENTICATION_SCHEME_CLIENT_CERTIFICATE","OAUTH2","PEER_SOFTWARE_VERSION","PEER_SOFTWARE_DATE","PEER_PLATFORM","PEER_PORT_SPEED","PEER_PORT_TYPE","MAX_DIRECT_MSG_SIZE","PEER_ROUTER_NAME","MESSAGE_ELIDING","NO_LOCAL","TEMPORARY_ENDPOINT","GUARANTEED_MESSAGE_PUBLISH","GUARANTEED_MESSAGE_BROWSE","ENDPOINT_MGMT","SELECTOR","ACTIVE_CONSUMER_INDICATION","COMPRESSION","CUT_THROUGH","ENDPOINT_DISCARD_BEHAVIOR","ENDPOINT_MESSAGE_TTL","JNDI","PER_TOPIC_SEQUENCE_NUMBERING","QUEUE_SUBSCRIPTIONS","SUBSCRIPTION_MANAGER","TRANSACTED_SESSION","COMPRESSED_SSL","UNBIND_ACK","BR_ERRORID","CorrelatedRequest","timer","respRecvdCallback","DefaultCapabilities","createDefaultCapabilities","defaultCapabilities","assumedMaxAdSize","Process","C_2_32","leftPad","generateRandomId","rand","random","toFixed","GlobalContext","sessionCounter","idCounter","RandId","NextSessionCounter","NextId","GenerateClientName","product","platform","GenerateUserIdentification","GenerateClientDescription","parseURL","hostListDNSFilter","dns","dnsLookupPromise","url","Promise","host","hostname","lookup","address","resolved","code","errno","syscall","urls","cb","promises","all","then","catch","parseURLs","rawURLs","rawURL","HostInfo","waitTime","HostList","connectRetries","reconnectRetries","connectRetriesPerHost","reconnectRetryWaitInMsecs","hosts","href","connectTryCount","reconnectTryCount","connectTryCountPerHost","_mutableState","resolveHosts","succeeded","wasConnected","disconnected","hostPointer","hostTries","listTries","exhausted","lastHostInfo","getNextHost","hostTriesMax","listTriesMax","isNewList","isNewHost","didJustFinishList","hostInfo","currentHostToString","hostNumber","messageRxCBFunction","userObject","CLIENT_NAME","CLIENT_DESCRIPTION","OutstandingDataRequest","correlationId","replyReceivedCBFunction","reqFailedCBFunction","P2PUtil","getP2PInboxTopic","getP2PTopicSubscription","sessionEventCBFunction","UP_NOTICE","REJECTED_MESSAGE_ERROR","PROPERTY_UPDATE_OK","PROPERTY_UPDATE_ERROR","CAN_ACCEPT_DATA","DISCONNECTED","RECONNECTING_NOTICE","RECONNECTED_NOTICE","REPUBLISHING_UNACKED_MESSAGES","UNSUBSCRIBE_TE_TOPIC_OK","UNSUBSCRIBE_TE_TOPIC_ERROR","GUARANTEED_MESSAGE_PUBLISHER_DOWN","CONNECT_TIMEOUT","CONNECT_WAIT_TIMEOUT","DOWNGRADE_TIMEOUT","TRANSPORT_UP","TRANSPORT_DESTROYED","TRANSPORT_CAN_ACCEPT_DATA","TRANSPORT_PARSE_ERROR","TRANSPORT_PROTOCOL_SMP","TRANSPORT_PROTOCOL_CLIENTCTRL","EXCEPTION","SUBSCRIBE_TIMEOUT","CREATE_SUBSCRIBER","SEND_ERROR","FLOWS_DISCONNECTED","TRANSPORT_FLUSHED","DNS_RESOLUTION_COMPLETE","TRANSPORT_CHANGE_DONE","buildType","Superclass","superclassArgs","sessionEventCode","_sessionEventCode","SUPERCLASS_FOR_SESSION_EVENT","SUPERCLASS_ARGS","sec","rc","ck","TYPE_CACHE","build","superclassArgsBuilder","SessionFSMEvent","eventText","eventReason","smfMsg","sessionId","guaranteedFlowObject","ConsumerLib","PublisherLib","TransportLib","SessionRequestType","SessionStateName","StatsByMode","SubscriptionUpdateTimeoutMessages","STAT_TX_BYMODE_BYTES","STAT_TX_BYMODE_MSGS","STAT_RX_BYMODE_BYTES","STAT_RX_BYMODE_MSGS","STAT_TX_BYMODE_REDELIVERED","STAT_TX_BYMODE_BYTES_REDELIVERED","SessionFSM","session","stats","logFormatter","_sessionProperties","_sessionStatistics","_hosts","_consumers","_flowInterfaceFactory","send","enqueueOutstandingCorrelatedReq","_userBackpressured","clearCurrentError","SessionDisconnected","sEvent","disposeInternal","SessionConnecting","CONNECTING","handleTransportDestroyed","_currentHost","connectWaitTimeInMsecs","_connectWaitTimer","WaitingForInterConnectTimeout","WaitingForTransport","setConnectTimer","_connectFailEvent","_connectSuccessEvent","DestroyingTransport","_reconnectRetries","_currentError","emitSessionEvent","setCurrentError","WaitingForDNS","sessionEvent","errEvent","clearConnectTimer","SessionTransportUp","WAITING_FOR_DNS","DESTROYING_TRANSPORT","destroyTransportSession","WAITING_FOR_INTERCONNECT_TIMEOUT","WAITING_FOR_TRANSPORT","errorMessage","initTransport","WaitingForTransportUp","WAITING_FOR_TRANSPORT_UP","_justEntered","_transport","sendClientCtrlLogin","WaitingForLogin","WAITING_FOR_LOGIN","setClientCtrlTimer","clientCtrlMsg","getResponse","checkNoLocal","checkCompressedSsl","updateReadonlySessionProps","WaitForTransportChange","rawSubcode","responseString","requestDowngrade","clearClientCtrlTimer","WAITING_FOR_TRANSPORT_CHANGE","newTransport","updateTransportCompression","ReapplyingSubscriptions","REAPPLYING_SUBSCRIPTIONS","copySubscriptionCacheKeys","reapplySubscriptions","WaitForSubConfirm","WaitForCanAcceptData","clearSubscriptionCacheKeys","WAITING_FOR_SUBCONFIRM","subscriptionStr","encodedUtf8Subscription","DestroyTransport","canConnectPublisher","_defaultPublisher","WaitingForMessagePublisher","WAITING_FOR_CAN_ACCEPT_DATA","WAITING_FOR_PUBFLOW","sendPublisherSessionUpEvent","canConnectConsumer","flows","sendConsumerSessionUpEvent","reconnectingFlows","FullyConnected","SessionDisconnecting","cleanupSession","handleSubscriptionUpdateError","clearKeepAlive","FULLY_CONNECTED","scheduleKeepAlive","DISCONNECTING","DisconnectingFlows","DISCONNECTING_FLOWS","gatherPendingFlows","isGathering","adaptedListenForDestroy","installfn","downEvents","known","pending","onFlowDown","checkPendingFlows","proceed","FlushingTransport","FLUSHING_TRANSPORT","flushTransport","flushTransportSession","onTransportFlushed","addToSubscriptionCache","_subscriptionCache","_subscriptionCacheCount","cancelOutstandingCorrelatedReq","_correlatedReqs","req","_clientCtrlTimer","_connectTimer","_keepAliveTimer","resetKeepAliveCounter","noLocalSupported","caps","getRouterCapabilities","_compressedTLS","checkSessionDestinationCapability","_subscriptionCacheKeys","p2pTopic","p2pInboxBase","createMessagePublisher","publisherProperties","isAD","createMessageConsumer","conusmerProperties","createQueueBrowser","destroy","_smfClient","operations","_kaStats","removeFromSubscriptionCache","operationKey","sendEvent","reqTimeoutCb","reqTimeout","respRecvCallback","readTimeoutInMsecs","outstandingReq","errorInFsm","errorEventText","flush","nextCorrelationTag","TX_TOTAL_DATA_MSGS","TX_DIRECT_MSGS","TX_PERSISTENT_MSGS","TX_NONPERSISTENT_MSGS","TX_TOTAL_DATA_BYTES","TX_DIRECT_BYTES","TX_PERSISTENT_BYTES","TX_NONPERSISTENT_BYTES","getTransportInfo","getInfoStr","handleADCtrlMessage","pm_corrtag","updateRxStats","cancelledRequest","RX_REPLY_MSG_DISCARD","handleADTrMessage","pm_ad_flowid","handleApiSubscriptionTimeout","timeoutMsg","handleClientCtrlMessage","SMFClientCtrlMessageType","LOGIN","SMFClient","SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG","handleClientCtrlResponse","handleClientCtrlTimeout","handleConnectTimeout","handleUpdatePropertyTimeout","handleRejectedTrMessage","topicNameRaw","pm_tr_topicname_bytes","replace","handleSMFMessage","discardMessage","SMFProtocol","TRMSG","smf_adf","ADCTRL","CLIENTCTRL","SMP","handleSMPMessage","KEEPALIVE","KEEPALIVEV2","handleUnknownProtocolMessage","handleSMFParseError","transportError","request","confirm","handleSubscriptionTimeout","handleTransportEvent","transportEvent","getTransportEventCode","TransportSessionEventCode","getSessionId","DESTROYED_NOTICE","GuaranteedFlowControlledRelief","PARSE_FAILURE","TSESSION","messageType","lastMsgWritten","lastBytesWritten","rxData","rxError","TransportFactory","createTransport","injectTransportInterceptor","_transportInterceptor","interceptor","setInterceptor","keepAliveTimeout","_keepAliveCounter","keepAliveIntervalsLimit","clientStats","getClientStats","prestatMsgWritten","msgWritten","prestatBytesWritten","bytesWritten","kaMsg","KeepAliveMessage","prepareAndSendMessage","deliveryMode","adLocallyDisabled","_gmSendDisallowed","requestConfirmation","topicDestination","sendSubscribe","sub","keepAliveIntervalInMsecs","statTarget","forceAllowEnqueue","content","encodeCompoundMessage","updateTxStats","compressionLevel","match","_plaintextTLS","sslConnectionDowngradeTo","PLAINTEXT","ClientCtrlMessage","getLogin","smpMsg","SMPMessage","getSubscriptionMessage","sendUpdateProperty","mutableSessionProperty","getUpdate","transportDowngradeTimeoutInMsecs","subscriptionUpdate","subject","requestType","default","isSMP","REMOVE_DTE_SUBSCRIPTION","ADD_SUBSCRIPTION","ADD_P2PINBOX","generateMessage","getDTEUnsubscribeMessage","REMOVE_SUBSCRIPTION","queueSubscriptionUpdate","getQueueSubscriptionMessage","origReq","smfMessage","pm_deliverymode","msgStatKey","bytesStatKey","msgLength","RX_TOTAL_DATA_MSGS","RX_TOTAL_DATA_BYTES","smf_di","RX_DISCARD_MSG_INDICATION","RX_CONTROL_MSGS","RX_CONTROL_BYTES","TX_REQUEST_SENT","TX_CONTROL_MSGS","TX_CONTROL_BYTES","clientCtrlRespMsg","_setVpnNameInUse","getVpnNameInUseValue","oldVirtualRouterName","virtualRouterName","newVirtualRouterName","getVridInUseValue","_setVirtualRouterName","handleVirtualRouterNameChange","_setP2pInboxBase","getP2PTopicValue","_setP2pInboxInUse","updateCapabilities","gmCap","_getCapability","oldName","newName","severTls","startCompression","SessionOperation","CTRL","SEND","QUERY_OPERATION","SessionPropertiesLib","valArrayIsMember","valArrayOfString","valLength","valNotEmpty","valString","valStringOrArray","ALLOWED_PROTOCOLS","valClientName","validateClientName","enumInstance","allowNull","valSslExcludedProtocols","supported","SUPPORTED_SSL_PROTOCOLS","prtcl","protocol","valSslCipherSuites","string","empty","ciphers","SUPPORTED_CIPHER_SUITES","cipher","valSslTrustedCommonNameList","valUrlList","valArray","included","isHttpTransport","transportProtocol","HTTP_BINARY_STREAMING","HTTP_BINARY","HTTP_BASE64","validatePropsSupportedByTransport","nonHttpPropsSet","propNames","matchUrl","regex","arrayLength","currententry","useSsl","SessionPropertiesValidator","webTransportProtocolList","useClientCert","authenticationScheme","equal","idToken","accessToken","WS_BINARY","sslValidateCertificate","sslPfxSet","sslPfx","sslPrivateKeySet","sslPrivateKey","sslCertSet","sslCertificate","allTcp","nonHTTPTransportPropsSet","recommendedMin","defaultConnectTimeoutInMsecs","connectTimeout","transportCount","NodeSslConstants","makeDefaults","_vpnNameInUse","_virtualRouterName","_p2pInboxInUse","_p2pInboxBase","_userIdentification","_tpProtocolInUse","_tpContentType","_publisherProperties","DEFAULT_CIPHER_SUITES","SessionPropertiesNode","_tpProtocol","_transportProtocolList","_tpDowngradeTimeout","_setTransportProtocolInUse","_setWebTransportProtocolInUse","_sslExcludedProtocols","_sslCipherSuites","_sslValidateCert","env","NODE_TLS_REJECT_UNAUTHORIZED","_sslTrustStores","_sslTrustedCNList","_sslPfx","_sslPfxPasswd","_sslPrivateKey","_sslPrivateKeyPasswd","_sslCertificate","_sslProtocol","_compressionLevel","_sslConnectionDowngradeTo","_lendsInspect","sslExcludedProtocols","sslCipherSuites","sslTrustStores","sslTrustedCommonNameList","sslPfxPassword","sslPrivateKeyPassword","sslProtocol","SessionPropertiesBase","_authScheme","_accessToken","_idToken","_issuerIdentifier","_url","_password","_userName","_clientName","_appDesc","_vpnName","_connectTimeout","minTimeout","margin","connectDowngradeDefault","_connectRetries","_connectRetriesPerHost","_reconnectRetryWaitInMsecs","_genSendTimestamps","_genReceiveTimestamps","_includeSenderId","_genSequenceNumber","_kaInterval","_kaIntervalsLimit","_setUserIdentification","_subLocalPriority","_subNetworkPriority","_ignoreDupSubError","_ignoreSubNotFoundError","_reapplySubcriptions","_readTimeout","_sendBufferMaxSize","_assumedMaxAdSize","_maxWebPayload","issuerIdentifier","password","userName","clientName","applicationDescription","vpnName","vpnNameInUse","generateSendTimestamps","generateReceiveTimestamps","includeSenderId","generateSequenceNumber","p2pInboxInUse","userIdentification","subscriberLocalPriority","subscriberNetworkPriority","ignoreDuplicateSubscriptionError","sendBufferMaxSize","maxWebPayload","SslProtocolExcludeConstantMap","REMOVE_P2PINBOX","SESSION_ERROR","TRANSPORT_FAIL","CONNECTED","MessageLib","CACHE_REQUEST_PREFIX","transportProtocolDefaultList","xhrBinary","streaming","isValidADTransport","SOLCLIENT_REQUEST_PREFIX","messageCallback","eventCallback","_sessionFSM","_messageCallbackInfo","wrapMessageCallback","_eventCallbackInfo","wrapEventCallback","selectedProtocol","defaultList","sliceIndex","validForAD","_adDisabledReason","transportProtocols","invalid","_sessionStats","_outstandingDataReqs","_capabilities","_seqNum","allowOperation","statesCanAck","stateName","subscribe","isBooleanOrNothing","isRangeCompareOrNothing","handleSubscriptionUpdateResponse","handleQueueSubscriptionUpdateResponse","unsubscribe","unsubscribeDurableTopicEndpoint","createFromSpec","handleDTEUnsubscribeResponse","updateProperty","responseCallback","respMsg","oldP2pTopicName","oldP2pTopic","newP2pTopicName","newP2pTopic","afterAddCallback","resp","smpResp","afterRemoveCallback","ignoreSubscriptionNotFoundError","updateAuthenticationOnReconnect","authenticationProperties","allowedProperties","newProps","getSessionProperties","validateAndSendMessage","sendRequest","requestFailedCBFunction","isFunctionOrNothing","replyToTopic","enqueueOutstandingDataReq","sendReply","messageToReplyTo","replyMessage","sessionState","getSessionState","getTransportProtocol","capabilityType","isNumber","sessionStateName","getFSMState","WAITING_FOR_SESSION_UP","WAITING_FOR_P2PINBOX_REG","createCacheSession","browserProperties","destinationType","factoryMethod","vrn","localName","operationEnum","allow","anything","NEW","routerCapabilities","sendDest","senderTimestamp","noSenderTimestamp","hasAutoSenderTimestamp","now","sequenceNumber","noSequenceNumber","hasAutoSequenceNumber","senderId","noSenderId","reqFailedCb","replyRecvdCb","none","TX_REQUEST_TIMEOUT","requestEvent","cancelOutstandingDataReq","dataReq","dataMessageIn","dataMessage","RX_REPLY_MSG_RECVED","requestConfirm","adCtrlMessage","getEventCBInfo","setEventCBInfo","eventCBInfo","getMessageCBInfo","setMessageCBInfo","messageCBInfo","rfu","buildErrorEvent","object","CodecLib","BinaryMetaBlock","SMFAdProtocolParam","SMFClientCtrlParam","SMFParameterType","SMFExtendedParameterType","SMFSMPMessageType","SMFSMPMessageTypeFlags","SMFTransportSessionMessageType","SMFParameter","setBits","parseAdpAt","adpVersion","twobyte","paramUH","paramType","paramLen","paramValueLen","smfParam","addParameter","encAdp0Param","uh","paramtype","byte1","encAdp8Param","encAdp16Param","encAdp32Param","encAdp64Param","RSValueLenMap","encAdpReplayParam","valType","valObj","encAdp64AckPairParam","encAdpUTF8NTParam","byte2","encAdp","paramspace","paramarray","getParameterArray","param","WINDOW","EP_DURABLE","ACCESSTYPE","FLOWTYPE","EP_RESPECTS_TTL","TRANSACTION_CTRL_MESSAGE_TYPE","TRANSACTED_SESSION_STATE","ACTIVE_FLOW_INDICATION","WANT_FLOW_CHANGE_NOTIFY","MAX_REDELIVERY","getUh","EP_BEHAVIOUR","FLOWID","TRANSPORT_WINDOW","EP_ALLOTHER_PERMISSION","EP_QUOTA","EP_MAX_MSGSIZE","GRANTED_PERMISSION","TRANSACTED_SESSION_ID","PUBLISHER_ID","LASTMSGIDSENT","LASTMSGIDACKED","LASTMSGIDRECEIVED","TRANSACTION_ID","ENDPOINT_ERROR_ID","REPLAY_START_LOCATION","replayParamVal","APPLICATION_ACK","ranges","QUEUENAME","DTENAME","TOPICNAME","FLOWNAME","TRANSACTED_SESSION_NAME","TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY","TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK","TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK","NOLOCAL","APPLICATION_PUB_ACK","paramdata","version","threebytes","padBytes","twobytes","ContentSummaryType","ParamParse","ParseSMF","parseCCAt","payloadLen","ccMsg","paramUh","smfP","encCC","paramSpace","paramArray","currentParam","currentParamOneByte","paramData","ContentSummaryElement","position","XML_META","XML_PAYLOAD","BINARY_ATTACHMENT","CID_LIST","BINARY_METADATA","SolclientDestinationLib","SolclientMessageLib","SolclientSDTLib","PriorityUserCosMap","parseSMFAt","parseSMPAt","parseTsSmfMsgAt","userCosForPriority","BIN_STRUCTYPES","adaptBinaryMetaToMessage","binaryMeta","messageIn","messageSdt","payload","preambleByte0","preambleByte1","h","headerMap","ci","mi","mt","rt","si","sn","ts","adaptSmfToMessage","stream","smf_dto","smf_elidingEligible","smf_deadMessageQueueEligible","smf_priority","pm_msg_priority","pm_userdata","pm_ad_redelflag","pm_ad_flowredelflag","pm_ad_msgid","pm_ad_prevmsgid","pm_ad_publisherid","pm_ad_publishermsgid","pm_ad_topicSequenceNumber","pm_ad_redeliveryCount","pm_ad_spooler_unique_id","pm_ad_replication_mate_ack_message_id","pm_ad_local_spooler_message_id","pm_ad_ttl","payloadOffset","headerLength","cs","pm_content_summary","payloadLength","currentChunk","chunkBegin","chunkEnd","fromEncodedSmf","binaryMetadataChunk","payloadPosition","SMFHeader","base64Encode","encContentSummary","encDeliveryMode","encLightSMFParam","encodeSMFParam","encodeSMFExtendedParam","encSmp","priorityForUserCos","addContentElementToArrays","csumm","payloadArray","dataChunk","cstype","cse","addToMapIfPresent","adaptMessageToBinaryMeta","sdtPreamble","sdtStreamContainer","adaptMessageToSmf_nonPayload","smfHeaderIn","pm_ad_publishermsgId","pm_ad_ackimm","pm_queue_len","pm_queue_offset","userData","encodedSdtPayload","binaryMetaSMF","asEncodedSmf","MAX_24BITS","adaptMessageToSmf_payloadFinalize","payloadBytes","adaptMessageToSmf","bitRange","maskValues","DI_BIT","ELIDING_ELIGIBLE_BIT","DTO_BIT","ADF_BIT","DMQE_BIT","VERSION_BITS","UH_BITS","PROTOCOL_BITS","PRIORITY_BITS","TTL_BITS","QT_OFFSET_BYTES","QT_LEN_BYTES","encodeSMF","w1","smf_version","smf_uh","smf_ttl","params","TR_TOPICNAME","LIGHT_QUEUE_NAME_OFFSET","pm_topic_len","LIGHT_TOPIC_NAME_OFFSET","pm_topic_offset","LIGHT_CORRELATION","LIGHT_ACK_IMMEDIATELY","MESSAGEPRIORITY","USERDATA","pm_username","USERNAME","pm_password","PASSWORD","RESPONSE","DELIVERY_MODE","ASSURED_MESSAGE_ID","ASSURED_PREVMESSAGE_ID","ASSURED_FLOWID","ASSURED_REDELIVERED_FLAG","AD_TIMETOLIVE","pm_ad_publisherMsgId","PUBLISHER_MSGID","MESSAGE_CONTENT_SUMMARY","extendedStreamContents","extendedUH","pm_oauth2_access_token","OAUTH2_ACCESS_TOKEN","pm_oidc_id_token","OIDC_ID_TOKEN","pm_oauth2_issuer_identifier","OAUTH2_ISSUER_IDENTIFIER","EXTENDED_TYPE_STREAM","encodedParams","hdrlen","msglen","setMessageSizes","setPayloadSize","encodedHeader","SMFUH","delModeEnumBidiMap","lutDelModeToEnum","lutEnumToDelMode","uhTypeMap","paramTypeBits","paramTypeCount","lenMap","idx","lightMap","lenBits","lenCount","ContentSummaryDecodeMap","parseTopicQueueOffsets","parseResponseParam","parseDeliveryMode","delmode","lut","parseContentSummary","elements","cumulativeSize","elementType","elementDeclaredLength","elementSize","cst","currentElement","contentSummaryArr","messageElementDescriptions","currentContentSummary","currentSizeStr","firstByte","lengthModeMap","0","1","2","4","8","lengthMode","lengthString","base64Decode","isSMFHeaderAvailable","remaining","isSMFHeaderValid","isSMFAvailable","totalLen","parseSMFExtendedStream","streamLen","pUH","3","AD_REDELIVERY_COUNT","AD_SPOOLER_UNIQUE_ID","AD_ACK_MESSAGE_ID","AD_REPL_MATE_ACK_MSGID","readHeaderOnly","word1","headerLen","word3","paramByte1","prmUh","paramIsLightweight","lwpType","lwpLen","lwpValueLen","parsedQueueOffsets","parsedTopicOffsets","pStart","pType","pLen","pValueLen","pm_ad_publisher_id","parsedResponse","SUB_ID_LIST","GENERIC_ATTACHMENT","AD_TOPICSEQUENCE_NUMBER","contentSummary","AD_FLOWREDELIVERED_FLAG","extSuccess","ADDSUBSCRIPTION","REMSUBSCRIPTION","ADDQUEUESUBSCRIPTION","REMQUEUESUBSCRIPTION","msgFlags","smpFlags","queueLength","encodedUtf8QueueName","subsLength","TransportSMFMessage","remains","parseTsSmfHdrAt","smfheader","transportSMFMessage","tsHdrLen","tsHeaderLength","CREATE_RESP","rtrTagLen","routerTag","tsHeaderPreLength","tsDestroyHeaderPreSid","tsCreateHeader","tsDataTokenPreSid","tsDataStreamTokenPreSid","genTsCreateHeader","genTsDestroyHeader","sid","genTsDataTokenMsg","genTsDataStreamTokenMsg","paddingBytes","genTsDataMsgHeaderParts","BaseMessage","bUInt8","bUInt16BE","bUInt32BE","bUInt64BE","EndpointTypeToParam","QueueDescriptorTypeToParam","QUEUE_PERMISSIONS_TO_BITS","ACCESS_TYPE_INT_TO_ENUM","ACCESS_TYPE_ENUM_TO_BITS","DISCARD_ENUM_TO_VALUE","addQueueProperties","skipAccessType","IGNORE","discardBehaviorValue","_readParameter","decoder","bufMethod","getParameter","getBuffer","getBegin","masked","ENDPOINT_ID","GRANTED_PERMISSIONS","getLastMsgIdReceived","MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW","SPOOLER_UNIQUE_ID","REJECT","endpointTypeParam","lastMsgIdSent","adMsg","topicSubscription","wantFlowChangeUpdate","lastMsgIdReceived","endpointBytes","endpointType","rsValue","replayStartTimeMs","replayStartTimeNs","multiply","UNSUBSCRIBE","lastMessageIdAcked","applicationAckRanges","_parameters","bufSmf","chunkCount","fourbyte","SMFClientCtrlAuthType","BOOLEAN_CAPS_BITS","CLIENT_CAPS_VALUES","p2pParam","P2PTOPIC","vpnParam","MSGVPNNAME","vridParam","VRIDNAME","getUserIdValue","userIdParam","USERID","capParam","ROUTER_CAPABILITIES","prmParseCapabilitiesValue","SOFTWAREVERSION","SOFTWAREDATE","PLATFORM","PHYSICALROUTERNAME","dto","local","network","strDtoPriority","strCapabilities","capsIn","CT","boolCapCount","capsByte","bitIndex","msbIndex","capsKey","sanityLoop","capLen","sprop","compressedTLS","plaintextTLS","clientCapsToStr","clientCapList","highestCap","capBits","cap","cc","isClientCert","DELIVERTOONEPRIORITY","prmGetDtoPriorityValue","CLIENTDESC","AUTHENTICATION_SCHEME","CLIENTNAME","formattedDate","SSL_DOWNGRADE","clientCaps","CLIENT_CAPABILITIES","keepaliveVal","KEEP_ALIVE_INTERVAL","UPDATE","appdesc","strName","encodeResult","ttl","smf_msgLen","smf_tqd","unknownProtoFlag","begin","_uh","_begin","getEnd","SMF_SMP_FLAG_TOPIC","_encodedQueueName","_encodedClientName","isFlag","flagMask","setFlag","smp","SMF_SMP_FLAG_RESPREQUIRED","SMF_SMP_FLAG_PERSIST","TRANSACTIONCTRL","XACTRL","TRANSPORT_PRIORITY","LINGER_OPTION","NUM_MESSAGES_SPOOLED","PUBLISHER_FLAGS","APP_MSG_ID_TYPE","QUEUE_ENDPOINT_HASH","PAYLOAD","ACK_SEQUENCE_NUMBER","ACK_RECONCILE_REQUEST","START_OF_ACK_RECONCILE","TIMESTAMP","BRIDGE_MSG_VPN_NAME","BRIDGE_ROUTER_NAME","BRIDGE_VERSION","CONNECTION_TYPE","ROUTER_CAPABILITIES_EXTENDED","REQUIRES_RELEASE_7","PADDING","CSPF","CSMP","PUBMSG","XMLLINK","WSE","SEMP","SUBCTRL","PUBCTRL","SMRP","SMF_IN_SMF","SMF_IN_RV","ADCTRL_PASSTHROUGH","FLAG_FILTER","FLAG_PERSIST","SMF_SMP_FLAG_DELIVERALWAYS","ADDSUBSCRIPTIONFORCLIENTNAME","REMSUBSCRIPTIONFORCLIENTNAME","DESTROY","DESTROY_RESP","DATA","DATA_TOKEN","DATA_STREAM_TOKEN","CacheContext","CacheRequest","cacheCBFunction","getCallback","getUserObject","cacheRequestCorrelationId","CacheGetResultCode","INVALID","matchTopic","sessionID","isSuspect","hasMore","hasTimestamps","messageStream","clusterNameStream","CacheGetResult","readFromStream","FULFILL","FLOW_THRU","_returnCode","_subcode","_topic","getReturnCode","getReturnSubcode","getTopic","getError","CacheRequestType","BULK_MSG","REGISTER_REQUEST","REGISTER_RESPONSE","HEARTBEAT_REQUEST","HEARTBEAT_RESPONSE","EVENT_NOTIFY","EVENT_ACK","ACTION_REQUEST","ACTION_RESPONSE","GET_REQUEST","GET_RESPONSE","GET_NEXT_REQUEST","GET_NEXT_RESPONSE","SET_REQUEST","SET_RESPONSE","GET_MSG_REQUEST","GET_MSG_RESPONSE","GET_NEXT_MSG_REQUEST","GET_NEXT_MSG_RESPONSE","UNREGISTER_IND","BULK_SET_REQUEST","BULK_SET_RESPONSE","PURGE_MSG_SEQUENCE_REQUEST","PURGE_MSG_SEQUENCE_RESPONSE","GET_MSG_SEQUENCE_REQUEST","GET_NEXT_MSG_SEQUENCE_REQUEST","GET_TOPIC_INFO_REQUEST","GET_TOPIC_INFO_RESPONSE","READY_MARKER","GET_TOPIC_INFO_REQUEST_RANGE","SYNC_READY_MARKER","VACUUM_REQUEST","VACUUM_RESPONSE","cacheSession","cacheMessageType","requestID","cbInfo","liveDataAction","cacheName","subscriptionWaiting","replyReceived","dataReceived","correlationID","childRequests","parentRequest","queuedLiveData","liveDataFulfilled","timeoutHandle","getRootRequest","addChild","childIn","child","removeChild","childIndex","collapse","clearRequestTimeout","getRequestID","getCBInfo","getLiveDataAction","startRequestTimeout","cacheSessionTimeoutCB","timeoutMsec","VERSION","DEFAULT_REPLY_SIZE_LIMIT","REPLY_SIZE_LIMIT","FAIL","INCOMPLETE","REQUEST_COMPLETE","LIVE_DATA_FULFILL","ERROR_RESPONSE","INVALID_SESSION","REQUEST_ALREADY_IN_PROGRESS","NO_DATA","SUSPECT_DATA","CACHE_SESSION_DISPOSED","maxAgeSec","maxMessages","includeOtherClusters","cachePrefix","getCacheName","setCacheName","getMaxMessageAgeSec","setMaxMessageAgeSec","getMaxMessages","setMaxMessages","getTimeoutMsec","setTimeoutMsec","CacheSessionSubscribeInfo","SessionLib","noOp","privateInterface","_validateProps","_outstandingRequests","_outstandingIDs","_nextMessageCallbackInfo","_nextSessionEventCallbackInfo","_sessionIF","_connectToSession","_handleMessage","_createCompoundEventCB","nextDelegate","rfuObject","_handleSessionEvent","passEvent","_processSessionEvent","cbUserObject","_sendToNextDelegate","_checkSubscriptionStatus","_getOutstandingRequest","_handleSubscriptionSuccess","_handleSubscriptionError","requestIn","_startCacheRequest","_terminateRequest","_checkRequestCompletion","parent","_unregisterRequest","_sendSeeOther","cacheGetResult","clusterName","childRequest","_registerRequest","_handleCacheRequestTimeout","_sendGetNext","nextRequest","_relevantLiveData","streamField","_incStat","CACHE_REQUEST_FULFILL_DISCARD_RESPONSE","_decodeMessageStream","RX_CACHE_MSG","exception","checkCID","_performLiveDataAction","_fulfillRequest","_trackCompletionStats","_notifyCallback","toTerminate","sendCacheRequest","arguments","_notifyCallbackError","matchingRequestKeys","conflictKeys","conflictRequest","waitingForSubscribeInfo","_subscriptionWaiting","_handleCacheRequestFailed","suppressClusters","round","CACHE_REQUEST_SENT","CACHE_REQUEST_OK_RESPONSE","CACHE_REQUEST_LIVE_DATA_FULFILL","CACHE_REQUEST_INCOMPLETE_RESPONSE","CACHE_REQUEST_FAIL_RESPONSE","innerMessage","cacheRequest","TX_PERSISTENT_REDELIVERED","TX_NONPERSISTENT_REDELIVERED","TX_PERSISTENT_BYTES_REDELIVERED","TX_NONPERSISTENT_BYTES_REDELIVERED","RX_DIRECT_MSGS","RX_PERSISTENT_MSGS","RX_NONPERSISTENT_MSGS","RX_DIRECT_BYTES","RX_PERSISTENT_BYTES","RX_NONPERSISTENT_BYTES","TX_WINDOW_CLOSE","_parent","_statsMap","TransportSessionStates","BaseSMFClient","rxSmfCB","rxMessageErrorCB","_rxSmfCB","_rxMessageErrorCB","_correlationCounter","SMF_MAX_CORRELATION","concatFrom","allocUnsafe","buf0","copy","readUInt32BEFrag","bufList","listOffsetParam","byteIndexParam","listOffset","byteIndex","BufferQueue","maxSize","_queue","_maxSize","peekView","oIndex","put","adaptData","advance","done","chunk","SMF_LOST_FRAMING_THRESHOLD","logPeekBuffer","bufPair","BufferSMFClient","_incomingBuffer","rxDataString","_rxDataCB","rxDataArrayBuffer","rxDataBuffer","putSuccess","messageLen","msgBuffer","_sessionId","fs","SolclientSessionLib","NodeTLSOptsMixin","checkCertificateCNs","cert","_props","valid","cn","createTLSOptions","constMap","trimmed","tsContents","readFileSync","tsFile","navigator","appVersion","CompressedTransport","TcpRawTransport","TcpTlsTransport","TlsOnlyTransport","Duplex","ShuntableTransport","_shunted","_dontEnd","_underlyingTransport","underlyingTransport","_interimBuffer","_transportDrained","_connected","shunt","dontEnd","_write","INVALID_STATE_FOR_OPERATION","_read","unpause","noPause","pause","eventCB","onConnect","onError","onClose","onDrain","resendBuffer","setNoDelay","arg","shunted","zlib","TransportBase","TransportSessionEvent","TransportSessionState","client","_clientstats","_waitForSocketDrain","_waitForCompressorDrain","_flushCallback","_socketDrained","_compressorDrained","_state","_socketError","_transportSession","_compressor","_decompressor","setClientStats","setUnderlyingTransport","newUnderlyingTransoprt","WAITING_FOR_DESTROY","write","onData","_client","onErrorStage2","_eventCB","Z_SYNC_FLUSH","onZlibError","_destroy","CONNECTION_FAILED","stage2destroy","onOpen","WAITING_FOR_CREATE","highWaterMark","createDeflateRaw","createInflateRaw","sendCompressed","onCompressorDrain","onerrorStub","unpipe","_hadError","close","flushStage2","resume","prevCallback","net","TransportClientStats","_canSendNeeded","_drained","_rawSocket","rehome","parseHostPort","urlString","port","urlParsed","_ssl","originalSocket","hadError","errorMsg","Socket","bufferSize","tls","_tlsSocket","tlsOptions","socket","getUnderlyingTransport","_shuntableTransport","duplexOptions","tlsShutdown","tlsShutdownStage2","transportProps","immediate","beginDowngrade","_interceptor","removed","installed","urlParts","validSchemes","useSSL","WebTransportCapabilities","WebTransport","getId","compressingLayer","plaintextTransport","tlsLayer","uncompressedTransport","encryptedTransport","compress","precallback","WebTransportsLib","lutTransportProtocols","protocols","StateBase64","StateBinary","StateStreamingAndBinary","StateWebSocketBinary","TransportProtocolHandler","transport","downgradeTransport","TransportConstructor","switchState","onEnter","completeDowngrade","canCompleteDowngrade","getNextState","newState","DOWNGRADE_FAILED","DOWNGRADE_SUCCEEDED","tsEventCode","_transportEventCode","_sid","getResponseCode","transportEventCode","TSHState","tpProtocol","exitCallback","nextState","_transportProtocol","_exitCallback","_nextState","_unsupportedRuntimeMessage","userAgent","setNextState","getUseSsl","validateLegal","HTTPLib","HTTPConnection","HTTPTransportSession","sendXhrBinary","sendXhrText","TimingBucket","XHRFactory","SOL_CONNECTION_DEBUG","prependOrigin","location","origin","getTs","WaitedToken","HadToken","ReturnedToken","bucketCount","base64Enc","streamProgressEvents","rxDataCb","connectionErrorCb","contentType","connectionClose","Options","_streamProgressBytes","_xhr","_rxDataCb","_connErrorCb","_reqActive","_REQCOUNTER","_REQBASE","_handleAbortedReq","browserSupportsXhrBinary","recStat","LastGotToken","LastSendMsg","waitedTok","hadToken","LastGotData","LastReturnToken","returnedToken","attempt","maxRetry","abort","open","onreadystatechange","xhrStateChange","setRequestHeader","sentdata","readyState","RS_LOADING","LOADING","RS_DONE","DONE","status","responseType","responseText","decodedData","statusText","responseTextLen","sentdataLen","responseTextDump","nextMaxRetry","isUsingBase64","xhr","check","onprogress","WebTransportSessionBase","PacketReadState","READING_HEADER","STREAMING","MSIE_TRANSPORT_PADDING","adaptURL","baseUrl","_haveToken","_confMaxWebPayload","_maxPayloadBytes","_destroyTimer","_destroyTimeout","_createUrl","_routerUrl","_rxChannelClient","_httpSendConn","_httpReceiveConn","_smfDataTokenTSHeader","_routerTag","_useBinaryTransport","_useStreamingTransport","_streamingTransportPadding","_packetReadState","agent","transportContentType","_contentType","connectTimerExpiry","destroyCleanup","updateMaxWebPayload","trLessEncapSMF","connectInternal","_connError","_createConn","handleCreateConnFailure","createMsg","createConnectTimeout","connError","cancelConnectTimeout","destroyTimerExpiry","handleRxDataToken","handleSendFailure","destroyMsg","_queuedData","enqueueData","remainder","allowEnqueue","enqueueFailNoSpace","transportPacketLen","_smfDataTSHeaderParts","_queuedDataSize","initPreformattedHeaders","sendQueuedData","getQueuedDataToSend","tsRc","smfresponse","useBase64","useStreaming","handleRxStreaming","handleSmfMessage","handleSmfParseError","handleRxData","handleDestroyResponse","cancelDestroyTimeout","innerResponse","tsmsg","TotalPayloadToRead","smfErrResponse","responseErrStr","handleRxError","errorInfo","asyncSendEvent","finalize","sendXhrBinaryMSIE10","overrideMimeType","sendXhrBinaryXHR2","connClose","allowFail","XMLHttpRequest","exitCb","WebSocketTransportSession","browserSupportsBinaryWebSockets","browserSupportsStreamingResponse","WebTransportEvent","DOWNGRADE","WebTransportState","WebTransportFSM","transportIn","WebTransportDown","wEvent","WebTransportConnecting","destroyInternal","_destroyMsg","WebTransportDestroying","getConnError","_eventReason","notifyEvent","_transportEvent","attemptDowngrade","WebTransportUp","WebTransportDowngrading","DOWNGRADING","notifyDowngradeFailed","_downgradeMsg","DESTROYING","tsEvent","bytesAllowed","getBufferedAmount","elemLength","_transportHandler","_webTransportFsm","handleDestroyed","_lastDowngradeSucceeded","WebSocketCloseCodes","1000","1001","1002","1003","1004","1005","1006","1007","1008","1009","1010","1011","1012","1013","1014","1015","http","https","globalContext","MyWebSocket","WebSocket","_socket","msgBuf","wasClean","maybeEmitCanSend","maybeEmitFlush","onBufferedAmountPoll","scheduleQuery","WAITING_FOR_CONNECT","onMessage","_socketOptions","createWebSocketOptions","ondrain","binaryType","onopen","onmessage","onclose","onerror","force","bufferAllow","maxPayloadBytes","onDrainCallback","Agent","keepAlive","wsAgent","origCreateConnection","createConnection","opts","validator","validatorArgs","typeInstance","typeInstanceDesc","boolean","allowUndefined","allowEmpty","allowDuplicate","ele","typedesc","cloneObj","CLONE_CIRCULAR","CLONE_DEPTH","acc","NODE_OS_TYPES","Darwin","Windows_NT","DEFAULT","NODE_PROCESS","os","ostype","osname","nodeVersionStr","release","arch","PAD_LEFT","PAD_RIGHT","LUT_PRINTABLE","padLeftRight","minLen","padSide","padChar","leastSpaces","spaces","capitalizeWord","isEmptyFun","capitalize","lastChar","hexdump","printable","spacer","linelen","sLength","heredoc","literals","substitutions","subst","buckets","normalized","cont","MODE","TARGET","FORMATTED_DATE","pad","YYYY","SUMMARY","EPSILON","BaseChecks","instanceOfAny","types","truthy","fn","rangeGe","rangeMinInclusive","rangeGt","rangeMin","rangeLe","rangeMaxInclusive","rangeLt","rangeMax","rangeCompare","operator","operand","epsilon","expected","member","function","orNull","orUndefined","orNothing","thenGen","doOp","elseFn","when","condition","unless","NO_OBJ","objectValues","subcodeSummary","got","expectedStr","gotStr","validateError","typename","memberOfEnum","names","isEnumMemberOrNothing","isInstanceOfOrNull","isInstanceOfOrUndefined","isMember","memberOf","isNumberOrNull","isRangeCompare","isStringOrNull","_instanceof","nativeMap","nativeSet","nativePromise","depth","allParents","allChildren","useBuffer","_clone","proto","reject","__isArray","__isRegExp","RegExp","__getRegExpFlags","__isDate","getPrototypeOf","keyChild","valueChild","entryChild","getOwnPropertySymbols","symbols","symbol","allPropertyNames","propertyName","clonePrototype","__objToStr","o","re","ignoreCase","multiline","createWebSocketStream","Server","Receiver","Sender","WebSocketServer","EMPTY_BUFFER","totalLength","_mask","mask","_unmask","toArrayBuffer","toBuffer","readOnly","isView","bufferUtil","unmask","BINARY_TYPES","alloc","GUID","kForOnEventAttribute","Symbol","kListener","kStatusCode","kWebSocket","NOOP","kCode","kData","kError","kMessage","kReason","kTarget","kType","kWasClean","Event","CloseEvent","ErrorEvent","MessageEvent","EventTarget","addEventListener","wrapper","isBinary","_closeFrameReceived","_closeFrameSent","removeEventListener","handler","listeners","tokenChars","offers","mustUnescape","isEscaping","inQuotes","extensionName","paramName","SyntaxError","token","format","configurations","kDone","kRun","Limiter","concurrency","jobs","job","TRAILER","kPerMessageDeflate","kTotalLength","kCallback","kBuffers","zlibLimiter","PerMessageDeflate","isServer","maxPayload","_maxPayload","_options","_threshold","threshold","_isServer","_deflate","_inflate","concurrencyLimit","offer","serverNoContextTakeover","server_no_context_takeover","clientNoContextTakeover","client_no_context_takeover","serverMaxWindowBits","server_max_window_bits","clientMaxWindowBits","client_max_window_bits","accept","normalizeParams","acceptAsServer","acceptAsClient","cleanup","accepted","num","isInteger","TypeError","decompress","fin","_decompress","_compress","windowBits","Z_DEFAULT_WINDOWBITS","zlibInflateOptions","inflateOnError","inflateOnData","_readableState","endEmitted","zlibDeflateOptions","deflateOnData","RangeError","Writable","isValidStatusCode","isValidUTF8","GET_INFO","GET_PAYLOAD_LENGTH_16","GET_PAYLOAD_LENGTH_64","GET_MASK","GET_DATA","INFLATING","_binaryType","_extensions","_skipUTF8Validation","skipUTF8Validation","_bufferedBytes","_buffers","_compressed","_payloadLength","_fragmented","_masked","_fin","_opcode","_totalPayloadLength","_messageLength","_fragments","_loop","startLoop","consume","dst","getInfo","getPayloadLength16","getPayloadLength64","getMask","getData","compressed","haveLength","controlMessage","perMessageDeflate","er","fragments","ErrorCtor","statusCode","errorCode","randomFillSync","applyMask","kByteLength","maskBuffer","generateMask","_generateMask","_maskBuffer","_firstFragment","_deflating","merge","skipMasking","opcode","rsv1","writeUInt16BE","writeUIntBE","enqueue","sendFrame","frame","ping","pong","binary","destroyed","dequeue","Reflect","cork","uncork","emitClose","duplexOnEnd","_writableState","finished","duplexOnError","ws","terminateOnDestroy","duplex","autoDestroy","objectMode","writableObjectMode","CLOSED","nextTick","called","_final","isPaused","_isValidUTF8","createHash","subprotocol","keyRegex","RUNNING","CLOSING","handleProtocols","clientTracking","verifyClient","noServer","backlog","server","_server","createServer","res","body","STATUS_CODES","writeHead","listen","emitConnection","_removeListeners","addListeners","listening","upgrade","head","handleUpgrade","clients","_shouldEmitClose","shouldHandle","pathname","socketOnError","headers","method","abortHandshake","secWebSocketProtocol","secWebSocketExtensions","secure","authorized","encrypted","verified","completeUpgrade","readable","digest","update","_protocol","setSocket","Connection","randomBytes","URL","readyStates","subprotocolRegex","protocolVersions","closeTimeout","_closeCode","_closeMessage","_closeTimer","_paused","_readyState","_receiver","_sender","_bufferedAmount","_redirects","initAsClient","receiver","receiverOnConclude","receiverOnDrain","receiverOnError","receiverOnMessage","receiverOnPing","receiverOnPong","unshift","socketOnClose","socketOnData","socketOnEnd","OPEN","_req","errorEmitted","sendAfterClose","needDrain","property","websocket","protocolVersion","followRedirects","maxRedirects","socketPath","parsedUrl","isSecure","isUnixSocket","invalidURLMessage","hash","emitErrorAndClose","defaultPort","protocolSet","tlsConnect","netConnect","Upgrade","search","handshakeTimeout","Origin","username","auth","parts","_originalHost","entries","authorization","cookie","aborted","addr","serverProt","protError","extensionNames","servername","isIP","setHeader","receiverOnFinish","read","require","wasm","WebAssembly","Instance","Module","unsigned","__isLong__","ctz32","clz32","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","radix","radixToPower","power","mul","TWO_PWR_16_DBL","TWO_PWR_24_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","div","rem1","rem","remDiv","intval","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","ne","lessThan","comp","lessThanOrEqual","lte","le","greaterThan","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","b00","c48","c32","c16","c00","subtract","subtrahend","multiplier","divide","divisor","approx","halfThis","shr","shl","toUnsigned","shru","log2","ceil","delta","approxRes","approxRem","modulo","mod","countLeadingZeros","clz","countTrailingZeros","ctz","and","or","xor","shiftLeft","shiftRight","shiftRightUnsigned","shr_u","rotateLeft","rotl","rotateRight","rotr","toSigned","toBytes","toBytesLE","hi","lo","fromBytes","fromBytesLE","fromBytesBE","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","__webpack_exports__"],"sourceRoot":""}