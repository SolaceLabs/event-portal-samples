try{ window.searchData = {"info":[["solClientJS","","global.html#solClientJS","","The Solace Message Router Messaging API for Javascript.",0],["solace.SessionProperties.DEFAULT_CIPHER_SUITES","solace.SessionProperties","solace.SessionProperties.html#DEFAULT_CIPHER_SUITES"," constant","The default comma separated list of cipher suites in order of preference used for SSL connections.",1],["solace.AbstractQueueDescriptor#getType","solace.AbstractQueueDescriptor","solace.AbstractQueueDescriptor.html#getType"," function","Gets the queue type to which this descriptor refers.",2],["solace.AbstractQueueDescriptor#isDurable","solace.AbstractQueueDescriptor","solace.AbstractQueueDescriptor.html#isDurable"," function","Gets whether this descriptor refers to a durable queue.",3],["solace.AbstractQueueDescriptor#toString","solace.AbstractQueueDescriptor","solace.AbstractQueueDescriptor.html#toString"," function","An informational summary of this object, subject to change.",4],["solace.CacheCBInfo.cacheRequestCallback","solace.CacheCBInfo","solace.CacheCBInfo.html#cacheRequestCallback","(Number requestID, solace.CacheRequestResult result, Object userObject)","This callback is called by a cache session when a cache request completes.",5],["solace.CacheRequestResult#getError","solace.CacheRequestResult","solace.CacheRequestResult.html#getError"," function","Gets the error, if any, associated with the returned result.",6],["solace.CacheRequestResult#getReturnCode","solace.CacheRequestResult","solace.CacheRequestResult.html#getReturnCode"," function","Gets the return code from the cache request result.",7],["solace.CacheRequestResult#getReturnSubcode","solace.CacheRequestResult","solace.CacheRequestResult.html#getReturnSubcode"," function","Gets the return subcode from the cache request result.",8],["solace.CacheRequestResult#getTopic","solace.CacheRequestResult","solace.CacheRequestResult.html#getTopic"," function","Gets the topic object associated with the cache request.",9],["solace.CacheSession#dispose","solace.CacheSession","solace.CacheSession.html#dispose"," function","Disposes the session.  No cache requests will be sent by this CacheSession after it is _disposed. Any subsequent operations on the session will throw {OperationError}. Any pending operations will immediately terminate, returning <ul> <li>solace.CacheRequestResult}<ul> <li>#returnCode === {@link solace.CacheReturnCode.INCOMPLETE}</li> <li>#subcode === {@link solace.CacheReturnSubcode.CACHE_SESSION_DISPOSED</li> </ul> </li> </ul>",10],["solace.CacheSession#getProperties","solace.CacheSession","solace.CacheSession.html#getProperties"," function","Gets the cache session properties.",11],["solace.CacheSession#sendCacheRequest","solace.CacheSession","solace.CacheSession.html#sendCacheRequest","(Number requestID, solace.Destination topic, Boolean subscribe, solace.CacheLiveDataAction liveDataAction, solace.CacheCBInfo cbInfo)","Issues an asynchronous cache request. The result of the request will be returned via the listener. Messages returned as a result of issuing the request will be returned to the application via the solace.MessageRxCBInfo} associated with this {@link solace.CacheSession}'s {@link solace.Session",12],["solace.CacheSessionProperties#getCacheName","solace.CacheSessionProperties","solace.CacheSessionProperties.html#getCacheName"," function","Gets the cache name to which solace.CacheSession requests should be sent, for sessions constructed using these properties.",13],["solace.CacheSessionProperties#getMaxMessageAgeSec","solace.CacheSessionProperties","solace.CacheSessionProperties.html#getMaxMessageAgeSec"," function","Gets the maximum allowable message age for messages to be delivered in response to a request made on a solace.CacheSession that was constructed using these properties.  0 means no restriction on age.",14],["solace.CacheSessionProperties#getMaxMessages","solace.CacheSessionProperties","solace.CacheSessionProperties.html#getMaxMessages"," function","Gets the maximum count of messages to be delivered, per solace.Destination}, in response to a request issued on a {@link solace.CacheSession constructed using these properties.  0 means no restriction on the number of messages.",15],["solace.CacheSessionProperties#getTimeoutMsec","solace.CacheSessionProperties","solace.CacheSessionProperties.html#getTimeoutMsec"," function","Gets the timeout for requests issued on a solace.CacheSession constructed using these properties. <ul> <li>The valid range is &gt;= 3000.</li> </ul>",16],["solace.CacheSessionProperties#setCacheName","solace.CacheSessionProperties","solace.CacheSessionProperties.html#setCacheName","(String value)","Sets the cache name to which requests should be sent. Cannot be null or blank.",17],["solace.CacheSessionProperties#setMaxMessageAgeSec","solace.CacheSessionProperties","solace.CacheSessionProperties.html#setMaxMessageAgeSec","(Number value)","Sets the maximum allowable message age. 0 means no restriction on age.",18],["solace.CacheSessionProperties#setMaxMessages","solace.CacheSessionProperties","solace.CacheSessionProperties.html#setMaxMessages","(Number value)","Sets the maximum count of messages to be delivered per solace.Destination in response to a cache request. 0 means no restriction.",19],["solace.CacheSessionProperties#setTimeoutMsec","solace.CacheSessionProperties","solace.CacheSessionProperties.html#setTimeoutMsec","(Number value)","Sets the timeout for requests. <ul> <li>The valid range is &gt;= 3000.</li> </ul>",20],["solace.Destination#getName","solace.Destination","solace.Destination.html#getName"," function","",21],["solace.Destination#getType","solace.Destination","solace.Destination.html#getType"," function","",22],["solace.Destination#toString","solace.Destination","solace.Destination.html#toString"," function","",23],["solace.Enum.nameOf","solace.Enum","solace.Enum.html#nameOf","(Object instance, * value)","Returns the name of an enuerated value given the enumeration and the value.",24],["solace.Enum.values","solace.Enum","solace.Enum.html#values","(Object instance)","Returns values defined on this enumeration for the given keys. To get the enumeration keys, use Object#keys.",25],["solace.Enum#describe","solace.Enum","solace.Enum.html#describe","(any enumValue, String noneValue, String unknownValue)","Create a human-readable string describing the given enumeration value. This result is informational and may vary between SDK versions. Currently, it either returns the value provided (if the associated key is the same), or a string of the form <code>key (value)</code>.",26],["solace.Enum#nameOf","solace.Enum","solace.Enum.html#nameOf","(any enumValue)","Returns the canonical name in this enumeration for the given value. This function is designed to facilitate reflection, whereas for display",27],["solace.LogImpl.loggingCallback","solace.LogImpl","solace.LogImpl.html#loggingCallback","(* args)","A logging callback. It must accept any valid number of arguments of any type. It must not throw.",28],["solace.Message#acknowledge","solace.Message","solace.Message.html#acknowledge"," function","Acknowledges this message. If the solace.MessageConsumer} on which this message was received is configured to use {@link solace.MessageConsumerAckMode.CLIENT, then when a message is received by an application, the application must call this method to explicitly acknowledge reception of the message. This frees local and router resources associated with an unacknowledged message. The API does not send acknowledgments immediately. It stores the state for acknowledged messages internally and acknowledges messages, in bulk, when a threshold or timer is reached.",29],["solace.Message#dump","solace.Message","solace.Message.html#dump","(Number flags)","Produces a human-readable dump of the message's properties and contents. Applications must not parse the output, as its format is not a defined part of the API and subject to change.  Output can be controlled by the <code>flags</code> parameter. The values are: <ul> <li>MessageDumpFlag.MSGDUMP_BRIEF} Display only the length of the                          binary attachment, xml attachment, and user property map <li>{@link MessageDumpFlag.MSGDUMP_FULL Display the entire message. </ul> ",30],["solace.Message#getApplicationMessageId","solace.Message","solace.Message.html#getApplicationMessageId"," function","Gets the application-provided message ID.",31],["solace.Message#getApplicationMessageType","solace.Message","solace.Message.html#getApplicationMessageType"," function","Gets the application message type. This value is used by applications only, and is passed through the API and Solace Message Router untouched.",32],["solace.Message#getBinaryAttachment","solace.Message","solace.Message.html#getBinaryAttachment"," function","Gets the binary attachment part of the message. Backward compatibility note: Using the version10 factory profile or older, the binary attachment is returned as a 'latin1' String: Each character has a code in the range * 0-255 representing the value of a single received byte at that position.",33],["solace.Message#getCacheRequestId","solace.Message","solace.Message.html#getCacheRequestId"," function","Given a Message containing a cached message, return the cache Request Id that the application set in the call to solace.CacheSession#sendCacheRequest.",34],["solace.Message#getCacheStatus","solace.Message","solace.Message.html#getCacheStatus"," function","Gets the cache status of this message.",35],["solace.Message#getCorrelationId","solace.Message","solace.Message.html#getCorrelationId"," function","Gets the correlation ID.  The message Correlation Id is carried in the Solace message headers unmodified by the API and the Solace Message Router. This field may be used for peer-to-peer message synchronization and is commonly used for correlating a request to a reply. See solace.Session#sendRequest.",36],["solace.Message#getCorrelationKey","solace.Message","solace.Message.html#getCorrelationKey"," function","Gets the correlation Key. A correlation key is used to correlate a message with its acknowledgement or rejection. The correlation key is an object that is passed back to the client during the router acknowledgement or rejection. The correlation key is a local reference used by applications generating Guaranteed messages. Messages that are sent in either solace.MessageDeliveryModeType.PERSISTENT} or {@link solace.MessageDeliveryModeType.NON_PERSISTENT mode may set the correlation key.",37],["solace.Message#getDeliveryCount","solace.Message","solace.Message.html#getDeliveryCount"," function","Returns the delivery count.",38],["solace.Message#getDeliveryMode","solace.Message","solace.Message.html#getDeliveryMode"," function","Gets the delivery mode of the message.",39],["solace.Message#getDestination","solace.Message","solace.Message.html#getDestination"," function","Gets the destination to which the message was published.",40],["solace.Message#getGMExpiration","solace.Message","solace.Message.html#getGMExpiration"," function","",41],["solace.Message#getGuaranteedMessageId","solace.Message","solace.Message.html#getGuaranteedMessageId"," function","This message ID is NOT a universal unique identifier for the message. There is no use for this message ID in an application. Internally this message ID is used when a message is acknowledged calling Message.acknowledge(). No other meaning should be inferred from the value of this message ID.",42],["solace.Message#getMessageConsumer","solace.Message","solace.Message.html#getMessageConsumer"," function","",43],["solace.Message#getPriority","solace.Message","solace.Message.html#getPriority"," function","Gets the Message Priority Parameter (JMS Priority) value for the message. Numerical values between 0 and 255 are valid return values, undefined means the parameter is not present. If destination queues and topic endpoints for this message are configured to respect message priority, the values 0 through 9 can be used to affect the priority of delivery to consumers of those queues or topic endpoints. For the purposes of prioritized message delivery, values larger than 9 are treated the same as 9.",44],["solace.Message#getReceiverTimestamp","solace.Message","solace.Message.html#getReceiverTimestamp"," function","Gets the receive timestamp (in milliseconds, from midnight, January 1, 1970 UTC).",45],["solace.Message#getReplicationGroupMessageId","solace.Message","solace.Message.html#getReplicationGroupMessageId"," function","Returns the Replication Group Message Id",46],["solace.Message#getReplyTo","solace.Message","solace.Message.html#getReplyTo"," function","Gets the replyTo destination",47],["solace.Message#getSdtContainer","solace.Message","solace.Message.html#getSdtContainer"," function","Gets the message's structured data container, if this is a structured data message.",48],["solace.Message#getSenderId","solace.Message","solace.Message.html#getSenderId"," function","Returns the Sender's ID.",49],["solace.Message#getSenderTimestamp","solace.Message","solace.Message.html#getSenderTimestamp"," function","Gets the send timestamp (in milliseconds, from midnight, January 1, 1970 UTC).",50],["solace.Message#getSequenceNumber","solace.Message","solace.Message.html#getSequenceNumber"," function","Gets the sequence number.  This is an application-defined field, see <code>solace.Message#setSequenceNumber()</code>.",51],["solace.Message#getTimeToLive","solace.Message","solace.Message.html#getTimeToLive"," function","",52],["solace.Message#getTopicSequenceNumber","solace.Message","solace.Message.html#getTopicSequenceNumber"," function","Returns the Topic Sequence Number.  If there is no topic sequence number undefined is returned.",53],["solace.Message#getType","solace.Message","solace.Message.html#getType"," function","Gets the payload type (solace.MessageType}) of the message. A message has a structured payload if one was attached via {@link solace.Message#setSdtContainer} otherwise if the payload is attached via {@link Message@setBinaryAttachment} then it is unstructured ({@link solace.MessageType#BINARY)",54],["solace.Message#getUserCos","solace.Message","solace.Message.html#getUserCos"," function","Gets the Class of Service (CoS) value for the message. The Class of Service has different semantics for direct and guaranteed messages. For messages published with solace.MessageDeliveryModeType.DIRECT}, the class of service selects the weighted round-robin delivery queue when the message is forwarded to a consumer.  {@link solace.MessageUserCosType.COS1} are the lowest priority messages and will use the Solace Message Router D-1 delivery queues. For messages published as guaranteed messages ({@link solace.MessageDeliveryModeType.PERSISTENT} or {@link solace.solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published with {@link solace.MessageUserCosType.COS1 can be rejected by the Solace Message Router if that message would cause any queue or topic-endpoint to exceed its configured low-priority-max-msg-count.",55],["solace.Message#getUserData","solace.Message","solace.Message.html#getUserData"," function","Gets the user data part of the message.",56],["solace.Message#getUserPropertyMap","solace.Message","solace.Message.html#getUserPropertyMap"," function","Gets the user property map carried in the message binary metadata.",57],["solace.Message#getXmlContent","solace.Message","solace.Message.html#getXmlContent"," function","Gets the XML content part of the message. Notice that the content is encoded as UTF-8 characters, it needs to be decoded as JavaScript surrogate pair: decodeURIComponent(escape(value))",58],["solace.Message#getXmlContentDecoded","solace.Message","solace.Message.html#getXmlContentDecoded"," function","Gets the XML content part of the message decoded from UTF-8 encoding of the characters.",59],["solace.Message#getXmlMetadata","solace.Message","solace.Message.html#getXmlMetadata"," function","Gets the message's XML metadata section.",60],["solace.Message#isAcknowledgeImmediately","solace.Message","solace.Message.html#isAcknowledgeImmediately"," function","Test if the Acknowledge Immediately message property is set or not. When the Acknowledge Immediately property is set to true on an outgoing Guaranteed Message, it indicates that the Solace Message Router should Acknowledge this message immediately upon receipt. This property, when set by a publisher, may or may not be removed by the Solace Message Router prior to delivery to a consumer, so message consumers must not expect the property value indicates how the message was originally published",61],["solace.Message#isDeliverToOne","solace.Message","solace.Message.html#isDeliverToOne"," function","Gets whether the message is configured for delivering to one client only.",62],["solace.Message#isDiscardIndication","solace.Message","solace.Message.html#isDiscardIndication"," function","Indicates whether one or more messages have been discarded prior to the current message. This indicates congestion discards only and is not affected by message eliding.",63],["solace.Message#isDMQEligible","solace.Message","solace.Message.html#isDMQEligible"," function","",64],["solace.Message#isElidingEligible","solace.Message","solace.Message.html#isElidingEligible"," function","Returns whether the message is eligible for eliding.  Message eliding enables filtering of data to avoid transmitting every single update to a subscribing client.  This property does not indicate whether the message was elided.",65],["solace.Message#isRedelivered","solace.Message","solace.Message.html#isRedelivered"," function","Indicates whether the message has been marked as redelivered by the Solace Message Router.",66],["solace.Message#isReplyMessage","solace.Message","solace.Message.html#isReplyMessage"," function","Returns whether the message's reply field is set, indicating that this message is a reply to a previous request. See solace.Session#sendRequest.",67],["solace.Message#reset","solace.Message","solace.Message.html#reset"," function","Releases all memory associated with this message. All values are reinitialized to defaults. The message is no longer associated with any session or consumer.",68],["solace.Message#setAcknowledgeImmediately","solace.Message","solace.Message.html#setAcknowledgeImmediately","(Boolean value)","Set the optional Acknoweledge Immediately message property. When the Acknowledge Immediately property is set to true on an outgoing Guaranteed Message, it indicates that the Solace Message Router should acknoweledge this message immediately upon receipt. By default the property is set to false on newly created messages. This property, when set by a publisher, may or may not be removed by the appliance prior to delivery to a consumer, so message consumers must not expect the property value indicates how the message was originally published. Therefore if a received message is forwarded by the application, the Acknowledge Immediately property should be explicitly set to the desired value (true or false). Setting this property on an outgoing direct message has no effect.",69],["solace.Message#setApplicationMessageId","solace.Message","solace.Message.html#setApplicationMessageId","(String value)","Sets the application-provided message ID.",70],["solace.Message#setApplicationMessageType","solace.Message","solace.Message.html#setApplicationMessageType","(String value)","Sets the application message type. This value is used by applications only, and is passed through the API and Solace Message Router untouched.",71],["solace.Message#setAsReplyMessage","solace.Message","solace.Message.html#setAsReplyMessage","(Boolean value)","Sets the <i>reply</i> field of the message.",72],["solace.Message#setBinaryAttachment","solace.Message","solace.Message.html#setBinaryAttachment","(Uint8Array value)","Sets the binary attachment part of the message. The binary attachment is conceptually an array of bytes. When this method is used, the message payload type is solace.MessageType#BINARY} See {@link solace.Message#getType. Applications may set the binary attachment to NULL or undefined to remove the binary attachment and create a message with no payload. The following types are accepted:   Buffer (the nodeJS native type or equivalent)   ArrayBuffer,   Any DataView or TypedArray,   'latin1' String for backwards compatibility:     each character has a code in the range 0-255     representing exactly one byte in the attachment.",73],["solace.Message#setCorrelationId","solace.Message","solace.Message.html#setCorrelationId","(String value)","Sets the correlation ID. The message Correlation Id is carried in the Solace message headers unmodified by the API and the Solace Message Router. This field may be used for peer-to-peer message synchronization and is commonly used for correlating a request to a reply. See solace.Session#sendRequest.",74],["solace.Message#setCorrelationKey","solace.Message","solace.Message.html#setCorrelationKey","(Object value)","Sets the correlation Key. A correlation key is used to correlate a message with its acknowledgement or rejection. The correlation key is an object that is passed back to the client during the router acknowledgement or rejection. The correlation key is a local reference used by applications generating Guaranteed Messages. Messages that are sent in either solace.MessageDeliveryModeType.PERSISTENT} or {@link solace.MessageDeliveryModeType.NON_PERSISTENT} mode may set the correlation key. If this method is used, the correlation information is returned when the {@link solace.SessionEventCode#event:ACKNOWLEDGED_MESSAGE} event is later received for an acknowledged message or when the {@link solace.SessionEventCode#event:REJECTED_MESSAGE_ERROR is received for a rejected message. The API only maintains a reference to the passed object.  If the application requires the contents are unmodified for proper correlation, then it is the application's responsibility to ensure the contents of the object are not modified. Important: <b>The Correlation Key is not included in the transmitted message and is only used with the local API</b>",75],["solace.Message#setDeliverToOne","solace.Message","solace.Message.html#setDeliverToOne","(Boolean value)","Sets whether the message is configured for delivering to one client only.",76],["solace.Message#setDeliveryMode","solace.Message","solace.Message.html#setDeliveryMode","(solace.MessageDeliveryModeType value)","Sets the delivery mode of the message.",77],["solace.Message#setDestination","solace.Message","solace.Message.html#setDestination","(Destination value)","Sets the destination (solace.DestinationType#Topic} or {@link solace.DestinationType#Queue) to publish the message to.",78],["solace.Message#setDMQEligible","solace.Message","solace.Message.html#setDMQEligible","(Boolean value)","",79],["solace.Message#setElidingEligible","solace.Message","solace.Message.html#setElidingEligible","(Boolean value)","Sets whether the message is eligible for eliding.  Message eliding enables filtering of data to avoid transmitting every single update to a subscribing client.  This property does not indicate whether the message was elided.",80],["solace.Message#setGMExpiration","solace.Message","solace.Message.html#setGMExpiration","(Number value)","Set the expiration time field. The expiration time is the UTC time (that is, the number of milliseconds from midnight January 1, 1970 UTC) when the message is to expire. The expiration time is carried in the message when set to a non-zero value. Expiration time is not included when this value is set to zero or undefined The message expiration time is carried to clients that receive the message unmodified and does not effect the life cycle of the message. Use solace.Message#setTimeToLive to enforce message expiry in the network.",81],["solace.Message#setPriority","solace.Message","solace.Message.html#setPriority","(Number value)","Sets the Message Priority Parameter (JMS Priority) value for the message. Numerical values between 0 and 255 are accepted, use undefined to unset. If destination queues and topic endpoints for this message are configured to respect message priority, the values 0 through 9 can be used to affect the priority of delivery to consumers of those queues or topic endpoints. For the purposes of prioritized message delivery, values larger than 9 are treated the same as 9.",82],["solace.Message#setReplyTo","solace.Message","solace.Message.html#setReplyTo","(solace.Destination value)","Sets the replyTo destination",83],["solace.Message#setSdtContainer","solace.Message","solace.Message.html#setSdtContainer","(solace.SDTField container)","Makes this message a strutured data message by assigning it a structured data type (SDT) container payload (such as a solace.SDTMapContainer}, {@link solace.SDTStreamContainer} or a {@link solace.SDTFieldType.String}, which is transported in the binary attachment field. Assigning a SDT container updates the message's Type property to the appropriate value. The container argument must be a {@link solace.SDTField} with a type of {@link solace.SDTFieldType.MAP}, {@link solace.SDTFieldType.STREAM}, or {@link solace.SDTFieldType.STRING.",84],["solace.Message#setSenderId","solace.Message","solace.Message.html#setSenderId","(String value)","Sets the Sender ID for the message",85],["solace.Message#setSenderTimestamp","solace.Message","solace.Message.html#setSenderTimestamp","(Number value)","Sets the send timestamp (in milliseconds, from midnight, January 1, 1970 UTC). This field can be generated automatically during message publishing, but it will not be generated if previously set to a non-null value by this method. See solace.SessionProperties#generateSendTimestamps}. An application that publishes the same {@link solace.Messsage} multiple times and also wants generted timestamps on each messages, should set the sender timestamp to undefined after each call to {@link solace.Session#send.",86],["solace.Message#setSequenceNumber","solace.Message","solace.Message.html#setSequenceNumber","(Number value)","Sets the application-defined sequence number. If the sequence number is not set, or set to undefined, and solace.SessionProperties#generateSequenceNumber is true, then a sequence number is automatically generated for each sent message.",87],["solace.Message#setTimeToLive","solace.Message","solace.Message.html#setTimeToLive","(Number value)","",88],["solace.Message#setUserCos","solace.Message","solace.Message.html#setUserCos","(solace.MessageUserCosType value)","Sets the Class of Service (CoS) value for the message. The Class of Service has different semantics for direct and guaranteed messages. For messages published with solace.MessageDeliveryModeType.DIRECT}, the class of service selects the weighted round-robin delivery queue when the message is forwarded to a consumer.  {@link solace.MessageUserCosType#COS1} are the lowest priority messages and will use the Solace Message Router D-1 delivery queues. For messages published as guaranteed messages ({@link solace.MessageDeliveryModeType.PERSISTENT} or {@link solace.solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published with {@link solace.MessageUserCosType#COS1 can be rejected by the Solace Message Router if that message would cause any queue or topic-endpoint to exceed its configured low-priority-max-msg-count.",89],["solace.Message#setUserData","solace.Message","solace.Message.html#setUserData","(String value)","Sets the user data part of the message.",90],["solace.Message#setUserPropertyMap","solace.Message","solace.Message.html#setUserPropertyMap","(SDTMapContainer value)","Allows users to specify their own user properties to be carried in the message binary metadata separate from the payload.",91],["solace.Message#setXmlContent","solace.Message","solace.Message.html#setXmlContent","(String value)","Sets the XML content part of the message. The content is encoded by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character.",92],["solace.Message#setXmlMetadata","solace.Message","solace.Message.html#setXmlMetadata","(String value)","Sets the message's XML metadata section.",93],["solace.MessageConsumer#addSubscription","solace.MessageConsumer","solace.MessageConsumer.html#addSubscription","(solace.Destination topic, Object correlationKey, Number requestTimeout)","Subscribe the queue to a topic, always requesting confirmation from the router. solace.MessageConsumerEventName.SUBSCRIPTION_OK} is generated when subscription is added successfully; otherwise, session event {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR} is generated. When the application receives the event {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR}, it can obtain the failed topic subscription by calling {@link solace.MessageConsumerEvent#reason. The returned string is in the format of &quot;Topic: <failed topic subscription>&quot;.",94],["solace.MessageConsumer#clearStats","solace.MessageConsumer","solace.MessageConsumer.html#clearStats"," function","Clears all statistics for this Guaranteed Message Connection. All previous Guaranteed Message Connection statistics are lost when this is called.",95],["solace.MessageConsumer#connect","solace.MessageConsumer","solace.MessageConsumer.html#connect"," function","Connects the consumer immediately. The application should add event listeners (see solace.MessageConsumerEventName}). If there is no listener added for {@link solace.MessageConsumerEventName#event:MESSAGE} then up to a window {@link solace.MessageConsumerProperties.windowSize} of messages can be queued internally. to the {@link solace.MessageConsumer before calling this method.",96],["solace.MessageConsumer#disconnect","solace.MessageConsumer","solace.MessageConsumer.html#disconnect"," function","Initiates an orderly disconnection of the Message Consumer. The API will send any pending client acknowledgements on the Message Consumer, then send an unbind request. Any messages subsequently received are discarded silently. When the unbind message is acknowledged, the application receives a solace.MessageConsumerEventName#event:DOWN event if it has set a listener for that event.",97],["solace.MessageConsumer#dispose","solace.MessageConsumer","solace.MessageConsumer.html#dispose"," function","Disposes the Guaranteed Message connection, removing all listeners and releasing references.",98],["solace.MessageConsumer#getDestination","solace.MessageConsumer","solace.MessageConsumer.html#getDestination"," function","Returns the destination that should be used to publish messages that this consumer will receive. <ul> <li>For topic endpoints, this is the topic to which the topic endpoint is subscribed.</li> <li>For queues, this is the associated queue destination.</li> </ul> The destination returned can be used to set the ReplyTo field in a message, or otherwise communicated to partners that need to send messages to this Message Consumer. This is especially useful for temporary endpoints (Queues and Topic Endpoints), as the destination is unknown before the endpoint is created. This method will succeed after solace.MessageConsumerEventName#event:UP for temporaries with generated destinations.",99],["solace.MessageConsumer#getProperties","solace.MessageConsumer","solace.MessageConsumer.html#getProperties"," function","Creates and returns copy of the properties for this MessageConsumer. If the object was constructed using an solace.AbstractQueueDescriptor}, and the queue descriptor was subsequently connected to an endpoint, the <code>MessageConsumerProperties</code> returned will include a {@link solace.QueueDescriptor that contains the resolved name. A new copy of the properties object is returned each time this property is accessed. The returned object cannot be polled for mutations such as the one described above.",100],["solace.MessageConsumer#getStat","solace.MessageConsumer","solace.MessageConsumer.html#getStat","(solace.StatType statType)","Returns a statistic for this Guaranteed Message connection.",101],["solace.MessageConsumer#removeSubscription","solace.MessageConsumer","solace.MessageConsumer.html#removeSubscription","(solace.Destination topic, Object correlationKey, Number requestTimeout)","Unsubscribe the queue from a topic, requesting confirmation from the router. solace.MessageConsumerEventName.SUBSCRIPTION_OK} is generated when subscription is removed successfully; otherwise, session event {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR} is generated. When the application receives the message consumer event {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR}, it can obtain the failed topic subscription by calling {@link solace.MessageConsumerEvent#reason. The returned string is in the format &quot;Topic: <failed topic subscription>&quot;.",102],["solace.MessageConsumer#start","solace.MessageConsumer","solace.MessageConsumer.html#start"," function","Begins delivery of messages to this consumer. This method opens the protocol window to the Solace Message Router so further messages can be received. A newly created consumer is in started state. If the consumer was already started, this method has no effect. A consumer is stopped by calling solace.MessageConsumer.stop",103],["solace.MessageConsumer#stop","solace.MessageConsumer","solace.MessageConsumer.html#stop"," function","Stops messages from being delivered to this consumer from the Solace Message Router. Messages may continue to be prefetched by the API and queued internally until solace.MessageConsumer#start is called. If the consumer was already stopped, this method has no effect.",104],["solace.MessageConsumer#toString","solace.MessageConsumer","solace.MessageConsumer.html#toString"," function","",105],["solace.QueueBrowser#connect","solace.QueueBrowser","solace.QueueBrowser.html#connect"," function","Connects the queue browser immediately. The application should add event listeners (see solace.QueueBrowserEventName}). If there is no listener added for {@link solace.QueueBrowserEventName#event:MESSAGE} then up to a window {@link solace.QueueBrowserProperties.windowSize of messages can be queued internally. before calling this method.",106],["solace.QueueBrowser#disconnect","solace.QueueBrowser","solace.QueueBrowser.html#disconnect"," function","Initiates an orderly disconnection of the queue browser. The API will send an unbind request. Any messages subsequently received are discarded silently. When the unbind message is acknowledged, the application receives a solace.QueueBrowserEventName#event:DOWN event if it has set a listener for that event.",107],["solace.QueueBrowser#removeMessageFromQueue","solace.QueueBrowser","solace.QueueBrowser.html#removeMessageFromQueue","(Message message)","Removes a message from the queue by acknowledging it. The solace.QueueBrowser does not automatically acknowledge messages. once they have been received. The API does not send acknowledgments immediately. It stores the state for acknowledged messages internally and acknowledges messages, in bulk, when a threshold or timer is reached.",108],["solace.QueueBrowser#start","solace.QueueBrowser","solace.QueueBrowser.html#start"," function","Begins delivery of messages to this queue browser. This method opens the protocol window to the Solace Message Router so further messages can be received. A newly created queue browser is in started state. If the queue browser was already started, this method has no effect. A consumer is stopped by calling solace.QueueBrowser.stop",109],["solace.QueueBrowser#stop","solace.QueueBrowser","solace.QueueBrowser.html#stop"," function","Stops messages from being delivered to this queue browser from the Solace Message Router. Messages may continue to be prefetched by the API and queued internally until solace.QueueBrowser#start is called. If the queue browser was already stopped, this method has no effect.",110],["solace.QueueDescriptor#getName","solace.QueueDescriptor","solace.QueueDescriptor.html#getName"," function","Gets/sets the remote name to which this descriptor refers.",111],["solace.QueueDescriptor#toString","solace.QueueDescriptor","solace.QueueDescriptor.html#toString"," function","An informational summary of this object, subject to change.",112],["solace.ReplayStartLocation#toString","solace.ReplayStartLocation","solace.ReplayStartLocation.html#toString"," function","",113],["solace.ReplicationGroupMessageId#compare","solace.ReplicationGroupMessageId","solace.ReplicationGroupMessageId.html#compare","(ReplicationGroupMessageId otherReplicationGroupMessageId)","Compares with other ReplicationGroupMessageId",114],["solace.ReplicationGroupMessageId#toString","solace.ReplicationGroupMessageId","solace.ReplicationGroupMessageId.html#toString"," function","",115],["solace.SDTField.create","solace.SDTField","solace.SDTField.html#create","(solace.SDTFieldType type, * value)","Create a new SDTField instance representing a Value of a given Type.",116],["solace.SDTField#getType","solace.SDTField","solace.SDTField.html#getType"," function","Gets the type of field represented.",117],["solace.SDTField#getValue","solace.SDTField","solace.SDTField.html#getValue"," function","Gets the field value.",118],["solace.SDTMapContainer#addField","solace.SDTMapContainer","solace.SDTMapContainer.html#addField","(String key, solace.SDTField | solace.SDTFieldType typeOrField, * value)","Adds a field to this map. If a key:value mapping already exists for this key, it is replaced. ",119],["solace.SDTMapContainer#deleteField","solace.SDTMapContainer","solace.SDTMapContainer.html#deleteField","(String key)","Delete an SDTField with the given key.",120],["solace.SDTMapContainer#getField","solace.SDTMapContainer","solace.SDTMapContainer.html#getField","(String key)","Return the SDTField with the given key.",121],["solace.SDTMapContainer#getKeys","solace.SDTMapContainer","solace.SDTMapContainer.html#getKeys"," function","Get the list of keys in this map, in unspecified order.",122],["solace.SDTStreamContainer#addField","solace.SDTStreamContainer","solace.SDTStreamContainer.html#addField","(solace.SDTField | solace.SDTFieldType typeOrField, * value)","Appends a field to this stream. ",123],["solace.SDTStreamContainer#getNext","solace.SDTStreamContainer","solace.SDTStreamContainer.html#getNext"," function","Returns the next field in the stream and advances the read pointer. If the end of the stream is reached, it returns undefined.",124],["solace.SDTStreamContainer#hasNext","solace.SDTStreamContainer","solace.SDTStreamContainer.html#hasNext"," function","Returns true if the stream has at least one more solace.SDTField at the current position.",125],["solace.SDTStreamContainer#rewind","solace.SDTStreamContainer","solace.SDTStreamContainer.html#rewind"," function","Rewinds the read pointer to the beginning of the stream. Normally when hasNext returns false, a client application must call rewind() to reiterate over the stream's fields.",126],["solace.Session.replyReceivedCallback","solace.Session","solace.Session.html#replyReceivedCallback","(solace.Session session, solace.Message message, Object userObject)","A callback that returns replies to requests sent via solace.Session#sendRequest}. The replyReceivedCallback <b>must</b> be provided to the API as the third argument of {@link solace.Session#sendRequest.",127],["solace.Session.requestFailedCallback","solace.Session","solace.Session.html#requestFailedCallback","(solace.Session session, solace.RequestError error, Object userObject)","A callback that returns errors associated with requests sent via solace.Session#sendRequest}. The requestFailedCallback <b>must</b> be provided to the API as the fourth argument of {@link solace.Session#sendRequest",128],["solace.Session#connect","solace.Session","solace.Session.html#connect"," function","Connects the session to the Solace Message Router as configured in the solace.SessionProperties#url}. When the session is successfully connected to the Solace Message Router, the {@link solace.SessionEventCode#UP_NOTICE} event is emitted if a listener has been registered. If {@link solace.SessionProperties#reapplySubscriptions} is set to true, this operation re-registers previously registered subscriptions. The connected session event ({@link solace.SessionEventCode#event:UP_NOTICE}) is emitted only when all the subscriptions are successfully added to the router. If the API is unable to connect within {@link solace.SessionProperties#connectTimeoutInMsecs} or due to login failures, the session's state transitions back to 'disconnected' and an event is generated. <strong>Note:</strong> Before the session's state transitions to 'connected', a client application cannot use the session; any attempt to call functions will throw {@link solace.OperationError.",129],["solace.Session#createCacheSession","solace.Session","solace.Session.html#createCacheSession","(solace.CacheSessionProperties properties)","Creates a solace.CacheSession} object that uses this Session to service its cache requests. It should be disposed when the application no longer requires a CacheSession, by calling {@link solace.CacheSession#dispose.",130],["solace.Session#createMessageConsumer","solace.Session","solace.Session.html#createMessageConsumer","(solace.MessageConsumerProperties | Object consumerProperties)","Creates a solace.MessageConsumer} to receive Guaranteed Messages in this Session. Consumer characteristics and behavior are defined by properties. The consumer properties are supplied as an object; the pertinent fields are exposed in {@link solace.MessageConsumerProperties}; other property names are ignored. If the Message Consumer creation specifies a non-durable endpoint, {@link solace.QueueProperties} can be used to change the default properties on the non-durable endpoint. Any values not supplied are set to default values. When the consumer is created, a consumer object is returned to the caller. This is the object from which events are emitted, and upon which operations (for example, starting and stopping the consumer) are performed. If this session does not support Guaranteed Messaging, this method will throw. The following must be true in order to create a MessageConsumer: <ul> <li>The transport protocol list does not contain any HTTP transport protocols. See {@link solace.SessionProperties#transportProtocol} and {@link solace.FactoryProfile#cometEnabled</li> <li>The Solace Messaging Router must support Guaranteed Messaging</li> </ul>",131],["solace.Session#createQueueBrowser","solace.Session","solace.Session.html#createQueueBrowser","(solace.QueueBrowserProperties | Object browserProperties)","Creates a solace.QueueBrowser} to browse Guaranteed Messages on a specified queue in this Session. Browser characteristics and behavior are defined by properties. The browser properties are supplied as an object; the pertinent fields are exposed in {@link solace.QueueBrowserProperties}; other property names are ignored. Any values not supplied are set to default values. Delivery restrictions imposed by the queue’s Access type (exclusive or non-exclusive), do not apply when browsing messages with a Browser. When the queue browser is created, a queue browser object is returned to the caller. This is the object from which events are emitted, and upon which operations (for example, starting and stopping the browser) are performed. If this session does not support Guaranteed Messaging, this method will throw. The following must be true in order to create a QueueBrowser: <ul> <li>The transport protocol list does not contain any HTTP transport protocols. See {@link solace.SessionProperties#transportProtocol} and {@link solace.FactoryProfile#cometEnabled</li> <li>The Solace Messaging Router must support Guaranteed Messaging</li> </ul>",132],["solace.Session#disconnect","solace.Session","solace.Session.html#disconnect"," function","Disconnects the session. The session attempts to disconnect cleanly, concluding all operations in progress. The disconnected session event solace.SessionEventCode#event:DISCONNECTED is emitted when these operations complete and the session has completely disconnected.",133],["solace.Session#dispose","solace.Session","solace.Session.html#dispose"," function","Release all resources associated with the session. It is recommended to call disconnect() first for proper handshake with the message-router.",134],["solace.Session#getCapability","solace.Session","solace.Session.html#getCapability","(solace.CapabilityType capabilityType)","Get the value of an router capability, or null if unknown. This function must be called after connecting the session. SDT Type conversions: <ul> <li>{string} values are returned as solace.SDTFieldType.STRING}.</li> <li>{boolean} values are returned as {@link solace.SDTFieldType.BOOL}.</li> <li>All numeric values are returned as {@link solace.SDTFieldType.INT64.</li> </ul>",135],["solace.Session#getSessionProperties","solace.Session","solace.Session.html#getSessionProperties"," function","Returns a clone of the properties for this session.",136],["solace.Session#getStat","solace.Session","solace.Session.html#getStat","(solace.StatType statType)","Returns the value of a given solace.StatType.",137],["solace.Session#getTransportInfo","solace.Session","solace.Session.html#getTransportInfo"," function","Gets a transport session information string. This string is informative only, and applications should not attempt to parse it.",138],["solace.Session#isCapable","solace.Session","solace.Session.html#isCapable","(solace.CapabilityType capabilityType)","Check the value of a boolean router capability. This function is a shortcut for solace.Session#getCapability}. It performs the same operation, but instead of returning a {@link solace.SDTField wrapping a capability value, it just returns the boolean value.  Attempting to query a non-boolean capability will return <code>null</code>.",139],["solace.Session#resetStats","solace.Session","solace.Session.html#resetStats"," function","Reset session statistics to initial values.",140],["solace.Session#send","solace.Session","solace.Session.html#send","(solace.Message message)","Publish (send) a message over the session. The message is sent to its set destination. This method is used for sending both direct and Guaranteed Messages.  If the message's solace.MessageDeliveryModeType} is {@link solace.MessageDeliveryModeType.DIRECT, the message is a direct message; otherwise, it is a guaranteed message.",141],["solace.Session#sendReply","solace.Session","solace.Session.html#sendReply","(solace.Message messageToReplyTo, solace.Message replyMessage)","Sends a reply message to the destination specified in messageToReplyTo. If <code>messageToReplyTo</code> is non-null: <ul> <li>solace.Message#getReplyTo} is copied from <code>messageToReplyTo</code> to {@link solace.Message#setDestination} on <code>replyMessage</code>, unless <code>replyTo</code> is null.</li> <li>{@link solace.Message#setCorrelationId} is copied from <code>messageToReplyTo</code> to {@link solace.Message#setCorrelationId on <code>replyMessage</code>, unless <code>correlationId</code> is null.</li> </ul> If <code>messageToReplyTo</code> is null, the application is responsible for setting the <code>destination</code> and <code>correlationId</code> on the <code>replyMessage</code>.",142],["solace.Session#sendRequest","solace.Session","solace.Session.html#sendRequest","(solace.Message message, Number timeout, solace.Session.replyReceivedCallback replyReceivedCBFunction, solace.Session.requestFailedCallback requestFailedCBFunction, Object userObject)","Sends a request using user-specified callback functions. <br> <strong>Note:</strong> The API sets the correlationId and replyTo fields of the message being sent; this overwrites any existing correlationId and replyTo values on the message.",143],["solace.Session#subscribe","solace.Session","solace.Session.html#subscribe","(solace.Destination topic, Boolean requestConfirmation, Object correlationKey, Number requestTimeout)","Subscribe to a topic, optionally requesting a confirmation from the router. If requestConfirmation is set to true: solace.SessionEventCode.SUBSCRIPTION_OK} is generated when subscription is added successfully; otherwise, session event {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated. If requestConfirmation is set to false, only session event {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated upon failure. When the application receives session event {@link solace.SessionEventCode.SUBSCRIPTION_ERROR}, it can obtain the failed topic subscription by calling {@link solace.SessionEvent#reason. The returned string is in the format of &quot;Topic: <failed topic subscription>&quot;.",144],["solace.Session#unsubscribe","solace.Session","solace.Session.html#unsubscribe","(solace.Destination topic, Boolean requestConfirmation, Object correlationKey, Number requestTimeout)","Unsubscribe from a topic, and optionally request a confirmation from the router. If requestConfirmation is set to true, session event solace.SessionEventCode.SUBSCRIPTION_OK} is generated when subscription is removed successfully; otherwise, session event {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated. If requestConfirmation is set to false, only session event {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated upon failure. When the application receives session event {@link solace.SessionEventCode.SUBSCRIPTION_ERROR}, it can obtain the failed topic subscription by calling {@link solace.SessionEvent#reason. The returned string is in the format &quot;Topic: <failed topic subscription>&quot;.",145],["solace.Session#unsubscribeDurableTopicEndpoint","solace.Session","solace.Session.html#unsubscribeDurableTopicEndpoint","(solace.AbstractQueueDescriptor | solace.QueueDescriptor queueDescriptor)","Request that a Durable Topic Endpoint stop receiving data on a topic. Unsubscribe requests are only allowed by the router when no clients are bound to the DTE. If the unubscribe request is successful, the DTE will stop attracting messages, and all messages spooled to the DTE will be deleted. solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_OK} is generated when the subscription is removed successfully; otherwise, {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR} is generated. When the application receives session event {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR}, it can obtain the failed topic subscription by calling {@link solace.SessionEvent#reason.",146],["solace.Session#updateAuthenticationOnReconnect","solace.Session","solace.Session.html#updateAuthenticationOnReconnect","(Object authenticationProperties)","Modify (some) authentication-related session properties. The modifications take effect the next time the session connects or reconnects to the broker. There is no change to the active connection. Calling this method does not in itself trigger any kind of reconnection, reauthentication or renegotiation. <strong>Note:</strong> the update of &quot;accessToken&quot; and &quot;idToken&quot; properties is currently supported. Authentication Properties <ul> <li>accessToken to update previously set access token required for OAUTH2 authentication.</li> <li>idToken to update previously set ID token required for OIDC authentication Example: updateAuthenticationOnReconnect({accessToken : “my_new_token”});</li> </ul>",147],["solace.Session#updateProperty","solace.Session","solace.Session.html#updateProperty","(MutableSessionProperty mutableSessionProperty, Object newValue, Number requestTimeout, Object correlationKey)","Modify a session property after creation of the session. This method only works for a select few properties, and updates their value on the live broker session.",148],["solace.SessionProperties#toString","solace.SessionProperties","solace.SessionProperties.html#toString"," function","Returns a human-readable representation of this Session, subject to change.",149],["solace.SolclientFactory.createDurableQueueDestination","solace.SolclientFactory","solace.SolclientFactory.html#createDurableQueueDestination","(String queueName)","Creates a durable queue solace.Destination} instance. When the returned Destination is set as the destination of a message via {@link solace.Message#setDestination, the message will be delivered to the Guaranteed Message queue on the Solace Message Router of the same name.",150],["solace.SolclientFactory.createMessage","solace.SolclientFactory","solace.SolclientFactory.html#createMessage"," function","Creates a solace.Message instance.",151],["solace.SolclientFactory.createReplayStartLocationBeginning","solace.SolclientFactory","solace.SolclientFactory.html#createReplayStartLocationBeginning"," function","Creates a ReplayStartLocation solace.ReplayStartLocation instance that when set in MessageConsumerProperties indicates that all messages available in the replay log should be retrieved.",152],["solace.SolclientFactory.createReplayStartLocationDate","solace.SolclientFactory","solace.SolclientFactory.html#createReplayStartLocationDate","(Date dateTime)","Creates a ReplayStartLocation solace.ReplayStartLocation instance that when set in MessageConsumerProperties indicates that only messages spooled in the replay log since the given Date should be retrieved.",153],["solace.SolclientFactory.createReplicationGroupMessageId","solace.SolclientFactory","solace.SolclientFactory.html#createReplicationGroupMessageId","(string id)","Creates a solace.ReplicationGroupMessageId} instance from string. A ReplicationGroupMessageId is also a {@link solace.ReplayStartLocation instance that when set in MessageConsumerProperties indicates that only messages spooled in the replay log since the message after the given ReplicationGroupMesageId should be replayed.",154],["solace.SolclientFactory.createSession","solace.SolclientFactory","solace.SolclientFactory.html#createSession","(solace.SessionProperties sessionProperties, solace.MessageRxCBInfo messageCallbackInfo, solace.SessionEventCBInfo eventCallbackInfo)","Creates a session instance.",155],["solace.SolclientFactory.createTopicDestination","solace.SolclientFactory","solace.SolclientFactory.html#createTopicDestination","(String topicName)","Creates a topic solace.Destination} instance. When the returned Destination is set as the destination of a message via {@link solace.Message#setDestination, the message will be delivered to direct subscribers or topic endpoints subscribed to the given topic.",156],["solace.SolclientFactory.getLogLevel","solace.SolclientFactory","solace.SolclientFactory.html#getLogLevel"," function","Gets the current log level, which was set by solace.SolclientFactory.init} or a subsequent call to {@link solace.SolclientFactory.setLogLevel.",157],["solace.SolclientFactory.init","solace.SolclientFactory","solace.SolclientFactory.html#init","(solace.SolclientFactoryProperties factoryProps, solace.LogImpl factoryProps.logger, solace.LogLevel factoryProps.logLevel, solace.SolclientFactoryProfiles factoryProps.profile)","Initialize global properties. This function must be called before any other API call is made. Note: After the first call to this method, subsequent calls have no effect.",158],["solace.SolclientFactory.setLogLevel","solace.SolclientFactory","solace.SolclientFactory.html#setLogLevel","(solace.LogLevel newLevel)","This method changes the current log level from the level set when solace.SolclientFactory.init was called.",159],["solace.Topic#getName","solace.Topic","solace.Topic.html#getName"," function","",160],["solace.Topic#getType","solace.Topic","solace.Topic.html#getType"," function","",161],["solace.Topic#toString","solace.Topic","solace.Topic.html#toString"," function","",162],["solace.MessageConsumerEventName#event:ACTIVE","solace.MessageConsumerEventName","solace.MessageConsumerEventName.html#event:ACTIVE"," event","The message consumer has become active.",163],["solace.MessageConsumerEventName#event:CONNECT_FAILED_ERROR","solace.MessageConsumerEventName","solace.MessageConsumerEventName.html#event:CONNECT_FAILED_ERROR","(solace.OperationError error)","The message consumer attempted to connect but was unsuccessful. The message consumer is disabled.",164],["solace.MessageConsumerEventName#event:DISPOSED","solace.MessageConsumerEventName","solace.MessageConsumerEventName.html#event:DISPOSED"," event","The message consumer is being disposed. No further events will be emitted.",165],["solace.MessageConsumerEventName#event:DOWN","solace.MessageConsumerEventName","solace.MessageConsumerEventName.html#event:DOWN"," event","The message consumer is successfully disconnected. The message consumer is disabled.",166],["solace.MessageConsumerEventName#event:DOWN_ERROR","solace.MessageConsumerEventName","solace.MessageConsumerEventName.html#event:DOWN_ERROR","(solace.OperationError error)","The message consumer was established and then disconnected by the router, likely due to operator intervention. The message consumer is disabled.",167],["solace.MessageConsumerEventName#event:GM_DISABLED","solace.MessageConsumerEventName","solace.MessageConsumerEventName.html#event:GM_DISABLED"," event","The message consumer will not connect because the current session is incompatible with Guaranteed Messaging. The message consumer is disabled until a compatible session is available.",168],["solace.MessageConsumerEventName#event:INACTIVE","solace.MessageConsumerEventName","solace.MessageConsumerEventName.html#event:INACTIVE"," event","The message consumer has become inactive.",169],["solace.MessageConsumerEventName#event:MESSAGE","solace.MessageConsumerEventName","solace.MessageConsumerEventName.html#event:MESSAGE","(solace.Message message)","A message was received on the message consumer. If the application throws an exception in this listener, and the consumer was configured to automatically acknowledge messages (see solace.MessageConsumerProperties#acknowledgeMode}), the API will not acknowledge the message, since it may not have been successfully processed by the application. Such a message must be acknowledged manually. If the application did not retain a reference to the message, it may be redelivered by calling {@link solace.MessageConsumer#disconnect} followed by {@link solace.MessageConsumer#connect depending on the configuration of the queue. When there is no listener for <i>MESSAGE</i> on a MessageConsumer, messages are queued internally until a listener is added.",170],["solace.MessageConsumerEventName#event:RECONNECTED","solace.MessageConsumerEventName","solace.MessageConsumerEventName.html#event:RECONNECTED"," event","The message consumer successfully auto-reconnected.",171],["solace.MessageConsumerEventName#event:RECONNECTING","solace.MessageConsumerEventName","solace.MessageConsumerEventName.html#event:RECONNECTING","(solace.OperationError error)","The message consumer was established and then disconnected by the router, likely due to operator intervention, but flow auto reconnect is active. The message consumer is disabled, but actively reconnecting. Expect a RECONNECTED or DOWN_ERROR on success of failure. respectively. See also MessageConsumerProperties.reconnectAttempts and reconnectIntervalInMsecs.",172],["solace.MessageConsumerEventName#event:SUBSCRIPTION_ERROR","solace.MessageConsumerEventName","solace.MessageConsumerEventName.html#event:SUBSCRIPTION_ERROR","(solace.MessageConsumerEvent error)","The Solace Message Router rejected a queue subscription (add or remove).",173],["solace.MessageConsumerEventName#event:SUBSCRIPTION_OK","solace.MessageConsumerEventName","solace.MessageConsumerEventName.html#event:SUBSCRIPTION_OK","(solace.MessageConsumerEvent event)","The subscribe or unsubscribe operation succeeded on the queue.",174],["solace.MessageConsumerEventName#event:UP","solace.MessageConsumerEventName","solace.MessageConsumerEventName.html#event:UP"," event","The message consumer is established.",175],["solace.QueueBrowserEventName#event:CONNECT_FAILED_ERROR","solace.QueueBrowserEventName","solace.QueueBrowserEventName.html#event:CONNECT_FAILED_ERROR","(solace.OperationError error)","The queue browser attempted to connect but was unsuccessful. The queue browser is disabled.",176],["solace.QueueBrowserEventName#event:DISPOSED","solace.QueueBrowserEventName","solace.QueueBrowserEventName.html#event:DISPOSED"," event","The queue browser is being disposed. No further events will be emitted.",177],["solace.QueueBrowserEventName#event:DOWN","solace.QueueBrowserEventName","solace.QueueBrowserEventName.html#event:DOWN"," event","The queue browser is successfully disconnected. The queue browser is disabled.",178],["solace.QueueBrowserEventName#event:DOWN_ERROR","solace.QueueBrowserEventName","solace.QueueBrowserEventName.html#event:DOWN_ERROR","(solace.OperationError error)","The queue browser was established and then disconnected by the router, likely due to operator intervention. The queue browser is disabled.",179],["solace.QueueBrowserEventName#event:GM_DISABLED","solace.QueueBrowserEventName","solace.QueueBrowserEventName.html#event:GM_DISABLED"," event","The queue browser will not connect because the current session is incompatible with Guaranteed Messaging. The queue browser is disabled until a compatible session is available.",180],["solace.QueueBrowserEventName#event:MESSAGE","solace.QueueBrowserEventName","solace.QueueBrowserEventName.html#event:MESSAGE","(solace.Message message)","A message was received on the queue browser. If the application did not retain a reference to the message, it may be redelivered by calling solace.QueueBrowser#disconnect} followed by {@link solace.QueueBrowser#connect depending on the configuration of the queue. When there is no listener for <i>MESSAGE</i> on a QueueBrowser, messages are queued internally until a listener is added.",181],["solace.QueueBrowserEventName#event:UP","solace.QueueBrowserEventName","solace.QueueBrowserEventName.html#event:UP"," event","The queue browser is established.",182],["solace.SessionEventCode#event:ACKNOWLEDGED_MESSAGE","solace.SessionEventCode","solace.SessionEventCode.html#event:ACKNOWLEDGED_MESSAGE","(solace.SessionEvent event)","A message was acknowledged by the router.",183],["solace.SessionEventCode#event:CAN_ACCEPT_DATA","solace.SessionEventCode","solace.SessionEventCode.html#event:CAN_ACCEPT_DATA"," event","The session transport can accept data again.  This event will occur after an solace.OperationError} is thrown from an API call with a subcode of {@link solace.ErrorSubcode.INSUFFICIENT_SPACE to indicate the operation can be retried. This event is used both after session-level transport buffer exhaustion, and Guaranteed Messaging Window exhaustion.",184],["solace.SessionEventCode#event:CONNECT_FAILED_ERROR","solace.SessionEventCode","solace.SessionEventCode.html#event:CONNECT_FAILED_ERROR","(solace.OperationError error)","The session attempted to connect but was unsuccessful.",185],["solace.SessionEventCode#event:DISCONNECTED","solace.SessionEventCode","solace.SessionEventCode.html#event:DISCONNECTED"," event","The session connect operation failed, or the session that was once up, is now disconnected.",186],["solace.SessionEventCode#event:DOWN_ERROR","solace.SessionEventCode","solace.SessionEventCode.html#event:DOWN_ERROR","(solace.OperationError error)","The session was established and then went down.",187],["solace.SessionEventCode#event:GUARANTEED_MESSAGE_PUBLISHER_DOWN","solace.SessionEventCode","solace.SessionEventCode.html#event:GUARANTEED_MESSAGE_PUBLISHER_DOWN","(solace.OperationError error)","Guaranteed Messaging Publisher has been closed by the Solace message router. This usually indicates an operator has disabled the message spool.",188],["solace.SessionEventCode#event:MESSAGE","solace.SessionEventCode","solace.SessionEventCode.html#event:MESSAGE","(solace.Message message)","A Direct message was received on the session. This event code is only used on the <b>EventEmitter</b> session interface.  If using the deprecated callback interface, messages are received via the callback provided in solace.MessageRxCBInfo.",189],["solace.SessionEventCode#event:PROPERTY_UPDATE_ERROR","solace.SessionEventCode","solace.SessionEventCode.html#event:PROPERTY_UPDATE_ERROR","(solace.RequestError error)","The event represents a failed update of a mutable session property.",190],["solace.SessionEventCode#event:PROPERTY_UPDATE_OK","solace.SessionEventCode","solace.SessionEventCode.html#event:PROPERTY_UPDATE_OK","(solace.SessionEvent event)","The event represents a successful update of a mutable session property.",191],["solace.SessionEventCode#event:RECONNECTED_NOTICE","solace.SessionEventCode","solace.SessionEventCode.html#event:RECONNECTED_NOTICE","(solace.SessionEvent event)","The automatic reconnect of the Session was successful, and the session is established again.",192],["solace.SessionEventCode#event:RECONNECTING_NOTICE","solace.SessionEventCode","solace.SessionEventCode.html#event:RECONNECTING_NOTICE","(solace.SessionEvent event)","The session has gone down, and an automatic reconnection attempt is in progress.",193],["solace.SessionEventCode#event:REJECTED_MESSAGE_ERROR","solace.SessionEventCode","solace.SessionEventCode.html#event:REJECTED_MESSAGE_ERROR","(solace.RequestError error)","The Solace Message Router rejected a published message.",194],["solace.SessionEventCode#event:REPUBLISHING_UNACKED_MESSAGES","solace.SessionEventCode","solace.SessionEventCode.html#event:REPUBLISHING_UNACKED_MESSAGES","(solace.SessionEvent event)","The session has automatically recovered after the Guaranteed Message publisher failed to reconnect. Messages sent but not acknowledged are being renumbered and retransmitted. Some messages may be duplicated in the system.",195],["solace.SessionEventCode#event:SUBSCRIPTION_ERROR","solace.SessionEventCode","solace.SessionEventCode.html#event:SUBSCRIPTION_ERROR","(solace.RequestError error)","The Solace Message Router rejected a subscription (add or remove).",196],["solace.SessionEventCode#event:SUBSCRIPTION_OK","solace.SessionEventCode","solace.SessionEventCode.html#event:SUBSCRIPTION_OK","(solace.SessionEvent event)","The subscribe or unsubscribe operation succeeded.",197],["solace.SessionEventCode#event:UNSUBSCRIBE_TE_TOPIC_ERROR","solace.SessionEventCode","solace.SessionEventCode.html#event:UNSUBSCRIBE_TE_TOPIC_ERROR","(solace.OperationError error)","Unsubscribing the topic from the Durable Topic Endpoint failed.",198],["solace.SessionEventCode#event:UNSUBSCRIBE_TE_TOPIC_OK","solace.SessionEventCode","solace.SessionEventCode.html#event:UNSUBSCRIBE_TE_TOPIC_OK"," event","Unsubscribing the topic from the Durable Topic Endpoint succeeded.",199],["solace.SessionEventCode#event:UP_NOTICE","solace.SessionEventCode","solace.SessionEventCode.html#event:UP_NOTICE"," event","The Session is ready to send/receive messages and perform control operations. At this point the transport session is up, the Session has logged in, and the P2PInbox subscription is added. The session is established.",200],["solace.SessionEventCode#event:VIRTUALROUTER_NAME_CHANGED","solace.SessionEventCode","solace.SessionEventCode.html#event:VIRTUALROUTER_NAME_CHANGED","(solace.SessionEvent event)","The Solace Message Router's Virtual Router Name changed during a reconnect operation.",201],["solace.Enum","solace","solace.Enum.html","(Object values)","Creates an Enum with the given key-value mapping.",202],["solace.AbstractQueueDescriptor","solace","solace.AbstractQueueDescriptor.html"," class","",203],["solace.CacheCBInfo","solace","solace.CacheCBInfo.html","(solace.CacheCBInfo.cacheRequestCallback cacheCBFunction, Object userObject)","Creates an instance of CacheCBInfo using the provided callback and user context object.",204],["solace.CacheRequestResult","solace","solace.CacheRequestResult.html"," class","",205],["solace.CacheSession","solace","solace.CacheSession.html"," class","",206],["solace.CacheSessionProperties","solace","solace.CacheSessionProperties.html","(String cacheName, Number maxAgeSec, Number maxMessages, Number timeoutMsec)","",207],["solace.Destination","solace","solace.Destination.html"," class","",208],["solace.LogImpl","solace","solace.LogImpl.html","(solace.LogImpl.loggingCallback trace, solace.LogImpl.loggingCallback debug, solace.LogImpl.loggingCallback info, solace.LogImpl.loggingCallback warn, solace.LogImpl.loggingCallback error, solace.LogImpl.loggingCallback fatal)","",209],["solace.Message","solace","solace.Message.html"," class","",210],["solace.MessageConsumer < solace.Flow","solace","solace.MessageConsumer.html"," class","",211],["solace.MessageConsumerEvent","solace","solace.MessageConsumerEvent.html","(String messageConsumerEventName, String infoStr, Number responseCode, solace.ErrorSubcode errorSubcode, Object correlationKey, String reason)","",212],["solace.MessageConsumerProperties","solace","solace.MessageConsumerProperties.html"," class","",213],["solace.MessagePublisherProperties","solace","solace.MessagePublisherProperties.html","(Object options)","",214],["solace.MessageRxCBInfo","solace","solace.MessageRxCBInfo.html","(function messageRxCBFunction, Object userObject)","Creates an instance of MessageRxCBInfo.",215],["solace.NotImplementedError < solace.SolaceError","solace","solace.NotImplementedError.html"," class","",216],["solace.OperationError < solace.SolaceError","solace","solace.OperationError.html"," class","",217],["solace.QueueBrowser","solace","solace.QueueBrowser.html"," class","",218],["solace.QueueBrowserProperties","solace","solace.QueueBrowserProperties.html"," class","",219],["solace.QueueDescriptor < AbstractQueueDescriptor","solace","solace.QueueDescriptor.html","(Object | solace.QueueDescriptor queueSpec, String queueSpec.name, solace.QueueType queueSpec.type, Boolean queueSpec.durable)","Creates an instance of solace.QueueDescriptor.",220],["solace.QueueProperties","solace","solace.QueueProperties.html"," class","",221],["solace.ReplayStartLocation","solace","solace.ReplayStartLocation.html","(SObject spec)","",222],["solace.ReplayStartLocationBeginning < ReplayStartLocation","solace","solace.ReplayStartLocationBeginning.html"," class","",223],["solace.ReplayStartLocationDate < ReplayStartLocation","solace","solace.ReplayStartLocationDate.html","(Object spec)","",224],["solace.ReplicationGroupMessageId < solace.ReplayStartLocation","solace","solace.ReplicationGroupMessageId.html","(Long spoolerUniqueId, Long effectiveMessageId)","",225],["solace.RequestError < solace.OperationError","solace","solace.RequestError.html"," class","",226],["solace.SDTField","solace","solace.SDTField.html"," class","",227],["solace.SDTMapContainer","solace","solace.SDTMapContainer.html"," class","",228],["solace.SDTStreamContainer","solace","solace.SDTStreamContainer.html"," class","",229],["solace.SDTUnsupportedValueError < solace.SolaceError","solace","solace.SDTUnsupportedValueError.html"," class","",230],["solace.Session","solace","solace.Session.html"," class","",231],["solace.SessionEvent","solace","solace.SessionEvent.html","(Array superclassArgs, solace.SessionEventCode sessionEventCode, String infoStr, Number responseCode, solace.ErrorSubcode errorSubcode, Object correlationKey, String reason)","",232],["solace.SessionEventCBInfo","solace","solace.SessionEventCBInfo.html","(function sessionEventCBFunction, Object userObject)","Creates an instance of SessionEventCBInfo.",233],["solace.SessionProperties < APIProperties","solace","solace.SessionProperties.html","(Object options)","",234],["solace.SolaceError < Error","solace","solace.SolaceError.html"," class","",235],["solace.SolclientFactoryProperties","solace","solace.SolclientFactoryProperties.html","(Object options, solace.LogLevel options.logLevel, solace.LogImpl options.logger, solace.SolclientFactoryProfiles options.profile)","Creates an instance of SolclientFactoryProperties.",236],["solace.Topic < solace.Destination","solace","solace.Topic.html","(Object spec)","",237],["solace","","solace.html","","",238],["solace.AuthenticationScheme","solace","solace.AuthenticationScheme.html","","Represents authentication schemes that can be used. The corresponding session property is solace.SessionProperties#authenticationScheme.",239],["solace.CacheLiveDataAction","solace","solace.CacheLiveDataAction.html","","solace.CacheLiveDataAction Enumeration of CacheLiveDataAction values, specifying how the CacheSession should handle live data associated with a cache request in progress.",240],["solace.CacheReturnCode","solace","solace.CacheReturnCode.html","","Enumeration of CacheReturnCode types.  The method solace.CacheRequestResult#getReturnCode} returns on of these basic results of a cache request.  More details are available in the associated {@link solace.CacheReturnSubcode}, retrieved by {@link solace.CacheRequestResult#getReturnSubcode.",241],["solace.CacheReturnSubcode","solace","solace.CacheReturnSubcode.html","","Enumeration of CacheReturnSubcode types.",242],["solace.CapabilityType","solace","solace.CapabilityType.html","","Represents an enumeration of peer capabilities.",243],["solace.ClientCapabilityType","solace","solace.ClientCapabilityType.html","","Represents an enumeration of client capabilities. These are sent in the ClientCtrl login messages.",244],["solace.DestinationType","solace","solace.DestinationType.html","","Enumerates destination types for destination objects.",245],["solace.ErrorSubcode","solace","solace.ErrorSubcode.html","","Defines an error subcode enumeration which is returned as a property of the errors/exceptions thrown by the API. The subcode provides more detailed error information. The following subcodes can apply to error responses resulting from any API method. <ul> <li>solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}</li> <li>{@link solace.ErrorSubcode.PARAMETER_CONFLICT}</li> <li>{@link solace.ErrorSubcode.INTERNAL_ERROR</li> </ul>",246],["solace.LogLevel","solace","solace.LogLevel.html","","Represents a log level enumeration.",247],["solace.MessageCacheStatus","solace","solace.MessageCacheStatus.html","","An attribue of a solace.Message}. Applications receive messages due to subscriptions on topics, or consumers connected to durable objects.  The MessageCacheStatus of such messages is: {@link solace.MessageCacheStatus.LIVE}. Message are also delivered to an application as a result of a cache request (see {@link solace.CacheSession#sendCacheRequest}) which have a MessageCacheStatus that is {@link solace.MessageCacheStatus.CACHED} or {@link solace.MessageCacheStatus.SUSPECT}. The MessageCacheStatus is retrieved with {@link solace.Message#getCacheStatus.",248],["solace.MessageConsumerAcknowledgeMode","solace","solace.MessageConsumerAcknowledgeMode.html","","An enumeration of consumer acknowledgement modes. The corresponding MessageConsumer property solace.MessageConsumerProperties#acknowledgeMode} configures how acknowledgments are generated for received Guaranteed messages. When received messages are acknowledged they are removed from the Guaranteed Message storage on the Solace Message Router. Message Consumer acknowledgements, <b>only</b> remove messages from the Solace Message Router. In particular, withholding Message Consumer Acknowledgemnts does not stop message delivery. For Message Consumer flow control see {@link solace.MessageConsumer.stop}/{@link solace.MessageConsumer.start}. Message Consumer flow control may also be imlpemented by removing the {@link solace.MessageConsumerEventName#event:MESSAGE listener.",249],["solace.MessageConsumerEventName","solace","solace.MessageConsumerEventName.html","","An enumeration of message consumer event names. A solace.MessageConsumer} will emit these events as part of its lifecycle.  Applications, having created a MessageConsumer can choose to listen to all of the events described here, or any subset of these events. For Example: ",250],["solace.MessageDeliveryModeType","solace","solace.MessageDeliveryModeType.html","","Represents an enumeration of message delivery modes.",251],["solace.MessageDumpFlag","solace","solace.MessageDumpFlag.html","","Represents an enumeration of message dump formats. It controls the output of solace.Message#dump.",252],["solace.MessagePublisherAcknowledgeMode","solace","solace.MessagePublisherAcknowledgeMode.html","","Represents authentication scheme enumeration.",253],["solace.MessageType","solace","solace.MessageType.html","","Represents an enumeration of message payload types (see solace.Message#getBinaryAttachment) A message may contain unstructured byte data, or a structured container.",254],["solace.MessageUserCosType","solace","solace.MessageUserCosType.html","","Represents an enumeration of user Class of Service (COS) levels. The COS is set on a Message with solace.Message#setUserCos} The Class of Service has different semantics for direct and guaranteed messages. For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the class of service selects the weighted round-robin delivery queue when the message is forwarded to a consumer.  {@link solace.MessageUserCosType.COS1} are the lowest priority messages and will use the Solace Message Router D-1 delivery queues. For messages published as guaranteed messages ({@link solace.MessageDeliveryModeType.PERSISTENT} or {@link solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published with {@link solace.MessageUserCosType.COS1 can be rejected by the Solace Message Router if that message would cause any queue or topic-endpoint to exceed its configured low-priority-max-msg-count.",255],["solace.MutableSessionProperty","solace","solace.MutableSessionProperty.html","","Represents an enumeration of session properties that can be modified by solace.Session.updateProperty} after the {@link solace.Session} is originally created. These correspond to session properties in {@link solace.SessionProperties.",256],["solace.QueueAccessType","solace","solace.QueueAccessType.html","","Represents the possible endpoint access types. The corresponding endpoint property is solace.QueueProperties#accessType.",257],["solace.QueueBrowserEventName","solace","solace.QueueBrowserEventName.html","","An enumeration of queue browser event names. A solace.QueueBrowser} will emit these events as part of its lifecycle.  Applications, having created a QueueBrowser can choose to listen to all of the events described here, or any subset of these events. For Example: ",258],["solace.QueueDiscardBehavior","solace","solace.QueueDiscardBehavior.html","","Enumerates the behavior options when a message cannot be added to an endpoint (for example, the maximum quota solace.QueueProperties#quotaMB was exceeded).",259],["solace.QueuePermissions","solace","solace.QueuePermissions.html","","Represents the permissions applicable to a queue. The corresponding endpoint property is solace.QueueProperties#permissions}. The access controls: <ul> <li>the permissions for all other users of the queue, this only applies to non-durable queues {@link solace.QueueProperties#permissions};</li> <li>for the current Message Consumer  on a queue or endpoint, {@link solace.MessageConsumer.permissions</li> </ul> For example, creating a temporary topic endpoint with MODIFY_TOPIC will allow other users to modify the topic subscribed to that endpoint.",260],["solace.QueueType","solace","solace.QueueType.html","","Specifies the type of remote resource to which an solace.AbstractQueueDescriptor refers.",261],["solace.RequestEventCode","solace","solace.RequestEventCode.html","","An attribute of solace.RequestError}. This enumeration represents the different errors emitted by {@link solace.Session.requestFailedCallback} when a {@link solace.Session#sendRequest} fails. The client application receives a request error with event code {@link solace.RequestEventCode.REQUEST_ABORTED when the underlying connection is successfully closed, or closed as a result of a communication error.",262],["solace.SDTFieldType","solace","solace.SDTFieldType.html","","An enumeration of all SDT data types.",263],["solace.SDTValueErrorSubcode","solace","solace.SDTValueErrorSubcode.html","","Enumeration of solace.SDTUnsuportedValueError causes.",264],["solace.SessionEventCode","solace","solace.SessionEventCode.html","","An attribute of SessionEvent}. This enumeration represents the different events emitted by {@link Session} through the session event callback. When a session is no longer in a usable state, the API tears down the underlying connection and notifies the application with one of the following session events: <ul> <li>{@link solace.SessionEventCode#event:DOWN_ERROR}</li> <li>{@link solace.SessionEventCode#event:CONNECT_FAILED_ERROR</li> </ul>",265],["solace.SolclientFactory","solace","solace.SolclientFactory.html","","A singleton used as the main factory for the messaging APIs. The very first operation by any application must be to initialize the API: <ul> <li>solace.SolclientFactory.init}</li> </ul> <i>SolclientFactory</i> provides methods to construct: <ul> <li>{@link solace.Session}</li> <li>{@link solace.Message}</li> <li>{@link solace.Destination</li> </ul> Additionally <i>SolclientFactory</i> manages the logging level in the API.",266],["solace.SolclientFactoryProfiles","solace","solace.SolclientFactoryProfiles.html","","The collection of predefined factory profiles available for application use. See each member for a description of its configuration.",267],["solace.StatType","solace","solace.StatType.html","","Statistics for sent/received messages and control operations.",268],["solace.TransportProtocol","solace","solace.TransportProtocol.html","","Connection scheme types referenced by solace.SessionProperties#transportProtocol}, {@link solace.SessionProperties#webTransportProtocolList} (browser only), and {@link solace.SessionProperties#transportProtocolInUse.",269],["solace.Version","solace","solace.Version.html","","Returns the API version. Use version, date and mode properties for build details. Use the summary property or the .toString() method to return a summary.",270],["module:solace/fsm","","module_solace_fsm.html","","",271]],"searchIndex":["solclientjs","solace.sessionproperties.default_cipher_suites","solace.abstractqueuedescriptor#gettype","solace.abstractqueuedescriptor#isdurable","solace.abstractqueuedescriptor#tostring","solace.cachecbinfo.cacherequestcallback","solace.cacherequestresult#geterror","solace.cacherequestresult#getreturncode","solace.cacherequestresult#getreturnsubcode","solace.cacherequestresult#gettopic","solace.cachesession#dispose","solace.cachesession#getproperties","solace.cachesession#sendcacherequest","solace.cachesessionproperties#getcachename","solace.cachesessionproperties#getmaxmessageagesec","solace.cachesessionproperties#getmaxmessages","solace.cachesessionproperties#gettimeoutmsec","solace.cachesessionproperties#setcachename","solace.cachesessionproperties#setmaxmessageagesec","solace.cachesessionproperties#setmaxmessages","solace.cachesessionproperties#settimeoutmsec","solace.destination#getname","solace.destination#gettype","solace.destination#tostring","solace.enum.nameof","solace.enum.values","solace.enum#describe","solace.enum#nameof","solace.logimpl.loggingcallback","solace.message#acknowledge","solace.message#dump","solace.message#getapplicationmessageid","solace.message#getapplicationmessagetype","solace.message#getbinaryattachment","solace.message#getcacherequestid","solace.message#getcachestatus","solace.message#getcorrelationid","solace.message#getcorrelationkey","solace.message#getdeliverycount","solace.message#getdeliverymode","solace.message#getdestination","solace.message#getgmexpiration","solace.message#getguaranteedmessageid","solace.message#getmessageconsumer","solace.message#getpriority","solace.message#getreceivertimestamp","solace.message#getreplicationgroupmessageid","solace.message#getreplyto","solace.message#getsdtcontainer","solace.message#getsenderid","solace.message#getsendertimestamp","solace.message#getsequencenumber","solace.message#gettimetolive","solace.message#gettopicsequencenumber","solace.message#gettype","solace.message#getusercos","solace.message#getuserdata","solace.message#getuserpropertymap","solace.message#getxmlcontent","solace.message#getxmlcontentdecoded","solace.message#getxmlmetadata","solace.message#isacknowledgeimmediately","solace.message#isdelivertoone","solace.message#isdiscardindication","solace.message#isdmqeligible","solace.message#iselidingeligible","solace.message#isredelivered","solace.message#isreplymessage","solace.message#reset","solace.message#setacknowledgeimmediately","solace.message#setapplicationmessageid","solace.message#setapplicationmessagetype","solace.message#setasreplymessage","solace.message#setbinaryattachment","solace.message#setcorrelationid","solace.message#setcorrelationkey","solace.message#setdelivertoone","solace.message#setdeliverymode","solace.message#setdestination","solace.message#setdmqeligible","solace.message#setelidingeligible","solace.message#setgmexpiration","solace.message#setpriority","solace.message#setreplyto","solace.message#setsdtcontainer","solace.message#setsenderid","solace.message#setsendertimestamp","solace.message#setsequencenumber","solace.message#settimetolive","solace.message#setusercos","solace.message#setuserdata","solace.message#setuserpropertymap","solace.message#setxmlcontent","solace.message#setxmlmetadata","solace.messageconsumer#addsubscription","solace.messageconsumer#clearstats","solace.messageconsumer#connect","solace.messageconsumer#disconnect","solace.messageconsumer#dispose","solace.messageconsumer#getdestination","solace.messageconsumer#getproperties","solace.messageconsumer#getstat","solace.messageconsumer#removesubscription","solace.messageconsumer#start","solace.messageconsumer#stop","solace.messageconsumer#tostring","solace.queuebrowser#connect","solace.queuebrowser#disconnect","solace.queuebrowser#removemessagefromqueue","solace.queuebrowser#start","solace.queuebrowser#stop","solace.queuedescriptor#getname","solace.queuedescriptor#tostring","solace.replaystartlocation#tostring","solace.replicationgroupmessageid#compare","solace.replicationgroupmessageid#tostring","solace.sdtfield.create","solace.sdtfield#gettype","solace.sdtfield#getvalue","solace.sdtmapcontainer#addfield","solace.sdtmapcontainer#deletefield","solace.sdtmapcontainer#getfield","solace.sdtmapcontainer#getkeys","solace.sdtstreamcontainer#addfield","solace.sdtstreamcontainer#getnext","solace.sdtstreamcontainer#hasnext","solace.sdtstreamcontainer#rewind","solace.session.replyreceivedcallback","solace.session.requestfailedcallback","solace.session#connect","solace.session#createcachesession","solace.session#createmessageconsumer","solace.session#createqueuebrowser","solace.session#disconnect","solace.session#dispose","solace.session#getcapability","solace.session#getsessionproperties","solace.session#getstat","solace.session#gettransportinfo","solace.session#iscapable","solace.session#resetstats","solace.session#send","solace.session#sendreply","solace.session#sendrequest","solace.session#subscribe","solace.session#unsubscribe","solace.session#unsubscribedurabletopicendpoint","solace.session#updateauthenticationonreconnect","solace.session#updateproperty","solace.sessionproperties#tostring","solace.solclientfactory.createdurablequeuedestination","solace.solclientfactory.createmessage","solace.solclientfactory.createreplaystartlocationbeginning","solace.solclientfactory.createreplaystartlocationdate","solace.solclientfactory.createreplicationgroupmessageid","solace.solclientfactory.createsession","solace.solclientfactory.createtopicdestination","solace.solclientfactory.getloglevel","solace.solclientfactory.init","solace.solclientfactory.setloglevel","solace.topic#getname","solace.topic#gettype","solace.topic#tostring","solace.messageconsumereventname#event:active","solace.messageconsumereventname#event:connect_failed_error","solace.messageconsumereventname#event:disposed","solace.messageconsumereventname#event:down","solace.messageconsumereventname#event:down_error","solace.messageconsumereventname#event:gm_disabled","solace.messageconsumereventname#event:inactive","solace.messageconsumereventname#event:message","solace.messageconsumereventname#event:reconnected","solace.messageconsumereventname#event:reconnecting","solace.messageconsumereventname#event:subscription_error","solace.messageconsumereventname#event:subscription_ok","solace.messageconsumereventname#event:up","solace.queuebrowsereventname#event:connect_failed_error","solace.queuebrowsereventname#event:disposed","solace.queuebrowsereventname#event:down","solace.queuebrowsereventname#event:down_error","solace.queuebrowsereventname#event:gm_disabled","solace.queuebrowsereventname#event:message","solace.queuebrowsereventname#event:up","solace.sessioneventcode#event:acknowledged_message","solace.sessioneventcode#event:can_accept_data","solace.sessioneventcode#event:connect_failed_error","solace.sessioneventcode#event:disconnected","solace.sessioneventcode#event:down_error","solace.sessioneventcode#event:guaranteed_message_publisher_down","solace.sessioneventcode#event:message","solace.sessioneventcode#event:property_update_error","solace.sessioneventcode#event:property_update_ok","solace.sessioneventcode#event:reconnected_notice","solace.sessioneventcode#event:reconnecting_notice","solace.sessioneventcode#event:rejected_message_error","solace.sessioneventcode#event:republishing_unacked_messages","solace.sessioneventcode#event:subscription_error","solace.sessioneventcode#event:subscription_ok","solace.sessioneventcode#event:unsubscribe_te_topic_error","solace.sessioneventcode#event:unsubscribe_te_topic_ok","solace.sessioneventcode#event:up_notice","solace.sessioneventcode#event:virtualrouter_name_changed","solace.enum","solace.abstractqueuedescriptor","solace.cachecbinfo","solace.cacherequestresult","solace.cachesession","solace.cachesessionproperties","solace.destination","solace.logimpl","solace.message","solace.messageconsumer","solace.messageconsumerevent","solace.messageconsumerproperties","solace.messagepublisherproperties","solace.messagerxcbinfo","solace.notimplementederror","solace.operationerror","solace.queuebrowser","solace.queuebrowserproperties","solace.queuedescriptor","solace.queueproperties","solace.replaystartlocation","solace.replaystartlocationbeginning","solace.replaystartlocationdate","solace.replicationgroupmessageid","solace.requesterror","solace.sdtfield","solace.sdtmapcontainer","solace.sdtstreamcontainer","solace.sdtunsupportedvalueerror","solace.session","solace.sessionevent","solace.sessioneventcbinfo","solace.sessionproperties","solace.solaceerror","solace.solclientfactoryproperties","solace.topic","solace","solace.authenticationscheme","solace.cachelivedataaction","solace.cachereturncode","solace.cachereturnsubcode","solace.capabilitytype","solace.clientcapabilitytype","solace.destinationtype","solace.errorsubcode","solace.loglevel","solace.messagecachestatus","solace.messageconsumeracknowledgemode","solace.messageconsumereventname","solace.messagedeliverymodetype","solace.messagedumpflag","solace.messagepublisheracknowledgemode","solace.messagetype","solace.messageusercostype","solace.mutablesessionproperty","solace.queueaccesstype","solace.queuebrowsereventname","solace.queuediscardbehavior","solace.queuepermissions","solace.queuetype","solace.requesteventcode","solace.sdtfieldtype","solace.sdtvalueerrorsubcode","solace.sessioneventcode","solace.solclientfactory","solace.solclientfactoryprofiles","solace.stattype","solace.transportprotocol","solace.version","module:solace/fsm"],"longSearchIndex":["solclientjs","solace.sessionproperties.default_cipher_suites","solace.abstractqueuedescriptor#gettype","solace.abstractqueuedescriptor#isdurable","solace.abstractqueuedescriptor#tostring","solace.cachecbinfo.cacherequestcallback","solace.cacherequestresult#geterror","solace.cacherequestresult#getreturncode","solace.cacherequestresult#getreturnsubcode","solace.cacherequestresult#gettopic","solace.cachesession#dispose","solace.cachesession#getproperties","solace.cachesession#sendcacherequest","solace.cachesessionproperties#getcachename","solace.cachesessionproperties#getmaxmessageagesec","solace.cachesessionproperties#getmaxmessages","solace.cachesessionproperties#gettimeoutmsec","solace.cachesessionproperties#setcachename","solace.cachesessionproperties#setmaxmessageagesec","solace.cachesessionproperties#setmaxmessages","solace.cachesessionproperties#settimeoutmsec","solace.destination#getname","solace.destination#gettype","solace.destination#tostring","solace.enum.nameof","solace.enum.values","solace.enum#describe","solace.enum#nameof","solace.logimpl.loggingcallback","solace.message#acknowledge","solace.message#dump","solace.message#getapplicationmessageid","solace.message#getapplicationmessagetype","solace.message#getbinaryattachment","solace.message#getcacherequestid","solace.message#getcachestatus","solace.message#getcorrelationid","solace.message#getcorrelationkey","solace.message#getdeliverycount","solace.message#getdeliverymode","solace.message#getdestination","solace.message#getgmexpiration","solace.message#getguaranteedmessageid","solace.message#getmessageconsumer","solace.message#getpriority","solace.message#getreceivertimestamp","solace.message#getreplicationgroupmessageid","solace.message#getreplyto","solace.message#getsdtcontainer","solace.message#getsenderid","solace.message#getsendertimestamp","solace.message#getsequencenumber","solace.message#gettimetolive","solace.message#gettopicsequencenumber","solace.message#gettype","solace.message#getusercos","solace.message#getuserdata","solace.message#getuserpropertymap","solace.message#getxmlcontent","solace.message#getxmlcontentdecoded","solace.message#getxmlmetadata","solace.message#isacknowledgeimmediately","solace.message#isdelivertoone","solace.message#isdiscardindication","solace.message#isdmqeligible","solace.message#iselidingeligible","solace.message#isredelivered","solace.message#isreplymessage","solace.message#reset","solace.message#setacknowledgeimmediately","solace.message#setapplicationmessageid","solace.message#setapplicationmessagetype","solace.message#setasreplymessage","solace.message#setbinaryattachment","solace.message#setcorrelationid","solace.message#setcorrelationkey","solace.message#setdelivertoone","solace.message#setdeliverymode","solace.message#setdestination","solace.message#setdmqeligible","solace.message#setelidingeligible","solace.message#setgmexpiration","solace.message#setpriority","solace.message#setreplyto","solace.message#setsdtcontainer","solace.message#setsenderid","solace.message#setsendertimestamp","solace.message#setsequencenumber","solace.message#settimetolive","solace.message#setusercos","solace.message#setuserdata","solace.message#setuserpropertymap","solace.message#setxmlcontent","solace.message#setxmlmetadata","solace.messageconsumer#addsubscription","solace.messageconsumer#clearstats","solace.messageconsumer#connect","solace.messageconsumer#disconnect","solace.messageconsumer#dispose","solace.messageconsumer#getdestination","solace.messageconsumer#getproperties","solace.messageconsumer#getstat","solace.messageconsumer#removesubscription","solace.messageconsumer#start","solace.messageconsumer#stop","solace.messageconsumer#tostring","solace.queuebrowser#connect","solace.queuebrowser#disconnect","solace.queuebrowser#removemessagefromqueue","solace.queuebrowser#start","solace.queuebrowser#stop","solace.queuedescriptor#getname","solace.queuedescriptor#tostring","solace.replaystartlocation#tostring","solace.replicationgroupmessageid#compare","solace.replicationgroupmessageid#tostring","solace.sdtfield.create","solace.sdtfield#gettype","solace.sdtfield#getvalue","solace.sdtmapcontainer#addfield","solace.sdtmapcontainer#deletefield","solace.sdtmapcontainer#getfield","solace.sdtmapcontainer#getkeys","solace.sdtstreamcontainer#addfield","solace.sdtstreamcontainer#getnext","solace.sdtstreamcontainer#hasnext","solace.sdtstreamcontainer#rewind","solace.session.replyreceivedcallback","solace.session.requestfailedcallback","solace.session#connect","solace.session#createcachesession","solace.session#createmessageconsumer","solace.session#createqueuebrowser","solace.session#disconnect","solace.session#dispose","solace.session#getcapability","solace.session#getsessionproperties","solace.session#getstat","solace.session#gettransportinfo","solace.session#iscapable","solace.session#resetstats","solace.session#send","solace.session#sendreply","solace.session#sendrequest","solace.session#subscribe","solace.session#unsubscribe","solace.session#unsubscribedurabletopicendpoint","solace.session#updateauthenticationonreconnect","solace.session#updateproperty","solace.sessionproperties#tostring","solace.solclientfactory.createdurablequeuedestination","solace.solclientfactory.createmessage","solace.solclientfactory.createreplaystartlocationbeginning","solace.solclientfactory.createreplaystartlocationdate","solace.solclientfactory.createreplicationgroupmessageid","solace.solclientfactory.createsession","solace.solclientfactory.createtopicdestination","solace.solclientfactory.getloglevel","solace.solclientfactory.init","solace.solclientfactory.setloglevel","solace.topic#getname","solace.topic#gettype","solace.topic#tostring","solace.messageconsumereventname#event:active","solace.messageconsumereventname#event:connect_failed_error","solace.messageconsumereventname#event:disposed","solace.messageconsumereventname#event:down","solace.messageconsumereventname#event:down_error","solace.messageconsumereventname#event:gm_disabled","solace.messageconsumereventname#event:inactive","solace.messageconsumereventname#event:message","solace.messageconsumereventname#event:reconnected","solace.messageconsumereventname#event:reconnecting","solace.messageconsumereventname#event:subscription_error","solace.messageconsumereventname#event:subscription_ok","solace.messageconsumereventname#event:up","solace.queuebrowsereventname#event:connect_failed_error","solace.queuebrowsereventname#event:disposed","solace.queuebrowsereventname#event:down","solace.queuebrowsereventname#event:down_error","solace.queuebrowsereventname#event:gm_disabled","solace.queuebrowsereventname#event:message","solace.queuebrowsereventname#event:up","solace.sessioneventcode#event:acknowledged_message","solace.sessioneventcode#event:can_accept_data","solace.sessioneventcode#event:connect_failed_error","solace.sessioneventcode#event:disconnected","solace.sessioneventcode#event:down_error","solace.sessioneventcode#event:guaranteed_message_publisher_down","solace.sessioneventcode#event:message","solace.sessioneventcode#event:property_update_error","solace.sessioneventcode#event:property_update_ok","solace.sessioneventcode#event:reconnected_notice","solace.sessioneventcode#event:reconnecting_notice","solace.sessioneventcode#event:rejected_message_error","solace.sessioneventcode#event:republishing_unacked_messages","solace.sessioneventcode#event:subscription_error","solace.sessioneventcode#event:subscription_ok","solace.sessioneventcode#event:unsubscribe_te_topic_error","solace.sessioneventcode#event:unsubscribe_te_topic_ok","solace.sessioneventcode#event:up_notice","solace.sessioneventcode#event:virtualrouter_name_changed","solace.enum","solace.abstractqueuedescriptor","solace.cachecbinfo","solace.cacherequestresult","solace.cachesession","solace.cachesessionproperties","solace.destination","solace.logimpl","solace.message","solace.messageconsumer","solace.messageconsumerevent","solace.messageconsumerproperties","solace.messagepublisherproperties","solace.messagerxcbinfo","solace.notimplementederror","solace.operationerror","solace.queuebrowser","solace.queuebrowserproperties","solace.queuedescriptor","solace.queueproperties","solace.replaystartlocation","solace.replaystartlocationbeginning","solace.replaystartlocationdate","solace.replicationgroupmessageid","solace.requesterror","solace.sdtfield","solace.sdtmapcontainer","solace.sdtstreamcontainer","solace.sdtunsupportedvalueerror","solace.session","solace.sessionevent","solace.sessioneventcbinfo","solace.sessionproperties","solace.solaceerror","solace.solclientfactoryproperties","solace.topic","solace","solace.authenticationscheme","solace.cachelivedataaction","solace.cachereturncode","solace.cachereturnsubcode","solace.capabilitytype","solace.clientcapabilitytype","solace.destinationtype","solace.errorsubcode","solace.loglevel","solace.messagecachestatus","solace.messageconsumeracknowledgemode","solace.messageconsumereventname","solace.messagedeliverymodetype","solace.messagedumpflag","solace.messagepublisheracknowledgemode","solace.messagetype","solace.messageusercostype","solace.mutablesessionproperty","solace.queueaccesstype","solace.queuebrowsereventname","solace.queuediscardbehavior","solace.queuepermissions","solace.queuetype","solace.requesteventcode","solace.sdtfieldtype","solace.sdtvalueerrorsubcode","solace.sessioneventcode","solace.solclientfactory","solace.solclientfactoryprofiles","solace.stattype","solace.transportprotocol","solace.version","module:solace/fsm"]};}catch(e){if(console && console.log){ console.log(e);}}